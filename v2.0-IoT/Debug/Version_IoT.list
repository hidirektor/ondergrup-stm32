
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8a4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  0800ea88  0800ea88  0000fa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f878  0800f878  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f878  0800f878  00010878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f880  0800f880  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f880  0800f880  00010880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f884  0800f884  00010884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f888  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  20000fd0  08010858  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002174  08010858  00012174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8a4  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6b  00000000  00000000  0002c89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbf0  00000000  00000000  0003287c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da0e  00000000  00000000  0004f46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d88  00000000  00000000  0006ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dc02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab8  00000000  00000000  0010dc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00113700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ea70 	.word	0x0800ea70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800ea70 	.word	0x0800ea70

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	200011f0 	.word	0x200011f0
 80004ac:	20001294 	.word	0x20001294
 80004b0:	200016eb 	.word	0x200016eb
 80004b4:	20001295 	.word	0x20001295
 80004b8:	200016c1 	.word	0x200016c1
 80004bc:	200016c4 	.word	0x200016c4
 80004c0:	200016c5 	.word	0x200016c5
 80004c4:	200016c6 	.word	0x200016c6
 80004c8:	200016c7 	.word	0x200016c7
 80004cc:	200016c8 	.word	0x200016c8
 80004d0:	200016c9 	.word	0x200016c9
 80004d4:	200016d9 	.word	0x200016d9
 80004d8:	200016ca 	.word	0x200016ca
 80004dc:	200016da 	.word	0x200016da
 80004e0:	200016cb 	.word	0x200016cb
 80004e4:	200016db 	.word	0x200016db
 80004e8:	200016ce 	.word	0x200016ce
 80004ec:	200016cf 	.word	0x200016cf
 80004f0:	200016d0 	.word	0x200016d0
 80004f4:	200016d1 	.word	0x200016d1
 80004f8:	200016d2 	.word	0x200016d2
 80004fc:	200016d3 	.word	0x200016d3
 8000500:	200016d4 	.word	0x200016d4
 8000504:	200016d5 	.word	0x200016d5
 8000508:	200016d6 	.word	0x200016d6
 800050c:	200016d7 	.word	0x200016d7
 8000510:	200016d8 	.word	0x200016d8
 8000514:	200016dc 	.word	0x200016dc
 8000518:	200016de 	.word	0x200016de
 800051c:	200016b8 	.word	0x200016b8
 8000520:	200016b9 	.word	0x200016b9
 8000524:	200016ba 	.word	0x200016ba
 8000528:	200016bb 	.word	0x200016bb
 800052c:	200016e0 	.word	0x200016e0
 8000530:	200016cd 	.word	0x200016cd
 8000534:	200016df 	.word	0x200016df
 8000538:	200016cc 	.word	0x200016cc
 800053c:	200016e1 	.word	0x200016e1
 8000540:	200016e2 	.word	0x200016e2
 8000544:	200016e3 	.word	0x200016e3
 8000548:	200016e4 	.word	0x200016e4
 800054c:	200016e5 	.word	0x200016e5
 8000550:	200016e6 	.word	0x200016e6
 8000554:	200016e7 	.word	0x200016e7
 8000558:	200016e8 	.word	0x200016e8
 800055c:	200016e9 	.word	0x200016e9
 8000560:	200016ea 	.word	0x200016ea
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fb87 	bl	8009d50 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fb81 	bl	8009d50 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fb7b 	bl	8009d50 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 feb0 	bl	80063c4 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200016cf 	.word	0x200016cf
 800066c:	200016d0 	.word	0x200016d0
 8000670:	200016d1 	.word	0x200016d1
 8000674:	200016d2 	.word	0x200016d2
 8000678:	200016d3 	.word	0x200016d3
 800067c:	200016d4 	.word	0x200016d4
 8000680:	200016d5 	.word	0x200016d5
 8000684:	200016d6 	.word	0x200016d6
 8000688:	200016d7 	.word	0x200016d7
 800068c:	200016d8 	.word	0x200016d8
 8000690:	200016dc 	.word	0x200016dc
 8000694:	200016de 	.word	0x200016de
 8000698:	200016df 	.word	0x200016df
 800069c:	200016e0 	.word	0x200016e0
 80006a0:	200016eb 	.word	0x200016eb

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fdcc 	bl	8009260 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fb40 	bl	8009d50 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fdf2 	bl	80092b8 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200011f0 	.word	0x200011f0
 80006e0:	20001e64 	.word	0x20001e64

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fb83 	bl	800ae7c <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fd6b 	bl	8009260 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 fad2 	bl	8009d50 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001f40 	.word	0x20001f40
 80007c4:	0800ea88 	.word	0x0800ea88

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fc0b 	bl	800b070 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fcf9 	bl	8009260 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001f40 	.word	0x20001f40
 80008a4:	0800ea9c 	.word	0x0800ea9c

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	200011f0 	.word	0x200011f0
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001268 	.word	0x20001268
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001274 	.word	0x20001274
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001284 	.word	0x20001284

080009ac <ESP8266_Init>:
#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

// ESP8266'yı WiFi ağına bağlamak için kullanılan fonksiyon
void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
    Wifi_FactoryReset(huart);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 fb0f 	bl	8000fdc <Wifi_FactoryReset>
    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c2:	f009 f9c5 	bl	8009d50 <HAL_Delay>

    Wifi_Restart(huart);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 fae2 	bl	8000f90 <Wifi_Restart>
    HAL_Delay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d0:	f009 f9be 	bl	8009d50 <HAL_Delay>

    Wifi_Init(huart);
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 faa7 	bl	8000f28 <Wifi_Init>
    HAL_Delay(2000);
 80009da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009de:	f009 f9b7 	bl	8009d50 <HAL_Delay>

    Wifi_SetMode(huart, WifiMode_Station);
 80009e2:	2101      	movs	r1, #1
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 fb1f 	bl	8001028 <Wifi_SetMode>
    HAL_Delay(2000);
 80009ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ee:	f009 f9af 	bl	8009d50 <HAL_Delay>

    Wifi_Station_ConnectToAp(huart, (char *)wifiSS, (char *)wifiPA, NULL);
 80009f2:	2300      	movs	r3, #0
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 fb45 	bl	8001088 <Wifi_Station_ConnectToAp>
    HAL_Delay(2000);
 80009fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a02:	f009 f9a5 	bl	8009d50 <HAL_Delay>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <sendMachineData>:
    Wifi_TcpIp_Close(huart, 0);
    HAL_Delay(2000);
}

// Makine verilerini sunucuya göndermek için kullanılan fonksiyon
void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000a16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000a18:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000a1c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000a20:	6020      	str	r0, [r4, #0]
 8000a22:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000a26:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000a2a:	6001      	str	r1, [r0, #0]
 8000a2c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000a30:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000a34:	600a      	str	r2, [r1, #0]
 8000a36:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000a3a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000a3e:	6013      	str	r3, [r2, #0]
    char local_txA[1500];
    char local_txB[50];
    int len;

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8000a40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a44:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000a48:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f00d fbfb 	bl	800e24a <strncpy>
    subMachineID[12] = '\0';
 8000a54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a58:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a60:	4a9d      	ldr	r2, [pc, #628]	@ (8000cd8 <sendMachineData+0x2c8>)
 8000a62:	499e      	ldr	r1, [pc, #632]	@ (8000cdc <sendMachineData+0x2cc>)
 8000a64:	489e      	ldr	r0, [pc, #632]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a66:	f00d fb7f 	bl	800e168 <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t *)bufferTX, strlen(bufferTX));
 8000a6a:	489d      	ldr	r0, [pc, #628]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a6c:	f7ff fbda 	bl	8000224 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a78:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000a7c:	4998      	ldr	r1, [pc, #608]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00c fb53 	bl	800d12a <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a88:	f009 f962 	bl	8009d50 <HAL_Delay>

    sprintf(local_txA,
 8000a8c:	4b95      	ldr	r3, [pc, #596]	@ (8000ce4 <sendMachineData+0x2d4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a94:	4b94      	ldr	r3, [pc, #592]	@ (8000ce8 <sendMachineData+0x2d8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a9c:	4b93      	ldr	r3, [pc, #588]	@ (8000cec <sendMachineData+0x2dc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aa4:	4b92      	ldr	r3, [pc, #584]	@ (8000cf0 <sendMachineData+0x2e0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000aac:	4b91      	ldr	r3, [pc, #580]	@ (8000cf4 <sendMachineData+0x2e4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ab2:	4b91      	ldr	r3, [pc, #580]	@ (8000cf8 <sendMachineData+0x2e8>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ab8:	4b90      	ldr	r3, [pc, #576]	@ (8000cfc <sendMachineData+0x2ec>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000abe:	4b90      	ldr	r3, [pc, #576]	@ (8000d00 <sendMachineData+0x2f0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8000d04 <sendMachineData+0x2f4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000aca:	4b8f      	ldr	r3, [pc, #572]	@ (8000d08 <sendMachineData+0x2f8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d0c <sendMachineData+0x2fc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8000d10 <sendMachineData+0x300>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8000adc:	4b8d      	ldr	r3, [pc, #564]	@ (8000d14 <sendMachineData+0x304>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8000d18 <sendMachineData+0x308>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d1c <sendMachineData+0x30c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000aee:	4b8c      	ldr	r3, [pc, #560]	@ (8000d20 <sendMachineData+0x310>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000af4:	4b8b      	ldr	r3, [pc, #556]	@ (8000d24 <sendMachineData+0x314>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000afa:	4b8b      	ldr	r3, [pc, #556]	@ (8000d28 <sendMachineData+0x318>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b00:	4b8a      	ldr	r3, [pc, #552]	@ (8000d2c <sendMachineData+0x31c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	4b8a      	ldr	r3, [pc, #552]	@ (8000d30 <sendMachineData+0x320>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b0c:	4b89      	ldr	r3, [pc, #548]	@ (8000d34 <sendMachineData+0x324>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b12:	4b89      	ldr	r3, [pc, #548]	@ (8000d38 <sendMachineData+0x328>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b18:	4b88      	ldr	r3, [pc, #544]	@ (8000d3c <sendMachineData+0x32c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b1e:	4b88      	ldr	r3, [pc, #544]	@ (8000d40 <sendMachineData+0x330>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b24:	4b87      	ldr	r3, [pc, #540]	@ (8000d44 <sendMachineData+0x334>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b2a:	4b87      	ldr	r3, [pc, #540]	@ (8000d48 <sendMachineData+0x338>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b30:	4b86      	ldr	r3, [pc, #536]	@ (8000d4c <sendMachineData+0x33c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b36:	4b86      	ldr	r3, [pc, #536]	@ (8000d50 <sendMachineData+0x340>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	4b85      	ldr	r3, [pc, #532]	@ (8000d54 <sendMachineData+0x344>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <sendMachineData+0x348>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	61bb      	str	r3, [r7, #24]
        "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b48:	4b84      	ldr	r3, [pc, #528]	@ (8000d5c <sendMachineData+0x34c>)
 8000b4a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    sprintf(local_txA,
 8000b4e:	617b      	str	r3, [r7, #20]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b50:	4b82      	ldr	r3, [pc, #520]	@ (8000d5c <sendMachineData+0x34c>)
 8000b52:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    sprintf(local_txA,
 8000b56:	613b      	str	r3, [r7, #16]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b58:	4b80      	ldr	r3, [pc, #512]	@ (8000d5c <sendMachineData+0x34c>)
 8000b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    sprintf(local_txA,
 8000b5e:	60fb      	str	r3, [r7, #12]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	@ (8000d5c <sendMachineData+0x34c>)
 8000b62:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    sprintf(local_txA,
 8000b66:	60bb      	str	r3, [r7, #8]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b68:	4b7c      	ldr	r3, [pc, #496]	@ (8000d5c <sendMachineData+0x34c>)
 8000b6a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    sprintf(local_txA,
 8000b6e:	607b      	str	r3, [r7, #4]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b70:	4b7a      	ldr	r3, [pc, #488]	@ (8000d5c <sendMachineData+0x34c>)
 8000b72:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    sprintf(local_txA,
 8000b76:	603b      	str	r3, [r7, #0]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b78:	4b78      	ldr	r3, [pc, #480]	@ (8000d5c <sendMachineData+0x34c>)
 8000b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    sprintf(local_txA,
 8000b7e:	461e      	mov	r6, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b80:	4b76      	ldr	r3, [pc, #472]	@ (8000d5c <sendMachineData+0x34c>)
 8000b82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    sprintf(local_txA,
 8000b86:	4618      	mov	r0, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b88:	4b74      	ldr	r3, [pc, #464]	@ (8000d5c <sendMachineData+0x34c>)
 8000b8a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    sprintf(local_txA,
 8000b8e:	4619      	mov	r1, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b90:	4b72      	ldr	r3, [pc, #456]	@ (8000d5c <sendMachineData+0x34c>)
 8000b92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    sprintf(local_txA,
 8000b96:	461a      	mov	r2, r3
 8000b98:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b9c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000ba0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000ba4:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8000d60 <sendMachineData+0x350>)
 8000baa:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000bac:	233c      	movs	r3, #60	@ 0x3c
 8000bae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000bb0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000bb2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000bb4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000bb6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	9224      	str	r2, [sp, #144]	@ 0x90
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	9220      	str	r2, [sp, #128]	@ 0x80
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000bd8:	6a3a      	ldr	r2, [r7, #32]
 8000bda:	921c      	str	r2, [sp, #112]	@ 0x70
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000be2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000be6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bea:	9218      	str	r2, [sp, #96]	@ 0x60
 8000bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bf2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bf6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000bfa:	9214      	str	r2, [sp, #80]	@ 0x50
 8000bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bfe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c02:	9212      	str	r2, [sp, #72]	@ 0x48
 8000c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c06:	9211      	str	r2, [sp, #68]	@ 0x44
 8000c08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c0a:	9210      	str	r2, [sp, #64]	@ 0x40
 8000c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8000c14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000c16:	920d      	str	r2, [sp, #52]	@ 0x34
 8000c18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000c1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000c20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c22:	920a      	str	r2, [sp, #40]	@ 0x28
 8000c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000c2a:	9208      	str	r2, [sp, #32]
 8000c2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c2e:	9207      	str	r2, [sp, #28]
 8000c30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c32:	9206      	str	r2, [sp, #24]
 8000c34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c36:	9205      	str	r2, [sp, #20]
 8000c38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000c3c:	9204      	str	r2, [sp, #16]
 8000c3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000c42:	9203      	str	r2, [sp, #12]
 8000c44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c54:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4940      	ldr	r1, [pc, #256]	@ (8000d64 <sendMachineData+0x354>)
 8000c62:	4628      	mov	r0, r5
 8000c64:	f00d fa80 	bl	800e168 <siprintf>

    len = strlen(local_txA);
 8000c68:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fad9 	bl	8000224 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000c78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c7c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000c80:	4939      	ldr	r1, [pc, #228]	@ (8000d68 <sendMachineData+0x358>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00d fa70 	bl	800e168 <siprintf>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txB, strlen(local_txB));
 8000c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fac9 	bl	8000224 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000c9a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c9e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f00c fa41 	bl	800d12a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cac:	f009 f850 	bl	8009d50 <HAL_Delay>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txA, strlen(local_txA));
 8000cb0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fab5 	bl	8000224 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000cc2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000cc6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f00c fa2d 	bl	800d12a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000cd0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cd4:	e04a      	b.n	8000d6c <sendMachineData+0x35c>
 8000cd6:	bf00      	nop
 8000cd8:	0800eb30 	.word	0x0800eb30
 8000cdc:	0800eb40 	.word	0x0800eb40
 8000ce0:	20001728 	.word	0x20001728
 8000ce4:	200016cf 	.word	0x200016cf
 8000ce8:	200016c1 	.word	0x200016c1
 8000cec:	200016c4 	.word	0x200016c4
 8000cf0:	200016c5 	.word	0x200016c5
 8000cf4:	200016c6 	.word	0x200016c6
 8000cf8:	200016cd 	.word	0x200016cd
 8000cfc:	200016c7 	.word	0x200016c7
 8000d00:	200016c8 	.word	0x200016c8
 8000d04:	200016cc 	.word	0x200016cc
 8000d08:	200016c9 	.word	0x200016c9
 8000d0c:	200016d9 	.word	0x200016d9
 8000d10:	200016ca 	.word	0x200016ca
 8000d14:	200016da 	.word	0x200016da
 8000d18:	200016cb 	.word	0x200016cb
 8000d1c:	200016db 	.word	0x200016db
 8000d20:	200016ce 	.word	0x200016ce
 8000d24:	200016d0 	.word	0x200016d0
 8000d28:	200016d1 	.word	0x200016d1
 8000d2c:	200016d2 	.word	0x200016d2
 8000d30:	200016d3 	.word	0x200016d3
 8000d34:	200016d4 	.word	0x200016d4
 8000d38:	200016d5 	.word	0x200016d5
 8000d3c:	200016d6 	.word	0x200016d6
 8000d40:	200016d7 	.word	0x200016d7
 8000d44:	200016d8 	.word	0x200016d8
 8000d48:	200016dc 	.word	0x200016dc
 8000d4c:	200016de 	.word	0x200016de
 8000d50:	200016b8 	.word	0x200016b8
 8000d54:	200016b9 	.word	0x200016b9
 8000d58:	200016e0 	.word	0x200016e0
 8000d5c:	200011f0 	.word	0x200011f0
 8000d60:	0800ee90 	.word	0x0800ee90
 8000d64:	0800eb60 	.word	0x0800eb60
 8000d68:	0800eea4 	.word	0x0800eea4
 8000d6c:	f008 fff0 	bl	8009d50 <HAL_Delay>
}
 8000d70:	bf00      	nop
 8000d72:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7a:	bf00      	nop

08000d7c <Wifi_SendString>:
void Wifi_RxClear(void) {
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
    Wifi_RxBufferIndex = 0;  // Ayrıca buffer indexi sıfırlayın
}

bool Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY) == HAL_OK;
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff fa4c 	bl	8000224 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f00c f8b2 	bl	800cf00 <HAL_UART_Transmit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Wifi_WaitForString>:

bool Wifi_WaitForString(UART_HandleTypeDef *huart, uint32_t TimeOut_ms, uint8_t *result, uint8_t CountOfParameter, ...) {
 8000db0:	b408      	push	{r3}
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b089      	sub	sp, #36	@ 0x24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000dbe:	f008 ffbd 	bl	8009d3c <HAL_GetTick>
 8000dc2:	6178      	str	r0, [r7, #20]
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
 8000dc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc8:	2100      	movs	r1, #0
 8000dca:	482b      	ldr	r0, [pc, #172]	@ (8000e78 <Wifi_WaitForString+0xc8>)
 8000dcc:	f00d fa66 	bl	800e29c <memset>
    int index = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    va_list args;
    va_start(args, CountOfParameter);
 8000dd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd8:	613b      	str	r3, [r7, #16]

    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000dda:	e03a      	b.n	8000e52 <Wifi_WaitForString+0xa2>
        if (HAL_UART_Receive(huart, (uint8_t *)&esp8266_rx_buffer[index], 1, 100) == HAL_OK) {
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	4a26      	ldr	r2, [pc, #152]	@ (8000e78 <Wifi_WaitForString+0xc8>)
 8000de0:	1899      	adds	r1, r3, r2
 8000de2:	2364      	movs	r3, #100	@ 0x64
 8000de4:	2201      	movs	r2, #1
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f00c f90d 	bl	800d006 <HAL_UART_Receive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d124      	bne.n	8000e3c <Wifi_WaitForString+0x8c>
            if (esp8266_rx_buffer[index] == '\n') {
 8000df2:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <Wifi_WaitForString+0xc8>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d11a      	bne.n	8000e34 <Wifi_WaitForString+0x84>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	76fb      	strb	r3, [r7, #27]
 8000e02:	e012      	b.n	8000e2a <Wifi_WaitForString+0x7a>
                    if (strstr(esp8266_rx_buffer, va_arg(args, char *)) != NULL) {
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	613a      	str	r2, [r7, #16]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <Wifi_WaitForString+0xc8>)
 8000e10:	f00d fa2e 	bl	800e270 <strstr>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <Wifi_WaitForString+0x74>
                        *result = i;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7efa      	ldrb	r2, [r7, #27]
 8000e1e:	701a      	strb	r2, [r3, #0]
                        va_end(args);
                        return true;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e022      	b.n	8000e6a <Wifi_WaitForString+0xba>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000e24:	7efb      	ldrb	r3, [r7, #27]
 8000e26:	3301      	adds	r3, #1
 8000e28:	76fb      	strb	r3, [r7, #27]
 8000e2a:	7efa      	ldrb	r2, [r7, #27]
 8000e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3e7      	bcc.n	8000e04 <Wifi_WaitForString+0x54>
                    }
                }
            }
            index++;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e00a      	b.n	8000e52 <Wifi_WaitForString+0xa2>
        } else {
            // Eğer UART alımında hata oluşursa bu durumu yönetin.
            HAL_UART_AbortReceive(huart);  // Hatalı durumu temizle
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f00c f9ce 	bl	800d1de <HAL_UART_AbortReceive>
            HAL_UART_Receive_IT(huart, (uint8_t *)&esp8266_rx_buffer[index], 1); // Tekrar başlat
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <Wifi_WaitForString+0xc8>)
 8000e46:	4413      	add	r3, r2
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f00c f9a1 	bl	800d194 <HAL_UART_Receive_IT>
    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000e52:	f008 ff73 	bl	8009d3c <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d8bc      	bhi.n	8000ddc <Wifi_WaitForString+0x2c>
        }
    }
    *result = 0xFF;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	22ff      	movs	r2, #255	@ 0xff
 8000e66:	701a      	strb	r2, [r3, #0]
    va_end(args);
    return false;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e74:	b001      	add	sp, #4
 8000e76:	4770      	bx	lr
 8000e78:	20001298 	.word	0x20001298

08000e7c <Wifi_RxCallBack>:

void Wifi_RxCallBack(UART_HandleTypeDef *huart) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    uint8_t receivedByte;

    if (HAL_UART_Receive_IT(huart, &receivedByte, 1) == HAL_OK) {
 8000e84:	f107 030f 	add.w	r3, r7, #15
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f00c f981 	bl	800d194 <HAL_UART_Receive_IT>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d126      	bne.n	8000ee6 <Wifi_RxCallBack+0x6a>
        if (Wifi_RxBufferIndex >= WIFI_RX_BUFFER_SIZE) {
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ea0:	d302      	bcc.n	8000ea8 <Wifi_RxCallBack+0x2c>
            Wifi_RxBufferIndex = 0;  // Bu aşamada veriyi yeniden başlatmak yerine işleyin
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
        }

        Wifi_RxBuffer[Wifi_RxBufferIndex++] = receivedByte;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	b291      	uxth	r1, r2
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000eb2:	8011      	strh	r1, [r2, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	7bf9      	ldrb	r1, [r7, #15]
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <Wifi_RxCallBack+0x78>)
 8000eba:	5499      	strb	r1, [r3, r2]

        if (receivedByte == '\n' || receivedByte == '\r') {
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d002      	beq.n	8000ec8 <Wifi_RxCallBack+0x4c>
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b0d      	cmp	r3, #13
 8000ec6:	d10e      	bne.n	8000ee6 <Wifi_RxCallBack+0x6a>
            Wifi_ProcessReceivedData(Wifi_RxBuffer, Wifi_RxBufferIndex);
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <Wifi_RxCallBack+0x78>)
 8000ed0:	f000 f812 	bl	8000ef8 <Wifi_ProcessReceivedData>
            Wifi_RxBufferIndex = 0;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <Wifi_RxCallBack+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	801a      	strh	r2, [r3, #0]
            memset(Wifi_RxBuffer, 0, WIFI_RX_BUFFER_SIZE);
 8000eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <Wifi_RxCallBack+0x78>)
 8000ee2:	f00d f9db 	bl	800e29c <memset>
        }
    } else {
        // Hatalı alım durumunu işleyin, belki bir hata sayacı ekleyin
    }
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200011ec 	.word	0x200011ec
 8000ef4:	20000fec 	.word	0x20000fec

08000ef8 <Wifi_ProcessReceivedData>:

void Wifi_ProcessReceivedData(uint8_t* buffer, uint16_t length) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
    memcpy(esp8266_rx_buffer, buffer, length);
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	461a      	mov	r2, r3
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <Wifi_ProcessReceivedData+0x28>)
 8000f0c:	f00d fa0a 	bl	800e324 <memcpy>

    if (strstr((char*)buffer, "OK") != NULL) {
 8000f10:	4904      	ldr	r1, [pc, #16]	@ (8000f24 <Wifi_ProcessReceivedData+0x2c>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f00d f9ac 	bl	800e270 <strstr>
        // "OK" yanıtı bulundu, diğer işlemler yapılabilir
    }

    // Daha fazla işleme gerek duyuluyorsa buraya ekleyin
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20001298 	.word	0x20001298
 8000f24:	0800f454 	.word	0x0800f454

08000f28 <Wifi_Init>:

bool Wifi_Init(UART_HandleTypeDef *huart) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
    if (!Wifi_SendString(huart, "AT\r\n")) {
 8000f30:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <Wifi_Init+0x5c>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff22 	bl	8000d7c <Wifi_SendString>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <Wifi_Init+0x20>
        return false;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e019      	b.n	8000f7c <Wifi_Init+0x54>
    }

    uint8_t result;
    if (!Wifi_WaitForString(huart, 2000, &result, 2, "OK", "ERROR")) {
 8000f48:	f107 020f 	add.w	r2, r7, #15
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <Wifi_Init+0x60>)
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <Wifi_Init+0x64>)
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2302      	movs	r3, #2
 8000f56:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff28 	bl	8000db0 <Wifi_WaitForString>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <Wifi_Init+0x48>
        return false;  // Yanıt alınmadıysa false döndürün
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e005      	b.n	8000f7c <Wifi_Init+0x54>
    }

    if (result == 1) {
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <Wifi_Init+0x52>
        // "ERROR" yanıtı alındı
        return false;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <Wifi_Init+0x54>
    }

    return true;  // "OK" yanıtı alındıysa true döndürün
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0800f458 	.word	0x0800f458
 8000f88:	0800f460 	.word	0x0800f460
 8000f8c:	0800f454 	.word	0x0800f454

08000f90 <Wifi_Restart>:

void Wifi_Disable(void) {
    // Wifi kapama işlemleri buraya eklenecek
}

bool Wifi_Restart(UART_HandleTypeDef *huart) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RST\r\n") &&
 8000f98:	490e      	ldr	r1, [pc, #56]	@ (8000fd4 <Wifi_Restart+0x44>)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff feee 	bl	8000d7c <Wifi_SendString>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00d      	beq.n	8000fc2 <Wifi_Restart+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <Wifi_Restart+0x48>)
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2200      	movs	r2, #0
 8000fae:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fefc 	bl	8000db0 <Wifi_WaitForString>
 8000fb8:	4603      	mov	r3, r0
    return Wifi_SendString(huart, "AT+RST\r\n") &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <Wifi_Restart+0x32>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <Wifi_Restart+0x34>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0800f468 	.word	0x0800f468
 8000fd8:	0800f454 	.word	0x0800f454

08000fdc <Wifi_FactoryReset>:
    sprintf(cmd, "AT+GSLP=%d\r\n", DelayMs);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_FactoryReset(UART_HandleTypeDef *huart) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RESTORE\r\n") &&
 8000fe4:	490e      	ldr	r1, [pc, #56]	@ (8001020 <Wifi_FactoryReset+0x44>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fec8 	bl	8000d7c <Wifi_SendString>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <Wifi_FactoryReset+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <Wifi_FactoryReset+0x48>)
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fed6 	bl	8000db0 <Wifi_WaitForString>
 8001004:	4603      	mov	r3, r0
    return Wifi_SendString(huart, "AT+RESTORE\r\n") &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <Wifi_FactoryReset+0x32>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <Wifi_FactoryReset+0x34>
 800100e:	2300      	movs	r3, #0
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800f484 	.word	0x0800f484
 8001024:	0800f454 	.word	0x0800f454

08001028 <Wifi_SetMode>:
    sprintf(cmd, "AT+RFPOWER=%d\r\n", Power_0_to_82);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_SetMode(UART_HandleTypeDef *huart, WifiMode_t WifiMode_) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
    char cmd[32];
    sprintf(cmd, "AT+CWMODE=%d\r\n", WifiMode_);
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4911      	ldr	r1, [pc, #68]	@ (8001080 <Wifi_SetMode+0x58>)
 800103c:	4618      	mov	r0, r3
 800103e:	f00d f893 	bl	800e168 <siprintf>
    return Wifi_SendString(huart, cmd) &&
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fe97 	bl	8000d7c <Wifi_SendString>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00d      	beq.n	8001070 <Wifi_SetMode+0x48>
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <Wifi_SetMode+0x5c>)
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fea5 	bl	8000db0 <Wifi_WaitForString>
 8001066:	4603      	mov	r3, r0
    return Wifi_SendString(huart, cmd) &&
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <Wifi_SetMode+0x48>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <Wifi_SetMode+0x4a>
 8001070:	2300      	movs	r3, #0
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800f4b4 	.word	0x0800f4b4
 8001084:	0800f454 	.word	0x0800f454

08001088 <Wifi_Station_ConnectToAp>:
bool Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, "AT+CIFSR\r\n"); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass, char *MAC) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b0c9      	sub	sp, #292	@ 0x124
 800108c:	af02      	add	r7, sp, #8
 800108e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8001092:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001096:	6020      	str	r0, [r4, #0]
 8001098:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800109c:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 80010a0:	6001      	str	r1, [r0, #0]
 80010a2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80010a6:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80010aa:	600a      	str	r2, [r1, #0]
 80010ac:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80010b0:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80010b4:	6013      	str	r3, [r2, #0]
    char cmd[256];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Pass);
 80010b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010be:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80010c2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80010c6:	f107 0018 	add.w	r0, r7, #24
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	491b      	ldr	r1, [pc, #108]	@ (800113c <Wifi_Station_ConnectToAp+0xb4>)
 80010d0:	f00d f84a 	bl	800e168 <siprintf>

    // Gönderme başarılı olduysa yanıt bekleyin
    if (Wifi_SendString(huart, cmd)) {
 80010d4:	f107 0218 	add.w	r2, r7, #24
 80010d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010e0:	4611      	mov	r1, r2
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f7ff fe4a 	bl	8000d7c <Wifi_SendString>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01f      	beq.n	800112e <Wifi_Station_ConnectToAp+0xa6>
        uint8_t result;
        if (Wifi_WaitForString(huart, 20000, &result, 2, "OK", "FAIL")) {
 80010ee:	f107 0217 	add.w	r2, r7, #23
 80010f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010f6:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <Wifi_Station_ConnectToAp+0xb8>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <Wifi_Station_ConnectToAp+0xbc>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2302      	movs	r3, #2
 8001104:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001108:	6800      	ldr	r0, [r0, #0]
 800110a:	f7ff fe51 	bl	8000db0 <Wifi_WaitForString>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00a      	beq.n	800112a <Wifi_Station_ConnectToAp+0xa2>
            if (result == 0) {
 8001114:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001118:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <Wifi_Station_ConnectToAp+0x9e>
                // "OK" yanıtı alındı
                return true;
 8001122:	2301      	movs	r3, #1
 8001124:	e004      	b.n	8001130 <Wifi_Station_ConnectToAp+0xa8>
            } else {
                // "FAIL" yanıtı alındı
                return false;
 8001126:	2300      	movs	r3, #0
 8001128:	e002      	b.n	8001130 <Wifi_Station_ConnectToAp+0xa8>
            }
        } else {
            // Zaman aşımına uğradı
            return false;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <Wifi_Station_ConnectToAp+0xa8>
        }
    }

    // Gönderme başarısız olduysa false döndürün
    return false;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	0800f4e0 	.word	0x0800f4e0
 8001140:	0800f4f8 	.word	0x0800f4f8
 8001144:	0800f454 	.word	0x0800f454

08001148 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af04      	add	r7, sp, #16
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <hata2EEPROM+0xa0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <hata2EEPROM+0xa4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a24      	ldr	r2, [pc, #144]	@ (80011f0 <hata2EEPROM+0xa8>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8001166:	f000 f8d1 	bl	800130c <eepromDataFillWithEmpty>
		goto veriEkleme;
 800116a:	e000      	b.n	800116e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800116c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e012      	b.n	800119a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <hata2EEPROM+0xa4>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <hata2EEPROM+0xa8>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8001184:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <hata2EEPROM+0xa4>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	4918      	ldr	r1, [pc, #96]	@ (80011f0 <hata2EEPROM+0xa8>)
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	54ca      	strb	r2, [r1, r3]
					break;
 8001192:	e007      	b.n	80011a4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <hata2EEPROM+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbe7      	blt.n	8001174 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <hata2EEPROM+0xa4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	b299      	uxth	r1, r3
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <hata2EEPROM+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b298      	uxth	r0, r3
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <hata2EEPROM+0xa4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <hata2EEPROM+0xa8>)
 80011b6:	4413      	add	r3, r2
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <hata2EEPROM+0xa0>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	b292      	uxth	r2, r2
 80011be:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80011c2:	9402      	str	r4, [sp, #8]
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4603      	mov	r3, r0
 80011ca:	460a      	mov	r2, r1
 80011cc:	21a0      	movs	r1, #160	@ 0xa0
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <hata2EEPROM+0xac>)
 80011d0:	f009 fe54 	bl	800ae7c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80011d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d8:	f008 fdba 	bl	8009d50 <HAL_Delay>
	eepromKontrol();
 80011dc:	f7ff f82a 	bl	8000234 <eepromKontrol>
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20000094 	.word	0x20000094
 80011ec:	20000098 	.word	0x20000098
 80011f0:	200011f0 	.word	0x200011f0
 80011f4:	20001f40 	.word	0x20001f40

080011f8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10f      	bne.n	8001228 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8001208:	4a38      	ldr	r2, [pc, #224]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 800120a:	2101      	movs	r1, #1
 800120c:	2001      	movs	r0, #1
 800120e:	f008 f827 	bl	8009260 <lcd_print>
		lcd_print(2, 1, "1");
 8001212:	4a37      	ldr	r2, [pc, #220]	@ (80012f0 <hataKoduLcdGoster+0xf8>)
 8001214:	2101      	movs	r1, #1
 8001216:	2002      	movs	r0, #2
 8001218:	f008 f822 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 800121c:	4a35      	ldr	r2, [pc, #212]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 800121e:	2107      	movs	r1, #7
 8001220:	2002      	movs	r0, #2
 8001222:	f008 f81d 	bl	8009260 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8001226:	e05d      	b.n	80012e4 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d10f      	bne.n	800124e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 800122e:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 8001230:	2101      	movs	r1, #1
 8001232:	2001      	movs	r0, #1
 8001234:	f008 f814 	bl	8009260 <lcd_print>
		lcd_print(2, 2, "2");
 8001238:	4a2f      	ldr	r2, [pc, #188]	@ (80012f8 <hataKoduLcdGoster+0x100>)
 800123a:	2102      	movs	r1, #2
 800123c:	2002      	movs	r0, #2
 800123e:	f008 f80f 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 8001242:	4a2c      	ldr	r2, [pc, #176]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 8001244:	2107      	movs	r1, #7
 8001246:	2002      	movs	r0, #2
 8001248:	f008 f80a 	bl	8009260 <lcd_print>
}
 800124c:	e04a      	b.n	80012e4 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d10f      	bne.n	8001274 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8001254:	4a25      	ldr	r2, [pc, #148]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 8001256:	2101      	movs	r1, #1
 8001258:	2001      	movs	r0, #1
 800125a:	f008 f801 	bl	8009260 <lcd_print>
		lcd_print(2, 3, "3");
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <hataKoduLcdGoster+0x104>)
 8001260:	2103      	movs	r1, #3
 8001262:	2002      	movs	r0, #2
 8001264:	f007 fffc 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 800126a:	2107      	movs	r1, #7
 800126c:	2002      	movs	r0, #2
 800126e:	f007 fff7 	bl	8009260 <lcd_print>
}
 8001272:	e037      	b.n	80012e4 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d10f      	bne.n	800129a <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 800127a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 800127c:	2101      	movs	r1, #1
 800127e:	2001      	movs	r0, #1
 8001280:	f007 ffee 	bl	8009260 <lcd_print>
		lcd_print(2, 4, "4");
 8001284:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <hataKoduLcdGoster+0x108>)
 8001286:	2104      	movs	r1, #4
 8001288:	2002      	movs	r0, #2
 800128a:	f007 ffe9 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 800128e:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 8001290:	2107      	movs	r1, #7
 8001292:	2002      	movs	r0, #2
 8001294:	f007 ffe4 	bl	8009260 <lcd_print>
}
 8001298:	e024      	b.n	80012e4 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10f      	bne.n	80012c0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	2001      	movs	r0, #1
 80012a6:	f007 ffdb 	bl	8009260 <lcd_print>
		lcd_print(2, 5, "5");
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <hataKoduLcdGoster+0x10c>)
 80012ac:	2105      	movs	r1, #5
 80012ae:	2002      	movs	r0, #2
 80012b0:	f007 ffd6 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 80012b6:	2107      	movs	r1, #7
 80012b8:	2002      	movs	r0, #2
 80012ba:	f007 ffd1 	bl	8009260 <lcd_print>
}
 80012be:	e011      	b.n	80012e4 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d10e      	bne.n	80012e4 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <hataKoduLcdGoster+0xf4>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	2001      	movs	r0, #1
 80012cc:	f007 ffc8 	bl	8009260 <lcd_print>
		lcd_print(2, 6, "6");
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <hataKoduLcdGoster+0x110>)
 80012d2:	2106      	movs	r1, #6
 80012d4:	2002      	movs	r0, #2
 80012d6:	f007 ffc3 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "          ");
 80012da:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <hataKoduLcdGoster+0xfc>)
 80012dc:	2107      	movs	r1, #7
 80012de:	2002      	movs	r0, #2
 80012e0:	f007 ffbe 	bl	8009260 <lcd_print>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20001eb4 	.word	0x20001eb4
 80012f0:	0800f660 	.word	0x0800f660
 80012f4:	0800f664 	.word	0x0800f664
 80012f8:	0800f670 	.word	0x0800f670
 80012fc:	0800f674 	.word	0x0800f674
 8001300:	0800f678 	.word	0x0800f678
 8001304:	0800f67c 	.word	0x0800f67c
 8001308:	0800f680 	.word	0x0800f680

0800130c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e009      	b.n	800132c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <eepromDataFillWithEmpty+0x38>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <eepromDataFillWithEmpty+0x3c>)
 8001322:	2100      	movs	r1, #0
 8001324:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3301      	adds	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <eepromDataFillWithEmpty+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf0      	blt.n	8001318 <eepromDataFillWithEmpty+0xc>
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000006c 	.word	0x2000006c
 8001348:	200011f0 	.word	0x200011f0
 800134c:	20000094 	.word	0x20000094

08001350 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8001362:	4b50      	ldr	r3, [pc, #320]	@ (80014a4 <i2cTest+0x154>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b4e      	ldr	r3, [pc, #312]	@ (80014a4 <i2cTest+0x154>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8001372:	484c      	ldr	r0, [pc, #304]	@ (80014a4 <i2cTest+0x154>)
 8001374:	f009 fc54 	bl	800ac20 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001378:	23c0      	movs	r3, #192	@ 0xc0
 800137a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800137c:	2311      	movs	r3, #17
 800137e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4846      	ldr	r0, [pc, #280]	@ (80014a8 <i2cTest+0x158>)
 800138e:	f009 f85b 	bl	800a448 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	@ 0x40
 8001396:	4844      	ldr	r0, [pc, #272]	@ (80014a8 <i2cTest+0x158>)
 8001398:	f009 facd 	bl	800a936 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	4841      	ldr	r0, [pc, #260]	@ (80014a8 <i2cTest+0x158>)
 80013a2:	f009 fac8 	bl	800a936 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f008 fcd2 	bl	8009d50 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80013ac:	bf00      	nop
 80013ae:	2140      	movs	r1, #64	@ 0x40
 80013b0:	483d      	ldr	r0, [pc, #244]	@ (80014a8 <i2cTest+0x158>)
 80013b2:	f009 faa9 	bl	800a908 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d006      	beq.n	80013ca <i2cTest+0x7a>
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	483a      	ldr	r0, [pc, #232]	@ (80014a8 <i2cTest+0x158>)
 80013c0:	f009 faa2 	bl	800a908 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d1f1      	bne.n	80013ae <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	4836      	ldr	r0, [pc, #216]	@ (80014a8 <i2cTest+0x158>)
 80013d0:	f009 fab1 	bl	800a936 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80013d4:	200a      	movs	r0, #10
 80013d6:	f008 fcbb 	bl	8009d50 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80013da:	bf00      	nop
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	4832      	ldr	r0, [pc, #200]	@ (80014a8 <i2cTest+0x158>)
 80013e0:	f009 fa92 	bl	800a908 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0f8      	beq.n	80013dc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	@ 0x40
 80013ee:	482e      	ldr	r0, [pc, #184]	@ (80014a8 <i2cTest+0x158>)
 80013f0:	f009 faa1 	bl	800a936 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80013f4:	200a      	movs	r0, #10
 80013f6:	f008 fcab 	bl	8009d50 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80013fa:	bf00      	nop
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	482a      	ldr	r0, [pc, #168]	@ (80014a8 <i2cTest+0x158>)
 8001400:	f009 fa82 	bl	800a908 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d0f8      	beq.n	80013fc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2140      	movs	r1, #64	@ 0x40
 800140e:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <i2cTest+0x158>)
 8001410:	f009 fa91 	bl	800a936 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001414:	200a      	movs	r0, #10
 8001416:	f008 fc9b 	bl	8009d50 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800141a:	bf00      	nop
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	4822      	ldr	r0, [pc, #136]	@ (80014a8 <i2cTest+0x158>)
 8001420:	f009 fa72 	bl	800a908 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d1f8      	bne.n	800141c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2180      	movs	r1, #128	@ 0x80
 800142e:	481e      	ldr	r0, [pc, #120]	@ (80014a8 <i2cTest+0x158>)
 8001430:	f009 fa81 	bl	800a936 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001434:	200a      	movs	r0, #10
 8001436:	f008 fc8b 	bl	8009d50 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800143a:	bf00      	nop
 800143c:	2180      	movs	r1, #128	@ 0x80
 800143e:	481a      	ldr	r0, [pc, #104]	@ (80014a8 <i2cTest+0x158>)
 8001440:	f009 fa62 	bl	800a908 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d1f8      	bne.n	800143c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144a:	23c0      	movs	r3, #192	@ 0xc0
 800144c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800144e:	2312      	movs	r3, #18
 8001450:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <i2cTest+0x158>)
 8001460:	f008 fff2 	bl	800a448 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <i2cTest+0x154>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <i2cTest+0x154>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001472:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <i2cTest+0x154>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <i2cTest+0x154>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001482:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <i2cTest+0x154>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <i2cTest+0x154>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <i2cTest+0x154>)
 8001496:	f009 fa7f 	bl	800a998 <HAL_I2C_Init>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20001f40 	.word	0x20001f40
 80014a8:	40010c00 	.word	0x40010c00

080014ac <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80014b6:	20c8      	movs	r0, #200	@ 0xc8
 80014b8:	f008 fc4a 	bl	8009d50 <HAL_Delay>
	lcd_clear();
 80014bc:	f007 fefc 	bl	80092b8 <lcd_clear>
	if(type == 1 && page == 0) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d13e      	bne.n	8001544 <printTemplate+0x98>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d13b      	bne.n	8001544 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 80014cc:	4a9a      	ldr	r2, [pc, #616]	@ (8001738 <printTemplate+0x28c>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	2001      	movs	r0, #1
 80014d2:	f007 fec5 	bl	8009260 <lcd_print>
		lcd_print(2, 3, "0");
 80014d6:	4a99      	ldr	r2, [pc, #612]	@ (800173c <printTemplate+0x290>)
 80014d8:	2103      	movs	r1, #3
 80014da:	2002      	movs	r0, #2
 80014dc:	f007 fec0 	bl	8009260 <lcd_print>
		lcd_print(2, 4, "1");
 80014e0:	4a97      	ldr	r2, [pc, #604]	@ (8001740 <printTemplate+0x294>)
 80014e2:	2104      	movs	r1, #4
 80014e4:	2002      	movs	r0, #2
 80014e6:	f007 febb 	bl	8009260 <lcd_print>
		lcd_print(2, 5, "2");
 80014ea:	4a96      	ldr	r2, [pc, #600]	@ (8001744 <printTemplate+0x298>)
 80014ec:	2105      	movs	r1, #5
 80014ee:	2002      	movs	r0, #2
 80014f0:	f007 feb6 	bl	8009260 <lcd_print>
		lcd_print(2, 6, "3");
 80014f4:	4a94      	ldr	r2, [pc, #592]	@ (8001748 <printTemplate+0x29c>)
 80014f6:	2106      	movs	r1, #6
 80014f8:	2002      	movs	r0, #2
 80014fa:	f007 feb1 	bl	8009260 <lcd_print>
		lcd_print(2, 7, "4");
 80014fe:	4a93      	ldr	r2, [pc, #588]	@ (800174c <printTemplate+0x2a0>)
 8001500:	2107      	movs	r1, #7
 8001502:	2002      	movs	r0, #2
 8001504:	f007 feac 	bl	8009260 <lcd_print>
		lcd_print(2, 10, "5");
 8001508:	4a91      	ldr	r2, [pc, #580]	@ (8001750 <printTemplate+0x2a4>)
 800150a:	210a      	movs	r1, #10
 800150c:	2002      	movs	r0, #2
 800150e:	f007 fea7 	bl	8009260 <lcd_print>
		lcd_print(2, 11, "6");
 8001512:	4a90      	ldr	r2, [pc, #576]	@ (8001754 <printTemplate+0x2a8>)
 8001514:	210b      	movs	r1, #11
 8001516:	2002      	movs	r0, #2
 8001518:	f007 fea2 	bl	8009260 <lcd_print>
		lcd_print(2, 12, "7");
 800151c:	4a8e      	ldr	r2, [pc, #568]	@ (8001758 <printTemplate+0x2ac>)
 800151e:	210c      	movs	r1, #12
 8001520:	2002      	movs	r0, #2
 8001522:	f007 fe9d 	bl	8009260 <lcd_print>
		lcd_print(2, 13, "8");
 8001526:	4a8d      	ldr	r2, [pc, #564]	@ (800175c <printTemplate+0x2b0>)
 8001528:	210d      	movs	r1, #13
 800152a:	2002      	movs	r0, #2
 800152c:	f007 fe98 	bl	8009260 <lcd_print>
		lcd_print(2, 14, "9");
 8001530:	4a8b      	ldr	r2, [pc, #556]	@ (8001760 <printTemplate+0x2b4>)
 8001532:	210e      	movs	r1, #14
 8001534:	2002      	movs	r0, #2
 8001536:	f007 fe93 	bl	8009260 <lcd_print>
		lcd_gotoxy(2, 3);
 800153a:	2103      	movs	r1, #3
 800153c:	2002      	movs	r0, #2
 800153e:	f007 fe70 	bl	8009222 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8001542:	e0f5      	b.n	8001730 <printTemplate+0x284>
	} else if(type == 2) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d178      	bne.n	800163c <printTemplate+0x190>
		if(page == 1) {
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d114      	bne.n	800157a <printTemplate+0xce>
			lcd_clear();
 8001550:	f007 feb2 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	@ 0x64
 8001556:	f008 fbfb 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800155a:	4a82      	ldr	r2, [pc, #520]	@ (8001764 <printTemplate+0x2b8>)
 800155c:	2101      	movs	r1, #1
 800155e:	2001      	movs	r0, #1
 8001560:	f007 fe7e 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001564:	4a80      	ldr	r2, [pc, #512]	@ (8001768 <printTemplate+0x2bc>)
 8001566:	2107      	movs	r1, #7
 8001568:	2001      	movs	r0, #1
 800156a:	f007 fe79 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800156e:	4a7f      	ldr	r2, [pc, #508]	@ (800176c <printTemplate+0x2c0>)
 8001570:	2101      	movs	r1, #1
 8001572:	2002      	movs	r0, #2
 8001574:	f007 fe74 	bl	8009260 <lcd_print>
}
 8001578:	e0da      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 2) {
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d114      	bne.n	80015aa <printTemplate+0xfe>
			lcd_clear();
 8001580:	f007 fe9a 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	@ 0x64
 8001586:	f008 fbe3 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800158a:	4a79      	ldr	r2, [pc, #484]	@ (8001770 <printTemplate+0x2c4>)
 800158c:	2101      	movs	r1, #1
 800158e:	2001      	movs	r0, #1
 8001590:	f007 fe66 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001594:	4a74      	ldr	r2, [pc, #464]	@ (8001768 <printTemplate+0x2bc>)
 8001596:	2107      	movs	r1, #7
 8001598:	2001      	movs	r0, #1
 800159a:	f007 fe61 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800159e:	4a75      	ldr	r2, [pc, #468]	@ (8001774 <printTemplate+0x2c8>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	2002      	movs	r0, #2
 80015a4:	f007 fe5c 	bl	8009260 <lcd_print>
}
 80015a8:	e0c2      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 3) {
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d114      	bne.n	80015da <printTemplate+0x12e>
			lcd_clear();
 80015b0:	f007 fe82 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f008 fbcb 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80015ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001764 <printTemplate+0x2b8>)
 80015bc:	2101      	movs	r1, #1
 80015be:	2001      	movs	r0, #1
 80015c0:	f007 fe4e 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80015c4:	4a68      	ldr	r2, [pc, #416]	@ (8001768 <printTemplate+0x2bc>)
 80015c6:	2107      	movs	r1, #7
 80015c8:	2001      	movs	r0, #1
 80015ca:	f007 fe49 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80015ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <printTemplate+0x2cc>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	2002      	movs	r0, #2
 80015d4:	f007 fe44 	bl	8009260 <lcd_print>
}
 80015d8:	e0aa      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 4) {
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d114      	bne.n	800160a <printTemplate+0x15e>
			lcd_clear();
 80015e0:	f007 fe6a 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 80015e4:	2064      	movs	r0, #100	@ 0x64
 80015e6:	f008 fbb3 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80015ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001764 <printTemplate+0x2b8>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f007 fe36 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80015f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001768 <printTemplate+0x2bc>)
 80015f6:	2107      	movs	r1, #7
 80015f8:	2001      	movs	r0, #1
 80015fa:	f007 fe31 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80015fe:	4a5f      	ldr	r2, [pc, #380]	@ (800177c <printTemplate+0x2d0>)
 8001600:	2101      	movs	r1, #1
 8001602:	2002      	movs	r0, #2
 8001604:	f007 fe2c 	bl	8009260 <lcd_print>
}
 8001608:	e092      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 5) {
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b05      	cmp	r3, #5
 800160e:	f040 808f 	bne.w	8001730 <printTemplate+0x284>
			lcd_clear();
 8001612:	f007 fe51 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 8001616:	2064      	movs	r0, #100	@ 0x64
 8001618:	f008 fb9a 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800161c:	4a51      	ldr	r2, [pc, #324]	@ (8001764 <printTemplate+0x2b8>)
 800161e:	2101      	movs	r1, #1
 8001620:	2001      	movs	r0, #1
 8001622:	f007 fe1d 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001626:	4a50      	ldr	r2, [pc, #320]	@ (8001768 <printTemplate+0x2bc>)
 8001628:	2107      	movs	r1, #7
 800162a:	2001      	movs	r0, #1
 800162c:	f007 fe18 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001630:	4a53      	ldr	r2, [pc, #332]	@ (8001780 <printTemplate+0x2d4>)
 8001632:	2101      	movs	r1, #1
 8001634:	2002      	movs	r0, #2
 8001636:	f007 fe13 	bl	8009260 <lcd_print>
}
 800163a:	e079      	b.n	8001730 <printTemplate+0x284>
	} else if(type == 3) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d176      	bne.n	8001730 <printTemplate+0x284>
		if(page == 1) {
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d114      	bne.n	8001672 <printTemplate+0x1c6>
			lcd_clear();
 8001648:	f007 fe36 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f008 fb7f 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001652:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <printTemplate+0x2d8>)
 8001654:	2101      	movs	r1, #1
 8001656:	2001      	movs	r0, #1
 8001658:	f007 fe02 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800165c:	4a4a      	ldr	r2, [pc, #296]	@ (8001788 <printTemplate+0x2dc>)
 800165e:	2107      	movs	r1, #7
 8001660:	2001      	movs	r0, #1
 8001662:	f007 fdfd 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001666:	4a41      	ldr	r2, [pc, #260]	@ (800176c <printTemplate+0x2c0>)
 8001668:	2101      	movs	r1, #1
 800166a:	2002      	movs	r0, #2
 800166c:	f007 fdf8 	bl	8009260 <lcd_print>
}
 8001670:	e05e      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 2) {
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d114      	bne.n	80016a2 <printTemplate+0x1f6>
			lcd_clear();
 8001678:	f007 fe1e 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 800167c:	2064      	movs	r0, #100	@ 0x64
 800167e:	f008 fb67 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001682:	4a40      	ldr	r2, [pc, #256]	@ (8001784 <printTemplate+0x2d8>)
 8001684:	2101      	movs	r1, #1
 8001686:	2001      	movs	r0, #1
 8001688:	f007 fdea 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800168c:	4a3e      	ldr	r2, [pc, #248]	@ (8001788 <printTemplate+0x2dc>)
 800168e:	2107      	movs	r1, #7
 8001690:	2001      	movs	r0, #1
 8001692:	f007 fde5 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001696:	4a37      	ldr	r2, [pc, #220]	@ (8001774 <printTemplate+0x2c8>)
 8001698:	2101      	movs	r1, #1
 800169a:	2002      	movs	r0, #2
 800169c:	f007 fde0 	bl	8009260 <lcd_print>
}
 80016a0:	e046      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 3) {
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d114      	bne.n	80016d2 <printTemplate+0x226>
			lcd_clear();
 80016a8:	f007 fe06 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	@ 0x64
 80016ae:	f008 fb4f 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <printTemplate+0x2d8>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	2001      	movs	r0, #1
 80016b8:	f007 fdd2 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80016bc:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <printTemplate+0x2dc>)
 80016be:	2107      	movs	r1, #7
 80016c0:	2001      	movs	r0, #1
 80016c2:	f007 fdcd 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80016c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <printTemplate+0x2cc>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	2002      	movs	r0, #2
 80016cc:	f007 fdc8 	bl	8009260 <lcd_print>
}
 80016d0:	e02e      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 4) {
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d114      	bne.n	8001702 <printTemplate+0x256>
			lcd_clear();
 80016d8:	f007 fdee 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 80016dc:	2064      	movs	r0, #100	@ 0x64
 80016de:	f008 fb37 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80016e2:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <printTemplate+0x2d8>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2001      	movs	r0, #1
 80016e8:	f007 fdba 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80016ec:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <printTemplate+0x2dc>)
 80016ee:	2107      	movs	r1, #7
 80016f0:	2001      	movs	r0, #1
 80016f2:	f007 fdb5 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80016f6:	4a21      	ldr	r2, [pc, #132]	@ (800177c <printTemplate+0x2d0>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	2002      	movs	r0, #2
 80016fc:	f007 fdb0 	bl	8009260 <lcd_print>
}
 8001700:	e016      	b.n	8001730 <printTemplate+0x284>
		} else if(page == 5) {
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d113      	bne.n	8001730 <printTemplate+0x284>
			lcd_clear();
 8001708:	f007 fdd6 	bl	80092b8 <lcd_clear>
			HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	@ 0x64
 800170e:	f008 fb1f 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001712:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <printTemplate+0x2d8>)
 8001714:	2101      	movs	r1, #1
 8001716:	2001      	movs	r0, #1
 8001718:	f007 fda2 	bl	8009260 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800171c:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <printTemplate+0x2dc>)
 800171e:	2107      	movs	r1, #7
 8001720:	2001      	movs	r0, #1
 8001722:	f007 fd9d 	bl	8009260 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001726:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <printTemplate+0x2d4>)
 8001728:	2101      	movs	r1, #1
 800172a:	2002      	movs	r0, #2
 800172c:	f007 fd98 	bl	8009260 <lcd_print>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	0800f684 	.word	0x0800f684
 800173c:	0800f68c 	.word	0x0800f68c
 8001740:	0800f690 	.word	0x0800f690
 8001744:	0800f694 	.word	0x0800f694
 8001748:	0800f698 	.word	0x0800f698
 800174c:	0800f69c 	.word	0x0800f69c
 8001750:	0800f6a0 	.word	0x0800f6a0
 8001754:	0800f6a4 	.word	0x0800f6a4
 8001758:	0800f6a8 	.word	0x0800f6a8
 800175c:	0800f6ac 	.word	0x0800f6ac
 8001760:	0800f6b0 	.word	0x0800f6b0
 8001764:	0800f6b4 	.word	0x0800f6b4
 8001768:	20001274 	.word	0x20001274
 800176c:	0800f6c8 	.word	0x0800f6c8
 8001770:	0800f6dc 	.word	0x0800f6dc
 8001774:	0800f6e4 	.word	0x0800f6e4
 8001778:	0800f6f8 	.word	0x0800f6f8
 800177c:	0800f70c 	.word	0x0800f70c
 8001780:	0800f720 	.word	0x0800f720
 8001784:	0800f734 	.word	0x0800f734
 8001788:	20001284 	.word	0x20001284

0800178c <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10a      	bne.n	80017b0 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 800179a:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <printCredentials+0x70>)
 800179c:	2101      	movs	r1, #1
 800179e:	2002      	movs	r0, #2
 80017a0:	f007 fd5e 	bl	8009260 <lcd_print>
		lcd_print(2, 13, "    ");
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <printCredentials+0x74>)
 80017a6:	210d      	movs	r1, #13
 80017a8:	2002      	movs	r0, #2
 80017aa:	f007 fd59 	bl	8009260 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80017ae:	e021      	b.n	80017f4 <printCredentials+0x68>
	} else if(type == 2) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d10f      	bne.n	80017d6 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <printCredentials+0x78>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	2001      	movs	r0, #1
 80017bc:	f007 fd50 	bl	8009260 <lcd_print>
		lcd_print(2, 1, "                ");
 80017c0:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <printCredentials+0x7c>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	2002      	movs	r0, #2
 80017c6:	f007 fd4b 	bl	8009260 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <printCredentials+0x80>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	2002      	movs	r0, #2
 80017d0:	f007 fd46 	bl	8009260 <lcd_print>
}
 80017d4:	e00e      	b.n	80017f4 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <printCredentials+0x84>)
 80017d8:	2101      	movs	r1, #1
 80017da:	2001      	movs	r0, #1
 80017dc:	f007 fd40 	bl	8009260 <lcd_print>
		lcd_print(2, 1, "                ");
 80017e0:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <printCredentials+0x7c>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f007 fd3b 	bl	8009260 <lcd_print>
		lcd_print(2, 1, wifiPass);
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <printCredentials+0x88>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	2002      	movs	r0, #2
 80017f0:	f007 fd36 	bl	8009260 <lcd_print>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20001268 	.word	0x20001268
 8001800:	0800f748 	.word	0x0800f748
 8001804:	0800f750 	.word	0x0800f750
 8001808:	0800f764 	.word	0x0800f764
 800180c:	20001274 	.word	0x20001274
 8001810:	0800f778 	.word	0x0800f778
 8001814:	20001284 	.word	0x20001284

08001818 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <__NVIC_SystemReset+0x24>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800182a:	4904      	ldr	r1, [pc, #16]	@ (800183c <__NVIC_SystemReset+0x24>)
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <__NVIC_SystemReset+0x28>)
 800182e:	4313      	orrs	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001832:	f3bf 8f4f 	dsb	sy
}
 8001836:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <__NVIC_SystemReset+0x20>
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	05fa0004 	.word	0x05fa0004

08001844 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800184a:	2101      	movs	r1, #1
 800184c:	488e      	ldr	r0, [pc, #568]	@ (8001a88 <menu+0x244>)
 800184e:	f009 f85b 	bl	800a908 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 8099 	bne.w	800198c <menu+0x148>
 800185a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <menu+0x248>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	f083 0301 	eor.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8091 	beq.w	800198c <menu+0x148>
		menuSayac = menuSayac+1;
 800186a:	4b89      	ldr	r3, [pc, #548]	@ (8001a90 <menu+0x24c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b87      	ldr	r3, [pc, #540]	@ (8001a90 <menu+0x24c>)
 8001874:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001876:	4b86      	ldr	r3, [pc, #536]	@ (8001a90 <menu+0x24c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b24      	cmp	r3, #36	@ 0x24
 800187c:	d102      	bne.n	8001884 <menu+0x40>
			menuSayac = 1;
 800187e:	4b84      	ldr	r3, [pc, #528]	@ (8001a90 <menu+0x24c>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001884:	4b82      	ldr	r3, [pc, #520]	@ (8001a90 <menu+0x24c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d106      	bne.n	800189a <menu+0x56>
 800188c:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <menu+0x250>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <menu+0x56>
			menuSayac = 21;
 8001894:	4b7e      	ldr	r3, [pc, #504]	@ (8001a90 <menu+0x24c>)
 8001896:	2215      	movs	r2, #21
 8001898:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800189a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a90 <menu+0x24c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d106      	bne.n	80018b0 <menu+0x6c>
 80018a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001a98 <menu+0x254>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <menu+0x6c>
			menuSayac = 16;
 80018aa:	4b79      	ldr	r3, [pc, #484]	@ (8001a90 <menu+0x24c>)
 80018ac:	2210      	movs	r2, #16
 80018ae:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80018b0:	4b77      	ldr	r3, [pc, #476]	@ (8001a90 <menu+0x24c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b0d      	cmp	r3, #13
 80018b6:	d106      	bne.n	80018c6 <menu+0x82>
 80018b8:	4b77      	ldr	r3, [pc, #476]	@ (8001a98 <menu+0x254>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <menu+0x82>
			menuSayac = 16;
 80018c0:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <menu+0x24c>)
 80018c2:	2210      	movs	r2, #16
 80018c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80018c6:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <menu+0x24c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	d106      	bne.n	80018dc <menu+0x98>
 80018ce:	4b72      	ldr	r3, [pc, #456]	@ (8001a98 <menu+0x254>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d102      	bne.n	80018dc <menu+0x98>
			menuSayac = 13;
 80018d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a90 <menu+0x24c>)
 80018d8:	220d      	movs	r2, #13
 80018da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <menu+0x24c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b0a      	cmp	r3, #10
 80018e2:	d10a      	bne.n	80018fa <menu+0xb6>
 80018e4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a9c <menu+0x258>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d003      	beq.n	80018f4 <menu+0xb0>
 80018ec:	4b6b      	ldr	r3, [pc, #428]	@ (8001a9c <menu+0x258>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d102      	bne.n	80018fa <menu+0xb6>
			menuSayac = 11;
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <menu+0x24c>)
 80018f6:	220b      	movs	r2, #11
 80018f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80018fa:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <menu+0x24c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d10e      	bne.n	8001920 <menu+0xdc>
 8001902:	4b67      	ldr	r3, [pc, #412]	@ (8001aa0 <menu+0x25c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d003      	beq.n	8001912 <menu+0xce>
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <menu+0x25c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d106      	bne.n	8001920 <menu+0xdc>
 8001912:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <menu+0x254>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d102      	bne.n	8001920 <menu+0xdc>
			menuSayac = 16;
 800191a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <menu+0x24c>)
 800191c:	2210      	movs	r2, #16
 800191e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001920:	4b5b      	ldr	r3, [pc, #364]	@ (8001a90 <menu+0x24c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d10e      	bne.n	8001946 <menu+0x102>
 8001928:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa0 <menu+0x25c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d003      	beq.n	8001938 <menu+0xf4>
 8001930:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa0 <menu+0x25c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d106      	bne.n	8001946 <menu+0x102>
 8001938:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <menu+0x254>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d102      	bne.n	8001946 <menu+0x102>
			menuSayac = 13;
 8001940:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <menu+0x24c>)
 8001942:	220d      	movs	r2, #13
 8001944:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001946:	4b52      	ldr	r3, [pc, #328]	@ (8001a90 <menu+0x24c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	d106      	bne.n	800195c <menu+0x118>
 800194e:	4b55      	ldr	r3, [pc, #340]	@ (8001aa4 <menu+0x260>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <menu+0x118>
			menuSayac = 16;
 8001956:	4b4e      	ldr	r3, [pc, #312]	@ (8001a90 <menu+0x24c>)
 8001958:	2210      	movs	r2, #16
 800195a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <menu+0x24c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b18      	cmp	r3, #24
 8001962:	d106      	bne.n	8001972 <menu+0x12e>
 8001964:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <menu+0x250>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <menu+0x12e>
			menuSayac = 26;
 800196c:	4b48      	ldr	r3, [pc, #288]	@ (8001a90 <menu+0x24c>)
 800196e:	221a      	movs	r2, #26
 8001970:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001972:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <menu+0x24c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b21      	cmp	r3, #33	@ 0x21
 8001978:	d106      	bne.n	8001988 <menu+0x144>
 800197a:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa8 <menu+0x264>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <menu+0x144>
			menuSayac = 35;
 8001982:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <menu+0x24c>)
 8001984:	2223      	movs	r2, #35	@ 0x23
 8001986:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001988:	f002 fca2 	bl	80042d0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800198c:	2108      	movs	r1, #8
 800198e:	4847      	ldr	r0, [pc, #284]	@ (8001aac <menu+0x268>)
 8001990:	f008 ffba 	bl	800a908 <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b01      	cmp	r3, #1
 8001998:	f040 8097 	bne.w	8001aca <menu+0x286>
 800199c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <menu+0x248>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 808f 	beq.w	8001aca <menu+0x286>
		if (menuSayac <= 1) {
 80019ac:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <menu+0x24c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d802      	bhi.n	80019ba <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <menu+0x24c>)
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80019ba:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <menu+0x24c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <menu+0x24c>)
 80019c4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80019c6:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <menu+0x24c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b14      	cmp	r3, #20
 80019cc:	d106      	bne.n	80019dc <menu+0x198>
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <menu+0x250>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <menu+0x198>
			menuSayac = 17;
 80019d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <menu+0x24c>)
 80019d8:	2211      	movs	r2, #17
 80019da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80019dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <menu+0x24c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d106      	bne.n	80019f2 <menu+0x1ae>
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <menu+0x254>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <menu+0x1ae>
			menuSayac = 7;
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <menu+0x24c>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80019f2:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <menu+0x24c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	d106      	bne.n	8001a08 <menu+0x1c4>
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <menu+0x254>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <menu+0x1c4>
			menuSayac = 12;
 8001a02:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <menu+0x24c>)
 8001a04:	220c      	movs	r2, #12
 8001a06:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <menu+0x24c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d106      	bne.n	8001a1e <menu+0x1da>
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <menu+0x254>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d102      	bne.n	8001a1e <menu+0x1da>
			menuSayac = 8;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <menu+0x24c>)
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <menu+0x24c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d10a      	bne.n	8001a3c <menu+0x1f8>
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <menu+0x258>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d003      	beq.n	8001a36 <menu+0x1f2>
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <menu+0x258>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d102      	bne.n	8001a3c <menu+0x1f8>
			menuSayac = 9;
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <menu+0x24c>)
 8001a38:	2209      	movs	r2, #9
 8001a3a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <menu+0x24c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d10a      	bne.n	8001a5a <menu+0x216>
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <menu+0x25c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d003      	beq.n	8001a54 <menu+0x210>
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <menu+0x25c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d102      	bne.n	8001a5a <menu+0x216>
			menuSayac = 11;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <menu+0x24c>)
 8001a56:	220b      	movs	r2, #11
 8001a58:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <menu+0x24c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d106      	bne.n	8001a70 <menu+0x22c>
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <menu+0x260>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <menu+0x22c>
			menuSayac = 14;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <menu+0x24c>)
 8001a6c:	220e      	movs	r2, #14
 8001a6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <menu+0x24c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b19      	cmp	r3, #25
 8001a76:	d11b      	bne.n	8001ab0 <menu+0x26c>
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <menu+0x250>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d117      	bne.n	8001ab0 <menu+0x26c>
			menuSayac = 23;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <menu+0x24c>)
 8001a82:	2217      	movs	r2, #23
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e013      	b.n	8001ab0 <menu+0x26c>
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	200016ef 	.word	0x200016ef
 8001a90:	200016c0 	.word	0x200016c0
 8001a94:	200016cf 	.word	0x200016cf
 8001a98:	200016c8 	.word	0x200016c8
 8001a9c:	200016c9 	.word	0x200016c9
 8001aa0:	200016ca 	.word	0x200016ca
 8001aa4:	200016cb 	.word	0x200016cb
 8001aa8:	200016eb 	.word	0x200016eb
 8001aac:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001ab0:	4bb0      	ldr	r3, [pc, #704]	@ (8001d74 <menu+0x530>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b22      	cmp	r3, #34	@ 0x22
 8001ab6:	d106      	bne.n	8001ac6 <menu+0x282>
 8001ab8:	4baf      	ldr	r3, [pc, #700]	@ (8001d78 <menu+0x534>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <menu+0x282>
			menuSayac = 32;
 8001ac0:	4bac      	ldr	r3, [pc, #688]	@ (8001d74 <menu+0x530>)
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001ac6:	f002 fc03 	bl	80042d0 <bekle>
	}

	if (menuSayac == 0) {
 8001aca:	4baa      	ldr	r3, [pc, #680]	@ (8001d74 <menu+0x530>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001ad2:	4aaa      	ldr	r2, [pc, #680]	@ (8001d7c <menu+0x538>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f007 fbc2 	bl	8009260 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001adc:	4aa8      	ldr	r2, [pc, #672]	@ (8001d80 <menu+0x53c>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f007 fbbd 	bl	8009260 <lcd_print>
	}

	if (menuSayac == 1) {
 8001ae6:	4ba3      	ldr	r3, [pc, #652]	@ (8001d74 <menu+0x530>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 81f4 	bne.w	8001ed8 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001af0:	4aa4      	ldr	r2, [pc, #656]	@ (8001d84 <menu+0x540>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	2001      	movs	r0, #1
 8001af6:	f007 fbb3 	bl	8009260 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001afa:	4ba3      	ldr	r3, [pc, #652]	@ (8001d88 <menu+0x544>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001b02:	4aa2      	ldr	r2, [pc, #648]	@ (8001d8c <menu+0x548>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	2002      	movs	r0, #2
 8001b08:	f007 fbaa 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "   ");
 8001b0c:	4aa0      	ldr	r2, [pc, #640]	@ (8001d90 <menu+0x54c>)
 8001b0e:	210f      	movs	r1, #15
 8001b10:	2002      	movs	r0, #2
 8001b12:	f007 fba5 	bl	8009260 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001b16:	4b9f      	ldr	r3, [pc, #636]	@ (8001d94 <menu+0x550>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	220a      	movs	r2, #10
 8001b1c:	499e      	ldr	r1, [pc, #632]	@ (8001d98 <menu+0x554>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00c fa6a 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001b24:	4a9c      	ldr	r2, [pc, #624]	@ (8001d98 <menu+0x554>)
 8001b26:	210e      	movs	r1, #14
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f007 fb99 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001b2e:	4b96      	ldr	r3, [pc, #600]	@ (8001d88 <menu+0x544>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d115      	bne.n	8001b62 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001b36:	4a99      	ldr	r2, [pc, #612]	@ (8001d9c <menu+0x558>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f007 fb90 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001b40:	4a97      	ldr	r2, [pc, #604]	@ (8001da0 <menu+0x55c>)
 8001b42:	210f      	movs	r1, #15
 8001b44:	2002      	movs	r0, #2
 8001b46:	f007 fb8b 	bl	8009260 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001b4a:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <menu+0x560>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	220a      	movs	r2, #10
 8001b50:	4991      	ldr	r1, [pc, #580]	@ (8001d98 <menu+0x554>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00c fa50 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001b58:	4a8f      	ldr	r2, [pc, #572]	@ (8001d98 <menu+0x554>)
 8001b5a:	210e      	movs	r1, #14
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f007 fb7f 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001b62:	4b89      	ldr	r3, [pc, #548]	@ (8001d88 <menu+0x544>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d115      	bne.n	8001b96 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001b6a:	4a8f      	ldr	r2, [pc, #572]	@ (8001da8 <menu+0x564>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f007 fb76 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001b74:	4a8a      	ldr	r2, [pc, #552]	@ (8001da0 <menu+0x55c>)
 8001b76:	210f      	movs	r1, #15
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f007 fb71 	bl	8009260 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dac <menu+0x568>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	220a      	movs	r2, #10
 8001b84:	4984      	ldr	r1, [pc, #528]	@ (8001d98 <menu+0x554>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00c fa36 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001b8c:	4a82      	ldr	r2, [pc, #520]	@ (8001d98 <menu+0x554>)
 8001b8e:	210e      	movs	r1, #14
 8001b90:	2002      	movs	r0, #2
 8001b92:	f007 fb65 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001b96:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <menu+0x544>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d115      	bne.n	8001bca <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001b9e:	4a84      	ldr	r2, [pc, #528]	@ (8001db0 <menu+0x56c>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f007 fb5c 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001ba8:	4a7d      	ldr	r2, [pc, #500]	@ (8001da0 <menu+0x55c>)
 8001baa:	210f      	movs	r1, #15
 8001bac:	2002      	movs	r0, #2
 8001bae:	f007 fb57 	bl	8009260 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001bb2:	4b80      	ldr	r3, [pc, #512]	@ (8001db4 <menu+0x570>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	4977      	ldr	r1, [pc, #476]	@ (8001d98 <menu+0x554>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00c fa1c 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001bc0:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <menu+0x554>)
 8001bc2:	210e      	movs	r1, #14
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f007 fb4b 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001bca:	4b6f      	ldr	r3, [pc, #444]	@ (8001d88 <menu+0x544>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d115      	bne.n	8001bfe <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001bd2:	4a79      	ldr	r2, [pc, #484]	@ (8001db8 <menu+0x574>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f007 fb42 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001bdc:	4a70      	ldr	r2, [pc, #448]	@ (8001da0 <menu+0x55c>)
 8001bde:	210f      	movs	r1, #15
 8001be0:	2002      	movs	r0, #2
 8001be2:	f007 fb3d 	bl	8009260 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001be6:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <menu+0x578>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	220a      	movs	r2, #10
 8001bec:	496a      	ldr	r1, [pc, #424]	@ (8001d98 <menu+0x554>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00c fa02 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001bf4:	4a68      	ldr	r2, [pc, #416]	@ (8001d98 <menu+0x554>)
 8001bf6:	210e      	movs	r1, #14
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f007 fb31 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001bfe:	4b62      	ldr	r3, [pc, #392]	@ (8001d88 <menu+0x544>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d115      	bne.n	8001c32 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001c06:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc0 <menu+0x57c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f007 fb28 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001c10:	4a63      	ldr	r2, [pc, #396]	@ (8001da0 <menu+0x55c>)
 8001c12:	210f      	movs	r1, #15
 8001c14:	2002      	movs	r0, #2
 8001c16:	f007 fb23 	bl	8009260 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <menu+0x580>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	220a      	movs	r2, #10
 8001c20:	495d      	ldr	r1, [pc, #372]	@ (8001d98 <menu+0x554>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00c f9e8 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001c28:	4a5b      	ldr	r2, [pc, #364]	@ (8001d98 <menu+0x554>)
 8001c2a:	210e      	movs	r1, #14
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f007 fb17 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001c32:	4b55      	ldr	r3, [pc, #340]	@ (8001d88 <menu+0x544>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d115      	bne.n	8001c66 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001c3a:	4a63      	ldr	r2, [pc, #396]	@ (8001dc8 <menu+0x584>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f007 fb0e 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001c44:	4a56      	ldr	r2, [pc, #344]	@ (8001da0 <menu+0x55c>)
 8001c46:	210f      	movs	r1, #15
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f007 fb09 	bl	8009260 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dcc <menu+0x588>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	220a      	movs	r2, #10
 8001c54:	4950      	ldr	r1, [pc, #320]	@ (8001d98 <menu+0x554>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00c f9ce 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d98 <menu+0x554>)
 8001c5e:	210e      	movs	r1, #14
 8001c60:	2002      	movs	r0, #2
 8001c62:	f007 fafd 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001c66:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <menu+0x544>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d115      	bne.n	8001c9a <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001c6e:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <menu+0x58c>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	2002      	movs	r0, #2
 8001c74:	f007 faf4 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001c78:	4a49      	ldr	r2, [pc, #292]	@ (8001da0 <menu+0x55c>)
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f007 faef 	bl	8009260 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001c82:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <menu+0x590>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	220a      	movs	r2, #10
 8001c88:	4943      	ldr	r1, [pc, #268]	@ (8001d98 <menu+0x554>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00c f9b4 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001c90:	4a41      	ldr	r2, [pc, #260]	@ (8001d98 <menu+0x554>)
 8001c92:	210e      	movs	r1, #14
 8001c94:	2002      	movs	r0, #2
 8001c96:	f007 fae3 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <menu+0x544>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d115      	bne.n	8001cce <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd8 <menu+0x594>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f007 fada 	bl	8009260 <lcd_print>
			lcd_print(2, 15, "  ");
 8001cac:	4a3c      	ldr	r2, [pc, #240]	@ (8001da0 <menu+0x55c>)
 8001cae:	210f      	movs	r1, #15
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f007 fad5 	bl	8009260 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <menu+0x598>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	220a      	movs	r2, #10
 8001cbc:	4936      	ldr	r1, [pc, #216]	@ (8001d98 <menu+0x554>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00c f99a 	bl	800dff8 <itoa>
			lcd_print(2, 14, snum);
 8001cc4:	4a34      	ldr	r2, [pc, #208]	@ (8001d98 <menu+0x554>)
 8001cc6:	210e      	movs	r1, #14
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f007 fac9 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001cce:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <menu+0x544>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b09      	cmp	r3, #9
 8001cd4:	d115      	bne.n	8001d02 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001cd6:	4a42      	ldr	r2, [pc, #264]	@ (8001de0 <menu+0x59c>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f007 fac0 	bl	8009260 <lcd_print>
			lcd_print(2, 16, " ");
 8001ce0:	4a40      	ldr	r2, [pc, #256]	@ (8001de4 <menu+0x5a0>)
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f007 fabb 	bl	8009260 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <menu+0x5a4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	220a      	movs	r2, #10
 8001cf0:	4929      	ldr	r1, [pc, #164]	@ (8001d98 <menu+0x554>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f00c f980 	bl	800dff8 <itoa>
			lcd_print(2, 15, snum);
 8001cf8:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <menu+0x554>)
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f007 faaf 	bl	8009260 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <menu+0x544>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d104      	bne.n	8001d14 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001d0a:	4a38      	ldr	r2, [pc, #224]	@ (8001dec <menu+0x5a8>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f007 faa6 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d14:	2102      	movs	r1, #2
 8001d16:	4836      	ldr	r0, [pc, #216]	@ (8001df0 <menu+0x5ac>)
 8001d18:	f008 fdf6 	bl	800a908 <HAL_GPIO_ReadPin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d119      	bne.n	8001d56 <menu+0x512>
 8001d22:	4b34      	ldr	r3, [pc, #208]	@ (8001df4 <menu+0x5b0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d012      	beq.n	8001d56 <menu+0x512>
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <menu+0x5b4>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10e      	bne.n	8001d56 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <menu+0x544>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <menu+0x544>)
 8001d42:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001d44:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <menu+0x544>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b0a      	cmp	r3, #10
 8001d4a:	d902      	bls.n	8001d52 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <menu+0x544>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d52:	f002 fabd 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d56:	2104      	movs	r1, #4
 8001d58:	4825      	ldr	r0, [pc, #148]	@ (8001df0 <menu+0x5ac>)
 8001d5a:	f008 fdd5 	bl	800a908 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d15e      	bne.n	8001e22 <menu+0x5de>
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <menu+0x5b0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d057      	beq.n	8001e22 <menu+0x5de>
 8001d72:	e043      	b.n	8001dfc <menu+0x5b8>
 8001d74:	200016c0 	.word	0x200016c0
 8001d78:	200016eb 	.word	0x200016eb
 8001d7c:	20001824 	.word	0x20001824
 8001d80:	20001838 	.word	0x20001838
 8001d84:	2000184c 	.word	0x2000184c
 8001d88:	200016c2 	.word	0x200016c2
 8001d8c:	20001860 	.word	0x20001860
 8001d90:	0800f78c 	.word	0x0800f78c
 8001d94:	200016e1 	.word	0x200016e1
 8001d98:	20001260 	.word	0x20001260
 8001d9c:	20001874 	.word	0x20001874
 8001da0:	0800f790 	.word	0x0800f790
 8001da4:	200016e2 	.word	0x200016e2
 8001da8:	20001888 	.word	0x20001888
 8001dac:	200016e3 	.word	0x200016e3
 8001db0:	2000189c 	.word	0x2000189c
 8001db4:	200016e4 	.word	0x200016e4
 8001db8:	200018b0 	.word	0x200018b0
 8001dbc:	200016e5 	.word	0x200016e5
 8001dc0:	200018c4 	.word	0x200018c4
 8001dc4:	200016e6 	.word	0x200016e6
 8001dc8:	200018d8 	.word	0x200018d8
 8001dcc:	200016e7 	.word	0x200016e7
 8001dd0:	200018ec 	.word	0x200018ec
 8001dd4:	200016e8 	.word	0x200016e8
 8001dd8:	20001900 	.word	0x20001900
 8001ddc:	200016e9 	.word	0x200016e9
 8001de0:	20001914 	.word	0x20001914
 8001de4:	0800f794 	.word	0x0800f794
 8001de8:	200016ea 	.word	0x200016ea
 8001dec:	20001928 	.word	0x20001928
 8001df0:	40010800 	.word	0x40010800
 8001df4:	200016ef 	.word	0x200016ef
 8001df8:	200016cf 	.word	0x200016cf
 8001dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8002028 <menu+0x7e4>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10e      	bne.n	8001e22 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001e04:	4b89      	ldr	r3, [pc, #548]	@ (800202c <menu+0x7e8>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b87      	ldr	r3, [pc, #540]	@ (800202c <menu+0x7e8>)
 8001e0e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001e10:	4b86      	ldr	r3, [pc, #536]	@ (800202c <menu+0x7e8>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b0b      	cmp	r3, #11
 8001e16:	d902      	bls.n	8001e1e <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001e18:	4b84      	ldr	r3, [pc, #528]	@ (800202c <menu+0x7e8>)
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e1e:	f002 fa57 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001e22:	2108      	movs	r1, #8
 8001e24:	4882      	ldr	r0, [pc, #520]	@ (8002030 <menu+0x7ec>)
 8001e26:	f008 fd6f 	bl	800a908 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d153      	bne.n	8001ed8 <menu+0x694>
 8001e30:	4b80      	ldr	r3, [pc, #512]	@ (8002034 <menu+0x7f0>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	f083 0301 	eor.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04c      	beq.n	8001ed8 <menu+0x694>
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800202c <menu+0x7e8>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d148      	bne.n	8001ed8 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001e46:	4b7c      	ldr	r3, [pc, #496]	@ (8002038 <menu+0x7f4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800203c <menu+0x7f8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001e54:	4b7a      	ldr	r3, [pc, #488]	@ (8002040 <menu+0x7fc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	4b78      	ldr	r3, [pc, #480]	@ (800203c <menu+0x7f8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001e62:	4b78      	ldr	r3, [pc, #480]	@ (8002044 <menu+0x800>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	4b74      	ldr	r3, [pc, #464]	@ (800203c <menu+0x7f8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001e70:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <menu+0x804>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b71      	ldr	r3, [pc, #452]	@ (800203c <menu+0x7f8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001e7e:	4b73      	ldr	r3, [pc, #460]	@ (800204c <menu+0x808>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	4b6d      	ldr	r3, [pc, #436]	@ (800203c <menu+0x7f8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001e8c:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <menu+0x80c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	4b6a      	ldr	r3, [pc, #424]	@ (800203c <menu+0x7f8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002054 <menu+0x810>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	4b66      	ldr	r3, [pc, #408]	@ (800203c <menu+0x7f8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8002058 <menu+0x814>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	4b63      	ldr	r3, [pc, #396]	@ (800203c <menu+0x7f8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001eb6:	4b69      	ldr	r3, [pc, #420]	@ (800205c <menu+0x818>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800203c <menu+0x7f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001ec4:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <menu+0x81c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	4b5c      	ldr	r3, [pc, #368]	@ (800203c <menu+0x7f8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001ed2:	4b64      	ldr	r3, [pc, #400]	@ (8002064 <menu+0x820>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ed8:	4b63      	ldr	r3, [pc, #396]	@ (8002068 <menu+0x824>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f040 808e 	bne.w	8001ffe <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001ee2:	4a62      	ldr	r2, [pc, #392]	@ (800206c <menu+0x828>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f007 f9ba 	bl	8009260 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001eec:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <menu+0x7e4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d003      	beq.n	8001efc <menu+0x6b8>
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <menu+0x7e4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d104      	bne.n	8001f06 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001efc:	4a5c      	ldr	r2, [pc, #368]	@ (8002070 <menu+0x82c>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f007 f9ad 	bl	8009260 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001f06:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <menu+0x830>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <menu+0x6dc>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <menu+0x7e4>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001f16:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <menu+0x834>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f007 f9a0 	bl	8009260 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001f20:	4b54      	ldr	r3, [pc, #336]	@ (8002074 <menu+0x830>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <menu+0x6f6>
 8001f28:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <menu+0x7e4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <menu+0x838>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	2002      	movs	r0, #2
 8001f36:	f007 f993 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	483c      	ldr	r0, [pc, #240]	@ (8002030 <menu+0x7ec>)
 8001f3e:	f008 fce3 	bl	800a908 <HAL_GPIO_ReadPin>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d119      	bne.n	8001f7c <menu+0x738>
 8001f48:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <menu+0x7f0>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <menu+0x738>
 8001f56:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <menu+0x7e4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10e      	bne.n	8001f7c <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001f5e:	4b45      	ldr	r3, [pc, #276]	@ (8002074 <menu+0x830>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <menu+0x830>)
 8001f68:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <menu+0x830>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d902      	bls.n	8001f78 <menu+0x734>
				calismaSekli = 0;
 8001f72:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <menu+0x830>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f78:	f002 f9aa 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	482c      	ldr	r0, [pc, #176]	@ (8002030 <menu+0x7ec>)
 8001f80:	f008 fcc2 	bl	800a908 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d119      	bne.n	8001fbe <menu+0x77a>
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <menu+0x7f0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <menu+0x77a>
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <menu+0x7e4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10e      	bne.n	8001fbe <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <menu+0x830>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <menu+0x830>)
 8001faa:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <menu+0x830>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <menu+0x776>
	    		calismaSekli = 1;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002074 <menu+0x830>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001fba:	f002 f989 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	481b      	ldr	r0, [pc, #108]	@ (8002030 <menu+0x7ec>)
 8001fc2:	f008 fca1 	bl	800a908 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d118      	bne.n	8001ffe <menu+0x7ba>
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <menu+0x7f0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d011      	beq.n	8001ffe <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <menu+0x830>)
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <menu+0x7f8>)
 8001fe0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <menu+0x830>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d106      	bne.n	8001ff8 <menu+0x7b4>
				altLimit = 1;
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <menu+0x83c>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <menu+0x83c>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <menu+0x7f8>)
 8001ff6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <menu+0x820>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <menu+0x824>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b03      	cmp	r3, #3
 8002004:	f040 809c 	bne.w	8002140 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8002008:	4a1e      	ldr	r2, [pc, #120]	@ (8002084 <menu+0x840>)
 800200a:	2101      	movs	r1, #1
 800200c:	2001      	movs	r0, #1
 800200e:	f007 f927 	bl	8009260 <lcd_print>

		if(emniyetCercevesi == 0) {
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <menu+0x844>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13a      	bne.n	8002090 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <menu+0x848>)
 800201c:	2101      	movs	r1, #1
 800201e:	2002      	movs	r0, #2
 8002020:	f007 f91e 	bl	8009260 <lcd_print>
 8002024:	e03d      	b.n	80020a2 <menu+0x85e>
 8002026:	bf00      	nop
 8002028:	200016cf 	.word	0x200016cf
 800202c:	200016c2 	.word	0x200016c2
 8002030:	40010800 	.word	0x40010800
 8002034:	200016ef 	.word	0x200016ef
 8002038:	200016e1 	.word	0x200016e1
 800203c:	200011f0 	.word	0x200011f0
 8002040:	200016e2 	.word	0x200016e2
 8002044:	200016e3 	.word	0x200016e3
 8002048:	200016e4 	.word	0x200016e4
 800204c:	200016e5 	.word	0x200016e5
 8002050:	200016e6 	.word	0x200016e6
 8002054:	200016e7 	.word	0x200016e7
 8002058:	200016e8 	.word	0x200016e8
 800205c:	200016e9 	.word	0x200016e9
 8002060:	200016ea 	.word	0x200016ea
 8002064:	200016ec 	.word	0x200016ec
 8002068:	200016c0 	.word	0x200016c0
 800206c:	2000193c 	.word	0x2000193c
 8002070:	20001950 	.word	0x20001950
 8002074:	200016c1 	.word	0x200016c1
 8002078:	20001964 	.word	0x20001964
 800207c:	20001978 	.word	0x20001978
 8002080:	200016c6 	.word	0x200016c6
 8002084:	2000198c 	.word	0x2000198c
 8002088:	200016c4 	.word	0x200016c4
 800208c:	200019a0 	.word	0x200019a0
		} else if(emniyetCercevesi == 1) {
 8002090:	4b6b      	ldr	r3, [pc, #428]	@ (8002240 <menu+0x9fc>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d104      	bne.n	80020a2 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8002098:	4a6a      	ldr	r2, [pc, #424]	@ (8002244 <menu+0xa00>)
 800209a:	2101      	movs	r1, #1
 800209c:	2002      	movs	r0, #2
 800209e:	f007 f8df 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020a2:	2102      	movs	r1, #2
 80020a4:	4868      	ldr	r0, [pc, #416]	@ (8002248 <menu+0xa04>)
 80020a6:	f008 fc2f 	bl	800a908 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d115      	bne.n	80020dc <menu+0x898>
 80020b0:	4b66      	ldr	r3, [pc, #408]	@ (800224c <menu+0xa08>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00e      	beq.n	80020dc <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 80020be:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <menu+0x9fc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <menu+0x9fc>)
 80020c8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80020ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002240 <menu+0x9fc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d902      	bls.n	80020d8 <menu+0x894>
				emniyetCercevesi = 0;
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <menu+0x9fc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020d8:	f002 f8fa 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020dc:	2104      	movs	r1, #4
 80020de:	485a      	ldr	r0, [pc, #360]	@ (8002248 <menu+0xa04>)
 80020e0:	f008 fc12 	bl	800a908 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d115      	bne.n	8002116 <menu+0x8d2>
 80020ea:	4b58      	ldr	r3, [pc, #352]	@ (800224c <menu+0xa08>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 80020f8:	4b51      	ldr	r3, [pc, #324]	@ (8002240 <menu+0x9fc>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b4f      	ldr	r3, [pc, #316]	@ (8002240 <menu+0x9fc>)
 8002102:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002104:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <menu+0x9fc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 800210c:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <menu+0x9fc>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002112:	f002 f8dd 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002116:	2108      	movs	r1, #8
 8002118:	484b      	ldr	r0, [pc, #300]	@ (8002248 <menu+0xa04>)
 800211a:	f008 fbf5 	bl	800a908 <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10d      	bne.n	8002140 <menu+0x8fc>
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <menu+0xa08>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f083 0301 	eor.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8002132:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <menu+0x9fc>)
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	4b46      	ldr	r3, [pc, #280]	@ (8002250 <menu+0xa0c>)
 8002138:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800213a:	4b46      	ldr	r3, [pc, #280]	@ (8002254 <menu+0xa10>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002140:	4b45      	ldr	r3, [pc, #276]	@ (8002258 <menu+0xa14>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d166      	bne.n	8002216 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8002148:	4a44      	ldr	r2, [pc, #272]	@ (800225c <menu+0xa18>)
 800214a:	2101      	movs	r1, #1
 800214c:	2001      	movs	r0, #1
 800214e:	f007 f887 	bl	8009260 <lcd_print>

		if(yavaslamaLimit == 0) {
 8002152:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <menu+0xa1c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <menu+0x922>
			lcd_print(2, 1, pasifText);
 800215a:	4a42      	ldr	r2, [pc, #264]	@ (8002264 <menu+0xa20>)
 800215c:	2101      	movs	r1, #1
 800215e:	2002      	movs	r0, #2
 8002160:	f007 f87e 	bl	8009260 <lcd_print>
 8002164:	e008      	b.n	8002178 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8002166:	4b3e      	ldr	r3, [pc, #248]	@ (8002260 <menu+0xa1c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <menu+0x934>
			lcd_print(2, 1, aktifText);
 800216e:	4a3e      	ldr	r2, [pc, #248]	@ (8002268 <menu+0xa24>)
 8002170:	2101      	movs	r1, #1
 8002172:	2002      	movs	r0, #2
 8002174:	f007 f874 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002178:	2102      	movs	r1, #2
 800217a:	4833      	ldr	r0, [pc, #204]	@ (8002248 <menu+0xa04>)
 800217c:	f008 fbc4 	bl	800a908 <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d115      	bne.n	80021b2 <menu+0x96e>
 8002186:	4b31      	ldr	r3, [pc, #196]	@ (800224c <menu+0xa08>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <menu+0xa1c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <menu+0xa1c>)
 800219e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <menu+0xa1c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d902      	bls.n	80021ae <menu+0x96a>
				yavaslamaLimit = 0;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <menu+0xa1c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021ae:	f002 f88f 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b2:	2104      	movs	r1, #4
 80021b4:	4824      	ldr	r0, [pc, #144]	@ (8002248 <menu+0xa04>)
 80021b6:	f008 fba7 	bl	800a908 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d115      	bne.n	80021ec <menu+0x9a8>
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <menu+0xa08>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <menu+0xa1c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <menu+0xa1c>)
 80021d8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <menu+0xa1c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 80021e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <menu+0xa1c>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021e8:	f002 f872 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ec:	2108      	movs	r1, #8
 80021ee:	4816      	ldr	r0, [pc, #88]	@ (8002248 <menu+0xa04>)
 80021f0:	f008 fb8a 	bl	800a908 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10d      	bne.n	8002216 <menu+0x9d2>
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <menu+0xa08>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <menu+0xa1c>)
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <menu+0xa0c>)
 800220e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002210:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <menu+0xa10>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <menu+0xa14>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b05      	cmp	r3, #5
 800221c:	f040 80aa 	bne.w	8002374 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8002220:	4a12      	ldr	r2, [pc, #72]	@ (800226c <menu+0xa28>)
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f007 f81b 	bl	8009260 <lcd_print>

		if(altLimit == 0) {
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <menu+0xa2c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d120      	bne.n	8002274 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8002232:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <menu+0xa20>)
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f007 f812 	bl	8009260 <lcd_print>
 800223c:	e023      	b.n	8002286 <menu+0xa42>
 800223e:	bf00      	nop
 8002240:	200016c4 	.word	0x200016c4
 8002244:	200000ec 	.word	0x200000ec
 8002248:	40010800 	.word	0x40010800
 800224c:	200016ef 	.word	0x200016ef
 8002250:	200011f0 	.word	0x200011f0
 8002254:	200016ec 	.word	0x200016ec
 8002258:	200016c0 	.word	0x200016c0
 800225c:	200019c8 	.word	0x200019c8
 8002260:	200016c5 	.word	0x200016c5
 8002264:	200019a0 	.word	0x200019a0
 8002268:	200019b4 	.word	0x200019b4
 800226c:	200019dc 	.word	0x200019dc
 8002270:	200016c6 	.word	0x200016c6
		} else if(altLimit == 1) {
 8002274:	4b89      	ldr	r3, [pc, #548]	@ (800249c <menu+0xc58>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d104      	bne.n	8002286 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 800227c:	4a88      	ldr	r2, [pc, #544]	@ (80024a0 <menu+0xc5c>)
 800227e:	2101      	movs	r1, #1
 8002280:	2002      	movs	r0, #2
 8002282:	f006 ffed 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002286:	2102      	movs	r1, #2
 8002288:	4886      	ldr	r0, [pc, #536]	@ (80024a4 <menu+0xc60>)
 800228a:	f008 fb3d 	bl	800a908 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d119      	bne.n	80022c8 <menu+0xa84>
 8002294:	4b84      	ldr	r3, [pc, #528]	@ (80024a8 <menu+0xc64>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <menu+0xa84>
 80022a2:	4b82      	ldr	r3, [pc, #520]	@ (80024ac <menu+0xc68>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <menu+0xa84>
			altLimit = altLimit + 1;
 80022aa:	4b7c      	ldr	r3, [pc, #496]	@ (800249c <menu+0xc58>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b7a      	ldr	r3, [pc, #488]	@ (800249c <menu+0xc58>)
 80022b4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80022b6:	4b79      	ldr	r3, [pc, #484]	@ (800249c <menu+0xc58>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d902      	bls.n	80022c4 <menu+0xa80>
				altLimit = 0;
 80022be:	4b77      	ldr	r3, [pc, #476]	@ (800249c <menu+0xc58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022c4:	f002 f804 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80022c8:	2104      	movs	r1, #4
 80022ca:	4876      	ldr	r0, [pc, #472]	@ (80024a4 <menu+0xc60>)
 80022cc:	f008 fb1c 	bl	800a908 <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d119      	bne.n	800230a <menu+0xac6>
 80022d6:	4b74      	ldr	r3, [pc, #464]	@ (80024a8 <menu+0xc64>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <menu+0xac6>
 80022e4:	4b71      	ldr	r3, [pc, #452]	@ (80024ac <menu+0xc68>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10e      	bne.n	800230a <menu+0xac6>
			altLimit = altLimit - 1;
 80022ec:	4b6b      	ldr	r3, [pc, #428]	@ (800249c <menu+0xc58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b69      	ldr	r3, [pc, #420]	@ (800249c <menu+0xc58>)
 80022f6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80022f8:	4b68      	ldr	r3, [pc, #416]	@ (800249c <menu+0xc58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <menu+0xac2>
		   		altLimit = 1;
 8002300:	4b66      	ldr	r3, [pc, #408]	@ (800249c <menu+0xc58>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002306:	f001 ffe3 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800230a:	2108      	movs	r1, #8
 800230c:	4865      	ldr	r0, [pc, #404]	@ (80024a4 <menu+0xc60>)
 800230e:	f008 fafb 	bl	800a908 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d12d      	bne.n	8002374 <menu+0xb30>
 8002318:	4b63      	ldr	r3, [pc, #396]	@ (80024a8 <menu+0xc64>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d026      	beq.n	8002374 <menu+0xb30>
			eepromData[5] = altLimit;
 8002326:	4b5d      	ldr	r3, [pc, #372]	@ (800249c <menu+0xc58>)
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <menu+0xc6c>)
 800232c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800232e:	4b5b      	ldr	r3, [pc, #364]	@ (800249c <menu+0xc58>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d110      	bne.n	8002358 <menu+0xb14>
 8002336:	4b5f      	ldr	r3, [pc, #380]	@ (80024b4 <menu+0xc70>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <menu+0xb02>
 800233e:	4b5d      	ldr	r3, [pc, #372]	@ (80024b4 <menu+0xc70>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d108      	bne.n	8002358 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8002346:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <menu+0xc70>)
 8002348:	2203      	movs	r2, #3
 800234a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800234c:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <menu+0xc70>)
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <menu+0xc6c>)
 8002352:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002356:	e00a      	b.n	800236e <menu+0xb2a>
			} else if(altLimit == 0) {
 8002358:	4b50      	ldr	r3, [pc, #320]	@ (800249c <menu+0xc58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <menu+0xb2a>
				platformSilindirTipi = 0;
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <menu+0xc74>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002366:	4b54      	ldr	r3, [pc, #336]	@ (80024b8 <menu+0xc74>)
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <menu+0xc6c>)
 800236c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800236e:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <menu+0xc78>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002374:	4b52      	ldr	r3, [pc, #328]	@ (80024c0 <menu+0xc7c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b06      	cmp	r3, #6
 800237a:	d166      	bne.n	800244a <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 800237c:	4a51      	ldr	r2, [pc, #324]	@ (80024c4 <menu+0xc80>)
 800237e:	2101      	movs	r1, #1
 8002380:	2001      	movs	r0, #1
 8002382:	f006 ff6d 	bl	8009260 <lcd_print>

		if(basincSalteri == 0) {
 8002386:	4b50      	ldr	r3, [pc, #320]	@ (80024c8 <menu+0xc84>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <menu+0xb56>
			lcd_print(2, 1, pasifText);
 800238e:	4a4f      	ldr	r2, [pc, #316]	@ (80024cc <menu+0xc88>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f006 ff64 	bl	8009260 <lcd_print>
 8002398:	e008      	b.n	80023ac <menu+0xb68>
		} else if(basincSalteri == 1) {
 800239a:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <menu+0xc84>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <menu+0xb68>
			lcd_print(2, 1, aktifText);
 80023a2:	4a3f      	ldr	r2, [pc, #252]	@ (80024a0 <menu+0xc5c>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f006 ff5a 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2102      	movs	r1, #2
 80023ae:	483d      	ldr	r0, [pc, #244]	@ (80024a4 <menu+0xc60>)
 80023b0:	f008 faaa 	bl	800a908 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0xba2>
 80023ba:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <menu+0xc64>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 80023c8:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <menu+0xc84>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <menu+0xc84>)
 80023d2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023d4:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <menu+0xc84>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d902      	bls.n	80023e2 <menu+0xb9e>
				basincSalteri = 0;
 80023dc:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <menu+0xc84>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e2:	f001 ff75 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2104      	movs	r1, #4
 80023e8:	482e      	ldr	r0, [pc, #184]	@ (80024a4 <menu+0xc60>)
 80023ea:	f008 fa8d 	bl	800a908 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <menu+0xbdc>
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <menu+0xc64>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <menu+0xc84>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <menu+0xc84>)
 800240c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800240e:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <menu+0xc84>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <menu+0xbd8>
		   		basincSalteri = 1;
 8002416:	4b2c      	ldr	r3, [pc, #176]	@ (80024c8 <menu+0xc84>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800241c:	f001 ff58 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002420:	2108      	movs	r1, #8
 8002422:	4820      	ldr	r0, [pc, #128]	@ (80024a4 <menu+0xc60>)
 8002424:	f008 fa70 	bl	800a908 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10d      	bne.n	800244a <menu+0xc06>
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <menu+0xc64>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <menu+0xc06>
			eepromData[6] = basincSalteri;
 800243c:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <menu+0xc84>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <menu+0xc6c>)
 8002442:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <menu+0xc78>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <menu+0xc7c>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b07      	cmp	r3, #7
 8002450:	f040 80a9 	bne.w	80025a6 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <menu+0xc8c>)
 8002456:	2101      	movs	r1, #1
 8002458:	2001      	movs	r0, #1
 800245a:	f006 ff01 	bl	8009260 <lcd_print>

		if(kapiSecimleri == 0) {
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <menu+0xc90>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8002466:	4a19      	ldr	r2, [pc, #100]	@ (80024cc <menu+0xc88>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f006 fef8 	bl	8009260 <lcd_print>
 8002470:	e03f      	b.n	80024f2 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8002472:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <menu+0xc90>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 800247a:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <menu+0xc94>)
 800247c:	2101      	movs	r1, #1
 800247e:	2002      	movs	r0, #2
 8002480:	f006 feee 	bl	8009260 <lcd_print>
 8002484:	e035      	b.n	80024f2 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8002486:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <menu+0xc90>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d128      	bne.n	80024e0 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 800248e:	4a13      	ldr	r2, [pc, #76]	@ (80024dc <menu+0xc98>)
 8002490:	2101      	movs	r1, #1
 8002492:	2002      	movs	r0, #2
 8002494:	f006 fee4 	bl	8009260 <lcd_print>
 8002498:	e02b      	b.n	80024f2 <menu+0xcae>
 800249a:	bf00      	nop
 800249c:	200016c6 	.word	0x200016c6
 80024a0:	200019b4 	.word	0x200019b4
 80024a4:	40010800 	.word	0x40010800
 80024a8:	200016ef 	.word	0x200016ef
 80024ac:	200016c1 	.word	0x200016c1
 80024b0:	200011f0 	.word	0x200011f0
 80024b4:	200016cd 	.word	0x200016cd
 80024b8:	200016d3 	.word	0x200016d3
 80024bc:	200016ec 	.word	0x200016ec
 80024c0:	200016c0 	.word	0x200016c0
 80024c4:	200019f0 	.word	0x200019f0
 80024c8:	200016c7 	.word	0x200016c7
 80024cc:	200019a0 	.word	0x200019a0
 80024d0:	20001a04 	.word	0x20001a04
 80024d4:	200016c8 	.word	0x200016c8
 80024d8:	20001a18 	.word	0x20001a18
 80024dc:	20001a2c 	.word	0x20001a2c
		} else if(kapiSecimleri == 3) {
 80024e0:	4b76      	ldr	r3, [pc, #472]	@ (80026bc <menu+0xe78>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d104      	bne.n	80024f2 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 80024e8:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <menu+0xe7c>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2002      	movs	r0, #2
 80024ee:	f006 feb7 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f2:	2102      	movs	r1, #2
 80024f4:	4873      	ldr	r0, [pc, #460]	@ (80026c4 <menu+0xe80>)
 80024f6:	f008 fa07 	bl	800a908 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d115      	bne.n	800252c <menu+0xce8>
 8002500:	4b71      	ldr	r3, [pc, #452]	@ (80026c8 <menu+0xe84>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00e      	beq.n	800252c <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 800250e:	4b6b      	ldr	r3, [pc, #428]	@ (80026bc <menu+0xe78>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b69      	ldr	r3, [pc, #420]	@ (80026bc <menu+0xe78>)
 8002518:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800251a:	4b68      	ldr	r3, [pc, #416]	@ (80026bc <menu+0xe78>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d902      	bls.n	8002528 <menu+0xce4>
				kapiSecimleri = 0;
 8002522:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <menu+0xe78>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002528:	f001 fed2 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800252c:	2104      	movs	r1, #4
 800252e:	4865      	ldr	r0, [pc, #404]	@ (80026c4 <menu+0xe80>)
 8002530:	f008 f9ea 	bl	800a908 <HAL_GPIO_ReadPin>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d115      	bne.n	8002566 <menu+0xd22>
 800253a:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <menu+0xe84>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	f083 0301 	eor.w	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002548:	4b5c      	ldr	r3, [pc, #368]	@ (80026bc <menu+0xe78>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b5a      	ldr	r3, [pc, #360]	@ (80026bc <menu+0xe78>)
 8002552:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002554:	4b59      	ldr	r3, [pc, #356]	@ (80026bc <menu+0xe78>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d902      	bls.n	8002562 <menu+0xd1e>
		   		kapiSecimleri = 3;
 800255c:	4b57      	ldr	r3, [pc, #348]	@ (80026bc <menu+0xe78>)
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002562:	f001 feb5 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002566:	2108      	movs	r1, #8
 8002568:	4856      	ldr	r0, [pc, #344]	@ (80026c4 <menu+0xe80>)
 800256a:	f008 f9cd 	bl	800a908 <HAL_GPIO_ReadPin>
 800256e:	4603      	mov	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d118      	bne.n	80025a6 <menu+0xd62>
 8002574:	4b54      	ldr	r3, [pc, #336]	@ (80026c8 <menu+0xe84>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f083 0301 	eor.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d011      	beq.n	80025a6 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8002582:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <menu+0xe78>)
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b51      	ldr	r3, [pc, #324]	@ (80026cc <menu+0xe88>)
 8002588:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800258a:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <menu+0xe78>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <menu+0xd5c>
				altLimit = 1;
 8002592:	4b4f      	ldr	r3, [pc, #316]	@ (80026d0 <menu+0xe8c>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002598:	4b4d      	ldr	r3, [pc, #308]	@ (80026d0 <menu+0xe8c>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b4b      	ldr	r3, [pc, #300]	@ (80026cc <menu+0xe88>)
 800259e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025a0:	4b4c      	ldr	r3, [pc, #304]	@ (80026d4 <menu+0xe90>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025a6:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <menu+0xe94>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d167      	bne.n	800267e <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80025ae:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <menu+0xe98>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	2001      	movs	r0, #1
 80025b4:	f006 fe54 	bl	8009260 <lcd_print>

		if(kapiAcTipi == 0) {
 80025b8:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <menu+0xe9c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80025c0:	4a48      	ldr	r2, [pc, #288]	@ (80026e4 <menu+0xea0>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	2002      	movs	r0, #2
 80025c6:	f006 fe4b 	bl	8009260 <lcd_print>
 80025ca:	e008      	b.n	80025de <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80025cc:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <menu+0xe9c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d104      	bne.n	80025de <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80025d4:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <menu+0xea4>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	2002      	movs	r0, #2
 80025da:	f006 fe41 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025de:	2102      	movs	r1, #2
 80025e0:	4838      	ldr	r0, [pc, #224]	@ (80026c4 <menu+0xe80>)
 80025e2:	f008 f991 	bl	800a908 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <menu+0xdd4>
 80025ec:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <menu+0xe84>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00e      	beq.n	8002618 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <menu+0xe9c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <menu+0xe9c>)
 8002604:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002606:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <menu+0xe9c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d902      	bls.n	8002614 <menu+0xdd0>
				kapiAcTipi = 0;
 800260e:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <menu+0xe9c>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002614:	f001 fe5c 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002618:	2104      	movs	r1, #4
 800261a:	482a      	ldr	r0, [pc, #168]	@ (80026c4 <menu+0xe80>)
 800261c:	f008 f974 	bl	800a908 <HAL_GPIO_ReadPin>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d115      	bne.n	8002652 <menu+0xe0e>
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <menu+0xe84>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002634:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <menu+0xe9c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	3b01      	subs	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <menu+0xe9c>)
 800263e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002640:	4b27      	ldr	r3, [pc, #156]	@ (80026e0 <menu+0xe9c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002648:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <menu+0xe9c>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800264e:	f001 fe3f 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002652:	2108      	movs	r1, #8
 8002654:	481b      	ldr	r0, [pc, #108]	@ (80026c4 <menu+0xe80>)
 8002656:	f008 f957 	bl	800a908 <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10e      	bne.n	800267e <menu+0xe3a>
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <menu+0xe84>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 800266e:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <menu+0xe9c>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <menu+0xe88>)
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <menu+0xe90>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <menu+0xe94>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b09      	cmp	r3, #9
 8002684:	f040 8092 	bne.w	80027ac <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002688:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <menu+0xea8>)
 800268a:	2101      	movs	r1, #1
 800268c:	2001      	movs	r0, #1
 800268e:	f006 fde7 	bl	8009260 <lcd_print>

		if(kapi1Tip == 0) {
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <menu+0xeac>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 800269a:	4a16      	ldr	r2, [pc, #88]	@ (80026f4 <menu+0xeb0>)
 800269c:	2101      	movs	r1, #1
 800269e:	2002      	movs	r0, #2
 80026a0:	f006 fdde 	bl	8009260 <lcd_print>
 80026a4:	e033      	b.n	800270e <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <menu+0xeac>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d126      	bne.n	80026fc <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80026ae:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <menu+0xeb4>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	2002      	movs	r0, #2
 80026b4:	f006 fdd4 	bl	8009260 <lcd_print>
 80026b8:	e029      	b.n	800270e <menu+0xeca>
 80026ba:	bf00      	nop
 80026bc:	200016c8 	.word	0x200016c8
 80026c0:	20001a40 	.word	0x20001a40
 80026c4:	40010800 	.word	0x40010800
 80026c8:	200016ef 	.word	0x200016ef
 80026cc:	200011f0 	.word	0x200011f0
 80026d0:	200016c6 	.word	0x200016c6
 80026d4:	200016ec 	.word	0x200016ec
 80026d8:	200016c0 	.word	0x200016c0
 80026dc:	20001a54 	.word	0x20001a54
 80026e0:	200016cc 	.word	0x200016cc
 80026e4:	20001a68 	.word	0x20001a68
 80026e8:	20001a7c 	.word	0x20001a7c
 80026ec:	20001a90 	.word	0x20001a90
 80026f0:	200016c9 	.word	0x200016c9
 80026f4:	20000100 	.word	0x20000100
 80026f8:	20001aa4 	.word	0x20001aa4
		} else if(kapi1Tip == 2) {
 80026fc:	4b73      	ldr	r3, [pc, #460]	@ (80028cc <menu+0x1088>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d104      	bne.n	800270e <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002704:	4a72      	ldr	r2, [pc, #456]	@ (80028d0 <menu+0x108c>)
 8002706:	2101      	movs	r1, #1
 8002708:	2002      	movs	r0, #2
 800270a:	f006 fda9 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800270e:	2102      	movs	r1, #2
 8002710:	4870      	ldr	r0, [pc, #448]	@ (80028d4 <menu+0x1090>)
 8002712:	f008 f8f9 	bl	800a908 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d115      	bne.n	8002748 <menu+0xf04>
 800271c:	4b6e      	ldr	r3, [pc, #440]	@ (80028d8 <menu+0x1094>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00e      	beq.n	8002748 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800272a:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <menu+0x1088>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <menu+0x1088>)
 8002734:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <menu+0x1088>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <menu+0xf00>
				kapi1Tip = 0;
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <menu+0x1088>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002744:	f001 fdc4 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002748:	2104      	movs	r1, #4
 800274a:	4862      	ldr	r0, [pc, #392]	@ (80028d4 <menu+0x1090>)
 800274c:	f008 f8dc 	bl	800a908 <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d115      	bne.n	8002782 <menu+0xf3e>
 8002756:	4b60      	ldr	r3, [pc, #384]	@ (80028d8 <menu+0x1094>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00e      	beq.n	8002782 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002764:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <menu+0x1088>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	3b01      	subs	r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <menu+0x1088>)
 800276e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002770:	4b56      	ldr	r3, [pc, #344]	@ (80028cc <menu+0x1088>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d902      	bls.n	800277e <menu+0xf3a>
		   		kapi1Tip = 2;
 8002778:	4b54      	ldr	r3, [pc, #336]	@ (80028cc <menu+0x1088>)
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800277e:	f001 fda7 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002782:	2108      	movs	r1, #8
 8002784:	4853      	ldr	r0, [pc, #332]	@ (80028d4 <menu+0x1090>)
 8002786:	f008 f8bf 	bl	800a908 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10d      	bne.n	80027ac <menu+0xf68>
 8002790:	4b51      	ldr	r3, [pc, #324]	@ (80028d8 <menu+0x1094>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <menu+0xf68>
			eepromData[8] = kapi1Tip;
 800279e:	4b4b      	ldr	r3, [pc, #300]	@ (80028cc <menu+0x1088>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	4b4e      	ldr	r3, [pc, #312]	@ (80028dc <menu+0x1098>)
 80027a4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027a6:	4b4e      	ldr	r3, [pc, #312]	@ (80028e0 <menu+0x109c>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027ac:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <menu+0x10a0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b0a      	cmp	r3, #10
 80027b2:	d16c      	bne.n	800288e <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80027b4:	4a4c      	ldr	r2, [pc, #304]	@ (80028e8 <menu+0x10a4>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2001      	movs	r0, #1
 80027ba:	f006 fd51 	bl	8009260 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <menu+0x10a8>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	2002      	movs	r0, #2
 80027c4:	f006 fd4c 	bl	8009260 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80027c8:	4b49      	ldr	r3, [pc, #292]	@ (80028f0 <menu+0x10ac>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	220a      	movs	r2, #10
 80027ce:	4949      	ldr	r1, [pc, #292]	@ (80028f4 <menu+0x10b0>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00b fc11 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 80027d6:	4a47      	ldr	r2, [pc, #284]	@ (80028f4 <menu+0x10b0>)
 80027d8:	2110      	movs	r1, #16
 80027da:	2002      	movs	r0, #2
 80027dc:	f006 fd40 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027e0:	2102      	movs	r1, #2
 80027e2:	483c      	ldr	r0, [pc, #240]	@ (80028d4 <menu+0x1090>)
 80027e4:	f008 f890 	bl	800a908 <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d119      	bne.n	8002822 <menu+0xfde>
 80027ee:	4b3a      	ldr	r3, [pc, #232]	@ (80028d8 <menu+0x1094>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <menu+0xfde>
 80027fc:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <menu+0x1088>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10e      	bne.n	8002822 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002804:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <menu+0x10ac>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b38      	ldr	r3, [pc, #224]	@ (80028f0 <menu+0x10ac>)
 800280e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002810:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <menu+0x10ac>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d902      	bls.n	800281e <menu+0xfda>
				kapi1AcSure = 0;
 8002818:	4b35      	ldr	r3, [pc, #212]	@ (80028f0 <menu+0x10ac>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800281e:	f001 fd57 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002822:	2104      	movs	r1, #4
 8002824:	482b      	ldr	r0, [pc, #172]	@ (80028d4 <menu+0x1090>)
 8002826:	f008 f86f 	bl	800a908 <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d119      	bne.n	8002864 <menu+0x1020>
 8002830:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <menu+0x1094>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <menu+0x1020>
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <menu+0x1088>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8002846:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <menu+0x10ac>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	3b01      	subs	r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <menu+0x10ac>)
 8002850:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <menu+0x10ac>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <menu+0x101c>
		   		kapi1AcSure = 5;
 800285a:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <menu+0x10ac>)
 800285c:	2205      	movs	r2, #5
 800285e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002860:	f001 fd36 	bl	80042d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002864:	2108      	movs	r1, #8
 8002866:	481b      	ldr	r0, [pc, #108]	@ (80028d4 <menu+0x1090>)
 8002868:	f008 f84e 	bl	800a908 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d10d      	bne.n	800288e <menu+0x104a>
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <menu+0x1094>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <menu+0x10ac>)
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <menu+0x1098>)
 8002886:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <menu+0x109c>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <menu+0x10a0>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b0b      	cmp	r3, #11
 8002894:	f040 8090 	bne.w	80029b8 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002898:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <menu+0x10b4>)
 800289a:	2101      	movs	r1, #1
 800289c:	2001      	movs	r0, #1
 800289e:	f006 fcdf 	bl	8009260 <lcd_print>

		if(kapi2Tip == 0) {
 80028a2:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <menu+0x10b8>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80028aa:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <menu+0x10bc>)
 80028ac:	2101      	movs	r1, #1
 80028ae:	2002      	movs	r0, #2
 80028b0:	f006 fcd6 	bl	8009260 <lcd_print>
 80028b4:	e031      	b.n	800291a <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <menu+0x10b8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d124      	bne.n	8002908 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <menu+0x10c0>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	2002      	movs	r0, #2
 80028c4:	f006 fccc 	bl	8009260 <lcd_print>
 80028c8:	e027      	b.n	800291a <menu+0x10d6>
 80028ca:	bf00      	nop
 80028cc:	200016c9 	.word	0x200016c9
 80028d0:	20000114 	.word	0x20000114
 80028d4:	40010800 	.word	0x40010800
 80028d8:	200016ef 	.word	0x200016ef
 80028dc:	200011f0 	.word	0x200011f0
 80028e0:	200016ec 	.word	0x200016ec
 80028e4:	200016c0 	.word	0x200016c0
 80028e8:	20001ab8 	.word	0x20001ab8
 80028ec:	20001acc 	.word	0x20001acc
 80028f0:	200016d9 	.word	0x200016d9
 80028f4:	20001260 	.word	0x20001260
 80028f8:	20001ae0 	.word	0x20001ae0
 80028fc:	200016ca 	.word	0x200016ca
 8002900:	20000100 	.word	0x20000100
 8002904:	20001aa4 	.word	0x20001aa4
		} else if(kapi2Tip == 2) {
 8002908:	4b73      	ldr	r3, [pc, #460]	@ (8002ad8 <menu+0x1294>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d104      	bne.n	800291a <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002910:	4a72      	ldr	r2, [pc, #456]	@ (8002adc <menu+0x1298>)
 8002912:	2101      	movs	r1, #1
 8002914:	2002      	movs	r0, #2
 8002916:	f006 fca3 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800291a:	2102      	movs	r1, #2
 800291c:	4870      	ldr	r0, [pc, #448]	@ (8002ae0 <menu+0x129c>)
 800291e:	f007 fff3 	bl	800a908 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d115      	bne.n	8002954 <menu+0x1110>
 8002928:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae4 <menu+0x12a0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002936:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <menu+0x1294>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b66      	ldr	r3, [pc, #408]	@ (8002ad8 <menu+0x1294>)
 8002940:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <menu+0x1294>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <menu+0x110c>
				kapi2Tip = 0;
 800294a:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <menu+0x1294>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002950:	f001 fcbe 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002954:	2104      	movs	r1, #4
 8002956:	4862      	ldr	r0, [pc, #392]	@ (8002ae0 <menu+0x129c>)
 8002958:	f007 ffd6 	bl	800a908 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d115      	bne.n	800298e <menu+0x114a>
 8002962:	4b60      	ldr	r3, [pc, #384]	@ (8002ae4 <menu+0x12a0>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <menu+0x1294>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b57      	ldr	r3, [pc, #348]	@ (8002ad8 <menu+0x1294>)
 800297a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800297c:	4b56      	ldr	r3, [pc, #344]	@ (8002ad8 <menu+0x1294>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d902      	bls.n	800298a <menu+0x1146>
		   		kapi2Tip = 2;
 8002984:	4b54      	ldr	r3, [pc, #336]	@ (8002ad8 <menu+0x1294>)
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800298a:	f001 fca1 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2108      	movs	r1, #8
 8002990:	4853      	ldr	r0, [pc, #332]	@ (8002ae0 <menu+0x129c>)
 8002992:	f007 ffb9 	bl	800a908 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <menu+0x1174>
 800299c:	4b51      	ldr	r3, [pc, #324]	@ (8002ae4 <menu+0x12a0>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80029aa:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad8 <menu+0x1294>)
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae8 <menu+0x12a4>)
 80029b0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029b2:	4b4e      	ldr	r3, [pc, #312]	@ (8002aec <menu+0x12a8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029b8:	4b4d      	ldr	r3, [pc, #308]	@ (8002af0 <menu+0x12ac>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d16c      	bne.n	8002a9a <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80029c0:	4a4c      	ldr	r2, [pc, #304]	@ (8002af4 <menu+0x12b0>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2001      	movs	r0, #1
 80029c6:	f006 fc4b 	bl	8009260 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80029ca:	4a4b      	ldr	r2, [pc, #300]	@ (8002af8 <menu+0x12b4>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	2002      	movs	r0, #2
 80029d0:	f006 fc46 	bl	8009260 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80029d4:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <menu+0x12b8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	220a      	movs	r2, #10
 80029da:	4949      	ldr	r1, [pc, #292]	@ (8002b00 <menu+0x12bc>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f00b fb0b 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 80029e2:	4a47      	ldr	r2, [pc, #284]	@ (8002b00 <menu+0x12bc>)
 80029e4:	2110      	movs	r1, #16
 80029e6:	2002      	movs	r0, #2
 80029e8:	f006 fc3a 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029ec:	2102      	movs	r1, #2
 80029ee:	483c      	ldr	r0, [pc, #240]	@ (8002ae0 <menu+0x129c>)
 80029f0:	f007 ff8a 	bl	800a908 <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d119      	bne.n	8002a2e <menu+0x11ea>
 80029fa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <menu+0x12a0>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <menu+0x11ea>
 8002a08:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <menu+0x1294>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10e      	bne.n	8002a2e <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002a10:	4b3a      	ldr	r3, [pc, #232]	@ (8002afc <menu+0x12b8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b38      	ldr	r3, [pc, #224]	@ (8002afc <menu+0x12b8>)
 8002a1a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a1c:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <menu+0x12b8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d902      	bls.n	8002a2a <menu+0x11e6>
				kapi2AcSure = 0;
 8002a24:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <menu+0x12b8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a2a:	f001 fc51 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a2e:	2104      	movs	r1, #4
 8002a30:	482b      	ldr	r0, [pc, #172]	@ (8002ae0 <menu+0x129c>)
 8002a32:	f007 ff69 	bl	800a908 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d119      	bne.n	8002a70 <menu+0x122c>
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <menu+0x12a0>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <menu+0x122c>
 8002a4a:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <menu+0x1294>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <menu+0x12b8>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <menu+0x12b8>)
 8002a5c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <menu+0x12b8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <menu+0x1228>
		   		kapi2AcSure = 5;
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <menu+0x12b8>)
 8002a68:	2205      	movs	r2, #5
 8002a6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a6c:	f001 fc30 	bl	80042d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a70:	2108      	movs	r1, #8
 8002a72:	481b      	ldr	r0, [pc, #108]	@ (8002ae0 <menu+0x129c>)
 8002a74:	f007 ff48 	bl	800a908 <HAL_GPIO_ReadPin>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10d      	bne.n	8002a9a <menu+0x1256>
 8002a7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <menu+0x12a0>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <menu+0x12b8>)
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <menu+0x12a4>)
 8002a92:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a94:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <menu+0x12a8>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <menu+0x12ac>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b0d      	cmp	r3, #13
 8002aa0:	f040 8090 	bne.w	8002bc4 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002aa4:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <menu+0x12c0>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f006 fbd9 	bl	8009260 <lcd_print>

		if(kapitablaTip == 0) {
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <menu+0x12c4>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002ab6:	4a15      	ldr	r2, [pc, #84]	@ (8002b0c <menu+0x12c8>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2002      	movs	r0, #2
 8002abc:	f006 fbd0 	bl	8009260 <lcd_print>
 8002ac0:	e031      	b.n	8002b26 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <menu+0x12c4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d124      	bne.n	8002b14 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002aca:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <menu+0x12cc>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	2002      	movs	r0, #2
 8002ad0:	f006 fbc6 	bl	8009260 <lcd_print>
 8002ad4:	e027      	b.n	8002b26 <menu+0x12e2>
 8002ad6:	bf00      	nop
 8002ad8:	200016ca 	.word	0x200016ca
 8002adc:	20000114 	.word	0x20000114
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	200016ef 	.word	0x200016ef
 8002ae8:	200011f0 	.word	0x200011f0
 8002aec:	200016ec 	.word	0x200016ec
 8002af0:	200016c0 	.word	0x200016c0
 8002af4:	20001af4 	.word	0x20001af4
 8002af8:	20001acc 	.word	0x20001acc
 8002afc:	200016da 	.word	0x200016da
 8002b00:	20001260 	.word	0x20001260
 8002b04:	20001b08 	.word	0x20001b08
 8002b08:	200016cb 	.word	0x200016cb
 8002b0c:	20000100 	.word	0x20000100
 8002b10:	20001aa4 	.word	0x20001aa4
		} else if(kapitablaTip == 2) {
 8002b14:	4b3f      	ldr	r3, [pc, #252]	@ (8002c14 <menu+0x13d0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d104      	bne.n	8002b26 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c18 <menu+0x13d4>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	2002      	movs	r0, #2
 8002b22:	f006 fb9d 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b26:	2102      	movs	r1, #2
 8002b28:	483c      	ldr	r0, [pc, #240]	@ (8002c1c <menu+0x13d8>)
 8002b2a:	f007 feed 	bl	800a908 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <menu+0x131c>
 8002b34:	4b3a      	ldr	r3, [pc, #232]	@ (8002c20 <menu+0x13dc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002b42:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <menu+0x13d0>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <menu+0x13d0>)
 8002b4c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002b4e:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <menu+0x13d0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d902      	bls.n	8002b5c <menu+0x1318>
				kapitablaTip = 0;
 8002b56:	4b2f      	ldr	r3, [pc, #188]	@ (8002c14 <menu+0x13d0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b5c:	f001 fbb8 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b60:	2104      	movs	r1, #4
 8002b62:	482e      	ldr	r0, [pc, #184]	@ (8002c1c <menu+0x13d8>)
 8002b64:	f007 fed0 	bl	800a908 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <menu+0x1356>
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c20 <menu+0x13dc>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <menu+0x13d0>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <menu+0x13d0>)
 8002b86:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <menu+0x13d0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d902      	bls.n	8002b96 <menu+0x1352>
		   		kapitablaTip = 2;
 8002b90:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <menu+0x13d0>)
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b96:	f001 fb9b 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	481f      	ldr	r0, [pc, #124]	@ (8002c1c <menu+0x13d8>)
 8002b9e:	f007 feb3 	bl	800a908 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <menu+0x1380>
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <menu+0x13dc>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <menu+0x13d0>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <menu+0x13e0>)
 8002bbc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <menu+0x13e4>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <menu+0x13e8>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b0e      	cmp	r3, #14
 8002bca:	f040 80a3 	bne.w	8002d14 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002bce:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <menu+0x13ec>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f006 fb44 	bl	8009260 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002bd8:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <menu+0x13f0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002be0:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <menu+0x13f4>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	2002      	movs	r0, #2
 8002be6:	f006 fb3b 	bl	8009260 <lcd_print>
 8002bea:	e034      	b.n	8002c56 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <menu+0x13f0>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002bf4:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <menu+0x13f8>)
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f006 fb31 	bl	8009260 <lcd_print>
 8002bfe:	e02a      	b.n	8002c56 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <menu+0x13f0>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d11d      	bne.n	8002c44 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <menu+0x13fc>)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f006 fb27 	bl	8009260 <lcd_print>
 8002c12:	e020      	b.n	8002c56 <menu+0x1412>
 8002c14:	200016cb 	.word	0x200016cb
 8002c18:	20000114 	.word	0x20000114
 8002c1c:	40010800 	.word	0x40010800
 8002c20:	200016ef 	.word	0x200016ef
 8002c24:	200011f0 	.word	0x200011f0
 8002c28:	200016ec 	.word	0x200016ec
 8002c2c:	200016c0 	.word	0x200016c0
 8002c30:	20001b1c 	.word	0x20001b1c
 8002c34:	200016cd 	.word	0x200016cd
 8002c38:	20001b30 	.word	0x20001b30
 8002c3c:	20001b44 	.word	0x20001b44
 8002c40:	20001b58 	.word	0x20001b58
		} else if(kapiTablaAcKonum == 3) {
 8002c44:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <menu+0x15dc>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d104      	bne.n	8002c56 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002c4c:	4a75      	ldr	r2, [pc, #468]	@ (8002e24 <menu+0x15e0>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2002      	movs	r0, #2
 8002c52:	f006 fb05 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c56:	2102      	movs	r1, #2
 8002c58:	4873      	ldr	r0, [pc, #460]	@ (8002e28 <menu+0x15e4>)
 8002c5a:	f007 fe55 	bl	800a908 <HAL_GPIO_ReadPin>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d115      	bne.n	8002c90 <menu+0x144c>
 8002c64:	4b71      	ldr	r3, [pc, #452]	@ (8002e2c <menu+0x15e8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c72:	4b6b      	ldr	r3, [pc, #428]	@ (8002e20 <menu+0x15dc>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <menu+0x15dc>)
 8002c7c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c7e:	4b68      	ldr	r3, [pc, #416]	@ (8002e20 <menu+0x15dc>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002c86:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <menu+0x15dc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c8c:	f001 fb20 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c90:	2104      	movs	r1, #4
 8002c92:	4865      	ldr	r0, [pc, #404]	@ (8002e28 <menu+0x15e4>)
 8002c94:	f007 fe38 	bl	800a908 <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d115      	bne.n	8002cca <menu+0x1486>
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <menu+0x15e8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <menu+0x15dc>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e20 <menu+0x15dc>)
 8002cb6:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cb8:	4b59      	ldr	r3, [pc, #356]	@ (8002e20 <menu+0x15dc>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d902      	bls.n	8002cc6 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002cc0:	4b57      	ldr	r3, [pc, #348]	@ (8002e20 <menu+0x15dc>)
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cc6:	f001 fb03 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cca:	2108      	movs	r1, #8
 8002ccc:	4856      	ldr	r0, [pc, #344]	@ (8002e28 <menu+0x15e4>)
 8002cce:	f007 fe1b 	bl	800a908 <HAL_GPIO_ReadPin>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d11d      	bne.n	8002d14 <menu+0x14d0>
 8002cd8:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <menu+0x15e8>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e20 <menu+0x15dc>)
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	4b51      	ldr	r3, [pc, #324]	@ (8002e30 <menu+0x15ec>)
 8002cec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <menu+0x15dc>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <menu+0x14bc>
 8002cf8:	4b49      	ldr	r3, [pc, #292]	@ (8002e20 <menu+0x15dc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d106      	bne.n	8002d0e <menu+0x14ca>
				altLimit = 1;
 8002d00:	4b4c      	ldr	r3, [pc, #304]	@ (8002e34 <menu+0x15f0>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d06:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <menu+0x15f0>)
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b49      	ldr	r3, [pc, #292]	@ (8002e30 <menu+0x15ec>)
 8002d0c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <menu+0x15f4>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <menu+0x15f8>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d16c      	bne.n	8002df6 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002d1c:	4a48      	ldr	r2, [pc, #288]	@ (8002e40 <menu+0x15fc>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2001      	movs	r0, #1
 8002d22:	f006 fa9d 	bl	8009260 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002d26:	4a47      	ldr	r2, [pc, #284]	@ (8002e44 <menu+0x1600>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f006 fa98 	bl	8009260 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002d30:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <menu+0x1604>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	220a      	movs	r2, #10
 8002d36:	4945      	ldr	r1, [pc, #276]	@ (8002e4c <menu+0x1608>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00b f95d 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 8002d3e:	4a43      	ldr	r2, [pc, #268]	@ (8002e4c <menu+0x1608>)
 8002d40:	2110      	movs	r1, #16
 8002d42:	2002      	movs	r0, #2
 8002d44:	f006 fa8c 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d48:	2102      	movs	r1, #2
 8002d4a:	4837      	ldr	r0, [pc, #220]	@ (8002e28 <menu+0x15e4>)
 8002d4c:	f007 fddc 	bl	800a908 <HAL_GPIO_ReadPin>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d119      	bne.n	8002d8a <menu+0x1546>
 8002d56:	4b35      	ldr	r3, [pc, #212]	@ (8002e2c <menu+0x15e8>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f083 0301 	eor.w	r3, r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <menu+0x1546>
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <menu+0x160c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10e      	bne.n	8002d8a <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d6c:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <menu+0x1604>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b34      	ldr	r3, [pc, #208]	@ (8002e48 <menu+0x1604>)
 8002d76:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d78:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <menu+0x1604>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d902      	bls.n	8002d86 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002d80:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <menu+0x1604>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d86:	f001 faa3 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4826      	ldr	r0, [pc, #152]	@ (8002e28 <menu+0x15e4>)
 8002d8e:	f007 fdbb 	bl	800a908 <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d119      	bne.n	8002dcc <menu+0x1588>
 8002d98:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <menu+0x15e8>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <menu+0x1588>
 8002da6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e50 <menu+0x160c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002dae:	4b26      	ldr	r3, [pc, #152]	@ (8002e48 <menu+0x1604>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <menu+0x1604>)
 8002db8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002dba:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <menu+0x1604>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <menu+0x1604>)
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002dc8:	f001 fa82 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dcc:	2108      	movs	r1, #8
 8002dce:	4816      	ldr	r0, [pc, #88]	@ (8002e28 <menu+0x15e4>)
 8002dd0:	f007 fd9a 	bl	800a908 <HAL_GPIO_ReadPin>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10d      	bne.n	8002df6 <menu+0x15b2>
 8002dda:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <menu+0x15e8>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <menu+0x1604>)
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <menu+0x15ec>)
 8002dee:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <menu+0x15f4>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <menu+0x15f8>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	f040 8086 	bne.w	8002f0c <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <menu+0x1610>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	2001      	movs	r0, #1
 8002e06:	f006 fa2b 	bl	8009260 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <menu+0x1614>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d124      	bne.n	8002e5c <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002e12:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <menu+0x15e0>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	2002      	movs	r0, #2
 8002e18:	f006 fa22 	bl	8009260 <lcd_print>
 8002e1c:	e027      	b.n	8002e6e <menu+0x162a>
 8002e1e:	bf00      	nop
 8002e20:	200016cd 	.word	0x200016cd
 8002e24:	200019a0 	.word	0x200019a0
 8002e28:	40010800 	.word	0x40010800
 8002e2c:	200016ef 	.word	0x200016ef
 8002e30:	200011f0 	.word	0x200011f0
 8002e34:	200016c6 	.word	0x200016c6
 8002e38:	200016ec 	.word	0x200016ec
 8002e3c:	200016c0 	.word	0x200016c0
 8002e40:	20001b6c 	.word	0x20001b6c
 8002e44:	20001acc 	.word	0x20001acc
 8002e48:	200016db 	.word	0x200016db
 8002e4c:	20001260 	.word	0x20001260
 8002e50:	200016cb 	.word	0x200016cb
 8002e54:	20001b80 	.word	0x20001b80
 8002e58:	200016ce 	.word	0x200016ce
		} else if(yukariYavasLimit == 1) {
 8002e5c:	4b84      	ldr	r3, [pc, #528]	@ (8003070 <menu+0x182c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d104      	bne.n	8002e6e <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002e64:	4a83      	ldr	r2, [pc, #524]	@ (8003074 <menu+0x1830>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f006 f9f9 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4881      	ldr	r0, [pc, #516]	@ (8003078 <menu+0x1834>)
 8002e72:	f007 fd49 	bl	800a908 <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d115      	bne.n	8002ea8 <menu+0x1664>
 8002e7c:	4b7f      	ldr	r3, [pc, #508]	@ (800307c <menu+0x1838>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e8a:	4b79      	ldr	r3, [pc, #484]	@ (8003070 <menu+0x182c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b77      	ldr	r3, [pc, #476]	@ (8003070 <menu+0x182c>)
 8002e94:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e96:	4b76      	ldr	r3, [pc, #472]	@ (8003070 <menu+0x182c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d902      	bls.n	8002ea4 <menu+0x1660>
				yukariYavasLimit = 0;
 8002e9e:	4b74      	ldr	r3, [pc, #464]	@ (8003070 <menu+0x182c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ea4:	f001 fa14 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	4873      	ldr	r0, [pc, #460]	@ (8003078 <menu+0x1834>)
 8002eac:	f007 fd2c 	bl	800a908 <HAL_GPIO_ReadPin>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <menu+0x169e>
 8002eb6:	4b71      	ldr	r3, [pc, #452]	@ (800307c <menu+0x1838>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <menu+0x182c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b68      	ldr	r3, [pc, #416]	@ (8003070 <menu+0x182c>)
 8002ece:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002ed0:	4b67      	ldr	r3, [pc, #412]	@ (8003070 <menu+0x182c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002ed8:	4b65      	ldr	r3, [pc, #404]	@ (8003070 <menu+0x182c>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ede:	f001 f9f7 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee2:	2108      	movs	r1, #8
 8002ee4:	4864      	ldr	r0, [pc, #400]	@ (8003078 <menu+0x1834>)
 8002ee6:	f007 fd0f 	bl	800a908 <HAL_GPIO_ReadPin>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10d      	bne.n	8002f0c <menu+0x16c8>
 8002ef0:	4b62      	ldr	r3, [pc, #392]	@ (800307c <menu+0x1838>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f083 0301 	eor.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002efe:	4b5c      	ldr	r3, [pc, #368]	@ (8003070 <menu+0x182c>)
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	4b5f      	ldr	r3, [pc, #380]	@ (8003080 <menu+0x183c>)
 8002f04:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f06:	4b5f      	ldr	r3, [pc, #380]	@ (8003084 <menu+0x1840>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <menu+0x1844>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b11      	cmp	r3, #17
 8002f12:	f040 808b 	bne.w	800302c <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002f16:	4a5d      	ldr	r2, [pc, #372]	@ (800308c <menu+0x1848>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f006 f9a0 	bl	8009260 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002f20:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <menu+0x184c>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d105      	bne.n	8002f34 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002f28:	4a5a      	ldr	r2, [pc, #360]	@ (8003094 <menu+0x1850>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f006 f997 	bl	8009260 <lcd_print>
 8002f32:	e012      	b.n	8002f5a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002f34:	4b56      	ldr	r3, [pc, #344]	@ (8003090 <menu+0x184c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002f3c:	4a56      	ldr	r2, [pc, #344]	@ (8003098 <menu+0x1854>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2002      	movs	r0, #2
 8002f42:	f006 f98d 	bl	8009260 <lcd_print>
 8002f46:	e008      	b.n	8002f5a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002f48:	4b51      	ldr	r3, [pc, #324]	@ (8003090 <menu+0x184c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002f50:	4a52      	ldr	r2, [pc, #328]	@ (800309c <menu+0x1858>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	2002      	movs	r0, #2
 8002f56:	f006 f983 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4846      	ldr	r0, [pc, #280]	@ (8003078 <menu+0x1834>)
 8002f5e:	f007 fcd3 	bl	800a908 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d115      	bne.n	8002f94 <menu+0x1750>
 8002f68:	4b44      	ldr	r3, [pc, #272]	@ (800307c <menu+0x1838>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f76:	4b46      	ldr	r3, [pc, #280]	@ (8003090 <menu+0x184c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <menu+0x184c>)
 8002f80:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f82:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <menu+0x184c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002f8a:	4b41      	ldr	r3, [pc, #260]	@ (8003090 <menu+0x184c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f90:	f001 f99e 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f94:	2104      	movs	r1, #4
 8002f96:	4838      	ldr	r0, [pc, #224]	@ (8003078 <menu+0x1834>)
 8002f98:	f007 fcb6 	bl	800a908 <HAL_GPIO_ReadPin>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d115      	bne.n	8002fce <menu+0x178a>
 8002fa2:	4b36      	ldr	r3, [pc, #216]	@ (800307c <menu+0x1838>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	f083 0301 	eor.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00e      	beq.n	8002fce <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002fb0:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <menu+0x184c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b35      	ldr	r3, [pc, #212]	@ (8003090 <menu+0x184c>)
 8002fba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002fbc:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <menu+0x184c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d902      	bls.n	8002fca <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002fc4:	4b32      	ldr	r3, [pc, #200]	@ (8003090 <menu+0x184c>)
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fca:	f001 f981 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fce:	2108      	movs	r1, #8
 8002fd0:	4829      	ldr	r0, [pc, #164]	@ (8003078 <menu+0x1834>)
 8002fd2:	f007 fc99 	bl	800a908 <HAL_GPIO_ReadPin>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d127      	bne.n	800302c <menu+0x17e8>
 8002fdc:	4b27      	ldr	r3, [pc, #156]	@ (800307c <menu+0x1838>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d020      	beq.n	800302c <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <menu+0x184c>)
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <menu+0x183c>)
 8002ff0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002ff2:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <menu+0x184c>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d003      	beq.n	8003002 <menu+0x17be>
 8002ffa:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <menu+0x184c>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d106      	bne.n	8003010 <menu+0x17cc>
				calismaSekli = 0;
 8003002:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <menu+0x185c>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003008:	4b25      	ldr	r3, [pc, #148]	@ (80030a0 <menu+0x185c>)
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <menu+0x183c>)
 800300e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <menu+0x184c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8003018:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <menu+0x1860>)
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800301e:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <menu+0x1860>)
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <menu+0x183c>)
 8003024:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <menu+0x1840>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <menu+0x1844>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b12      	cmp	r3, #18
 8003032:	f040 8097 	bne.w	8003164 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8003036:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <menu+0x184c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d105      	bne.n	800304a <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <menu+0x1864>)
 8003040:	2101      	movs	r1, #1
 8003042:	2001      	movs	r0, #1
 8003044:	f006 f90c 	bl	8009260 <lcd_print>
 8003048:	e008      	b.n	800305c <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 800304a:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <menu+0x184c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d104      	bne.n	800305c <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <menu+0x1868>)
 8003054:	2101      	movs	r1, #1
 8003056:	2001      	movs	r0, #1
 8003058:	f006 f902 	bl	8009260 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <menu+0x186c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d127      	bne.n	80030b4 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <menu+0x1858>)
 8003066:	2101      	movs	r1, #1
 8003068:	2002      	movs	r0, #2
 800306a:	f006 f8f9 	bl	8009260 <lcd_print>
 800306e:	e02a      	b.n	80030c6 <menu+0x1882>
 8003070:	200016ce 	.word	0x200016ce
 8003074:	200019b4 	.word	0x200019b4
 8003078:	40010800 	.word	0x40010800
 800307c:	200016ef 	.word	0x200016ef
 8003080:	200011f0 	.word	0x200011f0
 8003084:	200016ec 	.word	0x200016ec
 8003088:	200016c0 	.word	0x200016c0
 800308c:	20001b94 	.word	0x20001b94
 8003090:	200016cf 	.word	0x200016cf
 8003094:	20001ba8 	.word	0x20001ba8
 8003098:	20001bbc 	.word	0x20001bbc
 800309c:	200019a0 	.word	0x200019a0
 80030a0:	200016c1 	.word	0x200016c1
 80030a4:	200016d2 	.word	0x200016d2
 80030a8:	20001bd0 	.word	0x20001bd0
 80030ac:	20001be4 	.word	0x20001be4
 80030b0:	200016d0 	.word	0x200016d0
		} else if(devirmeYukariIleriLimit == 1){
 80030b4:	4b79      	ldr	r3, [pc, #484]	@ (800329c <menu+0x1a58>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d104      	bne.n	80030c6 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 80030bc:	4a78      	ldr	r2, [pc, #480]	@ (80032a0 <menu+0x1a5c>)
 80030be:	2101      	movs	r1, #1
 80030c0:	2002      	movs	r0, #2
 80030c2:	f006 f8cd 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c6:	2102      	movs	r1, #2
 80030c8:	4876      	ldr	r0, [pc, #472]	@ (80032a4 <menu+0x1a60>)
 80030ca:	f007 fc1d 	bl	800a908 <HAL_GPIO_ReadPin>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d115      	bne.n	8003100 <menu+0x18bc>
 80030d4:	4b74      	ldr	r3, [pc, #464]	@ (80032a8 <menu+0x1a64>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00e      	beq.n	8003100 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80030e2:	4b6e      	ldr	r3, [pc, #440]	@ (800329c <menu+0x1a58>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b6c      	ldr	r3, [pc, #432]	@ (800329c <menu+0x1a58>)
 80030ec:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80030ee:	4b6b      	ldr	r3, [pc, #428]	@ (800329c <menu+0x1a58>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d902      	bls.n	80030fc <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 80030f6:	4b69      	ldr	r3, [pc, #420]	@ (800329c <menu+0x1a58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030fc:	f001 f8e8 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003100:	2104      	movs	r1, #4
 8003102:	4868      	ldr	r0, [pc, #416]	@ (80032a4 <menu+0x1a60>)
 8003104:	f007 fc00 	bl	800a908 <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d115      	bne.n	800313a <menu+0x18f6>
 800310e:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <menu+0x1a64>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f083 0301 	eor.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800311c:	4b5f      	ldr	r3, [pc, #380]	@ (800329c <menu+0x1a58>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b5d      	ldr	r3, [pc, #372]	@ (800329c <menu+0x1a58>)
 8003126:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003128:	4b5c      	ldr	r3, [pc, #368]	@ (800329c <menu+0x1a58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8003130:	4b5a      	ldr	r3, [pc, #360]	@ (800329c <menu+0x1a58>)
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003136:	f001 f8cb 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800313a:	2108      	movs	r1, #8
 800313c:	4859      	ldr	r0, [pc, #356]	@ (80032a4 <menu+0x1a60>)
 800313e:	f007 fbe3 	bl	800a908 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10d      	bne.n	8003164 <menu+0x1920>
 8003148:	4b57      	ldr	r3, [pc, #348]	@ (80032a8 <menu+0x1a64>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	f083 0301 	eor.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <menu+0x1a58>)
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	4b54      	ldr	r3, [pc, #336]	@ (80032ac <menu+0x1a68>)
 800315c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800315e:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <menu+0x1a6c>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003164:	4b53      	ldr	r3, [pc, #332]	@ (80032b4 <menu+0x1a70>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b13      	cmp	r3, #19
 800316a:	d174      	bne.n	8003256 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 800316c:	4b52      	ldr	r3, [pc, #328]	@ (80032b8 <menu+0x1a74>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d105      	bne.n	8003180 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8003174:	4a51      	ldr	r2, [pc, #324]	@ (80032bc <menu+0x1a78>)
 8003176:	2101      	movs	r1, #1
 8003178:	2001      	movs	r0, #1
 800317a:	f006 f871 	bl	8009260 <lcd_print>
 800317e:	e008      	b.n	8003192 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8003180:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <menu+0x1a74>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d104      	bne.n	8003192 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8003188:	4a4d      	ldr	r2, [pc, #308]	@ (80032c0 <menu+0x1a7c>)
 800318a:	2101      	movs	r1, #1
 800318c:	2001      	movs	r0, #1
 800318e:	f006 f867 	bl	8009260 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003192:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <menu+0x1a80>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 800319a:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <menu+0x1a84>)
 800319c:	2101      	movs	r1, #1
 800319e:	2002      	movs	r0, #2
 80031a0:	f006 f85e 	bl	8009260 <lcd_print>
 80031a4:	e008      	b.n	80031b8 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <menu+0x1a80>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d104      	bne.n	80031b8 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 80031ae:	4a3c      	ldr	r2, [pc, #240]	@ (80032a0 <menu+0x1a5c>)
 80031b0:	2101      	movs	r1, #1
 80031b2:	2002      	movs	r0, #2
 80031b4:	f006 f854 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b8:	2102      	movs	r1, #2
 80031ba:	483a      	ldr	r0, [pc, #232]	@ (80032a4 <menu+0x1a60>)
 80031bc:	f007 fba4 	bl	800a908 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <menu+0x19ae>
 80031c6:	4b38      	ldr	r3, [pc, #224]	@ (80032a8 <menu+0x1a64>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00e      	beq.n	80031f2 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80031d4:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <menu+0x1a80>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <menu+0x1a80>)
 80031de:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80031e0:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <menu+0x1a80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d902      	bls.n	80031ee <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <menu+0x1a80>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031ee:	f001 f86f 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2104      	movs	r1, #4
 80031f4:	482b      	ldr	r0, [pc, #172]	@ (80032a4 <menu+0x1a60>)
 80031f6:	f007 fb87 	bl	800a908 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d115      	bne.n	800322c <menu+0x19e8>
 8003200:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <menu+0x1a64>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800320e:	4b2d      	ldr	r3, [pc, #180]	@ (80032c4 <menu+0x1a80>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <menu+0x1a80>)
 8003218:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800321a:	4b2a      	ldr	r3, [pc, #168]	@ (80032c4 <menu+0x1a80>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <menu+0x1a80>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003228:	f001 f852 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800322c:	2108      	movs	r1, #8
 800322e:	481d      	ldr	r0, [pc, #116]	@ (80032a4 <menu+0x1a60>)
 8003230:	f007 fb6a 	bl	800a908 <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10d      	bne.n	8003256 <menu+0x1a12>
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <menu+0x1a64>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003248:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <menu+0x1a80>)
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <menu+0x1a68>)
 800324e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <menu+0x1a6c>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003256:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <menu+0x1a70>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b14      	cmp	r3, #20
 800325c:	f040 809e 	bne.w	800339c <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <menu+0x1a74>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8003268:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <menu+0x1a88>)
 800326a:	2101      	movs	r1, #1
 800326c:	2001      	movs	r0, #1
 800326e:	f005 fff7 	bl	8009260 <lcd_print>
 8003272:	e008      	b.n	8003286 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8003274:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <menu+0x1a74>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d104      	bne.n	8003286 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 800327c:	4a14      	ldr	r2, [pc, #80]	@ (80032d0 <menu+0x1a8c>)
 800327e:	2101      	movs	r1, #1
 8003280:	2001      	movs	r0, #1
 8003282:	f005 ffed 	bl	8009260 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <menu+0x1a90>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d126      	bne.n	80032dc <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 800328e:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <menu+0x1a94>)
 8003290:	2101      	movs	r1, #1
 8003292:	2002      	movs	r0, #2
 8003294:	f005 ffe4 	bl	8009260 <lcd_print>
 8003298:	e029      	b.n	80032ee <menu+0x1aaa>
 800329a:	bf00      	nop
 800329c:	200016d0 	.word	0x200016d0
 80032a0:	200019b4 	.word	0x200019b4
 80032a4:	40010800 	.word	0x40010800
 80032a8:	200016ef 	.word	0x200016ef
 80032ac:	200011f0 	.word	0x200011f0
 80032b0:	200016ec 	.word	0x200016ec
 80032b4:	200016c0 	.word	0x200016c0
 80032b8:	200016cf 	.word	0x200016cf
 80032bc:	20001bf8 	.word	0x20001bf8
 80032c0:	20001c0c 	.word	0x20001c0c
 80032c4:	200016d1 	.word	0x200016d1
 80032c8:	200019a0 	.word	0x200019a0
 80032cc:	20001c20 	.word	0x20001c20
 80032d0:	20001c34 	.word	0x20001c34
 80032d4:	200016d2 	.word	0x200016d2
 80032d8:	20001c48 	.word	0x20001c48
		} else if(devirmeSilindirTipi == 1) {
 80032dc:	4b39      	ldr	r3, [pc, #228]	@ (80033c4 <menu+0x1b80>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d104      	bne.n	80032ee <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 80032e4:	4a38      	ldr	r2, [pc, #224]	@ (80033c8 <menu+0x1b84>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	2002      	movs	r0, #2
 80032ea:	f005 ffb9 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80032ee:	2102      	movs	r1, #2
 80032f0:	4836      	ldr	r0, [pc, #216]	@ (80033cc <menu+0x1b88>)
 80032f2:	f007 fb09 	bl	800a908 <HAL_GPIO_ReadPin>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d119      	bne.n	8003330 <menu+0x1aec>
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <menu+0x1b8c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <menu+0x1aec>
 800330a:	4b32      	ldr	r3, [pc, #200]	@ (80033d4 <menu+0x1b90>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d10e      	bne.n	8003330 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003312:	4b2c      	ldr	r3, [pc, #176]	@ (80033c4 <menu+0x1b80>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <menu+0x1b80>)
 800331c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <menu+0x1b80>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d902      	bls.n	800332c <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8003326:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <menu+0x1b80>)
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800332c:	f000 ffd0 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003330:	2104      	movs	r1, #4
 8003332:	4826      	ldr	r0, [pc, #152]	@ (80033cc <menu+0x1b88>)
 8003334:	f007 fae8 	bl	800a908 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d119      	bne.n	8003372 <menu+0x1b2e>
 800333e:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <menu+0x1b8c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <menu+0x1b2e>
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <menu+0x1b90>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d10e      	bne.n	8003372 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <menu+0x1b80>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <menu+0x1b80>)
 800335e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003360:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <menu+0x1b80>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8003368:	4b16      	ldr	r3, [pc, #88]	@ (80033c4 <menu+0x1b80>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800336e:	f000 ffaf 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003372:	2108      	movs	r1, #8
 8003374:	4815      	ldr	r0, [pc, #84]	@ (80033cc <menu+0x1b88>)
 8003376:	f007 fac7 	bl	800a908 <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10d      	bne.n	800339c <menu+0x1b58>
 8003380:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <menu+0x1b8c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f083 0301 	eor.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 800338e:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <menu+0x1b80>)
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <menu+0x1b94>)
 8003394:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003396:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <menu+0x1b98>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800339c:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <menu+0x1b9c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b15      	cmp	r3, #21
 80033a2:	f040 8088 	bne.w	80034b6 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 80033a6:	4a0f      	ldr	r2, [pc, #60]	@ (80033e4 <menu+0x1ba0>)
 80033a8:	2101      	movs	r1, #1
 80033aa:	2001      	movs	r0, #1
 80033ac:	f005 ff58 	bl	8009260 <lcd_print>

		if(platformSilindirTipi == 0) {
 80033b0:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <menu+0x1ba4>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11b      	bne.n	80033f0 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 80033b8:	4a0c      	ldr	r2, [pc, #48]	@ (80033ec <menu+0x1ba8>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	2002      	movs	r0, #2
 80033be:	f005 ff4f 	bl	8009260 <lcd_print>
 80033c2:	e01e      	b.n	8003402 <menu+0x1bbe>
 80033c4:	200016d2 	.word	0x200016d2
 80033c8:	20001c5c 	.word	0x20001c5c
 80033cc:	40010800 	.word	0x40010800
 80033d0:	200016ef 	.word	0x200016ef
 80033d4:	200016cf 	.word	0x200016cf
 80033d8:	200011f0 	.word	0x200011f0
 80033dc:	200016ec 	.word	0x200016ec
 80033e0:	200016c0 	.word	0x200016c0
 80033e4:	20001c70 	.word	0x20001c70
 80033e8:	200016d3 	.word	0x200016d3
 80033ec:	20001c48 	.word	0x20001c48
		} else if(platformSilindirTipi == 1) {
 80033f0:	4ba1      	ldr	r3, [pc, #644]	@ (8003678 <menu+0x1e34>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 80033f8:	4aa0      	ldr	r2, [pc, #640]	@ (800367c <menu+0x1e38>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f005 ff2f 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003402:	2102      	movs	r1, #2
 8003404:	489e      	ldr	r0, [pc, #632]	@ (8003680 <menu+0x1e3c>)
 8003406:	f007 fa7f 	bl	800a908 <HAL_GPIO_ReadPin>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d115      	bne.n	800343c <menu+0x1bf8>
 8003410:	4b9c      	ldr	r3, [pc, #624]	@ (8003684 <menu+0x1e40>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 800341e:	4b96      	ldr	r3, [pc, #600]	@ (8003678 <menu+0x1e34>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b94      	ldr	r3, [pc, #592]	@ (8003678 <menu+0x1e34>)
 8003428:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800342a:	4b93      	ldr	r3, [pc, #588]	@ (8003678 <menu+0x1e34>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d902      	bls.n	8003438 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8003432:	4b91      	ldr	r3, [pc, #580]	@ (8003678 <menu+0x1e34>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003438:	f000 ff4a 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800343c:	2104      	movs	r1, #4
 800343e:	4890      	ldr	r0, [pc, #576]	@ (8003680 <menu+0x1e3c>)
 8003440:	f007 fa62 	bl	800a908 <HAL_GPIO_ReadPin>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d115      	bne.n	8003476 <menu+0x1c32>
 800344a:	4b8e      	ldr	r3, [pc, #568]	@ (8003684 <menu+0x1e40>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f083 0301 	eor.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003458:	4b87      	ldr	r3, [pc, #540]	@ (8003678 <menu+0x1e34>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <menu+0x1e34>)
 8003462:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003464:	4b84      	ldr	r3, [pc, #528]	@ (8003678 <menu+0x1e34>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 800346c:	4b82      	ldr	r3, [pc, #520]	@ (8003678 <menu+0x1e34>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003472:	f000 ff2d 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003476:	2108      	movs	r1, #8
 8003478:	4881      	ldr	r0, [pc, #516]	@ (8003680 <menu+0x1e3c>)
 800347a:	f007 fa45 	bl	800a908 <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d118      	bne.n	80034b6 <menu+0x1c72>
 8003484:	4b7f      	ldr	r3, [pc, #508]	@ (8003684 <menu+0x1e40>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8003492:	4b79      	ldr	r3, [pc, #484]	@ (8003678 <menu+0x1e34>)
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	4b7c      	ldr	r3, [pc, #496]	@ (8003688 <menu+0x1e44>)
 8003498:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800349a:	4b77      	ldr	r3, [pc, #476]	@ (8003678 <menu+0x1e34>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <menu+0x1c6c>
				altLimit = 1;
 80034a2:	4b7a      	ldr	r3, [pc, #488]	@ (800368c <menu+0x1e48>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80034a8:	4b78      	ldr	r3, [pc, #480]	@ (800368c <menu+0x1e48>)
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	4b76      	ldr	r3, [pc, #472]	@ (8003688 <menu+0x1e44>)
 80034ae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80034b0:	4b77      	ldr	r3, [pc, #476]	@ (8003690 <menu+0x1e4c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80034b6:	4b77      	ldr	r3, [pc, #476]	@ (8003694 <menu+0x1e50>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b16      	cmp	r3, #22
 80034bc:	d164      	bne.n	8003588 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 80034be:	4a76      	ldr	r2, [pc, #472]	@ (8003698 <menu+0x1e54>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	2001      	movs	r0, #1
 80034c4:	f005 fecc 	bl	8009260 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80034c8:	4a74      	ldr	r2, [pc, #464]	@ (800369c <menu+0x1e58>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f005 fec7 	bl	8009260 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80034d2:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <menu+0x1e5c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	220a      	movs	r2, #10
 80034d8:	4972      	ldr	r1, [pc, #456]	@ (80036a4 <menu+0x1e60>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f00a fd8c 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 80034e0:	4a70      	ldr	r2, [pc, #448]	@ (80036a4 <menu+0x1e60>)
 80034e2:	2110      	movs	r1, #16
 80034e4:	2002      	movs	r0, #2
 80034e6:	f005 febb 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ea:	2102      	movs	r1, #2
 80034ec:	4864      	ldr	r0, [pc, #400]	@ (8003680 <menu+0x1e3c>)
 80034ee:	f007 fa0b 	bl	800a908 <HAL_GPIO_ReadPin>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d115      	bne.n	8003524 <menu+0x1ce0>
 80034f8:	4b62      	ldr	r3, [pc, #392]	@ (8003684 <menu+0x1e40>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f083 0301 	eor.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8003506:	4b66      	ldr	r3, [pc, #408]	@ (80036a0 <menu+0x1e5c>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4b64      	ldr	r3, [pc, #400]	@ (80036a0 <menu+0x1e5c>)
 8003510:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003512:	4b63      	ldr	r3, [pc, #396]	@ (80036a0 <menu+0x1e5c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d902      	bls.n	8003520 <menu+0x1cdc>
				yukariValfTmr = 0;
 800351a:	4b61      	ldr	r3, [pc, #388]	@ (80036a0 <menu+0x1e5c>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003520:	f000 fed6 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003524:	2104      	movs	r1, #4
 8003526:	4856      	ldr	r0, [pc, #344]	@ (8003680 <menu+0x1e3c>)
 8003528:	f007 f9ee 	bl	800a908 <HAL_GPIO_ReadPin>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d115      	bne.n	800355e <menu+0x1d1a>
 8003532:	4b54      	ldr	r3, [pc, #336]	@ (8003684 <menu+0x1e40>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003540:	4b57      	ldr	r3, [pc, #348]	@ (80036a0 <menu+0x1e5c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3b01      	subs	r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b55      	ldr	r3, [pc, #340]	@ (80036a0 <menu+0x1e5c>)
 800354a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800354c:	4b54      	ldr	r3, [pc, #336]	@ (80036a0 <menu+0x1e5c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d902      	bls.n	800355a <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <menu+0x1e5c>)
 8003556:	2205      	movs	r2, #5
 8003558:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800355a:	f000 feb9 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800355e:	2108      	movs	r1, #8
 8003560:	4847      	ldr	r0, [pc, #284]	@ (8003680 <menu+0x1e3c>)
 8003562:	f007 f9d1 	bl	800a908 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10d      	bne.n	8003588 <menu+0x1d44>
 800356c:	4b45      	ldr	r3, [pc, #276]	@ (8003684 <menu+0x1e40>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 800357a:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <menu+0x1e5c>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4b42      	ldr	r3, [pc, #264]	@ (8003688 <menu+0x1e44>)
 8003580:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003582:	4b43      	ldr	r3, [pc, #268]	@ (8003690 <menu+0x1e4c>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003588:	4b42      	ldr	r3, [pc, #264]	@ (8003694 <menu+0x1e50>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b17      	cmp	r3, #23
 800358e:	d164      	bne.n	800365a <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003590:	4a45      	ldr	r2, [pc, #276]	@ (80036a8 <menu+0x1e64>)
 8003592:	2101      	movs	r1, #1
 8003594:	2001      	movs	r0, #1
 8003596:	f005 fe63 	bl	8009260 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800359a:	4a40      	ldr	r2, [pc, #256]	@ (800369c <menu+0x1e58>)
 800359c:	2101      	movs	r1, #1
 800359e:	2002      	movs	r0, #2
 80035a0:	f005 fe5e 	bl	8009260 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80035a4:	4b41      	ldr	r3, [pc, #260]	@ (80036ac <menu+0x1e68>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	220a      	movs	r2, #10
 80035aa:	493e      	ldr	r1, [pc, #248]	@ (80036a4 <menu+0x1e60>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00a fd23 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 80035b2:	4a3c      	ldr	r2, [pc, #240]	@ (80036a4 <menu+0x1e60>)
 80035b4:	2110      	movs	r1, #16
 80035b6:	2002      	movs	r0, #2
 80035b8:	f005 fe52 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035bc:	2102      	movs	r1, #2
 80035be:	4830      	ldr	r0, [pc, #192]	@ (8003680 <menu+0x1e3c>)
 80035c0:	f007 f9a2 	bl	800a908 <HAL_GPIO_ReadPin>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d115      	bne.n	80035f6 <menu+0x1db2>
 80035ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003684 <menu+0x1e40>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f083 0301 	eor.w	r3, r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80035d8:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <menu+0x1e68>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b32      	ldr	r3, [pc, #200]	@ (80036ac <menu+0x1e68>)
 80035e2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80035e4:	4b31      	ldr	r3, [pc, #196]	@ (80036ac <menu+0x1e68>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d902      	bls.n	80035f2 <menu+0x1dae>
				asagiValfTmr = 0;
 80035ec:	4b2f      	ldr	r3, [pc, #188]	@ (80036ac <menu+0x1e68>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035f2:	f000 fe6d 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f6:	2104      	movs	r1, #4
 80035f8:	4821      	ldr	r0, [pc, #132]	@ (8003680 <menu+0x1e3c>)
 80035fa:	f007 f985 	bl	800a908 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <menu+0x1dec>
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <menu+0x1e40>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003612:	4b26      	ldr	r3, [pc, #152]	@ (80036ac <menu+0x1e68>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <menu+0x1e68>)
 800361c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <menu+0x1e68>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <menu+0x1de8>
		   		asagiValfTmr = 5;
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <menu+0x1e68>)
 8003628:	2205      	movs	r2, #5
 800362a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800362c:	f000 fe50 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003630:	2108      	movs	r1, #8
 8003632:	4813      	ldr	r0, [pc, #76]	@ (8003680 <menu+0x1e3c>)
 8003634:	f007 f968 	bl	800a908 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10d      	bne.n	800365a <menu+0x1e16>
 800363e:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <menu+0x1e40>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <menu+0x1e68>)
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <menu+0x1e44>)
 8003652:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003654:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <menu+0x1e4c>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <menu+0x1e50>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b18      	cmp	r3, #24
 8003660:	f040 8093 	bne.w	800378a <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <menu+0x1e6c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d125      	bne.n	80036b8 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800366c:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <menu+0x1e70>)
 800366e:	2101      	movs	r1, #1
 8003670:	2001      	movs	r0, #1
 8003672:	f005 fdf5 	bl	8009260 <lcd_print>
 8003676:	e028      	b.n	80036ca <menu+0x1e86>
 8003678:	200016d3 	.word	0x200016d3
 800367c:	20001c5c 	.word	0x20001c5c
 8003680:	40010800 	.word	0x40010800
 8003684:	200016ef 	.word	0x200016ef
 8003688:	200011f0 	.word	0x200011f0
 800368c:	200016c6 	.word	0x200016c6
 8003690:	200016ec 	.word	0x200016ec
 8003694:	200016c0 	.word	0x200016c0
 8003698:	20001c84 	.word	0x20001c84
 800369c:	20001acc 	.word	0x20001acc
 80036a0:	200016d4 	.word	0x200016d4
 80036a4:	20001260 	.word	0x20001260
 80036a8:	20001c98 	.word	0x20001c98
 80036ac:	200016d5 	.word	0x200016d5
 80036b0:	200016cf 	.word	0x200016cf
 80036b4:	20001cac 	.word	0x20001cac
		} else if(devirmeYuruyusSecim == 1) {
 80036b8:	4b8c      	ldr	r3, [pc, #560]	@ (80038ec <menu+0x20a8>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d104      	bne.n	80036ca <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80036c0:	4a8b      	ldr	r2, [pc, #556]	@ (80038f0 <menu+0x20ac>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2001      	movs	r0, #1
 80036c6:	f005 fdcb 	bl	8009260 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80036ca:	4a8a      	ldr	r2, [pc, #552]	@ (80038f4 <menu+0x20b0>)
 80036cc:	2101      	movs	r1, #1
 80036ce:	2002      	movs	r0, #2
 80036d0:	f005 fdc6 	bl	8009260 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80036d4:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <menu+0x20b4>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	220a      	movs	r2, #10
 80036da:	4988      	ldr	r1, [pc, #544]	@ (80038fc <menu+0x20b8>)
 80036dc:	4618      	mov	r0, r3
 80036de:	f00a fc8b 	bl	800dff8 <itoa>
		lcd_print(2, 16, snum);
 80036e2:	4a86      	ldr	r2, [pc, #536]	@ (80038fc <menu+0x20b8>)
 80036e4:	2110      	movs	r1, #16
 80036e6:	2002      	movs	r0, #2
 80036e8:	f005 fdba 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ec:	2102      	movs	r1, #2
 80036ee:	4884      	ldr	r0, [pc, #528]	@ (8003900 <menu+0x20bc>)
 80036f0:	f007 f90a 	bl	800a908 <HAL_GPIO_ReadPin>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d115      	bne.n	8003726 <menu+0x1ee2>
 80036fa:	4b82      	ldr	r3, [pc, #520]	@ (8003904 <menu+0x20c0>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003708:	4b7b      	ldr	r3, [pc, #492]	@ (80038f8 <menu+0x20b4>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b79      	ldr	r3, [pc, #484]	@ (80038f8 <menu+0x20b4>)
 8003712:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003714:	4b78      	ldr	r3, [pc, #480]	@ (80038f8 <menu+0x20b4>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d902      	bls.n	8003722 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 800371c:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <menu+0x20b4>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003722:	f000 fdd5 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003726:	2104      	movs	r1, #4
 8003728:	4875      	ldr	r0, [pc, #468]	@ (8003900 <menu+0x20bc>)
 800372a:	f007 f8ed 	bl	800a908 <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d115      	bne.n	8003760 <menu+0x1f1c>
 8003734:	4b73      	ldr	r3, [pc, #460]	@ (8003904 <menu+0x20c0>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003742:	4b6d      	ldr	r3, [pc, #436]	@ (80038f8 <menu+0x20b4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b6b      	ldr	r3, [pc, #428]	@ (80038f8 <menu+0x20b4>)
 800374c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 800374e:	4b6a      	ldr	r3, [pc, #424]	@ (80038f8 <menu+0x20b4>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8003756:	4b68      	ldr	r3, [pc, #416]	@ (80038f8 <menu+0x20b4>)
 8003758:	2205      	movs	r2, #5
 800375a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800375c:	f000 fdb8 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003760:	2108      	movs	r1, #8
 8003762:	4867      	ldr	r0, [pc, #412]	@ (8003900 <menu+0x20bc>)
 8003764:	f007 f8d0 	bl	800a908 <HAL_GPIO_ReadPin>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d10d      	bne.n	800378a <menu+0x1f46>
 800376e:	4b65      	ldr	r3, [pc, #404]	@ (8003904 <menu+0x20c0>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 800377c:	4b5e      	ldr	r3, [pc, #376]	@ (80038f8 <menu+0x20b4>)
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	4b61      	ldr	r3, [pc, #388]	@ (8003908 <menu+0x20c4>)
 8003782:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003784:	4b61      	ldr	r3, [pc, #388]	@ (800390c <menu+0x20c8>)
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800378a:	4b61      	ldr	r3, [pc, #388]	@ (8003910 <menu+0x20cc>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b19      	cmp	r3, #25
 8003790:	d172      	bne.n	8003878 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8003792:	4b56      	ldr	r3, [pc, #344]	@ (80038ec <menu+0x20a8>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d105      	bne.n	80037a6 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800379a:	4a5e      	ldr	r2, [pc, #376]	@ (8003914 <menu+0x20d0>)
 800379c:	2101      	movs	r1, #1
 800379e:	2001      	movs	r0, #1
 80037a0:	f005 fd5e 	bl	8009260 <lcd_print>
 80037a4:	e008      	b.n	80037b8 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80037a6:	4b51      	ldr	r3, [pc, #324]	@ (80038ec <menu+0x20a8>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d104      	bne.n	80037b8 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80037ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <menu+0x20d4>)
 80037b0:	2101      	movs	r1, #1
 80037b2:	2001      	movs	r0, #1
 80037b4:	f005 fd54 	bl	8009260 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80037b8:	4a4e      	ldr	r2, [pc, #312]	@ (80038f4 <menu+0x20b0>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	2002      	movs	r0, #2
 80037be:	f005 fd4f 	bl	8009260 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80037c2:	4b56      	ldr	r3, [pc, #344]	@ (800391c <menu+0x20d8>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	220a      	movs	r2, #10
 80037c8:	494c      	ldr	r1, [pc, #304]	@ (80038fc <menu+0x20b8>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00a fc14 	bl	800dff8 <itoa>
		lcd_print(2,16,snum);
 80037d0:	4a4a      	ldr	r2, [pc, #296]	@ (80038fc <menu+0x20b8>)
 80037d2:	2110      	movs	r1, #16
 80037d4:	2002      	movs	r0, #2
 80037d6:	f005 fd43 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2102      	movs	r1, #2
 80037dc:	4848      	ldr	r0, [pc, #288]	@ (8003900 <menu+0x20bc>)
 80037de:	f007 f893 	bl	800a908 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <menu+0x1fd0>
 80037e8:	4b46      	ldr	r3, [pc, #280]	@ (8003904 <menu+0x20c0>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80037f6:	4b49      	ldr	r3, [pc, #292]	@ (800391c <menu+0x20d8>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <menu+0x20d8>)
 8003800:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003802:	4b46      	ldr	r3, [pc, #280]	@ (800391c <menu+0x20d8>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d902      	bls.n	8003810 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800380a:	4b44      	ldr	r3, [pc, #272]	@ (800391c <menu+0x20d8>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003810:	f000 fd5e 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003814:	2104      	movs	r1, #4
 8003816:	483a      	ldr	r0, [pc, #232]	@ (8003900 <menu+0x20bc>)
 8003818:	f007 f876 	bl	800a908 <HAL_GPIO_ReadPin>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <menu+0x200a>
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <menu+0x20c0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003830:	4b3a      	ldr	r3, [pc, #232]	@ (800391c <menu+0x20d8>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b38      	ldr	r3, [pc, #224]	@ (800391c <menu+0x20d8>)
 800383a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800383c:	4b37      	ldr	r3, [pc, #220]	@ (800391c <menu+0x20d8>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d902      	bls.n	800384a <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003844:	4b35      	ldr	r3, [pc, #212]	@ (800391c <menu+0x20d8>)
 8003846:	2205      	movs	r2, #5
 8003848:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800384a:	f000 fd41 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800384e:	2108      	movs	r1, #8
 8003850:	482b      	ldr	r0, [pc, #172]	@ (8003900 <menu+0x20bc>)
 8003852:	f007 f859 	bl	800a908 <HAL_GPIO_ReadPin>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10d      	bne.n	8003878 <menu+0x2034>
 800385c:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <menu+0x20c0>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800386a:	4b2c      	ldr	r3, [pc, #176]	@ (800391c <menu+0x20d8>)
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	4b26      	ldr	r3, [pc, #152]	@ (8003908 <menu+0x20c4>)
 8003870:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003872:	4b26      	ldr	r3, [pc, #152]	@ (800390c <menu+0x20c8>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003878:	4b25      	ldr	r3, [pc, #148]	@ (8003910 <menu+0x20cc>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b1a      	cmp	r3, #26
 800387e:	f040 80b7 	bne.w	80039f0 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003882:	4a27      	ldr	r2, [pc, #156]	@ (8003920 <menu+0x20dc>)
 8003884:	2101      	movs	r1, #1
 8003886:	2001      	movs	r0, #1
 8003888:	f005 fcea 	bl	8009260 <lcd_print>

		if(makineCalismaTmr > 99) {
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <menu+0x20e0>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b63      	cmp	r3, #99	@ 0x63
 8003892:	d911      	bls.n	80038b8 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003894:	4a17      	ldr	r2, [pc, #92]	@ (80038f4 <menu+0x20b0>)
 8003896:	2101      	movs	r1, #1
 8003898:	2002      	movs	r0, #2
 800389a:	f005 fce1 	bl	8009260 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800389e:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <menu+0x20e0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	220a      	movs	r2, #10
 80038a4:	4915      	ldr	r1, [pc, #84]	@ (80038fc <menu+0x20b8>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00a fba6 	bl	800dff8 <itoa>
			lcd_print(2,14,snum);
 80038ac:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <menu+0x20b8>)
 80038ae:	210e      	movs	r1, #14
 80038b0:	2002      	movs	r0, #2
 80038b2:	f005 fcd5 	bl	8009260 <lcd_print>
 80038b6:	e04c      	b.n	8003952 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <menu+0x20e0>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d933      	bls.n	8003928 <menu+0x20e4>
 80038c0:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <menu+0x20e0>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b63      	cmp	r3, #99	@ 0x63
 80038c6:	d82f      	bhi.n	8003928 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <menu+0x20b0>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	2002      	movs	r0, #2
 80038ce:	f005 fcc7 	bl	8009260 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <menu+0x20e0>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	220a      	movs	r2, #10
 80038d8:	4908      	ldr	r1, [pc, #32]	@ (80038fc <menu+0x20b8>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f00a fb8c 	bl	800dff8 <itoa>
			lcd_print(2, 15, snum);
 80038e0:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <menu+0x20b8>)
 80038e2:	210f      	movs	r1, #15
 80038e4:	2002      	movs	r0, #2
 80038e6:	f005 fcbb 	bl	8009260 <lcd_print>
 80038ea:	e032      	b.n	8003952 <menu+0x210e>
 80038ec:	200016cf 	.word	0x200016cf
 80038f0:	20001cc0 	.word	0x20001cc0
 80038f4:	20001acc 	.word	0x20001acc
 80038f8:	200016d6 	.word	0x200016d6
 80038fc:	20001260 	.word	0x20001260
 8003900:	40010800 	.word	0x40010800
 8003904:	200016ef 	.word	0x200016ef
 8003908:	200011f0 	.word	0x200011f0
 800390c:	200016ec 	.word	0x200016ec
 8003910:	200016c0 	.word	0x200016c0
 8003914:	20001cd4 	.word	0x20001cd4
 8003918:	20001ce8 	.word	0x20001ce8
 800391c:	200016d7 	.word	0x200016d7
 8003920:	20001cfc 	.word	0x20001cfc
 8003924:	200016d8 	.word	0x200016d8
		} else if(makineCalismaTmr <=  9) {
 8003928:	4b72      	ldr	r3, [pc, #456]	@ (8003af4 <menu+0x22b0>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b09      	cmp	r3, #9
 800392e:	d810      	bhi.n	8003952 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003930:	4a71      	ldr	r2, [pc, #452]	@ (8003af8 <menu+0x22b4>)
 8003932:	2101      	movs	r1, #1
 8003934:	2002      	movs	r0, #2
 8003936:	f005 fc93 	bl	8009260 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800393a:	4b6e      	ldr	r3, [pc, #440]	@ (8003af4 <menu+0x22b0>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	220a      	movs	r2, #10
 8003940:	496e      	ldr	r1, [pc, #440]	@ (8003afc <menu+0x22b8>)
 8003942:	4618      	mov	r0, r3
 8003944:	f00a fb58 	bl	800dff8 <itoa>
			lcd_print(2, 16, snum);
 8003948:	4a6c      	ldr	r2, [pc, #432]	@ (8003afc <menu+0x22b8>)
 800394a:	2110      	movs	r1, #16
 800394c:	2002      	movs	r0, #2
 800394e:	f005 fc87 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003952:	2102      	movs	r1, #2
 8003954:	486a      	ldr	r0, [pc, #424]	@ (8003b00 <menu+0x22bc>)
 8003956:	f006 ffd7 	bl	800a908 <HAL_GPIO_ReadPin>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d115      	bne.n	800398c <menu+0x2148>
 8003960:	4b68      	ldr	r3, [pc, #416]	@ (8003b04 <menu+0x22c0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f083 0301 	eor.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800396e:	4b61      	ldr	r3, [pc, #388]	@ (8003af4 <menu+0x22b0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b5f      	ldr	r3, [pc, #380]	@ (8003af4 <menu+0x22b0>)
 8003978:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800397a:	4b5e      	ldr	r3, [pc, #376]	@ (8003af4 <menu+0x22b0>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003980:	d902      	bls.n	8003988 <menu+0x2144>
				makineCalismaTmr = 0;
 8003982:	4b5c      	ldr	r3, [pc, #368]	@ (8003af4 <menu+0x22b0>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003988:	f000 fca2 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800398c:	2104      	movs	r1, #4
 800398e:	485c      	ldr	r0, [pc, #368]	@ (8003b00 <menu+0x22bc>)
 8003990:	f006 ffba 	bl	800a908 <HAL_GPIO_ReadPin>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d115      	bne.n	80039c6 <menu+0x2182>
 800399a:	4b5a      	ldr	r3, [pc, #360]	@ (8003b04 <menu+0x22c0>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80039a8:	4b52      	ldr	r3, [pc, #328]	@ (8003af4 <menu+0x22b0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <menu+0x22b0>)
 80039b2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80039b4:	4b4f      	ldr	r3, [pc, #316]	@ (8003af4 <menu+0x22b0>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2bb5      	cmp	r3, #181	@ 0xb5
 80039ba:	d902      	bls.n	80039c2 <menu+0x217e>
		   		makineCalismaTmr = 180;
 80039bc:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <menu+0x22b0>)
 80039be:	22b4      	movs	r2, #180	@ 0xb4
 80039c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c2:	f000 fc85 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c6:	2108      	movs	r1, #8
 80039c8:	484d      	ldr	r0, [pc, #308]	@ (8003b00 <menu+0x22bc>)
 80039ca:	f006 ff9d 	bl	800a908 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10d      	bne.n	80039f0 <menu+0x21ac>
 80039d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003b04 <menu+0x22c0>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <menu+0x22b0>)
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	4b48      	ldr	r3, [pc, #288]	@ (8003b08 <menu+0x22c4>)
 80039e8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80039ea:	4b48      	ldr	r3, [pc, #288]	@ (8003b0c <menu+0x22c8>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80039f0:	4b47      	ldr	r3, [pc, #284]	@ (8003b10 <menu+0x22cc>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b1b      	cmp	r3, #27
 80039f6:	d166      	bne.n	8003ac6 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80039f8:	4a46      	ldr	r2, [pc, #280]	@ (8003b14 <menu+0x22d0>)
 80039fa:	2101      	movs	r1, #1
 80039fc:	2001      	movs	r0, #1
 80039fe:	f005 fc2f 	bl	8009260 <lcd_print>

		if(buzzer == 0) {
 8003a02:	4b45      	ldr	r3, [pc, #276]	@ (8003b18 <menu+0x22d4>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003a0a:	4a44      	ldr	r2, [pc, #272]	@ (8003b1c <menu+0x22d8>)
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	2002      	movs	r0, #2
 8003a10:	f005 fc26 	bl	8009260 <lcd_print>
 8003a14:	e008      	b.n	8003a28 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003a16:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <menu+0x22d4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d104      	bne.n	8003a28 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003a1e:	4a40      	ldr	r2, [pc, #256]	@ (8003b20 <menu+0x22dc>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	2002      	movs	r0, #2
 8003a24:	f005 fc1c 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a28:	2102      	movs	r1, #2
 8003a2a:	4835      	ldr	r0, [pc, #212]	@ (8003b00 <menu+0x22bc>)
 8003a2c:	f006 ff6c 	bl	800a908 <HAL_GPIO_ReadPin>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d115      	bne.n	8003a62 <menu+0x221e>
 8003a36:	4b33      	ldr	r3, [pc, #204]	@ (8003b04 <menu+0x22c0>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <menu+0x221e>
			buzzer = buzzer + 1;
 8003a44:	4b34      	ldr	r3, [pc, #208]	@ (8003b18 <menu+0x22d4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b32      	ldr	r3, [pc, #200]	@ (8003b18 <menu+0x22d4>)
 8003a4e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003a50:	4b31      	ldr	r3, [pc, #196]	@ (8003b18 <menu+0x22d4>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d902      	bls.n	8003a5e <menu+0x221a>
				buzzer = 0;
 8003a58:	4b2f      	ldr	r3, [pc, #188]	@ (8003b18 <menu+0x22d4>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a5e:	f000 fc37 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a62:	2104      	movs	r1, #4
 8003a64:	4826      	ldr	r0, [pc, #152]	@ (8003b00 <menu+0x22bc>)
 8003a66:	f006 ff4f 	bl	800a908 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d115      	bne.n	8003a9c <menu+0x2258>
 8003a70:	4b24      	ldr	r3, [pc, #144]	@ (8003b04 <menu+0x22c0>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <menu+0x2258>
			buzzer = buzzer - 1;
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <menu+0x22d4>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <menu+0x22d4>)
 8003a88:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003a8a:	4b23      	ldr	r3, [pc, #140]	@ (8003b18 <menu+0x22d4>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <menu+0x2254>
		   		buzzer = 1;
 8003a92:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <menu+0x22d4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a98:	f000 fc1a 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	4818      	ldr	r0, [pc, #96]	@ (8003b00 <menu+0x22bc>)
 8003aa0:	f006 ff32 	bl	800a908 <HAL_GPIO_ReadPin>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d10d      	bne.n	8003ac6 <menu+0x2282>
 8003aaa:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <menu+0x22c0>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <menu+0x2282>
			eepromData[25] = buzzer;
 8003ab8:	4b17      	ldr	r3, [pc, #92]	@ (8003b18 <menu+0x22d4>)
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <menu+0x22c4>)
 8003abe:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <menu+0x22c8>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <menu+0x22cc>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b1c      	cmp	r3, #28
 8003acc:	f040 8088 	bne.w	8003be0 <menu+0x239c>
		calismaSayModu = 0;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <menu+0x22e0>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8003ad6:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <menu+0x22e4>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	2001      	movs	r0, #1
 8003adc:	f005 fbc0 	bl	8009260 <lcd_print>

		if(demoMode == 0) {
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <menu+0x22e8>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d123      	bne.n	8003b30 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <menu+0x22d8>)
 8003aea:	2101      	movs	r1, #1
 8003aec:	2002      	movs	r0, #2
 8003aee:	f005 fbb7 	bl	8009260 <lcd_print>
 8003af2:	e026      	b.n	8003b42 <menu+0x22fe>
 8003af4:	200016d8 	.word	0x200016d8
 8003af8:	20001acc 	.word	0x20001acc
 8003afc:	20001260 	.word	0x20001260
 8003b00:	40010800 	.word	0x40010800
 8003b04:	200016ef 	.word	0x200016ef
 8003b08:	200011f0 	.word	0x200011f0
 8003b0c:	200016ec 	.word	0x200016ec
 8003b10:	200016c0 	.word	0x200016c0
 8003b14:	20000128 	.word	0x20000128
 8003b18:	200016dc 	.word	0x200016dc
 8003b1c:	200019a0 	.word	0x200019a0
 8003b20:	200019b4 	.word	0x200019b4
 8003b24:	200016df 	.word	0x200016df
 8003b28:	2000013c 	.word	0x2000013c
 8003b2c:	200016de 	.word	0x200016de
		} else if(demoMode == 1) {
 8003b30:	4b80      	ldr	r3, [pc, #512]	@ (8003d34 <menu+0x24f0>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d104      	bne.n	8003b42 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003b38:	4a7f      	ldr	r2, [pc, #508]	@ (8003d38 <menu+0x24f4>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	2002      	movs	r0, #2
 8003b3e:	f005 fb8f 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b42:	2102      	movs	r1, #2
 8003b44:	487d      	ldr	r0, [pc, #500]	@ (8003d3c <menu+0x24f8>)
 8003b46:	f006 fedf 	bl	800a908 <HAL_GPIO_ReadPin>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d115      	bne.n	8003b7c <menu+0x2338>
 8003b50:	4b7b      	ldr	r3, [pc, #492]	@ (8003d40 <menu+0x24fc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	f083 0301 	eor.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <menu+0x2338>
			demoMode = demoMode + 1;
 8003b5e:	4b75      	ldr	r3, [pc, #468]	@ (8003d34 <menu+0x24f0>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b73      	ldr	r3, [pc, #460]	@ (8003d34 <menu+0x24f0>)
 8003b68:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003b6a:	4b72      	ldr	r3, [pc, #456]	@ (8003d34 <menu+0x24f0>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d902      	bls.n	8003b78 <menu+0x2334>
				demoMode = 0;
 8003b72:	4b70      	ldr	r3, [pc, #448]	@ (8003d34 <menu+0x24f0>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b78:	f000 fbaa 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	486f      	ldr	r0, [pc, #444]	@ (8003d3c <menu+0x24f8>)
 8003b80:	f006 fec2 	bl	800a908 <HAL_GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d115      	bne.n	8003bb6 <menu+0x2372>
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d40 <menu+0x24fc>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00e      	beq.n	8003bb6 <menu+0x2372>
			demoMode = demoMode - 1;
 8003b98:	4b66      	ldr	r3, [pc, #408]	@ (8003d34 <menu+0x24f0>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b64      	ldr	r3, [pc, #400]	@ (8003d34 <menu+0x24f0>)
 8003ba2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003ba4:	4b63      	ldr	r3, [pc, #396]	@ (8003d34 <menu+0x24f0>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <menu+0x236e>
		   		demoMode = 1;
 8003bac:	4b61      	ldr	r3, [pc, #388]	@ (8003d34 <menu+0x24f0>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bb2:	f000 fb8d 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	4860      	ldr	r0, [pc, #384]	@ (8003d3c <menu+0x24f8>)
 8003bba:	f006 fea5 	bl	800a908 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10d      	bne.n	8003be0 <menu+0x239c>
 8003bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d40 <menu+0x24fc>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	f083 0301 	eor.w	r3, r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <menu+0x239c>
			eepromData[26] = demoMode;
 8003bd2:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <menu+0x24f0>)
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d44 <menu+0x2500>)
 8003bd8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003bda:	4b5b      	ldr	r3, [pc, #364]	@ (8003d48 <menu+0x2504>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003be0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <menu+0x2508>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b1d      	cmp	r3, #29
 8003be6:	f040 80d5 	bne.w	8003d94 <menu+0x2550>
		finalCount=0;
 8003bea:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <menu+0x250c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003bf0:	4b58      	ldr	r3, [pc, #352]	@ (8003d54 <menu+0x2510>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d135      	bne.n	8003c64 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003bf8:	4a57      	ldr	r2, [pc, #348]	@ (8003d58 <menu+0x2514>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f005 fb2f 	bl	8009260 <lcd_print>

			if(demoMode == 1) {
 8003c02:	4b4c      	ldr	r3, [pc, #304]	@ (8003d34 <menu+0x24f0>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d113      	bne.n	8003c32 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003c0a:	4b54      	ldr	r3, [pc, #336]	@ (8003d5c <menu+0x2518>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4613      	mov	r3, r2
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	1a9a      	subs	r2, r3, r2
 8003c16:	4b4e      	ldr	r3, [pc, #312]	@ (8003d50 <menu+0x250c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003d50 <menu+0x250c>)
 8003c1e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003c20:	4b4f      	ldr	r3, [pc, #316]	@ (8003d60 <menu+0x251c>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <menu+0x250c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a48      	ldr	r2, [pc, #288]	@ (8003d50 <menu+0x250c>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e012      	b.n	8003c58 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003c32:	4b4c      	ldr	r3, [pc, #304]	@ (8003d64 <menu+0x2520>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4613      	mov	r3, r2
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	1a9a      	subs	r2, r3, r2
 8003c3e:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <menu+0x250c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	4a42      	ldr	r2, [pc, #264]	@ (8003d50 <menu+0x250c>)
 8003c46:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003c48:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <menu+0x2524>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <menu+0x250c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	4a3e      	ldr	r2, [pc, #248]	@ (8003d50 <menu+0x250c>)
 8003c56:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003c58:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <menu+0x250c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa89 	bl	8004174 <displayCycleOnLCD>
 8003c62:	e00d      	b.n	8003c80 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003c64:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <menu+0x2510>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d109      	bne.n	8003c80 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d58 <menu+0x2514>)
 8003c6e:	2101      	movs	r1, #1
 8003c70:	2001      	movs	r0, #1
 8003c72:	f005 faf5 	bl	8009260 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003c76:	4a3d      	ldr	r2, [pc, #244]	@ (8003d6c <menu+0x2528>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f005 faf0 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c80:	2102      	movs	r1, #2
 8003c82:	482e      	ldr	r0, [pc, #184]	@ (8003d3c <menu+0x24f8>)
 8003c84:	f006 fe40 	bl	800a908 <HAL_GPIO_ReadPin>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d115      	bne.n	8003cba <menu+0x2476>
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d40 <menu+0x24fc>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <menu+0x2510>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d54 <menu+0x2510>)
 8003ca6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d54 <menu+0x2510>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d902      	bls.n	8003cb6 <menu+0x2472>
				calismaSayModu = 0;
 8003cb0:	4b28      	ldr	r3, [pc, #160]	@ (8003d54 <menu+0x2510>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cb6:	f000 fb0b 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cba:	2104      	movs	r1, #4
 8003cbc:	481f      	ldr	r0, [pc, #124]	@ (8003d3c <menu+0x24f8>)
 8003cbe:	f006 fe23 	bl	800a908 <HAL_GPIO_ReadPin>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d115      	bne.n	8003cf4 <menu+0x24b0>
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <menu+0x24fc>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f083 0301 	eor.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00e      	beq.n	8003cf4 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <menu+0x2510>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <menu+0x2510>)
 8003ce0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d54 <menu+0x2510>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <menu+0x2510>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cf0:	f000 faee 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cf4:	2108      	movs	r1, #8
 8003cf6:	4811      	ldr	r0, [pc, #68]	@ (8003d3c <menu+0x24f8>)
 8003cf8:	f006 fe06 	bl	800a908 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d148      	bne.n	8003d94 <menu+0x2550>
 8003d02:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <menu+0x24fc>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f083 0301 	eor.w	r3, r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d041      	beq.n	8003d94 <menu+0x2550>
			if(demoMode == 1) {
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <menu+0x24f0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d12b      	bne.n	8003d70 <menu+0x252c>
				eepromData[28] = 0;
 8003d18:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <menu+0x2500>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003d1e:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <menu+0x2500>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003d24:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <menu+0x251c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <menu+0x2518>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e02a      	b.n	8003d88 <menu+0x2544>
 8003d32:	bf00      	nop
 8003d34:	200016de 	.word	0x200016de
 8003d38:	200019b4 	.word	0x200019b4
 8003d3c:	40010800 	.word	0x40010800
 8003d40:	200016ef 	.word	0x200016ef
 8003d44:	200011f0 	.word	0x200011f0
 8003d48:	200016ec 	.word	0x200016ec
 8003d4c:	200016c0 	.word	0x200016c0
 8003d50:	200016bc 	.word	0x200016bc
 8003d54:	200016df 	.word	0x200016df
 8003d58:	20001d10 	.word	0x20001d10
 8003d5c:	200016bb 	.word	0x200016bb
 8003d60:	200016b9 	.word	0x200016b9
 8003d64:	200016ba 	.word	0x200016ba
 8003d68:	200016b8 	.word	0x200016b8
 8003d6c:	20001d24 	.word	0x20001d24
			} else {
				eepromData[27] = 0;
 8003d70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <menu+0x265c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003d76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <menu+0x265c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003d7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <menu+0x2660>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003d82:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <menu+0x2664>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003d88:	4b48      	ldr	r3, [pc, #288]	@ (8003eac <menu+0x2668>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003d8e:	4b48      	ldr	r3, [pc, #288]	@ (8003eb0 <menu+0x266c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003d94:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <menu+0x2670>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b1e      	cmp	r3, #30
 8003d9a:	d16a      	bne.n	8003e72 <menu+0x262e>
		calismaSayModu = 0;
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <menu+0x2668>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003da2:	4a45      	ldr	r2, [pc, #276]	@ (8003eb8 <menu+0x2674>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	2001      	movs	r0, #1
 8003da8:	f005 fa5a 	bl	8009260 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003dac:	4a43      	ldr	r2, [pc, #268]	@ (8003ebc <menu+0x2678>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	2002      	movs	r0, #2
 8003db2:	f005 fa55 	bl	8009260 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db6:	2102      	movs	r1, #2
 8003db8:	4841      	ldr	r0, [pc, #260]	@ (8003ec0 <menu+0x267c>)
 8003dba:	f006 fda5 	bl	800a908 <HAL_GPIO_ReadPin>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d11c      	bne.n	8003dfe <menu+0x25ba>
 8003dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec4 <menu+0x2680>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f083 0301 	eor.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d015      	beq.n	8003dfe <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec8 <menu+0x2684>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <menu+0x2684>)
 8003ddc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <menu+0x2684>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d902      	bls.n	8003dec <menu+0x25a8>
				dilSecim = 0;
 8003de6:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <menu+0x2684>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003dec:	f003 ff70 	bl	8007cd0 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003df0:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <menu+0x2684>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fae5 	bl	80063c4 <loadMenuTexts>

			bekle();
 8003dfa:	f000 fa69 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dfe:	2104      	movs	r1, #4
 8003e00:	482f      	ldr	r0, [pc, #188]	@ (8003ec0 <menu+0x267c>)
 8003e02:	f006 fd81 	bl	800a908 <HAL_GPIO_ReadPin>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d11c      	bne.n	8003e46 <menu+0x2602>
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <menu+0x2680>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f083 0301 	eor.w	r3, r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec8 <menu+0x2684>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <menu+0x2684>)
 8003e24:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003e26:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <menu+0x2684>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <menu+0x25f0>
		   		dilSecim = 1;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <menu+0x2684>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003e34:	f003 ff4c 	bl	8007cd0 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003e38:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <menu+0x2684>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f002 fac1 	bl	80063c4 <loadMenuTexts>

			bekle();
 8003e42:	f000 fa45 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e46:	2108      	movs	r1, #8
 8003e48:	481d      	ldr	r0, [pc, #116]	@ (8003ec0 <menu+0x267c>)
 8003e4a:	f006 fd5d 	bl	800a908 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10e      	bne.n	8003e72 <menu+0x262e>
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <menu+0x2680>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f083 0301 	eor.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003e62:	4b19      	ldr	r3, [pc, #100]	@ (8003ec8 <menu+0x2684>)
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <menu+0x265c>)
 8003e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <menu+0x266c>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <menu+0x2670>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b1f      	cmp	r3, #31
 8003e78:	f040 8087 	bne.w	8003f8a <menu+0x2746>
		calismaSayModu = 0;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <menu+0x2668>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003e82:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <menu+0x2688>)
 8003e84:	2101      	movs	r1, #1
 8003e86:	2001      	movs	r0, #1
 8003e88:	f005 f9ea 	bl	8009260 <lcd_print>

		if(iotMode == 0) {
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <menu+0x268c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d121      	bne.n	8003ed8 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003e94:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed4 <menu+0x2690>)
 8003e96:	2101      	movs	r1, #1
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f005 f9e1 	bl	8009260 <lcd_print>
 8003e9e:	e024      	b.n	8003eea <menu+0x26a6>
 8003ea0:	200011f0 	.word	0x200011f0
 8003ea4:	200016b8 	.word	0x200016b8
 8003ea8:	200016ba 	.word	0x200016ba
 8003eac:	200016df 	.word	0x200016df
 8003eb0:	200016ec 	.word	0x200016ec
 8003eb4:	200016c0 	.word	0x200016c0
 8003eb8:	20001d38 	.word	0x20001d38
 8003ebc:	20001d4c 	.word	0x20001d4c
 8003ec0:	40010800 	.word	0x40010800
 8003ec4:	200016ef 	.word	0x200016ef
 8003ec8:	200016e0 	.word	0x200016e0
 8003ecc:	20000150 	.word	0x20000150
 8003ed0:	200016eb 	.word	0x200016eb
 8003ed4:	200019a0 	.word	0x200019a0
		} else if(iotMode == 1) {
 8003ed8:	4b99      	ldr	r3, [pc, #612]	@ (8004140 <menu+0x28fc>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003ee0:	4a98      	ldr	r2, [pc, #608]	@ (8004144 <menu+0x2900>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f005 f9bb 	bl	8009260 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eea:	2102      	movs	r1, #2
 8003eec:	4896      	ldr	r0, [pc, #600]	@ (8004148 <menu+0x2904>)
 8003eee:	f006 fd0b 	bl	800a908 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d115      	bne.n	8003f24 <menu+0x26e0>
 8003ef8:	4b94      	ldr	r3, [pc, #592]	@ (800414c <menu+0x2908>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003f06:	4b8e      	ldr	r3, [pc, #568]	@ (8004140 <menu+0x28fc>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8004140 <menu+0x28fc>)
 8003f10:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003f12:	4b8b      	ldr	r3, [pc, #556]	@ (8004140 <menu+0x28fc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d902      	bls.n	8003f20 <menu+0x26dc>
				iotMode = 0;
 8003f1a:	4b89      	ldr	r3, [pc, #548]	@ (8004140 <menu+0x28fc>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003f20:	f000 f9d6 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f24:	2104      	movs	r1, #4
 8003f26:	4888      	ldr	r0, [pc, #544]	@ (8004148 <menu+0x2904>)
 8003f28:	f006 fcee 	bl	800a908 <HAL_GPIO_ReadPin>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d115      	bne.n	8003f5e <menu+0x271a>
 8003f32:	4b86      	ldr	r3, [pc, #536]	@ (800414c <menu+0x2908>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <menu+0x271a>
			iotMode = iotMode - 1;
 8003f40:	4b7f      	ldr	r3, [pc, #508]	@ (8004140 <menu+0x28fc>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <menu+0x28fc>)
 8003f4a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003f4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004140 <menu+0x28fc>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <menu+0x2716>
		   		iotMode = 1;
 8003f54:	4b7a      	ldr	r3, [pc, #488]	@ (8004140 <menu+0x28fc>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003f5a:	f000 f9b9 	bl	80042d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f5e:	2108      	movs	r1, #8
 8003f60:	4879      	ldr	r0, [pc, #484]	@ (8004148 <menu+0x2904>)
 8003f62:	f006 fcd1 	bl	800a908 <HAL_GPIO_ReadPin>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10e      	bne.n	8003f8a <menu+0x2746>
 8003f6c:	4b77      	ldr	r3, [pc, #476]	@ (800414c <menu+0x2908>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f083 0301 	eor.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <menu+0x2746>
			eepromData[48] = iotMode;
 8003f7a:	4b71      	ldr	r3, [pc, #452]	@ (8004140 <menu+0x28fc>)
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	4b74      	ldr	r3, [pc, #464]	@ (8004150 <menu+0x290c>)
 8003f80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003f84:	4b73      	ldr	r3, [pc, #460]	@ (8004154 <menu+0x2910>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003f8a:	4b73      	ldr	r3, [pc, #460]	@ (8004158 <menu+0x2914>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d127      	bne.n	8003fe2 <menu+0x279e>
		calismaSayModu = 0;
 8003f92:	4b72      	ldr	r3, [pc, #456]	@ (800415c <menu+0x2918>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003f98:	4a71      	ldr	r2, [pc, #452]	@ (8004160 <menu+0x291c>)
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f005 f95f 	bl	8009260 <lcd_print>

		convertArrays(1);
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f7fc fc80 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003fa8:	2032      	movs	r0, #50	@ 0x32
 8003faa:	f005 fed1 	bl	8009d50 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fd fbec 	bl	800178c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4864      	ldr	r0, [pc, #400]	@ (8004148 <menu+0x2904>)
 8003fb8:	f006 fca6 	bl	800a908 <HAL_GPIO_ReadPin>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10f      	bne.n	8003fe2 <menu+0x279e>
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	4860      	ldr	r0, [pc, #384]	@ (8004148 <menu+0x2904>)
 8003fc6:	f006 fc9f 	bl	800a908 <HAL_GPIO_ReadPin>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d108      	bne.n	8003fe2 <menu+0x279e>
 8003fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800414c <menu+0x2908>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	f083 0301 	eor.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003fde:	f004 f8eb 	bl	80081b8 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <menu+0x2914>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b21      	cmp	r3, #33	@ 0x21
 8003fe8:	d12b      	bne.n	8004042 <menu+0x27fe>
		calismaSayModu = 0;
 8003fea:	4b5c      	ldr	r3, [pc, #368]	@ (800415c <menu+0x2918>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	f7fc fc59 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003ff6:	2032      	movs	r0, #50	@ 0x32
 8003ff8:	f005 feaa 	bl	8009d50 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f7fd fbc5 	bl	800178c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004002:	2102      	movs	r1, #2
 8004004:	4850      	ldr	r0, [pc, #320]	@ (8004148 <menu+0x2904>)
 8004006:	f006 fc7f 	bl	800a908 <HAL_GPIO_ReadPin>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d118      	bne.n	8004042 <menu+0x27fe>
 8004010:	2104      	movs	r1, #4
 8004012:	484d      	ldr	r0, [pc, #308]	@ (8004148 <menu+0x2904>)
 8004014:	f006 fc78 	bl	800a908 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d111      	bne.n	8004042 <menu+0x27fe>
 800401e:	4b4b      	ldr	r3, [pc, #300]	@ (800414c <menu+0x2908>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <menu+0x27fe>
			takeWifiSSID();
 800402c:	f004 fad0 	bl	80085d0 <takeWifiSSID>

			convertArrays(2);
 8004030:	2002      	movs	r0, #2
 8004032:	f7fc fc39 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8004036:	2032      	movs	r0, #50	@ 0x32
 8004038:	f005 fe8a 	bl	8009d50 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 800403c:	2002      	movs	r0, #2
 800403e:	f7fd fba5 	bl	800178c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8004042:	4b45      	ldr	r3, [pc, #276]	@ (8004158 <menu+0x2914>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b22      	cmp	r3, #34	@ 0x22
 8004048:	d12b      	bne.n	80040a2 <menu+0x285e>
		calismaSayModu = 0;
 800404a:	4b44      	ldr	r3, [pc, #272]	@ (800415c <menu+0x2918>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8004050:	2003      	movs	r0, #3
 8004052:	f7fc fc29 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8004056:	2032      	movs	r0, #50	@ 0x32
 8004058:	f005 fe7a 	bl	8009d50 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 800405c:	2003      	movs	r0, #3
 800405e:	f7fd fb95 	bl	800178c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004062:	2102      	movs	r1, #2
 8004064:	4838      	ldr	r0, [pc, #224]	@ (8004148 <menu+0x2904>)
 8004066:	f006 fc4f 	bl	800a908 <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d118      	bne.n	80040a2 <menu+0x285e>
 8004070:	2104      	movs	r1, #4
 8004072:	4835      	ldr	r0, [pc, #212]	@ (8004148 <menu+0x2904>)
 8004074:	f006 fc48 	bl	800a908 <HAL_GPIO_ReadPin>
 8004078:	4603      	mov	r3, r0
 800407a:	2b01      	cmp	r3, #1
 800407c:	d111      	bne.n	80040a2 <menu+0x285e>
 800407e:	4b33      	ldr	r3, [pc, #204]	@ (800414c <menu+0x2908>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <menu+0x285e>
			takeWifiPass();
 800408c:	f004 fc4c 	bl	8008928 <takeWifiPass>

			convertArrays(3);
 8004090:	2003      	movs	r0, #3
 8004092:	f7fc fc09 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8004096:	2032      	movs	r0, #50	@ 0x32
 8004098:	f005 fe5a 	bl	8009d50 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 800409c:	2003      	movs	r0, #3
 800409e:	f7fd fb75 	bl	800178c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80040a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <menu+0x2914>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b23      	cmp	r3, #35	@ 0x23
 80040a8:	d146      	bne.n	8004138 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 80040aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <menu+0x2920>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	2001      	movs	r0, #1
 80040b0:	f005 f8d6 	bl	8009260 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <menu+0x2924>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	2002      	movs	r0, #2
 80040ba:	f005 f8d1 	bl	8009260 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80040be:	2108      	movs	r1, #8
 80040c0:	4821      	ldr	r0, [pc, #132]	@ (8004148 <menu+0x2904>)
 80040c2:	f006 fc21 	bl	800a908 <HAL_GPIO_ReadPin>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d135      	bne.n	8004138 <menu+0x28f4>
			menuGiris = 0;
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <menu+0x2928>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 80040d2:	f005 fe33 	bl	8009d3c <HAL_GetTick>
 80040d6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80040d8:	e007      	b.n	80040ea <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80040da:	f005 fe2f 	bl	8009d3c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040e8:	d806      	bhi.n	80040f8 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80040ea:	4821      	ldr	r0, [pc, #132]	@ (8004170 <menu+0x292c>)
 80040ec:	f007 fa35 	bl	800b55a <HAL_I2C_GetError>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d0f1      	beq.n	80040da <menu+0x2896>
 80040f6:	e000      	b.n	80040fa <menu+0x28b6>
			        break;
 80040f8:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 80040fa:	f005 fe1f 	bl	8009d3c <HAL_GetTick>
 80040fe:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004100:	e007      	b.n	8004112 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8004102:	f005 fe1b 	bl	8009d3c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004110:	d806      	bhi.n	8004120 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004112:	4817      	ldr	r0, [pc, #92]	@ (8004170 <menu+0x292c>)
 8004114:	f007 fa14 	bl	800b540 <HAL_I2C_GetState>
 8004118:	4603      	mov	r3, r0
 800411a:	2b20      	cmp	r3, #32
 800411c:	d1f1      	bne.n	8004102 <menu+0x28be>
 800411e:	e000      	b.n	8004122 <menu+0x28de>
			        break;
 8004120:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8004122:	2000      	movs	r0, #0
 8004124:	f7fc fabe 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8004128:	f005 f8c6 	bl	80092b8 <lcd_clear>
			HAL_Delay(500);
 800412c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004130:	f005 fe0e 	bl	8009d50 <HAL_Delay>
			NVIC_SystemReset();
 8004134:	f7fd fb70 	bl	8001818 <__NVIC_SystemReset>
		}
	}
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200016eb 	.word	0x200016eb
 8004144:	200019b4 	.word	0x200019b4
 8004148:	40010800 	.word	0x40010800
 800414c:	200016ef 	.word	0x200016ef
 8004150:	200011f0 	.word	0x200011f0
 8004154:	200016ec 	.word	0x200016ec
 8004158:	200016c0 	.word	0x200016c0
 800415c:	200016df 	.word	0x200016df
 8004160:	20001ec8 	.word	0x20001ec8
 8004164:	20001d60 	.word	0x20001d60
 8004168:	20001d74 	.word	0x20001d74
 800416c:	200016dd 	.word	0x200016dd
 8004170:	20001f40 	.word	0x20001f40

08004174 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 800417c:	220a      	movs	r2, #10
 800417e:	491c      	ldr	r1, [pc, #112]	@ (80041f0 <displayCycleOnLCD+0x7c>)
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f009 ff39 	bl	800dff8 <itoa>

    int length = strlen(snum);
 8004186:	481a      	ldr	r0, [pc, #104]	@ (80041f0 <displayCycleOnLCD+0x7c>)
 8004188:	f7fc f84c 	bl	8000224 <strlen>
 800418c:	4603      	mov	r3, r0
 800418e:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f1c3 0310 	rsb	r3, r3, #16
 8004196:	0fda      	lsrs	r2, r3, #31
 8004198:	4413      	add	r3, r2
 800419a:	105b      	asrs	r3, r3, #1
 800419c:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	2210      	movs	r2, #16
 80041a4:	2120      	movs	r1, #32
 80041a6:	4618      	mov	r0, r3
 80041a8:	f00a f878 	bl	800e29c <memset>
    displayLine[16] = '\0'; // Null terminator
 80041ac:	2300      	movs	r3, #0
 80041ae:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	e00d      	b.n	80041d2 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	4413      	add	r3, r2
 80041bc:	490c      	ldr	r1, [pc, #48]	@ (80041f0 <displayCycleOnLCD+0x7c>)
 80041be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c0:	440a      	add	r2, r1
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	3328      	adds	r3, #40	@ 0x28
 80041c6:	443b      	add	r3, r7
 80041c8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	3301      	adds	r3, #1
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dbed      	blt.n	80041b6 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	461a      	mov	r2, r3
 80041e0:	2101      	movs	r1, #1
 80041e2:	2002      	movs	r0, #2
 80041e4:	f005 f83c 	bl	8009260 <lcd_print>
}
 80041e8:	bf00      	nop
 80041ea:	3728      	adds	r7, #40	@ 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20001260 	.word	0x20001260

080041f4 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d105      	bne.n	8004210 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <lcdUpdate+0xa4>)
 8004206:	2101      	movs	r1, #1
 8004208:	2002      	movs	r0, #2
 800420a:	f005 f829 	bl	8009260 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 800420e:	e03e      	b.n	800428e <lcdUpdate+0x9a>
	} else if(y==2) {
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d105      	bne.n	8004222 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004216:	4a20      	ldr	r2, [pc, #128]	@ (8004298 <lcdUpdate+0xa4>)
 8004218:	2102      	movs	r1, #2
 800421a:	2002      	movs	r0, #2
 800421c:	f005 f820 	bl	8009260 <lcd_print>
}
 8004220:	e035      	b.n	800428e <lcdUpdate+0x9a>
	} else if(y==3) {
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d105      	bne.n	8004234 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004228:	4a1b      	ldr	r2, [pc, #108]	@ (8004298 <lcdUpdate+0xa4>)
 800422a:	2103      	movs	r1, #3
 800422c:	2002      	movs	r0, #2
 800422e:	f005 f817 	bl	8009260 <lcd_print>
}
 8004232:	e02c      	b.n	800428e <lcdUpdate+0x9a>
	} else if(y==4) {
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d105      	bne.n	8004246 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <lcdUpdate+0xa4>)
 800423c:	2104      	movs	r1, #4
 800423e:	2002      	movs	r0, #2
 8004240:	f005 f80e 	bl	8009260 <lcd_print>
}
 8004244:	e023      	b.n	800428e <lcdUpdate+0x9a>
	} else if(y==5) {
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b05      	cmp	r3, #5
 800424a:	d105      	bne.n	8004258 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800424c:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <lcdUpdate+0xa4>)
 800424e:	2105      	movs	r1, #5
 8004250:	2002      	movs	r0, #2
 8004252:	f005 f805 	bl	8009260 <lcd_print>
}
 8004256:	e01a      	b.n	800428e <lcdUpdate+0x9a>
	} else if(y==6) {
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	2b06      	cmp	r3, #6
 800425c:	d105      	bne.n	800426a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800425e:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <lcdUpdate+0xa4>)
 8004260:	2106      	movs	r1, #6
 8004262:	2002      	movs	r0, #2
 8004264:	f004 fffc 	bl	8009260 <lcd_print>
}
 8004268:	e011      	b.n	800428e <lcdUpdate+0x9a>
	} else if (y==7) {
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d10e      	bne.n	800428e <lcdUpdate+0x9a>
		lcd_clear();
 8004270:	f005 f822 	bl	80092b8 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004274:	4a09      	ldr	r2, [pc, #36]	@ (800429c <lcdUpdate+0xa8>)
 8004276:	2101      	movs	r1, #1
 8004278:	2001      	movs	r0, #1
 800427a:	f004 fff1 	bl	8009260 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 800427e:	4a08      	ldr	r2, [pc, #32]	@ (80042a0 <lcdUpdate+0xac>)
 8004280:	2101      	movs	r1, #1
 8004282:	2002      	movs	r0, #2
 8004284:	f004 ffec 	bl	8009260 <lcd_print>
		HAL_Delay(10);
 8004288:	200a      	movs	r0, #10
 800428a:	f005 fd61 	bl	8009d50 <HAL_Delay>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	0800f798 	.word	0x0800f798
 800429c:	200000c4 	.word	0x200000c4
 80042a0:	200000d8 	.word	0x200000d8

080042a4 <checkLCDBacklight>:

void checkLCDBacklight() {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 80042a8:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <checkLCDBacklight+0x24>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <checkLCDBacklight+0x28>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80042b4:	d903      	bls.n	80042be <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80042b6:	2000      	movs	r0, #0
 80042b8:	f005 f81e 	bl	80092f8 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80042bc:	e002      	b.n	80042c4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f005 f81a 	bl	80092f8 <lcd_backlight>
}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20001698 	.word	0x20001698
 80042cc:	200016b4 	.word	0x200016b4

080042d0 <bekle>:

void bekle() {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	timer1=millis;
 80042d4:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <bekle+0x124>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a47      	ldr	r2, [pc, #284]	@ (80043f8 <bekle+0x128>)
 80042da:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042dc:	e002      	b.n	80042e4 <bekle+0x14>
    	butonKontrol = 1;
 80042de:	4b47      	ldr	r3, [pc, #284]	@ (80043fc <bekle+0x12c>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042e4:	2101      	movs	r1, #1
 80042e6:	4846      	ldr	r0, [pc, #280]	@ (8004400 <bekle+0x130>)
 80042e8:	f006 fb0e 	bl	800a908 <HAL_GPIO_ReadPin>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d109      	bne.n	8004306 <bekle+0x36>
 80042f2:	4b40      	ldr	r3, [pc, #256]	@ (80043f4 <bekle+0x124>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <bekle+0x128>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d0ef      	beq.n	80042de <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042fe:	e002      	b.n	8004306 <bekle+0x36>
    	butonKontrol = 1;
 8004300:	4b3e      	ldr	r3, [pc, #248]	@ (80043fc <bekle+0x12c>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004306:	2108      	movs	r1, #8
 8004308:	483e      	ldr	r0, [pc, #248]	@ (8004404 <bekle+0x134>)
 800430a:	f006 fafd 	bl	800a908 <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d109      	bne.n	8004328 <bekle+0x58>
 8004314:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <bekle+0x124>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <bekle+0x128>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d0ef      	beq.n	8004300 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004320:	e002      	b.n	8004328 <bekle+0x58>
    	butonKontrol = 1;
 8004322:	4b36      	ldr	r3, [pc, #216]	@ (80043fc <bekle+0x12c>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004328:	2102      	movs	r1, #2
 800432a:	4835      	ldr	r0, [pc, #212]	@ (8004400 <bekle+0x130>)
 800432c:	f006 faec 	bl	800a908 <HAL_GPIO_ReadPin>
 8004330:	4603      	mov	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d109      	bne.n	800434a <bekle+0x7a>
 8004336:	4b2f      	ldr	r3, [pc, #188]	@ (80043f4 <bekle+0x124>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b2f      	ldr	r3, [pc, #188]	@ (80043f8 <bekle+0x128>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d0ef      	beq.n	8004322 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004342:	e002      	b.n	800434a <bekle+0x7a>
    	butonKontrol = 1;
 8004344:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <bekle+0x12c>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800434a:	2104      	movs	r1, #4
 800434c:	482c      	ldr	r0, [pc, #176]	@ (8004400 <bekle+0x130>)
 800434e:	f006 fadb 	bl	800a908 <HAL_GPIO_ReadPin>
 8004352:	4603      	mov	r3, r0
 8004354:	2b01      	cmp	r3, #1
 8004356:	d109      	bne.n	800436c <bekle+0x9c>
 8004358:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <bekle+0x124>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <bekle+0x128>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d0ef      	beq.n	8004344 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004364:	e002      	b.n	800436c <bekle+0x9c>
    	butonKontrol = 1;
 8004366:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <bekle+0x12c>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800436c:	2108      	movs	r1, #8
 800436e:	4824      	ldr	r0, [pc, #144]	@ (8004400 <bekle+0x130>)
 8004370:	f006 faca 	bl	800a908 <HAL_GPIO_ReadPin>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d109      	bne.n	800438e <bekle+0xbe>
 800437a:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <bekle+0x124>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b1e      	ldr	r3, [pc, #120]	@ (80043f8 <bekle+0x128>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d0ef      	beq.n	8004366 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004386:	e002      	b.n	800438e <bekle+0xbe>
    	butonKontrol = 1;
 8004388:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <bekle+0x12c>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	481c      	ldr	r0, [pc, #112]	@ (8004404 <bekle+0x134>)
 8004392:	f006 fab9 	bl	800a908 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <bekle+0xe0>
 800439c:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <bekle+0x124>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <bekle+0x128>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0ef      	beq.n	8004388 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80043a8:	e002      	b.n	80043b0 <bekle+0xe0>
    	butonKontrol = 1;
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <bekle+0x12c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80043b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043b4:	4813      	ldr	r0, [pc, #76]	@ (8004404 <bekle+0x134>)
 80043b6:	f006 faa7 	bl	800a908 <HAL_GPIO_ReadPin>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <bekle+0x104>
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <bekle+0x124>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <bekle+0x128>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0ee      	beq.n	80043aa <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80043cc:	e002      	b.n	80043d4 <bekle+0x104>
    	butonKontrol = 1;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <bekle+0x12c>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80043d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043d8:	480a      	ldr	r0, [pc, #40]	@ (8004404 <bekle+0x134>)
 80043da:	f006 fa95 	bl	800a908 <HAL_GPIO_ReadPin>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <bekle+0x120>
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <bekle+0x124>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <bekle+0x128>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d0ee      	beq.n	80043ce <bekle+0xfe>
    }

}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20001698 	.word	0x20001698
 80043f8:	200016a0 	.word	0x200016a0
 80043fc:	200016ef 	.word	0x200016ef
 8004400:	40010800 	.word	0x40010800
 8004404:	40011000 	.word	0x40011000

08004408 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800440c:	2101      	movs	r1, #1
 800440e:	4815      	ldr	r0, [pc, #84]	@ (8004464 <buttonCheck+0x5c>)
 8004410:	f006 fa7a 	bl	800a908 <HAL_GPIO_ReadPin>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d01b      	beq.n	8004452 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800441a:	2108      	movs	r1, #8
 800441c:	4812      	ldr	r0, [pc, #72]	@ (8004468 <buttonCheck+0x60>)
 800441e:	f006 fa73 	bl	800a908 <HAL_GPIO_ReadPin>
 8004422:	4603      	mov	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d014      	beq.n	8004452 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004428:	2102      	movs	r1, #2
 800442a:	480e      	ldr	r0, [pc, #56]	@ (8004464 <buttonCheck+0x5c>)
 800442c:	f006 fa6c 	bl	800a908 <HAL_GPIO_ReadPin>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d00d      	beq.n	8004452 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004436:	2104      	movs	r1, #4
 8004438:	480a      	ldr	r0, [pc, #40]	@ (8004464 <buttonCheck+0x5c>)
 800443a:	f006 fa65 	bl	800a908 <HAL_GPIO_ReadPin>
 800443e:	4603      	mov	r3, r0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d006      	beq.n	8004452 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004444:	2108      	movs	r1, #8
 8004446:	4807      	ldr	r0, [pc, #28]	@ (8004464 <buttonCheck+0x5c>)
 8004448:	f006 fa5e 	bl	800a908 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d104      	bne.n	800445c <buttonCheck+0x54>
		backLightTimer = 0;
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <buttonCheck+0x64>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
		return 1;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <buttonCheck+0x56>
	}
	return 0;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40010800 	.word	0x40010800
 8004468:	40011000 	.word	0x40011000
 800446c:	200016b4 	.word	0x200016b4

08004470 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <checkBasincSalteri+0x54>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <checkBasincSalteri+0x12>
		basincVar=1;
 800447c:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <checkBasincSalteri+0x58>)
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <checkBasincSalteri+0x54>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d119      	bne.n	80044be <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800448a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800448e:	480f      	ldr	r0, [pc, #60]	@ (80044cc <checkBasincSalteri+0x5c>)
 8004490:	f006 fa3a 	bl	800a908 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <checkBasincSalteri+0x60>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <checkBasincSalteri+0x64>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d90a      	bls.n	80044be <checkBasincSalteri+0x4e>
				basincVar=1;
 80044a8:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <checkBasincSalteri+0x58>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80044ae:	e006      	b.n	80044be <checkBasincSalteri+0x4e>
			timer5=millis;
 80044b0:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <checkBasincSalteri+0x60>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <checkBasincSalteri+0x64>)
 80044b6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80044b8:	4b03      	ldr	r3, [pc, #12]	@ (80044c8 <checkBasincSalteri+0x58>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200016c7 	.word	0x200016c7
 80044c8:	200016c3 	.word	0x200016c3
 80044cc:	40011000 	.word	0x40011000
 80044d0:	20001698 	.word	0x20001698
 80044d4:	200016b0 	.word	0x200016b0

080044d8 <checkBasGonder>:

void checkBasGonder() {
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <checkBasGonder+0x74>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10b      	bne.n	80044fc <checkBasGonder+0x24>
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <checkBasGonder+0x78>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <checkBasGonder+0x24>
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <checkBasGonder+0x7c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80044f4:	4b18      	ldr	r3, [pc, #96]	@ (8004558 <checkBasGonder+0x80>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e009      	b.n	8004510 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <checkBasGonder+0x78>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f083 0301 	eor.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800450a:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <checkBasGonder+0x80>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004510:	4b0e      	ldr	r3, [pc, #56]	@ (800454c <checkBasGonder+0x74>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10b      	bne.n	8004530 <checkBasGonder+0x58>
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <checkBasGonder+0x84>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <checkBasGonder+0x58>
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <checkBasGonder+0x7c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004528:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <checkBasGonder+0x88>)
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800452e:	e009      	b.n	8004544 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <checkBasGonder+0x84>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <checkBasGonder+0x88>)
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	200016c1 	.word	0x200016c1
 8004550:	200016f5 	.word	0x200016f5
 8004554:	200016cf 	.word	0x200016cf
 8004558:	200016fc 	.word	0x200016fc
 800455c:	200016f8 	.word	0x200016f8
 8004560:	200016fd 	.word	0x200016fd

08004564 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004568:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <checkKapiSecimleri+0x98>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004570:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <checkKapiSecimleri+0x9c>)
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004576:	4b21      	ldr	r3, [pc, #132]	@ (80045fc <checkKapiSecimleri+0x98>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10e      	bne.n	800459c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800457e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004582:	4820      	ldr	r0, [pc, #128]	@ (8004604 <checkKapiSecimleri+0xa0>)
 8004584:	f006 f9c0 	bl	800a908 <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <checkKapiSecimleri+0x9c>)
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e002      	b.n	800459c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <checkKapiSecimleri+0x9c>)
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800459c:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <checkKapiSecimleri+0x98>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d10e      	bne.n	80045c2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80045a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045a8:	4816      	ldr	r0, [pc, #88]	@ (8004604 <checkKapiSecimleri+0xa0>)
 80045aa:	f006 f9ad 	bl	800a908 <HAL_GPIO_ReadPin>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <checkKapiSecimleri+0x9c>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e002      	b.n	80045c2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80045bc:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <checkKapiSecimleri+0x9c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <checkKapiSecimleri+0x98>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d116      	bne.n	80045f8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80045ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045ce:	480d      	ldr	r0, [pc, #52]	@ (8004604 <checkKapiSecimleri+0xa0>)
 80045d0:	f006 f99a 	bl	800a908 <HAL_GPIO_ReadPin>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <checkKapiSecimleri+0x8e>
 80045da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045de:	4809      	ldr	r0, [pc, #36]	@ (8004604 <checkKapiSecimleri+0xa0>)
 80045e0:	f006 f992 	bl	800a908 <HAL_GPIO_ReadPin>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80045ea:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <checkKapiSecimleri+0x9c>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80045f0:	e002      	b.n	80045f8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80045f2:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <checkKapiSecimleri+0x9c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200016c8 	.word	0x200016c8
 8004600:	20001712 	.word	0x20001712
 8004604:	40010800 	.word	0x40010800

08004608 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800460c:	4b66      	ldr	r3, [pc, #408]	@ (80047a8 <checkAktifCalisma+0x1a0>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f041 8343 	bne.w	8005c9c <checkAktifCalisma+0x1694>
 8004616:	4b65      	ldr	r3, [pc, #404]	@ (80047ac <checkAktifCalisma+0x1a4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f041 833e 	bne.w	8005c9c <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004620:	4b63      	ldr	r3, [pc, #396]	@ (80047b0 <checkAktifCalisma+0x1a8>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11a      	bne.n	800465e <checkAktifCalisma+0x56>
 8004628:	4b62      	ldr	r3, [pc, #392]	@ (80047b4 <checkAktifCalisma+0x1ac>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d116      	bne.n	800465e <checkAktifCalisma+0x56>
 8004630:	4b61      	ldr	r3, [pc, #388]	@ (80047b8 <checkAktifCalisma+0x1b0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <checkAktifCalisma+0x46>
 8004638:	4b60      	ldr	r3, [pc, #384]	@ (80047bc <checkAktifCalisma+0x1b4>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f083 0301 	eor.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <checkAktifCalisma+0x46>
 8004646:	4b5e      	ldr	r3, [pc, #376]	@ (80047c0 <checkAktifCalisma+0x1b8>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d007      	beq.n	800465e <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800464e:	4b5d      	ldr	r3, [pc, #372]	@ (80047c4 <checkAktifCalisma+0x1bc>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01c      	beq.n	8004690 <checkAktifCalisma+0x88>
 8004656:	4b5c      	ldr	r3, [pc, #368]	@ (80047c8 <checkAktifCalisma+0x1c0>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d118      	bne.n	8004690 <checkAktifCalisma+0x88>
 800465e:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <checkAktifCalisma+0x1c4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <checkAktifCalisma+0x66>
 8004666:	4b5a      	ldr	r3, [pc, #360]	@ (80047d0 <checkAktifCalisma+0x1c8>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <checkAktifCalisma+0x88>
 800466e:	4b59      	ldr	r3, [pc, #356]	@ (80047d4 <checkAktifCalisma+0x1cc>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800467c:	4856      	ldr	r0, [pc, #344]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 800467e:	f006 f95a 	bl	800a936 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004682:	4b56      	ldr	r3, [pc, #344]	@ (80047dc <checkAktifCalisma+0x1d4>)
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <checkAktifCalisma+0x1d8>)
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e008      	b.n	80046a2 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004690:	2200      	movs	r2, #0
 8004692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004696:	4850      	ldr	r0, [pc, #320]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 8004698:	f006 f94d 	bl	800a936 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800469c:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <checkAktifCalisma+0x1d4>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80046a2:	4b42      	ldr	r3, [pc, #264]	@ (80047ac <checkAktifCalisma+0x1a4>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d164      	bne.n	8004774 <checkAktifCalisma+0x16c>
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <checkAktifCalisma+0x1c8>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <checkAktifCalisma+0xb2>
 80046b2:	4b46      	ldr	r3, [pc, #280]	@ (80047cc <checkAktifCalisma+0x1c4>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d05c      	beq.n	8004774 <checkAktifCalisma+0x16c>
 80046ba:	4b46      	ldr	r3, [pc, #280]	@ (80047d4 <checkAktifCalisma+0x1cc>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d058      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80046c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046c6:	4844      	ldr	r0, [pc, #272]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 80046c8:	f006 f91e 	bl	800a908 <HAL_GPIO_ReadPin>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <checkAktifCalisma+0xd2>
 80046d2:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <checkAktifCalisma+0x1dc>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04c      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80046da:	2102      	movs	r1, #2
 80046dc:	4842      	ldr	r0, [pc, #264]	@ (80047e8 <checkAktifCalisma+0x1e0>)
 80046de:	f006 f913 	bl	800a908 <HAL_GPIO_ReadPin>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d145      	bne.n	8004774 <checkAktifCalisma+0x16c>
							&& (basincVar)
 80046e8:	4b40      	ldr	r3, [pc, #256]	@ (80047ec <checkAktifCalisma+0x1e4>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d041      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80046f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046f4:	4838      	ldr	r0, [pc, #224]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 80046f6:	f006 f907 	bl	800a908 <HAL_GPIO_ReadPin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10e      	bne.n	800471e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004700:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004704:	4834      	ldr	r0, [pc, #208]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 8004706:	f006 f8ff 	bl	800a908 <HAL_GPIO_ReadPin>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004710:	2140      	movs	r1, #64	@ 0x40
 8004712:	4835      	ldr	r0, [pc, #212]	@ (80047e8 <checkAktifCalisma+0x1e0>)
 8004714:	f006 f8f8 	bl	800a908 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d003      	beq.n	8004726 <checkAktifCalisma+0x11e>
 800471e:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <checkAktifCalisma+0x1a8>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d026      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <checkAktifCalisma+0x1b0>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	f083 0301 	eor.w	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01f      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004734:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <checkAktifCalisma+0x1ac>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f083 0301 	eor.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004742:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <checkAktifCalisma+0x1bc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004750:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <checkAktifCalisma+0x1e8>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f083 0301 	eor.w	r3, r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800475e:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <checkAktifCalisma+0x1ec>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <checkAktifCalisma+0x1a8>)
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e002      	b.n	800477a <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <checkAktifCalisma+0x1a8>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <checkAktifCalisma+0x1a8>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03c      	beq.n	80047fc <checkAktifCalisma+0x1f4>
 8004782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004786:	4818      	ldr	r0, [pc, #96]	@ (80047e8 <checkAktifCalisma+0x1e0>)
 8004788:	f006 f8be 	bl	800a908 <HAL_GPIO_ReadPin>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d134      	bne.n	80047fc <checkAktifCalisma+0x1f4>
 8004792:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <checkAktifCalisma+0x1f0>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d030      	beq.n	80047fc <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800479a:	2201      	movs	r2, #1
 800479c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047a0:	480d      	ldr	r0, [pc, #52]	@ (80047d8 <checkAktifCalisma+0x1d0>)
 80047a2:	f006 f8c8 	bl	800a936 <HAL_GPIO_WritePin>
 80047a6:	e02f      	b.n	8004808 <checkAktifCalisma+0x200>
 80047a8:	200016de 	.word	0x200016de
 80047ac:	200016dd 	.word	0x200016dd
 80047b0:	200016f5 	.word	0x200016f5
 80047b4:	200016f6 	.word	0x200016f6
 80047b8:	200016f8 	.word	0x200016f8
 80047bc:	200016f0 	.word	0x200016f0
 80047c0:	200016d3 	.word	0x200016d3
 80047c4:	200016f7 	.word	0x200016f7
 80047c8:	200016d2 	.word	0x200016d2
 80047cc:	20001711 	.word	0x20001711
 80047d0:	20001724 	.word	0x20001724
 80047d4:	20001712 	.word	0x20001712
 80047d8:	40010c00 	.word	0x40010c00
 80047dc:	20001713 	.word	0x20001713
 80047e0:	200016ff 	.word	0x200016ff
 80047e4:	200016fc 	.word	0x200016fc
 80047e8:	40011000 	.word	0x40011000
 80047ec:	200016c3 	.word	0x200016c3
 80047f0:	200016fa 	.word	0x200016fa
 80047f4:	200016fb 	.word	0x200016fb
 80047f8:	200016ce 	.word	0x200016ce
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004802:	4865      	ldr	r0, [pc, #404]	@ (8004998 <checkAktifCalisma+0x390>)
 8004804:	f006 f897 	bl	800a936 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004808:	4b64      	ldr	r3, [pc, #400]	@ (800499c <checkAktifCalisma+0x394>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <checkAktifCalisma+0x230>
 8004810:	4b63      	ldr	r3, [pc, #396]	@ (80049a0 <checkAktifCalisma+0x398>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d007      	beq.n	8004828 <checkAktifCalisma+0x220>
 8004818:	4b61      	ldr	r3, [pc, #388]	@ (80049a0 <checkAktifCalisma+0x398>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d003      	beq.n	8004828 <checkAktifCalisma+0x220>
 8004820:	4b60      	ldr	r3, [pc, #384]	@ (80049a4 <checkAktifCalisma+0x39c>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d107      	bne.n	8004838 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004828:	2201      	movs	r2, #1
 800482a:	2104      	movs	r1, #4
 800482c:	485a      	ldr	r0, [pc, #360]	@ (8004998 <checkAktifCalisma+0x390>)
 800482e:	f006 f882 	bl	800a936 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004832:	4b5d      	ldr	r3, [pc, #372]	@ (80049a8 <checkAktifCalisma+0x3a0>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004838:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <checkAktifCalisma+0x3a0>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d033      	beq.n	80048a8 <checkAktifCalisma+0x2a0>
 8004840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004844:	4854      	ldr	r0, [pc, #336]	@ (8004998 <checkAktifCalisma+0x390>)
 8004846:	f006 f85f 	bl	800a908 <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <checkAktifCalisma+0x256>
 8004850:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <checkAktifCalisma+0x3a4>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f083 0301 	eor.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <checkAktifCalisma+0x264>
 800485e:	2102      	movs	r1, #2
 8004860:	4853      	ldr	r0, [pc, #332]	@ (80049b0 <checkAktifCalisma+0x3a8>)
 8004862:	f006 f851 	bl	800a908 <HAL_GPIO_ReadPin>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d11d      	bne.n	80048a8 <checkAktifCalisma+0x2a0>
 800486c:	4b51      	ldr	r3, [pc, #324]	@ (80049b4 <checkAktifCalisma+0x3ac>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <checkAktifCalisma+0x274>
 8004874:	4b50      	ldr	r3, [pc, #320]	@ (80049b8 <checkAktifCalisma+0x3b0>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <checkAktifCalisma+0x2a0>
 800487c:	4b4f      	ldr	r3, [pc, #316]	@ (80049bc <checkAktifCalisma+0x3b4>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <checkAktifCalisma+0x2a0>
 8004884:	4b4e      	ldr	r3, [pc, #312]	@ (80049c0 <checkAktifCalisma+0x3b8>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <checkAktifCalisma+0x2a0>
 800488c:	4b4d      	ldr	r3, [pc, #308]	@ (80049c4 <checkAktifCalisma+0x3bc>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f083 0301 	eor.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <checkAktifCalisma+0x2a0>
					timer2=millis;
 800489a:	4b4b      	ldr	r3, [pc, #300]	@ (80049c8 <checkAktifCalisma+0x3c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4b      	ldr	r2, [pc, #300]	@ (80049cc <checkAktifCalisma+0x3c4>)
 80048a0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80048a2:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <checkAktifCalisma+0x3bc>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80048a8:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <checkAktifCalisma+0x3c0>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b47      	ldr	r3, [pc, #284]	@ (80049cc <checkAktifCalisma+0x3c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	4a47      	ldr	r2, [pc, #284]	@ (80049d0 <checkAktifCalisma+0x3c8>)
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d303      	bcc.n	80048c2 <checkAktifCalisma+0x2ba>
 80048ba:	4b42      	ldr	r3, [pc, #264]	@ (80049c4 <checkAktifCalisma+0x3bc>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d118      	bne.n	80048f4 <checkAktifCalisma+0x2ec>
 80048c2:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <checkAktifCalisma+0x3ac>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <checkAktifCalisma+0x2d6>
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <checkAktifCalisma+0x3b0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <checkAktifCalisma+0x2ec>
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <checkAktifCalisma+0x3b4>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <checkAktifCalisma+0x2ec>
 80048ec:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <checkAktifCalisma+0x3b8>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80048f4:	2200      	movs	r2, #0
 80048f6:	2104      	movs	r1, #4
 80048f8:	4827      	ldr	r0, [pc, #156]	@ (8004998 <checkAktifCalisma+0x390>)
 80048fa:	f006 f81c 	bl	800a936 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80048fe:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <checkAktifCalisma+0x3a0>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004904:	4b2f      	ldr	r3, [pc, #188]	@ (80049c4 <checkAktifCalisma+0x3bc>)
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800490a:	4b32      	ldr	r3, [pc, #200]	@ (80049d4 <checkAktifCalisma+0x3cc>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <checkAktifCalisma+0x3d0>)
 8004914:	2201      	movs	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004918:	4b2e      	ldr	r3, [pc, #184]	@ (80049d4 <checkAktifCalisma+0x3cc>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d116      	bne.n	800494e <checkAktifCalisma+0x346>
 8004920:	4b2e      	ldr	r3, [pc, #184]	@ (80049dc <checkAktifCalisma+0x3d4>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d112      	bne.n	800494e <checkAktifCalisma+0x346>
 8004928:	2101      	movs	r1, #1
 800492a:	4821      	ldr	r0, [pc, #132]	@ (80049b0 <checkAktifCalisma+0x3a8>)
 800492c:	f005 ffec 	bl	800a908 <HAL_GPIO_ReadPin>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <checkAktifCalisma+0x346>
 8004936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800493a:	4817      	ldr	r0, [pc, #92]	@ (8004998 <checkAktifCalisma+0x390>)
 800493c:	f005 ffe4 	bl	800a908 <HAL_GPIO_ReadPin>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004946:	4b24      	ldr	r3, [pc, #144]	@ (80049d8 <checkAktifCalisma+0x3d0>)
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e011      	b.n	8004972 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800494e:	4b21      	ldr	r3, [pc, #132]	@ (80049d4 <checkAktifCalisma+0x3cc>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10d      	bne.n	8004972 <checkAktifCalisma+0x36a>
 8004956:	2101      	movs	r1, #1
 8004958:	4815      	ldr	r0, [pc, #84]	@ (80049b0 <checkAktifCalisma+0x3a8>)
 800495a:	f005 ffd5 	bl	800a908 <HAL_GPIO_ReadPin>
 800495e:	4603      	mov	r3, r0
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <checkAktifCalisma+0x36a>
 8004964:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <checkAktifCalisma+0x3d4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 800496c:	4b1a      	ldr	r3, [pc, #104]	@ (80049d8 <checkAktifCalisma+0x3d0>)
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004972:	4b18      	ldr	r3, [pc, #96]	@ (80049d4 <checkAktifCalisma+0x3cc>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d135      	bne.n	80049e6 <checkAktifCalisma+0x3de>
 800497a:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <checkAktifCalisma+0x3d4>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d131      	bne.n	80049e6 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004982:	2101      	movs	r1, #1
 8004984:	480a      	ldr	r0, [pc, #40]	@ (80049b0 <checkAktifCalisma+0x3a8>)
 8004986:	f005 ffbf 	bl	800a908 <HAL_GPIO_ReadPin>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d127      	bne.n	80049e0 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004990:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <checkAktifCalisma+0x3d0>)
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e026      	b.n	80049e6 <checkAktifCalisma+0x3de>
 8004998:	40010c00 	.word	0x40010c00
 800499c:	200016f5 	.word	0x200016f5
 80049a0:	200016cf 	.word	0x200016cf
 80049a4:	200016d3 	.word	0x200016d3
 80049a8:	200016f9 	.word	0x200016f9
 80049ac:	200016fc 	.word	0x200016fc
 80049b0:	40011000 	.word	0x40011000
 80049b4:	20001711 	.word	0x20001711
 80049b8:	20001724 	.word	0x20001724
 80049bc:	20001712 	.word	0x20001712
 80049c0:	200016c3 	.word	0x200016c3
 80049c4:	200016f1 	.word	0x200016f1
 80049c8:	20001698 	.word	0x20001698
 80049cc:	200016a4 	.word	0x200016a4
 80049d0:	200016d4 	.word	0x200016d4
 80049d4:	200016c4 	.word	0x200016c4
 80049d8:	20001716 	.word	0x20001716
 80049dc:	200016c1 	.word	0x200016c1
					} else {
						cerceveVar=0;
 80049e0:	4b7f      	ldr	r3, [pc, #508]	@ (8004be0 <checkAktifCalisma+0x5d8>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80049e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <checkAktifCalisma+0x5dc>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d17c      	bne.n	8004ae8 <checkAktifCalisma+0x4e0>
 80049ee:	4b7e      	ldr	r3, [pc, #504]	@ (8004be8 <checkAktifCalisma+0x5e0>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d078      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
 80049f6:	4b7d      	ldr	r3, [pc, #500]	@ (8004bec <checkAktifCalisma+0x5e4>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d074      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80049fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a02:	487b      	ldr	r0, [pc, #492]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004a04:	f005 ff80 	bl	800a908 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <checkAktifCalisma+0x40e>
 8004a0e:	4b79      	ldr	r3, [pc, #484]	@ (8004bf4 <checkAktifCalisma+0x5ec>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d068      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004a16:	4b72      	ldr	r3, [pc, #456]	@ (8004be0 <checkAktifCalisma+0x5d8>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d064      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
 8004a1e:	4b76      	ldr	r3, [pc, #472]	@ (8004bf8 <checkAktifCalisma+0x5f0>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f083 0301 	eor.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d05d      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4873      	ldr	r0, [pc, #460]	@ (8004bfc <checkAktifCalisma+0x5f4>)
 8004a30:	f005 ff6a 	bl	800a908 <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <checkAktifCalisma+0x43a>
 8004a3a:	4b71      	ldr	r3, [pc, #452]	@ (8004c00 <checkAktifCalisma+0x5f8>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d152      	bne.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a46:	486a      	ldr	r0, [pc, #424]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004a48:	f005 ff5e 	bl	800a908 <HAL_GPIO_ReadPin>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10e      	bne.n	8004a70 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a56:	4866      	ldr	r0, [pc, #408]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004a58:	f005 ff56 	bl	800a908 <HAL_GPIO_ReadPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d106      	bne.n	8004a70 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004a62:	2140      	movs	r1, #64	@ 0x40
 8004a64:	4865      	ldr	r0, [pc, #404]	@ (8004bfc <checkAktifCalisma+0x5f4>)
 8004a66:	f005 ff4f 	bl	800a908 <HAL_GPIO_ReadPin>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d003      	beq.n	8004a78 <checkAktifCalisma+0x470>
 8004a70:	4b64      	ldr	r3, [pc, #400]	@ (8004c04 <checkAktifCalisma+0x5fc>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d037      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004a78:	4b63      	ldr	r3, [pc, #396]	@ (8004c08 <checkAktifCalisma+0x600>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f083 0301 	eor.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d030      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004a86:	4b61      	ldr	r3, [pc, #388]	@ (8004c0c <checkAktifCalisma+0x604>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f083 0301 	eor.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d029      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004a94:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <checkAktifCalisma+0x608>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	f083 0301 	eor.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d022      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c14 <checkAktifCalisma+0x60c>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	f083 0301 	eor.w	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004ab0:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <checkAktifCalisma+0x610>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f083 0301 	eor.w	r3, r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004abe:	4b57      	ldr	r3, [pc, #348]	@ (8004c1c <checkAktifCalisma+0x614>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	f083 0301 	eor.w	r3, r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004acc:	2201      	movs	r2, #1
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4847      	ldr	r0, [pc, #284]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004ad2:	f005 ff30 	bl	800a936 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8004c04 <checkAktifCalisma+0x5fc>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004adc:	4b50      	ldr	r3, [pc, #320]	@ (8004c20 <checkAktifCalisma+0x618>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004ae2:	4b50      	ldr	r3, [pc, #320]	@ (8004c24 <checkAktifCalisma+0x61c>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004ae8:	4b46      	ldr	r3, [pc, #280]	@ (8004c04 <checkAktifCalisma+0x5fc>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d033      	beq.n	8004b58 <checkAktifCalisma+0x550>
 8004af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004af4:	483e      	ldr	r0, [pc, #248]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004af6:	f005 ff07 	bl	800a908 <HAL_GPIO_ReadPin>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <checkAktifCalisma+0x506>
 8004b00:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf4 <checkAktifCalisma+0x5ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f083 0301 	eor.w	r3, r3, #1
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <checkAktifCalisma+0x51c>
 8004b0e:	2104      	movs	r1, #4
 8004b10:	483a      	ldr	r0, [pc, #232]	@ (8004bfc <checkAktifCalisma+0x5f4>)
 8004b12:	f005 fef9 	bl	800a908 <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11d      	bne.n	8004b58 <checkAktifCalisma+0x550>
 8004b1c:	4b38      	ldr	r3, [pc, #224]	@ (8004c00 <checkAktifCalisma+0x5f8>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d019      	beq.n	8004b58 <checkAktifCalisma+0x550>
 8004b24:	4b30      	ldr	r3, [pc, #192]	@ (8004be8 <checkAktifCalisma+0x5e0>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <checkAktifCalisma+0x550>
 8004b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bec <checkAktifCalisma+0x5e4>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d011      	beq.n	8004b58 <checkAktifCalisma+0x550>
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <checkAktifCalisma+0x5d8>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <checkAktifCalisma+0x550>
 8004b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c28 <checkAktifCalisma+0x620>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f083 0301 	eor.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <checkAktifCalisma+0x550>
					timer2=millis;
 8004b4a:	4b38      	ldr	r3, [pc, #224]	@ (8004c2c <checkAktifCalisma+0x624>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	@ (8004c30 <checkAktifCalisma+0x628>)
 8004b50:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004b52:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <checkAktifCalisma+0x620>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004b58:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <checkAktifCalisma+0x624>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <checkAktifCalisma+0x628>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <checkAktifCalisma+0x62c>)
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d303      	bcc.n	8004b72 <checkAktifCalisma+0x56a>
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <checkAktifCalisma+0x620>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d114      	bne.n	8004b9c <checkAktifCalisma+0x594>
 8004b72:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <checkAktifCalisma+0x5e0>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f083 0301 	eor.w	r3, r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <checkAktifCalisma+0x594>
 8004b80:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <checkAktifCalisma+0x5e4>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f083 0301 	eor.w	r3, r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <checkAktifCalisma+0x594>
 8004b8e:	4b14      	ldr	r3, [pc, #80]	@ (8004be0 <checkAktifCalisma+0x5d8>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f083 0301 	eor.w	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4813      	ldr	r0, [pc, #76]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004ba2:	f005 fec8 	bl	800a936 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004ba6:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <checkAktifCalisma+0x5fc>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004bac:	4b1e      	ldr	r3, [pc, #120]	@ (8004c28 <checkAktifCalisma+0x620>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004bb2:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <checkAktifCalisma+0x5fc>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d040      	beq.n	8004c3c <checkAktifCalisma+0x634>
 8004bba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bbe:	480f      	ldr	r0, [pc, #60]	@ (8004bfc <checkAktifCalisma+0x5f4>)
 8004bc0:	f005 fea2 	bl	800a908 <HAL_GPIO_ReadPin>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d138      	bne.n	8004c3c <checkAktifCalisma+0x634>
 8004bca:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <checkAktifCalisma+0x630>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d034      	beq.n	8004c3c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4806      	ldr	r0, [pc, #24]	@ (8004bf0 <checkAktifCalisma+0x5e8>)
 8004bd8:	f005 fead 	bl	800a936 <HAL_GPIO_WritePin>
 8004bdc:	e033      	b.n	8004c46 <checkAktifCalisma+0x63e>
 8004bde:	bf00      	nop
 8004be0:	20001716 	.word	0x20001716
 8004be4:	200016dd 	.word	0x200016dd
 8004be8:	20001711 	.word	0x20001711
 8004bec:	20001712 	.word	0x20001712
 8004bf0:	40010c00 	.word	0x40010c00
 8004bf4:	200016fd 	.word	0x200016fd
 8004bf8:	20001710 	.word	0x20001710
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	200016c6 	.word	0x200016c6
 8004c04:	200016f8 	.word	0x200016f8
 8004c08:	200016f5 	.word	0x200016f5
 8004c0c:	200016f9 	.word	0x200016f9
 8004c10:	200016f6 	.word	0x200016f6
 8004c14:	200016f7 	.word	0x200016f7
 8004c18:	200016fa 	.word	0x200016fa
 8004c1c:	200016fb 	.word	0x200016fb
 8004c20:	20001700 	.word	0x20001700
 8004c24:	20001720 	.word	0x20001720
 8004c28:	200016f0 	.word	0x200016f0
 8004c2c:	20001698 	.word	0x20001698
 8004c30:	200016a4 	.word	0x200016a4
 8004c34:	200016d5 	.word	0x200016d5
 8004c38:	200016c5 	.word	0x200016c5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4836      	ldr	r0, [pc, #216]	@ (8004d1c <checkAktifCalisma+0x714>)
 8004c42:	f005 fe78 	bl	800a936 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004c46:	4b36      	ldr	r3, [pc, #216]	@ (8004d20 <checkAktifCalisma+0x718>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8080 	bne.w	8004d50 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004c50:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <checkAktifCalisma+0x71c>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d003      	beq.n	8004c60 <checkAktifCalisma+0x658>
 8004c58:	4b32      	ldr	r3, [pc, #200]	@ (8004d24 <checkAktifCalisma+0x71c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d177      	bne.n	8004d50 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004c60:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <checkAktifCalisma+0x720>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d073      	beq.n	8004d50 <checkAktifCalisma+0x748>
 8004c68:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <checkAktifCalisma+0x724>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d06f      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c74:	4829      	ldr	r0, [pc, #164]	@ (8004d1c <checkAktifCalisma+0x714>)
 8004c76:	f005 fe47 	bl	800a908 <HAL_GPIO_ReadPin>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d167      	bne.n	8004d50 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004c80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c84:	482a      	ldr	r0, [pc, #168]	@ (8004d30 <checkAktifCalisma+0x728>)
 8004c86:	f005 fe3f 	bl	800a908 <HAL_GPIO_ReadPin>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <checkAktifCalisma+0x690>
 8004c90:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <checkAktifCalisma+0x72c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15b      	bne.n	8004d50 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004c98:	2140      	movs	r1, #64	@ 0x40
 8004c9a:	4825      	ldr	r0, [pc, #148]	@ (8004d30 <checkAktifCalisma+0x728>)
 8004c9c:	f005 fe34 	bl	800a908 <HAL_GPIO_ReadPin>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10f      	bne.n	8004cc6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004ca6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004caa:	481c      	ldr	r0, [pc, #112]	@ (8004d1c <checkAktifCalisma+0x714>)
 8004cac:	f005 fe2c 	bl	800a908 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004cb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cba:	4818      	ldr	r0, [pc, #96]	@ (8004d1c <checkAktifCalisma+0x714>)
 8004cbc:	f005 fe24 	bl	800a908 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d003      	beq.n	8004cce <checkAktifCalisma+0x6c6>
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <checkAktifCalisma+0x730>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d040      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004cce:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <checkAktifCalisma+0x734>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d039      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004cdc:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <checkAktifCalisma+0x738>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f083 0301 	eor.w	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d032      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004cea:	4b16      	ldr	r3, [pc, #88]	@ (8004d44 <checkAktifCalisma+0x73c>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f083 0301 	eor.w	r3, r3, #1
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02b      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004cf8:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <checkAktifCalisma+0x740>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f083 0301 	eor.w	r3, r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d024      	beq.n	8004d50 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004d06:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <checkAktifCalisma+0x744>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01d      	beq.n	8004d50 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004d14:	4b08      	ldr	r3, [pc, #32]	@ (8004d38 <checkAktifCalisma+0x730>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e01c      	b.n	8004d56 <checkAktifCalisma+0x74e>
 8004d1c:	40010c00 	.word	0x40010c00
 8004d20:	200016dd 	.word	0x200016dd
 8004d24:	200016cf 	.word	0x200016cf
 8004d28:	20001711 	.word	0x20001711
 8004d2c:	20001712 	.word	0x20001712
 8004d30:	40011000 	.word	0x40011000
 8004d34:	200016d0 	.word	0x200016d0
 8004d38:	200016f6 	.word	0x200016f6
 8004d3c:	200016f5 	.word	0x200016f5
 8004d40:	200016f9 	.word	0x200016f9
 8004d44:	200016f8 	.word	0x200016f8
 8004d48:	200016f7 	.word	0x200016f7
 8004d4c:	200016fb 	.word	0x200016fb
				} else {
					devmotoryukaricalisiyor=0;
 8004d50:	4b64      	ldr	r3, [pc, #400]	@ (8004ee4 <checkAktifCalisma+0x8dc>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004d56:	4b63      	ldr	r3, [pc, #396]	@ (8004ee4 <checkAktifCalisma+0x8dc>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2120      	movs	r1, #32
 8004d62:	4861      	ldr	r0, [pc, #388]	@ (8004ee8 <checkAktifCalisma+0x8e0>)
 8004d64:	f005 fde7 	bl	800a936 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004d68:	4b60      	ldr	r3, [pc, #384]	@ (8004eec <checkAktifCalisma+0x8e4>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004eec <checkAktifCalisma+0x8e4>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d025      	beq.n	8004dc2 <checkAktifCalisma+0x7ba>
 8004d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d7a:	485d      	ldr	r0, [pc, #372]	@ (8004ef0 <checkAktifCalisma+0x8e8>)
 8004d7c:	f005 fdc4 	bl	800a908 <HAL_GPIO_ReadPin>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d007      	beq.n	8004d96 <checkAktifCalisma+0x78e>
 8004d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d8a:	4857      	ldr	r0, [pc, #348]	@ (8004ee8 <checkAktifCalisma+0x8e0>)
 8004d8c:	f005 fdbc 	bl	800a908 <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d115      	bne.n	8004dc2 <checkAktifCalisma+0x7ba>
 8004d96:	4b57      	ldr	r3, [pc, #348]	@ (8004ef4 <checkAktifCalisma+0x8ec>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d011      	beq.n	8004dc2 <checkAktifCalisma+0x7ba>
 8004d9e:	4b56      	ldr	r3, [pc, #344]	@ (8004ef8 <checkAktifCalisma+0x8f0>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <checkAktifCalisma+0x7ba>
 8004da6:	4b55      	ldr	r3, [pc, #340]	@ (8004efc <checkAktifCalisma+0x8f4>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f083 0301 	eor.w	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004db4:	4b52      	ldr	r3, [pc, #328]	@ (8004f00 <checkAktifCalisma+0x8f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a52      	ldr	r2, [pc, #328]	@ (8004f04 <checkAktifCalisma+0x8fc>)
 8004dba:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004efc <checkAktifCalisma+0x8f4>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f00 <checkAktifCalisma+0x8f8>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f04 <checkAktifCalisma+0x8fc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8004f08 <checkAktifCalisma+0x900>)
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d303      	bcc.n	8004ddc <checkAktifCalisma+0x7d4>
 8004dd4:	4b49      	ldr	r3, [pc, #292]	@ (8004efc <checkAktifCalisma+0x8f4>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <checkAktifCalisma+0x7f0>
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <checkAktifCalisma+0x8ec>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f083 0301 	eor.w	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <checkAktifCalisma+0x7f0>
 8004dea:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <checkAktifCalisma+0x8f0>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f083 0301 	eor.w	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2120      	movs	r1, #32
 8004dfc:	483a      	ldr	r0, [pc, #232]	@ (8004ee8 <checkAktifCalisma+0x8e0>)
 8004dfe:	f005 fd9a 	bl	800a936 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004e02:	4b3a      	ldr	r3, [pc, #232]	@ (8004eec <checkAktifCalisma+0x8e4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004e08:	4b3c      	ldr	r3, [pc, #240]	@ (8004efc <checkAktifCalisma+0x8f4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f0c <checkAktifCalisma+0x904>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 8088 	bne.w	8004f28 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <checkAktifCalisma+0x908>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d003      	beq.n	8004e28 <checkAktifCalisma+0x820>
 8004e20:	4b3b      	ldr	r3, [pc, #236]	@ (8004f10 <checkAktifCalisma+0x908>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d17f      	bne.n	8004f28 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004e28:	4b32      	ldr	r3, [pc, #200]	@ (8004ef4 <checkAktifCalisma+0x8ec>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d07b      	beq.n	8004f28 <checkAktifCalisma+0x920>
 8004e30:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <checkAktifCalisma+0x8f0>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d077      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004e38:	2140      	movs	r1, #64	@ 0x40
 8004e3a:	482b      	ldr	r0, [pc, #172]	@ (8004ee8 <checkAktifCalisma+0x8e0>)
 8004e3c:	f005 fd64 	bl	800a908 <HAL_GPIO_ReadPin>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d170      	bne.n	8004f28 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004e46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e4a:	4827      	ldr	r0, [pc, #156]	@ (8004ee8 <checkAktifCalisma+0x8e0>)
 8004e4c:	f005 fd5c 	bl	800a908 <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <checkAktifCalisma+0x856>
 8004e56:	4b2f      	ldr	r3, [pc, #188]	@ (8004f14 <checkAktifCalisma+0x90c>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d164      	bne.n	8004f28 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e62:	4823      	ldr	r0, [pc, #140]	@ (8004ef0 <checkAktifCalisma+0x8e8>)
 8004e64:	f005 fd50 	bl	800a908 <HAL_GPIO_ReadPin>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10f      	bne.n	8004e8e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004e6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e72:	481f      	ldr	r0, [pc, #124]	@ (8004ef0 <checkAktifCalisma+0x8e8>)
 8004e74:	f005 fd48 	bl	800a908 <HAL_GPIO_ReadPin>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d107      	bne.n	8004e8e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004e7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e82:	481b      	ldr	r0, [pc, #108]	@ (8004ef0 <checkAktifCalisma+0x8e8>)
 8004e84:	f005 fd40 	bl	800a908 <HAL_GPIO_ReadPin>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d003      	beq.n	8004e96 <checkAktifCalisma+0x88e>
 8004e8e:	4b22      	ldr	r3, [pc, #136]	@ (8004f18 <checkAktifCalisma+0x910>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d048      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004e96:	4b21      	ldr	r3, [pc, #132]	@ (8004f1c <checkAktifCalisma+0x914>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f083 0301 	eor.w	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d041      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f20 <checkAktifCalisma+0x918>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f083 0301 	eor.w	r3, r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03a      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <checkAktifCalisma+0x91c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f083 0301 	eor.w	r3, r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d033      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <checkAktifCalisma+0x8e4>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f083 0301 	eor.w	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02c      	beq.n	8004f28 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <checkAktifCalisma+0x8dc>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f083 0301 	eor.w	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d025      	beq.n	8004f28 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004edc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f18 <checkAktifCalisma+0x910>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e024      	b.n	8004f2e <checkAktifCalisma+0x926>
 8004ee4:	200016f6 	.word	0x200016f6
 8004ee8:	40011000 	.word	0x40011000
 8004eec:	200016fa 	.word	0x200016fa
 8004ef0:	40010c00 	.word	0x40010c00
 8004ef4:	20001711 	.word	0x20001711
 8004ef8:	20001712 	.word	0x20001712
 8004efc:	200016f2 	.word	0x200016f2
 8004f00:	20001698 	.word	0x20001698
 8004f04:	200016a4 	.word	0x200016a4
 8004f08:	200016d6 	.word	0x200016d6
 8004f0c:	200016dd 	.word	0x200016dd
 8004f10:	200016cf 	.word	0x200016cf
 8004f14:	200016d1 	.word	0x200016d1
 8004f18:	200016f7 	.word	0x200016f7
 8004f1c:	200016f5 	.word	0x200016f5
 8004f20:	200016f9 	.word	0x200016f9
 8004f24:	200016f8 	.word	0x200016f8
				} else {
					devmotorasagicalisiyor=0;
 8004f28:	4b96      	ldr	r3, [pc, #600]	@ (8005184 <checkAktifCalisma+0xb7c>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004f2e:	4b95      	ldr	r3, [pc, #596]	@ (8005184 <checkAktifCalisma+0xb7c>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004f36:	2201      	movs	r2, #1
 8004f38:	2110      	movs	r1, #16
 8004f3a:	4893      	ldr	r0, [pc, #588]	@ (8005188 <checkAktifCalisma+0xb80>)
 8004f3c:	f005 fcfb 	bl	800a936 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004f40:	4b92      	ldr	r3, [pc, #584]	@ (800518c <checkAktifCalisma+0xb84>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004f46:	4b91      	ldr	r3, [pc, #580]	@ (800518c <checkAktifCalisma+0xb84>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d024      	beq.n	8004f98 <checkAktifCalisma+0x990>
 8004f4e:	2140      	movs	r1, #64	@ 0x40
 8004f50:	488d      	ldr	r0, [pc, #564]	@ (8005188 <checkAktifCalisma+0xb80>)
 8004f52:	f005 fcd9 	bl	800a908 <HAL_GPIO_ReadPin>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d007      	beq.n	8004f6c <checkAktifCalisma+0x964>
 8004f5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f60:	4889      	ldr	r0, [pc, #548]	@ (8005188 <checkAktifCalisma+0xb80>)
 8004f62:	f005 fcd1 	bl	800a908 <HAL_GPIO_ReadPin>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d115      	bne.n	8004f98 <checkAktifCalisma+0x990>
 8004f6c:	4b88      	ldr	r3, [pc, #544]	@ (8005190 <checkAktifCalisma+0xb88>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d011      	beq.n	8004f98 <checkAktifCalisma+0x990>
 8004f74:	4b87      	ldr	r3, [pc, #540]	@ (8005194 <checkAktifCalisma+0xb8c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00d      	beq.n	8004f98 <checkAktifCalisma+0x990>
 8004f7c:	4b86      	ldr	r3, [pc, #536]	@ (8005198 <checkAktifCalisma+0xb90>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f083 0301 	eor.w	r3, r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <checkAktifCalisma+0x990>
					timer2=millis;
 8004f8a:	4b84      	ldr	r3, [pc, #528]	@ (800519c <checkAktifCalisma+0xb94>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a84      	ldr	r2, [pc, #528]	@ (80051a0 <checkAktifCalisma+0xb98>)
 8004f90:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004f92:	4b81      	ldr	r3, [pc, #516]	@ (8005198 <checkAktifCalisma+0xb90>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004f98:	4b80      	ldr	r3, [pc, #512]	@ (800519c <checkAktifCalisma+0xb94>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b80      	ldr	r3, [pc, #512]	@ (80051a0 <checkAktifCalisma+0xb98>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a80      	ldr	r2, [pc, #512]	@ (80051a4 <checkAktifCalisma+0xb9c>)
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d303      	bcc.n	8004fb2 <checkAktifCalisma+0x9aa>
 8004faa:	4b7b      	ldr	r3, [pc, #492]	@ (8005198 <checkAktifCalisma+0xb90>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <checkAktifCalisma+0x9c6>
 8004fb2:	4b77      	ldr	r3, [pc, #476]	@ (8005190 <checkAktifCalisma+0xb88>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f083 0301 	eor.w	r3, r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <checkAktifCalisma+0x9c6>
 8004fc0:	4b74      	ldr	r3, [pc, #464]	@ (8005194 <checkAktifCalisma+0xb8c>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f083 0301 	eor.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	486d      	ldr	r0, [pc, #436]	@ (8005188 <checkAktifCalisma+0xb80>)
 8004fd4:	f005 fcaf 	bl	800a936 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800518c <checkAktifCalisma+0xb84>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004fde:	4b6e      	ldr	r3, [pc, #440]	@ (8005198 <checkAktifCalisma+0xb90>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004fe4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fe8:	486f      	ldr	r0, [pc, #444]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8004fea:	f005 fc8d 	bl	800a908 <HAL_GPIO_ReadPin>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d120      	bne.n	8005036 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004ff4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ff8:	486b      	ldr	r0, [pc, #428]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8004ffa:	f005 fc85 	bl	800a908 <HAL_GPIO_ReadPin>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d118      	bne.n	8005036 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005004:	2104      	movs	r1, #4
 8005006:	4868      	ldr	r0, [pc, #416]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8005008:	f005 fc7e 	bl	800a908 <HAL_GPIO_ReadPin>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d111      	bne.n	8005036 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005012:	2102      	movs	r1, #2
 8005014:	4864      	ldr	r0, [pc, #400]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8005016:	f005 fc77 	bl	800a908 <HAL_GPIO_ReadPin>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005020:	2101      	movs	r1, #1
 8005022:	4861      	ldr	r0, [pc, #388]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8005024:	f005 fc70 	bl	800a908 <HAL_GPIO_ReadPin>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <checkAktifCalisma+0xa2e>
					makineStop=1;
 800502e:	4b5f      	ldr	r3, [pc, #380]	@ (80051ac <checkAktifCalisma+0xba4>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e002      	b.n	800503c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8005036:	4b5d      	ldr	r3, [pc, #372]	@ (80051ac <checkAktifCalisma+0xba4>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800503c:	4b5c      	ldr	r3, [pc, #368]	@ (80051b0 <checkAktifCalisma+0xba8>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d144      	bne.n	80050ce <checkAktifCalisma+0xac6>
 8005044:	4b5b      	ldr	r3, [pc, #364]	@ (80051b4 <checkAktifCalisma+0xbac>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d003      	beq.n	8005054 <checkAktifCalisma+0xa4c>
 800504c:	4b59      	ldr	r3, [pc, #356]	@ (80051b4 <checkAktifCalisma+0xbac>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d13c      	bne.n	80050ce <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005054:	2180      	movs	r1, #128	@ 0x80
 8005056:	484c      	ldr	r0, [pc, #304]	@ (8005188 <checkAktifCalisma+0xb80>)
 8005058:	f005 fc56 	bl	800a908 <HAL_GPIO_ReadPin>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <checkAktifCalisma+0xa62>
 8005062:	4b55      	ldr	r3, [pc, #340]	@ (80051b8 <checkAktifCalisma+0xbb0>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <checkAktifCalisma+0xa7a>
 800506a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800506e:	484e      	ldr	r0, [pc, #312]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8005070:	f005 fc4a 	bl	800a908 <HAL_GPIO_ReadPin>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d129      	bne.n	80050ce <checkAktifCalisma+0xac6>
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <checkAktifCalisma+0xbb0>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d125      	bne.n	80050ce <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005082:	2104      	movs	r1, #4
 8005084:	4840      	ldr	r0, [pc, #256]	@ (8005188 <checkAktifCalisma+0xb80>)
 8005086:	f005 fc3f 	bl	800a908 <HAL_GPIO_ReadPin>
 800508a:	4603      	mov	r3, r0
 800508c:	2b01      	cmp	r3, #1
 800508e:	d003      	beq.n	8005098 <checkAktifCalisma+0xa90>
 8005090:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <checkAktifCalisma+0xbb4>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005098:	2102      	movs	r1, #2
 800509a:	483b      	ldr	r0, [pc, #236]	@ (8005188 <checkAktifCalisma+0xb80>)
 800509c:	f005 fc34 	bl	800a908 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80050a6:	4b46      	ldr	r3, [pc, #280]	@ (80051c0 <checkAktifCalisma+0xbb8>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f083 0301 	eor.w	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 80050b4:	4b3d      	ldr	r3, [pc, #244]	@ (80051ac <checkAktifCalisma+0xba4>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 80050bc:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <checkAktifCalisma+0xbbc>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80050c2:	4b36      	ldr	r3, [pc, #216]	@ (800519c <checkAktifCalisma+0xb94>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a40      	ldr	r2, [pc, #256]	@ (80051c8 <checkAktifCalisma+0xbc0>)
 80050c8:	6013      	str	r3, [r2, #0]
					bekle();
 80050ca:	f7ff f901 	bl	80042d0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80050ce:	4b33      	ldr	r3, [pc, #204]	@ (800519c <checkAktifCalisma+0xb94>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b3d      	ldr	r3, [pc, #244]	@ (80051c8 <checkAktifCalisma+0xbc0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	4a3c      	ldr	r2, [pc, #240]	@ (80051cc <checkAktifCalisma+0xbc4>)
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	4293      	cmp	r3, r2
 80050de:	d211      	bcs.n	8005104 <checkAktifCalisma+0xafc>
 80050e0:	2104      	movs	r1, #4
 80050e2:	4829      	ldr	r0, [pc, #164]	@ (8005188 <checkAktifCalisma+0xb80>)
 80050e4:	f005 fc10 	bl	800a908 <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <checkAktifCalisma+0xafc>
 80050ee:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <checkAktifCalisma+0xbb4>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <checkAktifCalisma+0xafc>
 80050f6:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <checkAktifCalisma+0xba4>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f083 0301 	eor.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8005104:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <checkAktifCalisma+0xbbc>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800510a:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <checkAktifCalisma+0xba8>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d160      	bne.n	80051d4 <checkAktifCalisma+0xbcc>
 8005112:	4b28      	ldr	r3, [pc, #160]	@ (80051b4 <checkAktifCalisma+0xbac>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d003      	beq.n	8005122 <checkAktifCalisma+0xb1a>
 800511a:	4b26      	ldr	r3, [pc, #152]	@ (80051b4 <checkAktifCalisma+0xbac>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d158      	bne.n	80051d4 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005122:	2104      	movs	r1, #4
 8005124:	4818      	ldr	r0, [pc, #96]	@ (8005188 <checkAktifCalisma+0xb80>)
 8005126:	f005 fbef 	bl	800a908 <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d003      	beq.n	8005138 <checkAktifCalisma+0xb30>
 8005130:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <checkAktifCalisma+0xbb4>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d14d      	bne.n	80051d4 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005138:	2102      	movs	r1, #2
 800513a:	4813      	ldr	r0, [pc, #76]	@ (8005188 <checkAktifCalisma+0xb80>)
 800513c:	f005 fbe4 	bl	800a908 <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d146      	bne.n	80051d4 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	480f      	ldr	r0, [pc, #60]	@ (8005188 <checkAktifCalisma+0xb80>)
 800514a:	f005 fbdd 	bl	800a908 <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <checkAktifCalisma+0xb54>
 8005154:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <checkAktifCalisma+0xbb0>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <checkAktifCalisma+0xb6c>
 800515c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005160:	4811      	ldr	r0, [pc, #68]	@ (80051a8 <checkAktifCalisma+0xba0>)
 8005162:	f005 fbd1 	bl	800a908 <HAL_GPIO_ReadPin>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d133      	bne.n	80051d4 <checkAktifCalisma+0xbcc>
 800516c:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <checkAktifCalisma+0xbb0>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d12f      	bne.n	80051d4 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8005174:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <checkAktifCalisma+0xba4>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 800517c:	4b14      	ldr	r3, [pc, #80]	@ (80051d0 <checkAktifCalisma+0xbc8>)
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e02a      	b.n	80051da <checkAktifCalisma+0xbd2>
 8005184:	200016f7 	.word	0x200016f7
 8005188:	40011000 	.word	0x40011000
 800518c:	200016fb 	.word	0x200016fb
 8005190:	20001711 	.word	0x20001711
 8005194:	20001712 	.word	0x20001712
 8005198:	200016f3 	.word	0x200016f3
 800519c:	20001698 	.word	0x20001698
 80051a0:	200016a4 	.word	0x200016a4
 80051a4:	200016d6 	.word	0x200016d6
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	20001701 	.word	0x20001701
 80051b0:	200016c9 	.word	0x200016c9
 80051b4:	200016c8 	.word	0x200016c8
 80051b8:	200016cc 	.word	0x200016cc
 80051bc:	200016c6 	.word	0x200016c6
 80051c0:	200016ef 	.word	0x200016ef
 80051c4:	20001702 	.word	0x20001702
 80051c8:	2000169c 	.word	0x2000169c
 80051cc:	200016d9 	.word	0x200016d9
 80051d0:	20001703 	.word	0x20001703
				} else {
					kapi1butonkontrol=0;
 80051d4:	4b8b      	ldr	r3, [pc, #556]	@ (8005404 <checkAktifCalisma+0xdfc>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051da:	4b8b      	ldr	r3, [pc, #556]	@ (8005408 <checkAktifCalisma+0xe00>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d121      	bne.n	8005226 <checkAktifCalisma+0xc1e>
 80051e2:	4b8a      	ldr	r3, [pc, #552]	@ (800540c <checkAktifCalisma+0xe04>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d003      	beq.n	80051f2 <checkAktifCalisma+0xbea>
 80051ea:	4b88      	ldr	r3, [pc, #544]	@ (800540c <checkAktifCalisma+0xe04>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d119      	bne.n	8005226 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80051f2:	2104      	movs	r1, #4
 80051f4:	4886      	ldr	r0, [pc, #536]	@ (8005410 <checkAktifCalisma+0xe08>)
 80051f6:	f005 fb87 	bl	800a908 <HAL_GPIO_ReadPin>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d003      	beq.n	8005208 <checkAktifCalisma+0xc00>
 8005200:	4b84      	ldr	r3, [pc, #528]	@ (8005414 <checkAktifCalisma+0xe0c>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10e      	bne.n	8005226 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005208:	2102      	movs	r1, #2
 800520a:	4881      	ldr	r0, [pc, #516]	@ (8005410 <checkAktifCalisma+0xe08>)
 800520c:	f005 fb7c 	bl	800a908 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d107      	bne.n	8005226 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8005216:	4b80      	ldr	r3, [pc, #512]	@ (8005418 <checkAktifCalisma+0xe10>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 800521e:	4b7f      	ldr	r3, [pc, #508]	@ (800541c <checkAktifCalisma+0xe14>)
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e002      	b.n	800522c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8005226:	4b7d      	ldr	r3, [pc, #500]	@ (800541c <checkAktifCalisma+0xe14>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800522c:	4b75      	ldr	r3, [pc, #468]	@ (8005404 <checkAktifCalisma+0xdfc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d107      	bne.n	8005244 <checkAktifCalisma+0xc3c>
 8005234:	4b79      	ldr	r3, [pc, #484]	@ (800541c <checkAktifCalisma+0xe14>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <checkAktifCalisma+0xc3c>
 800523c:	4b78      	ldr	r3, [pc, #480]	@ (8005420 <checkAktifCalisma+0xe18>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005244:	2201      	movs	r2, #1
 8005246:	2180      	movs	r1, #128	@ 0x80
 8005248:	4876      	ldr	r0, [pc, #472]	@ (8005424 <checkAktifCalisma+0xe1c>)
 800524a:	f005 fb74 	bl	800a936 <HAL_GPIO_WritePin>
 800524e:	e004      	b.n	800525a <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	4873      	ldr	r0, [pc, #460]	@ (8005424 <checkAktifCalisma+0xe1c>)
 8005256:	f005 fb6e 	bl	800a936 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800525a:	4b73      	ldr	r3, [pc, #460]	@ (8005428 <checkAktifCalisma+0xe20>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d141      	bne.n	80052e6 <checkAktifCalisma+0xcde>
 8005262:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <checkAktifCalisma+0xe04>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d003      	beq.n	8005272 <checkAktifCalisma+0xc6a>
 800526a:	4b68      	ldr	r3, [pc, #416]	@ (800540c <checkAktifCalisma+0xe04>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d139      	bne.n	80052e6 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005272:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005276:	4866      	ldr	r0, [pc, #408]	@ (8005410 <checkAktifCalisma+0xe08>)
 8005278:	f005 fb46 	bl	800a908 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <checkAktifCalisma+0xc82>
 8005282:	4b6a      	ldr	r3, [pc, #424]	@ (800542c <checkAktifCalisma+0xe24>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <checkAktifCalisma+0xc9a>
 800528a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800528e:	4868      	ldr	r0, [pc, #416]	@ (8005430 <checkAktifCalisma+0xe28>)
 8005290:	f005 fb3a 	bl	800a908 <HAL_GPIO_ReadPin>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d125      	bne.n	80052e6 <checkAktifCalisma+0xcde>
 800529a:	4b64      	ldr	r3, [pc, #400]	@ (800542c <checkAktifCalisma+0xe24>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d121      	bne.n	80052e6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80052a2:	2102      	movs	r1, #2
 80052a4:	485a      	ldr	r0, [pc, #360]	@ (8005410 <checkAktifCalisma+0xe08>)
 80052a6:	f005 fb2f 	bl	800a908 <HAL_GPIO_ReadPin>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d11a      	bne.n	80052e6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80052b0:	2104      	movs	r1, #4
 80052b2:	4857      	ldr	r0, [pc, #348]	@ (8005410 <checkAktifCalisma+0xe08>)
 80052b4:	f005 fb28 	bl	800a908 <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d113      	bne.n	80052e6 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 80052be:	4b56      	ldr	r3, [pc, #344]	@ (8005418 <checkAktifCalisma+0xe10>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 80052c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005434 <checkAktifCalisma+0xe2c>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f083 0301 	eor.w	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 80052d4:	4b58      	ldr	r3, [pc, #352]	@ (8005438 <checkAktifCalisma+0xe30>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80052da:	4b58      	ldr	r3, [pc, #352]	@ (800543c <checkAktifCalisma+0xe34>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a58      	ldr	r2, [pc, #352]	@ (8005440 <checkAktifCalisma+0xe38>)
 80052e0:	6013      	str	r3, [r2, #0]
					bekle();
 80052e2:	f7fe fff5 	bl	80042d0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80052e6:	4b55      	ldr	r3, [pc, #340]	@ (800543c <checkAktifCalisma+0xe34>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b55      	ldr	r3, [pc, #340]	@ (8005440 <checkAktifCalisma+0xe38>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	4a54      	ldr	r2, [pc, #336]	@ (8005444 <checkAktifCalisma+0xe3c>)
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d20d      	bcs.n	8005314 <checkAktifCalisma+0xd0c>
 80052f8:	2102      	movs	r1, #2
 80052fa:	4845      	ldr	r0, [pc, #276]	@ (8005410 <checkAktifCalisma+0xe08>)
 80052fc:	f005 fb04 	bl	800a908 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <checkAktifCalisma+0xd0c>
 8005306:	4b44      	ldr	r3, [pc, #272]	@ (8005418 <checkAktifCalisma+0xe10>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f083 0301 	eor.w	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8005314:	4b48      	ldr	r3, [pc, #288]	@ (8005438 <checkAktifCalisma+0xe30>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800531a:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <checkAktifCalisma+0xe20>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d135      	bne.n	800538e <checkAktifCalisma+0xd86>
 8005322:	4b3a      	ldr	r3, [pc, #232]	@ (800540c <checkAktifCalisma+0xe04>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d003      	beq.n	8005332 <checkAktifCalisma+0xd2a>
 800532a:	4b38      	ldr	r3, [pc, #224]	@ (800540c <checkAktifCalisma+0xe04>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d12d      	bne.n	800538e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005332:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005336:	4836      	ldr	r0, [pc, #216]	@ (8005410 <checkAktifCalisma+0xe08>)
 8005338:	f005 fae6 	bl	800a908 <HAL_GPIO_ReadPin>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <checkAktifCalisma+0xd42>
 8005342:	4b3a      	ldr	r3, [pc, #232]	@ (800542c <checkAktifCalisma+0xe24>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <checkAktifCalisma+0xd5a>
 800534a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800534e:	4838      	ldr	r0, [pc, #224]	@ (8005430 <checkAktifCalisma+0xe28>)
 8005350:	f005 fada 	bl	800a908 <HAL_GPIO_ReadPin>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d119      	bne.n	800538e <checkAktifCalisma+0xd86>
 800535a:	4b34      	ldr	r3, [pc, #208]	@ (800542c <checkAktifCalisma+0xe24>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d115      	bne.n	800538e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005362:	2102      	movs	r1, #2
 8005364:	482a      	ldr	r0, [pc, #168]	@ (8005410 <checkAktifCalisma+0xe08>)
 8005366:	f005 facf 	bl	800a908 <HAL_GPIO_ReadPin>
 800536a:	4603      	mov	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10e      	bne.n	800538e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005370:	2104      	movs	r1, #4
 8005372:	4827      	ldr	r0, [pc, #156]	@ (8005410 <checkAktifCalisma+0xe08>)
 8005374:	f005 fac8 	bl	800a908 <HAL_GPIO_ReadPin>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 800537e:	4b26      	ldr	r3, [pc, #152]	@ (8005418 <checkAktifCalisma+0xe10>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8005386:	4b30      	ldr	r3, [pc, #192]	@ (8005448 <checkAktifCalisma+0xe40>)
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e002      	b.n	8005394 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800538e:	4b2e      	ldr	r3, [pc, #184]	@ (8005448 <checkAktifCalisma+0xe40>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005394:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <checkAktifCalisma+0xe20>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d11d      	bne.n	80053d8 <checkAktifCalisma+0xdd0>
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <checkAktifCalisma+0xe04>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d003      	beq.n	80053ac <checkAktifCalisma+0xda4>
 80053a4:	4b19      	ldr	r3, [pc, #100]	@ (800540c <checkAktifCalisma+0xe04>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d115      	bne.n	80053d8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80053ac:	2102      	movs	r1, #2
 80053ae:	4818      	ldr	r0, [pc, #96]	@ (8005410 <checkAktifCalisma+0xe08>)
 80053b0:	f005 faaa 	bl	800a908 <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10e      	bne.n	80053d8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80053ba:	2104      	movs	r1, #4
 80053bc:	4814      	ldr	r0, [pc, #80]	@ (8005410 <checkAktifCalisma+0xe08>)
 80053be:	f005 faa3 	bl	800a908 <HAL_GPIO_ReadPin>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <checkAktifCalisma+0xe10>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 80053d0:	4b1e      	ldr	r3, [pc, #120]	@ (800544c <checkAktifCalisma+0xe44>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e002      	b.n	80053de <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80053d8:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <checkAktifCalisma+0xe44>)
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80053de:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <checkAktifCalisma+0xe40>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d107      	bne.n	80053f6 <checkAktifCalisma+0xdee>
 80053e6:	4b19      	ldr	r3, [pc, #100]	@ (800544c <checkAktifCalisma+0xe44>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <checkAktifCalisma+0xdee>
 80053ee:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <checkAktifCalisma+0xe30>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02c      	beq.n	8005450 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80053f6:	2201      	movs	r2, #1
 80053f8:	2140      	movs	r1, #64	@ 0x40
 80053fa:	480a      	ldr	r0, [pc, #40]	@ (8005424 <checkAktifCalisma+0xe1c>)
 80053fc:	f005 fa9b 	bl	800a936 <HAL_GPIO_WritePin>
 8005400:	e02b      	b.n	800545a <checkAktifCalisma+0xe52>
 8005402:	bf00      	nop
 8005404:	20001703 	.word	0x20001703
 8005408:	200016c9 	.word	0x200016c9
 800540c:	200016c8 	.word	0x200016c8
 8005410:	40011000 	.word	0x40011000
 8005414:	200016c6 	.word	0x200016c6
 8005418:	20001701 	.word	0x20001701
 800541c:	20001704 	.word	0x20001704
 8005420:	20001702 	.word	0x20001702
 8005424:	40010800 	.word	0x40010800
 8005428:	200016ca 	.word	0x200016ca
 800542c:	200016cc 	.word	0x200016cc
 8005430:	40010c00 	.word	0x40010c00
 8005434:	200016ef 	.word	0x200016ef
 8005438:	20001705 	.word	0x20001705
 800543c:	20001698 	.word	0x20001698
 8005440:	2000169c 	.word	0x2000169c
 8005444:	200016da 	.word	0x200016da
 8005448:	20001706 	.word	0x20001706
 800544c:	20001707 	.word	0x20001707
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	@ 0x40
 8005454:	4889      	ldr	r0, [pc, #548]	@ (800567c <checkAktifCalisma+0x1074>)
 8005456:	f005 fa6e 	bl	800a936 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800545a:	4b89      	ldr	r3, [pc, #548]	@ (8005680 <checkAktifCalisma+0x1078>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <checkAktifCalisma+0xe62>
 8005462:	4b87      	ldr	r3, [pc, #540]	@ (8005680 <checkAktifCalisma+0x1078>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d115      	bne.n	8005496 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800546a:	2104      	movs	r1, #4
 800546c:	4885      	ldr	r0, [pc, #532]	@ (8005684 <checkAktifCalisma+0x107c>)
 800546e:	f005 fa4b 	bl	800a908 <HAL_GPIO_ReadPin>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d003      	beq.n	8005480 <checkAktifCalisma+0xe78>
 8005478:	4b83      	ldr	r3, [pc, #524]	@ (8005688 <checkAktifCalisma+0x1080>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005480:	2102      	movs	r1, #2
 8005482:	4880      	ldr	r0, [pc, #512]	@ (8005684 <checkAktifCalisma+0x107c>)
 8005484:	f005 fa40 	bl	800a908 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800548e:	4b7f      	ldr	r3, [pc, #508]	@ (800568c <checkAktifCalisma+0x1084>)
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e002      	b.n	800549c <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005496:	4b7d      	ldr	r3, [pc, #500]	@ (800568c <checkAktifCalisma+0x1084>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800549c:	4b78      	ldr	r3, [pc, #480]	@ (8005680 <checkAktifCalisma+0x1078>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d003      	beq.n	80054ac <checkAktifCalisma+0xea4>
 80054a4:	4b76      	ldr	r3, [pc, #472]	@ (8005680 <checkAktifCalisma+0x1078>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d111      	bne.n	80054d0 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80054ac:	2102      	movs	r1, #2
 80054ae:	4875      	ldr	r0, [pc, #468]	@ (8005684 <checkAktifCalisma+0x107c>)
 80054b0:	f005 fa2a 	bl	800a908 <HAL_GPIO_ReadPin>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10a      	bne.n	80054d0 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80054ba:	2104      	movs	r1, #4
 80054bc:	4871      	ldr	r0, [pc, #452]	@ (8005684 <checkAktifCalisma+0x107c>)
 80054be:	f005 fa23 	bl	800a908 <HAL_GPIO_ReadPin>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80054c8:	4b71      	ldr	r3, [pc, #452]	@ (8005690 <checkAktifCalisma+0x1088>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80054d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005690 <checkAktifCalisma+0x1088>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80054d6:	4b6d      	ldr	r3, [pc, #436]	@ (800568c <checkAktifCalisma+0x1084>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00f      	beq.n	80054fe <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 80054de:	4b6d      	ldr	r3, [pc, #436]	@ (8005694 <checkAktifCalisma+0x108c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10b      	bne.n	80054fe <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80054e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054ea:	486b      	ldr	r0, [pc, #428]	@ (8005698 <checkAktifCalisma+0x1090>)
 80054ec:	f005 fa0c 	bl	800a908 <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 80054f6:	4b69      	ldr	r3, [pc, #420]	@ (800569c <checkAktifCalisma+0x1094>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e002      	b.n	8005504 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80054fe:	4b67      	ldr	r3, [pc, #412]	@ (800569c <checkAktifCalisma+0x1094>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005504:	4b62      	ldr	r3, [pc, #392]	@ (8005690 <checkAktifCalisma+0x1088>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00f      	beq.n	800552c <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 800550c:	4b61      	ldr	r3, [pc, #388]	@ (8005694 <checkAktifCalisma+0x108c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10b      	bne.n	800552c <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005518:	485f      	ldr	r0, [pc, #380]	@ (8005698 <checkAktifCalisma+0x1090>)
 800551a:	f005 f9f5 	bl	800a908 <HAL_GPIO_ReadPin>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005524:	4b5e      	ldr	r3, [pc, #376]	@ (80056a0 <checkAktifCalisma+0x1098>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e002      	b.n	8005532 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 800552c:	4b5c      	ldr	r3, [pc, #368]	@ (80056a0 <checkAktifCalisma+0x1098>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005532:	4b5c      	ldr	r3, [pc, #368]	@ (80056a4 <checkAktifCalisma+0x109c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11b      	bne.n	8005572 <checkAktifCalisma+0xf6a>
 800553a:	4b5b      	ldr	r3, [pc, #364]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d003      	beq.n	800554a <checkAktifCalisma+0xf42>
 8005542:	4b59      	ldr	r3, [pc, #356]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d113      	bne.n	8005572 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 800554a:	4b50      	ldr	r3, [pc, #320]	@ (800568c <checkAktifCalisma+0x1084>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <checkAktifCalisma+0xf52>
 8005552:	4b4f      	ldr	r3, [pc, #316]	@ (8005690 <checkAktifCalisma+0x1088>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <checkAktifCalisma+0xf6a>
 800555a:	4b54      	ldr	r3, [pc, #336]	@ (80056ac <checkAktifCalisma+0x10a4>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <checkAktifCalisma+0xf62>
 8005562:	4b53      	ldr	r3, [pc, #332]	@ (80056b0 <checkAktifCalisma+0x10a8>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 800556a:	4b52      	ldr	r3, [pc, #328]	@ (80056b4 <checkAktifCalisma+0x10ac>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e002      	b.n	8005578 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 8005572:	4b50      	ldr	r3, [pc, #320]	@ (80056b4 <checkAktifCalisma+0x10ac>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005578:	4b4a      	ldr	r3, [pc, #296]	@ (80056a4 <checkAktifCalisma+0x109c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d148      	bne.n	8005612 <checkAktifCalisma+0x100a>
 8005580:	4b49      	ldr	r3, [pc, #292]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d003      	beq.n	8005590 <checkAktifCalisma+0xf88>
 8005588:	4b47      	ldr	r3, [pc, #284]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d140      	bne.n	8005612 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005590:	4b3e      	ldr	r3, [pc, #248]	@ (800568c <checkAktifCalisma+0x1084>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <checkAktifCalisma+0xf98>
 8005598:	4b3d      	ldr	r3, [pc, #244]	@ (8005690 <checkAktifCalisma+0x1088>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d038      	beq.n	8005612 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80055a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055a4:	4837      	ldr	r0, [pc, #220]	@ (8005684 <checkAktifCalisma+0x107c>)
 80055a6:	f005 f9af 	bl	800a908 <HAL_GPIO_ReadPin>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01c      	beq.n	80055ea <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80055b0:	2180      	movs	r1, #128	@ 0x80
 80055b2:	4834      	ldr	r0, [pc, #208]	@ (8005684 <checkAktifCalisma+0x107c>)
 80055b4:	f005 f9a8 	bl	800a908 <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80055be:	2104      	movs	r1, #4
 80055c0:	4830      	ldr	r0, [pc, #192]	@ (8005684 <checkAktifCalisma+0x107c>)
 80055c2:	f005 f9a1 	bl	800a908 <HAL_GPIO_ReadPin>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d00e      	beq.n	80055ea <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80055cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055d0:	482c      	ldr	r0, [pc, #176]	@ (8005684 <checkAktifCalisma+0x107c>)
 80055d2:	f005 f999 	bl	800a908 <HAL_GPIO_ReadPin>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80055dc:	2102      	movs	r1, #2
 80055de:	4829      	ldr	r0, [pc, #164]	@ (8005684 <checkAktifCalisma+0x107c>)
 80055e0:	f005 f992 	bl	800a908 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d103      	bne.n	80055f2 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80055ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005694 <checkAktifCalisma+0x108c>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <checkAktifCalisma+0xffa>
 80055f2:	4b2a      	ldr	r3, [pc, #168]	@ (800569c <checkAktifCalisma+0x1094>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <checkAktifCalisma+0xffa>
 80055fa:	4b29      	ldr	r3, [pc, #164]	@ (80056a0 <checkAktifCalisma+0x1098>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005602:	4b2d      	ldr	r3, [pc, #180]	@ (80056b8 <checkAktifCalisma+0x10b0>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800560a:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <checkAktifCalisma+0x10b4>)
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e002      	b.n	8005618 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005612:	4b2a      	ldr	r3, [pc, #168]	@ (80056bc <checkAktifCalisma+0x10b4>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005618:	4b22      	ldr	r3, [pc, #136]	@ (80056a4 <checkAktifCalisma+0x109c>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d117      	bne.n	8005650 <checkAktifCalisma+0x1048>
 8005620:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d003      	beq.n	8005630 <checkAktifCalisma+0x1028>
 8005628:	4b1f      	ldr	r3, [pc, #124]	@ (80056a8 <checkAktifCalisma+0x10a0>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d10f      	bne.n	8005650 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005630:	4b16      	ldr	r3, [pc, #88]	@ (800568c <checkAktifCalisma+0x1084>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <checkAktifCalisma+0x1038>
 8005638:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <checkAktifCalisma+0x1088>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <checkAktifCalisma+0x10b0>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8005648:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <checkAktifCalisma+0x10b8>)
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e002      	b.n	8005656 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005650:	4b1b      	ldr	r3, [pc, #108]	@ (80056c0 <checkAktifCalisma+0x10b8>)
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005656:	4b19      	ldr	r3, [pc, #100]	@ (80056bc <checkAktifCalisma+0x10b4>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <checkAktifCalisma+0x1066>
 800565e:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <checkAktifCalisma+0x10ac>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <checkAktifCalisma+0x1066>
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <checkAktifCalisma+0x10b8>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02a      	beq.n	80056c4 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800566e:	2201      	movs	r2, #1
 8005670:	2120      	movs	r1, #32
 8005672:	4802      	ldr	r0, [pc, #8]	@ (800567c <checkAktifCalisma+0x1074>)
 8005674:	f005 f95f 	bl	800a936 <HAL_GPIO_WritePin>
 8005678:	e029      	b.n	80056ce <checkAktifCalisma+0x10c6>
 800567a:	bf00      	nop
 800567c:	40010800 	.word	0x40010800
 8005680:	200016cd 	.word	0x200016cd
 8005684:	40011000 	.word	0x40011000
 8005688:	200016c6 	.word	0x200016c6
 800568c:	2000170b 	.word	0x2000170b
 8005690:	2000170c 	.word	0x2000170c
 8005694:	200016cc 	.word	0x200016cc
 8005698:	40010c00 	.word	0x40010c00
 800569c:	2000171b 	.word	0x2000171b
 80056a0:	2000171c 	.word	0x2000171c
 80056a4:	200016cb 	.word	0x200016cb
 80056a8:	200016c8 	.word	0x200016c8
 80056ac:	20001702 	.word	0x20001702
 80056b0:	20001705 	.word	0x20001705
 80056b4:	20001708 	.word	0x20001708
 80056b8:	20001701 	.word	0x20001701
 80056bc:	20001709 	.word	0x20001709
 80056c0:	2000170a 	.word	0x2000170a
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2120      	movs	r1, #32
 80056c8:	4887      	ldr	r0, [pc, #540]	@ (80058e8 <checkAktifCalisma+0x12e0>)
 80056ca:	f005 f934 	bl	800a936 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80056ce:	4b87      	ldr	r3, [pc, #540]	@ (80058ec <checkAktifCalisma+0x12e4>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <checkAktifCalisma+0x10ec>
 80056d6:	2102      	movs	r1, #2
 80056d8:	4885      	ldr	r0, [pc, #532]	@ (80058f0 <checkAktifCalisma+0x12e8>)
 80056da:	f005 f915 	bl	800a908 <HAL_GPIO_ReadPin>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d107      	bne.n	80056f4 <checkAktifCalisma+0x10ec>
 80056e4:	4b83      	ldr	r3, [pc, #524]	@ (80058f4 <checkAktifCalisma+0x12ec>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <checkAktifCalisma+0x10ec>
 80056ec:	4b82      	ldr	r3, [pc, #520]	@ (80058f8 <checkAktifCalisma+0x12f0>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d112      	bne.n	800571a <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80056f4:	4b81      	ldr	r3, [pc, #516]	@ (80058fc <checkAktifCalisma+0x12f4>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d032      	beq.n	8005762 <checkAktifCalisma+0x115a>
 80056fc:	2104      	movs	r1, #4
 80056fe:	487c      	ldr	r0, [pc, #496]	@ (80058f0 <checkAktifCalisma+0x12e8>)
 8005700:	f005 f902 	bl	800a908 <HAL_GPIO_ReadPin>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d12b      	bne.n	8005762 <checkAktifCalisma+0x115a>
 800570a:	4b7a      	ldr	r3, [pc, #488]	@ (80058f4 <checkAktifCalisma+0x12ec>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d027      	beq.n	8005762 <checkAktifCalisma+0x115a>
 8005712:	4b79      	ldr	r3, [pc, #484]	@ (80058f8 <checkAktifCalisma+0x12f0>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d023      	beq.n	8005762 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800571a:	4b79      	ldr	r3, [pc, #484]	@ (8005900 <checkAktifCalisma+0x12f8>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4b77      	ldr	r3, [pc, #476]	@ (8005900 <checkAktifCalisma+0x12f8>)
 8005724:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005726:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <checkAktifCalisma+0x12f8>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2bff      	cmp	r3, #255	@ 0xff
 800572c:	d108      	bne.n	8005740 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 800572e:	4b74      	ldr	r3, [pc, #464]	@ (8005900 <checkAktifCalisma+0x12f8>)
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005734:	4b73      	ldr	r3, [pc, #460]	@ (8005904 <checkAktifCalisma+0x12fc>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b71      	ldr	r3, [pc, #452]	@ (8005904 <checkAktifCalisma+0x12fc>)
 800573e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005740:	4b6f      	ldr	r3, [pc, #444]	@ (8005900 <checkAktifCalisma+0x12f8>)
 8005742:	781a      	ldrb	r2, [r3, #0]
 8005744:	4b70      	ldr	r3, [pc, #448]	@ (8005908 <checkAktifCalisma+0x1300>)
 8005746:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005748:	4b6e      	ldr	r3, [pc, #440]	@ (8005904 <checkAktifCalisma+0x12fc>)
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	4b6e      	ldr	r3, [pc, #440]	@ (8005908 <checkAktifCalisma+0x1300>)
 800574e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005750:	4b6e      	ldr	r3, [pc, #440]	@ (800590c <checkAktifCalisma+0x1304>)
 8005752:	2201      	movs	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005756:	4b65      	ldr	r3, [pc, #404]	@ (80058ec <checkAktifCalisma+0x12e4>)
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800575c:	4b67      	ldr	r3, [pc, #412]	@ (80058fc <checkAktifCalisma+0x12f4>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005766:	486a      	ldr	r0, [pc, #424]	@ (8005910 <checkAktifCalisma+0x1308>)
 8005768:	f005 f8ce 	bl	800a908 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005776:	4866      	ldr	r0, [pc, #408]	@ (8005910 <checkAktifCalisma+0x1308>)
 8005778:	f005 f8c6 	bl	800a908 <HAL_GPIO_ReadPin>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005782:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005786:	4862      	ldr	r0, [pc, #392]	@ (8005910 <checkAktifCalisma+0x1308>)
 8005788:	f005 f8be 	bl	800a908 <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005792:	2140      	movs	r1, #64	@ 0x40
 8005794:	4856      	ldr	r0, [pc, #344]	@ (80058f0 <checkAktifCalisma+0x12e8>)
 8005796:	f005 f8b7 	bl	800a908 <HAL_GPIO_ReadPin>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <checkAktifCalisma+0x11a0>

					startBasili=1;
 80057a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005914 <checkAktifCalisma+0x130c>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e002      	b.n	80057ae <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80057a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005914 <checkAktifCalisma+0x130c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80057ae:	4b59      	ldr	r3, [pc, #356]	@ (8005914 <checkAktifCalisma+0x130c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d014      	beq.n	80057e0 <checkAktifCalisma+0x11d8>
 80057b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057ba:	4855      	ldr	r0, [pc, #340]	@ (8005910 <checkAktifCalisma+0x1308>)
 80057bc:	f005 f8a4 	bl	800a908 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10c      	bne.n	80057e0 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80057c6:	4b54      	ldr	r3, [pc, #336]	@ (8005918 <checkAktifCalisma+0x1310>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80057cc:	2001      	movs	r0, #1
 80057ce:	f7fb fd13 	bl	80011f8 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80057d2:	2001      	movs	r0, #1
 80057d4:	f7fb fcb8 	bl	8001148 <hata2EEPROM>
					acilstophatasi=1;
 80057d8:	4b50      	ldr	r3, [pc, #320]	@ (800591c <checkAktifCalisma+0x1314>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e018      	b.n	8005812 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80057e0:	4b4e      	ldr	r3, [pc, #312]	@ (800591c <checkAktifCalisma+0x1314>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d014      	beq.n	8005812 <checkAktifCalisma+0x120a>
 80057e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057ec:	4848      	ldr	r0, [pc, #288]	@ (8005910 <checkAktifCalisma+0x1308>)
 80057ee:	f005 f88b 	bl	800a908 <HAL_GPIO_ReadPin>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10c      	bne.n	8005812 <checkAktifCalisma+0x120a>
 80057f8:	4b46      	ldr	r3, [pc, #280]	@ (8005914 <checkAktifCalisma+0x130c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f083 0301 	eor.w	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 8005806:	4b45      	ldr	r3, [pc, #276]	@ (800591c <checkAktifCalisma+0x1314>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800580c:	2001      	movs	r0, #1
 800580e:	f7fe fcf1 	bl	80041f4 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005812:	4b43      	ldr	r3, [pc, #268]	@ (8005920 <checkAktifCalisma+0x1318>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <checkAktifCalisma+0x1260>
 8005820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005824:	483a      	ldr	r0, [pc, #232]	@ (8005910 <checkAktifCalisma+0x1308>)
 8005826:	f005 f86f 	bl	800a908 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <checkAktifCalisma+0x1230>
 8005830:	4b3c      	ldr	r3, [pc, #240]	@ (8005924 <checkAktifCalisma+0x131c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <checkAktifCalisma+0x1260>
 8005838:	4b3b      	ldr	r3, [pc, #236]	@ (8005928 <checkAktifCalisma+0x1320>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d113      	bne.n	8005868 <checkAktifCalisma+0x1260>
 8005840:	4b3a      	ldr	r3, [pc, #232]	@ (800592c <checkAktifCalisma+0x1324>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f083 0301 	eor.w	r3, r3, #1
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <checkAktifCalisma+0x1260>
					hataVar=1;
 800584e:	4b32      	ldr	r3, [pc, #200]	@ (8005918 <checkAktifCalisma+0x1310>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005854:	2002      	movs	r0, #2
 8005856:	f7fb fccf 	bl	80011f8 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800585a:	2002      	movs	r0, #2
 800585c:	f7fb fc74 	bl	8001148 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005860:	4b32      	ldr	r3, [pc, #200]	@ (800592c <checkAktifCalisma+0x1324>)
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e017      	b.n	8005898 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005868:	4b30      	ldr	r3, [pc, #192]	@ (800592c <checkAktifCalisma+0x1324>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <checkAktifCalisma+0x1290>
 8005870:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <checkAktifCalisma+0x1318>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00f      	beq.n	8005898 <checkAktifCalisma+0x1290>
 8005878:	4b2d      	ldr	r3, [pc, #180]	@ (8005930 <checkAktifCalisma+0x1328>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f083 0301 	eor.w	r3, r3, #1
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005886:	4b29      	ldr	r3, [pc, #164]	@ (800592c <checkAktifCalisma+0x1324>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800588c:	4b25      	ldr	r3, [pc, #148]	@ (8005924 <checkAktifCalisma+0x131c>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005892:	2002      	movs	r0, #2
 8005894:	f7fe fcae 	bl	80041f4 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005898:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <checkAktifCalisma+0x132c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d151      	bne.n	8005944 <checkAktifCalisma+0x133c>
 80058a0:	4b25      	ldr	r3, [pc, #148]	@ (8005938 <checkAktifCalisma+0x1330>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d14d      	bne.n	8005944 <checkAktifCalisma+0x133c>
 80058a8:	4b24      	ldr	r3, [pc, #144]	@ (800593c <checkAktifCalisma+0x1334>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d049      	beq.n	8005944 <checkAktifCalisma+0x133c>
 80058b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058b4:	480e      	ldr	r0, [pc, #56]	@ (80058f0 <checkAktifCalisma+0x12e8>)
 80058b6:	f005 f827 	bl	800a908 <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d141      	bne.n	8005944 <checkAktifCalisma+0x133c>
 80058c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005940 <checkAktifCalisma+0x1338>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f083 0301 	eor.w	r3, r3, #1
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03a      	beq.n	8005944 <checkAktifCalisma+0x133c>
					hataVar=1;
 80058ce:	4b12      	ldr	r3, [pc, #72]	@ (8005918 <checkAktifCalisma+0x1310>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80058d4:	2003      	movs	r0, #3
 80058d6:	f7fb fc8f 	bl	80011f8 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80058da:	2003      	movs	r0, #3
 80058dc:	f7fb fc34 	bl	8001148 <hata2EEPROM>
					basinchatasi=1;
 80058e0:	4b17      	ldr	r3, [pc, #92]	@ (8005940 <checkAktifCalisma+0x1338>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e043      	b.n	8005970 <checkAktifCalisma+0x1368>
 80058e8:	40010800 	.word	0x40010800
 80058ec:	200016ff 	.word	0x200016ff
 80058f0:	40011000 	.word	0x40011000
 80058f4:	200016c6 	.word	0x200016c6
 80058f8:	20001701 	.word	0x20001701
 80058fc:	20001700 	.word	0x20001700
 8005900:	200016b8 	.word	0x200016b8
 8005904:	200016ba 	.word	0x200016ba
 8005908:	200011f0 	.word	0x200011f0
 800590c:	200016ec 	.word	0x200016ec
 8005910:	40010c00 	.word	0x40010c00
 8005914:	2000170d 	.word	0x2000170d
 8005918:	20001714 	.word	0x20001714
 800591c:	2000170f 	.word	0x2000170f
 8005920:	20001716 	.word	0x20001716
 8005924:	20001720 	.word	0x20001720
 8005928:	200016c4 	.word	0x200016c4
 800592c:	20001710 	.word	0x20001710
 8005930:	200016f8 	.word	0x200016f8
 8005934:	200016c3 	.word	0x200016c3
 8005938:	200016c7 	.word	0x200016c7
 800593c:	20001713 	.word	0x20001713
 8005940:	2000171d 	.word	0x2000171d
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005944:	4b85      	ldr	r3, [pc, #532]	@ (8005b5c <checkAktifCalisma+0x1554>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <checkAktifCalisma+0x1368>
 800594c:	4b84      	ldr	r3, [pc, #528]	@ (8005b60 <checkAktifCalisma+0x1558>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10d      	bne.n	8005970 <checkAktifCalisma+0x1368>
 8005954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005958:	4882      	ldr	r0, [pc, #520]	@ (8005b64 <checkAktifCalisma+0x155c>)
 800595a:	f004 ffd5 	bl	800a908 <HAL_GPIO_ReadPin>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d105      	bne.n	8005970 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005964:	4b7d      	ldr	r3, [pc, #500]	@ (8005b5c <checkAktifCalisma+0x1554>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800596a:	2003      	movs	r0, #3
 800596c:	f7fe fc42 	bl	80041f4 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005970:	4b7d      	ldr	r3, [pc, #500]	@ (8005b68 <checkAktifCalisma+0x1560>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <checkAktifCalisma+0x1378>
 8005978:	4b7c      	ldr	r3, [pc, #496]	@ (8005b6c <checkAktifCalisma+0x1564>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d023      	beq.n	80059c8 <checkAktifCalisma+0x13c0>
 8005980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005984:	487a      	ldr	r0, [pc, #488]	@ (8005b70 <checkAktifCalisma+0x1568>)
 8005986:	f004 ffbf 	bl	800a908 <HAL_GPIO_ReadPin>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d11b      	bne.n	80059c8 <checkAktifCalisma+0x13c0>
 8005990:	4b78      	ldr	r3, [pc, #480]	@ (8005b74 <checkAktifCalisma+0x156c>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d003      	beq.n	80059a0 <checkAktifCalisma+0x1398>
 8005998:	4b76      	ldr	r3, [pc, #472]	@ (8005b74 <checkAktifCalisma+0x156c>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d113      	bne.n	80059c8 <checkAktifCalisma+0x13c0>
 80059a0:	4b75      	ldr	r3, [pc, #468]	@ (8005b78 <checkAktifCalisma+0x1570>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f083 0301 	eor.w	r3, r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <checkAktifCalisma+0x13c0>
					hataVar=1;
 80059ae:	4b73      	ldr	r3, [pc, #460]	@ (8005b7c <checkAktifCalisma+0x1574>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80059b4:	2004      	movs	r0, #4
 80059b6:	f7fb fc1f 	bl	80011f8 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80059ba:	2004      	movs	r0, #4
 80059bc:	f7fb fbc4 	bl	8001148 <hata2EEPROM>
					katkapisivicihatasi=1;
 80059c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005b78 <checkAktifCalisma+0x1570>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e01f      	b.n	8005a08 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80059c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005b78 <checkAktifCalisma+0x1570>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01b      	beq.n	8005a08 <checkAktifCalisma+0x1400>
 80059d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005b80 <checkAktifCalisma+0x1578>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <checkAktifCalisma+0x1400>
 80059d8:	4b63      	ldr	r3, [pc, #396]	@ (8005b68 <checkAktifCalisma+0x1560>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f083 0301 	eor.w	r3, r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <checkAktifCalisma+0x1400>
 80059e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059ea:	4861      	ldr	r0, [pc, #388]	@ (8005b70 <checkAktifCalisma+0x1568>)
 80059ec:	f004 ff8c 	bl	800a908 <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d108      	bne.n	8005a08 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 80059f6:	4b60      	ldr	r3, [pc, #384]	@ (8005b78 <checkAktifCalisma+0x1570>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80059fc:	4b5b      	ldr	r3, [pc, #364]	@ (8005b6c <checkAktifCalisma+0x1564>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005a02:	2004      	movs	r0, #4
 8005a04:	f7fe fbf6 	bl	80041f4 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005a08:	4b57      	ldr	r3, [pc, #348]	@ (8005b68 <checkAktifCalisma+0x1560>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <checkAktifCalisma+0x1410>
 8005a10:	4b5c      	ldr	r3, [pc, #368]	@ (8005b84 <checkAktifCalisma+0x157c>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d023      	beq.n	8005a60 <checkAktifCalisma+0x1458>
 8005a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a1c:	4854      	ldr	r0, [pc, #336]	@ (8005b70 <checkAktifCalisma+0x1568>)
 8005a1e:	f004 ff73 	bl	800a908 <HAL_GPIO_ReadPin>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d11b      	bne.n	8005a60 <checkAktifCalisma+0x1458>
 8005a28:	4b52      	ldr	r3, [pc, #328]	@ (8005b74 <checkAktifCalisma+0x156c>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <checkAktifCalisma+0x1430>
 8005a30:	4b50      	ldr	r3, [pc, #320]	@ (8005b74 <checkAktifCalisma+0x156c>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d113      	bne.n	8005a60 <checkAktifCalisma+0x1458>
 8005a38:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <checkAktifCalisma+0x1580>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f083 0301 	eor.w	r3, r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <checkAktifCalisma+0x1458>

					hataVar=1;
 8005a46:	4b4d      	ldr	r3, [pc, #308]	@ (8005b7c <checkAktifCalisma+0x1574>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005a4c:	2005      	movs	r0, #5
 8005a4e:	f7fb fbd3 	bl	80011f8 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005a52:	2005      	movs	r0, #5
 8005a54:	f7fb fb78 	bl	8001148 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005a58:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <checkAktifCalisma+0x1580>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e023      	b.n	8005aa8 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005a60:	4b49      	ldr	r3, [pc, #292]	@ (8005b88 <checkAktifCalisma+0x1580>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01f      	beq.n	8005aa8 <checkAktifCalisma+0x14a0>
 8005a68:	4b45      	ldr	r3, [pc, #276]	@ (8005b80 <checkAktifCalisma+0x1578>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <checkAktifCalisma+0x14a0>
 8005a70:	4b3d      	ldr	r3, [pc, #244]	@ (8005b68 <checkAktifCalisma+0x1560>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f083 0301 	eor.w	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d014      	beq.n	8005aa8 <checkAktifCalisma+0x14a0>
 8005a7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a82:	483b      	ldr	r0, [pc, #236]	@ (8005b70 <checkAktifCalisma+0x1568>)
 8005a84:	f004 ff40 	bl	800a908 <HAL_GPIO_ReadPin>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <checkAktifCalisma+0x14a0>
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b80 <checkAktifCalisma+0x1578>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 8005a96:	4b3c      	ldr	r3, [pc, #240]	@ (8005b88 <checkAktifCalisma+0x1580>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005a9c:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <checkAktifCalisma+0x157c>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005aa2:	2005      	movs	r0, #5
 8005aa4:	f7fe fba6 	bl	80041f4 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005aa8:	4b38      	ldr	r3, [pc, #224]	@ (8005b8c <checkAktifCalisma+0x1584>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <checkAktifCalisma+0x14b8>
 8005ab0:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <checkAktifCalisma+0x1588>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <checkAktifCalisma+0x14b8>
 8005ab8:	4b36      	ldr	r3, [pc, #216]	@ (8005b94 <checkAktifCalisma+0x158c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <checkAktifCalisma+0x14f0>
 8005ac0:	4b35      	ldr	r3, [pc, #212]	@ (8005b98 <checkAktifCalisma+0x1590>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f083 0301 	eor.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d014      	beq.n	8005af8 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005ace:	4b33      	ldr	r3, [pc, #204]	@ (8005b9c <checkAktifCalisma+0x1594>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <checkAktifCalisma+0x1598>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	4a32      	ldr	r2, [pc, #200]	@ (8005ba4 <checkAktifCalisma+0x159c>)
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d30b      	bcc.n	8005af8 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005ae0:	4b26      	ldr	r3, [pc, #152]	@ (8005b7c <checkAktifCalisma+0x1574>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005ae6:	2006      	movs	r0, #6
 8005ae8:	f7fb fb86 	bl	80011f8 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005aec:	2006      	movs	r0, #6
 8005aee:	f7fb fb2b 	bl	8001148 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005af2:	4b29      	ldr	r3, [pc, #164]	@ (8005b98 <checkAktifCalisma+0x1590>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005af8:	4b27      	ldr	r3, [pc, #156]	@ (8005b98 <checkAktifCalisma+0x1590>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <checkAktifCalisma+0x1520>
 8005b00:	2108      	movs	r1, #8
 8005b02:	481b      	ldr	r0, [pc, #108]	@ (8005b70 <checkAktifCalisma+0x1568>)
 8005b04:	f004 ff00 	bl	800a908 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <checkAktifCalisma+0x1520>
 8005b0e:	4b16      	ldr	r3, [pc, #88]	@ (8005b68 <checkAktifCalisma+0x1560>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b98 <checkAktifCalisma+0x1590>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005b22:	2006      	movs	r0, #6
 8005b24:	f7fe fb66 	bl	80041f4 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005b28:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <checkAktifCalisma+0x15a0>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <checkAktifCalisma+0x1540>
 8005b30:	4b17      	ldr	r3, [pc, #92]	@ (8005b90 <checkAktifCalisma+0x1588>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <checkAktifCalisma+0x1540>
 8005b38:	4b1c      	ldr	r3, [pc, #112]	@ (8005bac <checkAktifCalisma+0x15a4>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <checkAktifCalisma+0x1540>
 8005b40:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <checkAktifCalisma+0x158c>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d035      	beq.n	8005bb4 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005b48:	4b19      	ldr	r3, [pc, #100]	@ (8005bb0 <checkAktifCalisma+0x15a8>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005b4e:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <checkAktifCalisma+0x1564>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005b54:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <checkAktifCalisma+0x157c>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e032      	b.n	8005bc2 <checkAktifCalisma+0x15ba>
 8005b5c:	2000171d 	.word	0x2000171d
 8005b60:	200016c3 	.word	0x200016c3
 8005b64:	40010c00 	.word	0x40010c00
 8005b68:	2000170d 	.word	0x2000170d
 8005b6c:	20001721 	.word	0x20001721
 8005b70:	40010800 	.word	0x40010800
 8005b74:	200016c8 	.word	0x200016c8
 8005b78:	2000171e 	.word	0x2000171e
 8005b7c:	20001714 	.word	0x20001714
 8005b80:	20001701 	.word	0x20001701
 8005b84:	20001722 	.word	0x20001722
 8005b88:	2000171f 	.word	0x2000171f
 8005b8c:	20001713 	.word	0x20001713
 8005b90:	200016f8 	.word	0x200016f8
 8005b94:	200016f7 	.word	0x200016f7
 8005b98:	2000170e 	.word	0x2000170e
 8005b9c:	20001698 	.word	0x20001698
 8005ba0:	200016ac 	.word	0x200016ac
 8005ba4:	200016d8 	.word	0x200016d8
 8005ba8:	200016f5 	.word	0x200016f5
 8005bac:	200016f6 	.word	0x200016f6
 8005bb0:	20001715 	.word	0x20001715
				} else {
					makineCalisiyor=1;
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca0 <checkAktifCalisma+0x1698>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005bba:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca4 <checkAktifCalisma+0x169c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca8 <checkAktifCalisma+0x16a0>)
 8005bc0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8005cac <checkAktifCalisma+0x16a4>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02f      	beq.n	8005c2a <checkAktifCalisma+0x1622>
 8005bca:	4b39      	ldr	r3, [pc, #228]	@ (8005cb0 <checkAktifCalisma+0x16a8>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d028      	beq.n	8005c2a <checkAktifCalisma+0x1622>
 8005bd8:	4b36      	ldr	r3, [pc, #216]	@ (8005cb4 <checkAktifCalisma+0x16ac>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f083 0301 	eor.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d021      	beq.n	8005c2a <checkAktifCalisma+0x1622>
 8005be6:	4b34      	ldr	r3, [pc, #208]	@ (8005cb8 <checkAktifCalisma+0x16b0>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01a      	beq.n	8005c2a <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005bf4:	4b31      	ldr	r3, [pc, #196]	@ (8005cbc <checkAktifCalisma+0x16b4>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <checkAktifCalisma+0x1622>
 8005c02:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc0 <checkAktifCalisma+0x16b8>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f083 0301 	eor.w	r3, r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00c      	beq.n	8005c2a <checkAktifCalisma+0x1622>
 8005c10:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc4 <checkAktifCalisma+0x16bc>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <checkAktifCalisma+0x1622>

					hataVar=0;
 8005c1e:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <checkAktifCalisma+0x16a4>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005c24:	2007      	movs	r0, #7
 8005c26:	f7fe fae5 	bl	80041f4 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005c2a:	4b20      	ldr	r3, [pc, #128]	@ (8005cac <checkAktifCalisma+0x16a4>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02a      	beq.n	8005c88 <checkAktifCalisma+0x1680>
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <checkAktifCalisma+0x16a8>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f083 0301 	eor.w	r3, r3, #1
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d023      	beq.n	8005c88 <checkAktifCalisma+0x1680>
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <checkAktifCalisma+0x16ac>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01f      	beq.n	8005c88 <checkAktifCalisma+0x1680>
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <checkAktifCalisma+0x16b0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005c56:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <checkAktifCalisma+0x16b4>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f083 0301 	eor.w	r3, r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d011      	beq.n	8005c88 <checkAktifCalisma+0x1680>
 8005c64:	4b16      	ldr	r3, [pc, #88]	@ (8005cc0 <checkAktifCalisma+0x16b8>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f083 0301 	eor.w	r3, r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <checkAktifCalisma+0x1680>
 8005c72:	4b14      	ldr	r3, [pc, #80]	@ (8005cc4 <checkAktifCalisma+0x16bc>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005c80:	4b11      	ldr	r3, [pc, #68]	@ (8005cc8 <checkAktifCalisma+0x16c0>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005c86:	e009      	b.n	8005c9c <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <checkAktifCalisma+0x16ac>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f083 0301 	eor.w	r3, r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <checkAktifCalisma+0x16c0>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20001715 	.word	0x20001715
 8005ca4:	20001698 	.word	0x20001698
 8005ca8:	200016ac 	.word	0x200016ac
 8005cac:	20001714 	.word	0x20001714
 8005cb0:	2000170f 	.word	0x2000170f
 8005cb4:	20001710 	.word	0x20001710
 8005cb8:	2000171d 	.word	0x2000171d
 8005cbc:	2000171e 	.word	0x2000171e
 8005cc0:	2000171f 	.word	0x2000171f
 8005cc4:	2000170e 	.word	0x2000170e
 8005cc8:	20001723 	.word	0x20001723

08005ccc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005cd0:	4b8b      	ldr	r3, [pc, #556]	@ (8005f00 <checkDemoModCalisma+0x234>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 81c4 	bne.w	8006062 <checkDemoModCalisma+0x396>
 8005cda:	4b8a      	ldr	r3, [pc, #552]	@ (8005f04 <checkDemoModCalisma+0x238>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 81bf 	beq.w	8006062 <checkDemoModCalisma+0x396>
 8005ce4:	4b88      	ldr	r3, [pc, #544]	@ (8005f08 <checkDemoModCalisma+0x23c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f040 81ba 	bne.w	8006062 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005cee:	2102      	movs	r1, #2
 8005cf0:	4886      	ldr	r0, [pc, #536]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005cf2:	f004 fe09 	bl	800a908 <HAL_GPIO_ReadPin>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d11d      	bne.n	8005d38 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005cfc:	4b84      	ldr	r3, [pc, #528]	@ (8005f10 <checkDemoModCalisma+0x244>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f083 0301 	eor.w	r3, r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d016      	beq.n	8005d38 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005d0a:	4b82      	ldr	r3, [pc, #520]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f083 0301 	eor.w	r3, r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00f      	beq.n	8005d38 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005d18:	4b7f      	ldr	r3, [pc, #508]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f083 0301 	eor.w	r3, r3, #1
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005d26:	2201      	movs	r2, #1
 8005d28:	2104      	movs	r1, #4
 8005d2a:	487c      	ldr	r0, [pc, #496]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005d2c:	f004 fe03 	bl	800a936 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005d30:	4b7b      	ldr	r3, [pc, #492]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e00e      	b.n	8005d56 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005d38:	2102      	movs	r1, #2
 8005d3a:	4874      	ldr	r0, [pc, #464]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005d3c:	f004 fde4 	bl	800a908 <HAL_GPIO_ReadPin>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d107      	bne.n	8005d56 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005d46:	2200      	movs	r2, #0
 8005d48:	2104      	movs	r1, #4
 8005d4a:	4874      	ldr	r0, [pc, #464]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005d4c:	f004 fdf3 	bl	800a936 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005d50:	4b73      	ldr	r3, [pc, #460]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005d56:	4b72      	ldr	r3, [pc, #456]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <checkDemoModCalisma+0xaa>
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <checkDemoModCalisma+0xaa>
 8005d66:	4b6c      	ldr	r3, [pc, #432]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <checkDemoModCalisma+0xaa>
 8005d6e:	4b68      	ldr	r3, [pc, #416]	@ (8005f10 <checkDemoModCalisma+0x244>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005d76:	2201      	movs	r2, #1
 8005d78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d7c:	4867      	ldr	r0, [pc, #412]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005d7e:	f004 fdda 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005d82:	2201      	movs	r2, #1
 8005d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d88:	4864      	ldr	r0, [pc, #400]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005d8a:	f004 fdd4 	bl	800a936 <HAL_GPIO_WritePin>
 8005d8e:	e00b      	b.n	8005da8 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005d90:	2200      	movs	r2, #0
 8005d92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d96:	4861      	ldr	r0, [pc, #388]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005d98:	f004 fdcd 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005da2:	485e      	ldr	r0, [pc, #376]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005da4:	f004 fdc7 	bl	800a936 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005da8:	2102      	movs	r1, #2
 8005daa:	4858      	ldr	r0, [pc, #352]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005dac:	f004 fdac 	bl	800a908 <HAL_GPIO_ReadPin>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10d      	bne.n	8005dd2 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dba:	4854      	ldr	r0, [pc, #336]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005dbc:	f004 fda4 	bl	800a908 <HAL_GPIO_ReadPin>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005dc6:	4b56      	ldr	r3, [pc, #344]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	484d      	ldr	r0, [pc, #308]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005dd6:	f004 fd97 	bl	800a908 <HAL_GPIO_ReadPin>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d125      	bne.n	8005e2c <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005de4:	4849      	ldr	r0, [pc, #292]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005de6:	f004 fd8f 	bl	800a908 <HAL_GPIO_ReadPin>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11d      	bne.n	8005e2c <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005df0:	4b4b      	ldr	r3, [pc, #300]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	f083 0301 	eor.w	r3, r3, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005dfe:	4b44      	ldr	r3, [pc, #272]	@ (8005f10 <checkDemoModCalisma+0x244>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f083 0301 	eor.w	r3, r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00f      	beq.n	8005e2c <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005e0c:	4b42      	ldr	r3, [pc, #264]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f083 0301 	eor.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	483b      	ldr	r0, [pc, #236]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e20:	f004 fd89 	bl	800a936 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005e24:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e007      	b.n	8005e3c <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2120      	movs	r1, #32
 8005e30:	4836      	ldr	r0, [pc, #216]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e32:	f004 fd80 	bl	800a936 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005e36:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	4833      	ldr	r0, [pc, #204]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e40:	f004 fd62 	bl	800a908 <HAL_GPIO_ReadPin>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d125      	bne.n	8005e96 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005e4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e4e:	482f      	ldr	r0, [pc, #188]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e50:	f004 fd5a 	bl	800a908 <HAL_GPIO_ReadPin>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11d      	bne.n	8005e96 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005e5a:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f083 0301 	eor.w	r3, r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005e68:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f083 0301 	eor.w	r3, r3, #1
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005e76:	4b26      	ldr	r3, [pc, #152]	@ (8005f10 <checkDemoModCalisma+0x244>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f083 0301 	eor.w	r3, r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005e84:	2201      	movs	r2, #1
 8005e86:	2110      	movs	r1, #16
 8005e88:	4820      	ldr	r0, [pc, #128]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e8a:	f004 fd54 	bl	800a936 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005e8e:	4b22      	ldr	r3, [pc, #136]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e007      	b.n	8005ea6 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e96:	2200      	movs	r2, #0
 8005e98:	2110      	movs	r1, #16
 8005e9a:	481c      	ldr	r0, [pc, #112]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005e9c:	f004 fd4b 	bl	800a936 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ea6:	2104      	movs	r1, #4
 8005ea8:	4818      	ldr	r0, [pc, #96]	@ (8005f0c <checkDemoModCalisma+0x240>)
 8005eaa:	f004 fd2d 	bl	800a908 <HAL_GPIO_ReadPin>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d139      	bne.n	8005f28 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f20 <checkDemoModCalisma+0x254>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f083 0301 	eor.w	r3, r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d032      	beq.n	8005f28 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005ec2:	4b15      	ldr	r3, [pc, #84]	@ (8005f18 <checkDemoModCalisma+0x24c>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f083 0301 	eor.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02b      	beq.n	8005f28 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <checkDemoModCalisma+0x248>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d024      	beq.n	8005f28 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005ede:	2201      	movs	r2, #1
 8005ee0:	2102      	movs	r1, #2
 8005ee2:	480e      	ldr	r0, [pc, #56]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005ee4:	f004 fd27 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2101      	movs	r1, #1
 8005eec:	480b      	ldr	r0, [pc, #44]	@ (8005f1c <checkDemoModCalisma+0x250>)
 8005eee:	f004 fd22 	bl	800a936 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005ef2:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <checkDemoModCalisma+0x244>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <checkDemoModCalisma+0x258>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e027      	b.n	8005f50 <checkDemoModCalisma+0x284>
 8005f00:	200016de 	.word	0x200016de
 8005f04:	20001711 	.word	0x20001711
 8005f08:	200016dd 	.word	0x200016dd
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	20001718 	.word	0x20001718
 8005f14:	20001719 	.word	0x20001719
 8005f18:	2000171a 	.word	0x2000171a
 8005f1c:	40010c00 	.word	0x40010c00
 8005f20:	20001717 	.word	0x20001717
 8005f24:	200016fe 	.word	0x200016fe
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005f28:	2104      	movs	r1, #4
 8005f2a:	486d      	ldr	r0, [pc, #436]	@ (80060e0 <checkDemoModCalisma+0x414>)
 8005f2c:	f004 fcec 	bl	800a908 <HAL_GPIO_ReadPin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10c      	bne.n	8005f50 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2102      	movs	r1, #2
 8005f3a:	486a      	ldr	r0, [pc, #424]	@ (80060e4 <checkDemoModCalisma+0x418>)
 8005f3c:	f004 fcfb 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005f40:	2200      	movs	r2, #0
 8005f42:	2101      	movs	r1, #1
 8005f44:	4867      	ldr	r0, [pc, #412]	@ (80060e4 <checkDemoModCalisma+0x418>)
 8005f46:	f004 fcf6 	bl	800a936 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005f4a:	4b67      	ldr	r3, [pc, #412]	@ (80060e8 <checkDemoModCalisma+0x41c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005f50:	2104      	movs	r1, #4
 8005f52:	4863      	ldr	r0, [pc, #396]	@ (80060e0 <checkDemoModCalisma+0x414>)
 8005f54:	f004 fcd8 	bl	800a908 <HAL_GPIO_ReadPin>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10d      	bne.n	8005f7a <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005f5e:	2201      	movs	r2, #1
 8005f60:	2180      	movs	r1, #128	@ 0x80
 8005f62:	4862      	ldr	r0, [pc, #392]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005f64:	f004 fce7 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2120      	movs	r1, #32
 8005f6c:	485f      	ldr	r0, [pc, #380]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005f6e:	f004 fce2 	bl	800a936 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005f72:	4b5f      	ldr	r3, [pc, #380]	@ (80060f0 <checkDemoModCalisma+0x424>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5f      	ldr	r2, [pc, #380]	@ (80060f4 <checkDemoModCalisma+0x428>)
 8005f78:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80060f0 <checkDemoModCalisma+0x424>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80060f4 <checkDemoModCalisma+0x428>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d909      	bls.n	8005f9c <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2180      	movs	r1, #128	@ 0x80
 8005f8c:	4857      	ldr	r0, [pc, #348]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005f8e:	f004 fcd2 	bl	800a936 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f92:	2200      	movs	r2, #0
 8005f94:	2120      	movs	r1, #32
 8005f96:	4855      	ldr	r0, [pc, #340]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005f98:	f004 fccd 	bl	800a936 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	4850      	ldr	r0, [pc, #320]	@ (80060e0 <checkDemoModCalisma+0x414>)
 8005fa0:	f004 fcb2 	bl	800a908 <HAL_GPIO_ReadPin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d108      	bne.n	8005fbc <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005faa:	2201      	movs	r2, #1
 8005fac:	2140      	movs	r1, #64	@ 0x40
 8005fae:	484f      	ldr	r0, [pc, #316]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005fb0:	f004 fcc1 	bl	800a936 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80060f0 <checkDemoModCalisma+0x424>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80060f4 <checkDemoModCalisma+0x428>)
 8005fba:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80060f0 <checkDemoModCalisma+0x424>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80060f4 <checkDemoModCalisma+0x428>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d904      	bls.n	8005fd4 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2140      	movs	r1, #64	@ 0x40
 8005fce:	4847      	ldr	r0, [pc, #284]	@ (80060ec <checkDemoModCalisma+0x420>)
 8005fd0:	f004 fcb1 	bl	800a936 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005fd4:	4b48      	ldr	r3, [pc, #288]	@ (80060f8 <checkDemoModCalisma+0x42c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d024      	beq.n	8006026 <checkDemoModCalisma+0x35a>
 8005fdc:	4b47      	ldr	r3, [pc, #284]	@ (80060fc <checkDemoModCalisma+0x430>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d020      	beq.n	8006026 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005fe4:	4b46      	ldr	r3, [pc, #280]	@ (8006100 <checkDemoModCalisma+0x434>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	4b44      	ldr	r3, [pc, #272]	@ (8006100 <checkDemoModCalisma+0x434>)
 8005fee:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005ff0:	4b44      	ldr	r3, [pc, #272]	@ (8006104 <checkDemoModCalisma+0x438>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2bff      	cmp	r3, #255	@ 0xff
 8005ff6:	d108      	bne.n	800600a <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005ff8:	4b42      	ldr	r3, [pc, #264]	@ (8006104 <checkDemoModCalisma+0x438>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005ffe:	4b42      	ldr	r3, [pc, #264]	@ (8006108 <checkDemoModCalisma+0x43c>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	4b40      	ldr	r3, [pc, #256]	@ (8006108 <checkDemoModCalisma+0x43c>)
 8006008:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 800600a:	4b3d      	ldr	r3, [pc, #244]	@ (8006100 <checkDemoModCalisma+0x434>)
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <checkDemoModCalisma+0x440>)
 8006010:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8006012:	4b3f      	ldr	r3, [pc, #252]	@ (8006110 <checkDemoModCalisma+0x444>)
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	4b3d      	ldr	r3, [pc, #244]	@ (800610c <checkDemoModCalisma+0x440>)
 8006018:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 800601a:	4b3e      	ldr	r3, [pc, #248]	@ (8006114 <checkDemoModCalisma+0x448>)
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8006020:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <checkDemoModCalisma+0x430>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006026:	4b3c      	ldr	r3, [pc, #240]	@ (8006118 <checkDemoModCalisma+0x44c>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d156      	bne.n	80060dc <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 800602e:	4a3b      	ldr	r2, [pc, #236]	@ (800611c <checkDemoModCalisma+0x450>)
 8006030:	2101      	movs	r1, #1
 8006032:	2002      	movs	r0, #2
 8006034:	f003 f914 	bl	8009260 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006038:	4a39      	ldr	r2, [pc, #228]	@ (8006120 <checkDemoModCalisma+0x454>)
 800603a:	2101      	movs	r1, #1
 800603c:	2001      	movs	r0, #1
 800603e:	f003 f90f 	bl	8009260 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8006042:	4b2f      	ldr	r3, [pc, #188]	@ (8006100 <checkDemoModCalisma+0x434>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	220a      	movs	r2, #10
 8006048:	4936      	ldr	r1, [pc, #216]	@ (8006124 <checkDemoModCalisma+0x458>)
 800604a:	4618      	mov	r0, r3
 800604c:	f007 ffd4 	bl	800dff8 <itoa>
					lcd_print(2,11,snum);
 8006050:	4a34      	ldr	r2, [pc, #208]	@ (8006124 <checkDemoModCalisma+0x458>)
 8006052:	210b      	movs	r1, #11
 8006054:	2002      	movs	r0, #2
 8006056:	f003 f903 	bl	8009260 <lcd_print>
					mesajYazildi=1;
 800605a:	4b33      	ldr	r3, [pc, #204]	@ (8006128 <checkDemoModCalisma+0x45c>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006060:	e03c      	b.n	80060dc <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006062:	4b32      	ldr	r3, [pc, #200]	@ (800612c <checkDemoModCalisma+0x460>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d003      	beq.n	8006072 <checkDemoModCalisma+0x3a6>
 800606a:	4b2b      	ldr	r3, [pc, #172]	@ (8006118 <checkDemoModCalisma+0x44c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d134      	bne.n	80060dc <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006072:	2200      	movs	r2, #0
 8006074:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006078:	481a      	ldr	r0, [pc, #104]	@ (80060e4 <checkDemoModCalisma+0x418>)
 800607a:	f004 fc5c 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800607e:	2200      	movs	r2, #0
 8006080:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006084:	4817      	ldr	r0, [pc, #92]	@ (80060e4 <checkDemoModCalisma+0x418>)
 8006086:	f004 fc56 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800608a:	2200      	movs	r2, #0
 800608c:	2104      	movs	r1, #4
 800608e:	4815      	ldr	r0, [pc, #84]	@ (80060e4 <checkDemoModCalisma+0x418>)
 8006090:	f004 fc51 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006094:	2200      	movs	r2, #0
 8006096:	2102      	movs	r1, #2
 8006098:	4812      	ldr	r0, [pc, #72]	@ (80060e4 <checkDemoModCalisma+0x418>)
 800609a:	f004 fc4c 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800609e:	2200      	movs	r2, #0
 80060a0:	2101      	movs	r1, #1
 80060a2:	4810      	ldr	r0, [pc, #64]	@ (80060e4 <checkDemoModCalisma+0x418>)
 80060a4:	f004 fc47 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80060a8:	2200      	movs	r2, #0
 80060aa:	2120      	movs	r1, #32
 80060ac:	480c      	ldr	r0, [pc, #48]	@ (80060e0 <checkDemoModCalisma+0x414>)
 80060ae:	f004 fc42 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80060b2:	2200      	movs	r2, #0
 80060b4:	2110      	movs	r1, #16
 80060b6:	480a      	ldr	r0, [pc, #40]	@ (80060e0 <checkDemoModCalisma+0x414>)
 80060b8:	f004 fc3d 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	@ 0x80
 80060c0:	480a      	ldr	r0, [pc, #40]	@ (80060ec <checkDemoModCalisma+0x420>)
 80060c2:	f004 fc38 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80060c6:	2200      	movs	r2, #0
 80060c8:	2140      	movs	r1, #64	@ 0x40
 80060ca:	4808      	ldr	r0, [pc, #32]	@ (80060ec <checkDemoModCalisma+0x420>)
 80060cc:	f004 fc33 	bl	800a936 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80060d0:	2200      	movs	r2, #0
 80060d2:	2120      	movs	r1, #32
 80060d4:	4805      	ldr	r0, [pc, #20]	@ (80060ec <checkDemoModCalisma+0x420>)
 80060d6:	f004 fc2e 	bl	800a936 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 80060da:	e7ff      	b.n	80060dc <checkDemoModCalisma+0x410>
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40011000 	.word	0x40011000
 80060e4:	40010c00 	.word	0x40010c00
 80060e8:	20001718 	.word	0x20001718
 80060ec:	40010800 	.word	0x40010800
 80060f0:	20001698 	.word	0x20001698
 80060f4:	200016a8 	.word	0x200016a8
 80060f8:	20001717 	.word	0x20001717
 80060fc:	200016fe 	.word	0x200016fe
 8006100:	200016b9 	.word	0x200016b9
 8006104:	200016b8 	.word	0x200016b8
 8006108:	200016ba 	.word	0x200016ba
 800610c:	200011f0 	.word	0x200011f0
 8006110:	200016bb 	.word	0x200016bb
 8006114:	200016ec 	.word	0x200016ec
 8006118:	200016dd 	.word	0x200016dd
 800611c:	0800f79c 	.word	0x0800f79c
 8006120:	0800f7a8 	.word	0x0800f7a8
 8006124:	20001260 	.word	0x20001260
 8006128:	200016f4 	.word	0x200016f4
 800612c:	200016de 	.word	0x200016de

08006130 <mainLoop>:

void mainLoop() {
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8006134:	f7fe f8b6 	bl	80042a4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006138:	2101      	movs	r1, #1
 800613a:	488b      	ldr	r0, [pc, #556]	@ (8006368 <mainLoop+0x238>)
 800613c:	f004 fbe4 	bl	800a908 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d136      	bne.n	80061b4 <mainLoop+0x84>
 8006146:	2108      	movs	r1, #8
 8006148:	4888      	ldr	r0, [pc, #544]	@ (800636c <mainLoop+0x23c>)
 800614a:	f004 fbdd 	bl	800a908 <HAL_GPIO_ReadPin>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d12f      	bne.n	80061b4 <mainLoop+0x84>
 8006154:	2102      	movs	r1, #2
 8006156:	4884      	ldr	r0, [pc, #528]	@ (8006368 <mainLoop+0x238>)
 8006158:	f004 fbd6 	bl	800a908 <HAL_GPIO_ReadPin>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d128      	bne.n	80061b4 <mainLoop+0x84>
 8006162:	2104      	movs	r1, #4
 8006164:	4880      	ldr	r0, [pc, #512]	@ (8006368 <mainLoop+0x238>)
 8006166:	f004 fbcf 	bl	800a908 <HAL_GPIO_ReadPin>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d121      	bne.n	80061b4 <mainLoop+0x84>
 8006170:	2108      	movs	r1, #8
 8006172:	487d      	ldr	r0, [pc, #500]	@ (8006368 <mainLoop+0x238>)
 8006174:	f004 fbc8 	bl	800a908 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11a      	bne.n	80061b4 <mainLoop+0x84>
 800617e:	2180      	movs	r1, #128	@ 0x80
 8006180:	487a      	ldr	r0, [pc, #488]	@ (800636c <mainLoop+0x23c>)
 8006182:	f004 fbc1 	bl	800a908 <HAL_GPIO_ReadPin>
 8006186:	4603      	mov	r3, r0
 8006188:	2b01      	cmp	r3, #1
 800618a:	d113      	bne.n	80061b4 <mainLoop+0x84>
 800618c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006190:	4876      	ldr	r0, [pc, #472]	@ (800636c <mainLoop+0x23c>)
 8006192:	f004 fbb9 	bl	800a908 <HAL_GPIO_ReadPin>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d10b      	bne.n	80061b4 <mainLoop+0x84>
 800619c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80061a0:	4872      	ldr	r0, [pc, #456]	@ (800636c <mainLoop+0x23c>)
 80061a2:	f004 fbb1 	bl	800a908 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d103      	bne.n	80061b4 <mainLoop+0x84>
			butonKontrol=0;
 80061ac:	4b70      	ldr	r3, [pc, #448]	@ (8006370 <mainLoop+0x240>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e003      	b.n	80061bc <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 80061b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006374 <mainLoop+0x244>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6f      	ldr	r2, [pc, #444]	@ (8006378 <mainLoop+0x248>)
 80061ba:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 80061bc:	f7fe f924 	bl	8004408 <buttonCheck>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d103      	bne.n	80061ce <mainLoop+0x9e>
			backLightTimer = millis;
 80061c6:	4b6b      	ldr	r3, [pc, #428]	@ (8006374 <mainLoop+0x244>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006378 <mainLoop+0x248>)
 80061cc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 80061ce:	4b6b      	ldr	r3, [pc, #428]	@ (800637c <mainLoop+0x24c>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <mainLoop+0xb2>
			hafizaYaz = 0;
 80061d6:	4b69      	ldr	r3, [pc, #420]	@ (800637c <mainLoop+0x24c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 80061dc:	2001      	movs	r0, #1
 80061de:	f7fa fa61 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80061e2:	4b67      	ldr	r3, [pc, #412]	@ (8006380 <mainLoop+0x250>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f083 0301 	eor.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d043      	beq.n	8006278 <mainLoop+0x148>
 80061f0:	4864      	ldr	r0, [pc, #400]	@ (8006384 <mainLoop+0x254>)
 80061f2:	f005 f9a5 	bl	800b540 <HAL_I2C_GetState>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d13d      	bne.n	8006278 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 80061fc:	4b62      	ldr	r3, [pc, #392]	@ (8006388 <mainLoop+0x258>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f083 0301 	eor.w	r3, r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d028      	beq.n	800625c <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 800620a:	4a60      	ldr	r2, [pc, #384]	@ (800638c <mainLoop+0x25c>)
 800620c:	2101      	movs	r1, #1
 800620e:	2001      	movs	r0, #1
 8006210:	f003 f826 	bl	8009260 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8006214:	4a5e      	ldr	r2, [pc, #376]	@ (8006390 <mainLoop+0x260>)
 8006216:	2101      	movs	r1, #1
 8006218:	2002      	movs	r0, #2
 800621a:	f003 f821 	bl	8009260 <lcd_print>
			  HAL_Delay(1000);
 800621e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006222:	f003 fd95 	bl	8009d50 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006226:	bf00      	nop
 8006228:	4856      	ldr	r0, [pc, #344]	@ (8006384 <mainLoop+0x254>)
 800622a:	f005 f996 	bl	800b55a <HAL_I2C_GetError>
 800622e:	4603      	mov	r3, r0
 8006230:	2b04      	cmp	r3, #4
 8006232:	d0f9      	beq.n	8006228 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006234:	e003      	b.n	800623e <mainLoop+0x10e>
				  HAL_Delay(1000);
 8006236:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800623a:	f003 fd89 	bl	8009d50 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800623e:	4851      	ldr	r0, [pc, #324]	@ (8006384 <mainLoop+0x254>)
 8006240:	f005 f97e 	bl	800b540 <HAL_I2C_GetState>
 8006244:	4603      	mov	r3, r0
 8006246:	2b20      	cmp	r3, #32
 8006248:	d1f5      	bne.n	8006236 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 800624a:	4a52      	ldr	r2, [pc, #328]	@ (8006394 <mainLoop+0x264>)
 800624c:	2101      	movs	r1, #1
 800624e:	2002      	movs	r0, #2
 8006250:	f003 f806 	bl	8009260 <lcd_print>

			  ilkOkuma=1;
 8006254:	4b4c      	ldr	r3, [pc, #304]	@ (8006388 <mainLoop+0x258>)
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e006      	b.n	800626a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 800625c:	4a4e      	ldr	r2, [pc, #312]	@ (8006398 <mainLoop+0x268>)
 800625e:	2101      	movs	r1, #1
 8006260:	2002      	movs	r0, #2
 8006262:	f002 fffd 	bl	8009260 <lcd_print>
			  lcd_clear();
 8006266:	f003 f827 	bl	80092b8 <lcd_clear>
		  }

		  lcd_clear();
 800626a:	f003 f825 	bl	80092b8 <lcd_clear>

		  eepromKontrol();
 800626e:	f7f9 ffe1 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006272:	4b43      	ldr	r3, [pc, #268]	@ (8006380 <mainLoop+0x250>)
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006278:	4b48      	ldr	r3, [pc, #288]	@ (800639c <mainLoop+0x26c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d11c      	bne.n	80062ba <mainLoop+0x18a>
 8006280:	4b47      	ldr	r3, [pc, #284]	@ (80063a0 <mainLoop+0x270>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f083 0301 	eor.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <mainLoop+0x18a>
 800628e:	4b45      	ldr	r3, [pc, #276]	@ (80063a4 <mainLoop+0x274>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d111      	bne.n	80062ba <mainLoop+0x18a>
			lcd_clear();
 8006296:	f003 f80f 	bl	80092b8 <lcd_clear>
			HAL_Delay(10);
 800629a:	200a      	movs	r0, #10
 800629c:	f003 fd58 	bl	8009d50 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 80062a0:	4a41      	ldr	r2, [pc, #260]	@ (80063a8 <mainLoop+0x278>)
 80062a2:	2101      	movs	r1, #1
 80062a4:	2001      	movs	r0, #1
 80062a6:	f002 ffdb 	bl	8009260 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 80062aa:	4a40      	ldr	r2, [pc, #256]	@ (80063ac <mainLoop+0x27c>)
 80062ac:	2101      	movs	r1, #1
 80062ae:	2002      	movs	r0, #2
 80062b0:	f002 ffd6 	bl	8009260 <lcd_print>
			mesajYazildi=1;
 80062b4:	4b3a      	ldr	r3, [pc, #232]	@ (80063a0 <mainLoop+0x270>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80062ba:	4b38      	ldr	r3, [pc, #224]	@ (800639c <mainLoop+0x26c>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d112      	bne.n	80062e8 <mainLoop+0x1b8>
 80062c2:	2102      	movs	r1, #2
 80062c4:	4828      	ldr	r0, [pc, #160]	@ (8006368 <mainLoop+0x238>)
 80062c6:	f004 fb1f 	bl	800a908 <HAL_GPIO_ReadPin>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10b      	bne.n	80062e8 <mainLoop+0x1b8>
 80062d0:	2104      	movs	r1, #4
 80062d2:	4825      	ldr	r0, [pc, #148]	@ (8006368 <mainLoop+0x238>)
 80062d4:	f004 fb18 	bl	800a908 <HAL_GPIO_ReadPin>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d104      	bne.n	80062e8 <mainLoop+0x1b8>
			menuGiris=1;
 80062de:	4b2f      	ldr	r3, [pc, #188]	@ (800639c <mainLoop+0x26c>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80062e4:	f002 ffe8 	bl	80092b8 <lcd_clear>
		}

		if(menuGiris==1) {
 80062e8:	4b2c      	ldr	r3, [pc, #176]	@ (800639c <mainLoop+0x26c>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <mainLoop+0x1c4>
			menu();
 80062f0:	f7fb faa8 	bl	8001844 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80062f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062f8:	481c      	ldr	r0, [pc, #112]	@ (800636c <mainLoop+0x23c>)
 80062fa:	f004 fb34 	bl	800a966 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80062fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006302:	482b      	ldr	r0, [pc, #172]	@ (80063b0 <mainLoop+0x280>)
 8006304:	f004 fb00 	bl	800a908 <HAL_GPIO_ReadPin>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <mainLoop+0x1f4>
 800630e:	4b29      	ldr	r3, [pc, #164]	@ (80063b4 <mainLoop+0x284>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f083 0301 	eor.w	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <mainLoop+0x1f4>
			stopVar=1;
 800631c:	4b26      	ldr	r3, [pc, #152]	@ (80063b8 <mainLoop+0x288>)
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e002      	b.n	800632a <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8006324:	4b24      	ldr	r3, [pc, #144]	@ (80063b8 <mainLoop+0x288>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 800632a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800632e:	4820      	ldr	r0, [pc, #128]	@ (80063b0 <mainLoop+0x280>)
 8006330:	f004 faea 	bl	800a908 <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <mainLoop+0x21a>
 800633a:	4b20      	ldr	r3, [pc, #128]	@ (80063bc <mainLoop+0x28c>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <mainLoop+0x21a>
			EmnStopVar=1;
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <mainLoop+0x290>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e002      	b.n	8006350 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 800634a:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <mainLoop+0x290>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006350:	f7fe f88e 	bl	8004470 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006354:	f7fe f8c0 	bl	80044d8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006358:	f7fe f904 	bl	8004564 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800635c:	f7fe f954 	bl	8004608 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006360:	f7ff fcb4 	bl	8005ccc <checkDemoModCalisma>
		checkLCDBacklight();
 8006364:	e6e6      	b.n	8006134 <mainLoop+0x4>
 8006366:	bf00      	nop
 8006368:	40010800 	.word	0x40010800
 800636c:	40011000 	.word	0x40011000
 8006370:	200016ef 	.word	0x200016ef
 8006374:	20001698 	.word	0x20001698
 8006378:	200016b4 	.word	0x200016b4
 800637c:	200016ec 	.word	0x200016ec
 8006380:	200016ed 	.word	0x200016ed
 8006384:	20001f40 	.word	0x20001f40
 8006388:	200016ee 	.word	0x200016ee
 800638c:	20000178 	.word	0x20000178
 8006390:	20001e78 	.word	0x20001e78
 8006394:	20001e8c 	.word	0x20001e8c
 8006398:	20001ea0 	.word	0x20001ea0
 800639c:	200016dd 	.word	0x200016dd
 80063a0:	200016f4 	.word	0x200016f4
 80063a4:	200016de 	.word	0x200016de
 80063a8:	200000c4 	.word	0x200000c4
 80063ac:	200000d8 	.word	0x200000d8
 80063b0:	40010c00 	.word	0x40010c00
 80063b4:	20001714 	.word	0x20001714
 80063b8:	20001711 	.word	0x20001711
 80063bc:	20001723 	.word	0x20001723
 80063c0:	20001724 	.word	0x20001724

080063c4 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 80063c4:	b5b0      	push	{r4, r5, r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 853d 	bne.w	8006e50 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 80063d6:	4ac7      	ldr	r2, [pc, #796]	@ (80066f4 <loadMenuTexts+0x330>)
 80063d8:	4bc7      	ldr	r3, [pc, #796]	@ (80066f8 <loadMenuTexts+0x334>)
 80063da:	4614      	mov	r4, r2
 80063dc:	461d      	mov	r5, r3
 80063de:	6828      	ldr	r0, [r5, #0]
 80063e0:	6869      	ldr	r1, [r5, #4]
 80063e2:	68aa      	ldr	r2, [r5, #8]
 80063e4:	68eb      	ldr	r3, [r5, #12]
 80063e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e8:	7c2b      	ldrb	r3, [r5, #16]
 80063ea:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 80063ec:	4ac3      	ldr	r2, [pc, #780]	@ (80066fc <loadMenuTexts+0x338>)
 80063ee:	4bc4      	ldr	r3, [pc, #784]	@ (8006700 <loadMenuTexts+0x33c>)
 80063f0:	4614      	mov	r4, r2
 80063f2:	461d      	mov	r5, r3
 80063f4:	6828      	ldr	r0, [r5, #0]
 80063f6:	6869      	ldr	r1, [r5, #4]
 80063f8:	68aa      	ldr	r2, [r5, #8]
 80063fa:	68eb      	ldr	r3, [r5, #12]
 80063fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063fe:	7c2b      	ldrb	r3, [r5, #16]
 8006400:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006402:	4ac0      	ldr	r2, [pc, #768]	@ (8006704 <loadMenuTexts+0x340>)
 8006404:	4bc0      	ldr	r3, [pc, #768]	@ (8006708 <loadMenuTexts+0x344>)
 8006406:	4614      	mov	r4, r2
 8006408:	461d      	mov	r5, r3
 800640a:	6828      	ldr	r0, [r5, #0]
 800640c:	6869      	ldr	r1, [r5, #4]
 800640e:	68aa      	ldr	r2, [r5, #8]
 8006410:	68eb      	ldr	r3, [r5, #12]
 8006412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006414:	7c2b      	ldrb	r3, [r5, #16]
 8006416:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006418:	4abc      	ldr	r2, [pc, #752]	@ (800670c <loadMenuTexts+0x348>)
 800641a:	4bbd      	ldr	r3, [pc, #756]	@ (8006710 <loadMenuTexts+0x34c>)
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	6828      	ldr	r0, [r5, #0]
 8006422:	6869      	ldr	r1, [r5, #4]
 8006424:	68aa      	ldr	r2, [r5, #8]
 8006426:	68eb      	ldr	r3, [r5, #12]
 8006428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800642a:	7c2b      	ldrb	r3, [r5, #16]
 800642c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 800642e:	4ab9      	ldr	r2, [pc, #740]	@ (8006714 <loadMenuTexts+0x350>)
 8006430:	4bb9      	ldr	r3, [pc, #740]	@ (8006718 <loadMenuTexts+0x354>)
 8006432:	4614      	mov	r4, r2
 8006434:	461d      	mov	r5, r3
 8006436:	6828      	ldr	r0, [r5, #0]
 8006438:	6869      	ldr	r1, [r5, #4]
 800643a:	68aa      	ldr	r2, [r5, #8]
 800643c:	68eb      	ldr	r3, [r5, #12]
 800643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006440:	7c2b      	ldrb	r3, [r5, #16]
 8006442:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006444:	4ab5      	ldr	r2, [pc, #724]	@ (800671c <loadMenuTexts+0x358>)
 8006446:	4bb6      	ldr	r3, [pc, #728]	@ (8006720 <loadMenuTexts+0x35c>)
 8006448:	4614      	mov	r4, r2
 800644a:	461d      	mov	r5, r3
 800644c:	6828      	ldr	r0, [r5, #0]
 800644e:	6869      	ldr	r1, [r5, #4]
 8006450:	68aa      	ldr	r2, [r5, #8]
 8006452:	68eb      	ldr	r3, [r5, #12]
 8006454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006456:	7c2b      	ldrb	r3, [r5, #16]
 8006458:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800645a:	4ab2      	ldr	r2, [pc, #712]	@ (8006724 <loadMenuTexts+0x360>)
 800645c:	4bb2      	ldr	r3, [pc, #712]	@ (8006728 <loadMenuTexts+0x364>)
 800645e:	4614      	mov	r4, r2
 8006460:	461d      	mov	r5, r3
 8006462:	6828      	ldr	r0, [r5, #0]
 8006464:	6869      	ldr	r1, [r5, #4]
 8006466:	68aa      	ldr	r2, [r5, #8]
 8006468:	68eb      	ldr	r3, [r5, #12]
 800646a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646c:	7c2b      	ldrb	r3, [r5, #16]
 800646e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006470:	4aae      	ldr	r2, [pc, #696]	@ (800672c <loadMenuTexts+0x368>)
 8006472:	4baf      	ldr	r3, [pc, #700]	@ (8006730 <loadMenuTexts+0x36c>)
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	6828      	ldr	r0, [r5, #0]
 800647a:	6869      	ldr	r1, [r5, #4]
 800647c:	68aa      	ldr	r2, [r5, #8]
 800647e:	68eb      	ldr	r3, [r5, #12]
 8006480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006482:	7c2b      	ldrb	r3, [r5, #16]
 8006484:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006486:	4aab      	ldr	r2, [pc, #684]	@ (8006734 <loadMenuTexts+0x370>)
 8006488:	4bab      	ldr	r3, [pc, #684]	@ (8006738 <loadMenuTexts+0x374>)
 800648a:	4614      	mov	r4, r2
 800648c:	461d      	mov	r5, r3
 800648e:	6828      	ldr	r0, [r5, #0]
 8006490:	6869      	ldr	r1, [r5, #4]
 8006492:	68aa      	ldr	r2, [r5, #8]
 8006494:	68eb      	ldr	r3, [r5, #12]
 8006496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006498:	7c2b      	ldrb	r3, [r5, #16]
 800649a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 800649c:	4aa7      	ldr	r2, [pc, #668]	@ (800673c <loadMenuTexts+0x378>)
 800649e:	4ba8      	ldr	r3, [pc, #672]	@ (8006740 <loadMenuTexts+0x37c>)
 80064a0:	4614      	mov	r4, r2
 80064a2:	461d      	mov	r5, r3
 80064a4:	6828      	ldr	r0, [r5, #0]
 80064a6:	6869      	ldr	r1, [r5, #4]
 80064a8:	68aa      	ldr	r2, [r5, #8]
 80064aa:	68eb      	ldr	r3, [r5, #12]
 80064ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ae:	7c2b      	ldrb	r3, [r5, #16]
 80064b0:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80064b2:	4aa4      	ldr	r2, [pc, #656]	@ (8006744 <loadMenuTexts+0x380>)
 80064b4:	4ba4      	ldr	r3, [pc, #656]	@ (8006748 <loadMenuTexts+0x384>)
 80064b6:	4614      	mov	r4, r2
 80064b8:	461d      	mov	r5, r3
 80064ba:	6828      	ldr	r0, [r5, #0]
 80064bc:	6869      	ldr	r1, [r5, #4]
 80064be:	68aa      	ldr	r2, [r5, #8]
 80064c0:	68eb      	ldr	r3, [r5, #12]
 80064c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c4:	7c2b      	ldrb	r3, [r5, #16]
 80064c6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 80064c8:	4aa0      	ldr	r2, [pc, #640]	@ (800674c <loadMenuTexts+0x388>)
 80064ca:	4ba1      	ldr	r3, [pc, #644]	@ (8006750 <loadMenuTexts+0x38c>)
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	6828      	ldr	r0, [r5, #0]
 80064d2:	6869      	ldr	r1, [r5, #4]
 80064d4:	68aa      	ldr	r2, [r5, #8]
 80064d6:	68eb      	ldr	r3, [r5, #12]
 80064d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064da:	7c2b      	ldrb	r3, [r5, #16]
 80064dc:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 80064de:	4a9d      	ldr	r2, [pc, #628]	@ (8006754 <loadMenuTexts+0x390>)
 80064e0:	4b9d      	ldr	r3, [pc, #628]	@ (8006758 <loadMenuTexts+0x394>)
 80064e2:	4614      	mov	r4, r2
 80064e4:	461d      	mov	r5, r3
 80064e6:	6828      	ldr	r0, [r5, #0]
 80064e8:	6869      	ldr	r1, [r5, #4]
 80064ea:	68aa      	ldr	r2, [r5, #8]
 80064ec:	68eb      	ldr	r3, [r5, #12]
 80064ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f0:	7c2b      	ldrb	r3, [r5, #16]
 80064f2:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80064f4:	4a99      	ldr	r2, [pc, #612]	@ (800675c <loadMenuTexts+0x398>)
 80064f6:	4b9a      	ldr	r3, [pc, #616]	@ (8006760 <loadMenuTexts+0x39c>)
 80064f8:	4614      	mov	r4, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	6828      	ldr	r0, [r5, #0]
 80064fe:	6869      	ldr	r1, [r5, #4]
 8006500:	68aa      	ldr	r2, [r5, #8]
 8006502:	68eb      	ldr	r3, [r5, #12]
 8006504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006506:	7c2b      	ldrb	r3, [r5, #16]
 8006508:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800650a:	4a96      	ldr	r2, [pc, #600]	@ (8006764 <loadMenuTexts+0x3a0>)
 800650c:	4b96      	ldr	r3, [pc, #600]	@ (8006768 <loadMenuTexts+0x3a4>)
 800650e:	4614      	mov	r4, r2
 8006510:	461d      	mov	r5, r3
 8006512:	6828      	ldr	r0, [r5, #0]
 8006514:	6869      	ldr	r1, [r5, #4]
 8006516:	68aa      	ldr	r2, [r5, #8]
 8006518:	68eb      	ldr	r3, [r5, #12]
 800651a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651c:	7c2b      	ldrb	r3, [r5, #16]
 800651e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006520:	4a92      	ldr	r2, [pc, #584]	@ (800676c <loadMenuTexts+0x3a8>)
 8006522:	4b93      	ldr	r3, [pc, #588]	@ (8006770 <loadMenuTexts+0x3ac>)
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	6828      	ldr	r0, [r5, #0]
 800652a:	6869      	ldr	r1, [r5, #4]
 800652c:	68aa      	ldr	r2, [r5, #8]
 800652e:	68eb      	ldr	r3, [r5, #12]
 8006530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006532:	7c2b      	ldrb	r3, [r5, #16]
 8006534:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006536:	4a8f      	ldr	r2, [pc, #572]	@ (8006774 <loadMenuTexts+0x3b0>)
 8006538:	4b8f      	ldr	r3, [pc, #572]	@ (8006778 <loadMenuTexts+0x3b4>)
 800653a:	4614      	mov	r4, r2
 800653c:	461d      	mov	r5, r3
 800653e:	6828      	ldr	r0, [r5, #0]
 8006540:	6869      	ldr	r1, [r5, #4]
 8006542:	68aa      	ldr	r2, [r5, #8]
 8006544:	68eb      	ldr	r3, [r5, #12]
 8006546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006548:	7c2b      	ldrb	r3, [r5, #16]
 800654a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800654c:	4a8b      	ldr	r2, [pc, #556]	@ (800677c <loadMenuTexts+0x3b8>)
 800654e:	4b8c      	ldr	r3, [pc, #560]	@ (8006780 <loadMenuTexts+0x3bc>)
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	6828      	ldr	r0, [r5, #0]
 8006556:	6869      	ldr	r1, [r5, #4]
 8006558:	68aa      	ldr	r2, [r5, #8]
 800655a:	68eb      	ldr	r3, [r5, #12]
 800655c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655e:	7c2b      	ldrb	r3, [r5, #16]
 8006560:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006562:	4a88      	ldr	r2, [pc, #544]	@ (8006784 <loadMenuTexts+0x3c0>)
 8006564:	4b88      	ldr	r3, [pc, #544]	@ (8006788 <loadMenuTexts+0x3c4>)
 8006566:	4614      	mov	r4, r2
 8006568:	461d      	mov	r5, r3
 800656a:	6828      	ldr	r0, [r5, #0]
 800656c:	6869      	ldr	r1, [r5, #4]
 800656e:	68aa      	ldr	r2, [r5, #8]
 8006570:	68eb      	ldr	r3, [r5, #12]
 8006572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006574:	7c2b      	ldrb	r3, [r5, #16]
 8006576:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006578:	4a84      	ldr	r2, [pc, #528]	@ (800678c <loadMenuTexts+0x3c8>)
 800657a:	4b85      	ldr	r3, [pc, #532]	@ (8006790 <loadMenuTexts+0x3cc>)
 800657c:	4614      	mov	r4, r2
 800657e:	461d      	mov	r5, r3
 8006580:	6828      	ldr	r0, [r5, #0]
 8006582:	6869      	ldr	r1, [r5, #4]
 8006584:	68aa      	ldr	r2, [r5, #8]
 8006586:	68eb      	ldr	r3, [r5, #12]
 8006588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658a:	7c2b      	ldrb	r3, [r5, #16]
 800658c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800658e:	4a81      	ldr	r2, [pc, #516]	@ (8006794 <loadMenuTexts+0x3d0>)
 8006590:	4b81      	ldr	r3, [pc, #516]	@ (8006798 <loadMenuTexts+0x3d4>)
 8006592:	4614      	mov	r4, r2
 8006594:	461d      	mov	r5, r3
 8006596:	6828      	ldr	r0, [r5, #0]
 8006598:	6869      	ldr	r1, [r5, #4]
 800659a:	68aa      	ldr	r2, [r5, #8]
 800659c:	68eb      	ldr	r3, [r5, #12]
 800659e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a0:	7c2b      	ldrb	r3, [r5, #16]
 80065a2:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80065a4:	4a7d      	ldr	r2, [pc, #500]	@ (800679c <loadMenuTexts+0x3d8>)
 80065a6:	4b7e      	ldr	r3, [pc, #504]	@ (80067a0 <loadMenuTexts+0x3dc>)
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	6828      	ldr	r0, [r5, #0]
 80065ae:	6869      	ldr	r1, [r5, #4]
 80065b0:	68aa      	ldr	r2, [r5, #8]
 80065b2:	68eb      	ldr	r3, [r5, #12]
 80065b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b6:	7c2b      	ldrb	r3, [r5, #16]
 80065b8:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80065ba:	4a7a      	ldr	r2, [pc, #488]	@ (80067a4 <loadMenuTexts+0x3e0>)
 80065bc:	4b7a      	ldr	r3, [pc, #488]	@ (80067a8 <loadMenuTexts+0x3e4>)
 80065be:	4614      	mov	r4, r2
 80065c0:	461d      	mov	r5, r3
 80065c2:	6828      	ldr	r0, [r5, #0]
 80065c4:	6869      	ldr	r1, [r5, #4]
 80065c6:	68aa      	ldr	r2, [r5, #8]
 80065c8:	68eb      	ldr	r3, [r5, #12]
 80065ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065cc:	7c2b      	ldrb	r3, [r5, #16]
 80065ce:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80065d0:	4a76      	ldr	r2, [pc, #472]	@ (80067ac <loadMenuTexts+0x3e8>)
 80065d2:	4b77      	ldr	r3, [pc, #476]	@ (80067b0 <loadMenuTexts+0x3ec>)
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	6828      	ldr	r0, [r5, #0]
 80065da:	6869      	ldr	r1, [r5, #4]
 80065dc:	68aa      	ldr	r2, [r5, #8]
 80065de:	68eb      	ldr	r3, [r5, #12]
 80065e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e2:	7c2b      	ldrb	r3, [r5, #16]
 80065e4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80065e6:	4a73      	ldr	r2, [pc, #460]	@ (80067b4 <loadMenuTexts+0x3f0>)
 80065e8:	4b73      	ldr	r3, [pc, #460]	@ (80067b8 <loadMenuTexts+0x3f4>)
 80065ea:	4614      	mov	r4, r2
 80065ec:	461d      	mov	r5, r3
 80065ee:	6828      	ldr	r0, [r5, #0]
 80065f0:	6869      	ldr	r1, [r5, #4]
 80065f2:	68aa      	ldr	r2, [r5, #8]
 80065f4:	68eb      	ldr	r3, [r5, #12]
 80065f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f8:	7c2b      	ldrb	r3, [r5, #16]
 80065fa:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80065fc:	4a6f      	ldr	r2, [pc, #444]	@ (80067bc <loadMenuTexts+0x3f8>)
 80065fe:	4b70      	ldr	r3, [pc, #448]	@ (80067c0 <loadMenuTexts+0x3fc>)
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	6828      	ldr	r0, [r5, #0]
 8006606:	6869      	ldr	r1, [r5, #4]
 8006608:	68aa      	ldr	r2, [r5, #8]
 800660a:	68eb      	ldr	r3, [r5, #12]
 800660c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660e:	7c2b      	ldrb	r3, [r5, #16]
 8006610:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006612:	4a6c      	ldr	r2, [pc, #432]	@ (80067c4 <loadMenuTexts+0x400>)
 8006614:	4b6c      	ldr	r3, [pc, #432]	@ (80067c8 <loadMenuTexts+0x404>)
 8006616:	4614      	mov	r4, r2
 8006618:	461d      	mov	r5, r3
 800661a:	6828      	ldr	r0, [r5, #0]
 800661c:	6869      	ldr	r1, [r5, #4]
 800661e:	68aa      	ldr	r2, [r5, #8]
 8006620:	68eb      	ldr	r3, [r5, #12]
 8006622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006624:	7c2b      	ldrb	r3, [r5, #16]
 8006626:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006628:	4a68      	ldr	r2, [pc, #416]	@ (80067cc <loadMenuTexts+0x408>)
 800662a:	4b69      	ldr	r3, [pc, #420]	@ (80067d0 <loadMenuTexts+0x40c>)
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	6828      	ldr	r0, [r5, #0]
 8006632:	6869      	ldr	r1, [r5, #4]
 8006634:	68aa      	ldr	r2, [r5, #8]
 8006636:	68eb      	ldr	r3, [r5, #12]
 8006638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663a:	7c2b      	ldrb	r3, [r5, #16]
 800663c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800663e:	4a65      	ldr	r2, [pc, #404]	@ (80067d4 <loadMenuTexts+0x410>)
 8006640:	4b65      	ldr	r3, [pc, #404]	@ (80067d8 <loadMenuTexts+0x414>)
 8006642:	4614      	mov	r4, r2
 8006644:	461d      	mov	r5, r3
 8006646:	6828      	ldr	r0, [r5, #0]
 8006648:	6869      	ldr	r1, [r5, #4]
 800664a:	68aa      	ldr	r2, [r5, #8]
 800664c:	68eb      	ldr	r3, [r5, #12]
 800664e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006650:	7c2b      	ldrb	r3, [r5, #16]
 8006652:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006654:	4a61      	ldr	r2, [pc, #388]	@ (80067dc <loadMenuTexts+0x418>)
 8006656:	4b62      	ldr	r3, [pc, #392]	@ (80067e0 <loadMenuTexts+0x41c>)
 8006658:	4614      	mov	r4, r2
 800665a:	461d      	mov	r5, r3
 800665c:	6828      	ldr	r0, [r5, #0]
 800665e:	6869      	ldr	r1, [r5, #4]
 8006660:	68aa      	ldr	r2, [r5, #8]
 8006662:	68eb      	ldr	r3, [r5, #12]
 8006664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006666:	7c2b      	ldrb	r3, [r5, #16]
 8006668:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800666a:	4a5e      	ldr	r2, [pc, #376]	@ (80067e4 <loadMenuTexts+0x420>)
 800666c:	4b5e      	ldr	r3, [pc, #376]	@ (80067e8 <loadMenuTexts+0x424>)
 800666e:	4614      	mov	r4, r2
 8006670:	461d      	mov	r5, r3
 8006672:	6828      	ldr	r0, [r5, #0]
 8006674:	6869      	ldr	r1, [r5, #4]
 8006676:	68aa      	ldr	r2, [r5, #8]
 8006678:	68eb      	ldr	r3, [r5, #12]
 800667a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667c:	7c2b      	ldrb	r3, [r5, #16]
 800667e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006680:	4a5a      	ldr	r2, [pc, #360]	@ (80067ec <loadMenuTexts+0x428>)
 8006682:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <loadMenuTexts+0x42c>)
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	6828      	ldr	r0, [r5, #0]
 800668a:	6869      	ldr	r1, [r5, #4]
 800668c:	68aa      	ldr	r2, [r5, #8]
 800668e:	68eb      	ldr	r3, [r5, #12]
 8006690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006692:	7c2b      	ldrb	r3, [r5, #16]
 8006694:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8006696:	4a57      	ldr	r2, [pc, #348]	@ (80067f4 <loadMenuTexts+0x430>)
 8006698:	4b57      	ldr	r3, [pc, #348]	@ (80067f8 <loadMenuTexts+0x434>)
 800669a:	4614      	mov	r4, r2
 800669c:	461d      	mov	r5, r3
 800669e:	6828      	ldr	r0, [r5, #0]
 80066a0:	6869      	ldr	r1, [r5, #4]
 80066a2:	68aa      	ldr	r2, [r5, #8]
 80066a4:	68eb      	ldr	r3, [r5, #12]
 80066a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a8:	7c2b      	ldrb	r3, [r5, #16]
 80066aa:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80066ac:	4a53      	ldr	r2, [pc, #332]	@ (80067fc <loadMenuTexts+0x438>)
 80066ae:	4b54      	ldr	r3, [pc, #336]	@ (8006800 <loadMenuTexts+0x43c>)
 80066b0:	4614      	mov	r4, r2
 80066b2:	461d      	mov	r5, r3
 80066b4:	6828      	ldr	r0, [r5, #0]
 80066b6:	6869      	ldr	r1, [r5, #4]
 80066b8:	68aa      	ldr	r2, [r5, #8]
 80066ba:	68eb      	ldr	r3, [r5, #12]
 80066bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066be:	7c2b      	ldrb	r3, [r5, #16]
 80066c0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80066c2:	4a50      	ldr	r2, [pc, #320]	@ (8006804 <loadMenuTexts+0x440>)
 80066c4:	4b50      	ldr	r3, [pc, #320]	@ (8006808 <loadMenuTexts+0x444>)
 80066c6:	4614      	mov	r4, r2
 80066c8:	461d      	mov	r5, r3
 80066ca:	6828      	ldr	r0, [r5, #0]
 80066cc:	6869      	ldr	r1, [r5, #4]
 80066ce:	68aa      	ldr	r2, [r5, #8]
 80066d0:	68eb      	ldr	r3, [r5, #12]
 80066d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d4:	7c2b      	ldrb	r3, [r5, #16]
 80066d6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80066d8:	4a4c      	ldr	r2, [pc, #304]	@ (800680c <loadMenuTexts+0x448>)
 80066da:	4b4d      	ldr	r3, [pc, #308]	@ (8006810 <loadMenuTexts+0x44c>)
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	6828      	ldr	r0, [r5, #0]
 80066e2:	6869      	ldr	r1, [r5, #4]
 80066e4:	68aa      	ldr	r2, [r5, #8]
 80066e6:	68eb      	ldr	r3, [r5, #12]
 80066e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ea:	7c2b      	ldrb	r3, [r5, #16]
 80066ec:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80066ee:	4a49      	ldr	r2, [pc, #292]	@ (8006814 <loadMenuTexts+0x450>)
 80066f0:	e092      	b.n	8006818 <loadMenuTexts+0x454>
 80066f2:	bf00      	nop
 80066f4:	20001824 	.word	0x20001824
 80066f8:	2000018c 	.word	0x2000018c
 80066fc:	20001838 	.word	0x20001838
 8006700:	200001a0 	.word	0x200001a0
 8006704:	2000184c 	.word	0x2000184c
 8006708:	200001b4 	.word	0x200001b4
 800670c:	20001860 	.word	0x20001860
 8006710:	200001c8 	.word	0x200001c8
 8006714:	20001874 	.word	0x20001874
 8006718:	200001dc 	.word	0x200001dc
 800671c:	20001888 	.word	0x20001888
 8006720:	200001f0 	.word	0x200001f0
 8006724:	2000189c 	.word	0x2000189c
 8006728:	20000204 	.word	0x20000204
 800672c:	200018b0 	.word	0x200018b0
 8006730:	20000218 	.word	0x20000218
 8006734:	200018c4 	.word	0x200018c4
 8006738:	2000022c 	.word	0x2000022c
 800673c:	200018d8 	.word	0x200018d8
 8006740:	20000240 	.word	0x20000240
 8006744:	200018ec 	.word	0x200018ec
 8006748:	20000254 	.word	0x20000254
 800674c:	20001900 	.word	0x20001900
 8006750:	20000268 	.word	0x20000268
 8006754:	20001914 	.word	0x20001914
 8006758:	2000027c 	.word	0x2000027c
 800675c:	20001928 	.word	0x20001928
 8006760:	20000290 	.word	0x20000290
 8006764:	2000193c 	.word	0x2000193c
 8006768:	200002a4 	.word	0x200002a4
 800676c:	20001950 	.word	0x20001950
 8006770:	200002b8 	.word	0x200002b8
 8006774:	20001964 	.word	0x20001964
 8006778:	200002cc 	.word	0x200002cc
 800677c:	20001978 	.word	0x20001978
 8006780:	200002e0 	.word	0x200002e0
 8006784:	2000198c 	.word	0x2000198c
 8006788:	200002f4 	.word	0x200002f4
 800678c:	200019a0 	.word	0x200019a0
 8006790:	20000308 	.word	0x20000308
 8006794:	200019b4 	.word	0x200019b4
 8006798:	2000031c 	.word	0x2000031c
 800679c:	200019c8 	.word	0x200019c8
 80067a0:	20000330 	.word	0x20000330
 80067a4:	200019dc 	.word	0x200019dc
 80067a8:	20000344 	.word	0x20000344
 80067ac:	200019f0 	.word	0x200019f0
 80067b0:	20000358 	.word	0x20000358
 80067b4:	20001a04 	.word	0x20001a04
 80067b8:	2000036c 	.word	0x2000036c
 80067bc:	20001a18 	.word	0x20001a18
 80067c0:	20000380 	.word	0x20000380
 80067c4:	20001a2c 	.word	0x20001a2c
 80067c8:	20000394 	.word	0x20000394
 80067cc:	20001a40 	.word	0x20001a40
 80067d0:	200003a8 	.word	0x200003a8
 80067d4:	20001a54 	.word	0x20001a54
 80067d8:	200003bc 	.word	0x200003bc
 80067dc:	20001a68 	.word	0x20001a68
 80067e0:	200003d0 	.word	0x200003d0
 80067e4:	20001a7c 	.word	0x20001a7c
 80067e8:	200003e4 	.word	0x200003e4
 80067ec:	20001a90 	.word	0x20001a90
 80067f0:	200003f8 	.word	0x200003f8
 80067f4:	20001aa4 	.word	0x20001aa4
 80067f8:	2000040c 	.word	0x2000040c
 80067fc:	20001ab8 	.word	0x20001ab8
 8006800:	20000420 	.word	0x20000420
 8006804:	20001acc 	.word	0x20001acc
 8006808:	20000434 	.word	0x20000434
 800680c:	20001ae0 	.word	0x20001ae0
 8006810:	20000448 	.word	0x20000448
 8006814:	20001af4 	.word	0x20001af4
 8006818:	4bc7      	ldr	r3, [pc, #796]	@ (8006b38 <loadMenuTexts+0x774>)
 800681a:	4614      	mov	r4, r2
 800681c:	461d      	mov	r5, r3
 800681e:	6828      	ldr	r0, [r5, #0]
 8006820:	6869      	ldr	r1, [r5, #4]
 8006822:	68aa      	ldr	r2, [r5, #8]
 8006824:	68eb      	ldr	r3, [r5, #12]
 8006826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006828:	7c2b      	ldrb	r3, [r5, #16]
 800682a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800682c:	4ac3      	ldr	r2, [pc, #780]	@ (8006b3c <loadMenuTexts+0x778>)
 800682e:	4bc4      	ldr	r3, [pc, #784]	@ (8006b40 <loadMenuTexts+0x77c>)
 8006830:	4614      	mov	r4, r2
 8006832:	461d      	mov	r5, r3
 8006834:	6828      	ldr	r0, [r5, #0]
 8006836:	6869      	ldr	r1, [r5, #4]
 8006838:	68aa      	ldr	r2, [r5, #8]
 800683a:	68eb      	ldr	r3, [r5, #12]
 800683c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683e:	7c2b      	ldrb	r3, [r5, #16]
 8006840:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006842:	4ac0      	ldr	r2, [pc, #768]	@ (8006b44 <loadMenuTexts+0x780>)
 8006844:	4bc0      	ldr	r3, [pc, #768]	@ (8006b48 <loadMenuTexts+0x784>)
 8006846:	4614      	mov	r4, r2
 8006848:	461d      	mov	r5, r3
 800684a:	6828      	ldr	r0, [r5, #0]
 800684c:	6869      	ldr	r1, [r5, #4]
 800684e:	68aa      	ldr	r2, [r5, #8]
 8006850:	68eb      	ldr	r3, [r5, #12]
 8006852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006854:	7c2b      	ldrb	r3, [r5, #16]
 8006856:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006858:	4abc      	ldr	r2, [pc, #752]	@ (8006b4c <loadMenuTexts+0x788>)
 800685a:	4bbd      	ldr	r3, [pc, #756]	@ (8006b50 <loadMenuTexts+0x78c>)
 800685c:	4614      	mov	r4, r2
 800685e:	461d      	mov	r5, r3
 8006860:	6828      	ldr	r0, [r5, #0]
 8006862:	6869      	ldr	r1, [r5, #4]
 8006864:	68aa      	ldr	r2, [r5, #8]
 8006866:	68eb      	ldr	r3, [r5, #12]
 8006868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800686a:	7c2b      	ldrb	r3, [r5, #16]
 800686c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800686e:	4ab9      	ldr	r2, [pc, #740]	@ (8006b54 <loadMenuTexts+0x790>)
 8006870:	4bb9      	ldr	r3, [pc, #740]	@ (8006b58 <loadMenuTexts+0x794>)
 8006872:	4614      	mov	r4, r2
 8006874:	461d      	mov	r5, r3
 8006876:	6828      	ldr	r0, [r5, #0]
 8006878:	6869      	ldr	r1, [r5, #4]
 800687a:	68aa      	ldr	r2, [r5, #8]
 800687c:	68eb      	ldr	r3, [r5, #12]
 800687e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006880:	7c2b      	ldrb	r3, [r5, #16]
 8006882:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006884:	4ab5      	ldr	r2, [pc, #724]	@ (8006b5c <loadMenuTexts+0x798>)
 8006886:	4bb6      	ldr	r3, [pc, #728]	@ (8006b60 <loadMenuTexts+0x79c>)
 8006888:	4614      	mov	r4, r2
 800688a:	461d      	mov	r5, r3
 800688c:	6828      	ldr	r0, [r5, #0]
 800688e:	6869      	ldr	r1, [r5, #4]
 8006890:	68aa      	ldr	r2, [r5, #8]
 8006892:	68eb      	ldr	r3, [r5, #12]
 8006894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006896:	7c2b      	ldrb	r3, [r5, #16]
 8006898:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800689a:	4ab2      	ldr	r2, [pc, #712]	@ (8006b64 <loadMenuTexts+0x7a0>)
 800689c:	4bb2      	ldr	r3, [pc, #712]	@ (8006b68 <loadMenuTexts+0x7a4>)
 800689e:	4614      	mov	r4, r2
 80068a0:	461d      	mov	r5, r3
 80068a2:	6828      	ldr	r0, [r5, #0]
 80068a4:	6869      	ldr	r1, [r5, #4]
 80068a6:	68aa      	ldr	r2, [r5, #8]
 80068a8:	68eb      	ldr	r3, [r5, #12]
 80068aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ac:	7c2b      	ldrb	r3, [r5, #16]
 80068ae:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80068b0:	4aae      	ldr	r2, [pc, #696]	@ (8006b6c <loadMenuTexts+0x7a8>)
 80068b2:	4baf      	ldr	r3, [pc, #700]	@ (8006b70 <loadMenuTexts+0x7ac>)
 80068b4:	4614      	mov	r4, r2
 80068b6:	461d      	mov	r5, r3
 80068b8:	6828      	ldr	r0, [r5, #0]
 80068ba:	6869      	ldr	r1, [r5, #4]
 80068bc:	68aa      	ldr	r2, [r5, #8]
 80068be:	68eb      	ldr	r3, [r5, #12]
 80068c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c2:	7c2b      	ldrb	r3, [r5, #16]
 80068c4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80068c6:	4aab      	ldr	r2, [pc, #684]	@ (8006b74 <loadMenuTexts+0x7b0>)
 80068c8:	4bab      	ldr	r3, [pc, #684]	@ (8006b78 <loadMenuTexts+0x7b4>)
 80068ca:	4614      	mov	r4, r2
 80068cc:	461d      	mov	r5, r3
 80068ce:	6828      	ldr	r0, [r5, #0]
 80068d0:	6869      	ldr	r1, [r5, #4]
 80068d2:	68aa      	ldr	r2, [r5, #8]
 80068d4:	68eb      	ldr	r3, [r5, #12]
 80068d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d8:	7c2b      	ldrb	r3, [r5, #16]
 80068da:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80068dc:	4aa7      	ldr	r2, [pc, #668]	@ (8006b7c <loadMenuTexts+0x7b8>)
 80068de:	4ba8      	ldr	r3, [pc, #672]	@ (8006b80 <loadMenuTexts+0x7bc>)
 80068e0:	4614      	mov	r4, r2
 80068e2:	461d      	mov	r5, r3
 80068e4:	6828      	ldr	r0, [r5, #0]
 80068e6:	6869      	ldr	r1, [r5, #4]
 80068e8:	68aa      	ldr	r2, [r5, #8]
 80068ea:	68eb      	ldr	r3, [r5, #12]
 80068ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ee:	7c2b      	ldrb	r3, [r5, #16]
 80068f0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80068f2:	4aa4      	ldr	r2, [pc, #656]	@ (8006b84 <loadMenuTexts+0x7c0>)
 80068f4:	4ba4      	ldr	r3, [pc, #656]	@ (8006b88 <loadMenuTexts+0x7c4>)
 80068f6:	4614      	mov	r4, r2
 80068f8:	461d      	mov	r5, r3
 80068fa:	6828      	ldr	r0, [r5, #0]
 80068fc:	6869      	ldr	r1, [r5, #4]
 80068fe:	68aa      	ldr	r2, [r5, #8]
 8006900:	68eb      	ldr	r3, [r5, #12]
 8006902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006904:	7c2b      	ldrb	r3, [r5, #16]
 8006906:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006908:	4aa0      	ldr	r2, [pc, #640]	@ (8006b8c <loadMenuTexts+0x7c8>)
 800690a:	4ba1      	ldr	r3, [pc, #644]	@ (8006b90 <loadMenuTexts+0x7cc>)
 800690c:	4614      	mov	r4, r2
 800690e:	461d      	mov	r5, r3
 8006910:	6828      	ldr	r0, [r5, #0]
 8006912:	6869      	ldr	r1, [r5, #4]
 8006914:	68aa      	ldr	r2, [r5, #8]
 8006916:	68eb      	ldr	r3, [r5, #12]
 8006918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800691a:	7c2b      	ldrb	r3, [r5, #16]
 800691c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800691e:	4a9d      	ldr	r2, [pc, #628]	@ (8006b94 <loadMenuTexts+0x7d0>)
 8006920:	4b9d      	ldr	r3, [pc, #628]	@ (8006b98 <loadMenuTexts+0x7d4>)
 8006922:	4614      	mov	r4, r2
 8006924:	461d      	mov	r5, r3
 8006926:	6828      	ldr	r0, [r5, #0]
 8006928:	6869      	ldr	r1, [r5, #4]
 800692a:	68aa      	ldr	r2, [r5, #8]
 800692c:	68eb      	ldr	r3, [r5, #12]
 800692e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006930:	7c2b      	ldrb	r3, [r5, #16]
 8006932:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006934:	4a99      	ldr	r2, [pc, #612]	@ (8006b9c <loadMenuTexts+0x7d8>)
 8006936:	4b9a      	ldr	r3, [pc, #616]	@ (8006ba0 <loadMenuTexts+0x7dc>)
 8006938:	4614      	mov	r4, r2
 800693a:	461d      	mov	r5, r3
 800693c:	6828      	ldr	r0, [r5, #0]
 800693e:	6869      	ldr	r1, [r5, #4]
 8006940:	68aa      	ldr	r2, [r5, #8]
 8006942:	68eb      	ldr	r3, [r5, #12]
 8006944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006946:	7c2b      	ldrb	r3, [r5, #16]
 8006948:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800694a:	4a96      	ldr	r2, [pc, #600]	@ (8006ba4 <loadMenuTexts+0x7e0>)
 800694c:	4b96      	ldr	r3, [pc, #600]	@ (8006ba8 <loadMenuTexts+0x7e4>)
 800694e:	4614      	mov	r4, r2
 8006950:	461d      	mov	r5, r3
 8006952:	6828      	ldr	r0, [r5, #0]
 8006954:	6869      	ldr	r1, [r5, #4]
 8006956:	68aa      	ldr	r2, [r5, #8]
 8006958:	68eb      	ldr	r3, [r5, #12]
 800695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695c:	7c2b      	ldrb	r3, [r5, #16]
 800695e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006960:	4a92      	ldr	r2, [pc, #584]	@ (8006bac <loadMenuTexts+0x7e8>)
 8006962:	4b93      	ldr	r3, [pc, #588]	@ (8006bb0 <loadMenuTexts+0x7ec>)
 8006964:	4614      	mov	r4, r2
 8006966:	461d      	mov	r5, r3
 8006968:	6828      	ldr	r0, [r5, #0]
 800696a:	6869      	ldr	r1, [r5, #4]
 800696c:	68aa      	ldr	r2, [r5, #8]
 800696e:	68eb      	ldr	r3, [r5, #12]
 8006970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006972:	7c2b      	ldrb	r3, [r5, #16]
 8006974:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006976:	4a8f      	ldr	r2, [pc, #572]	@ (8006bb4 <loadMenuTexts+0x7f0>)
 8006978:	4b8f      	ldr	r3, [pc, #572]	@ (8006bb8 <loadMenuTexts+0x7f4>)
 800697a:	4614      	mov	r4, r2
 800697c:	461d      	mov	r5, r3
 800697e:	6828      	ldr	r0, [r5, #0]
 8006980:	6869      	ldr	r1, [r5, #4]
 8006982:	68aa      	ldr	r2, [r5, #8]
 8006984:	68eb      	ldr	r3, [r5, #12]
 8006986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006988:	7c2b      	ldrb	r3, [r5, #16]
 800698a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800698c:	4a8b      	ldr	r2, [pc, #556]	@ (8006bbc <loadMenuTexts+0x7f8>)
 800698e:	4b8c      	ldr	r3, [pc, #560]	@ (8006bc0 <loadMenuTexts+0x7fc>)
 8006990:	4614      	mov	r4, r2
 8006992:	461d      	mov	r5, r3
 8006994:	6828      	ldr	r0, [r5, #0]
 8006996:	6869      	ldr	r1, [r5, #4]
 8006998:	68aa      	ldr	r2, [r5, #8]
 800699a:	68eb      	ldr	r3, [r5, #12]
 800699c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699e:	7c2b      	ldrb	r3, [r5, #16]
 80069a0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80069a2:	4a88      	ldr	r2, [pc, #544]	@ (8006bc4 <loadMenuTexts+0x800>)
 80069a4:	4b88      	ldr	r3, [pc, #544]	@ (8006bc8 <loadMenuTexts+0x804>)
 80069a6:	4614      	mov	r4, r2
 80069a8:	461d      	mov	r5, r3
 80069aa:	6828      	ldr	r0, [r5, #0]
 80069ac:	6869      	ldr	r1, [r5, #4]
 80069ae:	68aa      	ldr	r2, [r5, #8]
 80069b0:	68eb      	ldr	r3, [r5, #12]
 80069b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b4:	7c2b      	ldrb	r3, [r5, #16]
 80069b6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80069b8:	4a84      	ldr	r2, [pc, #528]	@ (8006bcc <loadMenuTexts+0x808>)
 80069ba:	4b85      	ldr	r3, [pc, #532]	@ (8006bd0 <loadMenuTexts+0x80c>)
 80069bc:	4614      	mov	r4, r2
 80069be:	461d      	mov	r5, r3
 80069c0:	6828      	ldr	r0, [r5, #0]
 80069c2:	6869      	ldr	r1, [r5, #4]
 80069c4:	68aa      	ldr	r2, [r5, #8]
 80069c6:	68eb      	ldr	r3, [r5, #12]
 80069c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ca:	7c2b      	ldrb	r3, [r5, #16]
 80069cc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80069ce:	4a81      	ldr	r2, [pc, #516]	@ (8006bd4 <loadMenuTexts+0x810>)
 80069d0:	4b81      	ldr	r3, [pc, #516]	@ (8006bd8 <loadMenuTexts+0x814>)
 80069d2:	4614      	mov	r4, r2
 80069d4:	461d      	mov	r5, r3
 80069d6:	6828      	ldr	r0, [r5, #0]
 80069d8:	6869      	ldr	r1, [r5, #4]
 80069da:	68aa      	ldr	r2, [r5, #8]
 80069dc:	68eb      	ldr	r3, [r5, #12]
 80069de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e0:	7c2b      	ldrb	r3, [r5, #16]
 80069e2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80069e4:	4a7d      	ldr	r2, [pc, #500]	@ (8006bdc <loadMenuTexts+0x818>)
 80069e6:	4b7e      	ldr	r3, [pc, #504]	@ (8006be0 <loadMenuTexts+0x81c>)
 80069e8:	4614      	mov	r4, r2
 80069ea:	461d      	mov	r5, r3
 80069ec:	6828      	ldr	r0, [r5, #0]
 80069ee:	6869      	ldr	r1, [r5, #4]
 80069f0:	68aa      	ldr	r2, [r5, #8]
 80069f2:	68eb      	ldr	r3, [r5, #12]
 80069f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f6:	7c2b      	ldrb	r3, [r5, #16]
 80069f8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80069fa:	4a7a      	ldr	r2, [pc, #488]	@ (8006be4 <loadMenuTexts+0x820>)
 80069fc:	4b7a      	ldr	r3, [pc, #488]	@ (8006be8 <loadMenuTexts+0x824>)
 80069fe:	4614      	mov	r4, r2
 8006a00:	461d      	mov	r5, r3
 8006a02:	6828      	ldr	r0, [r5, #0]
 8006a04:	6869      	ldr	r1, [r5, #4]
 8006a06:	68aa      	ldr	r2, [r5, #8]
 8006a08:	68eb      	ldr	r3, [r5, #12]
 8006a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0c:	7c2b      	ldrb	r3, [r5, #16]
 8006a0e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006a10:	4a76      	ldr	r2, [pc, #472]	@ (8006bec <loadMenuTexts+0x828>)
 8006a12:	4b77      	ldr	r3, [pc, #476]	@ (8006bf0 <loadMenuTexts+0x82c>)
 8006a14:	4614      	mov	r4, r2
 8006a16:	461d      	mov	r5, r3
 8006a18:	6828      	ldr	r0, [r5, #0]
 8006a1a:	6869      	ldr	r1, [r5, #4]
 8006a1c:	68aa      	ldr	r2, [r5, #8]
 8006a1e:	68eb      	ldr	r3, [r5, #12]
 8006a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a22:	7c2b      	ldrb	r3, [r5, #16]
 8006a24:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006a26:	4a73      	ldr	r2, [pc, #460]	@ (8006bf4 <loadMenuTexts+0x830>)
 8006a28:	4b73      	ldr	r3, [pc, #460]	@ (8006bf8 <loadMenuTexts+0x834>)
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	6828      	ldr	r0, [r5, #0]
 8006a30:	6869      	ldr	r1, [r5, #4]
 8006a32:	68aa      	ldr	r2, [r5, #8]
 8006a34:	68eb      	ldr	r3, [r5, #12]
 8006a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a38:	7c2b      	ldrb	r3, [r5, #16]
 8006a3a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006a3c:	4a6f      	ldr	r2, [pc, #444]	@ (8006bfc <loadMenuTexts+0x838>)
 8006a3e:	4b70      	ldr	r3, [pc, #448]	@ (8006c00 <loadMenuTexts+0x83c>)
 8006a40:	4614      	mov	r4, r2
 8006a42:	461d      	mov	r5, r3
 8006a44:	6828      	ldr	r0, [r5, #0]
 8006a46:	6869      	ldr	r1, [r5, #4]
 8006a48:	68aa      	ldr	r2, [r5, #8]
 8006a4a:	68eb      	ldr	r3, [r5, #12]
 8006a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4e:	7c2b      	ldrb	r3, [r5, #16]
 8006a50:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006a52:	4a6c      	ldr	r2, [pc, #432]	@ (8006c04 <loadMenuTexts+0x840>)
 8006a54:	4b6c      	ldr	r3, [pc, #432]	@ (8006c08 <loadMenuTexts+0x844>)
 8006a56:	4614      	mov	r4, r2
 8006a58:	461d      	mov	r5, r3
 8006a5a:	6828      	ldr	r0, [r5, #0]
 8006a5c:	6869      	ldr	r1, [r5, #4]
 8006a5e:	68aa      	ldr	r2, [r5, #8]
 8006a60:	68eb      	ldr	r3, [r5, #12]
 8006a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a64:	7c2b      	ldrb	r3, [r5, #16]
 8006a66:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006a68:	4a68      	ldr	r2, [pc, #416]	@ (8006c0c <loadMenuTexts+0x848>)
 8006a6a:	4b69      	ldr	r3, [pc, #420]	@ (8006c10 <loadMenuTexts+0x84c>)
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	6828      	ldr	r0, [r5, #0]
 8006a72:	6869      	ldr	r1, [r5, #4]
 8006a74:	68aa      	ldr	r2, [r5, #8]
 8006a76:	68eb      	ldr	r3, [r5, #12]
 8006a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7a:	7c2b      	ldrb	r3, [r5, #16]
 8006a7c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006a7e:	4a65      	ldr	r2, [pc, #404]	@ (8006c14 <loadMenuTexts+0x850>)
 8006a80:	4b65      	ldr	r3, [pc, #404]	@ (8006c18 <loadMenuTexts+0x854>)
 8006a82:	4614      	mov	r4, r2
 8006a84:	461d      	mov	r5, r3
 8006a86:	6828      	ldr	r0, [r5, #0]
 8006a88:	6869      	ldr	r1, [r5, #4]
 8006a8a:	68aa      	ldr	r2, [r5, #8]
 8006a8c:	68eb      	ldr	r3, [r5, #12]
 8006a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a90:	7c2b      	ldrb	r3, [r5, #16]
 8006a92:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006a94:	4a61      	ldr	r2, [pc, #388]	@ (8006c1c <loadMenuTexts+0x858>)
 8006a96:	4b62      	ldr	r3, [pc, #392]	@ (8006c20 <loadMenuTexts+0x85c>)
 8006a98:	4614      	mov	r4, r2
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	6828      	ldr	r0, [r5, #0]
 8006a9e:	6869      	ldr	r1, [r5, #4]
 8006aa0:	68aa      	ldr	r2, [r5, #8]
 8006aa2:	68eb      	ldr	r3, [r5, #12]
 8006aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa6:	7c2b      	ldrb	r3, [r5, #16]
 8006aa8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8006c24 <loadMenuTexts+0x860>)
 8006aac:	4b5e      	ldr	r3, [pc, #376]	@ (8006c28 <loadMenuTexts+0x864>)
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	6828      	ldr	r0, [r5, #0]
 8006ab4:	6869      	ldr	r1, [r5, #4]
 8006ab6:	68aa      	ldr	r2, [r5, #8]
 8006ab8:	68eb      	ldr	r3, [r5, #12]
 8006aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006abc:	7c2b      	ldrb	r3, [r5, #16]
 8006abe:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006ac0:	4a5a      	ldr	r2, [pc, #360]	@ (8006c2c <loadMenuTexts+0x868>)
 8006ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c30 <loadMenuTexts+0x86c>)
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	6828      	ldr	r0, [r5, #0]
 8006aca:	6869      	ldr	r1, [r5, #4]
 8006acc:	68aa      	ldr	r2, [r5, #8]
 8006ace:	68eb      	ldr	r3, [r5, #12]
 8006ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad2:	7c2b      	ldrb	r3, [r5, #16]
 8006ad4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8006ad6:	4a57      	ldr	r2, [pc, #348]	@ (8006c34 <loadMenuTexts+0x870>)
 8006ad8:	4b57      	ldr	r3, [pc, #348]	@ (8006c38 <loadMenuTexts+0x874>)
 8006ada:	4614      	mov	r4, r2
 8006adc:	461d      	mov	r5, r3
 8006ade:	6828      	ldr	r0, [r5, #0]
 8006ae0:	6869      	ldr	r1, [r5, #4]
 8006ae2:	68aa      	ldr	r2, [r5, #8]
 8006ae4:	68eb      	ldr	r3, [r5, #12]
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	7c2b      	ldrb	r3, [r5, #16]
 8006aea:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006aec:	4a53      	ldr	r2, [pc, #332]	@ (8006c3c <loadMenuTexts+0x878>)
 8006aee:	4b54      	ldr	r3, [pc, #336]	@ (8006c40 <loadMenuTexts+0x87c>)
 8006af0:	4614      	mov	r4, r2
 8006af2:	461d      	mov	r5, r3
 8006af4:	6828      	ldr	r0, [r5, #0]
 8006af6:	6869      	ldr	r1, [r5, #4]
 8006af8:	68aa      	ldr	r2, [r5, #8]
 8006afa:	68eb      	ldr	r3, [r5, #12]
 8006afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afe:	7c2b      	ldrb	r3, [r5, #16]
 8006b00:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006b02:	4a50      	ldr	r2, [pc, #320]	@ (8006c44 <loadMenuTexts+0x880>)
 8006b04:	4b50      	ldr	r3, [pc, #320]	@ (8006c48 <loadMenuTexts+0x884>)
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	6828      	ldr	r0, [r5, #0]
 8006b0c:	6869      	ldr	r1, [r5, #4]
 8006b0e:	68aa      	ldr	r2, [r5, #8]
 8006b10:	68eb      	ldr	r3, [r5, #12]
 8006b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b14:	7c2b      	ldrb	r3, [r5, #16]
 8006b16:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006b18:	4a4c      	ldr	r2, [pc, #304]	@ (8006c4c <loadMenuTexts+0x888>)
 8006b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006c50 <loadMenuTexts+0x88c>)
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	6828      	ldr	r0, [r5, #0]
 8006b22:	6869      	ldr	r1, [r5, #4]
 8006b24:	68aa      	ldr	r2, [r5, #8]
 8006b26:	68eb      	ldr	r3, [r5, #12]
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	7c2b      	ldrb	r3, [r5, #16]
 8006b2c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006b2e:	4a49      	ldr	r2, [pc, #292]	@ (8006c54 <loadMenuTexts+0x890>)
 8006b30:	4b49      	ldr	r3, [pc, #292]	@ (8006c58 <loadMenuTexts+0x894>)
 8006b32:	4614      	mov	r4, r2
 8006b34:	461d      	mov	r5, r3
 8006b36:	e091      	b.n	8006c5c <loadMenuTexts+0x898>
 8006b38:	2000045c 	.word	0x2000045c
 8006b3c:	20001b08 	.word	0x20001b08
 8006b40:	20000470 	.word	0x20000470
 8006b44:	20001b1c 	.word	0x20001b1c
 8006b48:	20000484 	.word	0x20000484
 8006b4c:	20001b30 	.word	0x20001b30
 8006b50:	20000498 	.word	0x20000498
 8006b54:	20001b44 	.word	0x20001b44
 8006b58:	200004ac 	.word	0x200004ac
 8006b5c:	20001b58 	.word	0x20001b58
 8006b60:	200004c0 	.word	0x200004c0
 8006b64:	20001b6c 	.word	0x20001b6c
 8006b68:	200004d4 	.word	0x200004d4
 8006b6c:	20001b80 	.word	0x20001b80
 8006b70:	200004e8 	.word	0x200004e8
 8006b74:	20001b94 	.word	0x20001b94
 8006b78:	200004fc 	.word	0x200004fc
 8006b7c:	20001ba8 	.word	0x20001ba8
 8006b80:	20000510 	.word	0x20000510
 8006b84:	20001bbc 	.word	0x20001bbc
 8006b88:	20000524 	.word	0x20000524
 8006b8c:	20001bd0 	.word	0x20001bd0
 8006b90:	20000538 	.word	0x20000538
 8006b94:	20001be4 	.word	0x20001be4
 8006b98:	2000054c 	.word	0x2000054c
 8006b9c:	20001bf8 	.word	0x20001bf8
 8006ba0:	20000560 	.word	0x20000560
 8006ba4:	20001c0c 	.word	0x20001c0c
 8006ba8:	20000574 	.word	0x20000574
 8006bac:	20001c20 	.word	0x20001c20
 8006bb0:	20000588 	.word	0x20000588
 8006bb4:	20001c34 	.word	0x20001c34
 8006bb8:	2000059c 	.word	0x2000059c
 8006bbc:	20001c48 	.word	0x20001c48
 8006bc0:	200005b0 	.word	0x200005b0
 8006bc4:	20001c5c 	.word	0x20001c5c
 8006bc8:	200005c4 	.word	0x200005c4
 8006bcc:	20001c70 	.word	0x20001c70
 8006bd0:	200005d8 	.word	0x200005d8
 8006bd4:	20001c84 	.word	0x20001c84
 8006bd8:	200005ec 	.word	0x200005ec
 8006bdc:	20001c98 	.word	0x20001c98
 8006be0:	20000600 	.word	0x20000600
 8006be4:	20001cac 	.word	0x20001cac
 8006be8:	20000614 	.word	0x20000614
 8006bec:	20001cc0 	.word	0x20001cc0
 8006bf0:	20000628 	.word	0x20000628
 8006bf4:	20001cd4 	.word	0x20001cd4
 8006bf8:	2000063c 	.word	0x2000063c
 8006bfc:	20001ce8 	.word	0x20001ce8
 8006c00:	20000650 	.word	0x20000650
 8006c04:	20001cfc 	.word	0x20001cfc
 8006c08:	20000664 	.word	0x20000664
 8006c0c:	20001d10 	.word	0x20001d10
 8006c10:	20000678 	.word	0x20000678
 8006c14:	20001d24 	.word	0x20001d24
 8006c18:	2000068c 	.word	0x2000068c
 8006c1c:	20001d38 	.word	0x20001d38
 8006c20:	200006a0 	.word	0x200006a0
 8006c24:	20001d4c 	.word	0x20001d4c
 8006c28:	200006b4 	.word	0x200006b4
 8006c2c:	20001d60 	.word	0x20001d60
 8006c30:	200006c8 	.word	0x200006c8
 8006c34:	20001d74 	.word	0x20001d74
 8006c38:	200006dc 	.word	0x200006dc
 8006c3c:	20001d88 	.word	0x20001d88
 8006c40:	200006f0 	.word	0x200006f0
 8006c44:	20001d9c 	.word	0x20001d9c
 8006c48:	20000c7c 	.word	0x20000c7c
 8006c4c:	20001db0 	.word	0x20001db0
 8006c50:	20000c90 	.word	0x20000c90
 8006c54:	20001dc4 	.word	0x20001dc4
 8006c58:	20000ca4 	.word	0x20000ca4
 8006c5c:	6828      	ldr	r0, [r5, #0]
 8006c5e:	6869      	ldr	r1, [r5, #4]
 8006c60:	68aa      	ldr	r2, [r5, #8]
 8006c62:	68eb      	ldr	r3, [r5, #12]
 8006c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c66:	7c2b      	ldrb	r3, [r5, #16]
 8006c68:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006c6a:	4a59      	ldr	r2, [pc, #356]	@ (8006dd0 <loadMenuTexts+0xa0c>)
 8006c6c:	4b59      	ldr	r3, [pc, #356]	@ (8006dd4 <loadMenuTexts+0xa10>)
 8006c6e:	4614      	mov	r4, r2
 8006c70:	461d      	mov	r5, r3
 8006c72:	6828      	ldr	r0, [r5, #0]
 8006c74:	6869      	ldr	r1, [r5, #4]
 8006c76:	68aa      	ldr	r2, [r5, #8]
 8006c78:	68eb      	ldr	r3, [r5, #12]
 8006c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c7c:	7c2b      	ldrb	r3, [r5, #16]
 8006c7e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006c80:	4a55      	ldr	r2, [pc, #340]	@ (8006dd8 <loadMenuTexts+0xa14>)
 8006c82:	4b56      	ldr	r3, [pc, #344]	@ (8006ddc <loadMenuTexts+0xa18>)
 8006c84:	4614      	mov	r4, r2
 8006c86:	461d      	mov	r5, r3
 8006c88:	6828      	ldr	r0, [r5, #0]
 8006c8a:	6869      	ldr	r1, [r5, #4]
 8006c8c:	68aa      	ldr	r2, [r5, #8]
 8006c8e:	68eb      	ldr	r3, [r5, #12]
 8006c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c92:	7c2b      	ldrb	r3, [r5, #16]
 8006c94:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006c96:	4a52      	ldr	r2, [pc, #328]	@ (8006de0 <loadMenuTexts+0xa1c>)
 8006c98:	4b52      	ldr	r3, [pc, #328]	@ (8006de4 <loadMenuTexts+0xa20>)
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	461d      	mov	r5, r3
 8006c9e:	6828      	ldr	r0, [r5, #0]
 8006ca0:	6869      	ldr	r1, [r5, #4]
 8006ca2:	68aa      	ldr	r2, [r5, #8]
 8006ca4:	68eb      	ldr	r3, [r5, #12]
 8006ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca8:	7c2b      	ldrb	r3, [r5, #16]
 8006caa:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006cac:	4a4e      	ldr	r2, [pc, #312]	@ (8006de8 <loadMenuTexts+0xa24>)
 8006cae:	4b4f      	ldr	r3, [pc, #316]	@ (8006dec <loadMenuTexts+0xa28>)
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	6828      	ldr	r0, [r5, #0]
 8006cb6:	6869      	ldr	r1, [r5, #4]
 8006cb8:	68aa      	ldr	r2, [r5, #8]
 8006cba:	68eb      	ldr	r3, [r5, #12]
 8006cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cbe:	7c2b      	ldrb	r3, [r5, #16]
 8006cc0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8006df0 <loadMenuTexts+0xa2c>)
 8006cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8006df4 <loadMenuTexts+0xa30>)
 8006cc6:	4614      	mov	r4, r2
 8006cc8:	461d      	mov	r5, r3
 8006cca:	6828      	ldr	r0, [r5, #0]
 8006ccc:	6869      	ldr	r1, [r5, #4]
 8006cce:	68aa      	ldr	r2, [r5, #8]
 8006cd0:	68eb      	ldr	r3, [r5, #12]
 8006cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd4:	7c2b      	ldrb	r3, [r5, #16]
 8006cd6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006cd8:	4a47      	ldr	r2, [pc, #284]	@ (8006df8 <loadMenuTexts+0xa34>)
 8006cda:	4b48      	ldr	r3, [pc, #288]	@ (8006dfc <loadMenuTexts+0xa38>)
 8006cdc:	4614      	mov	r4, r2
 8006cde:	461d      	mov	r5, r3
 8006ce0:	6828      	ldr	r0, [r5, #0]
 8006ce2:	6869      	ldr	r1, [r5, #4]
 8006ce4:	68aa      	ldr	r2, [r5, #8]
 8006ce6:	68eb      	ldr	r3, [r5, #12]
 8006ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cea:	7c2b      	ldrb	r3, [r5, #16]
 8006cec:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006cee:	4a44      	ldr	r2, [pc, #272]	@ (8006e00 <loadMenuTexts+0xa3c>)
 8006cf0:	4b44      	ldr	r3, [pc, #272]	@ (8006e04 <loadMenuTexts+0xa40>)
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	461d      	mov	r5, r3
 8006cf6:	6828      	ldr	r0, [r5, #0]
 8006cf8:	6869      	ldr	r1, [r5, #4]
 8006cfa:	68aa      	ldr	r2, [r5, #8]
 8006cfc:	68eb      	ldr	r3, [r5, #12]
 8006cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d00:	7c2b      	ldrb	r3, [r5, #16]
 8006d02:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006d04:	4a40      	ldr	r2, [pc, #256]	@ (8006e08 <loadMenuTexts+0xa44>)
 8006d06:	4b41      	ldr	r3, [pc, #260]	@ (8006e0c <loadMenuTexts+0xa48>)
 8006d08:	4614      	mov	r4, r2
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	6828      	ldr	r0, [r5, #0]
 8006d0e:	6869      	ldr	r1, [r5, #4]
 8006d10:	68aa      	ldr	r2, [r5, #8]
 8006d12:	68eb      	ldr	r3, [r5, #12]
 8006d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d16:	7c2b      	ldrb	r3, [r5, #16]
 8006d18:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e10 <loadMenuTexts+0xa4c>)
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e14 <loadMenuTexts+0xa50>)
 8006d1e:	4614      	mov	r4, r2
 8006d20:	461d      	mov	r5, r3
 8006d22:	6828      	ldr	r0, [r5, #0]
 8006d24:	6869      	ldr	r1, [r5, #4]
 8006d26:	68aa      	ldr	r2, [r5, #8]
 8006d28:	68eb      	ldr	r3, [r5, #12]
 8006d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2c:	7c2b      	ldrb	r3, [r5, #16]
 8006d2e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006d30:	4a39      	ldr	r2, [pc, #228]	@ (8006e18 <loadMenuTexts+0xa54>)
 8006d32:	4b3a      	ldr	r3, [pc, #232]	@ (8006e1c <loadMenuTexts+0xa58>)
 8006d34:	4614      	mov	r4, r2
 8006d36:	461d      	mov	r5, r3
 8006d38:	6828      	ldr	r0, [r5, #0]
 8006d3a:	6869      	ldr	r1, [r5, #4]
 8006d3c:	68aa      	ldr	r2, [r5, #8]
 8006d3e:	68eb      	ldr	r3, [r5, #12]
 8006d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d42:	7c2b      	ldrb	r3, [r5, #16]
 8006d44:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006d46:	4a36      	ldr	r2, [pc, #216]	@ (8006e20 <loadMenuTexts+0xa5c>)
 8006d48:	4b36      	ldr	r3, [pc, #216]	@ (8006e24 <loadMenuTexts+0xa60>)
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	461d      	mov	r5, r3
 8006d4e:	6828      	ldr	r0, [r5, #0]
 8006d50:	6869      	ldr	r1, [r5, #4]
 8006d52:	68aa      	ldr	r2, [r5, #8]
 8006d54:	68eb      	ldr	r3, [r5, #12]
 8006d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d58:	7c2b      	ldrb	r3, [r5, #16]
 8006d5a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006d5c:	4a32      	ldr	r2, [pc, #200]	@ (8006e28 <loadMenuTexts+0xa64>)
 8006d5e:	4b33      	ldr	r3, [pc, #204]	@ (8006e2c <loadMenuTexts+0xa68>)
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	6828      	ldr	r0, [r5, #0]
 8006d66:	6869      	ldr	r1, [r5, #4]
 8006d68:	68aa      	ldr	r2, [r5, #8]
 8006d6a:	68eb      	ldr	r3, [r5, #12]
 8006d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d6e:	7c2b      	ldrb	r3, [r5, #16]
 8006d70:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006d72:	4a2f      	ldr	r2, [pc, #188]	@ (8006e30 <loadMenuTexts+0xa6c>)
 8006d74:	4b2f      	ldr	r3, [pc, #188]	@ (8006e34 <loadMenuTexts+0xa70>)
 8006d76:	4614      	mov	r4, r2
 8006d78:	461d      	mov	r5, r3
 8006d7a:	6828      	ldr	r0, [r5, #0]
 8006d7c:	6869      	ldr	r1, [r5, #4]
 8006d7e:	68aa      	ldr	r2, [r5, #8]
 8006d80:	68eb      	ldr	r3, [r5, #12]
 8006d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d84:	7c2b      	ldrb	r3, [r5, #16]
 8006d86:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006d88:	4a2b      	ldr	r2, [pc, #172]	@ (8006e38 <loadMenuTexts+0xa74>)
 8006d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e3c <loadMenuTexts+0xa78>)
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	6828      	ldr	r0, [r5, #0]
 8006d92:	6869      	ldr	r1, [r5, #4]
 8006d94:	68aa      	ldr	r2, [r5, #8]
 8006d96:	68eb      	ldr	r3, [r5, #12]
 8006d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d9a:	7c2b      	ldrb	r3, [r5, #16]
 8006d9c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006d9e:	4a28      	ldr	r2, [pc, #160]	@ (8006e40 <loadMenuTexts+0xa7c>)
 8006da0:	4b28      	ldr	r3, [pc, #160]	@ (8006e44 <loadMenuTexts+0xa80>)
 8006da2:	4614      	mov	r4, r2
 8006da4:	461d      	mov	r5, r3
 8006da6:	6828      	ldr	r0, [r5, #0]
 8006da8:	6869      	ldr	r1, [r5, #4]
 8006daa:	68aa      	ldr	r2, [r5, #8]
 8006dac:	68eb      	ldr	r3, [r5, #12]
 8006dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db0:	7c2b      	ldrb	r3, [r5, #16]
 8006db2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006db4:	4a24      	ldr	r2, [pc, #144]	@ (8006e48 <loadMenuTexts+0xa84>)
 8006db6:	4b25      	ldr	r3, [pc, #148]	@ (8006e4c <loadMenuTexts+0xa88>)
 8006db8:	4614      	mov	r4, r2
 8006dba:	461d      	mov	r5, r3
 8006dbc:	6828      	ldr	r0, [r5, #0]
 8006dbe:	6869      	ldr	r1, [r5, #4]
 8006dc0:	68aa      	ldr	r2, [r5, #8]
 8006dc2:	68eb      	ldr	r3, [r5, #12]
 8006dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc6:	7c2b      	ldrb	r3, [r5, #16]
 8006dc8:	7023      	strb	r3, [r4, #0]
 8006dca:	f000 bd3a 	b.w	8007842 <loadMenuTexts+0x147e>
 8006dce:	bf00      	nop
 8006dd0:	20001dd8 	.word	0x20001dd8
 8006dd4:	20000cb8 	.word	0x20000cb8
 8006dd8:	20001dec 	.word	0x20001dec
 8006ddc:	20000d1c 	.word	0x20000d1c
 8006de0:	20001e00 	.word	0x20001e00
 8006de4:	20000d30 	.word	0x20000d30
 8006de8:	20001e14 	.word	0x20001e14
 8006dec:	20000d6c 	.word	0x20000d6c
 8006df0:	20001e28 	.word	0x20001e28
 8006df4:	20000d80 	.word	0x20000d80
 8006df8:	20001e3c 	.word	0x20001e3c
 8006dfc:	20000dbc 	.word	0x20000dbc
 8006e00:	20001e50 	.word	0x20001e50
 8006e04:	20000dd0 	.word	0x20000dd0
 8006e08:	20001e64 	.word	0x20001e64
 8006e0c:	20000e0c 	.word	0x20000e0c
 8006e10:	20001e78 	.word	0x20001e78
 8006e14:	20000e34 	.word	0x20000e34
 8006e18:	20001e8c 	.word	0x20001e8c
 8006e1c:	20000e5c 	.word	0x20000e5c
 8006e20:	20001ea0 	.word	0x20001ea0
 8006e24:	20000e84 	.word	0x20000e84
 8006e28:	20001eb4 	.word	0x20001eb4
 8006e2c:	20000eac 	.word	0x20000eac
 8006e30:	20001ec8 	.word	0x20001ec8
 8006e34:	20000ed4 	.word	0x20000ed4
 8006e38:	20001edc 	.word	0x20001edc
 8006e3c:	20000efc 	.word	0x20000efc
 8006e40:	20001ef0 	.word	0x20001ef0
 8006e44:	20000f24 	.word	0x20000f24
 8006e48:	20001f04 	.word	0x20001f04
 8006e4c:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006e50:	4ac6      	ldr	r2, [pc, #792]	@ (800716c <loadMenuTexts+0xda8>)
 8006e52:	4bc7      	ldr	r3, [pc, #796]	@ (8007170 <loadMenuTexts+0xdac>)
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	6828      	ldr	r0, [r5, #0]
 8006e5a:	6869      	ldr	r1, [r5, #4]
 8006e5c:	68aa      	ldr	r2, [r5, #8]
 8006e5e:	68eb      	ldr	r3, [r5, #12]
 8006e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e62:	7c2b      	ldrb	r3, [r5, #16]
 8006e64:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006e66:	4ac3      	ldr	r2, [pc, #780]	@ (8007174 <loadMenuTexts+0xdb0>)
 8006e68:	4bc3      	ldr	r3, [pc, #780]	@ (8007178 <loadMenuTexts+0xdb4>)
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	6828      	ldr	r0, [r5, #0]
 8006e70:	6869      	ldr	r1, [r5, #4]
 8006e72:	68aa      	ldr	r2, [r5, #8]
 8006e74:	68eb      	ldr	r3, [r5, #12]
 8006e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e78:	7c2b      	ldrb	r3, [r5, #16]
 8006e7a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006e7c:	4abf      	ldr	r2, [pc, #764]	@ (800717c <loadMenuTexts+0xdb8>)
 8006e7e:	4bc0      	ldr	r3, [pc, #768]	@ (8007180 <loadMenuTexts+0xdbc>)
 8006e80:	4614      	mov	r4, r2
 8006e82:	461d      	mov	r5, r3
 8006e84:	6828      	ldr	r0, [r5, #0]
 8006e86:	6869      	ldr	r1, [r5, #4]
 8006e88:	68aa      	ldr	r2, [r5, #8]
 8006e8a:	68eb      	ldr	r3, [r5, #12]
 8006e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8e:	7c2b      	ldrb	r3, [r5, #16]
 8006e90:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006e92:	4abc      	ldr	r2, [pc, #752]	@ (8007184 <loadMenuTexts+0xdc0>)
 8006e94:	4bbc      	ldr	r3, [pc, #752]	@ (8007188 <loadMenuTexts+0xdc4>)
 8006e96:	4614      	mov	r4, r2
 8006e98:	461d      	mov	r5, r3
 8006e9a:	6828      	ldr	r0, [r5, #0]
 8006e9c:	6869      	ldr	r1, [r5, #4]
 8006e9e:	68aa      	ldr	r2, [r5, #8]
 8006ea0:	68eb      	ldr	r3, [r5, #12]
 8006ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea4:	7c2b      	ldrb	r3, [r5, #16]
 8006ea6:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006ea8:	4ab8      	ldr	r2, [pc, #736]	@ (800718c <loadMenuTexts+0xdc8>)
 8006eaa:	4bb9      	ldr	r3, [pc, #740]	@ (8007190 <loadMenuTexts+0xdcc>)
 8006eac:	4614      	mov	r4, r2
 8006eae:	461d      	mov	r5, r3
 8006eb0:	6828      	ldr	r0, [r5, #0]
 8006eb2:	6869      	ldr	r1, [r5, #4]
 8006eb4:	68aa      	ldr	r2, [r5, #8]
 8006eb6:	68eb      	ldr	r3, [r5, #12]
 8006eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eba:	7c2b      	ldrb	r3, [r5, #16]
 8006ebc:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006ebe:	4ab5      	ldr	r2, [pc, #724]	@ (8007194 <loadMenuTexts+0xdd0>)
 8006ec0:	4bb5      	ldr	r3, [pc, #724]	@ (8007198 <loadMenuTexts+0xdd4>)
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	6828      	ldr	r0, [r5, #0]
 8006ec8:	6869      	ldr	r1, [r5, #4]
 8006eca:	68aa      	ldr	r2, [r5, #8]
 8006ecc:	68eb      	ldr	r3, [r5, #12]
 8006ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed0:	7c2b      	ldrb	r3, [r5, #16]
 8006ed2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006ed4:	4ab1      	ldr	r2, [pc, #708]	@ (800719c <loadMenuTexts+0xdd8>)
 8006ed6:	4bb2      	ldr	r3, [pc, #712]	@ (80071a0 <loadMenuTexts+0xddc>)
 8006ed8:	4614      	mov	r4, r2
 8006eda:	461d      	mov	r5, r3
 8006edc:	6828      	ldr	r0, [r5, #0]
 8006ede:	6869      	ldr	r1, [r5, #4]
 8006ee0:	68aa      	ldr	r2, [r5, #8]
 8006ee2:	68eb      	ldr	r3, [r5, #12]
 8006ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee6:	7c2b      	ldrb	r3, [r5, #16]
 8006ee8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006eea:	4aae      	ldr	r2, [pc, #696]	@ (80071a4 <loadMenuTexts+0xde0>)
 8006eec:	4bae      	ldr	r3, [pc, #696]	@ (80071a8 <loadMenuTexts+0xde4>)
 8006eee:	4614      	mov	r4, r2
 8006ef0:	461d      	mov	r5, r3
 8006ef2:	6828      	ldr	r0, [r5, #0]
 8006ef4:	6869      	ldr	r1, [r5, #4]
 8006ef6:	68aa      	ldr	r2, [r5, #8]
 8006ef8:	68eb      	ldr	r3, [r5, #12]
 8006efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efc:	7c2b      	ldrb	r3, [r5, #16]
 8006efe:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006f00:	4aaa      	ldr	r2, [pc, #680]	@ (80071ac <loadMenuTexts+0xde8>)
 8006f02:	4bab      	ldr	r3, [pc, #684]	@ (80071b0 <loadMenuTexts+0xdec>)
 8006f04:	4614      	mov	r4, r2
 8006f06:	461d      	mov	r5, r3
 8006f08:	6828      	ldr	r0, [r5, #0]
 8006f0a:	6869      	ldr	r1, [r5, #4]
 8006f0c:	68aa      	ldr	r2, [r5, #8]
 8006f0e:	68eb      	ldr	r3, [r5, #12]
 8006f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f12:	7c2b      	ldrb	r3, [r5, #16]
 8006f14:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006f16:	4aa7      	ldr	r2, [pc, #668]	@ (80071b4 <loadMenuTexts+0xdf0>)
 8006f18:	4ba7      	ldr	r3, [pc, #668]	@ (80071b8 <loadMenuTexts+0xdf4>)
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	461d      	mov	r5, r3
 8006f1e:	6828      	ldr	r0, [r5, #0]
 8006f20:	6869      	ldr	r1, [r5, #4]
 8006f22:	68aa      	ldr	r2, [r5, #8]
 8006f24:	68eb      	ldr	r3, [r5, #12]
 8006f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f28:	7c2b      	ldrb	r3, [r5, #16]
 8006f2a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006f2c:	4aa3      	ldr	r2, [pc, #652]	@ (80071bc <loadMenuTexts+0xdf8>)
 8006f2e:	4ba4      	ldr	r3, [pc, #656]	@ (80071c0 <loadMenuTexts+0xdfc>)
 8006f30:	4614      	mov	r4, r2
 8006f32:	461d      	mov	r5, r3
 8006f34:	6828      	ldr	r0, [r5, #0]
 8006f36:	6869      	ldr	r1, [r5, #4]
 8006f38:	68aa      	ldr	r2, [r5, #8]
 8006f3a:	68eb      	ldr	r3, [r5, #12]
 8006f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3e:	7c2b      	ldrb	r3, [r5, #16]
 8006f40:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006f42:	4aa0      	ldr	r2, [pc, #640]	@ (80071c4 <loadMenuTexts+0xe00>)
 8006f44:	4ba0      	ldr	r3, [pc, #640]	@ (80071c8 <loadMenuTexts+0xe04>)
 8006f46:	4614      	mov	r4, r2
 8006f48:	461d      	mov	r5, r3
 8006f4a:	6828      	ldr	r0, [r5, #0]
 8006f4c:	6869      	ldr	r1, [r5, #4]
 8006f4e:	68aa      	ldr	r2, [r5, #8]
 8006f50:	68eb      	ldr	r3, [r5, #12]
 8006f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f54:	7c2b      	ldrb	r3, [r5, #16]
 8006f56:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006f58:	4a9c      	ldr	r2, [pc, #624]	@ (80071cc <loadMenuTexts+0xe08>)
 8006f5a:	4b9d      	ldr	r3, [pc, #628]	@ (80071d0 <loadMenuTexts+0xe0c>)
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	461d      	mov	r5, r3
 8006f60:	6828      	ldr	r0, [r5, #0]
 8006f62:	6869      	ldr	r1, [r5, #4]
 8006f64:	68aa      	ldr	r2, [r5, #8]
 8006f66:	68eb      	ldr	r3, [r5, #12]
 8006f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f6a:	7c2b      	ldrb	r3, [r5, #16]
 8006f6c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006f6e:	4a99      	ldr	r2, [pc, #612]	@ (80071d4 <loadMenuTexts+0xe10>)
 8006f70:	4b99      	ldr	r3, [pc, #612]	@ (80071d8 <loadMenuTexts+0xe14>)
 8006f72:	4614      	mov	r4, r2
 8006f74:	461d      	mov	r5, r3
 8006f76:	6828      	ldr	r0, [r5, #0]
 8006f78:	6869      	ldr	r1, [r5, #4]
 8006f7a:	68aa      	ldr	r2, [r5, #8]
 8006f7c:	68eb      	ldr	r3, [r5, #12]
 8006f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f80:	7c2b      	ldrb	r3, [r5, #16]
 8006f82:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006f84:	4a95      	ldr	r2, [pc, #596]	@ (80071dc <loadMenuTexts+0xe18>)
 8006f86:	4b96      	ldr	r3, [pc, #600]	@ (80071e0 <loadMenuTexts+0xe1c>)
 8006f88:	4614      	mov	r4, r2
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	6828      	ldr	r0, [r5, #0]
 8006f8e:	6869      	ldr	r1, [r5, #4]
 8006f90:	68aa      	ldr	r2, [r5, #8]
 8006f92:	68eb      	ldr	r3, [r5, #12]
 8006f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f96:	7c2b      	ldrb	r3, [r5, #16]
 8006f98:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006f9a:	4a92      	ldr	r2, [pc, #584]	@ (80071e4 <loadMenuTexts+0xe20>)
 8006f9c:	4b92      	ldr	r3, [pc, #584]	@ (80071e8 <loadMenuTexts+0xe24>)
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	461d      	mov	r5, r3
 8006fa2:	6828      	ldr	r0, [r5, #0]
 8006fa4:	6869      	ldr	r1, [r5, #4]
 8006fa6:	68aa      	ldr	r2, [r5, #8]
 8006fa8:	68eb      	ldr	r3, [r5, #12]
 8006faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fac:	7c2b      	ldrb	r3, [r5, #16]
 8006fae:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80071ec <loadMenuTexts+0xe28>)
 8006fb2:	4b8f      	ldr	r3, [pc, #572]	@ (80071f0 <loadMenuTexts+0xe2c>)
 8006fb4:	4614      	mov	r4, r2
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	6828      	ldr	r0, [r5, #0]
 8006fba:	6869      	ldr	r1, [r5, #4]
 8006fbc:	68aa      	ldr	r2, [r5, #8]
 8006fbe:	68eb      	ldr	r3, [r5, #12]
 8006fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc2:	7c2b      	ldrb	r3, [r5, #16]
 8006fc4:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006fc6:	4a8b      	ldr	r2, [pc, #556]	@ (80071f4 <loadMenuTexts+0xe30>)
 8006fc8:	4b8b      	ldr	r3, [pc, #556]	@ (80071f8 <loadMenuTexts+0xe34>)
 8006fca:	4614      	mov	r4, r2
 8006fcc:	461d      	mov	r5, r3
 8006fce:	6828      	ldr	r0, [r5, #0]
 8006fd0:	6869      	ldr	r1, [r5, #4]
 8006fd2:	68aa      	ldr	r2, [r5, #8]
 8006fd4:	68eb      	ldr	r3, [r5, #12]
 8006fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd8:	7c2b      	ldrb	r3, [r5, #16]
 8006fda:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006fdc:	4a87      	ldr	r2, [pc, #540]	@ (80071fc <loadMenuTexts+0xe38>)
 8006fde:	4b88      	ldr	r3, [pc, #544]	@ (8007200 <loadMenuTexts+0xe3c>)
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	6828      	ldr	r0, [r5, #0]
 8006fe6:	6869      	ldr	r1, [r5, #4]
 8006fe8:	68aa      	ldr	r2, [r5, #8]
 8006fea:	68eb      	ldr	r3, [r5, #12]
 8006fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fee:	7c2b      	ldrb	r3, [r5, #16]
 8006ff0:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006ff2:	4a84      	ldr	r2, [pc, #528]	@ (8007204 <loadMenuTexts+0xe40>)
 8006ff4:	4b84      	ldr	r3, [pc, #528]	@ (8007208 <loadMenuTexts+0xe44>)
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	6828      	ldr	r0, [r5, #0]
 8006ffc:	6869      	ldr	r1, [r5, #4]
 8006ffe:	68aa      	ldr	r2, [r5, #8]
 8007000:	68eb      	ldr	r3, [r5, #12]
 8007002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007004:	7c2b      	ldrb	r3, [r5, #16]
 8007006:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8007008:	4a80      	ldr	r2, [pc, #512]	@ (800720c <loadMenuTexts+0xe48>)
 800700a:	4b81      	ldr	r3, [pc, #516]	@ (8007210 <loadMenuTexts+0xe4c>)
 800700c:	4614      	mov	r4, r2
 800700e:	461d      	mov	r5, r3
 8007010:	6828      	ldr	r0, [r5, #0]
 8007012:	6869      	ldr	r1, [r5, #4]
 8007014:	68aa      	ldr	r2, [r5, #8]
 8007016:	68eb      	ldr	r3, [r5, #12]
 8007018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800701a:	7c2b      	ldrb	r3, [r5, #16]
 800701c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 800701e:	4a7d      	ldr	r2, [pc, #500]	@ (8007214 <loadMenuTexts+0xe50>)
 8007020:	4b7d      	ldr	r3, [pc, #500]	@ (8007218 <loadMenuTexts+0xe54>)
 8007022:	4614      	mov	r4, r2
 8007024:	461d      	mov	r5, r3
 8007026:	6828      	ldr	r0, [r5, #0]
 8007028:	6869      	ldr	r1, [r5, #4]
 800702a:	68aa      	ldr	r2, [r5, #8]
 800702c:	68eb      	ldr	r3, [r5, #12]
 800702e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007030:	7c2b      	ldrb	r3, [r5, #16]
 8007032:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8007034:	4a79      	ldr	r2, [pc, #484]	@ (800721c <loadMenuTexts+0xe58>)
 8007036:	4b7a      	ldr	r3, [pc, #488]	@ (8007220 <loadMenuTexts+0xe5c>)
 8007038:	4614      	mov	r4, r2
 800703a:	461d      	mov	r5, r3
 800703c:	6828      	ldr	r0, [r5, #0]
 800703e:	6869      	ldr	r1, [r5, #4]
 8007040:	68aa      	ldr	r2, [r5, #8]
 8007042:	68eb      	ldr	r3, [r5, #12]
 8007044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007046:	7c2b      	ldrb	r3, [r5, #16]
 8007048:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 800704a:	4a76      	ldr	r2, [pc, #472]	@ (8007224 <loadMenuTexts+0xe60>)
 800704c:	4b76      	ldr	r3, [pc, #472]	@ (8007228 <loadMenuTexts+0xe64>)
 800704e:	4614      	mov	r4, r2
 8007050:	461d      	mov	r5, r3
 8007052:	6828      	ldr	r0, [r5, #0]
 8007054:	6869      	ldr	r1, [r5, #4]
 8007056:	68aa      	ldr	r2, [r5, #8]
 8007058:	68eb      	ldr	r3, [r5, #12]
 800705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705c:	7c2b      	ldrb	r3, [r5, #16]
 800705e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8007060:	4a72      	ldr	r2, [pc, #456]	@ (800722c <loadMenuTexts+0xe68>)
 8007062:	4b73      	ldr	r3, [pc, #460]	@ (8007230 <loadMenuTexts+0xe6c>)
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	6828      	ldr	r0, [r5, #0]
 800706a:	6869      	ldr	r1, [r5, #4]
 800706c:	68aa      	ldr	r2, [r5, #8]
 800706e:	68eb      	ldr	r3, [r5, #12]
 8007070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007072:	7c2b      	ldrb	r3, [r5, #16]
 8007074:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8007076:	4a6f      	ldr	r2, [pc, #444]	@ (8007234 <loadMenuTexts+0xe70>)
 8007078:	4b6f      	ldr	r3, [pc, #444]	@ (8007238 <loadMenuTexts+0xe74>)
 800707a:	4614      	mov	r4, r2
 800707c:	461d      	mov	r5, r3
 800707e:	6828      	ldr	r0, [r5, #0]
 8007080:	6869      	ldr	r1, [r5, #4]
 8007082:	68aa      	ldr	r2, [r5, #8]
 8007084:	68eb      	ldr	r3, [r5, #12]
 8007086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007088:	7c2b      	ldrb	r3, [r5, #16]
 800708a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 800708c:	4a6b      	ldr	r2, [pc, #428]	@ (800723c <loadMenuTexts+0xe78>)
 800708e:	4b6c      	ldr	r3, [pc, #432]	@ (8007240 <loadMenuTexts+0xe7c>)
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	6828      	ldr	r0, [r5, #0]
 8007096:	6869      	ldr	r1, [r5, #4]
 8007098:	68aa      	ldr	r2, [r5, #8]
 800709a:	68eb      	ldr	r3, [r5, #12]
 800709c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709e:	7c2b      	ldrb	r3, [r5, #16]
 80070a0:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 80070a2:	4a68      	ldr	r2, [pc, #416]	@ (8007244 <loadMenuTexts+0xe80>)
 80070a4:	4b68      	ldr	r3, [pc, #416]	@ (8007248 <loadMenuTexts+0xe84>)
 80070a6:	4614      	mov	r4, r2
 80070a8:	461d      	mov	r5, r3
 80070aa:	6828      	ldr	r0, [r5, #0]
 80070ac:	6869      	ldr	r1, [r5, #4]
 80070ae:	68aa      	ldr	r2, [r5, #8]
 80070b0:	68eb      	ldr	r3, [r5, #12]
 80070b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b4:	7c2b      	ldrb	r3, [r5, #16]
 80070b6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 80070b8:	4a64      	ldr	r2, [pc, #400]	@ (800724c <loadMenuTexts+0xe88>)
 80070ba:	4b65      	ldr	r3, [pc, #404]	@ (8007250 <loadMenuTexts+0xe8c>)
 80070bc:	4614      	mov	r4, r2
 80070be:	461d      	mov	r5, r3
 80070c0:	6828      	ldr	r0, [r5, #0]
 80070c2:	6869      	ldr	r1, [r5, #4]
 80070c4:	68aa      	ldr	r2, [r5, #8]
 80070c6:	68eb      	ldr	r3, [r5, #12]
 80070c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ca:	7c2b      	ldrb	r3, [r5, #16]
 80070cc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80070ce:	4a61      	ldr	r2, [pc, #388]	@ (8007254 <loadMenuTexts+0xe90>)
 80070d0:	4b61      	ldr	r3, [pc, #388]	@ (8007258 <loadMenuTexts+0xe94>)
 80070d2:	4614      	mov	r4, r2
 80070d4:	461d      	mov	r5, r3
 80070d6:	6828      	ldr	r0, [r5, #0]
 80070d8:	6869      	ldr	r1, [r5, #4]
 80070da:	68aa      	ldr	r2, [r5, #8]
 80070dc:	68eb      	ldr	r3, [r5, #12]
 80070de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e0:	7c2b      	ldrb	r3, [r5, #16]
 80070e2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80070e4:	4a5d      	ldr	r2, [pc, #372]	@ (800725c <loadMenuTexts+0xe98>)
 80070e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007260 <loadMenuTexts+0xe9c>)
 80070e8:	4614      	mov	r4, r2
 80070ea:	461d      	mov	r5, r3
 80070ec:	6828      	ldr	r0, [r5, #0]
 80070ee:	6869      	ldr	r1, [r5, #4]
 80070f0:	68aa      	ldr	r2, [r5, #8]
 80070f2:	68eb      	ldr	r3, [r5, #12]
 80070f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f6:	7c2b      	ldrb	r3, [r5, #16]
 80070f8:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80070fa:	4a5a      	ldr	r2, [pc, #360]	@ (8007264 <loadMenuTexts+0xea0>)
 80070fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007268 <loadMenuTexts+0xea4>)
 80070fe:	4614      	mov	r4, r2
 8007100:	461d      	mov	r5, r3
 8007102:	6828      	ldr	r0, [r5, #0]
 8007104:	6869      	ldr	r1, [r5, #4]
 8007106:	68aa      	ldr	r2, [r5, #8]
 8007108:	68eb      	ldr	r3, [r5, #12]
 800710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710c:	7c2b      	ldrb	r3, [r5, #16]
 800710e:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8007110:	4a56      	ldr	r2, [pc, #344]	@ (800726c <loadMenuTexts+0xea8>)
 8007112:	4b57      	ldr	r3, [pc, #348]	@ (8007270 <loadMenuTexts+0xeac>)
 8007114:	4614      	mov	r4, r2
 8007116:	461d      	mov	r5, r3
 8007118:	6828      	ldr	r0, [r5, #0]
 800711a:	6869      	ldr	r1, [r5, #4]
 800711c:	68aa      	ldr	r2, [r5, #8]
 800711e:	68eb      	ldr	r3, [r5, #12]
 8007120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007122:	7c2b      	ldrb	r3, [r5, #16]
 8007124:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8007126:	4a53      	ldr	r2, [pc, #332]	@ (8007274 <loadMenuTexts+0xeb0>)
 8007128:	4b53      	ldr	r3, [pc, #332]	@ (8007278 <loadMenuTexts+0xeb4>)
 800712a:	4614      	mov	r4, r2
 800712c:	461d      	mov	r5, r3
 800712e:	6828      	ldr	r0, [r5, #0]
 8007130:	6869      	ldr	r1, [r5, #4]
 8007132:	68aa      	ldr	r2, [r5, #8]
 8007134:	68eb      	ldr	r3, [r5, #12]
 8007136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007138:	7c2b      	ldrb	r3, [r5, #16]
 800713a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 800713c:	4a4f      	ldr	r2, [pc, #316]	@ (800727c <loadMenuTexts+0xeb8>)
 800713e:	4b50      	ldr	r3, [pc, #320]	@ (8007280 <loadMenuTexts+0xebc>)
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	6828      	ldr	r0, [r5, #0]
 8007146:	6869      	ldr	r1, [r5, #4]
 8007148:	68aa      	ldr	r2, [r5, #8]
 800714a:	68eb      	ldr	r3, [r5, #12]
 800714c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714e:	7c2b      	ldrb	r3, [r5, #16]
 8007150:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8007152:	4a4c      	ldr	r2, [pc, #304]	@ (8007284 <loadMenuTexts+0xec0>)
 8007154:	4b4c      	ldr	r3, [pc, #304]	@ (8007288 <loadMenuTexts+0xec4>)
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	6828      	ldr	r0, [r5, #0]
 800715c:	6869      	ldr	r1, [r5, #4]
 800715e:	68aa      	ldr	r2, [r5, #8]
 8007160:	68eb      	ldr	r3, [r5, #12]
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	7c2b      	ldrb	r3, [r5, #16]
 8007166:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8007168:	4a48      	ldr	r2, [pc, #288]	@ (800728c <loadMenuTexts+0xec8>)
 800716a:	e091      	b.n	8007290 <loadMenuTexts+0xecc>
 800716c:	20001824 	.word	0x20001824
 8007170:	20000704 	.word	0x20000704
 8007174:	20001838 	.word	0x20001838
 8007178:	20000718 	.word	0x20000718
 800717c:	2000184c 	.word	0x2000184c
 8007180:	2000072c 	.word	0x2000072c
 8007184:	20001860 	.word	0x20001860
 8007188:	20000740 	.word	0x20000740
 800718c:	20001874 	.word	0x20001874
 8007190:	20000754 	.word	0x20000754
 8007194:	20001888 	.word	0x20001888
 8007198:	20000768 	.word	0x20000768
 800719c:	2000189c 	.word	0x2000189c
 80071a0:	2000077c 	.word	0x2000077c
 80071a4:	200018b0 	.word	0x200018b0
 80071a8:	20000790 	.word	0x20000790
 80071ac:	200018c4 	.word	0x200018c4
 80071b0:	200007a4 	.word	0x200007a4
 80071b4:	200018d8 	.word	0x200018d8
 80071b8:	200007b8 	.word	0x200007b8
 80071bc:	200018ec 	.word	0x200018ec
 80071c0:	200007cc 	.word	0x200007cc
 80071c4:	20001900 	.word	0x20001900
 80071c8:	200007e0 	.word	0x200007e0
 80071cc:	20001914 	.word	0x20001914
 80071d0:	200007f4 	.word	0x200007f4
 80071d4:	20001928 	.word	0x20001928
 80071d8:	20000808 	.word	0x20000808
 80071dc:	2000193c 	.word	0x2000193c
 80071e0:	2000081c 	.word	0x2000081c
 80071e4:	20001950 	.word	0x20001950
 80071e8:	20000830 	.word	0x20000830
 80071ec:	20001964 	.word	0x20001964
 80071f0:	20000844 	.word	0x20000844
 80071f4:	20001978 	.word	0x20001978
 80071f8:	20000858 	.word	0x20000858
 80071fc:	2000198c 	.word	0x2000198c
 8007200:	2000086c 	.word	0x2000086c
 8007204:	200019a0 	.word	0x200019a0
 8007208:	20000880 	.word	0x20000880
 800720c:	200019b4 	.word	0x200019b4
 8007210:	20000894 	.word	0x20000894
 8007214:	200019c8 	.word	0x200019c8
 8007218:	200008a8 	.word	0x200008a8
 800721c:	200019dc 	.word	0x200019dc
 8007220:	200008bc 	.word	0x200008bc
 8007224:	200019f0 	.word	0x200019f0
 8007228:	200008d0 	.word	0x200008d0
 800722c:	20001a04 	.word	0x20001a04
 8007230:	200008e4 	.word	0x200008e4
 8007234:	20001a18 	.word	0x20001a18
 8007238:	200008f8 	.word	0x200008f8
 800723c:	20001a2c 	.word	0x20001a2c
 8007240:	2000090c 	.word	0x2000090c
 8007244:	20001a40 	.word	0x20001a40
 8007248:	20000920 	.word	0x20000920
 800724c:	20001a54 	.word	0x20001a54
 8007250:	20000934 	.word	0x20000934
 8007254:	20001a68 	.word	0x20001a68
 8007258:	20000948 	.word	0x20000948
 800725c:	20001a7c 	.word	0x20001a7c
 8007260:	2000095c 	.word	0x2000095c
 8007264:	20001a90 	.word	0x20001a90
 8007268:	20000970 	.word	0x20000970
 800726c:	20001aa4 	.word	0x20001aa4
 8007270:	20000984 	.word	0x20000984
 8007274:	20001ab8 	.word	0x20001ab8
 8007278:	20000998 	.word	0x20000998
 800727c:	20001acc 	.word	0x20001acc
 8007280:	200009ac 	.word	0x200009ac
 8007284:	20001ae0 	.word	0x20001ae0
 8007288:	200009c0 	.word	0x200009c0
 800728c:	20001af4 	.word	0x20001af4
 8007290:	4bc7      	ldr	r3, [pc, #796]	@ (80075b0 <loadMenuTexts+0x11ec>)
 8007292:	4614      	mov	r4, r2
 8007294:	461d      	mov	r5, r3
 8007296:	6828      	ldr	r0, [r5, #0]
 8007298:	6869      	ldr	r1, [r5, #4]
 800729a:	68aa      	ldr	r2, [r5, #8]
 800729c:	68eb      	ldr	r3, [r5, #12]
 800729e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a0:	7c2b      	ldrb	r3, [r5, #16]
 80072a2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 80072a4:	4ac3      	ldr	r2, [pc, #780]	@ (80075b4 <loadMenuTexts+0x11f0>)
 80072a6:	4bc4      	ldr	r3, [pc, #784]	@ (80075b8 <loadMenuTexts+0x11f4>)
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	6828      	ldr	r0, [r5, #0]
 80072ae:	6869      	ldr	r1, [r5, #4]
 80072b0:	68aa      	ldr	r2, [r5, #8]
 80072b2:	68eb      	ldr	r3, [r5, #12]
 80072b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b6:	7c2b      	ldrb	r3, [r5, #16]
 80072b8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 80072ba:	4ac0      	ldr	r2, [pc, #768]	@ (80075bc <loadMenuTexts+0x11f8>)
 80072bc:	4bc0      	ldr	r3, [pc, #768]	@ (80075c0 <loadMenuTexts+0x11fc>)
 80072be:	4614      	mov	r4, r2
 80072c0:	461d      	mov	r5, r3
 80072c2:	6828      	ldr	r0, [r5, #0]
 80072c4:	6869      	ldr	r1, [r5, #4]
 80072c6:	68aa      	ldr	r2, [r5, #8]
 80072c8:	68eb      	ldr	r3, [r5, #12]
 80072ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072cc:	7c2b      	ldrb	r3, [r5, #16]
 80072ce:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 80072d0:	4abc      	ldr	r2, [pc, #752]	@ (80075c4 <loadMenuTexts+0x1200>)
 80072d2:	4bbd      	ldr	r3, [pc, #756]	@ (80075c8 <loadMenuTexts+0x1204>)
 80072d4:	4614      	mov	r4, r2
 80072d6:	461d      	mov	r5, r3
 80072d8:	6828      	ldr	r0, [r5, #0]
 80072da:	6869      	ldr	r1, [r5, #4]
 80072dc:	68aa      	ldr	r2, [r5, #8]
 80072de:	68eb      	ldr	r3, [r5, #12]
 80072e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072e2:	7c2b      	ldrb	r3, [r5, #16]
 80072e4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 80072e6:	4ab9      	ldr	r2, [pc, #740]	@ (80075cc <loadMenuTexts+0x1208>)
 80072e8:	4bb9      	ldr	r3, [pc, #740]	@ (80075d0 <loadMenuTexts+0x120c>)
 80072ea:	4614      	mov	r4, r2
 80072ec:	461d      	mov	r5, r3
 80072ee:	6828      	ldr	r0, [r5, #0]
 80072f0:	6869      	ldr	r1, [r5, #4]
 80072f2:	68aa      	ldr	r2, [r5, #8]
 80072f4:	68eb      	ldr	r3, [r5, #12]
 80072f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f8:	7c2b      	ldrb	r3, [r5, #16]
 80072fa:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80072fc:	4ab5      	ldr	r2, [pc, #724]	@ (80075d4 <loadMenuTexts+0x1210>)
 80072fe:	4bb6      	ldr	r3, [pc, #728]	@ (80075d8 <loadMenuTexts+0x1214>)
 8007300:	4614      	mov	r4, r2
 8007302:	461d      	mov	r5, r3
 8007304:	6828      	ldr	r0, [r5, #0]
 8007306:	6869      	ldr	r1, [r5, #4]
 8007308:	68aa      	ldr	r2, [r5, #8]
 800730a:	68eb      	ldr	r3, [r5, #12]
 800730c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730e:	7c2b      	ldrb	r3, [r5, #16]
 8007310:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007312:	4ab2      	ldr	r2, [pc, #712]	@ (80075dc <loadMenuTexts+0x1218>)
 8007314:	4bb2      	ldr	r3, [pc, #712]	@ (80075e0 <loadMenuTexts+0x121c>)
 8007316:	4614      	mov	r4, r2
 8007318:	461d      	mov	r5, r3
 800731a:	6828      	ldr	r0, [r5, #0]
 800731c:	6869      	ldr	r1, [r5, #4]
 800731e:	68aa      	ldr	r2, [r5, #8]
 8007320:	68eb      	ldr	r3, [r5, #12]
 8007322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007324:	7c2b      	ldrb	r3, [r5, #16]
 8007326:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007328:	4aae      	ldr	r2, [pc, #696]	@ (80075e4 <loadMenuTexts+0x1220>)
 800732a:	4baf      	ldr	r3, [pc, #700]	@ (80075e8 <loadMenuTexts+0x1224>)
 800732c:	4614      	mov	r4, r2
 800732e:	461d      	mov	r5, r3
 8007330:	6828      	ldr	r0, [r5, #0]
 8007332:	6869      	ldr	r1, [r5, #4]
 8007334:	68aa      	ldr	r2, [r5, #8]
 8007336:	68eb      	ldr	r3, [r5, #12]
 8007338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800733a:	7c2b      	ldrb	r3, [r5, #16]
 800733c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 800733e:	4aab      	ldr	r2, [pc, #684]	@ (80075ec <loadMenuTexts+0x1228>)
 8007340:	4bab      	ldr	r3, [pc, #684]	@ (80075f0 <loadMenuTexts+0x122c>)
 8007342:	4614      	mov	r4, r2
 8007344:	461d      	mov	r5, r3
 8007346:	6828      	ldr	r0, [r5, #0]
 8007348:	6869      	ldr	r1, [r5, #4]
 800734a:	68aa      	ldr	r2, [r5, #8]
 800734c:	68eb      	ldr	r3, [r5, #12]
 800734e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007350:	7c2b      	ldrb	r3, [r5, #16]
 8007352:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007354:	4aa7      	ldr	r2, [pc, #668]	@ (80075f4 <loadMenuTexts+0x1230>)
 8007356:	4ba8      	ldr	r3, [pc, #672]	@ (80075f8 <loadMenuTexts+0x1234>)
 8007358:	4614      	mov	r4, r2
 800735a:	461d      	mov	r5, r3
 800735c:	6828      	ldr	r0, [r5, #0]
 800735e:	6869      	ldr	r1, [r5, #4]
 8007360:	68aa      	ldr	r2, [r5, #8]
 8007362:	68eb      	ldr	r3, [r5, #12]
 8007364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007366:	7c2b      	ldrb	r3, [r5, #16]
 8007368:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 800736a:	4aa4      	ldr	r2, [pc, #656]	@ (80075fc <loadMenuTexts+0x1238>)
 800736c:	4ba4      	ldr	r3, [pc, #656]	@ (8007600 <loadMenuTexts+0x123c>)
 800736e:	4614      	mov	r4, r2
 8007370:	461d      	mov	r5, r3
 8007372:	6828      	ldr	r0, [r5, #0]
 8007374:	6869      	ldr	r1, [r5, #4]
 8007376:	68aa      	ldr	r2, [r5, #8]
 8007378:	68eb      	ldr	r3, [r5, #12]
 800737a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800737c:	7c2b      	ldrb	r3, [r5, #16]
 800737e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007380:	4aa0      	ldr	r2, [pc, #640]	@ (8007604 <loadMenuTexts+0x1240>)
 8007382:	4ba1      	ldr	r3, [pc, #644]	@ (8007608 <loadMenuTexts+0x1244>)
 8007384:	4614      	mov	r4, r2
 8007386:	461d      	mov	r5, r3
 8007388:	6828      	ldr	r0, [r5, #0]
 800738a:	6869      	ldr	r1, [r5, #4]
 800738c:	68aa      	ldr	r2, [r5, #8]
 800738e:	68eb      	ldr	r3, [r5, #12]
 8007390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007392:	7c2b      	ldrb	r3, [r5, #16]
 8007394:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007396:	4a9d      	ldr	r2, [pc, #628]	@ (800760c <loadMenuTexts+0x1248>)
 8007398:	4b9d      	ldr	r3, [pc, #628]	@ (8007610 <loadMenuTexts+0x124c>)
 800739a:	4614      	mov	r4, r2
 800739c:	461d      	mov	r5, r3
 800739e:	6828      	ldr	r0, [r5, #0]
 80073a0:	6869      	ldr	r1, [r5, #4]
 80073a2:	68aa      	ldr	r2, [r5, #8]
 80073a4:	68eb      	ldr	r3, [r5, #12]
 80073a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a8:	7c2b      	ldrb	r3, [r5, #16]
 80073aa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 80073ac:	4a99      	ldr	r2, [pc, #612]	@ (8007614 <loadMenuTexts+0x1250>)
 80073ae:	4b9a      	ldr	r3, [pc, #616]	@ (8007618 <loadMenuTexts+0x1254>)
 80073b0:	4614      	mov	r4, r2
 80073b2:	461d      	mov	r5, r3
 80073b4:	6828      	ldr	r0, [r5, #0]
 80073b6:	6869      	ldr	r1, [r5, #4]
 80073b8:	68aa      	ldr	r2, [r5, #8]
 80073ba:	68eb      	ldr	r3, [r5, #12]
 80073bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073be:	7c2b      	ldrb	r3, [r5, #16]
 80073c0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 80073c2:	4a96      	ldr	r2, [pc, #600]	@ (800761c <loadMenuTexts+0x1258>)
 80073c4:	4b96      	ldr	r3, [pc, #600]	@ (8007620 <loadMenuTexts+0x125c>)
 80073c6:	4614      	mov	r4, r2
 80073c8:	461d      	mov	r5, r3
 80073ca:	6828      	ldr	r0, [r5, #0]
 80073cc:	6869      	ldr	r1, [r5, #4]
 80073ce:	68aa      	ldr	r2, [r5, #8]
 80073d0:	68eb      	ldr	r3, [r5, #12]
 80073d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d4:	7c2b      	ldrb	r3, [r5, #16]
 80073d6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 80073d8:	4a92      	ldr	r2, [pc, #584]	@ (8007624 <loadMenuTexts+0x1260>)
 80073da:	4b93      	ldr	r3, [pc, #588]	@ (8007628 <loadMenuTexts+0x1264>)
 80073dc:	4614      	mov	r4, r2
 80073de:	461d      	mov	r5, r3
 80073e0:	6828      	ldr	r0, [r5, #0]
 80073e2:	6869      	ldr	r1, [r5, #4]
 80073e4:	68aa      	ldr	r2, [r5, #8]
 80073e6:	68eb      	ldr	r3, [r5, #12]
 80073e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ea:	7c2b      	ldrb	r3, [r5, #16]
 80073ec:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 80073ee:	4a8f      	ldr	r2, [pc, #572]	@ (800762c <loadMenuTexts+0x1268>)
 80073f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007630 <loadMenuTexts+0x126c>)
 80073f2:	4614      	mov	r4, r2
 80073f4:	461d      	mov	r5, r3
 80073f6:	6828      	ldr	r0, [r5, #0]
 80073f8:	6869      	ldr	r1, [r5, #4]
 80073fa:	68aa      	ldr	r2, [r5, #8]
 80073fc:	68eb      	ldr	r3, [r5, #12]
 80073fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007400:	7c2b      	ldrb	r3, [r5, #16]
 8007402:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007404:	4a8b      	ldr	r2, [pc, #556]	@ (8007634 <loadMenuTexts+0x1270>)
 8007406:	4b8c      	ldr	r3, [pc, #560]	@ (8007638 <loadMenuTexts+0x1274>)
 8007408:	4614      	mov	r4, r2
 800740a:	461d      	mov	r5, r3
 800740c:	6828      	ldr	r0, [r5, #0]
 800740e:	6869      	ldr	r1, [r5, #4]
 8007410:	68aa      	ldr	r2, [r5, #8]
 8007412:	68eb      	ldr	r3, [r5, #12]
 8007414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007416:	7c2b      	ldrb	r3, [r5, #16]
 8007418:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800741a:	4a88      	ldr	r2, [pc, #544]	@ (800763c <loadMenuTexts+0x1278>)
 800741c:	4b88      	ldr	r3, [pc, #544]	@ (8007640 <loadMenuTexts+0x127c>)
 800741e:	4614      	mov	r4, r2
 8007420:	461d      	mov	r5, r3
 8007422:	6828      	ldr	r0, [r5, #0]
 8007424:	6869      	ldr	r1, [r5, #4]
 8007426:	68aa      	ldr	r2, [r5, #8]
 8007428:	68eb      	ldr	r3, [r5, #12]
 800742a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800742c:	7c2b      	ldrb	r3, [r5, #16]
 800742e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007430:	4a84      	ldr	r2, [pc, #528]	@ (8007644 <loadMenuTexts+0x1280>)
 8007432:	4b85      	ldr	r3, [pc, #532]	@ (8007648 <loadMenuTexts+0x1284>)
 8007434:	4614      	mov	r4, r2
 8007436:	461d      	mov	r5, r3
 8007438:	6828      	ldr	r0, [r5, #0]
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	68aa      	ldr	r2, [r5, #8]
 800743e:	68eb      	ldr	r3, [r5, #12]
 8007440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007442:	7c2b      	ldrb	r3, [r5, #16]
 8007444:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007446:	4a81      	ldr	r2, [pc, #516]	@ (800764c <loadMenuTexts+0x1288>)
 8007448:	4b81      	ldr	r3, [pc, #516]	@ (8007650 <loadMenuTexts+0x128c>)
 800744a:	4614      	mov	r4, r2
 800744c:	461d      	mov	r5, r3
 800744e:	6828      	ldr	r0, [r5, #0]
 8007450:	6869      	ldr	r1, [r5, #4]
 8007452:	68aa      	ldr	r2, [r5, #8]
 8007454:	68eb      	ldr	r3, [r5, #12]
 8007456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007458:	7c2b      	ldrb	r3, [r5, #16]
 800745a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 800745c:	4a7d      	ldr	r2, [pc, #500]	@ (8007654 <loadMenuTexts+0x1290>)
 800745e:	4b7e      	ldr	r3, [pc, #504]	@ (8007658 <loadMenuTexts+0x1294>)
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	6828      	ldr	r0, [r5, #0]
 8007466:	6869      	ldr	r1, [r5, #4]
 8007468:	68aa      	ldr	r2, [r5, #8]
 800746a:	68eb      	ldr	r3, [r5, #12]
 800746c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746e:	7c2b      	ldrb	r3, [r5, #16]
 8007470:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007472:	4a7a      	ldr	r2, [pc, #488]	@ (800765c <loadMenuTexts+0x1298>)
 8007474:	4b7a      	ldr	r3, [pc, #488]	@ (8007660 <loadMenuTexts+0x129c>)
 8007476:	4614      	mov	r4, r2
 8007478:	461d      	mov	r5, r3
 800747a:	6828      	ldr	r0, [r5, #0]
 800747c:	6869      	ldr	r1, [r5, #4]
 800747e:	68aa      	ldr	r2, [r5, #8]
 8007480:	68eb      	ldr	r3, [r5, #12]
 8007482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007484:	7c2b      	ldrb	r3, [r5, #16]
 8007486:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007488:	4a76      	ldr	r2, [pc, #472]	@ (8007664 <loadMenuTexts+0x12a0>)
 800748a:	4b77      	ldr	r3, [pc, #476]	@ (8007668 <loadMenuTexts+0x12a4>)
 800748c:	4614      	mov	r4, r2
 800748e:	461d      	mov	r5, r3
 8007490:	6828      	ldr	r0, [r5, #0]
 8007492:	6869      	ldr	r1, [r5, #4]
 8007494:	68aa      	ldr	r2, [r5, #8]
 8007496:	68eb      	ldr	r3, [r5, #12]
 8007498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749a:	7c2b      	ldrb	r3, [r5, #16]
 800749c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 800749e:	4a73      	ldr	r2, [pc, #460]	@ (800766c <loadMenuTexts+0x12a8>)
 80074a0:	4b73      	ldr	r3, [pc, #460]	@ (8007670 <loadMenuTexts+0x12ac>)
 80074a2:	4614      	mov	r4, r2
 80074a4:	461d      	mov	r5, r3
 80074a6:	6828      	ldr	r0, [r5, #0]
 80074a8:	6869      	ldr	r1, [r5, #4]
 80074aa:	68aa      	ldr	r2, [r5, #8]
 80074ac:	68eb      	ldr	r3, [r5, #12]
 80074ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b0:	7c2b      	ldrb	r3, [r5, #16]
 80074b2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 80074b4:	4a6f      	ldr	r2, [pc, #444]	@ (8007674 <loadMenuTexts+0x12b0>)
 80074b6:	4b70      	ldr	r3, [pc, #448]	@ (8007678 <loadMenuTexts+0x12b4>)
 80074b8:	4614      	mov	r4, r2
 80074ba:	461d      	mov	r5, r3
 80074bc:	6828      	ldr	r0, [r5, #0]
 80074be:	6869      	ldr	r1, [r5, #4]
 80074c0:	68aa      	ldr	r2, [r5, #8]
 80074c2:	68eb      	ldr	r3, [r5, #12]
 80074c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c6:	7c2b      	ldrb	r3, [r5, #16]
 80074c8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 80074ca:	4a6c      	ldr	r2, [pc, #432]	@ (800767c <loadMenuTexts+0x12b8>)
 80074cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007680 <loadMenuTexts+0x12bc>)
 80074ce:	4614      	mov	r4, r2
 80074d0:	461d      	mov	r5, r3
 80074d2:	6828      	ldr	r0, [r5, #0]
 80074d4:	6869      	ldr	r1, [r5, #4]
 80074d6:	68aa      	ldr	r2, [r5, #8]
 80074d8:	68eb      	ldr	r3, [r5, #12]
 80074da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074dc:	7c2b      	ldrb	r3, [r5, #16]
 80074de:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 80074e0:	4a68      	ldr	r2, [pc, #416]	@ (8007684 <loadMenuTexts+0x12c0>)
 80074e2:	4b69      	ldr	r3, [pc, #420]	@ (8007688 <loadMenuTexts+0x12c4>)
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	6828      	ldr	r0, [r5, #0]
 80074ea:	6869      	ldr	r1, [r5, #4]
 80074ec:	68aa      	ldr	r2, [r5, #8]
 80074ee:	68eb      	ldr	r3, [r5, #12]
 80074f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f2:	7c2b      	ldrb	r3, [r5, #16]
 80074f4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80074f6:	4a65      	ldr	r2, [pc, #404]	@ (800768c <loadMenuTexts+0x12c8>)
 80074f8:	4b65      	ldr	r3, [pc, #404]	@ (8007690 <loadMenuTexts+0x12cc>)
 80074fa:	4614      	mov	r4, r2
 80074fc:	461d      	mov	r5, r3
 80074fe:	6828      	ldr	r0, [r5, #0]
 8007500:	6869      	ldr	r1, [r5, #4]
 8007502:	68aa      	ldr	r2, [r5, #8]
 8007504:	68eb      	ldr	r3, [r5, #12]
 8007506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007508:	7c2b      	ldrb	r3, [r5, #16]
 800750a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 800750c:	4a61      	ldr	r2, [pc, #388]	@ (8007694 <loadMenuTexts+0x12d0>)
 800750e:	4b62      	ldr	r3, [pc, #392]	@ (8007698 <loadMenuTexts+0x12d4>)
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	6828      	ldr	r0, [r5, #0]
 8007516:	6869      	ldr	r1, [r5, #4]
 8007518:	68aa      	ldr	r2, [r5, #8]
 800751a:	68eb      	ldr	r3, [r5, #12]
 800751c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751e:	7c2b      	ldrb	r3, [r5, #16]
 8007520:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007522:	4a5e      	ldr	r2, [pc, #376]	@ (800769c <loadMenuTexts+0x12d8>)
 8007524:	4b5e      	ldr	r3, [pc, #376]	@ (80076a0 <loadMenuTexts+0x12dc>)
 8007526:	4614      	mov	r4, r2
 8007528:	461d      	mov	r5, r3
 800752a:	6828      	ldr	r0, [r5, #0]
 800752c:	6869      	ldr	r1, [r5, #4]
 800752e:	68aa      	ldr	r2, [r5, #8]
 8007530:	68eb      	ldr	r3, [r5, #12]
 8007532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007534:	7c2b      	ldrb	r3, [r5, #16]
 8007536:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007538:	4a5a      	ldr	r2, [pc, #360]	@ (80076a4 <loadMenuTexts+0x12e0>)
 800753a:	4b5b      	ldr	r3, [pc, #364]	@ (80076a8 <loadMenuTexts+0x12e4>)
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	6828      	ldr	r0, [r5, #0]
 8007542:	6869      	ldr	r1, [r5, #4]
 8007544:	68aa      	ldr	r2, [r5, #8]
 8007546:	68eb      	ldr	r3, [r5, #12]
 8007548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754a:	7c2b      	ldrb	r3, [r5, #16]
 800754c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800754e:	4a57      	ldr	r2, [pc, #348]	@ (80076ac <loadMenuTexts+0x12e8>)
 8007550:	4b57      	ldr	r3, [pc, #348]	@ (80076b0 <loadMenuTexts+0x12ec>)
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	6828      	ldr	r0, [r5, #0]
 8007558:	6869      	ldr	r1, [r5, #4]
 800755a:	68aa      	ldr	r2, [r5, #8]
 800755c:	68eb      	ldr	r3, [r5, #12]
 800755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007560:	7c2b      	ldrb	r3, [r5, #16]
 8007562:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007564:	4a53      	ldr	r2, [pc, #332]	@ (80076b4 <loadMenuTexts+0x12f0>)
 8007566:	4b54      	ldr	r3, [pc, #336]	@ (80076b8 <loadMenuTexts+0x12f4>)
 8007568:	4614      	mov	r4, r2
 800756a:	461d      	mov	r5, r3
 800756c:	6828      	ldr	r0, [r5, #0]
 800756e:	6869      	ldr	r1, [r5, #4]
 8007570:	68aa      	ldr	r2, [r5, #8]
 8007572:	68eb      	ldr	r3, [r5, #12]
 8007574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007576:	7c2b      	ldrb	r3, [r5, #16]
 8007578:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800757a:	4a50      	ldr	r2, [pc, #320]	@ (80076bc <loadMenuTexts+0x12f8>)
 800757c:	4b50      	ldr	r3, [pc, #320]	@ (80076c0 <loadMenuTexts+0x12fc>)
 800757e:	4614      	mov	r4, r2
 8007580:	461d      	mov	r5, r3
 8007582:	6828      	ldr	r0, [r5, #0]
 8007584:	6869      	ldr	r1, [r5, #4]
 8007586:	68aa      	ldr	r2, [r5, #8]
 8007588:	68eb      	ldr	r3, [r5, #12]
 800758a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758c:	7c2b      	ldrb	r3, [r5, #16]
 800758e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007590:	4a4c      	ldr	r2, [pc, #304]	@ (80076c4 <loadMenuTexts+0x1300>)
 8007592:	4b4d      	ldr	r3, [pc, #308]	@ (80076c8 <loadMenuTexts+0x1304>)
 8007594:	4614      	mov	r4, r2
 8007596:	461d      	mov	r5, r3
 8007598:	6828      	ldr	r0, [r5, #0]
 800759a:	6869      	ldr	r1, [r5, #4]
 800759c:	68aa      	ldr	r2, [r5, #8]
 800759e:	68eb      	ldr	r3, [r5, #12]
 80075a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a2:	7c2b      	ldrb	r3, [r5, #16]
 80075a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80075a6:	4a49      	ldr	r2, [pc, #292]	@ (80076cc <loadMenuTexts+0x1308>)
 80075a8:	4b49      	ldr	r3, [pc, #292]	@ (80076d0 <loadMenuTexts+0x130c>)
 80075aa:	4614      	mov	r4, r2
 80075ac:	461d      	mov	r5, r3
 80075ae:	e091      	b.n	80076d4 <loadMenuTexts+0x1310>
 80075b0:	200009d4 	.word	0x200009d4
 80075b4:	20001b08 	.word	0x20001b08
 80075b8:	200009e8 	.word	0x200009e8
 80075bc:	20001b1c 	.word	0x20001b1c
 80075c0:	200009fc 	.word	0x200009fc
 80075c4:	20001b30 	.word	0x20001b30
 80075c8:	20000a10 	.word	0x20000a10
 80075cc:	20001b44 	.word	0x20001b44
 80075d0:	20000a24 	.word	0x20000a24
 80075d4:	20001b58 	.word	0x20001b58
 80075d8:	20000a38 	.word	0x20000a38
 80075dc:	20001b6c 	.word	0x20001b6c
 80075e0:	20000a4c 	.word	0x20000a4c
 80075e4:	20001b80 	.word	0x20001b80
 80075e8:	20000a60 	.word	0x20000a60
 80075ec:	20001b94 	.word	0x20001b94
 80075f0:	20000a74 	.word	0x20000a74
 80075f4:	20001ba8 	.word	0x20001ba8
 80075f8:	20000a88 	.word	0x20000a88
 80075fc:	20001bbc 	.word	0x20001bbc
 8007600:	20000a9c 	.word	0x20000a9c
 8007604:	20001bd0 	.word	0x20001bd0
 8007608:	20000ab0 	.word	0x20000ab0
 800760c:	20001be4 	.word	0x20001be4
 8007610:	20000ac4 	.word	0x20000ac4
 8007614:	20001bf8 	.word	0x20001bf8
 8007618:	20000ad8 	.word	0x20000ad8
 800761c:	20001c0c 	.word	0x20001c0c
 8007620:	20000aec 	.word	0x20000aec
 8007624:	20001c20 	.word	0x20001c20
 8007628:	20000b00 	.word	0x20000b00
 800762c:	20001c34 	.word	0x20001c34
 8007630:	20000b14 	.word	0x20000b14
 8007634:	20001c48 	.word	0x20001c48
 8007638:	20000b28 	.word	0x20000b28
 800763c:	20001c5c 	.word	0x20001c5c
 8007640:	20000b3c 	.word	0x20000b3c
 8007644:	20001c70 	.word	0x20001c70
 8007648:	20000b50 	.word	0x20000b50
 800764c:	20001c84 	.word	0x20001c84
 8007650:	20000b64 	.word	0x20000b64
 8007654:	20001c98 	.word	0x20001c98
 8007658:	20000b78 	.word	0x20000b78
 800765c:	20001cac 	.word	0x20001cac
 8007660:	20000b8c 	.word	0x20000b8c
 8007664:	20001cc0 	.word	0x20001cc0
 8007668:	20000ba0 	.word	0x20000ba0
 800766c:	20001cd4 	.word	0x20001cd4
 8007670:	20000bb4 	.word	0x20000bb4
 8007674:	20001ce8 	.word	0x20001ce8
 8007678:	20000bc8 	.word	0x20000bc8
 800767c:	20001cfc 	.word	0x20001cfc
 8007680:	20000bdc 	.word	0x20000bdc
 8007684:	20001d10 	.word	0x20001d10
 8007688:	20000bf0 	.word	0x20000bf0
 800768c:	20001d24 	.word	0x20001d24
 8007690:	20000c04 	.word	0x20000c04
 8007694:	20001d38 	.word	0x20001d38
 8007698:	20000c18 	.word	0x20000c18
 800769c:	20001d4c 	.word	0x20001d4c
 80076a0:	20000c2c 	.word	0x20000c2c
 80076a4:	20001d60 	.word	0x20001d60
 80076a8:	20000c40 	.word	0x20000c40
 80076ac:	20001d74 	.word	0x20001d74
 80076b0:	20000c54 	.word	0x20000c54
 80076b4:	20001d88 	.word	0x20001d88
 80076b8:	20000c68 	.word	0x20000c68
 80076bc:	20001d9c 	.word	0x20001d9c
 80076c0:	20000cf4 	.word	0x20000cf4
 80076c4:	20001db0 	.word	0x20001db0
 80076c8:	20000d08 	.word	0x20000d08
 80076cc:	20001dc4 	.word	0x20001dc4
 80076d0:	20000ccc 	.word	0x20000ccc
 80076d4:	6828      	ldr	r0, [r5, #0]
 80076d6:	6869      	ldr	r1, [r5, #4]
 80076d8:	68aa      	ldr	r2, [r5, #8]
 80076da:	68eb      	ldr	r3, [r5, #12]
 80076dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076de:	7c2b      	ldrb	r3, [r5, #16]
 80076e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80076e2:	4a5b      	ldr	r2, [pc, #364]	@ (8007850 <loadMenuTexts+0x148c>)
 80076e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007854 <loadMenuTexts+0x1490>)
 80076e6:	4614      	mov	r4, r2
 80076e8:	461d      	mov	r5, r3
 80076ea:	6828      	ldr	r0, [r5, #0]
 80076ec:	6869      	ldr	r1, [r5, #4]
 80076ee:	68aa      	ldr	r2, [r5, #8]
 80076f0:	68eb      	ldr	r3, [r5, #12]
 80076f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f4:	7c2b      	ldrb	r3, [r5, #16]
 80076f6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80076f8:	4a57      	ldr	r2, [pc, #348]	@ (8007858 <loadMenuTexts+0x1494>)
 80076fa:	4b58      	ldr	r3, [pc, #352]	@ (800785c <loadMenuTexts+0x1498>)
 80076fc:	4614      	mov	r4, r2
 80076fe:	461d      	mov	r5, r3
 8007700:	6828      	ldr	r0, [r5, #0]
 8007702:	6869      	ldr	r1, [r5, #4]
 8007704:	68aa      	ldr	r2, [r5, #8]
 8007706:	68eb      	ldr	r3, [r5, #12]
 8007708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800770a:	7c2b      	ldrb	r3, [r5, #16]
 800770c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800770e:	4a54      	ldr	r2, [pc, #336]	@ (8007860 <loadMenuTexts+0x149c>)
 8007710:	4b54      	ldr	r3, [pc, #336]	@ (8007864 <loadMenuTexts+0x14a0>)
 8007712:	4614      	mov	r4, r2
 8007714:	461d      	mov	r5, r3
 8007716:	6828      	ldr	r0, [r5, #0]
 8007718:	6869      	ldr	r1, [r5, #4]
 800771a:	68aa      	ldr	r2, [r5, #8]
 800771c:	68eb      	ldr	r3, [r5, #12]
 800771e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007720:	7c2b      	ldrb	r3, [r5, #16]
 8007722:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007724:	4a50      	ldr	r2, [pc, #320]	@ (8007868 <loadMenuTexts+0x14a4>)
 8007726:	4b51      	ldr	r3, [pc, #324]	@ (800786c <loadMenuTexts+0x14a8>)
 8007728:	4614      	mov	r4, r2
 800772a:	461d      	mov	r5, r3
 800772c:	6828      	ldr	r0, [r5, #0]
 800772e:	6869      	ldr	r1, [r5, #4]
 8007730:	68aa      	ldr	r2, [r5, #8]
 8007732:	68eb      	ldr	r3, [r5, #12]
 8007734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007736:	7c2b      	ldrb	r3, [r5, #16]
 8007738:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800773a:	4a4d      	ldr	r2, [pc, #308]	@ (8007870 <loadMenuTexts+0x14ac>)
 800773c:	4b4d      	ldr	r3, [pc, #308]	@ (8007874 <loadMenuTexts+0x14b0>)
 800773e:	4614      	mov	r4, r2
 8007740:	461d      	mov	r5, r3
 8007742:	6828      	ldr	r0, [r5, #0]
 8007744:	6869      	ldr	r1, [r5, #4]
 8007746:	68aa      	ldr	r2, [r5, #8]
 8007748:	68eb      	ldr	r3, [r5, #12]
 800774a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800774c:	7c2b      	ldrb	r3, [r5, #16]
 800774e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007750:	4a49      	ldr	r2, [pc, #292]	@ (8007878 <loadMenuTexts+0x14b4>)
 8007752:	4b4a      	ldr	r3, [pc, #296]	@ (800787c <loadMenuTexts+0x14b8>)
 8007754:	4614      	mov	r4, r2
 8007756:	461d      	mov	r5, r3
 8007758:	6828      	ldr	r0, [r5, #0]
 800775a:	6869      	ldr	r1, [r5, #4]
 800775c:	68aa      	ldr	r2, [r5, #8]
 800775e:	68eb      	ldr	r3, [r5, #12]
 8007760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007762:	7c2b      	ldrb	r3, [r5, #16]
 8007764:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007766:	4a46      	ldr	r2, [pc, #280]	@ (8007880 <loadMenuTexts+0x14bc>)
 8007768:	4b46      	ldr	r3, [pc, #280]	@ (8007884 <loadMenuTexts+0x14c0>)
 800776a:	4614      	mov	r4, r2
 800776c:	461d      	mov	r5, r3
 800776e:	6828      	ldr	r0, [r5, #0]
 8007770:	6869      	ldr	r1, [r5, #4]
 8007772:	68aa      	ldr	r2, [r5, #8]
 8007774:	68eb      	ldr	r3, [r5, #12]
 8007776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007778:	7c2b      	ldrb	r3, [r5, #16]
 800777a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800777c:	4a42      	ldr	r2, [pc, #264]	@ (8007888 <loadMenuTexts+0x14c4>)
 800777e:	4b43      	ldr	r3, [pc, #268]	@ (800788c <loadMenuTexts+0x14c8>)
 8007780:	4614      	mov	r4, r2
 8007782:	461d      	mov	r5, r3
 8007784:	6828      	ldr	r0, [r5, #0]
 8007786:	6869      	ldr	r1, [r5, #4]
 8007788:	68aa      	ldr	r2, [r5, #8]
 800778a:	68eb      	ldr	r3, [r5, #12]
 800778c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778e:	7c2b      	ldrb	r3, [r5, #16]
 8007790:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007792:	4a3f      	ldr	r2, [pc, #252]	@ (8007890 <loadMenuTexts+0x14cc>)
 8007794:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <loadMenuTexts+0x14d0>)
 8007796:	4614      	mov	r4, r2
 8007798:	461d      	mov	r5, r3
 800779a:	6828      	ldr	r0, [r5, #0]
 800779c:	6869      	ldr	r1, [r5, #4]
 800779e:	68aa      	ldr	r2, [r5, #8]
 80077a0:	68eb      	ldr	r3, [r5, #12]
 80077a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a4:	7c2b      	ldrb	r3, [r5, #16]
 80077a6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80077a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007898 <loadMenuTexts+0x14d4>)
 80077aa:	4b3c      	ldr	r3, [pc, #240]	@ (800789c <loadMenuTexts+0x14d8>)
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	6828      	ldr	r0, [r5, #0]
 80077b2:	6869      	ldr	r1, [r5, #4]
 80077b4:	68aa      	ldr	r2, [r5, #8]
 80077b6:	68eb      	ldr	r3, [r5, #12]
 80077b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ba:	7c2b      	ldrb	r3, [r5, #16]
 80077bc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80077be:	4a38      	ldr	r2, [pc, #224]	@ (80078a0 <loadMenuTexts+0x14dc>)
 80077c0:	4b38      	ldr	r3, [pc, #224]	@ (80078a4 <loadMenuTexts+0x14e0>)
 80077c2:	4614      	mov	r4, r2
 80077c4:	461d      	mov	r5, r3
 80077c6:	6828      	ldr	r0, [r5, #0]
 80077c8:	6869      	ldr	r1, [r5, #4]
 80077ca:	68aa      	ldr	r2, [r5, #8]
 80077cc:	68eb      	ldr	r3, [r5, #12]
 80077ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077d0:	7c2b      	ldrb	r3, [r5, #16]
 80077d2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80077d4:	4a34      	ldr	r2, [pc, #208]	@ (80078a8 <loadMenuTexts+0x14e4>)
 80077d6:	4b35      	ldr	r3, [pc, #212]	@ (80078ac <loadMenuTexts+0x14e8>)
 80077d8:	4614      	mov	r4, r2
 80077da:	461d      	mov	r5, r3
 80077dc:	6828      	ldr	r0, [r5, #0]
 80077de:	6869      	ldr	r1, [r5, #4]
 80077e0:	68aa      	ldr	r2, [r5, #8]
 80077e2:	68eb      	ldr	r3, [r5, #12]
 80077e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e6:	7c2b      	ldrb	r3, [r5, #16]
 80077e8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80077ea:	4a31      	ldr	r2, [pc, #196]	@ (80078b0 <loadMenuTexts+0x14ec>)
 80077ec:	4b31      	ldr	r3, [pc, #196]	@ (80078b4 <loadMenuTexts+0x14f0>)
 80077ee:	4614      	mov	r4, r2
 80077f0:	461d      	mov	r5, r3
 80077f2:	6828      	ldr	r0, [r5, #0]
 80077f4:	6869      	ldr	r1, [r5, #4]
 80077f6:	68aa      	ldr	r2, [r5, #8]
 80077f8:	68eb      	ldr	r3, [r5, #12]
 80077fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077fc:	7c2b      	ldrb	r3, [r5, #16]
 80077fe:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007800:	4a2d      	ldr	r2, [pc, #180]	@ (80078b8 <loadMenuTexts+0x14f4>)
 8007802:	4b2e      	ldr	r3, [pc, #184]	@ (80078bc <loadMenuTexts+0x14f8>)
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	6828      	ldr	r0, [r5, #0]
 800780a:	6869      	ldr	r1, [r5, #4]
 800780c:	68aa      	ldr	r2, [r5, #8]
 800780e:	68eb      	ldr	r3, [r5, #12]
 8007810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007812:	7c2b      	ldrb	r3, [r5, #16]
 8007814:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007816:	4a2a      	ldr	r2, [pc, #168]	@ (80078c0 <loadMenuTexts+0x14fc>)
 8007818:	4b2a      	ldr	r3, [pc, #168]	@ (80078c4 <loadMenuTexts+0x1500>)
 800781a:	4614      	mov	r4, r2
 800781c:	461d      	mov	r5, r3
 800781e:	6828      	ldr	r0, [r5, #0]
 8007820:	6869      	ldr	r1, [r5, #4]
 8007822:	68aa      	ldr	r2, [r5, #8]
 8007824:	68eb      	ldr	r3, [r5, #12]
 8007826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007828:	7c2b      	ldrb	r3, [r5, #16]
 800782a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 800782c:	4a26      	ldr	r2, [pc, #152]	@ (80078c8 <loadMenuTexts+0x1504>)
 800782e:	4b27      	ldr	r3, [pc, #156]	@ (80078cc <loadMenuTexts+0x1508>)
 8007830:	4614      	mov	r4, r2
 8007832:	461d      	mov	r5, r3
 8007834:	6828      	ldr	r0, [r5, #0]
 8007836:	6869      	ldr	r1, [r5, #4]
 8007838:	68aa      	ldr	r2, [r5, #8]
 800783a:	68eb      	ldr	r3, [r5, #12]
 800783c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783e:	7c2b      	ldrb	r3, [r5, #16]
 8007840:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007842:	f000 f845 	bl	80078d0 <menuVariableFinisher>
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bdb0      	pop	{r4, r5, r7, pc}
 800784e:	bf00      	nop
 8007850:	20001dd8 	.word	0x20001dd8
 8007854:	20000ce0 	.word	0x20000ce0
 8007858:	20001dec 	.word	0x20001dec
 800785c:	20000d44 	.word	0x20000d44
 8007860:	20001e00 	.word	0x20001e00
 8007864:	20000d58 	.word	0x20000d58
 8007868:	20001e14 	.word	0x20001e14
 800786c:	20000d94 	.word	0x20000d94
 8007870:	20001e28 	.word	0x20001e28
 8007874:	20000da8 	.word	0x20000da8
 8007878:	20001e3c 	.word	0x20001e3c
 800787c:	20000de4 	.word	0x20000de4
 8007880:	20001e50 	.word	0x20001e50
 8007884:	20000df8 	.word	0x20000df8
 8007888:	20001e64 	.word	0x20001e64
 800788c:	20000e20 	.word	0x20000e20
 8007890:	20001e78 	.word	0x20001e78
 8007894:	20000e48 	.word	0x20000e48
 8007898:	20001e8c 	.word	0x20001e8c
 800789c:	20000e70 	.word	0x20000e70
 80078a0:	20001ea0 	.word	0x20001ea0
 80078a4:	20000e98 	.word	0x20000e98
 80078a8:	20001eb4 	.word	0x20001eb4
 80078ac:	20000ec0 	.word	0x20000ec0
 80078b0:	20001ec8 	.word	0x20001ec8
 80078b4:	20000ee8 	.word	0x20000ee8
 80078b8:	20001edc 	.word	0x20001edc
 80078bc:	20000f10 	.word	0x20000f10
 80078c0:	20001ef0 	.word	0x20001ef0
 80078c4:	20000f38 	.word	0x20000f38
 80078c8:	20001f04 	.word	0x20001f04
 80078cc:	20000f60 	.word	0x20000f60

080078d0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80078d4:	4b99      	ldr	r3, [pc, #612]	@ (8007b3c <menuVariableFinisher+0x26c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80078da:	4b99      	ldr	r3, [pc, #612]	@ (8007b40 <menuVariableFinisher+0x270>)
 80078dc:	2200      	movs	r2, #0
 80078de:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80078e0:	4b98      	ldr	r3, [pc, #608]	@ (8007b44 <menuVariableFinisher+0x274>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80078e6:	4b98      	ldr	r3, [pc, #608]	@ (8007b48 <menuVariableFinisher+0x278>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80078ec:	4b97      	ldr	r3, [pc, #604]	@ (8007b4c <menuVariableFinisher+0x27c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80078f2:	4b97      	ldr	r3, [pc, #604]	@ (8007b50 <menuVariableFinisher+0x280>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80078f8:	4b96      	ldr	r3, [pc, #600]	@ (8007b54 <menuVariableFinisher+0x284>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80078fe:	4b96      	ldr	r3, [pc, #600]	@ (8007b58 <menuVariableFinisher+0x288>)
 8007900:	2200      	movs	r2, #0
 8007902:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007904:	4b95      	ldr	r3, [pc, #596]	@ (8007b5c <menuVariableFinisher+0x28c>)
 8007906:	2200      	movs	r2, #0
 8007908:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800790a:	4b95      	ldr	r3, [pc, #596]	@ (8007b60 <menuVariableFinisher+0x290>)
 800790c:	2200      	movs	r2, #0
 800790e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007910:	4b94      	ldr	r3, [pc, #592]	@ (8007b64 <menuVariableFinisher+0x294>)
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007916:	4b94      	ldr	r3, [pc, #592]	@ (8007b68 <menuVariableFinisher+0x298>)
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800791c:	4b93      	ldr	r3, [pc, #588]	@ (8007b6c <menuVariableFinisher+0x29c>)
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007922:	4b93      	ldr	r3, [pc, #588]	@ (8007b70 <menuVariableFinisher+0x2a0>)
 8007924:	2200      	movs	r2, #0
 8007926:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007928:	4b92      	ldr	r3, [pc, #584]	@ (8007b74 <menuVariableFinisher+0x2a4>)
 800792a:	2200      	movs	r2, #0
 800792c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800792e:	4b92      	ldr	r3, [pc, #584]	@ (8007b78 <menuVariableFinisher+0x2a8>)
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007934:	4b91      	ldr	r3, [pc, #580]	@ (8007b7c <menuVariableFinisher+0x2ac>)
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800793a:	4b91      	ldr	r3, [pc, #580]	@ (8007b80 <menuVariableFinisher+0x2b0>)
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007940:	4b90      	ldr	r3, [pc, #576]	@ (8007b84 <menuVariableFinisher+0x2b4>)
 8007942:	2200      	movs	r2, #0
 8007944:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007946:	4b90      	ldr	r3, [pc, #576]	@ (8007b88 <menuVariableFinisher+0x2b8>)
 8007948:	2200      	movs	r2, #0
 800794a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800794c:	4b8f      	ldr	r3, [pc, #572]	@ (8007b8c <menuVariableFinisher+0x2bc>)
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007952:	4b8f      	ldr	r3, [pc, #572]	@ (8007b90 <menuVariableFinisher+0x2c0>)
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007958:	4b8e      	ldr	r3, [pc, #568]	@ (8007b94 <menuVariableFinisher+0x2c4>)
 800795a:	2200      	movs	r2, #0
 800795c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800795e:	4b8e      	ldr	r3, [pc, #568]	@ (8007b98 <menuVariableFinisher+0x2c8>)
 8007960:	2200      	movs	r2, #0
 8007962:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007964:	4b8d      	ldr	r3, [pc, #564]	@ (8007b9c <menuVariableFinisher+0x2cc>)
 8007966:	2200      	movs	r2, #0
 8007968:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800796a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ba0 <menuVariableFinisher+0x2d0>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007970:	4b8c      	ldr	r3, [pc, #560]	@ (8007ba4 <menuVariableFinisher+0x2d4>)
 8007972:	2200      	movs	r2, #0
 8007974:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007976:	4b8c      	ldr	r3, [pc, #560]	@ (8007ba8 <menuVariableFinisher+0x2d8>)
 8007978:	2200      	movs	r2, #0
 800797a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800797c:	4b8b      	ldr	r3, [pc, #556]	@ (8007bac <menuVariableFinisher+0x2dc>)
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007982:	4b8b      	ldr	r3, [pc, #556]	@ (8007bb0 <menuVariableFinisher+0x2e0>)
 8007984:	2200      	movs	r2, #0
 8007986:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007988:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb4 <menuVariableFinisher+0x2e4>)
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800798e:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb8 <menuVariableFinisher+0x2e8>)
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007994:	4b89      	ldr	r3, [pc, #548]	@ (8007bbc <menuVariableFinisher+0x2ec>)
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800799a:	4b89      	ldr	r3, [pc, #548]	@ (8007bc0 <menuVariableFinisher+0x2f0>)
 800799c:	2200      	movs	r2, #0
 800799e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80079a0:	4b88      	ldr	r3, [pc, #544]	@ (8007bc4 <menuVariableFinisher+0x2f4>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80079a6:	4b88      	ldr	r3, [pc, #544]	@ (8007bc8 <menuVariableFinisher+0x2f8>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80079ac:	4b87      	ldr	r3, [pc, #540]	@ (8007bcc <menuVariableFinisher+0x2fc>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80079b2:	4b87      	ldr	r3, [pc, #540]	@ (8007bd0 <menuVariableFinisher+0x300>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80079b8:	4b86      	ldr	r3, [pc, #536]	@ (8007bd4 <menuVariableFinisher+0x304>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80079be:	4b86      	ldr	r3, [pc, #536]	@ (8007bd8 <menuVariableFinisher+0x308>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80079c4:	4b85      	ldr	r3, [pc, #532]	@ (8007bdc <menuVariableFinisher+0x30c>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80079ca:	4b85      	ldr	r3, [pc, #532]	@ (8007be0 <menuVariableFinisher+0x310>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80079d0:	4b84      	ldr	r3, [pc, #528]	@ (8007be4 <menuVariableFinisher+0x314>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80079d6:	4b84      	ldr	r3, [pc, #528]	@ (8007be8 <menuVariableFinisher+0x318>)
 80079d8:	2200      	movs	r2, #0
 80079da:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80079dc:	4b83      	ldr	r3, [pc, #524]	@ (8007bec <menuVariableFinisher+0x31c>)
 80079de:	2200      	movs	r2, #0
 80079e0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80079e2:	4b83      	ldr	r3, [pc, #524]	@ (8007bf0 <menuVariableFinisher+0x320>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80079e8:	4b82      	ldr	r3, [pc, #520]	@ (8007bf4 <menuVariableFinisher+0x324>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80079ee:	4b82      	ldr	r3, [pc, #520]	@ (8007bf8 <menuVariableFinisher+0x328>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80079f4:	4b81      	ldr	r3, [pc, #516]	@ (8007bfc <menuVariableFinisher+0x32c>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80079fa:	4b81      	ldr	r3, [pc, #516]	@ (8007c00 <menuVariableFinisher+0x330>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007a00:	4b80      	ldr	r3, [pc, #512]	@ (8007c04 <menuVariableFinisher+0x334>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007a06:	4b80      	ldr	r3, [pc, #512]	@ (8007c08 <menuVariableFinisher+0x338>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8007c0c <menuVariableFinisher+0x33c>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007a12:	4b7f      	ldr	r3, [pc, #508]	@ (8007c10 <menuVariableFinisher+0x340>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007a18:	4b7e      	ldr	r3, [pc, #504]	@ (8007c14 <menuVariableFinisher+0x344>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8007c18 <menuVariableFinisher+0x348>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007a24:	4b7d      	ldr	r3, [pc, #500]	@ (8007c1c <menuVariableFinisher+0x34c>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c20 <menuVariableFinisher+0x350>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007a30:	4b7c      	ldr	r3, [pc, #496]	@ (8007c24 <menuVariableFinisher+0x354>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007a36:	4b7c      	ldr	r3, [pc, #496]	@ (8007c28 <menuVariableFinisher+0x358>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8007c2c <menuVariableFinisher+0x35c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007a42:	4b7b      	ldr	r3, [pc, #492]	@ (8007c30 <menuVariableFinisher+0x360>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007a48:	4b7a      	ldr	r3, [pc, #488]	@ (8007c34 <menuVariableFinisher+0x364>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007c38 <menuVariableFinisher+0x368>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007a54:	4b79      	ldr	r3, [pc, #484]	@ (8007c3c <menuVariableFinisher+0x36c>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007a5a:	4b79      	ldr	r3, [pc, #484]	@ (8007c40 <menuVariableFinisher+0x370>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007a60:	4b78      	ldr	r3, [pc, #480]	@ (8007c44 <menuVariableFinisher+0x374>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007a66:	4b78      	ldr	r3, [pc, #480]	@ (8007c48 <menuVariableFinisher+0x378>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007a6c:	4b77      	ldr	r3, [pc, #476]	@ (8007c4c <menuVariableFinisher+0x37c>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007a72:	4b77      	ldr	r3, [pc, #476]	@ (8007c50 <menuVariableFinisher+0x380>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <menuVariableFinisher+0x384>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007a7e:	4b76      	ldr	r3, [pc, #472]	@ (8007c58 <menuVariableFinisher+0x388>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007a84:	4b75      	ldr	r3, [pc, #468]	@ (8007c5c <menuVariableFinisher+0x38c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007a8a:	4b75      	ldr	r3, [pc, #468]	@ (8007c60 <menuVariableFinisher+0x390>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007a90:	4b74      	ldr	r3, [pc, #464]	@ (8007c64 <menuVariableFinisher+0x394>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007a96:	4b74      	ldr	r3, [pc, #464]	@ (8007c68 <menuVariableFinisher+0x398>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007a9c:	4b73      	ldr	r3, [pc, #460]	@ (8007c6c <menuVariableFinisher+0x39c>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007aa2:	4b73      	ldr	r3, [pc, #460]	@ (8007c70 <menuVariableFinisher+0x3a0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007aa8:	4b72      	ldr	r3, [pc, #456]	@ (8007c74 <menuVariableFinisher+0x3a4>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007aae:	4b72      	ldr	r3, [pc, #456]	@ (8007c78 <menuVariableFinisher+0x3a8>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007ab4:	4b71      	ldr	r3, [pc, #452]	@ (8007c7c <menuVariableFinisher+0x3ac>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007aba:	4b71      	ldr	r3, [pc, #452]	@ (8007c80 <menuVariableFinisher+0x3b0>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007ac0:	4b70      	ldr	r3, [pc, #448]	@ (8007c84 <menuVariableFinisher+0x3b4>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8007ac6:	4b70      	ldr	r3, [pc, #448]	@ (8007c88 <menuVariableFinisher+0x3b8>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007acc:	4b6f      	ldr	r3, [pc, #444]	@ (8007c8c <menuVariableFinisher+0x3bc>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8007c90 <menuVariableFinisher+0x3c0>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007ad8:	4b6e      	ldr	r3, [pc, #440]	@ (8007c94 <menuVariableFinisher+0x3c4>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007ade:	4b6e      	ldr	r3, [pc, #440]	@ (8007c98 <menuVariableFinisher+0x3c8>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8007c9c <menuVariableFinisher+0x3cc>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007aea:	4b6d      	ldr	r3, [pc, #436]	@ (8007ca0 <menuVariableFinisher+0x3d0>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007af0:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca4 <menuVariableFinisher+0x3d4>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007af6:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca8 <menuVariableFinisher+0x3d8>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007afc:	4b6b      	ldr	r3, [pc, #428]	@ (8007cac <menuVariableFinisher+0x3dc>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007b02:	4b6b      	ldr	r3, [pc, #428]	@ (8007cb0 <menuVariableFinisher+0x3e0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007b08:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb4 <menuVariableFinisher+0x3e4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb8 <menuVariableFinisher+0x3e8>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007b14:	4b69      	ldr	r3, [pc, #420]	@ (8007cbc <menuVariableFinisher+0x3ec>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007b1a:	4b69      	ldr	r3, [pc, #420]	@ (8007cc0 <menuVariableFinisher+0x3f0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007b20:	4b68      	ldr	r3, [pc, #416]	@ (8007cc4 <menuVariableFinisher+0x3f4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007b26:	4b68      	ldr	r3, [pc, #416]	@ (8007cc8 <menuVariableFinisher+0x3f8>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007b2c:	4b67      	ldr	r3, [pc, #412]	@ (8007ccc <menuVariableFinisher+0x3fc>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	741a      	strb	r2, [r3, #16]
}
 8007b32:	bf00      	nop
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	2000009c 	.word	0x2000009c
 8007b40:	200000b0 	.word	0x200000b0
 8007b44:	200000c4 	.word	0x200000c4
 8007b48:	200000d8 	.word	0x200000d8
 8007b4c:	200000ec 	.word	0x200000ec
 8007b50:	20000100 	.word	0x20000100
 8007b54:	20000114 	.word	0x20000114
 8007b58:	20000128 	.word	0x20000128
 8007b5c:	2000013c 	.word	0x2000013c
 8007b60:	20000150 	.word	0x20000150
 8007b64:	20000164 	.word	0x20000164
 8007b68:	20000178 	.word	0x20000178
 8007b6c:	20001824 	.word	0x20001824
 8007b70:	20001838 	.word	0x20001838
 8007b74:	2000184c 	.word	0x2000184c
 8007b78:	20001860 	.word	0x20001860
 8007b7c:	20001874 	.word	0x20001874
 8007b80:	20001888 	.word	0x20001888
 8007b84:	2000189c 	.word	0x2000189c
 8007b88:	200018b0 	.word	0x200018b0
 8007b8c:	200018c4 	.word	0x200018c4
 8007b90:	200018d8 	.word	0x200018d8
 8007b94:	200018ec 	.word	0x200018ec
 8007b98:	20001900 	.word	0x20001900
 8007b9c:	20001914 	.word	0x20001914
 8007ba0:	20001928 	.word	0x20001928
 8007ba4:	2000193c 	.word	0x2000193c
 8007ba8:	20001950 	.word	0x20001950
 8007bac:	20001964 	.word	0x20001964
 8007bb0:	20001978 	.word	0x20001978
 8007bb4:	2000198c 	.word	0x2000198c
 8007bb8:	200019a0 	.word	0x200019a0
 8007bbc:	200019b4 	.word	0x200019b4
 8007bc0:	200019c8 	.word	0x200019c8
 8007bc4:	200019dc 	.word	0x200019dc
 8007bc8:	200019f0 	.word	0x200019f0
 8007bcc:	20001a04 	.word	0x20001a04
 8007bd0:	20001a18 	.word	0x20001a18
 8007bd4:	20001a2c 	.word	0x20001a2c
 8007bd8:	20001a40 	.word	0x20001a40
 8007bdc:	20001a54 	.word	0x20001a54
 8007be0:	20001a68 	.word	0x20001a68
 8007be4:	20001a7c 	.word	0x20001a7c
 8007be8:	20001a90 	.word	0x20001a90
 8007bec:	20001aa4 	.word	0x20001aa4
 8007bf0:	20001ab8 	.word	0x20001ab8
 8007bf4:	20001acc 	.word	0x20001acc
 8007bf8:	20001ae0 	.word	0x20001ae0
 8007bfc:	20001af4 	.word	0x20001af4
 8007c00:	20001b08 	.word	0x20001b08
 8007c04:	20001b1c 	.word	0x20001b1c
 8007c08:	20001b30 	.word	0x20001b30
 8007c0c:	20001b44 	.word	0x20001b44
 8007c10:	20001b58 	.word	0x20001b58
 8007c14:	20001b6c 	.word	0x20001b6c
 8007c18:	20001b80 	.word	0x20001b80
 8007c1c:	20001b94 	.word	0x20001b94
 8007c20:	20001ba8 	.word	0x20001ba8
 8007c24:	20001bbc 	.word	0x20001bbc
 8007c28:	20001bd0 	.word	0x20001bd0
 8007c2c:	20001be4 	.word	0x20001be4
 8007c30:	20001bf8 	.word	0x20001bf8
 8007c34:	20001c0c 	.word	0x20001c0c
 8007c38:	20001c20 	.word	0x20001c20
 8007c3c:	20001c34 	.word	0x20001c34
 8007c40:	20001c48 	.word	0x20001c48
 8007c44:	20001c5c 	.word	0x20001c5c
 8007c48:	20001c70 	.word	0x20001c70
 8007c4c:	20001c84 	.word	0x20001c84
 8007c50:	20001c98 	.word	0x20001c98
 8007c54:	20001cac 	.word	0x20001cac
 8007c58:	20001cc0 	.word	0x20001cc0
 8007c5c:	20001cd4 	.word	0x20001cd4
 8007c60:	20001ce8 	.word	0x20001ce8
 8007c64:	20001cfc 	.word	0x20001cfc
 8007c68:	20001d10 	.word	0x20001d10
 8007c6c:	20001d24 	.word	0x20001d24
 8007c70:	20001d38 	.word	0x20001d38
 8007c74:	20001d4c 	.word	0x20001d4c
 8007c78:	20001d60 	.word	0x20001d60
 8007c7c:	20001d74 	.word	0x20001d74
 8007c80:	20001d88 	.word	0x20001d88
 8007c84:	20001d9c 	.word	0x20001d9c
 8007c88:	20001db0 	.word	0x20001db0
 8007c8c:	20001dc4 	.word	0x20001dc4
 8007c90:	20001dd8 	.word	0x20001dd8
 8007c94:	20001dec 	.word	0x20001dec
 8007c98:	20001e00 	.word	0x20001e00
 8007c9c:	20001e14 	.word	0x20001e14
 8007ca0:	20001e28 	.word	0x20001e28
 8007ca4:	20001e3c 	.word	0x20001e3c
 8007ca8:	20001e50 	.word	0x20001e50
 8007cac:	20001e64 	.word	0x20001e64
 8007cb0:	20001e78 	.word	0x20001e78
 8007cb4:	20001e8c 	.word	0x20001e8c
 8007cb8:	20001ea0 	.word	0x20001ea0
 8007cbc:	20001eb4 	.word	0x20001eb4
 8007cc0:	20001ec8 	.word	0x20001ec8
 8007cc4:	20001edc 	.word	0x20001edc
 8007cc8:	20001ef0 	.word	0x20001ef0
 8007ccc:	20001f04 	.word	0x20001f04

08007cd0 <resetMenuTexts>:

void resetMenuTexts() {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007cd4:	2211      	movs	r2, #17
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	48d3      	ldr	r0, [pc, #844]	@ (8008028 <resetMenuTexts+0x358>)
 8007cda:	f006 fadf 	bl	800e29c <memset>
    memset(ayarlarText, 0, 17);
 8007cde:	2211      	movs	r2, #17
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	48d2      	ldr	r0, [pc, #840]	@ (800802c <resetMenuTexts+0x35c>)
 8007ce4:	f006 fada 	bl	800e29c <memset>
    memset(hataKayitListText, 0, 17);
 8007ce8:	2211      	movs	r2, #17
 8007cea:	2100      	movs	r1, #0
 8007cec:	48d0      	ldr	r0, [pc, #832]	@ (8008030 <resetMenuTexts+0x360>)
 8007cee:	f006 fad5 	bl	800e29c <memset>
    memset(birHataKoduText, 0, 17);
 8007cf2:	2211      	movs	r2, #17
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	48cf      	ldr	r0, [pc, #828]	@ (8008034 <resetMenuTexts+0x364>)
 8007cf8:	f006 fad0 	bl	800e29c <memset>
    memset(ikiHataKoduText, 0, 17);
 8007cfc:	2211      	movs	r2, #17
 8007cfe:	2100      	movs	r1, #0
 8007d00:	48cd      	ldr	r0, [pc, #820]	@ (8008038 <resetMenuTexts+0x368>)
 8007d02:	f006 facb 	bl	800e29c <memset>
    memset(ucHataKoduText, 0, 17);
 8007d06:	2211      	movs	r2, #17
 8007d08:	2100      	movs	r1, #0
 8007d0a:	48cc      	ldr	r0, [pc, #816]	@ (800803c <resetMenuTexts+0x36c>)
 8007d0c:	f006 fac6 	bl	800e29c <memset>
    memset(dortHataKoduText, 0, 17);
 8007d10:	2211      	movs	r2, #17
 8007d12:	2100      	movs	r1, #0
 8007d14:	48ca      	ldr	r0, [pc, #808]	@ (8008040 <resetMenuTexts+0x370>)
 8007d16:	f006 fac1 	bl	800e29c <memset>
    memset(besHataKoduText, 0, 17);
 8007d1a:	2211      	movs	r2, #17
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	48c9      	ldr	r0, [pc, #804]	@ (8008044 <resetMenuTexts+0x374>)
 8007d20:	f006 fabc 	bl	800e29c <memset>
    memset(altiHataKoduText, 0, 17);
 8007d24:	2211      	movs	r2, #17
 8007d26:	2100      	movs	r1, #0
 8007d28:	48c7      	ldr	r0, [pc, #796]	@ (8008048 <resetMenuTexts+0x378>)
 8007d2a:	f006 fab7 	bl	800e29c <memset>
    memset(yediHataKoduText, 0, 17);
 8007d2e:	2211      	movs	r2, #17
 8007d30:	2100      	movs	r1, #0
 8007d32:	48c6      	ldr	r0, [pc, #792]	@ (800804c <resetMenuTexts+0x37c>)
 8007d34:	f006 fab2 	bl	800e29c <memset>
    memset(sekizHataKoduText, 0, 17);
 8007d38:	2211      	movs	r2, #17
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	48c4      	ldr	r0, [pc, #784]	@ (8008050 <resetMenuTexts+0x380>)
 8007d3e:	f006 faad 	bl	800e29c <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007d42:	2211      	movs	r2, #17
 8007d44:	2100      	movs	r1, #0
 8007d46:	48c3      	ldr	r0, [pc, #780]	@ (8008054 <resetMenuTexts+0x384>)
 8007d48:	f006 faa8 	bl	800e29c <memset>
    memset(onHataKoduText, 0, 17);
 8007d4c:	2211      	movs	r2, #17
 8007d4e:	2100      	movs	r1, #0
 8007d50:	48c1      	ldr	r0, [pc, #772]	@ (8008058 <resetMenuTexts+0x388>)
 8007d52:	f006 faa3 	bl	800e29c <memset>
    memset(silmekIcinText, 0, 17);
 8007d56:	2211      	movs	r2, #17
 8007d58:	2100      	movs	r1, #0
 8007d5a:	48c0      	ldr	r0, [pc, #768]	@ (800805c <resetMenuTexts+0x38c>)
 8007d5c:	f006 fa9e 	bl	800e29c <memset>
    memset(calismaSekliText, 0, 17);
 8007d60:	2211      	movs	r2, #17
 8007d62:	2100      	movs	r1, #0
 8007d64:	48be      	ldr	r0, [pc, #760]	@ (8008060 <resetMenuTexts+0x390>)
 8007d66:	f006 fa99 	bl	800e29c <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007d6a:	2211      	movs	r2, #17
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	48bd      	ldr	r0, [pc, #756]	@ (8008064 <resetMenuTexts+0x394>)
 8007d70:	f006 fa94 	bl	800e29c <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007d74:	2211      	movs	r2, #17
 8007d76:	2100      	movs	r1, #0
 8007d78:	48bb      	ldr	r0, [pc, #748]	@ (8008068 <resetMenuTexts+0x398>)
 8007d7a:	f006 fa8f 	bl	800e29c <memset>
    memset(basGonderText, 0, 17);
 8007d7e:	2211      	movs	r2, #17
 8007d80:	2100      	movs	r1, #0
 8007d82:	48ba      	ldr	r0, [pc, #744]	@ (800806c <resetMenuTexts+0x39c>)
 8007d84:	f006 fa8a 	bl	800e29c <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007d88:	2211      	movs	r2, #17
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	48b8      	ldr	r0, [pc, #736]	@ (8008070 <resetMenuTexts+0x3a0>)
 8007d8e:	f006 fa85 	bl	800e29c <memset>
    memset(pasifText, 0, 17);
 8007d92:	2211      	movs	r2, #17
 8007d94:	2100      	movs	r1, #0
 8007d96:	48b7      	ldr	r0, [pc, #732]	@ (8008074 <resetMenuTexts+0x3a4>)
 8007d98:	f006 fa80 	bl	800e29c <memset>
    memset(aktifText, 0, 17);
 8007d9c:	2211      	movs	r2, #17
 8007d9e:	2100      	movs	r1, #0
 8007da0:	48b5      	ldr	r0, [pc, #724]	@ (8008078 <resetMenuTexts+0x3a8>)
 8007da2:	f006 fa7b 	bl	800e29c <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007da6:	2211      	movs	r2, #17
 8007da8:	2100      	movs	r1, #0
 8007daa:	48b4      	ldr	r0, [pc, #720]	@ (800807c <resetMenuTexts+0x3ac>)
 8007dac:	f006 fa76 	bl	800e29c <memset>
    memset(altLimitText, 0, 17);
 8007db0:	2211      	movs	r2, #17
 8007db2:	2100      	movs	r1, #0
 8007db4:	48b2      	ldr	r0, [pc, #712]	@ (8008080 <resetMenuTexts+0x3b0>)
 8007db6:	f006 fa71 	bl	800e29c <memset>
    memset(basincSalteriText, 0, 17);
 8007dba:	2211      	movs	r2, #17
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	48b1      	ldr	r0, [pc, #708]	@ (8008084 <resetMenuTexts+0x3b4>)
 8007dc0:	f006 fa6c 	bl	800e29c <memset>
    memset(kapiSecimleriText, 0, 17);
 8007dc4:	2211      	movs	r2, #17
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	48af      	ldr	r0, [pc, #700]	@ (8008088 <resetMenuTexts+0x3b8>)
 8007dca:	f006 fa67 	bl	800e29c <memset>
    memset(katKapisiAktifText, 0, 17);
 8007dce:	2211      	movs	r2, #17
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	48ae      	ldr	r0, [pc, #696]	@ (800808c <resetMenuTexts+0x3bc>)
 8007dd4:	f006 fa62 	bl	800e29c <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007dd8:	2211      	movs	r2, #17
 8007dda:	2100      	movs	r1, #0
 8007ddc:	48ac      	ldr	r0, [pc, #688]	@ (8008090 <resetMenuTexts+0x3c0>)
 8007dde:	f006 fa5d 	bl	800e29c <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007de2:	2211      	movs	r2, #17
 8007de4:	2100      	movs	r1, #0
 8007de6:	48ab      	ldr	r0, [pc, #684]	@ (8008094 <resetMenuTexts+0x3c4>)
 8007de8:	f006 fa58 	bl	800e29c <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007dec:	2211      	movs	r2, #17
 8007dee:	2100      	movs	r1, #0
 8007df0:	48a9      	ldr	r0, [pc, #676]	@ (8008098 <resetMenuTexts+0x3c8>)
 8007df2:	f006 fa53 	bl	800e29c <memset>
    memset(kapiButonuESPText, 0, 17);
 8007df6:	2211      	movs	r2, #17
 8007df8:	2100      	movs	r1, #0
 8007dfa:	48a8      	ldr	r0, [pc, #672]	@ (800809c <resetMenuTexts+0x3cc>)
 8007dfc:	f006 fa4e 	bl	800e29c <memset>
    memset(katButonuEXTText, 0, 17);
 8007e00:	2211      	movs	r2, #17
 8007e02:	2100      	movs	r1, #0
 8007e04:	48a6      	ldr	r0, [pc, #664]	@ (80080a0 <resetMenuTexts+0x3d0>)
 8007e06:	f006 fa49 	bl	800e29c <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007e0a:	2211      	movs	r2, #17
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	48a5      	ldr	r0, [pc, #660]	@ (80080a4 <resetMenuTexts+0x3d4>)
 8007e10:	f006 fa44 	bl	800e29c <memset>
    memset(butonKontrolluText, 0, 17);
 8007e14:	2211      	movs	r2, #17
 8007e16:	2100      	movs	r1, #0
 8007e18:	48a3      	ldr	r0, [pc, #652]	@ (80080a8 <resetMenuTexts+0x3d8>)
 8007e1a:	f006 fa3f 	bl	800e29c <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007e1e:	2211      	movs	r2, #17
 8007e20:	2100      	movs	r1, #0
 8007e22:	48a2      	ldr	r0, [pc, #648]	@ (80080ac <resetMenuTexts+0x3dc>)
 8007e24:	f006 fa3a 	bl	800e29c <memset>
    memset(kacSaniyeText, 0, 17);
 8007e28:	2211      	movs	r2, #17
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	48a0      	ldr	r0, [pc, #640]	@ (80080b0 <resetMenuTexts+0x3e0>)
 8007e2e:	f006 fa35 	bl	800e29c <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007e32:	2211      	movs	r2, #17
 8007e34:	2100      	movs	r1, #0
 8007e36:	489f      	ldr	r0, [pc, #636]	@ (80080b4 <resetMenuTexts+0x3e4>)
 8007e38:	f006 fa30 	bl	800e29c <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007e3c:	2211      	movs	r2, #17
 8007e3e:	2100      	movs	r1, #0
 8007e40:	489d      	ldr	r0, [pc, #628]	@ (80080b8 <resetMenuTexts+0x3e8>)
 8007e42:	f006 fa2b 	bl	800e29c <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007e46:	2211      	movs	r2, #17
 8007e48:	2100      	movs	r1, #0
 8007e4a:	489c      	ldr	r0, [pc, #624]	@ (80080bc <resetMenuTexts+0x3ec>)
 8007e4c:	f006 fa26 	bl	800e29c <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007e50:	2211      	movs	r2, #17
 8007e52:	2100      	movs	r1, #0
 8007e54:	489a      	ldr	r0, [pc, #616]	@ (80080c0 <resetMenuTexts+0x3f0>)
 8007e56:	f006 fa21 	bl	800e29c <memset>
    memset(birinciKattaAcText, 0, 17);
 8007e5a:	2211      	movs	r2, #17
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4899      	ldr	r0, [pc, #612]	@ (80080c4 <resetMenuTexts+0x3f4>)
 8007e60:	f006 fa1c 	bl	800e29c <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007e64:	2211      	movs	r2, #17
 8007e66:	2100      	movs	r1, #0
 8007e68:	4897      	ldr	r0, [pc, #604]	@ (80080c8 <resetMenuTexts+0x3f8>)
 8007e6a:	f006 fa17 	bl	800e29c <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007e6e:	2211      	movs	r2, #17
 8007e70:	2100      	movs	r1, #0
 8007e72:	4896      	ldr	r0, [pc, #600]	@ (80080cc <resetMenuTexts+0x3fc>)
 8007e74:	f006 fa12 	bl	800e29c <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007e78:	2211      	movs	r2, #17
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4894      	ldr	r0, [pc, #592]	@ (80080d0 <resetMenuTexts+0x400>)
 8007e7e:	f006 fa0d 	bl	800e29c <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007e82:	2211      	movs	r2, #17
 8007e84:	2100      	movs	r1, #0
 8007e86:	4893      	ldr	r0, [pc, #588]	@ (80080d4 <resetMenuTexts+0x404>)
 8007e88:	f006 fa08 	bl	800e29c <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007e8c:	2211      	movs	r2, #17
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4891      	ldr	r0, [pc, #580]	@ (80080d8 <resetMenuTexts+0x408>)
 8007e92:	f006 fa03 	bl	800e29c <memset>
    memset(devirmeAktifText, 0, 17);
 8007e96:	2211      	movs	r2, #17
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4890      	ldr	r0, [pc, #576]	@ (80080dc <resetMenuTexts+0x40c>)
 8007e9c:	f006 f9fe 	bl	800e29c <memset>
    memset(yuruyusAktifText, 0, 17);
 8007ea0:	2211      	movs	r2, #17
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	488e      	ldr	r0, [pc, #568]	@ (80080e0 <resetMenuTexts+0x410>)
 8007ea6:	f006 f9f9 	bl	800e29c <memset>
    memset(devirmeYukariText, 0, 17);
 8007eaa:	2211      	movs	r2, #17
 8007eac:	2100      	movs	r1, #0
 8007eae:	488d      	ldr	r0, [pc, #564]	@ (80080e4 <resetMenuTexts+0x414>)
 8007eb0:	f006 f9f4 	bl	800e29c <memset>
    memset(yuruyusIleriText, 0, 17);
 8007eb4:	2211      	movs	r2, #17
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	488b      	ldr	r0, [pc, #556]	@ (80080e8 <resetMenuTexts+0x418>)
 8007eba:	f006 f9ef 	bl	800e29c <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007ebe:	2211      	movs	r2, #17
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	488a      	ldr	r0, [pc, #552]	@ (80080ec <resetMenuTexts+0x41c>)
 8007ec4:	f006 f9ea 	bl	800e29c <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007ec8:	2211      	movs	r2, #17
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4888      	ldr	r0, [pc, #544]	@ (80080f0 <resetMenuTexts+0x420>)
 8007ece:	f006 f9e5 	bl	800e29c <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007ed2:	2211      	movs	r2, #17
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4887      	ldr	r0, [pc, #540]	@ (80080f4 <resetMenuTexts+0x424>)
 8007ed8:	f006 f9e0 	bl	800e29c <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007edc:	2211      	movs	r2, #17
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4885      	ldr	r0, [pc, #532]	@ (80080f8 <resetMenuTexts+0x428>)
 8007ee2:	f006 f9db 	bl	800e29c <memset>
    memset(tekTesirText, 0, 17);
 8007ee6:	2211      	movs	r2, #17
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4884      	ldr	r0, [pc, #528]	@ (80080fc <resetMenuTexts+0x42c>)
 8007eec:	f006 f9d6 	bl	800e29c <memset>
    memset(ciftTesirText, 0, 17);
 8007ef0:	2211      	movs	r2, #17
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4882      	ldr	r0, [pc, #520]	@ (8008100 <resetMenuTexts+0x430>)
 8007ef6:	f006 f9d1 	bl	800e29c <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007efa:	2211      	movs	r2, #17
 8007efc:	2100      	movs	r1, #0
 8007efe:	4881      	ldr	r0, [pc, #516]	@ (8008104 <resetMenuTexts+0x434>)
 8007f00:	f006 f9cc 	bl	800e29c <memset>
    memset(yukariValfSureText, 0, 17);
 8007f04:	2211      	movs	r2, #17
 8007f06:	2100      	movs	r1, #0
 8007f08:	487f      	ldr	r0, [pc, #508]	@ (8008108 <resetMenuTexts+0x438>)
 8007f0a:	f006 f9c7 	bl	800e29c <memset>
    memset(asagiValfSureText, 0, 17);
 8007f0e:	2211      	movs	r2, #17
 8007f10:	2100      	movs	r1, #0
 8007f12:	487e      	ldr	r0, [pc, #504]	@ (800810c <resetMenuTexts+0x43c>)
 8007f14:	f006 f9c2 	bl	800e29c <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007f18:	2211      	movs	r2, #17
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	487c      	ldr	r0, [pc, #496]	@ (8008110 <resetMenuTexts+0x440>)
 8007f1e:	f006 f9bd 	bl	800e29c <memset>
    memset(ileriValfSureText, 0, 17);
 8007f22:	2211      	movs	r2, #17
 8007f24:	2100      	movs	r1, #0
 8007f26:	487b      	ldr	r0, [pc, #492]	@ (8008114 <resetMenuTexts+0x444>)
 8007f28:	f006 f9b8 	bl	800e29c <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007f2c:	2211      	movs	r2, #17
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4879      	ldr	r0, [pc, #484]	@ (8008118 <resetMenuTexts+0x448>)
 8007f32:	f006 f9b3 	bl	800e29c <memset>
    memset(geriValfSureText, 0, 17);
 8007f36:	2211      	movs	r2, #17
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4878      	ldr	r0, [pc, #480]	@ (800811c <resetMenuTexts+0x44c>)
 8007f3c:	f006 f9ae 	bl	800e29c <memset>
    memset(calismaSuresiText, 0, 17);
 8007f40:	2211      	movs	r2, #17
 8007f42:	2100      	movs	r1, #0
 8007f44:	4876      	ldr	r0, [pc, #472]	@ (8008120 <resetMenuTexts+0x450>)
 8007f46:	f006 f9a9 	bl	800e29c <memset>
    memset(calismaSayisiText, 0, 17);
 8007f4a:	2211      	movs	r2, #17
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4875      	ldr	r0, [pc, #468]	@ (8008124 <resetMenuTexts+0x454>)
 8007f50:	f006 f9a4 	bl	800e29c <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007f54:	2211      	movs	r2, #17
 8007f56:	2100      	movs	r1, #0
 8007f58:	4873      	ldr	r0, [pc, #460]	@ (8008128 <resetMenuTexts+0x458>)
 8007f5a:	f006 f99f 	bl	800e29c <memset>
    memset(dilSecimText, 0, 17);
 8007f5e:	2211      	movs	r2, #17
 8007f60:	2100      	movs	r1, #0
 8007f62:	4872      	ldr	r0, [pc, #456]	@ (800812c <resetMenuTexts+0x45c>)
 8007f64:	f006 f99a 	bl	800e29c <memset>
    memset(secilenDilText, 0, 17);
 8007f68:	2211      	movs	r2, #17
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4870      	ldr	r0, [pc, #448]	@ (8008130 <resetMenuTexts+0x460>)
 8007f6e:	f006 f995 	bl	800e29c <memset>
    memset(menudenCikisText, 0, 17);
 8007f72:	2211      	movs	r2, #17
 8007f74:	2100      	movs	r1, #0
 8007f76:	486f      	ldr	r0, [pc, #444]	@ (8008134 <resetMenuTexts+0x464>)
 8007f78:	f006 f990 	bl	800e29c <memset>
    memset(enteraBasinizText, 0, 17);
 8007f7c:	2211      	movs	r2, #17
 8007f7e:	2100      	movs	r1, #0
 8007f80:	486d      	ldr	r0, [pc, #436]	@ (8008138 <resetMenuTexts+0x468>)
 8007f82:	f006 f98b 	bl	800e29c <memset>
    memset(hataKoduText, 0, 17);
 8007f86:	2211      	movs	r2, #17
 8007f88:	2100      	movs	r1, #0
 8007f8a:	486c      	ldr	r0, [pc, #432]	@ (800813c <resetMenuTexts+0x46c>)
 8007f8c:	f006 f986 	bl	800e29c <memset>
    memset(dataSynchText, 0, 17);
 8007f90:	2211      	movs	r2, #17
 8007f92:	2100      	movs	r1, #0
 8007f94:	486a      	ldr	r0, [pc, #424]	@ (8008140 <resetMenuTexts+0x470>)
 8007f96:	f006 f981 	bl	800e29c <memset>
    memset(dataSynch2Text, 0, 17);
 8007f9a:	2211      	movs	r2, #17
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4869      	ldr	r0, [pc, #420]	@ (8008144 <resetMenuTexts+0x474>)
 8007fa0:	f006 f97c 	bl	800e29c <memset>
    memset(mustBeUniqueText, 0, 17);
 8007fa4:	2211      	movs	r2, #17
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4867      	ldr	r0, [pc, #412]	@ (8008148 <resetMenuTexts+0x478>)
 8007faa:	f006 f977 	bl	800e29c <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007fae:	2211      	movs	r2, #17
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4866      	ldr	r0, [pc, #408]	@ (800814c <resetMenuTexts+0x47c>)
 8007fb4:	f006 f972 	bl	800e29c <memset>
    memset(mustBe12Text, 0, 17);
 8007fb8:	2211      	movs	r2, #17
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4864      	ldr	r0, [pc, #400]	@ (8008150 <resetMenuTexts+0x480>)
 8007fbe:	f006 f96d 	bl	800e29c <memset>
    memset(mustBe122Text, 0, 17);
 8007fc2:	2211      	movs	r2, #17
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	4863      	ldr	r0, [pc, #396]	@ (8008154 <resetMenuTexts+0x484>)
 8007fc8:	f006 f968 	bl	800e29c <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007fcc:	2211      	movs	r2, #17
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4861      	ldr	r0, [pc, #388]	@ (8008158 <resetMenuTexts+0x488>)
 8007fd2:	f006 f963 	bl	800e29c <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007fd6:	2211      	movs	r2, #17
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4860      	ldr	r0, [pc, #384]	@ (800815c <resetMenuTexts+0x48c>)
 8007fdc:	f006 f95e 	bl	800e29c <memset>
    memset(passExceedErrorText, 0, 17);
 8007fe0:	2211      	movs	r2, #17
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	485e      	ldr	r0, [pc, #376]	@ (8008160 <resetMenuTexts+0x490>)
 8007fe6:	f006 f959 	bl	800e29c <memset>
    memset(passExceedError2Text, 0, 17);
 8007fea:	2211      	movs	r2, #17
 8007fec:	2100      	movs	r1, #0
 8007fee:	485d      	ldr	r0, [pc, #372]	@ (8008164 <resetMenuTexts+0x494>)
 8007ff0:	f006 f954 	bl	800e29c <memset>
    memset(dataYazildiText, 0, 17);
 8007ff4:	2211      	movs	r2, #17
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	485b      	ldr	r0, [pc, #364]	@ (8008168 <resetMenuTexts+0x498>)
 8007ffa:	f006 f94f 	bl	800e29c <memset>
    memset(dataOkunuyorText, 0, 17);
 8007ffe:	2211      	movs	r2, #17
 8008000:	2100      	movs	r1, #0
 8008002:	485a      	ldr	r0, [pc, #360]	@ (800816c <resetMenuTexts+0x49c>)
 8008004:	f006 f94a 	bl	800e29c <memset>
    memset(dataOkunduText, 0, 17);
 8008008:	2211      	movs	r2, #17
 800800a:	2100      	movs	r1, #0
 800800c:	4858      	ldr	r0, [pc, #352]	@ (8008170 <resetMenuTexts+0x4a0>)
 800800e:	f006 f945 	bl	800e29c <memset>
    memset(degerKaydedildiText, 0, 17);
 8008012:	2211      	movs	r2, #17
 8008014:	2100      	movs	r1, #0
 8008016:	4857      	ldr	r0, [pc, #348]	@ (8008174 <resetMenuTexts+0x4a4>)
 8008018:	f006 f940 	bl	800e29c <memset>
    memset(errorCodeText, 0, 17);
 800801c:	2211      	movs	r2, #17
 800801e:	2100      	movs	r1, #0
 8008020:	4855      	ldr	r0, [pc, #340]	@ (8008178 <resetMenuTexts+0x4a8>)
 8008022:	f006 f93b 	bl	800e29c <memset>
 8008026:	e0a9      	b.n	800817c <resetMenuTexts+0x4ac>
 8008028:	20001824 	.word	0x20001824
 800802c:	20001838 	.word	0x20001838
 8008030:	2000184c 	.word	0x2000184c
 8008034:	20001860 	.word	0x20001860
 8008038:	20001874 	.word	0x20001874
 800803c:	20001888 	.word	0x20001888
 8008040:	2000189c 	.word	0x2000189c
 8008044:	200018b0 	.word	0x200018b0
 8008048:	200018c4 	.word	0x200018c4
 800804c:	200018d8 	.word	0x200018d8
 8008050:	200018ec 	.word	0x200018ec
 8008054:	20001900 	.word	0x20001900
 8008058:	20001914 	.word	0x20001914
 800805c:	20001928 	.word	0x20001928
 8008060:	2000193c 	.word	0x2000193c
 8008064:	20001950 	.word	0x20001950
 8008068:	20001964 	.word	0x20001964
 800806c:	20001978 	.word	0x20001978
 8008070:	2000198c 	.word	0x2000198c
 8008074:	200019a0 	.word	0x200019a0
 8008078:	200019b4 	.word	0x200019b4
 800807c:	200019c8 	.word	0x200019c8
 8008080:	200019dc 	.word	0x200019dc
 8008084:	200019f0 	.word	0x200019f0
 8008088:	20001a04 	.word	0x20001a04
 800808c:	20001a18 	.word	0x20001a18
 8008090:	20001a2c 	.word	0x20001a2c
 8008094:	20001a40 	.word	0x20001a40
 8008098:	20001a54 	.word	0x20001a54
 800809c:	20001a68 	.word	0x20001a68
 80080a0:	20001a7c 	.word	0x20001a7c
 80080a4:	20001a90 	.word	0x20001a90
 80080a8:	20001aa4 	.word	0x20001aa4
 80080ac:	20001ab8 	.word	0x20001ab8
 80080b0:	20001acc 	.word	0x20001acc
 80080b4:	20001ae0 	.word	0x20001ae0
 80080b8:	20001af4 	.word	0x20001af4
 80080bc:	20001b08 	.word	0x20001b08
 80080c0:	20001b1c 	.word	0x20001b1c
 80080c4:	20001b30 	.word	0x20001b30
 80080c8:	20001b44 	.word	0x20001b44
 80080cc:	20001b58 	.word	0x20001b58
 80080d0:	20001b6c 	.word	0x20001b6c
 80080d4:	20001b80 	.word	0x20001b80
 80080d8:	20001b94 	.word	0x20001b94
 80080dc:	20001ba8 	.word	0x20001ba8
 80080e0:	20001bbc 	.word	0x20001bbc
 80080e4:	20001bd0 	.word	0x20001bd0
 80080e8:	20001be4 	.word	0x20001be4
 80080ec:	20001bf8 	.word	0x20001bf8
 80080f0:	20001c0c 	.word	0x20001c0c
 80080f4:	20001c20 	.word	0x20001c20
 80080f8:	20001c34 	.word	0x20001c34
 80080fc:	20001c48 	.word	0x20001c48
 8008100:	20001c5c 	.word	0x20001c5c
 8008104:	20001c70 	.word	0x20001c70
 8008108:	20001c84 	.word	0x20001c84
 800810c:	20001c98 	.word	0x20001c98
 8008110:	20001cac 	.word	0x20001cac
 8008114:	20001cc0 	.word	0x20001cc0
 8008118:	20001cd4 	.word	0x20001cd4
 800811c:	20001ce8 	.word	0x20001ce8
 8008120:	20001cfc 	.word	0x20001cfc
 8008124:	20001d10 	.word	0x20001d10
 8008128:	20001d24 	.word	0x20001d24
 800812c:	20001d38 	.word	0x20001d38
 8008130:	20001d4c 	.word	0x20001d4c
 8008134:	20001d60 	.word	0x20001d60
 8008138:	20001d74 	.word	0x20001d74
 800813c:	20001d88 	.word	0x20001d88
 8008140:	20001d9c 	.word	0x20001d9c
 8008144:	20001db0 	.word	0x20001db0
 8008148:	20001dc4 	.word	0x20001dc4
 800814c:	20001dd8 	.word	0x20001dd8
 8008150:	20001dec 	.word	0x20001dec
 8008154:	20001e00 	.word	0x20001e00
 8008158:	20001e14 	.word	0x20001e14
 800815c:	20001e28 	.word	0x20001e28
 8008160:	20001e3c 	.word	0x20001e3c
 8008164:	20001e50 	.word	0x20001e50
 8008168:	20001e64 	.word	0x20001e64
 800816c:	20001e78 	.word	0x20001e78
 8008170:	20001e8c 	.word	0x20001e8c
 8008174:	20001ea0 	.word	0x20001ea0
 8008178:	20001eb4 	.word	0x20001eb4
    memset(machineIDText, 0, 17);
 800817c:	2211      	movs	r2, #17
 800817e:	2100      	movs	r1, #0
 8008180:	4809      	ldr	r0, [pc, #36]	@ (80081a8 <resetMenuTexts+0x4d8>)
 8008182:	f006 f88b 	bl	800e29c <memset>
    memset(idConfirmationText, 0, 17);
 8008186:	2211      	movs	r2, #17
 8008188:	2100      	movs	r1, #0
 800818a:	4808      	ldr	r0, [pc, #32]	@ (80081ac <resetMenuTexts+0x4dc>)
 800818c:	f006 f886 	bl	800e29c <memset>
    memset(idConfirmationSubText, 0, 17);
 8008190:	2211      	movs	r2, #17
 8008192:	2100      	movs	r1, #0
 8008194:	4806      	ldr	r0, [pc, #24]	@ (80081b0 <resetMenuTexts+0x4e0>)
 8008196:	f006 f881 	bl	800e29c <memset>
    memset(wifiConfirmationText, 0, 17);
 800819a:	2211      	movs	r2, #17
 800819c:	2100      	movs	r1, #0
 800819e:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <resetMenuTexts+0x4e4>)
 80081a0:	f006 f87c 	bl	800e29c <memset>
}
 80081a4:	bf00      	nop
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20001ec8 	.word	0x20001ec8
 80081ac:	20001edc 	.word	0x20001edc
 80081b0:	20001ef0 	.word	0x20001ef0
 80081b4:	20001f04 	.word	0x20001f04

080081b8 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80081be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80081c2:	f001 fdc5 	bl	8009d50 <HAL_Delay>
	int confirmationVal = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80081ca:	e012      	b.n	80081f2 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 80081cc:	4a12      	ldr	r2, [pc, #72]	@ (8008218 <takeMachineIDWithConfirmation+0x60>)
 80081ce:	2101      	movs	r1, #1
 80081d0:	2001      	movs	r0, #1
 80081d2:	f001 f845 	bl	8009260 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 80081d6:	4a11      	ldr	r2, [pc, #68]	@ (800821c <takeMachineIDWithConfirmation+0x64>)
 80081d8:	2101      	movs	r1, #1
 80081da:	2002      	movs	r0, #2
 80081dc:	f001 f840 	bl	8009260 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 80081e0:	2102      	movs	r1, #2
 80081e2:	480f      	ldr	r0, [pc, #60]	@ (8008220 <takeMachineIDWithConfirmation+0x68>)
 80081e4:	f002 fb90 	bl	800a908 <HAL_GPIO_ReadPin>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0e9      	beq.n	80081cc <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 80081f8:	f000 f814 	bl	8008224 <takeMachineID>

	convertArrays(1);
 80081fc:	2001      	movs	r0, #1
 80081fe:	f7f8 fb53 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 8008202:	2032      	movs	r0, #50	@ 0x32
 8008204:	f001 fda4 	bl	8009d50 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008208:	2001      	movs	r0, #1
 800820a:	f7f9 fabf 	bl	800178c <printCredentials>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20001edc 	.word	0x20001edc
 800821c:	20001ef0 	.word	0x20001ef0
 8008220:	40010800 	.word	0x40010800

08008224 <takeMachineID>:

void takeMachineID() {
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 800822a:	2001      	movs	r0, #1
 800822c:	f001 f876 	bl	800931c <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008230:	220c      	movs	r2, #12
 8008232:	2100      	movs	r1, #0
 8008234:	48a6      	ldr	r0, [pc, #664]	@ (80084d0 <takeMachineID+0x2ac>)
 8008236:	f006 f831 	bl	800e29c <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800823a:	2305      	movs	r3, #5
 800823c:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800823e:	2303      	movs	r3, #3
 8008240:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008246:	4ba3      	ldr	r3, [pc, #652]	@ (80084d4 <takeMachineID+0x2b0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 800824c:	2100      	movs	r1, #0
 800824e:	2001      	movs	r0, #1
 8008250:	f7f9 f92c 	bl	80014ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008254:	2108      	movs	r1, #8
 8008256:	48a0      	ldr	r0, [pc, #640]	@ (80084d8 <takeMachineID+0x2b4>)
 8008258:	f002 fb56 	bl	800a908 <HAL_GPIO_ReadPin>
 800825c:	4603      	mov	r3, r0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d12f      	bne.n	80082c2 <takeMachineID+0x9e>
        	lcd_cursor(0);
 8008262:	2000      	movs	r0, #0
 8008264:	f001 f85a 	bl	800931c <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008268:	f000 fe34 	bl	8008ed4 <checkEEPROM4ID>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d00e      	beq.n	8008290 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008272:	4a9a      	ldr	r2, [pc, #616]	@ (80084dc <takeMachineID+0x2b8>)
 8008274:	2101      	movs	r1, #1
 8008276:	2001      	movs	r0, #1
 8008278:	f000 fff2 	bl	8009260 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 800827c:	4a98      	ldr	r2, [pc, #608]	@ (80084e0 <takeMachineID+0x2bc>)
 800827e:	2101      	movs	r1, #1
 8008280:	2002      	movs	r0, #2
 8008282:	f000 ffed 	bl	8009260 <lcd_print>
        		HAL_Delay(1250);
 8008286:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800828a:	f001 fd61 	bl	8009d50 <HAL_Delay>

        		goto mainSection;
 800828e:	e7cc      	b.n	800822a <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8008290:	f000 fe46 	bl	8008f20 <az5>
 8008294:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d103      	bne.n	80082a4 <takeMachineID+0x80>
        		saveEEPROM(1);
 800829c:	2001      	movs	r0, #1
 800829e:	f7f8 fa01 	bl	80006a4 <saveEEPROM>
 80082a2:	e00e      	b.n	80082c2 <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 80082a4:	4a8f      	ldr	r2, [pc, #572]	@ (80084e4 <takeMachineID+0x2c0>)
 80082a6:	2101      	movs	r1, #1
 80082a8:	2001      	movs	r0, #1
 80082aa:	f000 ffd9 	bl	8009260 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 80082ae:	4a8e      	ldr	r2, [pc, #568]	@ (80084e8 <takeMachineID+0x2c4>)
 80082b0:	2101      	movs	r1, #1
 80082b2:	2002      	movs	r0, #2
 80082b4:	f000 ffd4 	bl	8009260 <lcd_print>

        		HAL_Delay(500);
 80082b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80082bc:	f001 fd48 	bl	8009d50 <HAL_Delay>

        		goto mainSection;
 80082c0:	e7b3      	b.n	800822a <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80082c2:	2101      	movs	r1, #1
 80082c4:	4884      	ldr	r0, [pc, #528]	@ (80084d8 <takeMachineID+0x2b4>)
 80082c6:	f002 fb1f 	bl	800a908 <HAL_GPIO_ReadPin>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d111      	bne.n	80082f4 <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	d102      	bne.n	80082dc <takeMachineID+0xb8>
        		cursorPosition = 10;
 80082d6:	230a      	movs	r3, #10
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	e008      	b.n	80082ee <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b0e      	cmp	r3, #14
 80082e0:	d102      	bne.n	80082e8 <takeMachineID+0xc4>
                cursorPosition = 3;
 80082e2:	2303      	movs	r3, #3
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	e002      	b.n	80082ee <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 80082ee:	2096      	movs	r0, #150	@ 0x96
 80082f0:	f001 fd2e 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80082f4:	2108      	movs	r1, #8
 80082f6:	487d      	ldr	r0, [pc, #500]	@ (80084ec <takeMachineID+0x2c8>)
 80082f8:	f002 fb06 	bl	800a908 <HAL_GPIO_ReadPin>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d111      	bne.n	8008326 <takeMachineID+0x102>
            if (cursorPosition == 3) {
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d102      	bne.n	800830e <takeMachineID+0xea>
                cursorPosition = 14;
 8008308:	230e      	movs	r3, #14
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e008      	b.n	8008320 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b0a      	cmp	r3, #10
 8008312:	d102      	bne.n	800831a <takeMachineID+0xf6>
            	cursorPosition = 7;
 8008314:	2307      	movs	r3, #7
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	e002      	b.n	8008320 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	3b01      	subs	r3, #1
 800831e:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8008320:	20fa      	movs	r0, #250	@ 0xfa
 8008322:	f001 fd15 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008326:	2102      	movs	r1, #2
 8008328:	486b      	ldr	r0, [pc, #428]	@ (80084d8 <takeMachineID+0x2b4>)
 800832a:	f002 faed 	bl	800a908 <HAL_GPIO_ReadPin>
 800832e:	4603      	mov	r3, r0
 8008330:	2b01      	cmp	r3, #1
 8008332:	f040 80a1 	bne.w	8008478 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b03      	cmp	r3, #3
 800833a:	d10a      	bne.n	8008352 <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 800833c:	4a64      	ldr	r2, [pc, #400]	@ (80084d0 <takeMachineID+0x2ac>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	2230      	movs	r2, #48	@ 0x30
 8008344:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008346:	4a6a      	ldr	r2, [pc, #424]	@ (80084f0 <takeMachineID+0x2cc>)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e07c      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b04      	cmp	r3, #4
 8008356:	d10a      	bne.n	800836e <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 8008358:	4a5d      	ldr	r2, [pc, #372]	@ (80084d0 <takeMachineID+0x2ac>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	2231      	movs	r2, #49	@ 0x31
 8008360:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008362:	4a63      	ldr	r2, [pc, #396]	@ (80084f0 <takeMachineID+0x2cc>)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4413      	add	r3, r2
 8008368:	2201      	movs	r2, #1
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e06e      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d10a      	bne.n	800838a <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 8008374:	4a56      	ldr	r2, [pc, #344]	@ (80084d0 <takeMachineID+0x2ac>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	2232      	movs	r2, #50	@ 0x32
 800837c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800837e:	4a5c      	ldr	r2, [pc, #368]	@ (80084f0 <takeMachineID+0x2cc>)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	2202      	movs	r2, #2
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e060      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b06      	cmp	r3, #6
 800838e:	d10a      	bne.n	80083a6 <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8008390:	4a4f      	ldr	r2, [pc, #316]	@ (80084d0 <takeMachineID+0x2ac>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	2233      	movs	r2, #51	@ 0x33
 8008398:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800839a:	4a55      	ldr	r2, [pc, #340]	@ (80084f0 <takeMachineID+0x2cc>)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4413      	add	r3, r2
 80083a0:	2203      	movs	r2, #3
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e052      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d10a      	bne.n	80083c2 <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 80083ac:	4a48      	ldr	r2, [pc, #288]	@ (80084d0 <takeMachineID+0x2ac>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	2234      	movs	r2, #52	@ 0x34
 80083b4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80083b6:	4a4e      	ldr	r2, [pc, #312]	@ (80084f0 <takeMachineID+0x2cc>)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4413      	add	r3, r2
 80083bc:	2204      	movs	r2, #4
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e044      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b0a      	cmp	r3, #10
 80083c6:	d10a      	bne.n	80083de <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 80083c8:	4a41      	ldr	r2, [pc, #260]	@ (80084d0 <takeMachineID+0x2ac>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	2235      	movs	r2, #53	@ 0x35
 80083d0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80083d2:	4a47      	ldr	r2, [pc, #284]	@ (80084f0 <takeMachineID+0x2cc>)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4413      	add	r3, r2
 80083d8:	2205      	movs	r2, #5
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e036      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b0b      	cmp	r3, #11
 80083e2:	d10a      	bne.n	80083fa <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 80083e4:	4a3a      	ldr	r2, [pc, #232]	@ (80084d0 <takeMachineID+0x2ac>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	2236      	movs	r2, #54	@ 0x36
 80083ec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80083ee:	4a40      	ldr	r2, [pc, #256]	@ (80084f0 <takeMachineID+0x2cc>)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4413      	add	r3, r2
 80083f4:	2206      	movs	r2, #6
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e028      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b0c      	cmp	r3, #12
 80083fe:	d10a      	bne.n	8008416 <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 8008400:	4a33      	ldr	r2, [pc, #204]	@ (80084d0 <takeMachineID+0x2ac>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4413      	add	r3, r2
 8008406:	2237      	movs	r2, #55	@ 0x37
 8008408:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 800840a:	4a39      	ldr	r2, [pc, #228]	@ (80084f0 <takeMachineID+0x2cc>)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	2207      	movs	r2, #7
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e01a      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b0d      	cmp	r3, #13
 800841a:	d10a      	bne.n	8008432 <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 800841c:	4a2c      	ldr	r2, [pc, #176]	@ (80084d0 <takeMachineID+0x2ac>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	2238      	movs	r2, #56	@ 0x38
 8008424:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008426:	4a32      	ldr	r2, [pc, #200]	@ (80084f0 <takeMachineID+0x2cc>)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4413      	add	r3, r2
 800842c:	2208      	movs	r2, #8
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e00c      	b.n	800844c <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b0e      	cmp	r3, #14
 8008436:	d109      	bne.n	800844c <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 8008438:	4a25      	ldr	r2, [pc, #148]	@ (80084d0 <takeMachineID+0x2ac>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	2239      	movs	r2, #57	@ 0x39
 8008440:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008442:	4a2b      	ldr	r2, [pc, #172]	@ (80084f0 <takeMachineID+0x2cc>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4413      	add	r3, r2
 8008448:	2209      	movs	r2, #9
 800844a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	b2d9      	uxtb	r1, r3
 8008450:	4a1f      	ldr	r2, [pc, #124]	@ (80084d0 <takeMachineID+0x2ac>)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	2001      	movs	r0, #1
 800845c:	f000 ff15 	bl	800928a <lcd_print_char>

        	writeLoc++;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3301      	adds	r3, #1
 8008464:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3301      	adds	r3, #1
 8008470:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8008472:	2096      	movs	r0, #150	@ 0x96
 8008474:	f001 fc6c 	bl	8009d50 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008478:	2104      	movs	r1, #4
 800847a:	4817      	ldr	r0, [pc, #92]	@ (80084d8 <takeMachineID+0x2b4>)
 800847c:	f002 fa44 	bl	800a908 <HAL_GPIO_ReadPin>
 8008480:	4603      	mov	r3, r0
 8008482:	2b01      	cmp	r3, #1
 8008484:	d14c      	bne.n	8008520 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 8008486:	4b12      	ldr	r3, [pc, #72]	@ (80084d0 <takeMachineID+0x2ac>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d045      	beq.n	800851a <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 800848e:	4a10      	ldr	r2, [pc, #64]	@ (80084d0 <takeMachineID+0x2ac>)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008498:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <takeMachineID+0x2cc>)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b05      	cmp	r3, #5
 80084a6:	dd03      	ble.n	80084b0 <takeMachineID+0x28c>
                	writeLoc--;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	e004      	b.n	80084ba <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	dc01      	bgt.n	80084ba <takeMachineID+0x296>
                	writeLoc = 5;
 80084b6:	2305      	movs	r3, #5
 80084b8:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd19      	ble.n	80084f4 <takeMachineID+0x2d0>
                	arrayPos--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	60bb      	str	r3, [r7, #8]
 80084cc:	e01a      	b.n	8008504 <takeMachineID+0x2e0>
 80084ce:	bf00      	nop
 80084d0:	20001268 	.word	0x20001268
 80084d4:	20000000 	.word	0x20000000
 80084d8:	40010800 	.word	0x40010800
 80084dc:	20001dec 	.word	0x20001dec
 80084e0:	20001e00 	.word	0x20001e00
 80084e4:	20001dc4 	.word	0x20001dc4
 80084e8:	20001dd8 	.word	0x20001dd8
 80084ec:	40011000 	.word	0x40011000
 80084f0:	200011f0 	.word	0x200011f0
                } else if(arrayPos < 0) {
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da04      	bge.n	8008504 <takeMachineID+0x2e0>
                	arrayPos = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 80084fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <takeMachineID+0x30c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	3305      	adds	r3, #5
 800850a:	b2db      	uxtb	r3, r3
 800850c:	4619      	mov	r1, r3
 800850e:	2001      	movs	r0, #1
 8008510:	f000 fedc 	bl	80092cc <lcd_delete_char>
                HAL_Delay(50);
 8008514:	2032      	movs	r0, #50	@ 0x32
 8008516:	f001 fc1b 	bl	8009d50 <HAL_Delay>
            }

            HAL_Delay(150);
 800851a:	2096      	movs	r0, #150	@ 0x96
 800851c:	f001 fc18 	bl	8009d50 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	4619      	mov	r1, r3
 8008526:	2002      	movs	r0, #2
 8008528:	f000 fe7b 	bl	8009222 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800852c:	e692      	b.n	8008254 <takeMachineID+0x30>
 800852e:	bf00      	nop
 8008530:	20000000 	.word	0x20000000

08008534 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800853a:	2301      	movs	r3, #1
 800853c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800853e:	4a1e      	ldr	r2, [pc, #120]	@ (80085b8 <ssidConfirmation+0x84>)
 8008540:	2101      	movs	r1, #1
 8008542:	2001      	movs	r0, #1
 8008544:	f000 fe8c 	bl	8009260 <lcd_print>

	while(loopVal == 1) {
 8008548:	e012      	b.n	8008570 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800854a:	4a1c      	ldr	r2, [pc, #112]	@ (80085bc <ssidConfirmation+0x88>)
 800854c:	2101      	movs	r1, #1
 800854e:	2002      	movs	r0, #2
 8008550:	f000 fe86 	bl	8009260 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008554:	2102      	movs	r1, #2
 8008556:	481a      	ldr	r0, [pc, #104]	@ (80085c0 <ssidConfirmation+0x8c>)
 8008558:	f002 f9d6 	bl	800a908 <HAL_GPIO_ReadPin>
 800855c:	4603      	mov	r3, r0
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <ssidConfirmation+0x32>
			loopVal = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008566:	4a17      	ldr	r2, [pc, #92]	@ (80085c4 <ssidConfirmation+0x90>)
 8008568:	2101      	movs	r1, #1
 800856a:	2001      	movs	r0, #1
 800856c:	f000 fe78 	bl	8009260 <lcd_print>
	while(loopVal == 1) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d0e9      	beq.n	800854a <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008576:	2000      	movs	r0, #0
 8008578:	f000 fed0 	bl	800931c <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 800857c:	4811      	ldr	r0, [pc, #68]	@ (80085c4 <ssidConfirmation+0x90>)
 800857e:	f7f7 fe51 	bl	8000224 <strlen>
 8008582:	4603      	mov	r3, r0
 8008584:	2b14      	cmp	r3, #20
 8008586:	d90f      	bls.n	80085a8 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008588:	4a0f      	ldr	r2, [pc, #60]	@ (80085c8 <ssidConfirmation+0x94>)
 800858a:	2101      	movs	r1, #1
 800858c:	2001      	movs	r0, #1
 800858e:	f000 fe67 	bl	8009260 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8008592:	4a0e      	ldr	r2, [pc, #56]	@ (80085cc <ssidConfirmation+0x98>)
 8008594:	2101      	movs	r1, #1
 8008596:	2002      	movs	r0, #2
 8008598:	f000 fe62 	bl	8009260 <lcd_print>
        HAL_Delay(1250);
 800859c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80085a0:	f001 fbd6 	bl	8009d50 <HAL_Delay>

        return 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e003      	b.n	80085b0 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80085a8:	2001      	movs	r0, #1
 80085aa:	f7f8 f87b 	bl	80006a4 <saveEEPROM>

    	return 1;
 80085ae:	2301      	movs	r3, #1
    }
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	0800f7bc 	.word	0x0800f7bc
 80085bc:	20001f04 	.word	0x20001f04
 80085c0:	40010800 	.word	0x40010800
 80085c4:	20001274 	.word	0x20001274
 80085c8:	20001e14 	.word	0x20001e14
 80085cc:	20001e28 	.word	0x20001e28

080085d0 <takeWifiSSID>:

void takeWifiSSID() {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80085d6:	2001      	movs	r0, #1
 80085d8:	f000 fea0 	bl	800931c <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80085dc:	2210      	movs	r2, #16
 80085de:	2100      	movs	r1, #0
 80085e0:	48a4      	ldr	r0, [pc, #656]	@ (8008874 <takeWifiSSID+0x2a4>)
 80085e2:	f005 fe5b 	bl	800e29c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80085ea:	2307      	movs	r3, #7
 80085ec:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80085ee:	2301      	movs	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80085f6:	4ba0      	ldr	r3, [pc, #640]	@ (8008878 <takeWifiSSID+0x2a8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80085fc:	2101      	movs	r1, #1
 80085fe:	2002      	movs	r0, #2
 8008600:	f7f8 ff54 	bl	80014ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008604:	2108      	movs	r1, #8
 8008606:	489d      	ldr	r0, [pc, #628]	@ (800887c <takeWifiSSID+0x2ac>)
 8008608:	f002 f97e 	bl	800a908 <HAL_GPIO_ReadPin>
 800860c:	4603      	mov	r3, r0
 800860e:	2b01      	cmp	r3, #1
 8008610:	d106      	bne.n	8008620 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8008612:	f7ff ff8f 	bl	8008534 <ssidConfirmation>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	f040 8126 	bne.w	800886a <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 800861e:	e7da      	b.n	80085d6 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008620:	2101      	movs	r1, #1
 8008622:	4896      	ldr	r0, [pc, #600]	@ (800887c <takeWifiSSID+0x2ac>)
 8008624:	f002 f970 	bl	800a908 <HAL_GPIO_ReadPin>
 8008628:	4603      	mov	r3, r0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d14d      	bne.n	80086ca <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b50      	cmp	r3, #80	@ 0x50
 8008632:	dd01      	ble.n	8008638 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8008634:	2301      	movs	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b10      	cmp	r3, #16
 800863c:	d13f      	bne.n	80086be <takeWifiSSID+0xee>
            	if(page == 1) {
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d109      	bne.n	8008658 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8008644:	2301      	movs	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
            		page++;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	3301      	adds	r3, #1
 800864c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800864e:	2102      	movs	r1, #2
 8008650:	2002      	movs	r0, #2
 8008652:	f7f8 ff2b 	bl	80014ac <printTemplate>
 8008656:	e035      	b.n	80086c4 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d109      	bne.n	8008672 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800865e:	2301      	movs	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
            		page++;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	3301      	adds	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008668:	2103      	movs	r1, #3
 800866a:	2002      	movs	r0, #2
 800866c:	f7f8 ff1e 	bl	80014ac <printTemplate>
 8008670:	e028      	b.n	80086c4 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d109      	bne.n	800868c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008678:	2301      	movs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
            		page++;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	3301      	adds	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008682:	2104      	movs	r1, #4
 8008684:	2002      	movs	r0, #2
 8008686:	f7f8 ff11 	bl	80014ac <printTemplate>
 800868a:	e01b      	b.n	80086c4 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b04      	cmp	r3, #4
 8008690:	d109      	bne.n	80086a6 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8008692:	2301      	movs	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
            		page++;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	3301      	adds	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800869c:	2105      	movs	r1, #5
 800869e:	2002      	movs	r0, #2
 80086a0:	f7f8 ff04 	bl	80014ac <printTemplate>
 80086a4:	e00e      	b.n	80086c4 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d10b      	bne.n	80086c4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80086ac:	2301      	movs	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80086b4:	2101      	movs	r1, #1
 80086b6:	2002      	movs	r0, #2
 80086b8:	f7f8 fef8 	bl	80014ac <printTemplate>
 80086bc:	e002      	b.n	80086c4 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80086c4:	2096      	movs	r0, #150	@ 0x96
 80086c6:	f001 fb43 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80086ca:	2108      	movs	r1, #8
 80086cc:	486c      	ldr	r0, [pc, #432]	@ (8008880 <takeWifiSSID+0x2b0>)
 80086ce:	f002 f91b 	bl	800a908 <HAL_GPIO_ReadPin>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d149      	bne.n	800876c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dc01      	bgt.n	80086e2 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80086de:	2350      	movs	r3, #80	@ 0x50
 80086e0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d13b      	bne.n	8008760 <takeWifiSSID+0x190>
            	if(page == 1) {
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d108      	bne.n	8008700 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80086ee:	2310      	movs	r3, #16
 80086f0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80086f2:	2305      	movs	r3, #5
 80086f4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80086f6:	2105      	movs	r1, #5
 80086f8:	2002      	movs	r0, #2
 80086fa:	f7f8 fed7 	bl	80014ac <printTemplate>
 80086fe:	e032      	b.n	8008766 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d108      	bne.n	8008718 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8008706:	2310      	movs	r3, #16
 8008708:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800870a:	2301      	movs	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800870e:	2101      	movs	r1, #1
 8008710:	2002      	movs	r0, #2
 8008712:	f7f8 fecb 	bl	80014ac <printTemplate>
 8008716:	e026      	b.n	8008766 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d108      	bne.n	8008730 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 800871e:	2310      	movs	r3, #16
 8008720:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008722:	2302      	movs	r3, #2
 8008724:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008726:	2102      	movs	r1, #2
 8008728:	2002      	movs	r0, #2
 800872a:	f7f8 febf 	bl	80014ac <printTemplate>
 800872e:	e01a      	b.n	8008766 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2b04      	cmp	r3, #4
 8008734:	d108      	bne.n	8008748 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8008736:	2310      	movs	r3, #16
 8008738:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800873a:	2303      	movs	r3, #3
 800873c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800873e:	2103      	movs	r1, #3
 8008740:	2002      	movs	r0, #2
 8008742:	f7f8 feb3 	bl	80014ac <printTemplate>
 8008746:	e00e      	b.n	8008766 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d10b      	bne.n	8008766 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 800874e:	2310      	movs	r3, #16
 8008750:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008752:	2304      	movs	r3, #4
 8008754:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008756:	2104      	movs	r1, #4
 8008758:	2002      	movs	r0, #2
 800875a:	f7f8 fea7 	bl	80014ac <printTemplate>
 800875e:	e002      	b.n	8008766 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3b01      	subs	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008766:	2096      	movs	r0, #150	@ 0x96
 8008768:	f001 faf2 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800876c:	2102      	movs	r1, #2
 800876e:	4843      	ldr	r0, [pc, #268]	@ (800887c <takeWifiSSID+0x2ac>)
 8008770:	f002 f8ca 	bl	800a908 <HAL_GPIO_ReadPin>
 8008774:	4603      	mov	r3, r0
 8008776:	2b01      	cmp	r3, #1
 8008778:	d12f      	bne.n	80087da <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	b2d9      	uxtb	r1, r3
 800877e:	4a41      	ldr	r2, [pc, #260]	@ (8008884 <takeWifiSSID+0x2b4>)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	460a      	mov	r2, r1
 8008786:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008788:	4a3f      	ldr	r2, [pc, #252]	@ (8008888 <takeWifiSSID+0x2b8>)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	7819      	ldrb	r1, [r3, #0]
 8008790:	4a38      	ldr	r2, [pc, #224]	@ (8008874 <takeWifiSSID+0x2a4>)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4413      	add	r3, r2
 8008796:	460a      	mov	r2, r1
 8008798:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	b2d9      	uxtb	r1, r3
 800879e:	4a3a      	ldr	r2, [pc, #232]	@ (8008888 <takeWifiSSID+0x2b8>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	2001      	movs	r0, #1
 80087aa:	f000 fd6e 	bl	800928a <lcd_print_char>

            writeLoc++;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3301      	adds	r3, #1
 80087be:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80087c0:	4a30      	ldr	r2, [pc, #192]	@ (8008884 <takeWifiSSID+0x2b4>)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80087ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008874 <takeWifiSSID+0x2a4>)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4413      	add	r3, r2
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80087d4:	2096      	movs	r0, #150	@ 0x96
 80087d6:	f001 fabb 	bl	8009d50 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80087da:	2104      	movs	r1, #4
 80087dc:	4827      	ldr	r0, [pc, #156]	@ (800887c <takeWifiSSID+0x2ac>)
 80087de:	f002 f893 	bl	800a908 <HAL_GPIO_ReadPin>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d139      	bne.n	800885c <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80087e8:	4b22      	ldr	r3, [pc, #136]	@ (8008874 <takeWifiSSID+0x2a4>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d032      	beq.n	8008856 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80087f0:	4a24      	ldr	r2, [pc, #144]	@ (8008884 <takeWifiSSID+0x2b4>)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80087fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008874 <takeWifiSSID+0x2a4>)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4413      	add	r3, r2
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b07      	cmp	r3, #7
 8008808:	dd03      	ble.n	8008812 <takeWifiSSID+0x242>
        			writeLoc--;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	3b01      	subs	r3, #1
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	e004      	b.n	800881c <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b06      	cmp	r3, #6
 8008816:	dc01      	bgt.n	800881c <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008818:	2307      	movs	r3, #7
 800881a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	dd06      	ble.n	8008830 <takeWifiSSID+0x260>
        			arrayPosition--;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	3b01      	subs	r3, #1
 8008826:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3b01      	subs	r3, #1
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	e007      	b.n	8008840 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da04      	bge.n	8008840 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800883a:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <takeWifiSSID+0x2a8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	3307      	adds	r3, #7
 8008846:	b2db      	uxtb	r3, r3
 8008848:	4619      	mov	r1, r3
 800884a:	2001      	movs	r0, #1
 800884c:	f000 fd3e 	bl	80092cc <lcd_delete_char>
        		HAL_Delay(50);
 8008850:	2032      	movs	r0, #50	@ 0x32
 8008852:	f001 fa7d 	bl	8009d50 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008856:	2096      	movs	r0, #150	@ 0x96
 8008858:	f001 fa7a 	bl	8009d50 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	2002      	movs	r0, #2
 8008864:	f000 fcdd 	bl	8009222 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008868:	e6cc      	b.n	8008604 <takeWifiSSID+0x34>
        		break;
 800886a:	bf00      	nop
    }
}
 800886c:	bf00      	nop
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20001274 	.word	0x20001274
 8008878:	20000004 	.word	0x20000004
 800887c:	40010800 	.word	0x40010800
 8008880:	40011000 	.word	0x40011000
 8008884:	200011f0 	.word	0x200011f0
 8008888:	20000018 	.word	0x20000018

0800888c <passConfirmation>:

uint8_t passConfirmation() {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008892:	2301      	movs	r3, #1
 8008894:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008896:	4a1e      	ldr	r2, [pc, #120]	@ (8008910 <passConfirmation+0x84>)
 8008898:	2101      	movs	r1, #1
 800889a:	2001      	movs	r0, #1
 800889c:	f000 fce0 	bl	8009260 <lcd_print>

	while(loopVal == 1) {
 80088a0:	e012      	b.n	80088c8 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80088a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008914 <passConfirmation+0x88>)
 80088a4:	2101      	movs	r1, #1
 80088a6:	2002      	movs	r0, #2
 80088a8:	f000 fcda 	bl	8009260 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80088ac:	2102      	movs	r1, #2
 80088ae:	481a      	ldr	r0, [pc, #104]	@ (8008918 <passConfirmation+0x8c>)
 80088b0:	f002 f82a 	bl	800a908 <HAL_GPIO_ReadPin>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <passConfirmation+0x32>
			loopVal = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80088be:	4a17      	ldr	r2, [pc, #92]	@ (800891c <passConfirmation+0x90>)
 80088c0:	2101      	movs	r1, #1
 80088c2:	2001      	movs	r0, #1
 80088c4:	f000 fccc 	bl	8009260 <lcd_print>
	while(loopVal == 1) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d0e9      	beq.n	80088a2 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80088ce:	2000      	movs	r0, #0
 80088d0:	f000 fd24 	bl	800931c <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80088d4:	4811      	ldr	r0, [pc, #68]	@ (800891c <passConfirmation+0x90>)
 80088d6:	f7f7 fca5 	bl	8000224 <strlen>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b14      	cmp	r3, #20
 80088de:	d90f      	bls.n	8008900 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80088e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008920 <passConfirmation+0x94>)
 80088e2:	2101      	movs	r1, #1
 80088e4:	2001      	movs	r0, #1
 80088e6:	f000 fcbb 	bl	8009260 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80088ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008924 <passConfirmation+0x98>)
 80088ec:	2101      	movs	r1, #1
 80088ee:	2002      	movs	r0, #2
 80088f0:	f000 fcb6 	bl	8009260 <lcd_print>
        HAL_Delay(1250);
 80088f4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80088f8:	f001 fa2a 	bl	8009d50 <HAL_Delay>

        return 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e003      	b.n	8008908 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008900:	2001      	movs	r0, #1
 8008902:	f7f7 fecf 	bl	80006a4 <saveEEPROM>

    	return 1;
 8008906:	2301      	movs	r3, #1
    }
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	0800f7bc 	.word	0x0800f7bc
 8008914:	20001f04 	.word	0x20001f04
 8008918:	40010800 	.word	0x40010800
 800891c:	20001284 	.word	0x20001284
 8008920:	20001e3c 	.word	0x20001e3c
 8008924:	20001e50 	.word	0x20001e50

08008928 <takeWifiPass>:

void takeWifiPass() {
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800892e:	2001      	movs	r0, #1
 8008930:	f000 fcf4 	bl	800931c <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008934:	2210      	movs	r2, #16
 8008936:	2100      	movs	r1, #0
 8008938:	48a4      	ldr	r0, [pc, #656]	@ (8008bcc <takeWifiPass+0x2a4>)
 800893a:	f005 fcaf 	bl	800e29c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800893e:	2301      	movs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008942:	2307      	movs	r3, #7
 8008944:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008946:	2301      	movs	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800894e:	4ba0      	ldr	r3, [pc, #640]	@ (8008bd0 <takeWifiPass+0x2a8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008954:	2101      	movs	r1, #1
 8008956:	2003      	movs	r0, #3
 8008958:	f7f8 fda8 	bl	80014ac <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800895c:	2108      	movs	r1, #8
 800895e:	489d      	ldr	r0, [pc, #628]	@ (8008bd4 <takeWifiPass+0x2ac>)
 8008960:	f001 ffd2 	bl	800a908 <HAL_GPIO_ReadPin>
 8008964:	4603      	mov	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d106      	bne.n	8008978 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800896a:	f7ff ff8f 	bl	800888c <passConfirmation>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 8126 	bne.w	8008bc2 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008976:	e7da      	b.n	800892e <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008978:	2101      	movs	r1, #1
 800897a:	4896      	ldr	r0, [pc, #600]	@ (8008bd4 <takeWifiPass+0x2ac>)
 800897c:	f001 ffc4 	bl	800a908 <HAL_GPIO_ReadPin>
 8008980:	4603      	mov	r3, r0
 8008982:	2b01      	cmp	r3, #1
 8008984:	d14d      	bne.n	8008a22 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b50      	cmp	r3, #80	@ 0x50
 800898a:	dd01      	ble.n	8008990 <takeWifiPass+0x68>
        		cursorPosition = 1;
 800898c:	2301      	movs	r3, #1
 800898e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b10      	cmp	r3, #16
 8008994:	d13f      	bne.n	8008a16 <takeWifiPass+0xee>
            	if(page == 1) {
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d109      	bne.n	80089b0 <takeWifiPass+0x88>
            		cursorPosition = 1;
 800899c:	2301      	movs	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
            		page++;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	3301      	adds	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80089a6:	2102      	movs	r1, #2
 80089a8:	2003      	movs	r0, #3
 80089aa:	f7f8 fd7f 	bl	80014ac <printTemplate>
 80089ae:	e035      	b.n	8008a1c <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d109      	bne.n	80089ca <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
            		page++;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	3301      	adds	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80089c0:	2103      	movs	r1, #3
 80089c2:	2003      	movs	r0, #3
 80089c4:	f7f8 fd72 	bl	80014ac <printTemplate>
 80089c8:	e028      	b.n	8008a1c <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d109      	bne.n	80089e4 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80089d0:	2301      	movs	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]
            		page++;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3301      	adds	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80089da:	2104      	movs	r1, #4
 80089dc:	2003      	movs	r0, #3
 80089de:	f7f8 fd65 	bl	80014ac <printTemplate>
 80089e2:	e01b      	b.n	8008a1c <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d109      	bne.n	80089fe <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80089ea:	2301      	movs	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
            		page++;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	3301      	adds	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80089f4:	2105      	movs	r1, #5
 80089f6:	2003      	movs	r0, #3
 80089f8:	f7f8 fd58 	bl	80014ac <printTemplate>
 80089fc:	e00e      	b.n	8008a1c <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	d10b      	bne.n	8008a1c <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8008a04:	2301      	movs	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	2003      	movs	r0, #3
 8008a10:	f7f8 fd4c 	bl	80014ac <printTemplate>
 8008a14:	e002      	b.n	8008a1c <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008a1c:	2096      	movs	r0, #150	@ 0x96
 8008a1e:	f001 f997 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008a22:	2108      	movs	r1, #8
 8008a24:	486c      	ldr	r0, [pc, #432]	@ (8008bd8 <takeWifiPass+0x2b0>)
 8008a26:	f001 ff6f 	bl	800a908 <HAL_GPIO_ReadPin>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d149      	bne.n	8008ac4 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dc01      	bgt.n	8008a3a <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008a36:	2350      	movs	r3, #80	@ 0x50
 8008a38:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d13b      	bne.n	8008ab8 <takeWifiPass+0x190>
            	if(page == 1) {
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d108      	bne.n	8008a58 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8008a46:	2310      	movs	r3, #16
 8008a48:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008a4a:	2305      	movs	r3, #5
 8008a4c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008a4e:	2105      	movs	r1, #5
 8008a50:	2003      	movs	r0, #3
 8008a52:	f7f8 fd2b 	bl	80014ac <printTemplate>
 8008a56:	e032      	b.n	8008abe <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d108      	bne.n	8008a70 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008a5e:	2310      	movs	r3, #16
 8008a60:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008a62:	2301      	movs	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008a66:	2101      	movs	r1, #1
 8008a68:	2003      	movs	r0, #3
 8008a6a:	f7f8 fd1f 	bl	80014ac <printTemplate>
 8008a6e:	e026      	b.n	8008abe <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d108      	bne.n	8008a88 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008a76:	2310      	movs	r3, #16
 8008a78:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008a7e:	2102      	movs	r1, #2
 8008a80:	2003      	movs	r0, #3
 8008a82:	f7f8 fd13 	bl	80014ac <printTemplate>
 8008a86:	e01a      	b.n	8008abe <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d108      	bne.n	8008aa0 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008a8e:	2310      	movs	r3, #16
 8008a90:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008a92:	2303      	movs	r3, #3
 8008a94:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008a96:	2103      	movs	r1, #3
 8008a98:	2003      	movs	r0, #3
 8008a9a:	f7f8 fd07 	bl	80014ac <printTemplate>
 8008a9e:	e00e      	b.n	8008abe <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d10b      	bne.n	8008abe <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008aa6:	2310      	movs	r3, #16
 8008aa8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008aaa:	2304      	movs	r3, #4
 8008aac:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008aae:	2104      	movs	r1, #4
 8008ab0:	2003      	movs	r0, #3
 8008ab2:	f7f8 fcfb 	bl	80014ac <printTemplate>
 8008ab6:	e002      	b.n	8008abe <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008abe:	2096      	movs	r0, #150	@ 0x96
 8008ac0:	f001 f946 	bl	8009d50 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	4843      	ldr	r0, [pc, #268]	@ (8008bd4 <takeWifiPass+0x2ac>)
 8008ac8:	f001 ff1e 	bl	800a908 <HAL_GPIO_ReadPin>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d12f      	bne.n	8008b32 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	b2d9      	uxtb	r1, r3
 8008ad6:	4a41      	ldr	r2, [pc, #260]	@ (8008bdc <takeWifiPass+0x2b4>)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	460a      	mov	r2, r1
 8008ade:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008ae0:	4a3f      	ldr	r2, [pc, #252]	@ (8008be0 <takeWifiPass+0x2b8>)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	7819      	ldrb	r1, [r3, #0]
 8008ae8:	4a38      	ldr	r2, [pc, #224]	@ (8008bcc <takeWifiPass+0x2a4>)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4413      	add	r3, r2
 8008aee:	460a      	mov	r2, r1
 8008af0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	b2d9      	uxtb	r1, r3
 8008af6:	4a3a      	ldr	r2, [pc, #232]	@ (8008be0 <takeWifiPass+0x2b8>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	2001      	movs	r0, #1
 8008b02:	f000 fbc2 	bl	800928a <lcd_print_char>

            writeLoc++;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3301      	adds	r3, #1
 8008b16:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008b18:	4a30      	ldr	r2, [pc, #192]	@ (8008bdc <takeWifiPass+0x2b4>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008b22:	4a2a      	ldr	r2, [pc, #168]	@ (8008bcc <takeWifiPass+0x2a4>)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008b2c:	2096      	movs	r0, #150	@ 0x96
 8008b2e:	f001 f90f 	bl	8009d50 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008b32:	2104      	movs	r1, #4
 8008b34:	4827      	ldr	r0, [pc, #156]	@ (8008bd4 <takeWifiPass+0x2ac>)
 8008b36:	f001 fee7 	bl	800a908 <HAL_GPIO_ReadPin>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d139      	bne.n	8008bb4 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008b40:	4b22      	ldr	r3, [pc, #136]	@ (8008bcc <takeWifiPass+0x2a4>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d032      	beq.n	8008bae <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008b48:	4a24      	ldr	r2, [pc, #144]	@ (8008bdc <takeWifiPass+0x2b4>)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008b52:	4a1e      	ldr	r2, [pc, #120]	@ (8008bcc <takeWifiPass+0x2a4>)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4413      	add	r3, r2
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b07      	cmp	r3, #7
 8008b60:	dd03      	ble.n	8008b6a <takeWifiPass+0x242>
        			writeLoc--;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	e004      	b.n	8008b74 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	dc01      	bgt.n	8008b74 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008b70:	2307      	movs	r3, #7
 8008b72:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dd06      	ble.n	8008b88 <takeWifiPass+0x260>
        			arrayPosition--;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	607b      	str	r3, [r7, #4]
 8008b86:	e007      	b.n	8008b98 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da04      	bge.n	8008b98 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008b92:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd0 <takeWifiPass+0x2a8>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	f000 fb92 	bl	80092cc <lcd_delete_char>
        		HAL_Delay(50);
 8008ba8:	2032      	movs	r0, #50	@ 0x32
 8008baa:	f001 f8d1 	bl	8009d50 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008bae:	2096      	movs	r0, #150	@ 0x96
 8008bb0:	f001 f8ce 	bl	8009d50 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4619      	mov	r1, r3
 8008bba:	2002      	movs	r0, #2
 8008bbc:	f000 fb31 	bl	8009222 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008bc0:	e6cc      	b.n	800895c <takeWifiPass+0x34>
    	        break;
 8008bc2:	bf00      	nop
    }
}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20001284 	.word	0x20001284
 8008bd0:	20000008 	.word	0x20000008
 8008bd4:	40010800 	.word	0x40010800
 8008bd8:	40011000 	.word	0x40011000
 8008bdc:	200011f0 	.word	0x200011f0
 8008be0:	20000018 	.word	0x20000018

08008be4 <mergeData>:

char* mergeData() {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b09c      	sub	sp, #112	@ 0x70
 8008be8:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008bea:	2300      	movs	r3, #0
 8008bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008bf2:	2229      	movs	r2, #41	@ 0x29
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f005 fb50 	bl	800e29c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8008d7c <mergeData+0x198>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	703b      	strb	r3, [r7, #0]
 8008c02:	4b5f      	ldr	r3, [pc, #380]	@ (8008d80 <mergeData+0x19c>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	707b      	strb	r3, [r7, #1]
 8008c08:	4b5e      	ldr	r3, [pc, #376]	@ (8008d84 <mergeData+0x1a0>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	70bb      	strb	r3, [r7, #2]
 8008c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8008d88 <mergeData+0x1a4>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	70fb      	strb	r3, [r7, #3]
 8008c14:	4b5d      	ldr	r3, [pc, #372]	@ (8008d8c <mergeData+0x1a8>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	713b      	strb	r3, [r7, #4]
 8008c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8008d90 <mergeData+0x1ac>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	717b      	strb	r3, [r7, #5]
 8008c20:	4b5c      	ldr	r3, [pc, #368]	@ (8008d94 <mergeData+0x1b0>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	71bb      	strb	r3, [r7, #6]
 8008c26:	4b5c      	ldr	r3, [pc, #368]	@ (8008d98 <mergeData+0x1b4>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
 8008c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8008d9c <mergeData+0x1b8>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	723b      	strb	r3, [r7, #8]
 8008c32:	4b5b      	ldr	r3, [pc, #364]	@ (8008da0 <mergeData+0x1bc>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	727b      	strb	r3, [r7, #9]
 8008c38:	4b5a      	ldr	r3, [pc, #360]	@ (8008da4 <mergeData+0x1c0>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	72bb      	strb	r3, [r7, #10]
 8008c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8008da8 <mergeData+0x1c4>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	72fb      	strb	r3, [r7, #11]
 8008c44:	4b59      	ldr	r3, [pc, #356]	@ (8008dac <mergeData+0x1c8>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	733b      	strb	r3, [r7, #12]
 8008c4a:	4b59      	ldr	r3, [pc, #356]	@ (8008db0 <mergeData+0x1cc>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	737b      	strb	r3, [r7, #13]
 8008c50:	4b58      	ldr	r3, [pc, #352]	@ (8008db4 <mergeData+0x1d0>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	73bb      	strb	r3, [r7, #14]
 8008c56:	4b58      	ldr	r3, [pc, #352]	@ (8008db8 <mergeData+0x1d4>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	4b57      	ldr	r3, [pc, #348]	@ (8008dbc <mergeData+0x1d8>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	743b      	strb	r3, [r7, #16]
 8008c62:	4b57      	ldr	r3, [pc, #348]	@ (8008dc0 <mergeData+0x1dc>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	747b      	strb	r3, [r7, #17]
 8008c68:	4b56      	ldr	r3, [pc, #344]	@ (8008dc4 <mergeData+0x1e0>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	74bb      	strb	r3, [r7, #18]
 8008c6e:	4b56      	ldr	r3, [pc, #344]	@ (8008dc8 <mergeData+0x1e4>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	74fb      	strb	r3, [r7, #19]
 8008c74:	4b55      	ldr	r3, [pc, #340]	@ (8008dcc <mergeData+0x1e8>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	753b      	strb	r3, [r7, #20]
 8008c7a:	4b55      	ldr	r3, [pc, #340]	@ (8008dd0 <mergeData+0x1ec>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	757b      	strb	r3, [r7, #21]
 8008c80:	4b54      	ldr	r3, [pc, #336]	@ (8008dd4 <mergeData+0x1f0>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	75bb      	strb	r3, [r7, #22]
 8008c86:	4b54      	ldr	r3, [pc, #336]	@ (8008dd8 <mergeData+0x1f4>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	75fb      	strb	r3, [r7, #23]
 8008c8c:	4b53      	ldr	r3, [pc, #332]	@ (8008ddc <mergeData+0x1f8>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	763b      	strb	r3, [r7, #24]
 8008c92:	4b53      	ldr	r3, [pc, #332]	@ (8008de0 <mergeData+0x1fc>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	767b      	strb	r3, [r7, #25]
 8008c98:	4b52      	ldr	r3, [pc, #328]	@ (8008de4 <mergeData+0x200>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	76bb      	strb	r3, [r7, #26]
 8008c9e:	4b52      	ldr	r3, [pc, #328]	@ (8008de8 <mergeData+0x204>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	76fb      	strb	r3, [r7, #27]
 8008ca4:	4b51      	ldr	r3, [pc, #324]	@ (8008dec <mergeData+0x208>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	773b      	strb	r3, [r7, #28]
 8008caa:	4b51      	ldr	r3, [pc, #324]	@ (8008df0 <mergeData+0x20c>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008cb0:	4b50      	ldr	r3, [pc, #320]	@ (8008df4 <mergeData+0x210>)
 8008cb2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008cb6:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8008df4 <mergeData+0x210>)
 8008cba:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008cbe:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8008df4 <mergeData+0x210>)
 8008cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008cc6:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008cca:	4b4a      	ldr	r3, [pc, #296]	@ (8008df4 <mergeData+0x210>)
 8008ccc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008cd0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008cd4:	4b47      	ldr	r3, [pc, #284]	@ (8008df4 <mergeData+0x210>)
 8008cd6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008cda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008cde:	4b45      	ldr	r3, [pc, #276]	@ (8008df4 <mergeData+0x210>)
 8008ce0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008ce8:	4b42      	ldr	r3, [pc, #264]	@ (8008df4 <mergeData+0x210>)
 8008cea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008cee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008cf2:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <mergeData+0x210>)
 8008cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008cf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8008df4 <mergeData+0x210>)
 8008cfe:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008d02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008d06:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <mergeData+0x210>)
 8008d08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d10:	233c      	movs	r3, #60	@ 0x3c
 8008d12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008d16:	2300      	movs	r3, #0
 8008d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d1a:	e015      	b.n	8008d48 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d20:	4413      	add	r3, r2
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d2a:	4933      	ldr	r1, [pc, #204]	@ (8008df8 <mergeData+0x214>)
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f005 fa1b 	bl	800e168 <siprintf>
	    strcat(combinedString, temp);
 8008d32:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008d36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f005 fa75 	bl	800e22c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d44:	3301      	adds	r3, #1
 8008d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d4a:	2b28      	cmp	r3, #40	@ 0x28
 8008d4c:	d9e6      	bls.n	8008d1c <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008d4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fa66 	bl	8000224 <strlen>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f005 f94d 	bl	800dffc <malloc>
 8008d62:	4603      	mov	r3, r0
 8008d64:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008d66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008d6e:	f005 fae7 	bl	800e340 <strcpy>
	return result;
 8008d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3770      	adds	r7, #112	@ 0x70
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200016cf 	.word	0x200016cf
 8008d80:	200016c1 	.word	0x200016c1
 8008d84:	200016c4 	.word	0x200016c4
 8008d88:	200016c5 	.word	0x200016c5
 8008d8c:	200016c6 	.word	0x200016c6
 8008d90:	200016cd 	.word	0x200016cd
 8008d94:	200016c7 	.word	0x200016c7
 8008d98:	200016c8 	.word	0x200016c8
 8008d9c:	200016cc 	.word	0x200016cc
 8008da0:	200016c9 	.word	0x200016c9
 8008da4:	200016d9 	.word	0x200016d9
 8008da8:	200016ca 	.word	0x200016ca
 8008dac:	200016da 	.word	0x200016da
 8008db0:	200016cb 	.word	0x200016cb
 8008db4:	200016db 	.word	0x200016db
 8008db8:	200016ce 	.word	0x200016ce
 8008dbc:	200016d0 	.word	0x200016d0
 8008dc0:	200016d1 	.word	0x200016d1
 8008dc4:	200016d2 	.word	0x200016d2
 8008dc8:	200016d3 	.word	0x200016d3
 8008dcc:	200016d4 	.word	0x200016d4
 8008dd0:	200016d5 	.word	0x200016d5
 8008dd4:	200016d6 	.word	0x200016d6
 8008dd8:	200016d7 	.word	0x200016d7
 8008ddc:	200016d8 	.word	0x200016d8
 8008de0:	200016dc 	.word	0x200016dc
 8008de4:	200016de 	.word	0x200016de
 8008de8:	200016b8 	.word	0x200016b8
 8008dec:	200016b9 	.word	0x200016b9
 8008df0:	200016e0 	.word	0x200016e0
 8008df4:	200011f0 	.word	0x200011f0
 8008df8:	0800f7d0 	.word	0x0800f7d0

08008dfc <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008e02:	4a13      	ldr	r2, [pc, #76]	@ (8008e50 <convertAndSendData+0x54>)
 8008e04:	2101      	movs	r1, #1
 8008e06:	2001      	movs	r0, #1
 8008e08:	f000 fa2a 	bl	8009260 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008e0c:	4a11      	ldr	r2, [pc, #68]	@ (8008e54 <convertAndSendData+0x58>)
 8008e0e:	2101      	movs	r1, #1
 8008e10:	2002      	movs	r0, #2
 8008e12:	f000 fa25 	bl	8009260 <lcd_print>

	for(int i=0; i<2; i++) {
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	e00c      	b.n	8008e36 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008e1c:	f7ff fee2 	bl	8008be4 <mergeData>
 8008e20:	4603      	mov	r3, r0
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <convertAndSendData+0x5c>)
 8008e26:	4a0d      	ldr	r2, [pc, #52]	@ (8008e5c <convertAndSendData+0x60>)
 8008e28:	490d      	ldr	r1, [pc, #52]	@ (8008e60 <convertAndSendData+0x64>)
 8008e2a:	480e      	ldr	r0, [pc, #56]	@ (8008e64 <convertAndSendData+0x68>)
 8008e2c:	f7f7 fdf0 	bl	8000a10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	ddef      	ble.n	8008e1c <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008e3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e40:	f000 ff86 	bl	8009d50 <HAL_Delay>
	lcd_clear();
 8008e44:	f000 fa38 	bl	80092b8 <lcd_clear>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20001d9c 	.word	0x20001d9c
 8008e54:	20001db0 	.word	0x20001db0
 8008e58:	20001284 	.word	0x20001284
 8008e5c:	20001274 	.word	0x20001274
 8008e60:	20001268 	.word	0x20001268
 8008e64:	20001fdc 	.word	0x20001fdc

08008e68 <iotSetup>:

void iotSetup() {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008e6c:	4b13      	ldr	r3, [pc, #76]	@ (8008ebc <iotSetup+0x54>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d021      	beq.n	8008eb8 <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008e74:	f000 f82e 	bl	8008ed4 <checkEEPROM4ID>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d001      	beq.n	8008e82 <iotSetup+0x1a>
			takeMachineID();
 8008e7e:	f7ff f9d1 	bl	8008224 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008e82:	480f      	ldr	r0, [pc, #60]	@ (8008ec0 <iotSetup+0x58>)
 8008e84:	f7f7 f9ce 	bl	8000224 <strlen>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d801      	bhi.n	8008e92 <iotSetup+0x2a>
			takeWifiSSID();
 8008e8e:	f7ff fb9f 	bl	80085d0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008e92:	480c      	ldr	r0, [pc, #48]	@ (8008ec4 <iotSetup+0x5c>)
 8008e94:	f7f7 f9c6 	bl	8000224 <strlen>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d801      	bhi.n	8008ea2 <iotSetup+0x3a>
			takeWifiPass();
 8008e9e:	f7ff fd43 	bl	8008928 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008ea2:	4a09      	ldr	r2, [pc, #36]	@ (8008ec8 <iotSetup+0x60>)
 8008ea4:	4909      	ldr	r1, [pc, #36]	@ (8008ecc <iotSetup+0x64>)
 8008ea6:	480a      	ldr	r0, [pc, #40]	@ (8008ed0 <iotSetup+0x68>)
 8008ea8:	f7f7 fd80 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008eb0:	f000 ff4e 	bl	8009d50 <HAL_Delay>
		convertAndSendData();
 8008eb4:	f7ff ffa2 	bl	8008dfc <convertAndSendData>
	}
}
 8008eb8:	bf00      	nop
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200016eb 	.word	0x200016eb
 8008ec0:	20001274 	.word	0x20001274
 8008ec4:	20001284 	.word	0x20001284
 8008ec8:	0800f7d4 	.word	0x0800f7d4
 8008ecc:	0800f7ec 	.word	0x0800f7ec
 8008ed0:	20001fdc 	.word	0x20001fdc

08008ed4 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008eda:	4b0f      	ldr	r3, [pc, #60]	@ (8008f18 <checkEEPROM4ID+0x44>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e00d      	b.n	8008f06 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008eea:	4a0c      	ldr	r2, [pc, #48]	@ (8008f1c <checkEEPROM4ID+0x48>)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3301      	adds	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b0b      	cmp	r3, #11
 8008f0a:	ddee      	ble.n	8008eea <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr
 8008f18:	20000000 	.word	0x20000000
 8008f1c:	200011f0 	.word	0x200011f0

08008f20 <az5>:

int az5() {
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr
	...

08008f30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	f023 030f 	bic.w	r3, r3, #15
 8008f40:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008f48:	7b7b      	ldrb	r3, [r7, #13]
 8008f4a:	f043 030c 	orr.w	r3, r3, #12
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008f52:	7b7b      	ldrb	r3, [r7, #13]
 8008f54:	f043 0308 	orr.w	r3, r3, #8
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008f5c:	7b3b      	ldrb	r3, [r7, #12]
 8008f5e:	f043 030c 	orr.w	r3, r3, #12
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008f66:	7b3b      	ldrb	r3, [r7, #12]
 8008f68:	f043 0308 	orr.w	r3, r3, #8
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008f70:	bf00      	nop
 8008f72:	4825      	ldr	r0, [pc, #148]	@ (8009008 <lcd_send_cmd+0xd8>)
 8008f74:	f002 faf1 	bl	800b55a <HAL_I2C_GetError>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d0f9      	beq.n	8008f72 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008f7e:	bf00      	nop
 8008f80:	4821      	ldr	r0, [pc, #132]	@ (8009008 <lcd_send_cmd+0xd8>)
 8008f82:	f002 fadd 	bl	800b540 <HAL_I2C_GetState>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d1f9      	bne.n	8008f80 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800900c <lcd_send_cmd+0xdc>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d116      	bne.n	8008fc2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
 8008f98:	e00f      	b.n	8008fba <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3310      	adds	r3, #16
 8008f9e:	443b      	add	r3, r7
 8008fa0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	f022 0208 	bic.w	r2, r2, #8
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	3310      	adds	r3, #16
 8008fae:	443b      	add	r3, r7
 8008fb0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	73fb      	strb	r3, [r7, #15]
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d9ec      	bls.n	8008f9a <lcd_send_cmd+0x6a>
 8008fc0:	e015      	b.n	8008fee <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73bb      	strb	r3, [r7, #14]
 8008fc6:	e00f      	b.n	8008fe8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	3310      	adds	r3, #16
 8008fcc:	443b      	add	r3, r7
 8008fce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	f042 0208 	orr.w	r2, r2, #8
 8008fd8:	b2d2      	uxtb	r2, r2
 8008fda:	3310      	adds	r3, #16
 8008fdc:	443b      	add	r3, r7
 8008fde:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	73bb      	strb	r3, [r7, #14]
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d9ec      	bls.n	8008fc8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008fee:	f107 0208 	add.w	r2, r7, #8
 8008ff2:	2364      	movs	r3, #100	@ 0x64
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	2304      	movs	r3, #4
 8008ff8:	214e      	movs	r1, #78	@ 0x4e
 8008ffa:	4803      	ldr	r0, [pc, #12]	@ (8009008 <lcd_send_cmd+0xd8>)
 8008ffc:	f001 fe40 	bl	800ac80 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20001f40 	.word	0x20001f40
 800900c:	20001f15 	.word	0x20001f15

08009010 <lcd_send_data>:

void lcd_send_data (char data) {
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af02      	add	r7, sp, #8
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	f023 030f 	bic.w	r3, r3, #15
 8009020:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009028:	7b7b      	ldrb	r3, [r7, #13]
 800902a:	f043 030d 	orr.w	r3, r3, #13
 800902e:	b2db      	uxtb	r3, r3
 8009030:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8009032:	7b7b      	ldrb	r3, [r7, #13]
 8009034:	f043 0309 	orr.w	r3, r3, #9
 8009038:	b2db      	uxtb	r3, r3
 800903a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800903c:	7b3b      	ldrb	r3, [r7, #12]
 800903e:	f043 030d 	orr.w	r3, r3, #13
 8009042:	b2db      	uxtb	r3, r3
 8009044:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8009046:	7b3b      	ldrb	r3, [r7, #12]
 8009048:	f043 0309 	orr.w	r3, r3, #9
 800904c:	b2db      	uxtb	r3, r3
 800904e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009050:	bf00      	nop
 8009052:	4825      	ldr	r0, [pc, #148]	@ (80090e8 <lcd_send_data+0xd8>)
 8009054:	f002 fa81 	bl	800b55a <HAL_I2C_GetError>
 8009058:	4603      	mov	r3, r0
 800905a:	2b04      	cmp	r3, #4
 800905c:	d0f9      	beq.n	8009052 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800905e:	bf00      	nop
 8009060:	4821      	ldr	r0, [pc, #132]	@ (80090e8 <lcd_send_data+0xd8>)
 8009062:	f002 fa6d 	bl	800b540 <HAL_I2C_GetState>
 8009066:	4603      	mov	r3, r0
 8009068:	2b20      	cmp	r3, #32
 800906a:	d1f9      	bne.n	8009060 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800906c:	4b1f      	ldr	r3, [pc, #124]	@ (80090ec <lcd_send_data+0xdc>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d116      	bne.n	80090a2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e00f      	b.n	800909a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	3310      	adds	r3, #16
 800907e:	443b      	add	r3, r7
 8009080:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	f022 0208 	bic.w	r2, r2, #8
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	3310      	adds	r3, #16
 800908e:	443b      	add	r3, r7
 8009090:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	3301      	adds	r3, #1
 8009098:	73fb      	strb	r3, [r7, #15]
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b03      	cmp	r3, #3
 800909e:	d9ec      	bls.n	800907a <lcd_send_data+0x6a>
 80090a0:	e015      	b.n	80090ce <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80090a2:	2300      	movs	r3, #0
 80090a4:	73bb      	strb	r3, [r7, #14]
 80090a6:	e00f      	b.n	80090c8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	3310      	adds	r3, #16
 80090ac:	443b      	add	r3, r7
 80090ae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	f042 0208 	orr.w	r2, r2, #8
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	3310      	adds	r3, #16
 80090bc:	443b      	add	r3, r7
 80090be:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	3301      	adds	r3, #1
 80090c6:	73bb      	strb	r3, [r7, #14]
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d9ec      	bls.n	80090a8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80090ce:	f107 0208 	add.w	r2, r7, #8
 80090d2:	2364      	movs	r3, #100	@ 0x64
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	2304      	movs	r3, #4
 80090d8:	214e      	movs	r1, #78	@ 0x4e
 80090da:	4803      	ldr	r0, [pc, #12]	@ (80090e8 <lcd_send_data+0xd8>)
 80090dc:	f001 fdd0 	bl	800ac80 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20001f40 	.word	0x20001f40
 80090ec:	20001f15 	.word	0x20001f15

080090f0 <lcd_send_string>:

void lcd_send_string (char *str) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	while (*str) {
 80090f8:	e006      	b.n	8009108 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff ff84 	bl	8009010 <lcd_send_data>
	while (*str) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f4      	bne.n	80090fa <lcd_send_string+0xa>
	}
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <lcd_send_char>:

void lcd_send_char(char ch) {
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af02      	add	r7, sp, #8
 8009122:	4603      	mov	r3, r0
 8009124:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	f023 030f 	bic.w	r3, r3, #15
 800912c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009134:	7b7b      	ldrb	r3, [r7, #13]
 8009136:	f043 030d 	orr.w	r3, r3, #13
 800913a:	b2db      	uxtb	r3, r3
 800913c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800913e:	7b7b      	ldrb	r3, [r7, #13]
 8009140:	f043 0309 	orr.w	r3, r3, #9
 8009144:	b2db      	uxtb	r3, r3
 8009146:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009148:	7b3b      	ldrb	r3, [r7, #12]
 800914a:	f043 030d 	orr.w	r3, r3, #13
 800914e:	b2db      	uxtb	r3, r3
 8009150:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009152:	7b3b      	ldrb	r3, [r7, #12]
 8009154:	f043 0309 	orr.w	r3, r3, #9
 8009158:	b2db      	uxtb	r3, r3
 800915a:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800915c:	bf00      	nop
 800915e:	4825      	ldr	r0, [pc, #148]	@ (80091f4 <lcd_send_char+0xd8>)
 8009160:	f002 f9fb 	bl	800b55a <HAL_I2C_GetError>
 8009164:	4603      	mov	r3, r0
 8009166:	2b04      	cmp	r3, #4
 8009168:	d0f9      	beq.n	800915e <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800916a:	bf00      	nop
 800916c:	4821      	ldr	r0, [pc, #132]	@ (80091f4 <lcd_send_char+0xd8>)
 800916e:	f002 f9e7 	bl	800b540 <HAL_I2C_GetState>
 8009172:	4603      	mov	r3, r0
 8009174:	2b20      	cmp	r3, #32
 8009176:	d1f9      	bne.n	800916c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009178:	4b1f      	ldr	r3, [pc, #124]	@ (80091f8 <lcd_send_char+0xdc>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d116      	bne.n	80091ae <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
 8009184:	e00f      	b.n	80091a6 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	3310      	adds	r3, #16
 800918a:	443b      	add	r3, r7
 800918c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	f022 0208 	bic.w	r2, r2, #8
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	3310      	adds	r3, #16
 800919a:	443b      	add	r3, r7
 800919c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	3301      	adds	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d9ec      	bls.n	8009186 <lcd_send_char+0x6a>
 80091ac:	e015      	b.n	80091da <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80091ae:	2300      	movs	r3, #0
 80091b0:	73bb      	strb	r3, [r7, #14]
 80091b2:	e00f      	b.n	80091d4 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	3310      	adds	r3, #16
 80091b8:	443b      	add	r3, r7
 80091ba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	f042 0208 	orr.w	r2, r2, #8
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	3310      	adds	r3, #16
 80091c8:	443b      	add	r3, r7
 80091ca:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	3301      	adds	r3, #1
 80091d2:	73bb      	strb	r3, [r7, #14]
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d9ec      	bls.n	80091b4 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80091da:	f107 0208 	add.w	r2, r7, #8
 80091de:	2364      	movs	r3, #100	@ 0x64
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	2304      	movs	r3, #4
 80091e4:	214e      	movs	r1, #78	@ 0x4e
 80091e6:	4803      	ldr	r0, [pc, #12]	@ (80091f4 <lcd_send_char+0xd8>)
 80091e8:	f001 fd4a 	bl	800ac80 <HAL_I2C_Master_Transmit>
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20001f40 	.word	0x20001f40
 80091f8:	20001f15 	.word	0x20001f15

080091fc <lcd_init>:

void lcd_init (void) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009200:	2002      	movs	r0, #2
 8009202:	f7ff fe95 	bl	8008f30 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009206:	2028      	movs	r0, #40	@ 0x28
 8009208:	f7ff fe92 	bl	8008f30 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800920c:	200c      	movs	r0, #12
 800920e:	f7ff fe8f 	bl	8008f30 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009212:	2080      	movs	r0, #128	@ 0x80
 8009214:	f7ff fe8c 	bl	8008f30 <lcd_send_cmd>
	lcd_backlight(1);
 8009218:	2001      	movs	r0, #1
 800921a:	f000 f86d 	bl	80092f8 <lcd_backlight>
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}

08009222 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	4603      	mov	r3, r0
 800922a:	460a      	mov	r2, r1
 800922c:	71fb      	strb	r3, [r7, #7]
 800922e:	4613      	mov	r3, r2
 8009230:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d106      	bne.n	8009246 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009238:	79bb      	ldrb	r3, [r7, #6]
 800923a:	337f      	adds	r3, #127	@ 0x7f
 800923c:	b2db      	uxtb	r3, r3
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fe76 	bl	8008f30 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009244:	e008      	b.n	8009258 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d105      	bne.n	8009258 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800924c:	79bb      	ldrb	r3, [r7, #6]
 800924e:	3b41      	subs	r3, #65	@ 0x41
 8009250:	b2db      	uxtb	r3, r3
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fe6c 	bl	8008f30 <lcd_send_cmd>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	603a      	str	r2, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
 800926c:	460b      	mov	r3, r1
 800926e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009270:	79ba      	ldrb	r2, [r7, #6]
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff ffd3 	bl	8009222 <lcd_gotoxy>
	lcd_send_string(str);
 800927c:	6838      	ldr	r0, [r7, #0]
 800927e:	f7ff ff37 	bl	80090f0 <lcd_send_string>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	4603      	mov	r3, r0
 8009292:	71fb      	strb	r3, [r7, #7]
 8009294:	460b      	mov	r3, r1
 8009296:	71bb      	strb	r3, [r7, #6]
 8009298:	4613      	mov	r3, r2
 800929a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800929c:	79ba      	ldrb	r2, [r7, #6]
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	4611      	mov	r1, r2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ffbd 	bl	8009222 <lcd_gotoxy>
    lcd_send_char(ch);
 80092a8:	797b      	ldrb	r3, [r7, #5]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff ff36 	bl	800911c <lcd_send_char>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <lcd_clear>:

void lcd_clear(void) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80092bc:	2001      	movs	r0, #1
 80092be:	f7ff fe37 	bl	8008f30 <lcd_send_cmd>
    HAL_Delay(2);
 80092c2:	2002      	movs	r0, #2
 80092c4:	f000 fd44 	bl	8009d50 <HAL_Delay>
}
 80092c8:	bf00      	nop
 80092ca:	bd80      	pop	{r7, pc}

080092cc <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	460a      	mov	r2, r1
 80092d6:	71fb      	strb	r3, [r7, #7]
 80092d8:	4613      	mov	r3, r2
 80092da:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80092dc:	79ba      	ldrb	r2, [r7, #6]
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff ff9d 	bl	8009222 <lcd_gotoxy>

    lcd_send_char(' ');
 80092e8:	2020      	movs	r0, #32
 80092ea:	f7ff ff17 	bl	800911c <lcd_send_char>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009302:	4a05      	ldr	r2, [pc, #20]	@ (8009318 <lcd_backlight+0x20>)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009308:	2000      	movs	r0, #0
 800930a:	f7ff fe11 	bl	8008f30 <lcd_send_cmd>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001f15 	.word	0x20001f15

0800931c <lcd_cursor>:

void lcd_cursor(int state) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d106      	bne.n	8009338 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800932a:	200e      	movs	r0, #14
 800932c:	f7ff fe00 	bl	8008f30 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009330:	200f      	movs	r0, #15
 8009332:	f7ff fdfd 	bl	8008f30 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009336:	e002      	b.n	800933e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009338:	200c      	movs	r0, #12
 800933a:	f7ff fdf9 	bl	8008f30 <lcd_send_cmd>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009350:	4b04      	ldr	r3, [pc, #16]	@ (8009364 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	4a03      	ldr	r2, [pc, #12]	@ (8009364 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009358:	6013      	str	r3, [r2, #0]
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr
 8009364:	20001698 	.word	0x20001698

08009368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a08      	ldr	r2, [pc, #32]	@ (8009398 <HAL_UART_RxCpltCallback+0x30>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d10a      	bne.n	8009390 <HAL_UART_RxCpltCallback+0x28>
        // RX işlemine başlamadan önce veri alımını durdurun (güvenlik için)
        HAL_UART_AbortReceive_IT(&huart1);
 800937a:	4808      	ldr	r0, [pc, #32]	@ (800939c <HAL_UART_RxCpltCallback+0x34>)
 800937c:	f003 ffd2 	bl	800d324 <HAL_UART_AbortReceive_IT>

        // Gelen byte'ı işleme koyun
        Wifi_RxCallBack(&huart1);
 8009380:	4806      	ldr	r0, [pc, #24]	@ (800939c <HAL_UART_RxCpltCallback+0x34>)
 8009382:	f7f7 fd7b 	bl	8000e7c <Wifi_RxCallBack>

        // Sonraki veri alımına devam edin
        HAL_UART_Receive_IT(&huart1, (uint8_t *)esp8266_rx_buffer, 1);
 8009386:	2201      	movs	r2, #1
 8009388:	4905      	ldr	r1, [pc, #20]	@ (80093a0 <HAL_UART_RxCpltCallback+0x38>)
 800938a:	4804      	ldr	r0, [pc, #16]	@ (800939c <HAL_UART_RxCpltCallback+0x34>)
 800938c:	f003 ff02 	bl	800d194 <HAL_UART_Receive_IT>
    }
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40013800 	.word	0x40013800
 800939c:	20001fdc 	.word	0x20001fdc
 80093a0:	20001298 	.word	0x20001298

080093a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093a8:	f000 fc70 	bl	8009c8c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80093ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093b0:	f000 fcce 	bl	8009d50 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093b4:	f000 f89c 	bl	80094f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093b8:	f000 f9be 	bl	8009738 <MX_GPIO_Init>
  MX_CAN_Init();
 80093bc:	f000 f8de 	bl	800957c <MX_CAN_Init>
  MX_I2C1_Init();
 80093c0:	f000 f910 	bl	80095e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80093c4:	f000 f93c 	bl	8009640 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80093c8:	f000 f98c 	bl	80096e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80093cc:	2201      	movs	r2, #1
 80093ce:	2140      	movs	r1, #64	@ 0x40
 80093d0:	483e      	ldr	r0, [pc, #248]	@ (80094cc <main+0x128>)
 80093d2:	f001 fab0 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80093d6:	2201      	movs	r2, #1
 80093d8:	2180      	movs	r1, #128	@ 0x80
 80093da:	483c      	ldr	r0, [pc, #240]	@ (80094cc <main+0x128>)
 80093dc:	f001 faab 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80093e0:	200a      	movs	r0, #10
 80093e2:	f000 fcb5 	bl	8009d50 <HAL_Delay>
  lcd_init();
 80093e6:	f7ff ff09 	bl	80091fc <lcd_init>
  HAL_Delay(10);
 80093ea:	200a      	movs	r0, #10
 80093ec:	f000 fcb0 	bl	8009d50 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80093f0:	4837      	ldr	r0, [pc, #220]	@ (80094d0 <main+0x12c>)
 80093f2:	f003 f953 	bl	800c69c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80093f6:	bf00      	nop
 80093f8:	4836      	ldr	r0, [pc, #216]	@ (80094d4 <main+0x130>)
 80093fa:	f002 f8ae 	bl	800b55a <HAL_I2C_GetError>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b04      	cmp	r3, #4
 8009402:	d0f9      	beq.n	80093f8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009404:	bf00      	nop
 8009406:	4833      	ldr	r0, [pc, #204]	@ (80094d4 <main+0x130>)
 8009408:	f002 f89a 	bl	800b540 <HAL_I2C_GetState>
 800940c:	4603      	mov	r3, r0
 800940e:	2b20      	cmp	r3, #32
 8009410:	d1f9      	bne.n	8009406 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009412:	2200      	movs	r2, #0
 8009414:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009418:	482c      	ldr	r0, [pc, #176]	@ (80094cc <main+0x128>)
 800941a:	f001 fa8c 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800941e:	2200      	movs	r2, #0
 8009420:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009424:	4829      	ldr	r0, [pc, #164]	@ (80094cc <main+0x128>)
 8009426:	f001 fa86 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800942a:	2200      	movs	r2, #0
 800942c:	2104      	movs	r1, #4
 800942e:	4827      	ldr	r0, [pc, #156]	@ (80094cc <main+0x128>)
 8009430:	f001 fa81 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009434:	2200      	movs	r2, #0
 8009436:	2102      	movs	r1, #2
 8009438:	4824      	ldr	r0, [pc, #144]	@ (80094cc <main+0x128>)
 800943a:	f001 fa7c 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800943e:	2200      	movs	r2, #0
 8009440:	2101      	movs	r1, #1
 8009442:	4822      	ldr	r0, [pc, #136]	@ (80094cc <main+0x128>)
 8009444:	f001 fa77 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009448:	2200      	movs	r2, #0
 800944a:	2120      	movs	r1, #32
 800944c:	4822      	ldr	r0, [pc, #136]	@ (80094d8 <main+0x134>)
 800944e:	f001 fa72 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009452:	2200      	movs	r2, #0
 8009454:	2110      	movs	r1, #16
 8009456:	4820      	ldr	r0, [pc, #128]	@ (80094d8 <main+0x134>)
 8009458:	f001 fa6d 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800945c:	2200      	movs	r2, #0
 800945e:	2180      	movs	r1, #128	@ 0x80
 8009460:	481e      	ldr	r0, [pc, #120]	@ (80094dc <main+0x138>)
 8009462:	f001 fa68 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009466:	2200      	movs	r2, #0
 8009468:	2140      	movs	r1, #64	@ 0x40
 800946a:	481c      	ldr	r0, [pc, #112]	@ (80094dc <main+0x138>)
 800946c:	f001 fa63 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009470:	2200      	movs	r2, #0
 8009472:	2120      	movs	r1, #32
 8009474:	4819      	ldr	r0, [pc, #100]	@ (80094dc <main+0x138>)
 8009476:	f001 fa5e 	bl	800a936 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800947a:	2200      	movs	r2, #0
 800947c:	2110      	movs	r1, #16
 800947e:	4817      	ldr	r0, [pc, #92]	@ (80094dc <main+0x138>)
 8009480:	f001 fa59 	bl	800a936 <HAL_GPIO_WritePin>

  i2cTest();
 8009484:	f7f7 ff64 	bl	8001350 <i2cTest>
  HAL_Delay(100);
 8009488:	2064      	movs	r0, #100	@ 0x64
 800948a:	f000 fc61 	bl	8009d50 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800948e:	4a14      	ldr	r2, [pc, #80]	@ (80094e0 <main+0x13c>)
 8009490:	2101      	movs	r1, #1
 8009492:	2001      	movs	r0, #1
 8009494:	f7ff fee4 	bl	8009260 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009498:	4a12      	ldr	r2, [pc, #72]	@ (80094e4 <main+0x140>)
 800949a:	2101      	movs	r1, #1
 800949c:	2002      	movs	r0, #2
 800949e:	f7ff fedf 	bl	8009260 <lcd_print>
  HAL_Delay(1000);
 80094a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80094a6:	f000 fc53 	bl	8009d50 <HAL_Delay>
  lcd_clear();
 80094aa:	f7ff ff05 	bl	80092b8 <lcd_clear>

  eepromKontrol();
 80094ae:	f7f6 fec1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80094b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80094b6:	f000 fc4b 	bl	8009d50 <HAL_Delay>

  backLightTimer = millis;
 80094ba:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <main+0x144>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a0b      	ldr	r2, [pc, #44]	@ (80094ec <main+0x148>)
 80094c0:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 80094c2:	f7ff fcd1 	bl	8008e68 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80094c6:	f7fc fe33 	bl	8006130 <mainLoop>
 80094ca:	e7fc      	b.n	80094c6 <main+0x122>
 80094cc:	40010c00 	.word	0x40010c00
 80094d0:	20001f94 	.word	0x20001f94
 80094d4:	20001f40 	.word	0x20001f40
 80094d8:	40011000 	.word	0x40011000
 80094dc:	40010800 	.word	0x40010800
 80094e0:	2000009c 	.word	0x2000009c
 80094e4:	200000b0 	.word	0x200000b0
 80094e8:	20001698 	.word	0x20001698
 80094ec:	200016b4 	.word	0x200016b4

080094f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b090      	sub	sp, #64	@ 0x40
 80094f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80094f6:	f107 0318 	add.w	r3, r7, #24
 80094fa:	2228      	movs	r2, #40	@ 0x28
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f004 fecc 	bl	800e29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009504:	1d3b      	adds	r3, r7, #4
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	605a      	str	r2, [r3, #4]
 800950c:	609a      	str	r2, [r3, #8]
 800950e:	60da      	str	r2, [r3, #12]
 8009510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009512:	2301      	movs	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800951a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800951c:	2300      	movs	r3, #0
 800951e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009520:	2301      	movs	r3, #1
 8009522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009524:	2302      	movs	r3, #2
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009528:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800952c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800952e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009534:	f107 0318 	add.w	r3, r7, #24
 8009538:	4618      	mov	r0, r3
 800953a:	f002 fc4f 	bl	800bddc <HAL_RCC_OscConfig>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009544:	f000 f9a2 	bl	800988c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009548:	230f      	movs	r3, #15
 800954a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800954c:	2302      	movs	r3, #2
 800954e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800955e:	1d3b      	adds	r3, r7, #4
 8009560:	2102      	movs	r1, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f002 febc 	bl	800c2e0 <HAL_RCC_ClockConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800956e:	f000 f98d 	bl	800988c <Error_Handler>
  }
}
 8009572:	bf00      	nop
 8009574:	3740      	adds	r7, #64	@ 0x40
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009580:	4b16      	ldr	r3, [pc, #88]	@ (80095dc <MX_CAN_Init+0x60>)
 8009582:	4a17      	ldr	r2, [pc, #92]	@ (80095e0 <MX_CAN_Init+0x64>)
 8009584:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009586:	4b15      	ldr	r3, [pc, #84]	@ (80095dc <MX_CAN_Init+0x60>)
 8009588:	2210      	movs	r2, #16
 800958a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800958c:	4b13      	ldr	r3, [pc, #76]	@ (80095dc <MX_CAN_Init+0x60>)
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <MX_CAN_Init+0x60>)
 8009594:	2200      	movs	r2, #0
 8009596:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009598:	4b10      	ldr	r3, [pc, #64]	@ (80095dc <MX_CAN_Init+0x60>)
 800959a:	2200      	movs	r2, #0
 800959c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800959e:	4b0f      	ldr	r3, [pc, #60]	@ (80095dc <MX_CAN_Init+0x60>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80095a4:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <MX_CAN_Init+0x60>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <MX_CAN_Init+0x60>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <MX_CAN_Init+0x60>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <MX_CAN_Init+0x60>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80095bc:	4b07      	ldr	r3, [pc, #28]	@ (80095dc <MX_CAN_Init+0x60>)
 80095be:	2200      	movs	r2, #0
 80095c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80095c2:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <MX_CAN_Init+0x60>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80095c8:	4804      	ldr	r0, [pc, #16]	@ (80095dc <MX_CAN_Init+0x60>)
 80095ca:	f000 fbe5 	bl	8009d98 <HAL_CAN_Init>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80095d4:	f000 f95a 	bl	800988c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80095d8:	bf00      	nop
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20001f18 	.word	0x20001f18
 80095e0:	40006400 	.word	0x40006400

080095e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80095e8:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <MX_I2C1_Init+0x50>)
 80095ea:	4a13      	ldr	r2, [pc, #76]	@ (8009638 <MX_I2C1_Init+0x54>)
 80095ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80095ee:	4b11      	ldr	r3, [pc, #68]	@ (8009634 <MX_I2C1_Init+0x50>)
 80095f0:	4a12      	ldr	r2, [pc, #72]	@ (800963c <MX_I2C1_Init+0x58>)
 80095f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80095f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009634 <MX_I2C1_Init+0x50>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80095fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009634 <MX_I2C1_Init+0x50>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009600:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <MX_I2C1_Init+0x50>)
 8009602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009608:	4b0a      	ldr	r3, [pc, #40]	@ (8009634 <MX_I2C1_Init+0x50>)
 800960a:	2200      	movs	r2, #0
 800960c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800960e:	4b09      	ldr	r3, [pc, #36]	@ (8009634 <MX_I2C1_Init+0x50>)
 8009610:	2200      	movs	r2, #0
 8009612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009614:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <MX_I2C1_Init+0x50>)
 8009616:	2200      	movs	r2, #0
 8009618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800961a:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <MX_I2C1_Init+0x50>)
 800961c:	2200      	movs	r2, #0
 800961e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009620:	4804      	ldr	r0, [pc, #16]	@ (8009634 <MX_I2C1_Init+0x50>)
 8009622:	f001 f9b9 	bl	800a998 <HAL_I2C_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800962c:	f000 f92e 	bl	800988c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009630:	bf00      	nop
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20001f40 	.word	0x20001f40
 8009638:	40005400 	.word	0x40005400
 800963c:	00061a80 	.word	0x00061a80

08009640 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	605a      	str	r2, [r3, #4]
 8009650:	609a      	str	r2, [r3, #8]
 8009652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009654:	463b      	mov	r3, r7
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800965c:	4b1f      	ldr	r3, [pc, #124]	@ (80096dc <MX_TIM1_Init+0x9c>)
 800965e:	4a20      	ldr	r2, [pc, #128]	@ (80096e0 <MX_TIM1_Init+0xa0>)
 8009660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009662:	4b1e      	ldr	r3, [pc, #120]	@ (80096dc <MX_TIM1_Init+0x9c>)
 8009664:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800966a:	4b1c      	ldr	r3, [pc, #112]	@ (80096dc <MX_TIM1_Init+0x9c>)
 800966c:	2200      	movs	r2, #0
 800966e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009670:	4b1a      	ldr	r3, [pc, #104]	@ (80096dc <MX_TIM1_Init+0x9c>)
 8009672:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009678:	4b18      	ldr	r3, [pc, #96]	@ (80096dc <MX_TIM1_Init+0x9c>)
 800967a:	2200      	movs	r2, #0
 800967c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800967e:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <MX_TIM1_Init+0x9c>)
 8009680:	2200      	movs	r2, #0
 8009682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009684:	4b15      	ldr	r3, [pc, #84]	@ (80096dc <MX_TIM1_Init+0x9c>)
 8009686:	2200      	movs	r2, #0
 8009688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800968a:	4814      	ldr	r0, [pc, #80]	@ (80096dc <MX_TIM1_Init+0x9c>)
 800968c:	f002 ffb6 	bl	800c5fc <HAL_TIM_Base_Init>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009696:	f000 f8f9 	bl	800988c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800969a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800969e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80096a0:	f107 0308 	add.w	r3, r7, #8
 80096a4:	4619      	mov	r1, r3
 80096a6:	480d      	ldr	r0, [pc, #52]	@ (80096dc <MX_TIM1_Init+0x9c>)
 80096a8:	f003 f960 	bl	800c96c <HAL_TIM_ConfigClockSource>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80096b2:	f000 f8eb 	bl	800988c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096b6:	2300      	movs	r3, #0
 80096b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80096be:	463b      	mov	r3, r7
 80096c0:	4619      	mov	r1, r3
 80096c2:	4806      	ldr	r0, [pc, #24]	@ (80096dc <MX_TIM1_Init+0x9c>)
 80096c4:	f003 fb4e 	bl	800cd64 <HAL_TIMEx_MasterConfigSynchronization>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80096ce:	f000 f8dd 	bl	800988c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80096d2:	bf00      	nop
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001f94 	.word	0x20001f94
 80096e0:	40012c00 	.word	0x40012c00

080096e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80096e8:	4b11      	ldr	r3, [pc, #68]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 80096ea:	4a12      	ldr	r2, [pc, #72]	@ (8009734 <MX_USART1_UART_Init+0x50>)
 80096ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80096ee:	4b10      	ldr	r3, [pc, #64]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 80096f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80096f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 80096fe:	2200      	movs	r2, #0
 8009700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009702:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 8009704:	2200      	movs	r2, #0
 8009706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009708:	4b09      	ldr	r3, [pc, #36]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 800970a:	220c      	movs	r2, #12
 800970c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800970e:	4b08      	ldr	r3, [pc, #32]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 8009710:	2200      	movs	r2, #0
 8009712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 8009716:	2200      	movs	r2, #0
 8009718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800971a:	4805      	ldr	r0, [pc, #20]	@ (8009730 <MX_USART1_UART_Init+0x4c>)
 800971c:	f003 fba0 	bl	800ce60 <HAL_UART_Init>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009726:	f000 f8b1 	bl	800988c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800972a:	bf00      	nop
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20001fdc 	.word	0x20001fdc
 8009734:	40013800 	.word	0x40013800

08009738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800973e:	f107 0310 	add.w	r3, r7, #16
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	609a      	str	r2, [r3, #8]
 800974a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800974c:	4b4b      	ldr	r3, [pc, #300]	@ (800987c <MX_GPIO_Init+0x144>)
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	4a4a      	ldr	r2, [pc, #296]	@ (800987c <MX_GPIO_Init+0x144>)
 8009752:	f043 0310 	orr.w	r3, r3, #16
 8009756:	6193      	str	r3, [r2, #24]
 8009758:	4b48      	ldr	r3, [pc, #288]	@ (800987c <MX_GPIO_Init+0x144>)
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009764:	4b45      	ldr	r3, [pc, #276]	@ (800987c <MX_GPIO_Init+0x144>)
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	4a44      	ldr	r2, [pc, #272]	@ (800987c <MX_GPIO_Init+0x144>)
 800976a:	f043 0320 	orr.w	r3, r3, #32
 800976e:	6193      	str	r3, [r2, #24]
 8009770:	4b42      	ldr	r3, [pc, #264]	@ (800987c <MX_GPIO_Init+0x144>)
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	60bb      	str	r3, [r7, #8]
 800977a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800977c:	4b3f      	ldr	r3, [pc, #252]	@ (800987c <MX_GPIO_Init+0x144>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	4a3e      	ldr	r2, [pc, #248]	@ (800987c <MX_GPIO_Init+0x144>)
 8009782:	f043 0304 	orr.w	r3, r3, #4
 8009786:	6193      	str	r3, [r2, #24]
 8009788:	4b3c      	ldr	r3, [pc, #240]	@ (800987c <MX_GPIO_Init+0x144>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	607b      	str	r3, [r7, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009794:	4b39      	ldr	r3, [pc, #228]	@ (800987c <MX_GPIO_Init+0x144>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	4a38      	ldr	r2, [pc, #224]	@ (800987c <MX_GPIO_Init+0x144>)
 800979a:	f043 0308 	orr.w	r3, r3, #8
 800979e:	6193      	str	r3, [r2, #24]
 80097a0:	4b36      	ldr	r3, [pc, #216]	@ (800987c <MX_GPIO_Init+0x144>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	603b      	str	r3, [r7, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80097ac:	2200      	movs	r2, #0
 80097ae:	21f0      	movs	r1, #240	@ 0xf0
 80097b0:	4833      	ldr	r0, [pc, #204]	@ (8009880 <MX_GPIO_Init+0x148>)
 80097b2:	f001 f8c0 	bl	800a936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80097b6:	2200      	movs	r2, #0
 80097b8:	f241 0130 	movw	r1, #4144	@ 0x1030
 80097bc:	4831      	ldr	r0, [pc, #196]	@ (8009884 <MX_GPIO_Init+0x14c>)
 80097be:	f001 f8ba 	bl	800a936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80097c2:	2200      	movs	r2, #0
 80097c4:	f640 4107 	movw	r1, #3079	@ 0xc07
 80097c8:	482f      	ldr	r0, [pc, #188]	@ (8009888 <MX_GPIO_Init+0x150>)
 80097ca:	f001 f8b4 	bl	800a936 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80097ce:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80097d2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097dc:	f107 0310 	add.w	r3, r7, #16
 80097e0:	4619      	mov	r1, r3
 80097e2:	4828      	ldr	r0, [pc, #160]	@ (8009884 <MX_GPIO_Init+0x14c>)
 80097e4:	f000 fe30 	bl	800a448 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80097e8:	f248 130f 	movw	r3, #33039	@ 0x810f
 80097ec:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097f6:	f107 0310 	add.w	r3, r7, #16
 80097fa:	4619      	mov	r1, r3
 80097fc:	4820      	ldr	r0, [pc, #128]	@ (8009880 <MX_GPIO_Init+0x148>)
 80097fe:	f000 fe23 	bl	800a448 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009802:	23f0      	movs	r3, #240	@ 0xf0
 8009804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009806:	2301      	movs	r3, #1
 8009808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980a:	2300      	movs	r3, #0
 800980c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800980e:	2302      	movs	r3, #2
 8009810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009812:	f107 0310 	add.w	r3, r7, #16
 8009816:	4619      	mov	r1, r3
 8009818:	4819      	ldr	r0, [pc, #100]	@ (8009880 <MX_GPIO_Init+0x148>)
 800981a:	f000 fe15 	bl	800a448 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800981e:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009828:	2300      	movs	r3, #0
 800982a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982c:	2302      	movs	r3, #2
 800982e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009830:	f107 0310 	add.w	r3, r7, #16
 8009834:	4619      	mov	r1, r3
 8009836:	4813      	ldr	r0, [pc, #76]	@ (8009884 <MX_GPIO_Init+0x14c>)
 8009838:	f000 fe06 	bl	800a448 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800983c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009840:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009842:	2301      	movs	r3, #1
 8009844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800984a:	2302      	movs	r3, #2
 800984c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800984e:	f107 0310 	add.w	r3, r7, #16
 8009852:	4619      	mov	r1, r3
 8009854:	480c      	ldr	r0, [pc, #48]	@ (8009888 <MX_GPIO_Init+0x150>)
 8009856:	f000 fdf7 	bl	800a448 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800985a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800985e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009864:	2300      	movs	r3, #0
 8009866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009868:	f107 0310 	add.w	r3, r7, #16
 800986c:	4619      	mov	r1, r3
 800986e:	4806      	ldr	r0, [pc, #24]	@ (8009888 <MX_GPIO_Init+0x150>)
 8009870:	f000 fdea 	bl	800a448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009874:	bf00      	nop
 8009876:	3720      	adds	r7, #32
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	40021000 	.word	0x40021000
 8009880:	40010800 	.word	0x40010800
 8009884:	40011000 	.word	0x40011000
 8009888:	40010c00 	.word	0x40010c00

0800988c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009890:	bf00      	nop
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800989e:	4b15      	ldr	r3, [pc, #84]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	4a14      	ldr	r2, [pc, #80]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098a4:	f043 0301 	orr.w	r3, r3, #1
 80098a8:	6193      	str	r3, [r2, #24]
 80098aa:	4b12      	ldr	r3, [pc, #72]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	60bb      	str	r3, [r7, #8]
 80098b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80098b6:	4b0f      	ldr	r3, [pc, #60]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	4a0e      	ldr	r2, [pc, #56]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c0:	61d3      	str	r3, [r2, #28]
 80098c2:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <HAL_MspInit+0x5c>)
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098ca:	607b      	str	r3, [r7, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80098ce:	4b0a      	ldr	r3, [pc, #40]	@ (80098f8 <HAL_MspInit+0x60>)
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	4a04      	ldr	r2, [pc, #16]	@ (80098f8 <HAL_MspInit+0x60>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098ea:	bf00      	nop
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr
 80098f4:	40021000 	.word	0x40021000
 80098f8:	40010000 	.word	0x40010000

080098fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009904:	f107 0310 	add.w	r3, r7, #16
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	609a      	str	r2, [r3, #8]
 8009910:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1c      	ldr	r2, [pc, #112]	@ (8009988 <HAL_CAN_MspInit+0x8c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d131      	bne.n	8009980 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800991c:	4b1b      	ldr	r3, [pc, #108]	@ (800998c <HAL_CAN_MspInit+0x90>)
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	4a1a      	ldr	r2, [pc, #104]	@ (800998c <HAL_CAN_MspInit+0x90>)
 8009922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009926:	61d3      	str	r3, [r2, #28]
 8009928:	4b18      	ldr	r3, [pc, #96]	@ (800998c <HAL_CAN_MspInit+0x90>)
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009934:	4b15      	ldr	r3, [pc, #84]	@ (800998c <HAL_CAN_MspInit+0x90>)
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	4a14      	ldr	r2, [pc, #80]	@ (800998c <HAL_CAN_MspInit+0x90>)
 800993a:	f043 0304 	orr.w	r3, r3, #4
 800993e:	6193      	str	r3, [r2, #24]
 8009940:	4b12      	ldr	r3, [pc, #72]	@ (800998c <HAL_CAN_MspInit+0x90>)
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	60bb      	str	r3, [r7, #8]
 800994a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800994c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800995a:	f107 0310 	add.w	r3, r7, #16
 800995e:	4619      	mov	r1, r3
 8009960:	480b      	ldr	r0, [pc, #44]	@ (8009990 <HAL_CAN_MspInit+0x94>)
 8009962:	f000 fd71 	bl	800a448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800996a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800996c:	2302      	movs	r3, #2
 800996e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009970:	2303      	movs	r3, #3
 8009972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009974:	f107 0310 	add.w	r3, r7, #16
 8009978:	4619      	mov	r1, r3
 800997a:	4805      	ldr	r0, [pc, #20]	@ (8009990 <HAL_CAN_MspInit+0x94>)
 800997c:	f000 fd64 	bl	800a448 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009980:	bf00      	nop
 8009982:	3720      	adds	r7, #32
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40006400 	.word	0x40006400
 800998c:	40021000 	.word	0x40021000
 8009990:	40010800 	.word	0x40010800

08009994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800999c:	f107 0310 	add.w	r3, r7, #16
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	605a      	str	r2, [r3, #4]
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <HAL_I2C_MspInit+0x70>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d123      	bne.n	80099fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099b4:	4b14      	ldr	r3, [pc, #80]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	4a13      	ldr	r2, [pc, #76]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099ba:	f043 0308 	orr.w	r3, r3, #8
 80099be:	6193      	str	r3, [r2, #24]
 80099c0:	4b11      	ldr	r3, [pc, #68]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	f003 0308 	and.w	r3, r3, #8
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80099cc:	23c0      	movs	r3, #192	@ 0xc0
 80099ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099d0:	2312      	movs	r3, #18
 80099d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80099d4:	2303      	movs	r3, #3
 80099d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099d8:	f107 0310 	add.w	r3, r7, #16
 80099dc:	4619      	mov	r1, r3
 80099de:	480b      	ldr	r0, [pc, #44]	@ (8009a0c <HAL_I2C_MspInit+0x78>)
 80099e0:	f000 fd32 	bl	800a448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80099e4:	4b08      	ldr	r3, [pc, #32]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	4a07      	ldr	r2, [pc, #28]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099ee:	61d3      	str	r3, [r2, #28]
 80099f0:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <HAL_I2C_MspInit+0x74>)
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099f8:	60bb      	str	r3, [r7, #8]
 80099fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80099fc:	bf00      	nop
 80099fe:	3720      	adds	r7, #32
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	40005400 	.word	0x40005400
 8009a08:	40021000 	.word	0x40021000
 8009a0c:	40010c00 	.word	0x40010c00

08009a10 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a48 <HAL_I2C_MspDeInit+0x38>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d10d      	bne.n	8009a3e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009a22:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <HAL_I2C_MspDeInit+0x3c>)
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	4a09      	ldr	r2, [pc, #36]	@ (8009a4c <HAL_I2C_MspDeInit+0x3c>)
 8009a28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a2c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009a2e:	2140      	movs	r1, #64	@ 0x40
 8009a30:	4807      	ldr	r0, [pc, #28]	@ (8009a50 <HAL_I2C_MspDeInit+0x40>)
 8009a32:	f000 fe9d 	bl	800a770 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009a36:	2180      	movs	r1, #128	@ 0x80
 8009a38:	4805      	ldr	r0, [pc, #20]	@ (8009a50 <HAL_I2C_MspDeInit+0x40>)
 8009a3a:	f000 fe99 	bl	800a770 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40005400 	.word	0x40005400
 8009a4c:	40021000 	.word	0x40021000
 8009a50:	40010c00 	.word	0x40010c00

08009a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a0d      	ldr	r2, [pc, #52]	@ (8009a98 <HAL_TIM_Base_MspInit+0x44>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d113      	bne.n	8009a8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009a66:	4b0d      	ldr	r3, [pc, #52]	@ (8009a9c <HAL_TIM_Base_MspInit+0x48>)
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a9c <HAL_TIM_Base_MspInit+0x48>)
 8009a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009a70:	6193      	str	r3, [r2, #24]
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <HAL_TIM_Base_MspInit+0x48>)
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2100      	movs	r1, #0
 8009a82:	2019      	movs	r0, #25
 8009a84:	f000 fb5b 	bl	800a13e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009a88:	2019      	movs	r0, #25
 8009a8a:	f000 fb74 	bl	800a176 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40021000 	.word	0x40021000

08009aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa8:	f107 0310 	add.w	r3, r7, #16
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
 8009ab4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a20      	ldr	r2, [pc, #128]	@ (8009b3c <HAL_UART_MspInit+0x9c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d139      	bne.n	8009b34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009aca:	6193      	str	r3, [r2, #24]
 8009acc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ad8:	4b19      	ldr	r3, [pc, #100]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ade:	f043 0304 	orr.w	r3, r3, #4
 8009ae2:	6193      	str	r3, [r2, #24]
 8009ae4:	4b16      	ldr	r3, [pc, #88]	@ (8009b40 <HAL_UART_MspInit+0xa0>)
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	60bb      	str	r3, [r7, #8]
 8009aee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af6:	2302      	movs	r3, #2
 8009af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009afa:	2303      	movs	r3, #3
 8009afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009afe:	f107 0310 	add.w	r3, r7, #16
 8009b02:	4619      	mov	r1, r3
 8009b04:	480f      	ldr	r0, [pc, #60]	@ (8009b44 <HAL_UART_MspInit+0xa4>)
 8009b06:	f000 fc9f 	bl	800a448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b18:	f107 0310 	add.w	r3, r7, #16
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4809      	ldr	r0, [pc, #36]	@ (8009b44 <HAL_UART_MspInit+0xa4>)
 8009b20:	f000 fc92 	bl	800a448 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009b24:	2200      	movs	r2, #0
 8009b26:	2100      	movs	r1, #0
 8009b28:	2025      	movs	r0, #37	@ 0x25
 8009b2a:	f000 fb08 	bl	800a13e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009b2e:	2025      	movs	r0, #37	@ 0x25
 8009b30:	f000 fb21 	bl	800a176 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009b34:	bf00      	nop
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	40013800 	.word	0x40013800
 8009b40:	40021000 	.word	0x40021000
 8009b44:	40010800 	.word	0x40010800

08009b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009b4c:	bf00      	nop
 8009b4e:	e7fd      	b.n	8009b4c <NMI_Handler+0x4>

08009b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <HardFault_Handler+0x4>

08009b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b5c:	bf00      	nop
 8009b5e:	e7fd      	b.n	8009b5c <MemManage_Handler+0x4>

08009b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <BusFault_Handler+0x4>

08009b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <UsageFault_Handler+0x4>

08009b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr

08009b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b80:	bf00      	nop
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr

08009b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b8c:	bf00      	nop
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr

08009b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b98:	f000 f8be 	bl	8009d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009ba4:	4802      	ldr	r0, [pc, #8]	@ (8009bb0 <TIM1_UP_IRQHandler+0x10>)
 8009ba6:	f002 fdd9 	bl	800c75c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20001f94 	.word	0x20001f94

08009bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009bb8:	4802      	ldr	r0, [pc, #8]	@ (8009bc4 <USART1_IRQHandler+0x10>)
 8009bba:	f003 fc65 	bl	800d488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009bbe:	bf00      	nop
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20001fdc 	.word	0x20001fdc

08009bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009bd0:	4a14      	ldr	r2, [pc, #80]	@ (8009c24 <_sbrk+0x5c>)
 8009bd2:	4b15      	ldr	r3, [pc, #84]	@ (8009c28 <_sbrk+0x60>)
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009bdc:	4b13      	ldr	r3, [pc, #76]	@ (8009c2c <_sbrk+0x64>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d102      	bne.n	8009bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009be4:	4b11      	ldr	r3, [pc, #68]	@ (8009c2c <_sbrk+0x64>)
 8009be6:	4a12      	ldr	r2, [pc, #72]	@ (8009c30 <_sbrk+0x68>)
 8009be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009bea:	4b10      	ldr	r3, [pc, #64]	@ (8009c2c <_sbrk+0x64>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d207      	bcs.n	8009c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009bf8:	f004 fb68 	bl	800e2cc <__errno>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	220c      	movs	r2, #12
 8009c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c06:	e009      	b.n	8009c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009c08:	4b08      	ldr	r3, [pc, #32]	@ (8009c2c <_sbrk+0x64>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009c0e:	4b07      	ldr	r3, [pc, #28]	@ (8009c2c <_sbrk+0x64>)
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	4a05      	ldr	r2, [pc, #20]	@ (8009c2c <_sbrk+0x64>)
 8009c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	2000c000 	.word	0x2000c000
 8009c28:	00000400 	.word	0x00000400
 8009c2c:	20002024 	.word	0x20002024
 8009c30:	20002178 	.word	0x20002178

08009c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009c38:	bf00      	nop
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bc80      	pop	{r7}
 8009c3e:	4770      	bx	lr

08009c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c40:	480c      	ldr	r0, [pc, #48]	@ (8009c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009c42:	490d      	ldr	r1, [pc, #52]	@ (8009c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009c44:	4a0d      	ldr	r2, [pc, #52]	@ (8009c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c48:	e002      	b.n	8009c50 <LoopCopyDataInit>

08009c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c4e:	3304      	adds	r3, #4

08009c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c54:	d3f9      	bcc.n	8009c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c56:	4a0a      	ldr	r2, [pc, #40]	@ (8009c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009c58:	4c0a      	ldr	r4, [pc, #40]	@ (8009c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c5c:	e001      	b.n	8009c62 <LoopFillZerobss>

08009c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c60:	3204      	adds	r2, #4

08009c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c64:	d3fb      	bcc.n	8009c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009c66:	f7ff ffe5 	bl	8009c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c6a:	f004 fb35 	bl	800e2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009c6e:	f7ff fb99 	bl	80093a4 <main>
  bx lr
 8009c72:	4770      	bx	lr
  ldr r0, =_sdata
 8009c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c78:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009c7c:	0800f888 	.word	0x0800f888
  ldr r2, =_sbss
 8009c80:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009c84:	20002174 	.word	0x20002174

08009c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009c88:	e7fe      	b.n	8009c88 <ADC1_2_IRQHandler>
	...

08009c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c90:	4b08      	ldr	r3, [pc, #32]	@ (8009cb4 <HAL_Init+0x28>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a07      	ldr	r2, [pc, #28]	@ (8009cb4 <HAL_Init+0x28>)
 8009c96:	f043 0310 	orr.w	r3, r3, #16
 8009c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c9c:	2003      	movs	r0, #3
 8009c9e:	f000 fa43 	bl	800a128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009ca2:	200f      	movs	r0, #15
 8009ca4:	f000 f808 	bl	8009cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ca8:	f7ff fdf6 	bl	8009898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40022000 	.word	0x40022000

08009cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cc0:	4b12      	ldr	r3, [pc, #72]	@ (8009d0c <HAL_InitTick+0x54>)
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4b12      	ldr	r3, [pc, #72]	@ (8009d10 <HAL_InitTick+0x58>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fa5b 	bl	800a192 <HAL_SYSTICK_Config>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e00e      	b.n	8009d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b0f      	cmp	r3, #15
 8009cea:	d80a      	bhi.n	8009d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009cec:	2200      	movs	r2, #0
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cf4:	f000 fa23 	bl	800a13e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cf8:	4a06      	ldr	r2, [pc, #24]	@ (8009d14 <HAL_InitTick+0x5c>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20000f74 	.word	0x20000f74
 8009d10:	20000f7c 	.word	0x20000f7c
 8009d14:	20000f78 	.word	0x20000f78

08009d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d1c:	4b05      	ldr	r3, [pc, #20]	@ (8009d34 <HAL_IncTick+0x1c>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <HAL_IncTick+0x20>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4413      	add	r3, r2
 8009d28:	4a03      	ldr	r2, [pc, #12]	@ (8009d38 <HAL_IncTick+0x20>)
 8009d2a:	6013      	str	r3, [r2, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bc80      	pop	{r7}
 8009d32:	4770      	bx	lr
 8009d34:	20000f7c 	.word	0x20000f7c
 8009d38:	20002028 	.word	0x20002028

08009d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8009d40:	4b02      	ldr	r3, [pc, #8]	@ (8009d4c <HAL_GetTick+0x10>)
 8009d42:	681b      	ldr	r3, [r3, #0]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bc80      	pop	{r7}
 8009d4a:	4770      	bx	lr
 8009d4c:	20002028 	.word	0x20002028

08009d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d58:	f7ff fff0 	bl	8009d3c <HAL_GetTick>
 8009d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d68:	d005      	beq.n	8009d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d94 <HAL_Delay+0x44>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009d76:	bf00      	nop
 8009d78:	f7ff ffe0 	bl	8009d3c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d8f7      	bhi.n	8009d78 <HAL_Delay+0x28>
  {
  }
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000f7c 	.word	0x20000f7c

08009d98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e0ed      	b.n	8009f86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fda0 	bl	80098fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0201 	orr.w	r2, r2, #1
 8009dca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009dcc:	f7ff ffb6 	bl	8009d3c <HAL_GetTick>
 8009dd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009dd2:	e012      	b.n	8009dfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009dd4:	f7ff ffb2 	bl	8009d3c <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b0a      	cmp	r3, #10
 8009de0:	d90b      	bls.n	8009dfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2205      	movs	r2, #5
 8009df2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e0c5      	b.n	8009f86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0e5      	beq.n	8009dd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 0202 	bic.w	r2, r2, #2
 8009e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e18:	f7ff ff90 	bl	8009d3c <HAL_GetTick>
 8009e1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009e1e:	e012      	b.n	8009e46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009e20:	f7ff ff8c 	bl	8009d3c <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	2b0a      	cmp	r3, #10
 8009e2c:	d90b      	bls.n	8009e46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2205      	movs	r2, #5
 8009e3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e09f      	b.n	8009f86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e5      	bne.n	8009e20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7e1b      	ldrb	r3, [r3, #24]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d108      	bne.n	8009e6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e007      	b.n	8009e7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7e5b      	ldrb	r3, [r3, #25]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d108      	bne.n	8009e98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e007      	b.n	8009ea8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7e9b      	ldrb	r3, [r3, #26]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d108      	bne.n	8009ec2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0220 	orr.w	r2, r2, #32
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	e007      	b.n	8009ed2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 0220 	bic.w	r2, r2, #32
 8009ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7edb      	ldrb	r3, [r3, #27]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d108      	bne.n	8009eec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0210 	bic.w	r2, r2, #16
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	e007      	b.n	8009efc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0210 	orr.w	r2, r2, #16
 8009efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7f1b      	ldrb	r3, [r3, #28]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d108      	bne.n	8009f16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0208 	orr.w	r2, r2, #8
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e007      	b.n	8009f26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0208 	bic.w	r2, r2, #8
 8009f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7f5b      	ldrb	r3, [r3, #29]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d108      	bne.n	8009f40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0204 	orr.w	r2, r2, #4
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e007      	b.n	8009f50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0204 	bic.w	r2, r2, #4
 8009f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	ea42 0103 	orr.w	r1, r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	1e5a      	subs	r2, r3, #1
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <__NVIC_SetPriorityGrouping>:
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f003 0307 	and.w	r3, r3, #7
 8009f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009fac:	4013      	ands	r3, r2
 8009fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009fc2:	4a04      	ldr	r2, [pc, #16]	@ (8009fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	60d3      	str	r3, [r2, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	e000ed00 	.word	0xe000ed00

08009fd8 <__NVIC_GetPriorityGrouping>:
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fdc:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	0a1b      	lsrs	r3, r3, #8
 8009fe2:	f003 0307 	and.w	r3, r3, #7
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bc80      	pop	{r7}
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <__NVIC_EnableIRQ>:
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a002:	2b00      	cmp	r3, #0
 800a004:	db0b      	blt.n	800a01e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	f003 021f 	and.w	r2, r3, #31
 800a00c:	4906      	ldr	r1, [pc, #24]	@ (800a028 <__NVIC_EnableIRQ+0x34>)
 800a00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a012:	095b      	lsrs	r3, r3, #5
 800a014:	2001      	movs	r0, #1
 800a016:	fa00 f202 	lsl.w	r2, r0, r2
 800a01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr
 800a028:	e000e100 	.word	0xe000e100

0800a02c <__NVIC_SetPriority>:
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	db0a      	blt.n	800a056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	490c      	ldr	r1, [pc, #48]	@ (800a078 <__NVIC_SetPriority+0x4c>)
 800a046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a04a:	0112      	lsls	r2, r2, #4
 800a04c:	b2d2      	uxtb	r2, r2
 800a04e:	440b      	add	r3, r1
 800a050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a054:	e00a      	b.n	800a06c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	4908      	ldr	r1, [pc, #32]	@ (800a07c <__NVIC_SetPriority+0x50>)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	f003 030f 	and.w	r3, r3, #15
 800a062:	3b04      	subs	r3, #4
 800a064:	0112      	lsls	r2, r2, #4
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	440b      	add	r3, r1
 800a06a:	761a      	strb	r2, [r3, #24]
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000e100 	.word	0xe000e100
 800a07c:	e000ed00 	.word	0xe000ed00

0800a080 <NVIC_EncodePriority>:
{
 800a080:	b480      	push	{r7}
 800a082:	b089      	sub	sp, #36	@ 0x24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f1c3 0307 	rsb	r3, r3, #7
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	bf28      	it	cs
 800a09e:	2304      	movcs	r3, #4
 800a0a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d902      	bls.n	800a0b0 <NVIC_EncodePriority+0x30>
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	3b03      	subs	r3, #3
 800a0ae:	e000      	b.n	800a0b2 <NVIC_EncodePriority+0x32>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	43da      	mvns	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	401a      	ands	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d2:	43d9      	mvns	r1, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0d8:	4313      	orrs	r3, r2
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3724      	adds	r7, #36	@ 0x24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr

0800a0e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0f4:	d301      	bcc.n	800a0fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e00f      	b.n	800a11a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a124 <SysTick_Config+0x40>)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a102:	210f      	movs	r1, #15
 800a104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a108:	f7ff ff90 	bl	800a02c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a10c:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <SysTick_Config+0x40>)
 800a10e:	2200      	movs	r2, #0
 800a110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a112:	4b04      	ldr	r3, [pc, #16]	@ (800a124 <SysTick_Config+0x40>)
 800a114:	2207      	movs	r2, #7
 800a116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000e010 	.word	0xe000e010

0800a128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff ff2d 	bl	8009f90 <__NVIC_SetPriorityGrouping>
}
 800a136:	bf00      	nop
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a13e:	b580      	push	{r7, lr}
 800a140:	b086      	sub	sp, #24
 800a142:	af00      	add	r7, sp, #0
 800a144:	4603      	mov	r3, r0
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a150:	f7ff ff42 	bl	8009fd8 <__NVIC_GetPriorityGrouping>
 800a154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	6978      	ldr	r0, [r7, #20]
 800a15c:	f7ff ff90 	bl	800a080 <NVIC_EncodePriority>
 800a160:	4602      	mov	r2, r0
 800a162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ff5f 	bl	800a02c <__NVIC_SetPriority>
}
 800a16e:	bf00      	nop
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	4603      	mov	r3, r0
 800a17e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff ff35 	bl	8009ff4 <__NVIC_EnableIRQ>
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff ffa2 	bl	800a0e4 <SysTick_Config>
 800a1a0:	4603      	mov	r3, r0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d008      	beq.n	800a1d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2204      	movs	r2, #4
 800a1c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e020      	b.n	800a216 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 020e 	bic.w	r2, r2, #14
 800a1e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 0201 	bic.w	r2, r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	fa01 f202 	lsl.w	r2, r1, r2
 800a202:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a214:	7bfb      	ldrb	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bc80      	pop	{r7}
 800a21e:	4770      	bx	lr

0800a220 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d005      	beq.n	800a244 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2204      	movs	r2, #4
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
 800a242:	e0d6      	b.n	800a3f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f022 020e 	bic.w	r2, r2, #14
 800a252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	461a      	mov	r2, r3
 800a26a:	4b64      	ldr	r3, [pc, #400]	@ (800a3fc <HAL_DMA_Abort_IT+0x1dc>)
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d958      	bls.n	800a322 <HAL_DMA_Abort_IT+0x102>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a62      	ldr	r2, [pc, #392]	@ (800a400 <HAL_DMA_Abort_IT+0x1e0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d04f      	beq.n	800a31a <HAL_DMA_Abort_IT+0xfa>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a61      	ldr	r2, [pc, #388]	@ (800a404 <HAL_DMA_Abort_IT+0x1e4>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d048      	beq.n	800a316 <HAL_DMA_Abort_IT+0xf6>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a5f      	ldr	r2, [pc, #380]	@ (800a408 <HAL_DMA_Abort_IT+0x1e8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d040      	beq.n	800a310 <HAL_DMA_Abort_IT+0xf0>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a5e      	ldr	r2, [pc, #376]	@ (800a40c <HAL_DMA_Abort_IT+0x1ec>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d038      	beq.n	800a30a <HAL_DMA_Abort_IT+0xea>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a5c      	ldr	r2, [pc, #368]	@ (800a410 <HAL_DMA_Abort_IT+0x1f0>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d030      	beq.n	800a304 <HAL_DMA_Abort_IT+0xe4>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a5b      	ldr	r2, [pc, #364]	@ (800a414 <HAL_DMA_Abort_IT+0x1f4>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d028      	beq.n	800a2fe <HAL_DMA_Abort_IT+0xde>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a52      	ldr	r2, [pc, #328]	@ (800a3fc <HAL_DMA_Abort_IT+0x1dc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d020      	beq.n	800a2f8 <HAL_DMA_Abort_IT+0xd8>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a57      	ldr	r2, [pc, #348]	@ (800a418 <HAL_DMA_Abort_IT+0x1f8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d019      	beq.n	800a2f4 <HAL_DMA_Abort_IT+0xd4>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a55      	ldr	r2, [pc, #340]	@ (800a41c <HAL_DMA_Abort_IT+0x1fc>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d012      	beq.n	800a2f0 <HAL_DMA_Abort_IT+0xd0>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a54      	ldr	r2, [pc, #336]	@ (800a420 <HAL_DMA_Abort_IT+0x200>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00a      	beq.n	800a2ea <HAL_DMA_Abort_IT+0xca>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a52      	ldr	r2, [pc, #328]	@ (800a424 <HAL_DMA_Abort_IT+0x204>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d102      	bne.n	800a2e4 <HAL_DMA_Abort_IT+0xc4>
 800a2de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2e2:	e01b      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2e8:	e018      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2ee:	e015      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	e013      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e011      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2fc:	e00e      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a2fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a302:	e00b      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a308:	e008      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a30a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a30e:	e005      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a314:	e002      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a316:	2310      	movs	r3, #16
 800a318:	e000      	b.n	800a31c <HAL_DMA_Abort_IT+0xfc>
 800a31a:	2301      	movs	r3, #1
 800a31c:	4a42      	ldr	r2, [pc, #264]	@ (800a428 <HAL_DMA_Abort_IT+0x208>)
 800a31e:	6053      	str	r3, [r2, #4]
 800a320:	e057      	b.n	800a3d2 <HAL_DMA_Abort_IT+0x1b2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a36      	ldr	r2, [pc, #216]	@ (800a400 <HAL_DMA_Abort_IT+0x1e0>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d04f      	beq.n	800a3cc <HAL_DMA_Abort_IT+0x1ac>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a34      	ldr	r2, [pc, #208]	@ (800a404 <HAL_DMA_Abort_IT+0x1e4>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d048      	beq.n	800a3c8 <HAL_DMA_Abort_IT+0x1a8>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a33      	ldr	r2, [pc, #204]	@ (800a408 <HAL_DMA_Abort_IT+0x1e8>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d040      	beq.n	800a3c2 <HAL_DMA_Abort_IT+0x1a2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a31      	ldr	r2, [pc, #196]	@ (800a40c <HAL_DMA_Abort_IT+0x1ec>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d038      	beq.n	800a3bc <HAL_DMA_Abort_IT+0x19c>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a30      	ldr	r2, [pc, #192]	@ (800a410 <HAL_DMA_Abort_IT+0x1f0>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d030      	beq.n	800a3b6 <HAL_DMA_Abort_IT+0x196>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a2e      	ldr	r2, [pc, #184]	@ (800a414 <HAL_DMA_Abort_IT+0x1f4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d028      	beq.n	800a3b0 <HAL_DMA_Abort_IT+0x190>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a26      	ldr	r2, [pc, #152]	@ (800a3fc <HAL_DMA_Abort_IT+0x1dc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d020      	beq.n	800a3aa <HAL_DMA_Abort_IT+0x18a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a2a      	ldr	r2, [pc, #168]	@ (800a418 <HAL_DMA_Abort_IT+0x1f8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d019      	beq.n	800a3a6 <HAL_DMA_Abort_IT+0x186>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a29      	ldr	r2, [pc, #164]	@ (800a41c <HAL_DMA_Abort_IT+0x1fc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d012      	beq.n	800a3a2 <HAL_DMA_Abort_IT+0x182>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a27      	ldr	r2, [pc, #156]	@ (800a420 <HAL_DMA_Abort_IT+0x200>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00a      	beq.n	800a39c <HAL_DMA_Abort_IT+0x17c>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a26      	ldr	r2, [pc, #152]	@ (800a424 <HAL_DMA_Abort_IT+0x204>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d102      	bne.n	800a396 <HAL_DMA_Abort_IT+0x176>
 800a390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a394:	e01b      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a39a:	e018      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a39c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3a0:	e015      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3a2:	2310      	movs	r3, #16
 800a3a4:	e013      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e011      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a3ae:	e00e      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3b4:	e00b      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a3ba:	e008      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3c0:	e005      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3c6:	e002      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	e000      	b.n	800a3ce <HAL_DMA_Abort_IT+0x1ae>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4a17      	ldr	r2, [pc, #92]	@ (800a42c <HAL_DMA_Abort_IT+0x20c>)
 800a3d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
    } 
  }
  return status;
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	40020080 	.word	0x40020080
 800a400:	40020008 	.word	0x40020008
 800a404:	4002001c 	.word	0x4002001c
 800a408:	40020030 	.word	0x40020030
 800a40c:	40020044 	.word	0x40020044
 800a410:	40020058 	.word	0x40020058
 800a414:	4002006c 	.word	0x4002006c
 800a418:	40020408 	.word	0x40020408
 800a41c:	4002041c 	.word	0x4002041c
 800a420:	40020430 	.word	0x40020430
 800a424:	40020444 	.word	0x40020444
 800a428:	40020400 	.word	0x40020400
 800a42c:	40020000 	.word	0x40020000

0800a430 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	bc80      	pop	{r7}
 800a444:	4770      	bx	lr
	...

0800a448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a448:	b480      	push	{r7}
 800a44a:	b08b      	sub	sp, #44	@ 0x2c
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a452:	2300      	movs	r3, #0
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a456:	2300      	movs	r3, #0
 800a458:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a45a:	e179      	b.n	800a750 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a45c:	2201      	movs	r2, #1
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	fa02 f303 	lsl.w	r3, r2, r3
 800a464:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	4013      	ands	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	429a      	cmp	r2, r3
 800a476:	f040 8168 	bne.w	800a74a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4a96      	ldr	r2, [pc, #600]	@ (800a6d8 <HAL_GPIO_Init+0x290>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d05e      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
 800a484:	4a94      	ldr	r2, [pc, #592]	@ (800a6d8 <HAL_GPIO_Init+0x290>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d875      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a48a:	4a94      	ldr	r2, [pc, #592]	@ (800a6dc <HAL_GPIO_Init+0x294>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d058      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
 800a490:	4a92      	ldr	r2, [pc, #584]	@ (800a6dc <HAL_GPIO_Init+0x294>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d86f      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a496:	4a92      	ldr	r2, [pc, #584]	@ (800a6e0 <HAL_GPIO_Init+0x298>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d052      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
 800a49c:	4a90      	ldr	r2, [pc, #576]	@ (800a6e0 <HAL_GPIO_Init+0x298>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d869      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a4a2:	4a90      	ldr	r2, [pc, #576]	@ (800a6e4 <HAL_GPIO_Init+0x29c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d04c      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
 800a4a8:	4a8e      	ldr	r2, [pc, #568]	@ (800a6e4 <HAL_GPIO_Init+0x29c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d863      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a4ae:	4a8e      	ldr	r2, [pc, #568]	@ (800a6e8 <HAL_GPIO_Init+0x2a0>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d046      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
 800a4b4:	4a8c      	ldr	r2, [pc, #560]	@ (800a6e8 <HAL_GPIO_Init+0x2a0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d85d      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a4ba:	2b12      	cmp	r3, #18
 800a4bc:	d82a      	bhi.n	800a514 <HAL_GPIO_Init+0xcc>
 800a4be:	2b12      	cmp	r3, #18
 800a4c0:	d859      	bhi.n	800a576 <HAL_GPIO_Init+0x12e>
 800a4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c8 <HAL_GPIO_Init+0x80>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a543 	.word	0x0800a543
 800a4cc:	0800a51d 	.word	0x0800a51d
 800a4d0:	0800a52f 	.word	0x0800a52f
 800a4d4:	0800a571 	.word	0x0800a571
 800a4d8:	0800a577 	.word	0x0800a577
 800a4dc:	0800a577 	.word	0x0800a577
 800a4e0:	0800a577 	.word	0x0800a577
 800a4e4:	0800a577 	.word	0x0800a577
 800a4e8:	0800a577 	.word	0x0800a577
 800a4ec:	0800a577 	.word	0x0800a577
 800a4f0:	0800a577 	.word	0x0800a577
 800a4f4:	0800a577 	.word	0x0800a577
 800a4f8:	0800a577 	.word	0x0800a577
 800a4fc:	0800a577 	.word	0x0800a577
 800a500:	0800a577 	.word	0x0800a577
 800a504:	0800a577 	.word	0x0800a577
 800a508:	0800a577 	.word	0x0800a577
 800a50c:	0800a525 	.word	0x0800a525
 800a510:	0800a539 	.word	0x0800a539
 800a514:	4a75      	ldr	r2, [pc, #468]	@ (800a6ec <HAL_GPIO_Init+0x2a4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d013      	beq.n	800a542 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a51a:	e02c      	b.n	800a576 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	623b      	str	r3, [r7, #32]
          break;
 800a522:	e029      	b.n	800a578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	3304      	adds	r3, #4
 800a52a:	623b      	str	r3, [r7, #32]
          break;
 800a52c:	e024      	b.n	800a578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	3308      	adds	r3, #8
 800a534:	623b      	str	r3, [r7, #32]
          break;
 800a536:	e01f      	b.n	800a578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	330c      	adds	r3, #12
 800a53e:	623b      	str	r3, [r7, #32]
          break;
 800a540:	e01a      	b.n	800a578 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a54a:	2304      	movs	r3, #4
 800a54c:	623b      	str	r3, [r7, #32]
          break;
 800a54e:	e013      	b.n	800a578 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d105      	bne.n	800a564 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a558:	2308      	movs	r3, #8
 800a55a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	611a      	str	r2, [r3, #16]
          break;
 800a562:	e009      	b.n	800a578 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a564:	2308      	movs	r3, #8
 800a566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	615a      	str	r2, [r3, #20]
          break;
 800a56e:	e003      	b.n	800a578 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a570:	2300      	movs	r3, #0
 800a572:	623b      	str	r3, [r7, #32]
          break;
 800a574:	e000      	b.n	800a578 <HAL_GPIO_Init+0x130>
          break;
 800a576:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2bff      	cmp	r3, #255	@ 0xff
 800a57c:	d801      	bhi.n	800a582 <HAL_GPIO_Init+0x13a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	e001      	b.n	800a586 <HAL_GPIO_Init+0x13e>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3304      	adds	r3, #4
 800a586:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	2bff      	cmp	r3, #255	@ 0xff
 800a58c:	d802      	bhi.n	800a594 <HAL_GPIO_Init+0x14c>
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	e002      	b.n	800a59a <HAL_GPIO_Init+0x152>
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	3b08      	subs	r3, #8
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	210f      	movs	r1, #15
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a8:	43db      	mvns	r3, r3
 800a5aa:	401a      	ands	r2, r3
 800a5ac:	6a39      	ldr	r1, [r7, #32]
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80c1 	beq.w	800a74a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a5c8:	4b49      	ldr	r3, [pc, #292]	@ (800a6f0 <HAL_GPIO_Init+0x2a8>)
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	4a48      	ldr	r2, [pc, #288]	@ (800a6f0 <HAL_GPIO_Init+0x2a8>)
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	6193      	str	r3, [r2, #24]
 800a5d4:	4b46      	ldr	r3, [pc, #280]	@ (800a6f0 <HAL_GPIO_Init+0x2a8>)
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	60bb      	str	r3, [r7, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a5e0:	4a44      	ldr	r2, [pc, #272]	@ (800a6f4 <HAL_GPIO_Init+0x2ac>)
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	089b      	lsrs	r3, r3, #2
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	220f      	movs	r2, #15
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	4013      	ands	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a3c      	ldr	r2, [pc, #240]	@ (800a6f8 <HAL_GPIO_Init+0x2b0>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d01f      	beq.n	800a64c <HAL_GPIO_Init+0x204>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a3b      	ldr	r2, [pc, #236]	@ (800a6fc <HAL_GPIO_Init+0x2b4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d019      	beq.n	800a648 <HAL_GPIO_Init+0x200>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a3a      	ldr	r2, [pc, #232]	@ (800a700 <HAL_GPIO_Init+0x2b8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d013      	beq.n	800a644 <HAL_GPIO_Init+0x1fc>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a39      	ldr	r2, [pc, #228]	@ (800a704 <HAL_GPIO_Init+0x2bc>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d00d      	beq.n	800a640 <HAL_GPIO_Init+0x1f8>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a38      	ldr	r2, [pc, #224]	@ (800a708 <HAL_GPIO_Init+0x2c0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d007      	beq.n	800a63c <HAL_GPIO_Init+0x1f4>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a37      	ldr	r2, [pc, #220]	@ (800a70c <HAL_GPIO_Init+0x2c4>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d101      	bne.n	800a638 <HAL_GPIO_Init+0x1f0>
 800a634:	2305      	movs	r3, #5
 800a636:	e00a      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a638:	2306      	movs	r3, #6
 800a63a:	e008      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a63c:	2304      	movs	r3, #4
 800a63e:	e006      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a640:	2303      	movs	r3, #3
 800a642:	e004      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a644:	2302      	movs	r3, #2
 800a646:	e002      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <HAL_GPIO_Init+0x206>
 800a64c:	2300      	movs	r3, #0
 800a64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a650:	f002 0203 	and.w	r2, r2, #3
 800a654:	0092      	lsls	r2, r2, #2
 800a656:	4093      	lsls	r3, r2
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a65e:	4925      	ldr	r1, [pc, #148]	@ (800a6f4 <HAL_GPIO_Init+0x2ac>)
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	089b      	lsrs	r3, r3, #2
 800a664:	3302      	adds	r3, #2
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a678:	4b25      	ldr	r3, [pc, #148]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	4924      	ldr	r1, [pc, #144]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	4313      	orrs	r3, r2
 800a682:	608b      	str	r3, [r1, #8]
 800a684:	e006      	b.n	800a694 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a686:	4b22      	ldr	r3, [pc, #136]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	43db      	mvns	r3, r3
 800a68e:	4920      	ldr	r1, [pc, #128]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a690:	4013      	ands	r3, r2
 800a692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d006      	beq.n	800a6ae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	491a      	ldr	r1, [pc, #104]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60cb      	str	r3, [r1, #12]
 800a6ac:	e006      	b.n	800a6bc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a6ae:	4b18      	ldr	r3, [pc, #96]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	43db      	mvns	r3, r3
 800a6b6:	4916      	ldr	r1, [pc, #88]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d025      	beq.n	800a714 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a6c8:	4b11      	ldr	r3, [pc, #68]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	4910      	ldr	r1, [pc, #64]	@ (800a710 <HAL_GPIO_Init+0x2c8>)
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	604b      	str	r3, [r1, #4]
 800a6d4:	e025      	b.n	800a722 <HAL_GPIO_Init+0x2da>
 800a6d6:	bf00      	nop
 800a6d8:	10320000 	.word	0x10320000
 800a6dc:	10310000 	.word	0x10310000
 800a6e0:	10220000 	.word	0x10220000
 800a6e4:	10210000 	.word	0x10210000
 800a6e8:	10120000 	.word	0x10120000
 800a6ec:	10110000 	.word	0x10110000
 800a6f0:	40021000 	.word	0x40021000
 800a6f4:	40010000 	.word	0x40010000
 800a6f8:	40010800 	.word	0x40010800
 800a6fc:	40010c00 	.word	0x40010c00
 800a700:	40011000 	.word	0x40011000
 800a704:	40011400 	.word	0x40011400
 800a708:	40011800 	.word	0x40011800
 800a70c:	40011c00 	.word	0x40011c00
 800a710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a714:	4b15      	ldr	r3, [pc, #84]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	43db      	mvns	r3, r3
 800a71c:	4913      	ldr	r1, [pc, #76]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a71e:	4013      	ands	r3, r2
 800a720:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d006      	beq.n	800a73c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a72e:	4b0f      	ldr	r3, [pc, #60]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	490e      	ldr	r1, [pc, #56]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	4313      	orrs	r3, r2
 800a738:	600b      	str	r3, [r1, #0]
 800a73a:	e006      	b.n	800a74a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a73c:	4b0b      	ldr	r3, [pc, #44]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	43db      	mvns	r3, r3
 800a744:	4909      	ldr	r1, [pc, #36]	@ (800a76c <HAL_GPIO_Init+0x324>)
 800a746:	4013      	ands	r3, r2
 800a748:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	3301      	adds	r3, #1
 800a74e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	fa22 f303 	lsr.w	r3, r2, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f47f ae7e 	bne.w	800a45c <HAL_GPIO_Init+0x14>
  }
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	372c      	adds	r7, #44	@ 0x2c
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr
 800a76c:	40010400 	.word	0x40010400

0800a770 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a770:	b480      	push	{r7}
 800a772:	b089      	sub	sp, #36	@ 0x24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a77e:	e0a6      	b.n	800a8ce <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a780:	2201      	movs	r2, #1
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	4013      	ands	r3, r2
 800a78c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 8099 	beq.w	800a8c8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a796:	4a54      	ldr	r2, [pc, #336]	@ (800a8e8 <HAL_GPIO_DeInit+0x178>)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	089b      	lsrs	r3, r3, #2
 800a79c:	3302      	adds	r3, #2
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a4c      	ldr	r2, [pc, #304]	@ (800a8ec <HAL_GPIO_DeInit+0x17c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d01f      	beq.n	800a800 <HAL_GPIO_DeInit+0x90>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a4b      	ldr	r2, [pc, #300]	@ (800a8f0 <HAL_GPIO_DeInit+0x180>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d019      	beq.n	800a7fc <HAL_GPIO_DeInit+0x8c>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a4a      	ldr	r2, [pc, #296]	@ (800a8f4 <HAL_GPIO_DeInit+0x184>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d013      	beq.n	800a7f8 <HAL_GPIO_DeInit+0x88>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a49      	ldr	r2, [pc, #292]	@ (800a8f8 <HAL_GPIO_DeInit+0x188>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00d      	beq.n	800a7f4 <HAL_GPIO_DeInit+0x84>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a48      	ldr	r2, [pc, #288]	@ (800a8fc <HAL_GPIO_DeInit+0x18c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d007      	beq.n	800a7f0 <HAL_GPIO_DeInit+0x80>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a47      	ldr	r2, [pc, #284]	@ (800a900 <HAL_GPIO_DeInit+0x190>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d101      	bne.n	800a7ec <HAL_GPIO_DeInit+0x7c>
 800a7e8:	2305      	movs	r3, #5
 800a7ea:	e00a      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a7ec:	2306      	movs	r3, #6
 800a7ee:	e008      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	e006      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e004      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e002      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e000      	b.n	800a802 <HAL_GPIO_DeInit+0x92>
 800a800:	2300      	movs	r3, #0
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	f002 0203 	and.w	r2, r2, #3
 800a808:	0092      	lsls	r2, r2, #2
 800a80a:	4093      	lsls	r3, r2
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d132      	bne.n	800a878 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a812:	4b3c      	ldr	r3, [pc, #240]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	43db      	mvns	r3, r3
 800a81a:	493a      	ldr	r1, [pc, #232]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a820:	4b38      	ldr	r3, [pc, #224]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	43db      	mvns	r3, r3
 800a828:	4936      	ldr	r1, [pc, #216]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a82e:	4b35      	ldr	r3, [pc, #212]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	43db      	mvns	r3, r3
 800a836:	4933      	ldr	r1, [pc, #204]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a838:	4013      	ands	r3, r2
 800a83a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a83c:	4b31      	ldr	r3, [pc, #196]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	43db      	mvns	r3, r3
 800a844:	492f      	ldr	r1, [pc, #188]	@ (800a904 <HAL_GPIO_DeInit+0x194>)
 800a846:	4013      	ands	r3, r2
 800a848:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	220f      	movs	r2, #15
 800a854:	fa02 f303 	lsl.w	r3, r2, r3
 800a858:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a85a:	4a23      	ldr	r2, [pc, #140]	@ (800a8e8 <HAL_GPIO_DeInit+0x178>)
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	089b      	lsrs	r3, r3, #2
 800a860:	3302      	adds	r3, #2
 800a862:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	43da      	mvns	r2, r3
 800a86a:	481f      	ldr	r0, [pc, #124]	@ (800a8e8 <HAL_GPIO_DeInit+0x178>)
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	089b      	lsrs	r3, r3, #2
 800a870:	400a      	ands	r2, r1
 800a872:	3302      	adds	r3, #2
 800a874:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2bff      	cmp	r3, #255	@ 0xff
 800a87c:	d801      	bhi.n	800a882 <HAL_GPIO_DeInit+0x112>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	e001      	b.n	800a886 <HAL_GPIO_DeInit+0x116>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3304      	adds	r3, #4
 800a886:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2bff      	cmp	r3, #255	@ 0xff
 800a88c:	d802      	bhi.n	800a894 <HAL_GPIO_DeInit+0x124>
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	e002      	b.n	800a89a <HAL_GPIO_DeInit+0x12a>
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	3b08      	subs	r3, #8
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	210f      	movs	r1, #15
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	401a      	ands	r2, r3
 800a8ac:	2104      	movs	r1, #4
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68da      	ldr	r2, [r3, #12]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	43db      	mvns	r3, r3
 800a8c2:	401a      	ands	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f47f af52 	bne.w	800a780 <HAL_GPIO_DeInit+0x10>
  }
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	3724      	adds	r7, #36	@ 0x24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bc80      	pop	{r7}
 800a8e6:	4770      	bx	lr
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	40010800 	.word	0x40010800
 800a8f0:	40010c00 	.word	0x40010c00
 800a8f4:	40011000 	.word	0x40011000
 800a8f8:	40011400 	.word	0x40011400
 800a8fc:	40011800 	.word	0x40011800
 800a900:	40011c00 	.word	0x40011c00
 800a904:	40010400 	.word	0x40010400

0800a908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	887b      	ldrh	r3, [r7, #2]
 800a91a:	4013      	ands	r3, r2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
 800a924:	e001      	b.n	800a92a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	bc80      	pop	{r7}
 800a934:	4770      	bx	lr

0800a936 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	807b      	strh	r3, [r7, #2]
 800a942:	4613      	mov	r3, r2
 800a944:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a946:	787b      	ldrb	r3, [r7, #1]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a94c:	887a      	ldrh	r2, [r7, #2]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a952:	e003      	b.n	800a95c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a954:	887b      	ldrh	r3, [r7, #2]
 800a956:	041a      	lsls	r2, r3, #16
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	611a      	str	r2, [r3, #16]
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr

0800a966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a978:	887a      	ldrh	r2, [r7, #2]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4013      	ands	r3, r2
 800a97e:	041a      	lsls	r2, r3, #16
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	43d9      	mvns	r1, r3
 800a984:	887b      	ldrh	r3, [r7, #2]
 800a986:	400b      	ands	r3, r1
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	611a      	str	r2, [r3, #16]
}
 800a98e:	bf00      	nop
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e12b      	b.n	800ac02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7fe ffe8 	bl	8009994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2224      	movs	r2, #36	@ 0x24
 800a9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a9ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a9fc:	f001 fdb8 	bl	800c570 <HAL_RCC_GetPCLK1Freq>
 800aa00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	4a81      	ldr	r2, [pc, #516]	@ (800ac0c <HAL_I2C_Init+0x274>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d807      	bhi.n	800aa1c <HAL_I2C_Init+0x84>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4a80      	ldr	r2, [pc, #512]	@ (800ac10 <HAL_I2C_Init+0x278>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	bf94      	ite	ls
 800aa14:	2301      	movls	r3, #1
 800aa16:	2300      	movhi	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e006      	b.n	800aa2a <HAL_I2C_Init+0x92>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4a7d      	ldr	r2, [pc, #500]	@ (800ac14 <HAL_I2C_Init+0x27c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	bf94      	ite	ls
 800aa24:	2301      	movls	r3, #1
 800aa26:	2300      	movhi	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e0e7      	b.n	800ac02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4a78      	ldr	r2, [pc, #480]	@ (800ac18 <HAL_I2C_Init+0x280>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	0c9b      	lsrs	r3, r3, #18
 800aa3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a6a      	ldr	r2, [pc, #424]	@ (800ac0c <HAL_I2C_Init+0x274>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d802      	bhi.n	800aa6c <HAL_I2C_Init+0xd4>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	e009      	b.n	800aa80 <HAL_I2C_Init+0xe8>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	4a69      	ldr	r2, [pc, #420]	@ (800ac1c <HAL_I2C_Init+0x284>)
 800aa78:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7c:	099b      	lsrs	r3, r3, #6
 800aa7e:	3301      	adds	r3, #1
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6812      	ldr	r2, [r2, #0]
 800aa84:	430b      	orrs	r3, r1
 800aa86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	495c      	ldr	r1, [pc, #368]	@ (800ac0c <HAL_I2C_Init+0x274>)
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	d819      	bhi.n	800aad4 <HAL_I2C_Init+0x13c>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	1e59      	subs	r1, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaae:	1c59      	adds	r1, r3, #1
 800aab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aab4:	400b      	ands	r3, r1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <HAL_I2C_Init+0x138>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	1e59      	subs	r1, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	fbb1 f3f3 	udiv	r3, r1, r3
 800aac8:	3301      	adds	r3, #1
 800aaca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aace:	e051      	b.n	800ab74 <HAL_I2C_Init+0x1dc>
 800aad0:	2304      	movs	r3, #4
 800aad2:	e04f      	b.n	800ab74 <HAL_I2C_Init+0x1dc>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d111      	bne.n	800ab00 <HAL_I2C_Init+0x168>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	1e58      	subs	r0, r3, #1
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6859      	ldr	r1, [r3, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	440b      	add	r3, r1
 800aaea:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bf0c      	ite	eq
 800aaf8:	2301      	moveq	r3, #1
 800aafa:	2300      	movne	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	e012      	b.n	800ab26 <HAL_I2C_Init+0x18e>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	1e58      	subs	r0, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6859      	ldr	r1, [r3, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	0099      	lsls	r1, r3, #2
 800ab10:	440b      	add	r3, r1
 800ab12:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab16:	3301      	adds	r3, #1
 800ab18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf0c      	ite	eq
 800ab20:	2301      	moveq	r3, #1
 800ab22:	2300      	movne	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <HAL_I2C_Init+0x196>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e022      	b.n	800ab74 <HAL_I2C_Init+0x1dc>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10e      	bne.n	800ab54 <HAL_I2C_Init+0x1bc>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	1e58      	subs	r0, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6859      	ldr	r1, [r3, #4]
 800ab3e:	460b      	mov	r3, r1
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	440b      	add	r3, r1
 800ab44:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab52:	e00f      	b.n	800ab74 <HAL_I2C_Init+0x1dc>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	1e58      	subs	r0, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6859      	ldr	r1, [r3, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	440b      	add	r3, r1
 800ab62:	0099      	lsls	r1, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	6809      	ldr	r1, [r1, #0]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69da      	ldr	r2, [r3, #28]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800aba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	6911      	ldr	r1, [r2, #16]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	68d2      	ldr	r2, [r2, #12]
 800abae:	4311      	orrs	r1, r2
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	430b      	orrs	r3, r1
 800abb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695a      	ldr	r2, [r3, #20]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	431a      	orrs	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	000186a0 	.word	0x000186a0
 800ac10:	001e847f 	.word	0x001e847f
 800ac14:	003d08ff 	.word	0x003d08ff
 800ac18:	431bde83 	.word	0x431bde83
 800ac1c:	10624dd3 	.word	0x10624dd3

0800ac20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e021      	b.n	800ac76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2224      	movs	r2, #36	@ 0x24
 800ac36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0201 	bic.w	r2, r2, #1
 800ac48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7fe fee0 	bl	8009a10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	607a      	str	r2, [r7, #4]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	817b      	strh	r3, [r7, #10]
 800ac90:	4613      	mov	r3, r2
 800ac92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac94:	f7ff f852 	bl	8009d3c <HAL_GetTick>
 800ac98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	f040 80e0 	bne.w	800ae68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	2319      	movs	r3, #25
 800acae:	2201      	movs	r2, #1
 800acb0:	4970      	ldr	r1, [pc, #448]	@ (800ae74 <HAL_I2C_Master_Transmit+0x1f4>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fe5c 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800acbe:	2302      	movs	r3, #2
 800acc0:	e0d3      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_I2C_Master_Transmit+0x50>
 800accc:	2302      	movs	r3, #2
 800acce:	e0cc      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d007      	beq.n	800acf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f042 0201 	orr.w	r2, r2, #1
 800acf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2221      	movs	r2, #33	@ 0x21
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2210      	movs	r2, #16
 800ad12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	893a      	ldrh	r2, [r7, #8]
 800ad26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4a50      	ldr	r2, [pc, #320]	@ (800ae78 <HAL_I2C_Master_Transmit+0x1f8>)
 800ad36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ad38:	8979      	ldrh	r1, [r7, #10]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	6a3a      	ldr	r2, [r7, #32]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 fc16 	bl	800b570 <I2C_MasterRequestWrite>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e08d      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad4e:	2300      	movs	r3, #0
 800ad50:	613b      	str	r3, [r7, #16]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	613b      	str	r3, [r7, #16]
 800ad62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ad64:	e066      	b.n	800ae34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	6a39      	ldr	r1, [r7, #32]
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 ff1a 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00d      	beq.n	800ad92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d107      	bne.n	800ad8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e06b      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adba:	3b01      	subs	r3, #1
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d11b      	bne.n	800ae08 <HAL_I2C_Master_Transmit+0x188>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800add4:	2b00      	cmp	r3, #0
 800add6:	d017      	beq.n	800ae08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	6a39      	ldr	r1, [r7, #32]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 ff11 	bl	800bc34 <I2C_WaitOnBTFFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d107      	bne.n	800ae30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e01a      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d194      	bne.n	800ad66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	e000      	b.n	800ae6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ae68:	2302      	movs	r3, #2
  }
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	00100002 	.word	0x00100002
 800ae78:	ffff0000 	.word	0xffff0000

0800ae7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	817b      	strh	r3, [r7, #10]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	813b      	strh	r3, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae96:	f7fe ff51 	bl	8009d3c <HAL_GetTick>
 800ae9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	f040 80d9 	bne.w	800b05c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	2319      	movs	r3, #25
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	496d      	ldr	r1, [pc, #436]	@ (800b068 <HAL_I2C_Mem_Write+0x1ec>)
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fd5b 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800aec0:	2302      	movs	r3, #2
 800aec2:	e0cc      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_I2C_Mem_Write+0x56>
 800aece:	2302      	movs	r3, #2
 800aed0:	e0c5      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d007      	beq.n	800aef8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0201 	orr.w	r2, r2, #1
 800aef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2221      	movs	r2, #33	@ 0x21
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2240      	movs	r2, #64	@ 0x40
 800af14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6a3a      	ldr	r2, [r7, #32]
 800af22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800af28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af2e:	b29a      	uxth	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4a4d      	ldr	r2, [pc, #308]	@ (800b06c <HAL_I2C_Mem_Write+0x1f0>)
 800af38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af3a:	88f8      	ldrh	r0, [r7, #6]
 800af3c:	893a      	ldrh	r2, [r7, #8]
 800af3e:	8979      	ldrh	r1, [r7, #10]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4603      	mov	r3, r0
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f000 fb92 	bl	800b674 <I2C_RequestMemoryWrite>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d052      	beq.n	800affc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e081      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f000 fe20 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00d      	beq.n	800af86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d107      	bne.n	800af82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e06b      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afac:	b29b      	uxth	r3, r3
 800afae:	3b01      	subs	r3, #1
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d11b      	bne.n	800affc <HAL_I2C_Mem_Write+0x180>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d017      	beq.n	800affc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afe6:	3b01      	subs	r3, #1
 800afe8:	b29a      	uxth	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	3b01      	subs	r3, #1
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1aa      	bne.n	800af5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 fe13 	bl	800bc34 <I2C_WaitOnBTFFlagUntilTimeout>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00d      	beq.n	800b030 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b018:	2b04      	cmp	r3, #4
 800b01a:	d107      	bne.n	800b02c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b02a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e016      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b03e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2220      	movs	r2, #32
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	e000      	b.n	800b05e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b05c:	2302      	movs	r3, #2
  }
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	00100002 	.word	0x00100002
 800b06c:	ffff0000 	.word	0xffff0000

0800b070 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08c      	sub	sp, #48	@ 0x30
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	4603      	mov	r3, r0
 800b080:	817b      	strh	r3, [r7, #10]
 800b082:	460b      	mov	r3, r1
 800b084:	813b      	strh	r3, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b08e:	f7fe fe55 	bl	8009d3c <HAL_GetTick>
 800b092:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	f040 8244 	bne.w	800b52a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	2319      	movs	r3, #25
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	4982      	ldr	r1, [pc, #520]	@ (800b2b4 <HAL_I2C_Mem_Read+0x244>)
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 fc5f 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e237      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_I2C_Mem_Read+0x5a>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e230      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d007      	beq.n	800b0f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0201 	orr.w	r2, r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b0fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2222      	movs	r2, #34	@ 0x22
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2240      	movs	r2, #64	@ 0x40
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b11a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b126:	b29a      	uxth	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4a62      	ldr	r2, [pc, #392]	@ (800b2b8 <HAL_I2C_Mem_Read+0x248>)
 800b130:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b132:	88f8      	ldrh	r0, [r7, #6]
 800b134:	893a      	ldrh	r2, [r7, #8]
 800b136:	8979      	ldrh	r1, [r7, #10]
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4603      	mov	r3, r0
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fb2c 	bl	800b7a0 <I2C_RequestMemoryRead>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e1ec      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b156:	2b00      	cmp	r3, #0
 800b158:	d113      	bne.n	800b182 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b15a:	2300      	movs	r3, #0
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	61fb      	str	r3, [r7, #28]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e1c0      	b.n	800b504 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b186:	2b01      	cmp	r3, #1
 800b188:	d11e      	bne.n	800b1c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b19a:	b672      	cpsid	i
}
 800b19c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b19e:	2300      	movs	r3, #0
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	61bb      	str	r3, [r7, #24]
 800b1b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b1c4:	b662      	cpsie	i
}
 800b1c6:	e035      	b.n	800b234 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d11e      	bne.n	800b20e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1e0:	b672      	cpsid	i
}
 800b1e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b20a:	b662      	cpsie	i
}
 800b20c:	e012      	b.n	800b234 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b21c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b21e:	2300      	movs	r3, #0
 800b220:	613b      	str	r3, [r7, #16]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	613b      	str	r3, [r7, #16]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b234:	e166      	b.n	800b504 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	f200 811f 	bhi.w	800b47e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b244:	2b01      	cmp	r3, #1
 800b246:	d123      	bne.n	800b290 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b24a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 fd39 	bl	800bcc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e167      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	b29a      	uxth	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b28e:	e139      	b.n	800b504 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b294:	2b02      	cmp	r3, #2
 800b296:	d152      	bne.n	800b33e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4906      	ldr	r1, [pc, #24]	@ (800b2bc <HAL_I2C_Mem_Read+0x24c>)
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 fb64 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d008      	beq.n	800b2c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e13c      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
 800b2b2:	bf00      	nop
 800b2b4:	00100002 	.word	0x00100002
 800b2b8:	ffff0000 	.word	0xffff0000
 800b2bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b2c0:	b672      	cpsid	i
}
 800b2c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691a      	ldr	r2, [r3, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b306:	b662      	cpsie	i
}
 800b308:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	b29a      	uxth	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b33c:	e0e2      	b.n	800b504 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b344:	2200      	movs	r2, #0
 800b346:	497b      	ldr	r1, [pc, #492]	@ (800b534 <HAL_I2C_Mem_Read+0x4c4>)
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fb11 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e0e9      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b368:	b672      	cpsid	i
}
 800b36a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691a      	ldr	r2, [r3, #16]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	b2d2      	uxtb	r2, r2
 800b378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b388:	3b01      	subs	r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b39e:	4b66      	ldr	r3, [pc, #408]	@ (800b538 <HAL_I2C_Mem_Read+0x4c8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	08db      	lsrs	r3, r3, #3
 800b3a4:	4a65      	ldr	r2, [pc, #404]	@ (800b53c <HAL_I2C_Mem_Read+0x4cc>)
 800b3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3aa:	0a1a      	lsrs	r2, r3, #8
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	00da      	lsls	r2, r3, #3
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d118      	bne.n	800b3f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3de:	f043 0220 	orr.w	r2, r3, #32
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b3e6:	b662      	cpsie	i
}
 800b3e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e09a      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b04      	cmp	r3, #4
 800b402:	d1d9      	bne.n	800b3b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691a      	ldr	r2, [r3, #16]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29a      	uxth	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b446:	b662      	cpsie	i
}
 800b448:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	691a      	ldr	r2, [r3, #16]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	b2d2      	uxtb	r2, r2
 800b456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b466:	3b01      	subs	r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b472:	b29b      	uxth	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b47c:	e042      	b.n	800b504 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 fc1e 	bl	800bcc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e04c      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	691a      	ldr	r2, [r3, #16]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d118      	bne.n	800b504 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f47f ae94 	bne.w	800b236 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2220      	movs	r2, #32
 800b512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	e000      	b.n	800b52c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b52a:	2302      	movs	r3, #2
  }
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3728      	adds	r7, #40	@ 0x28
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	00010004 	.word	0x00010004
 800b538:	20000f74 	.word	0x20000f74
 800b53c:	14f8b589 	.word	0x14f8b589

0800b540 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b54e:	b2db      	uxtb	r3, r3
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr

0800b55a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bc80      	pop	{r7}
 800b56e:	4770      	bx	lr

0800b570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af02      	add	r7, sp, #8
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	460b      	mov	r3, r1
 800b57e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d006      	beq.n	800b59a <I2C_MasterRequestWrite+0x2a>
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d003      	beq.n	800b59a <I2C_MasterRequestWrite+0x2a>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b598:	d108      	bne.n	800b5ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	e00b      	b.n	800b5c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b0:	2b12      	cmp	r3, #18
 800b5b2:	d107      	bne.n	800b5c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f9cd 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00d      	beq.n	800b5f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ea:	d103      	bne.n	800b5f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e035      	b.n	800b664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b600:	d108      	bne.n	800b614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b602:	897b      	ldrh	r3, [r7, #10]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b610:	611a      	str	r2, [r3, #16]
 800b612:	e01b      	b.n	800b64c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b614:	897b      	ldrh	r3, [r7, #10]
 800b616:	11db      	asrs	r3, r3, #7
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 0306 	and.w	r3, r3, #6
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f063 030f 	orn	r3, r3, #15
 800b624:	b2da      	uxtb	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	490e      	ldr	r1, [pc, #56]	@ (800b66c <I2C_MasterRequestWrite+0xfc>)
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fa16 	bl	800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e010      	b.n	800b664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b642:	897b      	ldrh	r3, [r7, #10]
 800b644:	b2da      	uxtb	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	4907      	ldr	r1, [pc, #28]	@ (800b670 <I2C_MasterRequestWrite+0x100>)
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 fa06 	bl	800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e000      	b.n	800b664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	00010008 	.word	0x00010008
 800b670:	00010002 	.word	0x00010002

0800b674 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	4608      	mov	r0, r1
 800b67e:	4611      	mov	r1, r2
 800b680:	461a      	mov	r2, r3
 800b682:	4603      	mov	r3, r0
 800b684:	817b      	strh	r3, [r7, #10]
 800b686:	460b      	mov	r3, r1
 800b688:	813b      	strh	r3, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b69c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f960 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00d      	beq.n	800b6d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6c4:	d103      	bne.n	800b6ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e05f      	b.n	800b792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b6d2:	897b      	ldrh	r3, [r7, #10]
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b6e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	6a3a      	ldr	r2, [r7, #32]
 800b6e6:	492d      	ldr	r1, [pc, #180]	@ (800b79c <I2C_RequestMemoryWrite+0x128>)
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f9bb 	bl	800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e04c      	b.n	800b792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b710:	6a39      	ldr	r1, [r7, #32]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fa46 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00d      	beq.n	800b73a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b722:	2b04      	cmp	r3, #4
 800b724:	d107      	bne.n	800b736 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e02b      	b.n	800b792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b73a:	88fb      	ldrh	r3, [r7, #6]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d105      	bne.n	800b74c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b740:	893b      	ldrh	r3, [r7, #8]
 800b742:	b2da      	uxtb	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	611a      	str	r2, [r3, #16]
 800b74a:	e021      	b.n	800b790 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b74c:	893b      	ldrh	r3, [r7, #8]
 800b74e:	0a1b      	lsrs	r3, r3, #8
 800b750:	b29b      	uxth	r3, r3
 800b752:	b2da      	uxtb	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b75a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b75c:	6a39      	ldr	r1, [r7, #32]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 fa20 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00d      	beq.n	800b786 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d107      	bne.n	800b782 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e005      	b.n	800b792 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b786:	893b      	ldrh	r3, [r7, #8]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	00010002 	.word	0x00010002

0800b7a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	817b      	strh	r3, [r7, #10]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	813b      	strh	r3, [r7, #8]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	6a3b      	ldr	r3, [r7, #32]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f8c2 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00d      	beq.n	800b80e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b800:	d103      	bne.n	800b80a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b808:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e0aa      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b80e:	897b      	ldrh	r3, [r7, #10]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b81c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	6a3a      	ldr	r2, [r7, #32]
 800b822:	4952      	ldr	r1, [pc, #328]	@ (800b96c <I2C_RequestMemoryRead+0x1cc>)
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f91d 	bl	800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e097      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b834:	2300      	movs	r3, #0
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b84a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b84c:	6a39      	ldr	r1, [r7, #32]
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 f9a8 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00d      	beq.n	800b876 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d107      	bne.n	800b872 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e076      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d105      	bne.n	800b888 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b87c:	893b      	ldrh	r3, [r7, #8]
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	611a      	str	r2, [r3, #16]
 800b886:	e021      	b.n	800b8cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b888:	893b      	ldrh	r3, [r7, #8]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b898:	6a39      	ldr	r1, [r7, #32]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f982 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00d      	beq.n	800b8c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d107      	bne.n	800b8be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e050      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b8c2:	893b      	ldrh	r3, [r7, #8]
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ce:	6a39      	ldr	r1, [r7, #32]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 f967 	bl	800bba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00d      	beq.n	800b8f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d107      	bne.n	800b8f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e035      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b906:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	2200      	movs	r2, #0
 800b910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f82b 	bl	800b970 <I2C_WaitOnFlagUntilTimeout>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00d      	beq.n	800b93c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b92e:	d103      	bne.n	800b938 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b936:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e013      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b93c:	897b      	ldrh	r3, [r7, #10]
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	f043 0301 	orr.w	r3, r3, #1
 800b944:	b2da      	uxtb	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	6a3a      	ldr	r2, [r7, #32]
 800b950:	4906      	ldr	r1, [pc, #24]	@ (800b96c <I2C_RequestMemoryRead+0x1cc>)
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f000 f886 	bl	800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e000      	b.n	800b964 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	00010002 	.word	0x00010002

0800b970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	4613      	mov	r3, r2
 800b97e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b980:	e048      	b.n	800ba14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b988:	d044      	beq.n	800ba14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98a:	f7fe f9d7 	bl	8009d3c <HAL_GetTick>
 800b98e:	4602      	mov	r2, r0
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d139      	bne.n	800ba14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	0c1b      	lsrs	r3, r3, #16
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d10d      	bne.n	800b9c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	43da      	mvns	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bf0c      	ite	eq
 800b9bc:	2301      	moveq	r3, #1
 800b9be:	2300      	movne	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	e00c      	b.n	800b9e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	43da      	mvns	r2, r3
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bf0c      	ite	eq
 800b9d8:	2301      	moveq	r3, #1
 800b9da:	2300      	movne	r3, #0
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d116      	bne.n	800ba14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba00:	f043 0220 	orr.w	r2, r3, #32
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e023      	b.n	800ba5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	0c1b      	lsrs	r3, r3, #16
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d10d      	bne.n	800ba3a <I2C_WaitOnFlagUntilTimeout+0xca>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	43da      	mvns	r2, r3
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	4013      	ands	r3, r2
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bf0c      	ite	eq
 800ba30:	2301      	moveq	r3, #1
 800ba32:	2300      	movne	r3, #0
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	461a      	mov	r2, r3
 800ba38:	e00c      	b.n	800ba54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	43da      	mvns	r2, r3
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	4013      	ands	r3, r2
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2301      	moveq	r3, #1
 800ba4e:	2300      	movne	r3, #0
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d093      	beq.n	800b982 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba72:	e071      	b.n	800bb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba82:	d123      	bne.n	800bacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab8:	f043 0204 	orr.w	r2, r3, #4
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e067      	b.n	800bb9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bad2:	d041      	beq.n	800bb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad4:	f7fe f932 	bl	8009d3c <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d302      	bcc.n	800baea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d136      	bne.n	800bb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d10c      	bne.n	800bb0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	43da      	mvns	r2, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	4013      	ands	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	e00b      	b.n	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	43da      	mvns	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	4013      	ands	r3, r2
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d016      	beq.n	800bb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb44:	f043 0220 	orr.w	r2, r3, #32
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e021      	b.n	800bb9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	0c1b      	lsrs	r3, r3, #16
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d10c      	bne.n	800bb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	43da      	mvns	r2, r3
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bf14      	ite	ne
 800bb74:	2301      	movne	r3, #1
 800bb76:	2300      	moveq	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	e00b      	b.n	800bb94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	43da      	mvns	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	4013      	ands	r3, r2
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bf14      	ite	ne
 800bb8e:	2301      	movne	r3, #1
 800bb90:	2300      	moveq	r3, #0
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f47f af6d 	bne.w	800ba74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbb0:	e034      	b.n	800bc1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 f8e3 	bl	800bd7e <I2C_IsAcknowledgeFailed>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e034      	b.n	800bc2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbc8:	d028      	beq.n	800bc1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbca:	f7fe f8b7 	bl	8009d3c <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d302      	bcc.n	800bbe0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11d      	bne.n	800bc1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbea:	2b80      	cmp	r3, #128	@ 0x80
 800bbec:	d016      	beq.n	800bc1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc08:	f043 0220 	orr.w	r2, r3, #32
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e007      	b.n	800bc2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc26:	2b80      	cmp	r3, #128	@ 0x80
 800bc28:	d1c3      	bne.n	800bbb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc40:	e034      	b.n	800bcac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f89b 	bl	800bd7e <I2C_IsAcknowledgeFailed>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e034      	b.n	800bcbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc58:	d028      	beq.n	800bcac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc5a:	f7fe f86f 	bl	8009d3c <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d302      	bcc.n	800bc70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d11d      	bne.n	800bcac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	d016      	beq.n	800bcac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2220      	movs	r2, #32
 800bc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc98:	f043 0220 	orr.w	r2, r3, #32
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e007      	b.n	800bcbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d1c3      	bne.n	800bc42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcd0:	e049      	b.n	800bd66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d119      	bne.n	800bd14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f06f 0210 	mvn.w	r2, #16
 800bce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e030      	b.n	800bd76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd14:	f7fe f812 	bl	8009d3c <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d302      	bcc.n	800bd2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d11d      	bne.n	800bd66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd34:	2b40      	cmp	r3, #64	@ 0x40
 800bd36:	d016      	beq.n	800bd66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd52:	f043 0220 	orr.w	r2, r3, #32
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e007      	b.n	800bd76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd70:	2b40      	cmp	r3, #64	@ 0x40
 800bd72:	d1ae      	bne.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd94:	d11b      	bne.n	800bdce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdba:	f043 0204 	orr.w	r2, r3, #4
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bc80      	pop	{r7}
 800bdd8:	4770      	bx	lr
	...

0800bddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e272      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 8087 	beq.w	800bf0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bdfc:	4b92      	ldr	r3, [pc, #584]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f003 030c 	and.w	r3, r3, #12
 800be04:	2b04      	cmp	r3, #4
 800be06:	d00c      	beq.n	800be22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800be08:	4b8f      	ldr	r3, [pc, #572]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f003 030c 	and.w	r3, r3, #12
 800be10:	2b08      	cmp	r3, #8
 800be12:	d112      	bne.n	800be3a <HAL_RCC_OscConfig+0x5e>
 800be14:	4b8c      	ldr	r3, [pc, #560]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be20:	d10b      	bne.n	800be3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be22:	4b89      	ldr	r3, [pc, #548]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d06c      	beq.n	800bf08 <HAL_RCC_OscConfig+0x12c>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d168      	bne.n	800bf08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e24c      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be42:	d106      	bne.n	800be52 <HAL_RCC_OscConfig+0x76>
 800be44:	4b80      	ldr	r3, [pc, #512]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a7f      	ldr	r2, [pc, #508]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	e02e      	b.n	800beb0 <HAL_RCC_OscConfig+0xd4>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10c      	bne.n	800be74 <HAL_RCC_OscConfig+0x98>
 800be5a:	4b7b      	ldr	r3, [pc, #492]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a7a      	ldr	r2, [pc, #488]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	4b78      	ldr	r3, [pc, #480]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a77      	ldr	r2, [pc, #476]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	e01d      	b.n	800beb0 <HAL_RCC_OscConfig+0xd4>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be7c:	d10c      	bne.n	800be98 <HAL_RCC_OscConfig+0xbc>
 800be7e:	4b72      	ldr	r3, [pc, #456]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a71      	ldr	r2, [pc, #452]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be88:	6013      	str	r3, [r2, #0]
 800be8a:	4b6f      	ldr	r3, [pc, #444]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a6e      	ldr	r2, [pc, #440]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	e00b      	b.n	800beb0 <HAL_RCC_OscConfig+0xd4>
 800be98:	4b6b      	ldr	r3, [pc, #428]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a6a      	ldr	r2, [pc, #424]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800be9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bea2:	6013      	str	r3, [r2, #0]
 800bea4:	4b68      	ldr	r3, [pc, #416]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a67      	ldr	r2, [pc, #412]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800beaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800beae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d013      	beq.n	800bee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beb8:	f7fd ff40 	bl	8009d3c <HAL_GetTick>
 800bebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bebe:	e008      	b.n	800bed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bec0:	f7fd ff3c 	bl	8009d3c <HAL_GetTick>
 800bec4:	4602      	mov	r2, r0
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2b64      	cmp	r3, #100	@ 0x64
 800becc:	d901      	bls.n	800bed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e200      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bed2:	4b5d      	ldr	r3, [pc, #372]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0f0      	beq.n	800bec0 <HAL_RCC_OscConfig+0xe4>
 800bede:	e014      	b.n	800bf0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bee0:	f7fd ff2c 	bl	8009d3c <HAL_GetTick>
 800bee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bee6:	e008      	b.n	800befa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bee8:	f7fd ff28 	bl	8009d3c <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	2b64      	cmp	r3, #100	@ 0x64
 800bef4:	d901      	bls.n	800befa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bef6:	2303      	movs	r3, #3
 800bef8:	e1ec      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800befa:	4b53      	ldr	r3, [pc, #332]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1f0      	bne.n	800bee8 <HAL_RCC_OscConfig+0x10c>
 800bf06:	e000      	b.n	800bf0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d063      	beq.n	800bfde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf16:	4b4c      	ldr	r3, [pc, #304]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f003 030c 	and.w	r3, r3, #12
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bf22:	4b49      	ldr	r3, [pc, #292]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f003 030c 	and.w	r3, r3, #12
 800bf2a:	2b08      	cmp	r3, #8
 800bf2c:	d11c      	bne.n	800bf68 <HAL_RCC_OscConfig+0x18c>
 800bf2e:	4b46      	ldr	r3, [pc, #280]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d116      	bne.n	800bf68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf3a:	4b43      	ldr	r3, [pc, #268]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0302 	and.w	r3, r3, #2
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <HAL_RCC_OscConfig+0x176>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d001      	beq.n	800bf52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e1c0      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf52:	4b3d      	ldr	r3, [pc, #244]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	4939      	ldr	r1, [pc, #228]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf66:	e03a      	b.n	800bfde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d020      	beq.n	800bfb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf70:	4b36      	ldr	r3, [pc, #216]	@ (800c04c <HAL_RCC_OscConfig+0x270>)
 800bf72:	2201      	movs	r2, #1
 800bf74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf76:	f7fd fee1 	bl	8009d3c <HAL_GetTick>
 800bf7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf7c:	e008      	b.n	800bf90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf7e:	f7fd fedd 	bl	8009d3c <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e1a1      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf90:	4b2d      	ldr	r3, [pc, #180]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0302 	and.w	r3, r3, #2
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0f0      	beq.n	800bf7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf9c:	4b2a      	ldr	r3, [pc, #168]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	4927      	ldr	r1, [pc, #156]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	600b      	str	r3, [r1, #0]
 800bfb0:	e015      	b.n	800bfde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfb2:	4b26      	ldr	r3, [pc, #152]	@ (800c04c <HAL_RCC_OscConfig+0x270>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb8:	f7fd fec0 	bl	8009d3c <HAL_GetTick>
 800bfbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfbe:	e008      	b.n	800bfd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfc0:	f7fd febc 	bl	8009d3c <HAL_GetTick>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d901      	bls.n	800bfd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e180      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfd2:	4b1d      	ldr	r3, [pc, #116]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1f0      	bne.n	800bfc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0308 	and.w	r3, r3, #8
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d03a      	beq.n	800c060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d019      	beq.n	800c026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bff2:	4b17      	ldr	r3, [pc, #92]	@ (800c050 <HAL_RCC_OscConfig+0x274>)
 800bff4:	2201      	movs	r2, #1
 800bff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bff8:	f7fd fea0 	bl	8009d3c <HAL_GetTick>
 800bffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bffe:	e008      	b.n	800c012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c000:	f7fd fe9c 	bl	8009d3c <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d901      	bls.n	800c012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e160      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c012:	4b0d      	ldr	r3, [pc, #52]	@ (800c048 <HAL_RCC_OscConfig+0x26c>)
 800c014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0f0      	beq.n	800c000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c01e:	2001      	movs	r0, #1
 800c020:	f000 face 	bl	800c5c0 <RCC_Delay>
 800c024:	e01c      	b.n	800c060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c026:	4b0a      	ldr	r3, [pc, #40]	@ (800c050 <HAL_RCC_OscConfig+0x274>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c02c:	f7fd fe86 	bl	8009d3c <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c032:	e00f      	b.n	800c054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c034:	f7fd fe82 	bl	8009d3c <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d908      	bls.n	800c054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e146      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
 800c046:	bf00      	nop
 800c048:	40021000 	.word	0x40021000
 800c04c:	42420000 	.word	0x42420000
 800c050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c054:	4b92      	ldr	r3, [pc, #584]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e9      	bne.n	800c034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80a6 	beq.w	800c1ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c06e:	2300      	movs	r3, #0
 800c070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c072:	4b8b      	ldr	r3, [pc, #556]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10d      	bne.n	800c09a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c07e:	4b88      	ldr	r3, [pc, #544]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	4a87      	ldr	r2, [pc, #540]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c088:	61d3      	str	r3, [r2, #28]
 800c08a:	4b85      	ldr	r3, [pc, #532]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c092:	60bb      	str	r3, [r7, #8]
 800c094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c09a:	4b82      	ldr	r3, [pc, #520]	@ (800c2a4 <HAL_RCC_OscConfig+0x4c8>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d118      	bne.n	800c0d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c0a6:	4b7f      	ldr	r3, [pc, #508]	@ (800c2a4 <HAL_RCC_OscConfig+0x4c8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a7e      	ldr	r2, [pc, #504]	@ (800c2a4 <HAL_RCC_OscConfig+0x4c8>)
 800c0ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0b2:	f7fd fe43 	bl	8009d3c <HAL_GetTick>
 800c0b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0b8:	e008      	b.n	800c0cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0ba:	f7fd fe3f 	bl	8009d3c <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	2b64      	cmp	r3, #100	@ 0x64
 800c0c6:	d901      	bls.n	800c0cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e103      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0cc:	4b75      	ldr	r3, [pc, #468]	@ (800c2a4 <HAL_RCC_OscConfig+0x4c8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0f0      	beq.n	800c0ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d106      	bne.n	800c0ee <HAL_RCC_OscConfig+0x312>
 800c0e0:	4b6f      	ldr	r3, [pc, #444]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	4a6e      	ldr	r2, [pc, #440]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	6213      	str	r3, [r2, #32]
 800c0ec:	e02d      	b.n	800c14a <HAL_RCC_OscConfig+0x36e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10c      	bne.n	800c110 <HAL_RCC_OscConfig+0x334>
 800c0f6:	4b6a      	ldr	r3, [pc, #424]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	4a69      	ldr	r2, [pc, #420]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c0fc:	f023 0301 	bic.w	r3, r3, #1
 800c100:	6213      	str	r3, [r2, #32]
 800c102:	4b67      	ldr	r3, [pc, #412]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	4a66      	ldr	r2, [pc, #408]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c108:	f023 0304 	bic.w	r3, r3, #4
 800c10c:	6213      	str	r3, [r2, #32]
 800c10e:	e01c      	b.n	800c14a <HAL_RCC_OscConfig+0x36e>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	2b05      	cmp	r3, #5
 800c116:	d10c      	bne.n	800c132 <HAL_RCC_OscConfig+0x356>
 800c118:	4b61      	ldr	r3, [pc, #388]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c11a:	6a1b      	ldr	r3, [r3, #32]
 800c11c:	4a60      	ldr	r2, [pc, #384]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c11e:	f043 0304 	orr.w	r3, r3, #4
 800c122:	6213      	str	r3, [r2, #32]
 800c124:	4b5e      	ldr	r3, [pc, #376]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	4a5d      	ldr	r2, [pc, #372]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c12a:	f043 0301 	orr.w	r3, r3, #1
 800c12e:	6213      	str	r3, [r2, #32]
 800c130:	e00b      	b.n	800c14a <HAL_RCC_OscConfig+0x36e>
 800c132:	4b5b      	ldr	r3, [pc, #364]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	4a5a      	ldr	r2, [pc, #360]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c138:	f023 0301 	bic.w	r3, r3, #1
 800c13c:	6213      	str	r3, [r2, #32]
 800c13e:	4b58      	ldr	r3, [pc, #352]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	4a57      	ldr	r2, [pc, #348]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c144:	f023 0304 	bic.w	r3, r3, #4
 800c148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d015      	beq.n	800c17e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c152:	f7fd fdf3 	bl	8009d3c <HAL_GetTick>
 800c156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c158:	e00a      	b.n	800c170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c15a:	f7fd fdef 	bl	8009d3c <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c168:	4293      	cmp	r3, r2
 800c16a:	d901      	bls.n	800c170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e0b1      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c170:	4b4b      	ldr	r3, [pc, #300]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c172:	6a1b      	ldr	r3, [r3, #32]
 800c174:	f003 0302 	and.w	r3, r3, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d0ee      	beq.n	800c15a <HAL_RCC_OscConfig+0x37e>
 800c17c:	e014      	b.n	800c1a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c17e:	f7fd fddd 	bl	8009d3c <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c184:	e00a      	b.n	800c19c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c186:	f7fd fdd9 	bl	8009d3c <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c194:	4293      	cmp	r3, r2
 800c196:	d901      	bls.n	800c19c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e09b      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c19c:	4b40      	ldr	r3, [pc, #256]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1ee      	bne.n	800c186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d105      	bne.n	800c1ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1ae:	4b3c      	ldr	r3, [pc, #240]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	4a3b      	ldr	r2, [pc, #236]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c1b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8087 	beq.w	800c2d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c1c4:	4b36      	ldr	r3, [pc, #216]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f003 030c 	and.w	r3, r3, #12
 800c1cc:	2b08      	cmp	r3, #8
 800c1ce:	d061      	beq.n	800c294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d146      	bne.n	800c266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1d8:	4b33      	ldr	r3, [pc, #204]	@ (800c2a8 <HAL_RCC_OscConfig+0x4cc>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1de:	f7fd fdad 	bl	8009d3c <HAL_GetTick>
 800c1e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1e4:	e008      	b.n	800c1f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1e6:	f7fd fda9 	bl	8009d3c <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e06d      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1f8:	4b29      	ldr	r3, [pc, #164]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c20c:	d108      	bne.n	800c220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c20e:	4b24      	ldr	r3, [pc, #144]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	4921      	ldr	r1, [pc, #132]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c21c:	4313      	orrs	r3, r2
 800c21e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c220:	4b1f      	ldr	r3, [pc, #124]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a19      	ldr	r1, [r3, #32]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	430b      	orrs	r3, r1
 800c232:	491b      	ldr	r1, [pc, #108]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c234:	4313      	orrs	r3, r2
 800c236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c238:	4b1b      	ldr	r3, [pc, #108]	@ (800c2a8 <HAL_RCC_OscConfig+0x4cc>)
 800c23a:	2201      	movs	r2, #1
 800c23c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c23e:	f7fd fd7d 	bl	8009d3c <HAL_GetTick>
 800c242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c244:	e008      	b.n	800c258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c246:	f7fd fd79 	bl	8009d3c <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	2b02      	cmp	r3, #2
 800c252:	d901      	bls.n	800c258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	e03d      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c258:	4b11      	ldr	r3, [pc, #68]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d0f0      	beq.n	800c246 <HAL_RCC_OscConfig+0x46a>
 800c264:	e035      	b.n	800c2d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c266:	4b10      	ldr	r3, [pc, #64]	@ (800c2a8 <HAL_RCC_OscConfig+0x4cc>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c26c:	f7fd fd66 	bl	8009d3c <HAL_GetTick>
 800c270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c272:	e008      	b.n	800c286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c274:	f7fd fd62 	bl	8009d3c <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e026      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c286:	4b06      	ldr	r3, [pc, #24]	@ (800c2a0 <HAL_RCC_OscConfig+0x4c4>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1f0      	bne.n	800c274 <HAL_RCC_OscConfig+0x498>
 800c292:	e01e      	b.n	800c2d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d107      	bne.n	800c2ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e019      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
 800c2a0:	40021000 	.word	0x40021000
 800c2a4:	40007000 	.word	0x40007000
 800c2a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c2dc <HAL_RCC_OscConfig+0x500>)
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a1b      	ldr	r3, [r3, #32]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d106      	bne.n	800c2ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d001      	beq.n	800c2d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	40021000 	.word	0x40021000

0800c2e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e0d0      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c2f4:	4b6a      	ldr	r3, [pc, #424]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0307 	and.w	r3, r3, #7
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d910      	bls.n	800c324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c302:	4b67      	ldr	r3, [pc, #412]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f023 0207 	bic.w	r2, r3, #7
 800c30a:	4965      	ldr	r1, [pc, #404]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	4313      	orrs	r3, r2
 800c310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c312:	4b63      	ldr	r3, [pc, #396]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0307 	and.w	r3, r3, #7
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d001      	beq.n	800c324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e0b8      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d020      	beq.n	800c372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c33c:	4b59      	ldr	r3, [pc, #356]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4a58      	ldr	r2, [pc, #352]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0308 	and.w	r3, r3, #8
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c354:	4b53      	ldr	r3, [pc, #332]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	4a52      	ldr	r2, [pc, #328]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c35a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c35e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c360:	4b50      	ldr	r3, [pc, #320]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	494d      	ldr	r1, [pc, #308]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d040      	beq.n	800c400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d107      	bne.n	800c396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c386:	4b47      	ldr	r3, [pc, #284]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d115      	bne.n	800c3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e07f      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d107      	bne.n	800c3ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c39e:	4b41      	ldr	r3, [pc, #260]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d109      	bne.n	800c3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e073      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3ae:	4b3d      	ldr	r3, [pc, #244]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0302 	and.w	r3, r3, #2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e06b      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c3be:	4b39      	ldr	r3, [pc, #228]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f023 0203 	bic.w	r2, r3, #3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	4936      	ldr	r1, [pc, #216]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c3d0:	f7fd fcb4 	bl	8009d3c <HAL_GetTick>
 800c3d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3d6:	e00a      	b.n	800c3ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3d8:	f7fd fcb0 	bl	8009d3c <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d901      	bls.n	800c3ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e053      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f003 020c 	and.w	r2, r3, #12
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d1eb      	bne.n	800c3d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c400:	4b27      	ldr	r3, [pc, #156]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0307 	and.w	r3, r3, #7
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d210      	bcs.n	800c430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c40e:	4b24      	ldr	r3, [pc, #144]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f023 0207 	bic.w	r2, r3, #7
 800c416:	4922      	ldr	r1, [pc, #136]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c41e:	4b20      	ldr	r3, [pc, #128]	@ (800c4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d001      	beq.n	800c430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e032      	b.n	800c496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0304 	and.w	r3, r3, #4
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d008      	beq.n	800c44e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c43c:	4b19      	ldr	r3, [pc, #100]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	4916      	ldr	r1, [pc, #88]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 0308 	and.w	r3, r3, #8
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c45a:	4b12      	ldr	r3, [pc, #72]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	490e      	ldr	r1, [pc, #56]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c46e:	f000 f821 	bl	800c4b4 <HAL_RCC_GetSysClockFreq>
 800c472:	4602      	mov	r2, r0
 800c474:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	091b      	lsrs	r3, r3, #4
 800c47a:	f003 030f 	and.w	r3, r3, #15
 800c47e:	490a      	ldr	r1, [pc, #40]	@ (800c4a8 <HAL_RCC_ClockConfig+0x1c8>)
 800c480:	5ccb      	ldrb	r3, [r1, r3]
 800c482:	fa22 f303 	lsr.w	r3, r2, r3
 800c486:	4a09      	ldr	r2, [pc, #36]	@ (800c4ac <HAL_RCC_ClockConfig+0x1cc>)
 800c488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c48a:	4b09      	ldr	r3, [pc, #36]	@ (800c4b0 <HAL_RCC_ClockConfig+0x1d0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fd fc12 	bl	8009cb8 <HAL_InitTick>

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40022000 	.word	0x40022000
 800c4a4:	40021000 	.word	0x40021000
 800c4a8:	0800f7f4 	.word	0x0800f7f4
 800c4ac:	20000f74 	.word	0x20000f74
 800c4b0:	20000f78 	.word	0x20000f78

0800c4b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60bb      	str	r3, [r7, #8]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c548 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 030c 	and.w	r3, r3, #12
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d002      	beq.n	800c4e4 <HAL_RCC_GetSysClockFreq+0x30>
 800c4de:	2b08      	cmp	r3, #8
 800c4e0:	d003      	beq.n	800c4ea <HAL_RCC_GetSysClockFreq+0x36>
 800c4e2:	e027      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c4e4:	4b19      	ldr	r3, [pc, #100]	@ (800c54c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4e6:	613b      	str	r3, [r7, #16]
      break;
 800c4e8:	e027      	b.n	800c53a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	0c9b      	lsrs	r3, r3, #18
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	4a17      	ldr	r2, [pc, #92]	@ (800c550 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c4f4:	5cd3      	ldrb	r3, [r2, r3]
 800c4f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d010      	beq.n	800c524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c502:	4b11      	ldr	r3, [pc, #68]	@ (800c548 <HAL_RCC_GetSysClockFreq+0x94>)
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	0c5b      	lsrs	r3, r3, #17
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	4a11      	ldr	r2, [pc, #68]	@ (800c554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c50e:	5cd3      	ldrb	r3, [r2, r3]
 800c510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a0d      	ldr	r2, [pc, #52]	@ (800c54c <HAL_RCC_GetSysClockFreq+0x98>)
 800c516:	fb03 f202 	mul.w	r2, r3, r2
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e004      	b.n	800c52e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a0c      	ldr	r2, [pc, #48]	@ (800c558 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c528:	fb02 f303 	mul.w	r3, r2, r3
 800c52c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	613b      	str	r3, [r7, #16]
      break;
 800c532:	e002      	b.n	800c53a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <HAL_RCC_GetSysClockFreq+0x98>)
 800c536:	613b      	str	r3, [r7, #16]
      break;
 800c538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c53a:	693b      	ldr	r3, [r7, #16]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	371c      	adds	r7, #28
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	40021000 	.word	0x40021000
 800c54c:	007a1200 	.word	0x007a1200
 800c550:	0800f80c 	.word	0x0800f80c
 800c554:	0800f81c 	.word	0x0800f81c
 800c558:	003d0900 	.word	0x003d0900

0800c55c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c560:	4b02      	ldr	r3, [pc, #8]	@ (800c56c <HAL_RCC_GetHCLKFreq+0x10>)
 800c562:	681b      	ldr	r3, [r3, #0]
}
 800c564:	4618      	mov	r0, r3
 800c566:	46bd      	mov	sp, r7
 800c568:	bc80      	pop	{r7}
 800c56a:	4770      	bx	lr
 800c56c:	20000f74 	.word	0x20000f74

0800c570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c574:	f7ff fff2 	bl	800c55c <HAL_RCC_GetHCLKFreq>
 800c578:	4602      	mov	r2, r0
 800c57a:	4b05      	ldr	r3, [pc, #20]	@ (800c590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	4903      	ldr	r1, [pc, #12]	@ (800c594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c586:	5ccb      	ldrb	r3, [r1, r3]
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	40021000 	.word	0x40021000
 800c594:	0800f804 	.word	0x0800f804

0800c598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c59c:	f7ff ffde 	bl	800c55c <HAL_RCC_GetHCLKFreq>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4b05      	ldr	r3, [pc, #20]	@ (800c5b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	0adb      	lsrs	r3, r3, #11
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	4903      	ldr	r1, [pc, #12]	@ (800c5bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5ae:	5ccb      	ldrb	r3, [r1, r3]
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	40021000 	.word	0x40021000
 800c5bc:	0800f804 	.word	0x0800f804

0800c5c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c5f4 <RCC_Delay+0x34>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c5f8 <RCC_Delay+0x38>)
 800c5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d2:	0a5b      	lsrs	r3, r3, #9
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	fb02 f303 	mul.w	r3, r2, r3
 800c5da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c5dc:	bf00      	nop
  }
  while (Delay --);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	1e5a      	subs	r2, r3, #1
 800c5e2:	60fa      	str	r2, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f9      	bne.n	800c5dc <RCC_Delay+0x1c>
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bc80      	pop	{r7}
 800c5f2:	4770      	bx	lr
 800c5f4:	20000f74 	.word	0x20000f74
 800c5f8:	10624dd3 	.word	0x10624dd3

0800c5fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e041      	b.n	800c692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7fd fa16 	bl	8009a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3304      	adds	r3, #4
 800c638:	4619      	mov	r1, r3
 800c63a:	4610      	mov	r0, r2
 800c63c:	f000 fa82 	bl	800cb44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d001      	beq.n	800c6b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e044      	b.n	800c73e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68da      	ldr	r2, [r3, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f042 0201 	orr.w	r2, r2, #1
 800c6ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c748 <HAL_TIM_Base_Start_IT+0xac>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d018      	beq.n	800c708 <HAL_TIM_Base_Start_IT+0x6c>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a1c      	ldr	r2, [pc, #112]	@ (800c74c <HAL_TIM_Base_Start_IT+0xb0>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d013      	beq.n	800c708 <HAL_TIM_Base_Start_IT+0x6c>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6e8:	d00e      	beq.n	800c708 <HAL_TIM_Base_Start_IT+0x6c>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a18      	ldr	r2, [pc, #96]	@ (800c750 <HAL_TIM_Base_Start_IT+0xb4>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d009      	beq.n	800c708 <HAL_TIM_Base_Start_IT+0x6c>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a16      	ldr	r2, [pc, #88]	@ (800c754 <HAL_TIM_Base_Start_IT+0xb8>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <HAL_TIM_Base_Start_IT+0x6c>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a15      	ldr	r2, [pc, #84]	@ (800c758 <HAL_TIM_Base_Start_IT+0xbc>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d111      	bne.n	800c72c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b06      	cmp	r3, #6
 800c718:	d010      	beq.n	800c73c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f042 0201 	orr.w	r2, r2, #1
 800c728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c72a:	e007      	b.n	800c73c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 0201 	orr.w	r2, r2, #1
 800c73a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr
 800c748:	40012c00 	.word	0x40012c00
 800c74c:	40013400 	.word	0x40013400
 800c750:	40000400 	.word	0x40000400
 800c754:	40000800 	.word	0x40000800
 800c758:	40000c00 	.word	0x40000c00

0800c75c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d122      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d11b      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f06f 0202 	mvn.w	r2, #2
 800c788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	f003 0303 	and.w	r3, r3, #3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9b4 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c7a4:	e005      	b.n	800c7b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f9a7 	bl	800cafa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f9b6 	bl	800cb1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f003 0304 	and.w	r3, r3, #4
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	d122      	bne.n	800c80c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d11b      	bne.n	800c80c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f06f 0204 	mvn.w	r2, #4
 800c7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f98a 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c7f8:	e005      	b.n	800c806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f97d 	bl	800cafa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f98c 	bl	800cb1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f003 0308 	and.w	r3, r3, #8
 800c816:	2b08      	cmp	r3, #8
 800c818:	d122      	bne.n	800c860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b08      	cmp	r3, #8
 800c826:	d11b      	bne.n	800c860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f06f 0208 	mvn.w	r2, #8
 800c830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2204      	movs	r2, #4
 800c836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f960 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c84c:	e005      	b.n	800c85a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f953 	bl	800cafa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f962 	bl	800cb1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f003 0310 	and.w	r3, r3, #16
 800c86a:	2b10      	cmp	r3, #16
 800c86c:	d122      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f003 0310 	and.w	r3, r3, #16
 800c878:	2b10      	cmp	r3, #16
 800c87a:	d11b      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f06f 0210 	mvn.w	r2, #16
 800c884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2208      	movs	r2, #8
 800c88a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f936 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c8a0:	e005      	b.n	800c8ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f929 	bl	800cafa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f938 	bl	800cb1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d10e      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d107      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f06f 0201 	mvn.w	r2, #1
 800c8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fc fd34 	bl	8009348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8ea:	2b80      	cmp	r3, #128	@ 0x80
 800c8ec:	d10e      	bne.n	800c90c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8f8:	2b80      	cmp	r3, #128	@ 0x80
 800c8fa:	d107      	bne.n	800c90c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 faa1 	bl	800ce4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c916:	2b40      	cmp	r3, #64	@ 0x40
 800c918:	d10e      	bne.n	800c938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c924:	2b40      	cmp	r3, #64	@ 0x40
 800c926:	d107      	bne.n	800c938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f8fc 	bl	800cb30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	f003 0320 	and.w	r3, r3, #32
 800c942:	2b20      	cmp	r3, #32
 800c944:	d10e      	bne.n	800c964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	f003 0320 	and.w	r3, r3, #32
 800c950:	2b20      	cmp	r3, #32
 800c952:	d107      	bne.n	800c964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f06f 0220 	mvn.w	r2, #32
 800c95c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fa6c 	bl	800ce3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c980:	2b01      	cmp	r3, #1
 800c982:	d101      	bne.n	800c988 <HAL_TIM_ConfigClockSource+0x1c>
 800c984:	2302      	movs	r3, #2
 800c986:	e0b4      	b.n	800caf2 <HAL_TIM_ConfigClockSource+0x186>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c9a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9c0:	d03e      	beq.n	800ca40 <HAL_TIM_ConfigClockSource+0xd4>
 800c9c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9c6:	f200 8087 	bhi.w	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ce:	f000 8086 	beq.w	800cade <HAL_TIM_ConfigClockSource+0x172>
 800c9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9d6:	d87f      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9d8:	2b70      	cmp	r3, #112	@ 0x70
 800c9da:	d01a      	beq.n	800ca12 <HAL_TIM_ConfigClockSource+0xa6>
 800c9dc:	2b70      	cmp	r3, #112	@ 0x70
 800c9de:	d87b      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e0:	2b60      	cmp	r3, #96	@ 0x60
 800c9e2:	d050      	beq.n	800ca86 <HAL_TIM_ConfigClockSource+0x11a>
 800c9e4:	2b60      	cmp	r3, #96	@ 0x60
 800c9e6:	d877      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e8:	2b50      	cmp	r3, #80	@ 0x50
 800c9ea:	d03c      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0xfa>
 800c9ec:	2b50      	cmp	r3, #80	@ 0x50
 800c9ee:	d873      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9f0:	2b40      	cmp	r3, #64	@ 0x40
 800c9f2:	d058      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x13a>
 800c9f4:	2b40      	cmp	r3, #64	@ 0x40
 800c9f6:	d86f      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9f8:	2b30      	cmp	r3, #48	@ 0x30
 800c9fa:	d064      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9fc:	2b30      	cmp	r3, #48	@ 0x30
 800c9fe:	d86b      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800ca00:	2b20      	cmp	r3, #32
 800ca02:	d060      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca04:	2b20      	cmp	r3, #32
 800ca06:	d867      	bhi.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d05c      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca0c:	2b10      	cmp	r3, #16
 800ca0e:	d05a      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca10:	e062      	b.n	800cad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca22:	f000 f980 	bl	800cd26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	609a      	str	r2, [r3, #8]
      break;
 800ca3e:	e04f      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca50:	f000 f969 	bl	800cd26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689a      	ldr	r2, [r3, #8]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca62:	609a      	str	r2, [r3, #8]
      break;
 800ca64:	e03c      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca72:	461a      	mov	r2, r3
 800ca74:	f000 f8e0 	bl	800cc38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2150      	movs	r1, #80	@ 0x50
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f937 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800ca84:	e02c      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca92:	461a      	mov	r2, r3
 800ca94:	f000 f8fe 	bl	800cc94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2160      	movs	r1, #96	@ 0x60
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 f927 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800caa4:	e01c      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cab2:	461a      	mov	r2, r3
 800cab4:	f000 f8c0 	bl	800cc38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2140      	movs	r1, #64	@ 0x40
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f917 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cac4:	e00c      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4619      	mov	r1, r3
 800cad0:	4610      	mov	r0, r2
 800cad2:	f000 f90e 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cad6:	e003      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
      break;
 800cadc:	e000      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cafa:	b480      	push	{r7}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb02:	bf00      	nop
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bc80      	pop	{r7}
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bc80      	pop	{r7}
 800cb1c:	4770      	bx	lr

0800cb1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bc80      	pop	{r7}
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc80      	pop	{r7}
 800cb40:	4770      	bx	lr
	...

0800cb44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a33      	ldr	r2, [pc, #204]	@ (800cc24 <TIM_Base_SetConfig+0xe0>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d013      	beq.n	800cb84 <TIM_Base_SetConfig+0x40>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a32      	ldr	r2, [pc, #200]	@ (800cc28 <TIM_Base_SetConfig+0xe4>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d00f      	beq.n	800cb84 <TIM_Base_SetConfig+0x40>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb6a:	d00b      	beq.n	800cb84 <TIM_Base_SetConfig+0x40>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a2f      	ldr	r2, [pc, #188]	@ (800cc2c <TIM_Base_SetConfig+0xe8>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d007      	beq.n	800cb84 <TIM_Base_SetConfig+0x40>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a2e      	ldr	r2, [pc, #184]	@ (800cc30 <TIM_Base_SetConfig+0xec>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d003      	beq.n	800cb84 <TIM_Base_SetConfig+0x40>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a2d      	ldr	r2, [pc, #180]	@ (800cc34 <TIM_Base_SetConfig+0xf0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d108      	bne.n	800cb96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a22      	ldr	r2, [pc, #136]	@ (800cc24 <TIM_Base_SetConfig+0xe0>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d013      	beq.n	800cbc6 <TIM_Base_SetConfig+0x82>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a21      	ldr	r2, [pc, #132]	@ (800cc28 <TIM_Base_SetConfig+0xe4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d00f      	beq.n	800cbc6 <TIM_Base_SetConfig+0x82>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbac:	d00b      	beq.n	800cbc6 <TIM_Base_SetConfig+0x82>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a1e      	ldr	r2, [pc, #120]	@ (800cc2c <TIM_Base_SetConfig+0xe8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d007      	beq.n	800cbc6 <TIM_Base_SetConfig+0x82>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc30 <TIM_Base_SetConfig+0xec>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d003      	beq.n	800cbc6 <TIM_Base_SetConfig+0x82>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a1c      	ldr	r2, [pc, #112]	@ (800cc34 <TIM_Base_SetConfig+0xf0>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d108      	bne.n	800cbd8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a09      	ldr	r2, [pc, #36]	@ (800cc24 <TIM_Base_SetConfig+0xe0>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d003      	beq.n	800cc0c <TIM_Base_SetConfig+0xc8>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a08      	ldr	r2, [pc, #32]	@ (800cc28 <TIM_Base_SetConfig+0xe4>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d103      	bne.n	800cc14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	691a      	ldr	r2, [r3, #16]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	615a      	str	r2, [r3, #20]
}
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr
 800cc24:	40012c00 	.word	0x40012c00
 800cc28:	40013400 	.word	0x40013400
 800cc2c:	40000400 	.word	0x40000400
 800cc30:	40000800 	.word	0x40000800
 800cc34:	40000c00 	.word	0x40000c00

0800cc38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	f023 0201 	bic.w	r2, r3, #1
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	011b      	lsls	r3, r3, #4
 800cc68:	693a      	ldr	r2, [r7, #16]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f023 030a 	bic.w	r3, r3, #10
 800cc74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	621a      	str	r2, [r3, #32]
}
 800cc8a:	bf00      	nop
 800cc8c:	371c      	adds	r7, #28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bc80      	pop	{r7}
 800cc92:	4770      	bx	lr

0800cc94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	f023 0210 	bic.w	r2, r3, #16
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ccbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	031b      	lsls	r3, r3, #12
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ccd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	011b      	lsls	r3, r3, #4
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	621a      	str	r2, [r3, #32]
}
 800cce8:	bf00      	nop
 800ccea:	371c      	adds	r7, #28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bc80      	pop	{r7}
 800ccf0:	4770      	bx	lr

0800ccf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	f043 0307 	orr.w	r3, r3, #7
 800cd14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	609a      	str	r2, [r3, #8]
}
 800cd1c:	bf00      	nop
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bc80      	pop	{r7}
 800cd24:	4770      	bx	lr

0800cd26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
 800cd32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	021a      	lsls	r2, r3, #8
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	609a      	str	r2, [r3, #8]
}
 800cd5a:	bf00      	nop
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bc80      	pop	{r7}
 800cd62:	4770      	bx	lr

0800cd64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d101      	bne.n	800cd7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e050      	b.n	800ce1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cda2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a1b      	ldr	r2, [pc, #108]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d018      	beq.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a19      	ldr	r2, [pc, #100]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d013      	beq.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdd2:	d00e      	beq.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a15      	ldr	r2, [pc, #84]	@ (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d009      	beq.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a14      	ldr	r2, [pc, #80]	@ (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d004      	beq.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a12      	ldr	r2, [pc, #72]	@ (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d10c      	bne.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bc80      	pop	{r7}
 800ce26:	4770      	bx	lr
 800ce28:	40012c00 	.word	0x40012c00
 800ce2c:	40013400 	.word	0x40013400
 800ce30:	40000400 	.word	0x40000400
 800ce34:	40000800 	.word	0x40000800
 800ce38:	40000c00 	.word	0x40000c00

0800ce3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bc80      	pop	{r7}
 800ce4c:	4770      	bx	lr

0800ce4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b083      	sub	sp, #12
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bc80      	pop	{r7}
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e042      	b.n	800cef8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7fc fe0a 	bl	8009aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2224      	movs	r2, #36	@ 0x24
 800ce90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68da      	ldr	r2, [r3, #12]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f001 f801 	bl	800deac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	695a      	ldr	r2, [r3, #20]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68da      	ldr	r2, [r3, #12]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ced8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2220      	movs	r2, #32
 800cee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2220      	movs	r2, #32
 800ceec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08a      	sub	sp, #40	@ 0x28
 800cf04:	af02      	add	r7, sp, #8
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	603b      	str	r3, [r7, #0]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b20      	cmp	r3, #32
 800cf1e:	d16d      	bne.n	800cffc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <HAL_UART_Transmit+0x2c>
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e066      	b.n	800cffe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2221      	movs	r2, #33	@ 0x21
 800cf3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf3e:	f7fc fefd 	bl	8009d3c <HAL_GetTick>
 800cf42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	88fa      	ldrh	r2, [r7, #6]
 800cf48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	88fa      	ldrh	r2, [r7, #6]
 800cf4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf58:	d108      	bne.n	800cf6c <HAL_UART_Transmit+0x6c>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d104      	bne.n	800cf6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	61bb      	str	r3, [r7, #24]
 800cf6a:	e003      	b.n	800cf74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf74:	e02a      	b.n	800cfcc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2180      	movs	r1, #128	@ 0x80
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 fd39 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e036      	b.n	800cffe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10b      	bne.n	800cfae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	3302      	adds	r3, #2
 800cfaa:	61bb      	str	r3, [r7, #24]
 800cfac:	e007      	b.n	800cfbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	781a      	ldrb	r2, [r3, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1cf      	bne.n	800cf76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2140      	movs	r1, #64	@ 0x40
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 fd09 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e006      	b.n	800cffe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	e000      	b.n	800cffe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cffc:	2302      	movs	r3, #2
  }
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b08a      	sub	sp, #40	@ 0x28
 800d00a:	af02      	add	r7, sp, #8
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	603b      	str	r3, [r7, #0]
 800d012:	4613      	mov	r3, r2
 800d014:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b20      	cmp	r3, #32
 800d024:	d17c      	bne.n	800d120 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <HAL_UART_Receive+0x2c>
 800d02c:	88fb      	ldrh	r3, [r7, #6]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e075      	b.n	800d122 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2222      	movs	r2, #34	@ 0x22
 800d040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d04a:	f7fc fe77 	bl	8009d3c <HAL_GetTick>
 800d04e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	88fa      	ldrh	r2, [r7, #6]
 800d054:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	88fa      	ldrh	r2, [r7, #6]
 800d05a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d064:	d108      	bne.n	800d078 <HAL_UART_Receive+0x72>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d104      	bne.n	800d078 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800d06e:	2300      	movs	r3, #0
 800d070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	e003      	b.n	800d080 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d080:	e043      	b.n	800d10a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2200      	movs	r2, #0
 800d08a:	2120      	movs	r1, #32
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 fcb3 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e042      	b.n	800d122 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10c      	bne.n	800d0bc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	3302      	adds	r3, #2
 800d0b8:	61bb      	str	r3, [r7, #24]
 800d0ba:	e01f      	b.n	800d0fc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0c4:	d007      	beq.n	800d0d6 <HAL_UART_Receive+0xd0>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <HAL_UART_Receive+0xde>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e008      	b.n	800d0f6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d100:	b29b      	uxth	r3, r3
 800d102:	3b01      	subs	r3, #1
 800d104:	b29a      	uxth	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d10e:	b29b      	uxth	r3, r3
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1b6      	bne.n	800d082 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2220      	movs	r2, #32
 800d118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	e000      	b.n	800d122 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d120:	2302      	movs	r3, #2
  }
}
 800d122:	4618      	mov	r0, r3
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	4613      	mov	r3, r2
 800d136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b20      	cmp	r3, #32
 800d142:	d121      	bne.n	800d188 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <HAL_UART_Transmit_IT+0x26>
 800d14a:	88fb      	ldrh	r3, [r7, #6]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e01a      	b.n	800d18a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	88fa      	ldrh	r2, [r7, #6]
 800d15e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	88fa      	ldrh	r2, [r7, #6]
 800d164:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2221      	movs	r2, #33	@ 0x21
 800d170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68da      	ldr	r2, [r3, #12]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d182:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	e000      	b.n	800d18a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800d188:	2302      	movs	r3, #2
  }
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	bc80      	pop	{r7}
 800d192:	4770      	bx	lr

0800d194 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2b20      	cmp	r3, #32
 800d1ac:	d112      	bne.n	800d1d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <HAL_UART_Receive_IT+0x26>
 800d1b4:	88fb      	ldrh	r3, [r7, #6]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e00b      	b.n	800d1d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d1c4:	88fb      	ldrh	r3, [r7, #6]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	68b9      	ldr	r1, [r7, #8]
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 fc82 	bl	800dad4 <UART_Start_Receive_IT>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	e000      	b.n	800d1d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d1d4:	2302      	movs	r3, #2
  }
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b09a      	sub	sp, #104	@ 0x68
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	330c      	adds	r3, #12
 800d1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1f0:	e853 3f00 	ldrex	r3, [r3]
 800d1f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	330c      	adds	r3, #12
 800d204:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d206:	657a      	str	r2, [r7, #84]	@ 0x54
 800d208:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d20c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e5      	bne.n	800d1e6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3314      	adds	r3, #20
 800d220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d224:	e853 3f00 	ldrex	r3, [r3]
 800d228:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	f023 0301 	bic.w	r3, r3, #1
 800d230:	663b      	str	r3, [r7, #96]	@ 0x60
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3314      	adds	r3, #20
 800d238:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d23a:	643a      	str	r2, [r7, #64]	@ 0x40
 800d23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d242:	e841 2300 	strex	r3, r2, [r1]
 800d246:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1e5      	bne.n	800d21a <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d252:	2b01      	cmp	r3, #1
 800d254:	d119      	bne.n	800d28a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	330c      	adds	r3, #12
 800d25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	61fb      	str	r3, [r7, #28]
   return(result);
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	f023 0310 	bic.w	r3, r3, #16
 800d26c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	330c      	adds	r3, #12
 800d274:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e5      	bne.n	800d256 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	d036      	beq.n	800d306 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3314      	adds	r3, #20
 800d29e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	e853 3f00 	ldrex	r3, [r3]
 800d2a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3314      	adds	r3, #20
 800d2b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2b8:	61ba      	str	r2, [r7, #24]
 800d2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2bc:	6979      	ldr	r1, [r7, #20]
 800d2be:	69ba      	ldr	r2, [r7, #24]
 800d2c0:	e841 2300 	strex	r3, r2, [r1]
 800d2c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1e5      	bne.n	800d298 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d018      	beq.n	800d306 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d8:	2200      	movs	r2, #0
 800d2da:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fc ff62 	bl	800a1aa <HAL_DMA_Abort>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00c      	beq.n	800d306 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fd f89d 	bl	800a430 <HAL_DMA_GetError>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b20      	cmp	r3, #32
 800d2fa:	d104      	bne.n	800d306 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2210      	movs	r2, #16
 800d300:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800d302:	2303      	movs	r3, #3
 800d304:	e00a      	b.n	800d31c <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2220      	movs	r2, #32
 800d310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3768      	adds	r7, #104	@ 0x68
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b09a      	sub	sp, #104	@ 0x68
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	330c      	adds	r3, #12
 800d332:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d336:	e853 3f00 	ldrex	r3, [r3]
 800d33a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d33e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d342:	667b      	str	r3, [r7, #100]	@ 0x64
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	330c      	adds	r3, #12
 800d34a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d34c:	657a      	str	r2, [r7, #84]	@ 0x54
 800d34e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d352:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d35a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e5      	bne.n	800d32c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3314      	adds	r3, #20
 800d366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d36a:	e853 3f00 	ldrex	r3, [r3]
 800d36e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	663b      	str	r3, [r7, #96]	@ 0x60
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3314      	adds	r3, #20
 800d37e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d380:	643a      	str	r2, [r7, #64]	@ 0x40
 800d382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e5      	bne.n	800d360 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d119      	bne.n	800d3d0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	330c      	adds	r3, #12
 800d3a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	e853 3f00 	ldrex	r3, [r3]
 800d3aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	f023 0310 	bic.w	r3, r3, #16
 800d3b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d3bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e5      	bne.n	800d39c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d03f      	beq.n	800d45e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3314      	adds	r3, #20
 800d3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	3314      	adds	r3, #20
 800d3fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3fe:	61ba      	str	r2, [r7, #24]
 800d400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d402:	6979      	ldr	r1, [r7, #20]
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	e841 2300 	strex	r3, r2, [r1]
 800d40a:	613b      	str	r3, [r7, #16]
   return(result);
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1e5      	bne.n	800d3de <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d013      	beq.n	800d442 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d41e:	4a19      	ldr	r2, [pc, #100]	@ (800d484 <HAL_UART_AbortReceive_IT+0x160>)
 800d420:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d426:	4618      	mov	r0, r3
 800d428:	f7fc fefa 	bl	800a220 <HAL_DMA_Abort_IT>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d022      	beq.n	800d478 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	e01a      	b.n	800d478 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2220      	movs	r2, #32
 800d44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 faba 	bl	800d9d0 <HAL_UART_AbortReceiveCpltCallback>
 800d45c:	e00c      	b.n	800d478 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2220      	movs	r2, #32
 800d468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 faac 	bl	800d9d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3768      	adds	r7, #104	@ 0x68
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	0800dc33 	.word	0x0800dc33

0800d488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b0ba      	sub	sp, #232	@ 0xe8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d4c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10f      	bne.n	800d4ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d009      	beq.n	800d4ee <HAL_UART_IRQHandler+0x66>
 800d4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fc22 	bl	800dd30 <UART_Receive_IT>
      return;
 800d4ec:	e25b      	b.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d4ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 80de 	beq.w	800d6b4 <HAL_UART_IRQHandler+0x22c>
 800d4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d508:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 80d1 	beq.w	800d6b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <HAL_UART_IRQHandler+0xae>
 800d51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d52e:	f043 0201 	orr.w	r2, r3, #1
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d53a:	f003 0304 	and.w	r3, r3, #4
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <HAL_UART_IRQHandler+0xd2>
 800d542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d005      	beq.n	800d55a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d552:	f043 0202 	orr.w	r2, r3, #2
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d55e:	f003 0302 	and.w	r3, r3, #2
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00b      	beq.n	800d57e <HAL_UART_IRQHandler+0xf6>
 800d566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d005      	beq.n	800d57e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d576:	f043 0204 	orr.w	r2, r3, #4
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d582:	f003 0308 	and.w	r3, r3, #8
 800d586:	2b00      	cmp	r3, #0
 800d588:	d011      	beq.n	800d5ae <HAL_UART_IRQHandler+0x126>
 800d58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d105      	bne.n	800d5a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5a6:	f043 0208 	orr.w	r2, r3, #8
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f000 81f2 	beq.w	800d99c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5bc:	f003 0320 	and.w	r3, r3, #32
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d008      	beq.n	800d5d6 <HAL_UART_IRQHandler+0x14e>
 800d5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5c8:	f003 0320 	and.w	r3, r3, #32
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fbad 	bl	800dd30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bf14      	ite	ne
 800d5e4:	2301      	movne	r3, #1
 800d5e6:	2300      	moveq	r3, #0
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5f2:	f003 0308 	and.w	r3, r3, #8
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <HAL_UART_IRQHandler+0x17a>
 800d5fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d04f      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa9f 	bl	800db46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d612:	2b00      	cmp	r3, #0
 800d614:	d041      	beq.n	800d69a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3314      	adds	r3, #20
 800d61c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d620:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d624:	e853 3f00 	ldrex	r3, [r3]
 800d628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d62c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3314      	adds	r3, #20
 800d63e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d642:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d64e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d65a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1d9      	bne.n	800d616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d013      	beq.n	800d692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66e:	4a7e      	ldr	r2, [pc, #504]	@ (800d868 <HAL_UART_IRQHandler+0x3e0>)
 800d670:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d676:	4618      	mov	r0, r3
 800d678:	f7fc fdd2 	bl	800a220 <HAL_DMA_Abort_IT>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d016      	beq.n	800d6b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d68c:	4610      	mov	r0, r2
 800d68e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d690:	e00e      	b.n	800d6b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f993 	bl	800d9be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d698:	e00a      	b.n	800d6b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f98f 	bl	800d9be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6a0:	e006      	b.n	800d6b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f98b 	bl	800d9be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d6ae:	e175      	b.n	800d99c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b0:	bf00      	nop
    return;
 800d6b2:	e173      	b.n	800d99c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	f040 814f 	bne.w	800d95c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c2:	f003 0310 	and.w	r3, r3, #16
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 8148 	beq.w	800d95c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8141 	beq.w	800d95c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60bb      	str	r3, [r7, #8]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	60bb      	str	r3, [r7, #8]
 800d6ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 80b6 	beq.w	800d86c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d70c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 8145 	beq.w	800d9a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d71a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d71e:	429a      	cmp	r2, r3
 800d720:	f080 813e 	bcs.w	800d9a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d72a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	2b20      	cmp	r3, #32
 800d734:	f000 8088 	beq.w	800d848 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	330c      	adds	r3, #12
 800d73e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d746:	e853 3f00 	ldrex	r3, [r3]
 800d74a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d74e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d752:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d756:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	330c      	adds	r3, #12
 800d760:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d764:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d768:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d770:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d774:	e841 2300 	strex	r3, r2, [r1]
 800d778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d77c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1d9      	bne.n	800d738 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3314      	adds	r3, #20
 800d78a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d78e:	e853 3f00 	ldrex	r3, [r3]
 800d792:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d794:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d796:	f023 0301 	bic.w	r3, r3, #1
 800d79a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3314      	adds	r3, #20
 800d7a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d7a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d7ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d7b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d7b4:	e841 2300 	strex	r3, r2, [r1]
 800d7b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d7ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e1      	bne.n	800d784 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3314      	adds	r3, #20
 800d7c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d7d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3314      	adds	r3, #20
 800d7e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e3      	bne.n	800d7c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	330c      	adds	r3, #12
 800d80c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d818:	f023 0310 	bic.w	r3, r3, #16
 800d81c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	330c      	adds	r3, #12
 800d826:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d82a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d82c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e3      	bne.n	800d806 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d842:	4618      	mov	r0, r3
 800d844:	f7fc fcb1 	bl	800a1aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2202      	movs	r2, #2
 800d84c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d856:	b29b      	uxth	r3, r3
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f8bf 	bl	800d9e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d864:	e09c      	b.n	800d9a0 <HAL_UART_IRQHandler+0x518>
 800d866:	bf00      	nop
 800d868:	0800dc0b 	.word	0x0800dc0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d874:	b29b      	uxth	r3, r3
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d880:	b29b      	uxth	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 808e 	beq.w	800d9a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 8089 	beq.w	800d9a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	330c      	adds	r3, #12
 800d898:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89c:	e853 3f00 	ldrex	r3, [r3]
 800d8a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	330c      	adds	r3, #12
 800d8b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d8b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d8b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8be:	e841 2300 	strex	r3, r2, [r1]
 800d8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1e3      	bne.n	800d892 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3314      	adds	r3, #20
 800d8d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
 800d8d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f023 0301 	bic.w	r3, r3, #1
 800d8e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e3      	bne.n	800d8ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	330c      	adds	r3, #12
 800d916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	e853 3f00 	ldrex	r3, [r3]
 800d91e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f023 0310 	bic.w	r3, r3, #16
 800d926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	330c      	adds	r3, #12
 800d930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d934:	61fa      	str	r2, [r7, #28]
 800d936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	69b9      	ldr	r1, [r7, #24]
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	617b      	str	r3, [r7, #20]
   return(result);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e3      	bne.n	800d910 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2202      	movs	r2, #2
 800d94c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d94e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f844 	bl	800d9e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d95a:	e023      	b.n	800d9a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <HAL_UART_IRQHandler+0x4f4>
 800d968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d96c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d970:	2b00      	cmp	r3, #0
 800d972:	d003      	beq.n	800d97c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f974 	bl	800dc62 <UART_Transmit_IT>
    return;
 800d97a:	e014      	b.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00e      	beq.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
 800d988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d98c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d990:	2b00      	cmp	r3, #0
 800d992:	d008      	beq.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f9b3 	bl	800dd00 <UART_EndTransmit_IT>
    return;
 800d99a:	e004      	b.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800d99c:	bf00      	nop
 800d99e:	e002      	b.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800d9a0:	bf00      	nop
 800d9a2:	e000      	b.n	800d9a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800d9a4:	bf00      	nop
  }
}
 800d9a6:	37e8      	adds	r7, #232	@ 0xe8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bc80      	pop	{r7}
 800d9bc:	4770      	bx	lr

0800d9be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b083      	sub	sp, #12
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d9c6:	bf00      	nop
 800d9c8:	370c      	adds	r7, #12
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bc80      	pop	{r7}
 800d9ce:	4770      	bx	lr

0800d9d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d9d8:	bf00      	nop
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bc80      	pop	{r7}
 800d9e0:	4770      	bx	lr

0800d9e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b083      	sub	sp, #12
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9ee:	bf00      	nop
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bc80      	pop	{r7}
 800d9f6:	4770      	bx	lr

0800d9f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b090      	sub	sp, #64	@ 0x40
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	4613      	mov	r3, r2
 800da06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da08:	e050      	b.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da10:	d04c      	beq.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800da12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <UART_WaitOnFlagUntilTimeout+0x30>
 800da18:	f7fc f990 	bl	8009d3c <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da24:	429a      	cmp	r2, r3
 800da26:	d241      	bcs.n	800daac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	330c      	adds	r3, #12
 800da2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	330c      	adds	r3, #12
 800da46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da48:	637a      	str	r2, [r7, #52]	@ 0x34
 800da4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800da56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3314      	adds	r3, #20
 800da62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	e853 3f00 	ldrex	r3, [r3]
 800da6a:	613b      	str	r3, [r7, #16]
   return(result);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f023 0301 	bic.w	r3, r3, #1
 800da72:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3314      	adds	r3, #20
 800da7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da7c:	623a      	str	r2, [r7, #32]
 800da7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da80:	69f9      	ldr	r1, [r7, #28]
 800da82:	6a3a      	ldr	r2, [r7, #32]
 800da84:	e841 2300 	strex	r3, r2, [r1]
 800da88:	61bb      	str	r3, [r7, #24]
   return(result);
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1e5      	bne.n	800da5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2220      	movs	r2, #32
 800da94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2220      	movs	r2, #32
 800da9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800daa8:	2303      	movs	r3, #3
 800daaa:	e00f      	b.n	800dacc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	4013      	ands	r3, r2
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	bf0c      	ite	eq
 800dabc:	2301      	moveq	r3, #1
 800dabe:	2300      	movne	r3, #0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	461a      	mov	r2, r3
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d09f      	beq.n	800da0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3740      	adds	r7, #64	@ 0x40
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	88fa      	ldrh	r2, [r7, #6]
 800daec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	88fa      	ldrh	r2, [r7, #6]
 800daf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2222      	movs	r2, #34	@ 0x22
 800dafe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d007      	beq.n	800db1a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	695a      	ldr	r2, [r3, #20]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f042 0201 	orr.w	r2, r2, #1
 800db28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f042 0220 	orr.w	r2, r2, #32
 800db38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	bc80      	pop	{r7}
 800db44:	4770      	bx	lr

0800db46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db46:	b480      	push	{r7}
 800db48:	b095      	sub	sp, #84	@ 0x54
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	330c      	adds	r3, #12
 800db54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db58:	e853 3f00 	ldrex	r3, [r3]
 800db5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	330c      	adds	r3, #12
 800db6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db6e:	643a      	str	r2, [r7, #64]	@ 0x40
 800db70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db76:	e841 2300 	strex	r3, r2, [r1]
 800db7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e5      	bne.n	800db4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3314      	adds	r3, #20
 800db88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8a:	6a3b      	ldr	r3, [r7, #32]
 800db8c:	e853 3f00 	ldrex	r3, [r3]
 800db90:	61fb      	str	r3, [r7, #28]
   return(result);
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	f023 0301 	bic.w	r3, r3, #1
 800db98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3314      	adds	r3, #20
 800dba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbaa:	e841 2300 	strex	r3, r2, [r1]
 800dbae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1e5      	bne.n	800db82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d119      	bne.n	800dbf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	330c      	adds	r3, #12
 800dbc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	e853 3f00 	ldrex	r3, [r3]
 800dbcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	f023 0310 	bic.w	r3, r3, #16
 800dbd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	330c      	adds	r3, #12
 800dbdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbde:	61ba      	str	r2, [r7, #24]
 800dbe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe2:	6979      	ldr	r1, [r7, #20]
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	e841 2300 	strex	r3, r2, [r1]
 800dbea:	613b      	str	r3, [r7, #16]
   return(result);
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e5      	bne.n	800dbbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2220      	movs	r2, #32
 800dbf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dc00:	bf00      	nop
 800dc02:	3754      	adds	r7, #84	@ 0x54
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bc80      	pop	{r7}
 800dc08:	4770      	bx	lr

0800dc0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff feca 	bl	800d9be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc3e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2220      	movs	r2, #32
 800dc4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7ff febb 	bl	800d9d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc5a:	bf00      	nop
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b085      	sub	sp, #20
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b21      	cmp	r3, #33	@ 0x21
 800dc74:	d13e      	bne.n	800dcf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc7e:	d114      	bne.n	800dcaa <UART_Transmit_IT+0x48>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d110      	bne.n	800dcaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	461a      	mov	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	1c9a      	adds	r2, r3, #2
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	621a      	str	r2, [r3, #32]
 800dca8:	e008      	b.n	800dcbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	1c59      	adds	r1, r3, #1
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	6211      	str	r1, [r2, #32]
 800dcb4:	781a      	ldrb	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10f      	bne.n	800dcf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68da      	ldr	r2, [r3, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dcde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68da      	ldr	r2, [r3, #12]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dcee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	e000      	b.n	800dcf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dcf4:	2302      	movs	r3, #2
  }
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bc80      	pop	{r7}
 800dcfe:	4770      	bx	lr

0800dd00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68da      	ldr	r2, [r3, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2220      	movs	r2, #32
 800dd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fe43 	bl	800d9ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08c      	sub	sp, #48	@ 0x30
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b22      	cmp	r3, #34	@ 0x22
 800dd42:	f040 80ae 	bne.w	800dea2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd4e:	d117      	bne.n	800dd80 <UART_Receive_IT+0x50>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d113      	bne.n	800dd80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd78:	1c9a      	adds	r2, r3, #2
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	629a      	str	r2, [r3, #40]	@ 0x28
 800dd7e:	e026      	b.n	800ddce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dd86:	2300      	movs	r3, #0
 800dd88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd92:	d007      	beq.n	800dda4 <UART_Receive_IT+0x74>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10a      	bne.n	800ddb2 <UART_Receive_IT+0x82>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e008      	b.n	800ddc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	4619      	mov	r1, r3
 800dddc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d15d      	bne.n	800de9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68da      	ldr	r2, [r3, #12]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f022 0220 	bic.w	r2, r2, #32
 800ddf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800de00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	695a      	ldr	r2, [r3, #20]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f022 0201 	bic.w	r2, r2, #1
 800de10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2220      	movs	r2, #32
 800de16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de24:	2b01      	cmp	r3, #1
 800de26:	d135      	bne.n	800de94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	330c      	adds	r3, #12
 800de34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	e853 3f00 	ldrex	r3, [r3]
 800de3c:	613b      	str	r3, [r7, #16]
   return(result);
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f023 0310 	bic.w	r3, r3, #16
 800de44:	627b      	str	r3, [r7, #36]	@ 0x24
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	330c      	adds	r3, #12
 800de4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de4e:	623a      	str	r2, [r7, #32]
 800de50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de52:	69f9      	ldr	r1, [r7, #28]
 800de54:	6a3a      	ldr	r2, [r7, #32]
 800de56:	e841 2300 	strex	r3, r2, [r1]
 800de5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1e5      	bne.n	800de2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d10a      	bne.n	800de86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800de70:	2300      	movs	r3, #0
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fda8 	bl	800d9e2 <HAL_UARTEx_RxEventCallback>
 800de92:	e002      	b.n	800de9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7fb fa67 	bl	8009368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e002      	b.n	800dea4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800de9e:	2300      	movs	r3, #0
 800dea0:	e000      	b.n	800dea4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800dea2:	2302      	movs	r3, #2
  }
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3730      	adds	r7, #48	@ 0x30
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	689a      	ldr	r2, [r3, #8]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	431a      	orrs	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800dee6:	f023 030c 	bic.w	r3, r3, #12
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	430b      	orrs	r3, r1
 800def2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	430a      	orrs	r2, r1
 800df08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a2c      	ldr	r2, [pc, #176]	@ (800dfc0 <UART_SetConfig+0x114>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d103      	bne.n	800df1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800df14:	f7fe fb40 	bl	800c598 <HAL_RCC_GetPCLK2Freq>
 800df18:	60f8      	str	r0, [r7, #12]
 800df1a:	e002      	b.n	800df22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800df1c:	f7fe fb28 	bl	800c570 <HAL_RCC_GetPCLK1Freq>
 800df20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	009a      	lsls	r2, r3, #2
 800df2c:	441a      	add	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	fbb2 f3f3 	udiv	r3, r2, r3
 800df38:	4a22      	ldr	r2, [pc, #136]	@ (800dfc4 <UART_SetConfig+0x118>)
 800df3a:	fba2 2303 	umull	r2, r3, r2, r3
 800df3e:	095b      	lsrs	r3, r3, #5
 800df40:	0119      	lsls	r1, r3, #4
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	4613      	mov	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	009a      	lsls	r2, r3, #2
 800df4c:	441a      	add	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	fbb2 f2f3 	udiv	r2, r2, r3
 800df58:	4b1a      	ldr	r3, [pc, #104]	@ (800dfc4 <UART_SetConfig+0x118>)
 800df5a:	fba3 0302 	umull	r0, r3, r3, r2
 800df5e:	095b      	lsrs	r3, r3, #5
 800df60:	2064      	movs	r0, #100	@ 0x64
 800df62:	fb00 f303 	mul.w	r3, r0, r3
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	3332      	adds	r3, #50	@ 0x32
 800df6c:	4a15      	ldr	r2, [pc, #84]	@ (800dfc4 <UART_SetConfig+0x118>)
 800df6e:	fba2 2303 	umull	r2, r3, r2, r3
 800df72:	095b      	lsrs	r3, r3, #5
 800df74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df78:	4419      	add	r1, r3
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	4613      	mov	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	009a      	lsls	r2, r3, #2
 800df84:	441a      	add	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df90:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <UART_SetConfig+0x118>)
 800df92:	fba3 0302 	umull	r0, r3, r3, r2
 800df96:	095b      	lsrs	r3, r3, #5
 800df98:	2064      	movs	r0, #100	@ 0x64
 800df9a:	fb00 f303 	mul.w	r3, r0, r3
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	3332      	adds	r3, #50	@ 0x32
 800dfa4:	4a07      	ldr	r2, [pc, #28]	@ (800dfc4 <UART_SetConfig+0x118>)
 800dfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfaa:	095b      	lsrs	r3, r3, #5
 800dfac:	f003 020f 	and.w	r2, r3, #15
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	440a      	add	r2, r1
 800dfb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dfb8:	bf00      	nop
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	40013800 	.word	0x40013800
 800dfc4:	51eb851f 	.word	0x51eb851f

0800dfc8 <__itoa>:
 800dfc8:	1e93      	subs	r3, r2, #2
 800dfca:	2b22      	cmp	r3, #34	@ 0x22
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	460c      	mov	r4, r1
 800dfd0:	d904      	bls.n	800dfdc <__itoa+0x14>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	461c      	mov	r4, r3
 800dfd6:	700b      	strb	r3, [r1, #0]
 800dfd8:	4620      	mov	r0, r4
 800dfda:	bd10      	pop	{r4, pc}
 800dfdc:	2a0a      	cmp	r2, #10
 800dfde:	d109      	bne.n	800dff4 <__itoa+0x2c>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	da07      	bge.n	800dff4 <__itoa+0x2c>
 800dfe4:	232d      	movs	r3, #45	@ 0x2d
 800dfe6:	700b      	strb	r3, [r1, #0]
 800dfe8:	2101      	movs	r1, #1
 800dfea:	4240      	negs	r0, r0
 800dfec:	4421      	add	r1, r4
 800dfee:	f000 f8db 	bl	800e1a8 <__utoa>
 800dff2:	e7f1      	b.n	800dfd8 <__itoa+0x10>
 800dff4:	2100      	movs	r1, #0
 800dff6:	e7f9      	b.n	800dfec <__itoa+0x24>

0800dff8 <itoa>:
 800dff8:	f7ff bfe6 	b.w	800dfc8 <__itoa>

0800dffc <malloc>:
 800dffc:	4b02      	ldr	r3, [pc, #8]	@ (800e008 <malloc+0xc>)
 800dffe:	4601      	mov	r1, r0
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	f000 b825 	b.w	800e050 <_malloc_r>
 800e006:	bf00      	nop
 800e008:	20000f80 	.word	0x20000f80

0800e00c <sbrk_aligned>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	4e0f      	ldr	r6, [pc, #60]	@ (800e04c <sbrk_aligned+0x40>)
 800e010:	460c      	mov	r4, r1
 800e012:	6831      	ldr	r1, [r6, #0]
 800e014:	4605      	mov	r5, r0
 800e016:	b911      	cbnz	r1, 800e01e <sbrk_aligned+0x12>
 800e018:	f000 f948 	bl	800e2ac <_sbrk_r>
 800e01c:	6030      	str	r0, [r6, #0]
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f000 f943 	bl	800e2ac <_sbrk_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d103      	bne.n	800e032 <sbrk_aligned+0x26>
 800e02a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e02e:	4620      	mov	r0, r4
 800e030:	bd70      	pop	{r4, r5, r6, pc}
 800e032:	1cc4      	adds	r4, r0, #3
 800e034:	f024 0403 	bic.w	r4, r4, #3
 800e038:	42a0      	cmp	r0, r4
 800e03a:	d0f8      	beq.n	800e02e <sbrk_aligned+0x22>
 800e03c:	1a21      	subs	r1, r4, r0
 800e03e:	4628      	mov	r0, r5
 800e040:	f000 f934 	bl	800e2ac <_sbrk_r>
 800e044:	3001      	adds	r0, #1
 800e046:	d1f2      	bne.n	800e02e <sbrk_aligned+0x22>
 800e048:	e7ef      	b.n	800e02a <sbrk_aligned+0x1e>
 800e04a:	bf00      	nop
 800e04c:	2000202c 	.word	0x2000202c

0800e050 <_malloc_r>:
 800e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e054:	1ccd      	adds	r5, r1, #3
 800e056:	f025 0503 	bic.w	r5, r5, #3
 800e05a:	3508      	adds	r5, #8
 800e05c:	2d0c      	cmp	r5, #12
 800e05e:	bf38      	it	cc
 800e060:	250c      	movcc	r5, #12
 800e062:	2d00      	cmp	r5, #0
 800e064:	4606      	mov	r6, r0
 800e066:	db01      	blt.n	800e06c <_malloc_r+0x1c>
 800e068:	42a9      	cmp	r1, r5
 800e06a:	d904      	bls.n	800e076 <_malloc_r+0x26>
 800e06c:	230c      	movs	r3, #12
 800e06e:	6033      	str	r3, [r6, #0]
 800e070:	2000      	movs	r0, #0
 800e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e14c <_malloc_r+0xfc>
 800e07a:	f000 f869 	bl	800e150 <__malloc_lock>
 800e07e:	f8d8 3000 	ldr.w	r3, [r8]
 800e082:	461c      	mov	r4, r3
 800e084:	bb44      	cbnz	r4, 800e0d8 <_malloc_r+0x88>
 800e086:	4629      	mov	r1, r5
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff ffbf 	bl	800e00c <sbrk_aligned>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	4604      	mov	r4, r0
 800e092:	d158      	bne.n	800e146 <_malloc_r+0xf6>
 800e094:	f8d8 4000 	ldr.w	r4, [r8]
 800e098:	4627      	mov	r7, r4
 800e09a:	2f00      	cmp	r7, #0
 800e09c:	d143      	bne.n	800e126 <_malloc_r+0xd6>
 800e09e:	2c00      	cmp	r4, #0
 800e0a0:	d04b      	beq.n	800e13a <_malloc_r+0xea>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	eb04 0903 	add.w	r9, r4, r3
 800e0ac:	f000 f8fe 	bl	800e2ac <_sbrk_r>
 800e0b0:	4581      	cmp	r9, r0
 800e0b2:	d142      	bne.n	800e13a <_malloc_r+0xea>
 800e0b4:	6821      	ldr	r1, [r4, #0]
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	1a6d      	subs	r5, r5, r1
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	f7ff ffa6 	bl	800e00c <sbrk_aligned>
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	d03a      	beq.n	800e13a <_malloc_r+0xea>
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	442b      	add	r3, r5
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	bb62      	cbnz	r2, 800e12c <_malloc_r+0xdc>
 800e0d2:	f8c8 7000 	str.w	r7, [r8]
 800e0d6:	e00f      	b.n	800e0f8 <_malloc_r+0xa8>
 800e0d8:	6822      	ldr	r2, [r4, #0]
 800e0da:	1b52      	subs	r2, r2, r5
 800e0dc:	d420      	bmi.n	800e120 <_malloc_r+0xd0>
 800e0de:	2a0b      	cmp	r2, #11
 800e0e0:	d917      	bls.n	800e112 <_malloc_r+0xc2>
 800e0e2:	1961      	adds	r1, r4, r5
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	6025      	str	r5, [r4, #0]
 800e0e8:	bf18      	it	ne
 800e0ea:	6059      	strne	r1, [r3, #4]
 800e0ec:	6863      	ldr	r3, [r4, #4]
 800e0ee:	bf08      	it	eq
 800e0f0:	f8c8 1000 	streq.w	r1, [r8]
 800e0f4:	5162      	str	r2, [r4, r5]
 800e0f6:	604b      	str	r3, [r1, #4]
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 f82f 	bl	800e15c <__malloc_unlock>
 800e0fe:	f104 000b 	add.w	r0, r4, #11
 800e102:	1d23      	adds	r3, r4, #4
 800e104:	f020 0007 	bic.w	r0, r0, #7
 800e108:	1ac2      	subs	r2, r0, r3
 800e10a:	bf1c      	itt	ne
 800e10c:	1a1b      	subne	r3, r3, r0
 800e10e:	50a3      	strne	r3, [r4, r2]
 800e110:	e7af      	b.n	800e072 <_malloc_r+0x22>
 800e112:	6862      	ldr	r2, [r4, #4]
 800e114:	42a3      	cmp	r3, r4
 800e116:	bf0c      	ite	eq
 800e118:	f8c8 2000 	streq.w	r2, [r8]
 800e11c:	605a      	strne	r2, [r3, #4]
 800e11e:	e7eb      	b.n	800e0f8 <_malloc_r+0xa8>
 800e120:	4623      	mov	r3, r4
 800e122:	6864      	ldr	r4, [r4, #4]
 800e124:	e7ae      	b.n	800e084 <_malloc_r+0x34>
 800e126:	463c      	mov	r4, r7
 800e128:	687f      	ldr	r7, [r7, #4]
 800e12a:	e7b6      	b.n	800e09a <_malloc_r+0x4a>
 800e12c:	461a      	mov	r2, r3
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	42a3      	cmp	r3, r4
 800e132:	d1fb      	bne.n	800e12c <_malloc_r+0xdc>
 800e134:	2300      	movs	r3, #0
 800e136:	6053      	str	r3, [r2, #4]
 800e138:	e7de      	b.n	800e0f8 <_malloc_r+0xa8>
 800e13a:	230c      	movs	r3, #12
 800e13c:	4630      	mov	r0, r6
 800e13e:	6033      	str	r3, [r6, #0]
 800e140:	f000 f80c 	bl	800e15c <__malloc_unlock>
 800e144:	e794      	b.n	800e070 <_malloc_r+0x20>
 800e146:	6005      	str	r5, [r0, #0]
 800e148:	e7d6      	b.n	800e0f8 <_malloc_r+0xa8>
 800e14a:	bf00      	nop
 800e14c:	20002030 	.word	0x20002030

0800e150 <__malloc_lock>:
 800e150:	4801      	ldr	r0, [pc, #4]	@ (800e158 <__malloc_lock+0x8>)
 800e152:	f000 b8e5 	b.w	800e320 <__retarget_lock_acquire_recursive>
 800e156:	bf00      	nop
 800e158:	2000216c 	.word	0x2000216c

0800e15c <__malloc_unlock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	@ (800e164 <__malloc_unlock+0x8>)
 800e15e:	f000 b8e0 	b.w	800e322 <__retarget_lock_release_recursive>
 800e162:	bf00      	nop
 800e164:	2000216c 	.word	0x2000216c

0800e168 <siprintf>:
 800e168:	b40e      	push	{r1, r2, r3}
 800e16a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e16e:	b500      	push	{lr}
 800e170:	b09c      	sub	sp, #112	@ 0x70
 800e172:	ab1d      	add	r3, sp, #116	@ 0x74
 800e174:	9002      	str	r0, [sp, #8]
 800e176:	9006      	str	r0, [sp, #24]
 800e178:	9107      	str	r1, [sp, #28]
 800e17a:	9104      	str	r1, [sp, #16]
 800e17c:	4808      	ldr	r0, [pc, #32]	@ (800e1a0 <siprintf+0x38>)
 800e17e:	4909      	ldr	r1, [pc, #36]	@ (800e1a4 <siprintf+0x3c>)
 800e180:	f853 2b04 	ldr.w	r2, [r3], #4
 800e184:	9105      	str	r1, [sp, #20]
 800e186:	6800      	ldr	r0, [r0, #0]
 800e188:	a902      	add	r1, sp, #8
 800e18a:	9301      	str	r3, [sp, #4]
 800e18c:	f000 f984 	bl	800e498 <_svfiprintf_r>
 800e190:	2200      	movs	r2, #0
 800e192:	9b02      	ldr	r3, [sp, #8]
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	b01c      	add	sp, #112	@ 0x70
 800e198:	f85d eb04 	ldr.w	lr, [sp], #4
 800e19c:	b003      	add	sp, #12
 800e19e:	4770      	bx	lr
 800e1a0:	20000f80 	.word	0x20000f80
 800e1a4:	ffff0208 	.word	0xffff0208

0800e1a8 <__utoa>:
 800e1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1aa:	b08b      	sub	sp, #44	@ 0x2c
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	466e      	mov	r6, sp
 800e1b2:	4c1d      	ldr	r4, [pc, #116]	@ (800e228 <__utoa+0x80>)
 800e1b4:	f104 0c20 	add.w	ip, r4, #32
 800e1b8:	4637      	mov	r7, r6
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	6861      	ldr	r1, [r4, #4]
 800e1be:	3408      	adds	r4, #8
 800e1c0:	c703      	stmia	r7!, {r0, r1}
 800e1c2:	4564      	cmp	r4, ip
 800e1c4:	463e      	mov	r6, r7
 800e1c6:	d1f7      	bne.n	800e1b8 <__utoa+0x10>
 800e1c8:	7921      	ldrb	r1, [r4, #4]
 800e1ca:	6820      	ldr	r0, [r4, #0]
 800e1cc:	7139      	strb	r1, [r7, #4]
 800e1ce:	1e91      	subs	r1, r2, #2
 800e1d0:	2922      	cmp	r1, #34	@ 0x22
 800e1d2:	6038      	str	r0, [r7, #0]
 800e1d4:	f04f 0100 	mov.w	r1, #0
 800e1d8:	d904      	bls.n	800e1e4 <__utoa+0x3c>
 800e1da:	7019      	strb	r1, [r3, #0]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4618      	mov	r0, r3
 800e1e0:	b00b      	add	sp, #44	@ 0x2c
 800e1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1e4:	1e58      	subs	r0, r3, #1
 800e1e6:	4684      	mov	ip, r0
 800e1e8:	fbb5 f7f2 	udiv	r7, r5, r2
 800e1ec:	fb02 5617 	mls	r6, r2, r7, r5
 800e1f0:	3628      	adds	r6, #40	@ 0x28
 800e1f2:	446e      	add	r6, sp
 800e1f4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e1fe:	462e      	mov	r6, r5
 800e200:	42b2      	cmp	r2, r6
 800e202:	463d      	mov	r5, r7
 800e204:	f101 0101 	add.w	r1, r1, #1
 800e208:	d9ee      	bls.n	800e1e8 <__utoa+0x40>
 800e20a:	2200      	movs	r2, #0
 800e20c:	545a      	strb	r2, [r3, r1]
 800e20e:	1919      	adds	r1, r3, r4
 800e210:	1aa5      	subs	r5, r4, r2
 800e212:	42aa      	cmp	r2, r5
 800e214:	dae3      	bge.n	800e1de <__utoa+0x36>
 800e216:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e21a:	780e      	ldrb	r6, [r1, #0]
 800e21c:	3201      	adds	r2, #1
 800e21e:	7006      	strb	r6, [r0, #0]
 800e220:	f801 5901 	strb.w	r5, [r1], #-1
 800e224:	e7f4      	b.n	800e210 <__utoa+0x68>
 800e226:	bf00      	nop
 800e228:	0800f81e 	.word	0x0800f81e

0800e22c <strcat>:
 800e22c:	4602      	mov	r2, r0
 800e22e:	b510      	push	{r4, lr}
 800e230:	7814      	ldrb	r4, [r2, #0]
 800e232:	4613      	mov	r3, r2
 800e234:	3201      	adds	r2, #1
 800e236:	2c00      	cmp	r4, #0
 800e238:	d1fa      	bne.n	800e230 <strcat+0x4>
 800e23a:	3b01      	subs	r3, #1
 800e23c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e240:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e244:	2a00      	cmp	r2, #0
 800e246:	d1f9      	bne.n	800e23c <strcat+0x10>
 800e248:	bd10      	pop	{r4, pc}

0800e24a <strncpy>:
 800e24a:	4603      	mov	r3, r0
 800e24c:	b510      	push	{r4, lr}
 800e24e:	3901      	subs	r1, #1
 800e250:	b132      	cbz	r2, 800e260 <strncpy+0x16>
 800e252:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e256:	3a01      	subs	r2, #1
 800e258:	f803 4b01 	strb.w	r4, [r3], #1
 800e25c:	2c00      	cmp	r4, #0
 800e25e:	d1f7      	bne.n	800e250 <strncpy+0x6>
 800e260:	2100      	movs	r1, #0
 800e262:	441a      	add	r2, r3
 800e264:	4293      	cmp	r3, r2
 800e266:	d100      	bne.n	800e26a <strncpy+0x20>
 800e268:	bd10      	pop	{r4, pc}
 800e26a:	f803 1b01 	strb.w	r1, [r3], #1
 800e26e:	e7f9      	b.n	800e264 <strncpy+0x1a>

0800e270 <strstr>:
 800e270:	780a      	ldrb	r2, [r1, #0]
 800e272:	b570      	push	{r4, r5, r6, lr}
 800e274:	b96a      	cbnz	r2, 800e292 <strstr+0x22>
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	429a      	cmp	r2, r3
 800e27a:	d109      	bne.n	800e290 <strstr+0x20>
 800e27c:	460c      	mov	r4, r1
 800e27e:	4605      	mov	r5, r0
 800e280:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0f6      	beq.n	800e276 <strstr+0x6>
 800e288:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e28c:	429e      	cmp	r6, r3
 800e28e:	d0f7      	beq.n	800e280 <strstr+0x10>
 800e290:	3001      	adds	r0, #1
 800e292:	7803      	ldrb	r3, [r0, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1ef      	bne.n	800e278 <strstr+0x8>
 800e298:	4618      	mov	r0, r3
 800e29a:	e7ec      	b.n	800e276 <strstr+0x6>

0800e29c <memset>:
 800e29c:	4603      	mov	r3, r0
 800e29e:	4402      	add	r2, r0
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d100      	bne.n	800e2a6 <memset+0xa>
 800e2a4:	4770      	bx	lr
 800e2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2aa:	e7f9      	b.n	800e2a0 <memset+0x4>

0800e2ac <_sbrk_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	4d05      	ldr	r5, [pc, #20]	@ (800e2c8 <_sbrk_r+0x1c>)
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	602b      	str	r3, [r5, #0]
 800e2b8:	f7fb fc86 	bl	8009bc8 <_sbrk>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_sbrk_r+0x1a>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_sbrk_r+0x1a>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	20002170 	.word	0x20002170

0800e2cc <__errno>:
 800e2cc:	4b01      	ldr	r3, [pc, #4]	@ (800e2d4 <__errno+0x8>)
 800e2ce:	6818      	ldr	r0, [r3, #0]
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	20000f80 	.word	0x20000f80

0800e2d8 <__libc_init_array>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	2600      	movs	r6, #0
 800e2dc:	4d0c      	ldr	r5, [pc, #48]	@ (800e310 <__libc_init_array+0x38>)
 800e2de:	4c0d      	ldr	r4, [pc, #52]	@ (800e314 <__libc_init_array+0x3c>)
 800e2e0:	1b64      	subs	r4, r4, r5
 800e2e2:	10a4      	asrs	r4, r4, #2
 800e2e4:	42a6      	cmp	r6, r4
 800e2e6:	d109      	bne.n	800e2fc <__libc_init_array+0x24>
 800e2e8:	f000 fbc2 	bl	800ea70 <_init>
 800e2ec:	2600      	movs	r6, #0
 800e2ee:	4d0a      	ldr	r5, [pc, #40]	@ (800e318 <__libc_init_array+0x40>)
 800e2f0:	4c0a      	ldr	r4, [pc, #40]	@ (800e31c <__libc_init_array+0x44>)
 800e2f2:	1b64      	subs	r4, r4, r5
 800e2f4:	10a4      	asrs	r4, r4, #2
 800e2f6:	42a6      	cmp	r6, r4
 800e2f8:	d105      	bne.n	800e306 <__libc_init_array+0x2e>
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e300:	4798      	blx	r3
 800e302:	3601      	adds	r6, #1
 800e304:	e7ee      	b.n	800e2e4 <__libc_init_array+0xc>
 800e306:	f855 3b04 	ldr.w	r3, [r5], #4
 800e30a:	4798      	blx	r3
 800e30c:	3601      	adds	r6, #1
 800e30e:	e7f2      	b.n	800e2f6 <__libc_init_array+0x1e>
 800e310:	0800f880 	.word	0x0800f880
 800e314:	0800f880 	.word	0x0800f880
 800e318:	0800f880 	.word	0x0800f880
 800e31c:	0800f884 	.word	0x0800f884

0800e320 <__retarget_lock_acquire_recursive>:
 800e320:	4770      	bx	lr

0800e322 <__retarget_lock_release_recursive>:
 800e322:	4770      	bx	lr

0800e324 <memcpy>:
 800e324:	440a      	add	r2, r1
 800e326:	4291      	cmp	r1, r2
 800e328:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e32c:	d100      	bne.n	800e330 <memcpy+0xc>
 800e32e:	4770      	bx	lr
 800e330:	b510      	push	{r4, lr}
 800e332:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e336:	4291      	cmp	r1, r2
 800e338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e33c:	d1f9      	bne.n	800e332 <memcpy+0xe>
 800e33e:	bd10      	pop	{r4, pc}

0800e340 <strcpy>:
 800e340:	4603      	mov	r3, r0
 800e342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e346:	f803 2b01 	strb.w	r2, [r3], #1
 800e34a:	2a00      	cmp	r2, #0
 800e34c:	d1f9      	bne.n	800e342 <strcpy+0x2>
 800e34e:	4770      	bx	lr

0800e350 <_free_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4605      	mov	r5, r0
 800e354:	2900      	cmp	r1, #0
 800e356:	d040      	beq.n	800e3da <_free_r+0x8a>
 800e358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e35c:	1f0c      	subs	r4, r1, #4
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bfb8      	it	lt
 800e362:	18e4      	addlt	r4, r4, r3
 800e364:	f7ff fef4 	bl	800e150 <__malloc_lock>
 800e368:	4a1c      	ldr	r2, [pc, #112]	@ (800e3dc <_free_r+0x8c>)
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	b933      	cbnz	r3, 800e37c <_free_r+0x2c>
 800e36e:	6063      	str	r3, [r4, #4]
 800e370:	6014      	str	r4, [r2, #0]
 800e372:	4628      	mov	r0, r5
 800e374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e378:	f7ff bef0 	b.w	800e15c <__malloc_unlock>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d908      	bls.n	800e392 <_free_r+0x42>
 800e380:	6820      	ldr	r0, [r4, #0]
 800e382:	1821      	adds	r1, r4, r0
 800e384:	428b      	cmp	r3, r1
 800e386:	bf01      	itttt	eq
 800e388:	6819      	ldreq	r1, [r3, #0]
 800e38a:	685b      	ldreq	r3, [r3, #4]
 800e38c:	1809      	addeq	r1, r1, r0
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	e7ed      	b.n	800e36e <_free_r+0x1e>
 800e392:	461a      	mov	r2, r3
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	b10b      	cbz	r3, 800e39c <_free_r+0x4c>
 800e398:	42a3      	cmp	r3, r4
 800e39a:	d9fa      	bls.n	800e392 <_free_r+0x42>
 800e39c:	6811      	ldr	r1, [r2, #0]
 800e39e:	1850      	adds	r0, r2, r1
 800e3a0:	42a0      	cmp	r0, r4
 800e3a2:	d10b      	bne.n	800e3bc <_free_r+0x6c>
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	4401      	add	r1, r0
 800e3a8:	1850      	adds	r0, r2, r1
 800e3aa:	4283      	cmp	r3, r0
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	d1e0      	bne.n	800e372 <_free_r+0x22>
 800e3b0:	6818      	ldr	r0, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	4408      	add	r0, r1
 800e3b6:	6010      	str	r0, [r2, #0]
 800e3b8:	6053      	str	r3, [r2, #4]
 800e3ba:	e7da      	b.n	800e372 <_free_r+0x22>
 800e3bc:	d902      	bls.n	800e3c4 <_free_r+0x74>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	e7d6      	b.n	800e372 <_free_r+0x22>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	1821      	adds	r1, r4, r0
 800e3c8:	428b      	cmp	r3, r1
 800e3ca:	bf01      	itttt	eq
 800e3cc:	6819      	ldreq	r1, [r3, #0]
 800e3ce:	685b      	ldreq	r3, [r3, #4]
 800e3d0:	1809      	addeq	r1, r1, r0
 800e3d2:	6021      	streq	r1, [r4, #0]
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	6054      	str	r4, [r2, #4]
 800e3d8:	e7cb      	b.n	800e372 <_free_r+0x22>
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20002030 	.word	0x20002030

0800e3e0 <__ssputs_r>:
 800e3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e4:	461f      	mov	r7, r3
 800e3e6:	688e      	ldr	r6, [r1, #8]
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	42be      	cmp	r6, r7
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	4690      	mov	r8, r2
 800e3f0:	680b      	ldr	r3, [r1, #0]
 800e3f2:	d82d      	bhi.n	800e450 <__ssputs_r+0x70>
 800e3f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3fc:	d026      	beq.n	800e44c <__ssputs_r+0x6c>
 800e3fe:	6965      	ldr	r5, [r4, #20]
 800e400:	6909      	ldr	r1, [r1, #16]
 800e402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e406:	eba3 0901 	sub.w	r9, r3, r1
 800e40a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e40e:	1c7b      	adds	r3, r7, #1
 800e410:	444b      	add	r3, r9
 800e412:	106d      	asrs	r5, r5, #1
 800e414:	429d      	cmp	r5, r3
 800e416:	bf38      	it	cc
 800e418:	461d      	movcc	r5, r3
 800e41a:	0553      	lsls	r3, r2, #21
 800e41c:	d527      	bpl.n	800e46e <__ssputs_r+0x8e>
 800e41e:	4629      	mov	r1, r5
 800e420:	f7ff fe16 	bl	800e050 <_malloc_r>
 800e424:	4606      	mov	r6, r0
 800e426:	b360      	cbz	r0, 800e482 <__ssputs_r+0xa2>
 800e428:	464a      	mov	r2, r9
 800e42a:	6921      	ldr	r1, [r4, #16]
 800e42c:	f7ff ff7a 	bl	800e324 <memcpy>
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e43a:	81a3      	strh	r3, [r4, #12]
 800e43c:	6126      	str	r6, [r4, #16]
 800e43e:	444e      	add	r6, r9
 800e440:	6026      	str	r6, [r4, #0]
 800e442:	463e      	mov	r6, r7
 800e444:	6165      	str	r5, [r4, #20]
 800e446:	eba5 0509 	sub.w	r5, r5, r9
 800e44a:	60a5      	str	r5, [r4, #8]
 800e44c:	42be      	cmp	r6, r7
 800e44e:	d900      	bls.n	800e452 <__ssputs_r+0x72>
 800e450:	463e      	mov	r6, r7
 800e452:	4632      	mov	r2, r6
 800e454:	4641      	mov	r1, r8
 800e456:	6820      	ldr	r0, [r4, #0]
 800e458:	f000 fada 	bl	800ea10 <memmove>
 800e45c:	2000      	movs	r0, #0
 800e45e:	68a3      	ldr	r3, [r4, #8]
 800e460:	1b9b      	subs	r3, r3, r6
 800e462:	60a3      	str	r3, [r4, #8]
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	4433      	add	r3, r6
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46e:	462a      	mov	r2, r5
 800e470:	f000 faa0 	bl	800e9b4 <_realloc_r>
 800e474:	4606      	mov	r6, r0
 800e476:	2800      	cmp	r0, #0
 800e478:	d1e0      	bne.n	800e43c <__ssputs_r+0x5c>
 800e47a:	4650      	mov	r0, sl
 800e47c:	6921      	ldr	r1, [r4, #16]
 800e47e:	f7ff ff67 	bl	800e350 <_free_r>
 800e482:	230c      	movs	r3, #12
 800e484:	f8ca 3000 	str.w	r3, [sl]
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	e7e9      	b.n	800e46a <__ssputs_r+0x8a>
	...

0800e498 <_svfiprintf_r>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	4698      	mov	r8, r3
 800e49e:	898b      	ldrh	r3, [r1, #12]
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	061b      	lsls	r3, r3, #24
 800e4a4:	460d      	mov	r5, r1
 800e4a6:	4614      	mov	r4, r2
 800e4a8:	b09d      	sub	sp, #116	@ 0x74
 800e4aa:	d510      	bpl.n	800e4ce <_svfiprintf_r+0x36>
 800e4ac:	690b      	ldr	r3, [r1, #16]
 800e4ae:	b973      	cbnz	r3, 800e4ce <_svfiprintf_r+0x36>
 800e4b0:	2140      	movs	r1, #64	@ 0x40
 800e4b2:	f7ff fdcd 	bl	800e050 <_malloc_r>
 800e4b6:	6028      	str	r0, [r5, #0]
 800e4b8:	6128      	str	r0, [r5, #16]
 800e4ba:	b930      	cbnz	r0, 800e4ca <_svfiprintf_r+0x32>
 800e4bc:	230c      	movs	r3, #12
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4c4:	b01d      	add	sp, #116	@ 0x74
 800e4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ca:	2340      	movs	r3, #64	@ 0x40
 800e4cc:	616b      	str	r3, [r5, #20]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d2:	2320      	movs	r3, #32
 800e4d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4d8:	2330      	movs	r3, #48	@ 0x30
 800e4da:	f04f 0901 	mov.w	r9, #1
 800e4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e67c <_svfiprintf_r+0x1e4>
 800e4e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4ea:	4623      	mov	r3, r4
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4f2:	b10a      	cbz	r2, 800e4f8 <_svfiprintf_r+0x60>
 800e4f4:	2a25      	cmp	r2, #37	@ 0x25
 800e4f6:	d1f9      	bne.n	800e4ec <_svfiprintf_r+0x54>
 800e4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4fc:	d00b      	beq.n	800e516 <_svfiprintf_r+0x7e>
 800e4fe:	465b      	mov	r3, fp
 800e500:	4622      	mov	r2, r4
 800e502:	4629      	mov	r1, r5
 800e504:	4638      	mov	r0, r7
 800e506:	f7ff ff6b 	bl	800e3e0 <__ssputs_r>
 800e50a:	3001      	adds	r0, #1
 800e50c:	f000 80a7 	beq.w	800e65e <_svfiprintf_r+0x1c6>
 800e510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e512:	445a      	add	r2, fp
 800e514:	9209      	str	r2, [sp, #36]	@ 0x24
 800e516:	f89a 3000 	ldrb.w	r3, [sl]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 809f 	beq.w	800e65e <_svfiprintf_r+0x1c6>
 800e520:	2300      	movs	r3, #0
 800e522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e52a:	f10a 0a01 	add.w	sl, sl, #1
 800e52e:	9304      	str	r3, [sp, #16]
 800e530:	9307      	str	r3, [sp, #28]
 800e532:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e536:	931a      	str	r3, [sp, #104]	@ 0x68
 800e538:	4654      	mov	r4, sl
 800e53a:	2205      	movs	r2, #5
 800e53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e540:	484e      	ldr	r0, [pc, #312]	@ (800e67c <_svfiprintf_r+0x1e4>)
 800e542:	f000 fa7f 	bl	800ea44 <memchr>
 800e546:	9a04      	ldr	r2, [sp, #16]
 800e548:	b9d8      	cbnz	r0, 800e582 <_svfiprintf_r+0xea>
 800e54a:	06d0      	lsls	r0, r2, #27
 800e54c:	bf44      	itt	mi
 800e54e:	2320      	movmi	r3, #32
 800e550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e554:	0711      	lsls	r1, r2, #28
 800e556:	bf44      	itt	mi
 800e558:	232b      	movmi	r3, #43	@ 0x2b
 800e55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55e:	f89a 3000 	ldrb.w	r3, [sl]
 800e562:	2b2a      	cmp	r3, #42	@ 0x2a
 800e564:	d015      	beq.n	800e592 <_svfiprintf_r+0xfa>
 800e566:	4654      	mov	r4, sl
 800e568:	2000      	movs	r0, #0
 800e56a:	f04f 0c0a 	mov.w	ip, #10
 800e56e:	9a07      	ldr	r2, [sp, #28]
 800e570:	4621      	mov	r1, r4
 800e572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e576:	3b30      	subs	r3, #48	@ 0x30
 800e578:	2b09      	cmp	r3, #9
 800e57a:	d94b      	bls.n	800e614 <_svfiprintf_r+0x17c>
 800e57c:	b1b0      	cbz	r0, 800e5ac <_svfiprintf_r+0x114>
 800e57e:	9207      	str	r2, [sp, #28]
 800e580:	e014      	b.n	800e5ac <_svfiprintf_r+0x114>
 800e582:	eba0 0308 	sub.w	r3, r0, r8
 800e586:	fa09 f303 	lsl.w	r3, r9, r3
 800e58a:	4313      	orrs	r3, r2
 800e58c:	46a2      	mov	sl, r4
 800e58e:	9304      	str	r3, [sp, #16]
 800e590:	e7d2      	b.n	800e538 <_svfiprintf_r+0xa0>
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	1d19      	adds	r1, r3, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	9103      	str	r1, [sp, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bfbb      	ittet	lt
 800e59e:	425b      	neglt	r3, r3
 800e5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a4:	9307      	strge	r3, [sp, #28]
 800e5a6:	9307      	strlt	r3, [sp, #28]
 800e5a8:	bfb8      	it	lt
 800e5aa:	9204      	strlt	r2, [sp, #16]
 800e5ac:	7823      	ldrb	r3, [r4, #0]
 800e5ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5b0:	d10a      	bne.n	800e5c8 <_svfiprintf_r+0x130>
 800e5b2:	7863      	ldrb	r3, [r4, #1]
 800e5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5b6:	d132      	bne.n	800e61e <_svfiprintf_r+0x186>
 800e5b8:	9b03      	ldr	r3, [sp, #12]
 800e5ba:	3402      	adds	r4, #2
 800e5bc:	1d1a      	adds	r2, r3, #4
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	9203      	str	r2, [sp, #12]
 800e5c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5c6:	9305      	str	r3, [sp, #20]
 800e5c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e680 <_svfiprintf_r+0x1e8>
 800e5cc:	2203      	movs	r2, #3
 800e5ce:	4650      	mov	r0, sl
 800e5d0:	7821      	ldrb	r1, [r4, #0]
 800e5d2:	f000 fa37 	bl	800ea44 <memchr>
 800e5d6:	b138      	cbz	r0, 800e5e8 <_svfiprintf_r+0x150>
 800e5d8:	2240      	movs	r2, #64	@ 0x40
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	eba0 000a 	sub.w	r0, r0, sl
 800e5e0:	4082      	lsls	r2, r0
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	3401      	adds	r4, #1
 800e5e6:	9304      	str	r3, [sp, #16]
 800e5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ec:	2206      	movs	r2, #6
 800e5ee:	4825      	ldr	r0, [pc, #148]	@ (800e684 <_svfiprintf_r+0x1ec>)
 800e5f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5f4:	f000 fa26 	bl	800ea44 <memchr>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d036      	beq.n	800e66a <_svfiprintf_r+0x1d2>
 800e5fc:	4b22      	ldr	r3, [pc, #136]	@ (800e688 <_svfiprintf_r+0x1f0>)
 800e5fe:	bb1b      	cbnz	r3, 800e648 <_svfiprintf_r+0x1b0>
 800e600:	9b03      	ldr	r3, [sp, #12]
 800e602:	3307      	adds	r3, #7
 800e604:	f023 0307 	bic.w	r3, r3, #7
 800e608:	3308      	adds	r3, #8
 800e60a:	9303      	str	r3, [sp, #12]
 800e60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60e:	4433      	add	r3, r6
 800e610:	9309      	str	r3, [sp, #36]	@ 0x24
 800e612:	e76a      	b.n	800e4ea <_svfiprintf_r+0x52>
 800e614:	460c      	mov	r4, r1
 800e616:	2001      	movs	r0, #1
 800e618:	fb0c 3202 	mla	r2, ip, r2, r3
 800e61c:	e7a8      	b.n	800e570 <_svfiprintf_r+0xd8>
 800e61e:	2300      	movs	r3, #0
 800e620:	f04f 0c0a 	mov.w	ip, #10
 800e624:	4619      	mov	r1, r3
 800e626:	3401      	adds	r4, #1
 800e628:	9305      	str	r3, [sp, #20]
 800e62a:	4620      	mov	r0, r4
 800e62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e630:	3a30      	subs	r2, #48	@ 0x30
 800e632:	2a09      	cmp	r2, #9
 800e634:	d903      	bls.n	800e63e <_svfiprintf_r+0x1a6>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0c6      	beq.n	800e5c8 <_svfiprintf_r+0x130>
 800e63a:	9105      	str	r1, [sp, #20]
 800e63c:	e7c4      	b.n	800e5c8 <_svfiprintf_r+0x130>
 800e63e:	4604      	mov	r4, r0
 800e640:	2301      	movs	r3, #1
 800e642:	fb0c 2101 	mla	r1, ip, r1, r2
 800e646:	e7f0      	b.n	800e62a <_svfiprintf_r+0x192>
 800e648:	ab03      	add	r3, sp, #12
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	462a      	mov	r2, r5
 800e64e:	4638      	mov	r0, r7
 800e650:	4b0e      	ldr	r3, [pc, #56]	@ (800e68c <_svfiprintf_r+0x1f4>)
 800e652:	a904      	add	r1, sp, #16
 800e654:	f3af 8000 	nop.w
 800e658:	1c42      	adds	r2, r0, #1
 800e65a:	4606      	mov	r6, r0
 800e65c:	d1d6      	bne.n	800e60c <_svfiprintf_r+0x174>
 800e65e:	89ab      	ldrh	r3, [r5, #12]
 800e660:	065b      	lsls	r3, r3, #25
 800e662:	f53f af2d 	bmi.w	800e4c0 <_svfiprintf_r+0x28>
 800e666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e668:	e72c      	b.n	800e4c4 <_svfiprintf_r+0x2c>
 800e66a:	ab03      	add	r3, sp, #12
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	462a      	mov	r2, r5
 800e670:	4638      	mov	r0, r7
 800e672:	4b06      	ldr	r3, [pc, #24]	@ (800e68c <_svfiprintf_r+0x1f4>)
 800e674:	a904      	add	r1, sp, #16
 800e676:	f000 f87d 	bl	800e774 <_printf_i>
 800e67a:	e7ed      	b.n	800e658 <_svfiprintf_r+0x1c0>
 800e67c:	0800f843 	.word	0x0800f843
 800e680:	0800f849 	.word	0x0800f849
 800e684:	0800f84d 	.word	0x0800f84d
 800e688:	00000000 	.word	0x00000000
 800e68c:	0800e3e1 	.word	0x0800e3e1

0800e690 <_printf_common>:
 800e690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e694:	4616      	mov	r6, r2
 800e696:	4698      	mov	r8, r3
 800e698:	688a      	ldr	r2, [r1, #8]
 800e69a:	690b      	ldr	r3, [r1, #16]
 800e69c:	4607      	mov	r7, r0
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	bfb8      	it	lt
 800e6a2:	4613      	movlt	r3, r2
 800e6a4:	6033      	str	r3, [r6, #0]
 800e6a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e6b0:	b10a      	cbz	r2, 800e6b6 <_printf_common+0x26>
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	6033      	str	r3, [r6, #0]
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	0699      	lsls	r1, r3, #26
 800e6ba:	bf42      	ittt	mi
 800e6bc:	6833      	ldrmi	r3, [r6, #0]
 800e6be:	3302      	addmi	r3, #2
 800e6c0:	6033      	strmi	r3, [r6, #0]
 800e6c2:	6825      	ldr	r5, [r4, #0]
 800e6c4:	f015 0506 	ands.w	r5, r5, #6
 800e6c8:	d106      	bne.n	800e6d8 <_printf_common+0x48>
 800e6ca:	f104 0a19 	add.w	sl, r4, #25
 800e6ce:	68e3      	ldr	r3, [r4, #12]
 800e6d0:	6832      	ldr	r2, [r6, #0]
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	42ab      	cmp	r3, r5
 800e6d6:	dc2b      	bgt.n	800e730 <_printf_common+0xa0>
 800e6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6dc:	6822      	ldr	r2, [r4, #0]
 800e6de:	3b00      	subs	r3, #0
 800e6e0:	bf18      	it	ne
 800e6e2:	2301      	movne	r3, #1
 800e6e4:	0692      	lsls	r2, r2, #26
 800e6e6:	d430      	bmi.n	800e74a <_printf_common+0xba>
 800e6e8:	4641      	mov	r1, r8
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6f0:	47c8      	blx	r9
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	d023      	beq.n	800e73e <_printf_common+0xae>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	6922      	ldr	r2, [r4, #16]
 800e6fa:	f003 0306 	and.w	r3, r3, #6
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	bf14      	ite	ne
 800e702:	2500      	movne	r5, #0
 800e704:	6833      	ldreq	r3, [r6, #0]
 800e706:	f04f 0600 	mov.w	r6, #0
 800e70a:	bf08      	it	eq
 800e70c:	68e5      	ldreq	r5, [r4, #12]
 800e70e:	f104 041a 	add.w	r4, r4, #26
 800e712:	bf08      	it	eq
 800e714:	1aed      	subeq	r5, r5, r3
 800e716:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e71a:	bf08      	it	eq
 800e71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e720:	4293      	cmp	r3, r2
 800e722:	bfc4      	itt	gt
 800e724:	1a9b      	subgt	r3, r3, r2
 800e726:	18ed      	addgt	r5, r5, r3
 800e728:	42b5      	cmp	r5, r6
 800e72a:	d11a      	bne.n	800e762 <_printf_common+0xd2>
 800e72c:	2000      	movs	r0, #0
 800e72e:	e008      	b.n	800e742 <_printf_common+0xb2>
 800e730:	2301      	movs	r3, #1
 800e732:	4652      	mov	r2, sl
 800e734:	4641      	mov	r1, r8
 800e736:	4638      	mov	r0, r7
 800e738:	47c8      	blx	r9
 800e73a:	3001      	adds	r0, #1
 800e73c:	d103      	bne.n	800e746 <_printf_common+0xb6>
 800e73e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e746:	3501      	adds	r5, #1
 800e748:	e7c1      	b.n	800e6ce <_printf_common+0x3e>
 800e74a:	2030      	movs	r0, #48	@ 0x30
 800e74c:	18e1      	adds	r1, r4, r3
 800e74e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e752:	1c5a      	adds	r2, r3, #1
 800e754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e758:	4422      	add	r2, r4
 800e75a:	3302      	adds	r3, #2
 800e75c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e760:	e7c2      	b.n	800e6e8 <_printf_common+0x58>
 800e762:	2301      	movs	r3, #1
 800e764:	4622      	mov	r2, r4
 800e766:	4641      	mov	r1, r8
 800e768:	4638      	mov	r0, r7
 800e76a:	47c8      	blx	r9
 800e76c:	3001      	adds	r0, #1
 800e76e:	d0e6      	beq.n	800e73e <_printf_common+0xae>
 800e770:	3601      	adds	r6, #1
 800e772:	e7d9      	b.n	800e728 <_printf_common+0x98>

0800e774 <_printf_i>:
 800e774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e778:	7e0f      	ldrb	r7, [r1, #24]
 800e77a:	4691      	mov	r9, r2
 800e77c:	2f78      	cmp	r7, #120	@ 0x78
 800e77e:	4680      	mov	r8, r0
 800e780:	460c      	mov	r4, r1
 800e782:	469a      	mov	sl, r3
 800e784:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e78a:	d807      	bhi.n	800e79c <_printf_i+0x28>
 800e78c:	2f62      	cmp	r7, #98	@ 0x62
 800e78e:	d80a      	bhi.n	800e7a6 <_printf_i+0x32>
 800e790:	2f00      	cmp	r7, #0
 800e792:	f000 80d3 	beq.w	800e93c <_printf_i+0x1c8>
 800e796:	2f58      	cmp	r7, #88	@ 0x58
 800e798:	f000 80ba 	beq.w	800e910 <_printf_i+0x19c>
 800e79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e7a4:	e03a      	b.n	800e81c <_printf_i+0xa8>
 800e7a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e7aa:	2b15      	cmp	r3, #21
 800e7ac:	d8f6      	bhi.n	800e79c <_printf_i+0x28>
 800e7ae:	a101      	add	r1, pc, #4	@ (adr r1, 800e7b4 <_printf_i+0x40>)
 800e7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7b4:	0800e80d 	.word	0x0800e80d
 800e7b8:	0800e821 	.word	0x0800e821
 800e7bc:	0800e79d 	.word	0x0800e79d
 800e7c0:	0800e79d 	.word	0x0800e79d
 800e7c4:	0800e79d 	.word	0x0800e79d
 800e7c8:	0800e79d 	.word	0x0800e79d
 800e7cc:	0800e821 	.word	0x0800e821
 800e7d0:	0800e79d 	.word	0x0800e79d
 800e7d4:	0800e79d 	.word	0x0800e79d
 800e7d8:	0800e79d 	.word	0x0800e79d
 800e7dc:	0800e79d 	.word	0x0800e79d
 800e7e0:	0800e923 	.word	0x0800e923
 800e7e4:	0800e84b 	.word	0x0800e84b
 800e7e8:	0800e8dd 	.word	0x0800e8dd
 800e7ec:	0800e79d 	.word	0x0800e79d
 800e7f0:	0800e79d 	.word	0x0800e79d
 800e7f4:	0800e945 	.word	0x0800e945
 800e7f8:	0800e79d 	.word	0x0800e79d
 800e7fc:	0800e84b 	.word	0x0800e84b
 800e800:	0800e79d 	.word	0x0800e79d
 800e804:	0800e79d 	.word	0x0800e79d
 800e808:	0800e8e5 	.word	0x0800e8e5
 800e80c:	6833      	ldr	r3, [r6, #0]
 800e80e:	1d1a      	adds	r2, r3, #4
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6032      	str	r2, [r6, #0]
 800e814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e81c:	2301      	movs	r3, #1
 800e81e:	e09e      	b.n	800e95e <_printf_i+0x1ea>
 800e820:	6833      	ldr	r3, [r6, #0]
 800e822:	6820      	ldr	r0, [r4, #0]
 800e824:	1d19      	adds	r1, r3, #4
 800e826:	6031      	str	r1, [r6, #0]
 800e828:	0606      	lsls	r6, r0, #24
 800e82a:	d501      	bpl.n	800e830 <_printf_i+0xbc>
 800e82c:	681d      	ldr	r5, [r3, #0]
 800e82e:	e003      	b.n	800e838 <_printf_i+0xc4>
 800e830:	0645      	lsls	r5, r0, #25
 800e832:	d5fb      	bpl.n	800e82c <_printf_i+0xb8>
 800e834:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e838:	2d00      	cmp	r5, #0
 800e83a:	da03      	bge.n	800e844 <_printf_i+0xd0>
 800e83c:	232d      	movs	r3, #45	@ 0x2d
 800e83e:	426d      	negs	r5, r5
 800e840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e844:	230a      	movs	r3, #10
 800e846:	4859      	ldr	r0, [pc, #356]	@ (800e9ac <_printf_i+0x238>)
 800e848:	e011      	b.n	800e86e <_printf_i+0xfa>
 800e84a:	6821      	ldr	r1, [r4, #0]
 800e84c:	6833      	ldr	r3, [r6, #0]
 800e84e:	0608      	lsls	r0, r1, #24
 800e850:	f853 5b04 	ldr.w	r5, [r3], #4
 800e854:	d402      	bmi.n	800e85c <_printf_i+0xe8>
 800e856:	0649      	lsls	r1, r1, #25
 800e858:	bf48      	it	mi
 800e85a:	b2ad      	uxthmi	r5, r5
 800e85c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e85e:	6033      	str	r3, [r6, #0]
 800e860:	bf14      	ite	ne
 800e862:	230a      	movne	r3, #10
 800e864:	2308      	moveq	r3, #8
 800e866:	4851      	ldr	r0, [pc, #324]	@ (800e9ac <_printf_i+0x238>)
 800e868:	2100      	movs	r1, #0
 800e86a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e86e:	6866      	ldr	r6, [r4, #4]
 800e870:	2e00      	cmp	r6, #0
 800e872:	bfa8      	it	ge
 800e874:	6821      	ldrge	r1, [r4, #0]
 800e876:	60a6      	str	r6, [r4, #8]
 800e878:	bfa4      	itt	ge
 800e87a:	f021 0104 	bicge.w	r1, r1, #4
 800e87e:	6021      	strge	r1, [r4, #0]
 800e880:	b90d      	cbnz	r5, 800e886 <_printf_i+0x112>
 800e882:	2e00      	cmp	r6, #0
 800e884:	d04b      	beq.n	800e91e <_printf_i+0x1aa>
 800e886:	4616      	mov	r6, r2
 800e888:	fbb5 f1f3 	udiv	r1, r5, r3
 800e88c:	fb03 5711 	mls	r7, r3, r1, r5
 800e890:	5dc7      	ldrb	r7, [r0, r7]
 800e892:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e896:	462f      	mov	r7, r5
 800e898:	42bb      	cmp	r3, r7
 800e89a:	460d      	mov	r5, r1
 800e89c:	d9f4      	bls.n	800e888 <_printf_i+0x114>
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d10b      	bne.n	800e8ba <_printf_i+0x146>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	07df      	lsls	r7, r3, #31
 800e8a6:	d508      	bpl.n	800e8ba <_printf_i+0x146>
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	6861      	ldr	r1, [r4, #4]
 800e8ac:	4299      	cmp	r1, r3
 800e8ae:	bfde      	ittt	le
 800e8b0:	2330      	movle	r3, #48	@ 0x30
 800e8b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e8ba:	1b92      	subs	r2, r2, r6
 800e8bc:	6122      	str	r2, [r4, #16]
 800e8be:	464b      	mov	r3, r9
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f8cd a000 	str.w	sl, [sp]
 800e8c8:	aa03      	add	r2, sp, #12
 800e8ca:	f7ff fee1 	bl	800e690 <_printf_common>
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	d14a      	bne.n	800e968 <_printf_i+0x1f4>
 800e8d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8d6:	b004      	add	sp, #16
 800e8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	f043 0320 	orr.w	r3, r3, #32
 800e8e2:	6023      	str	r3, [r4, #0]
 800e8e4:	2778      	movs	r7, #120	@ 0x78
 800e8e6:	4832      	ldr	r0, [pc, #200]	@ (800e9b0 <_printf_i+0x23c>)
 800e8e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	6831      	ldr	r1, [r6, #0]
 800e8f0:	061f      	lsls	r7, r3, #24
 800e8f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8f6:	d402      	bmi.n	800e8fe <_printf_i+0x18a>
 800e8f8:	065f      	lsls	r7, r3, #25
 800e8fa:	bf48      	it	mi
 800e8fc:	b2ad      	uxthmi	r5, r5
 800e8fe:	6031      	str	r1, [r6, #0]
 800e900:	07d9      	lsls	r1, r3, #31
 800e902:	bf44      	itt	mi
 800e904:	f043 0320 	orrmi.w	r3, r3, #32
 800e908:	6023      	strmi	r3, [r4, #0]
 800e90a:	b11d      	cbz	r5, 800e914 <_printf_i+0x1a0>
 800e90c:	2310      	movs	r3, #16
 800e90e:	e7ab      	b.n	800e868 <_printf_i+0xf4>
 800e910:	4826      	ldr	r0, [pc, #152]	@ (800e9ac <_printf_i+0x238>)
 800e912:	e7e9      	b.n	800e8e8 <_printf_i+0x174>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	f023 0320 	bic.w	r3, r3, #32
 800e91a:	6023      	str	r3, [r4, #0]
 800e91c:	e7f6      	b.n	800e90c <_printf_i+0x198>
 800e91e:	4616      	mov	r6, r2
 800e920:	e7bd      	b.n	800e89e <_printf_i+0x12a>
 800e922:	6833      	ldr	r3, [r6, #0]
 800e924:	6825      	ldr	r5, [r4, #0]
 800e926:	1d18      	adds	r0, r3, #4
 800e928:	6961      	ldr	r1, [r4, #20]
 800e92a:	6030      	str	r0, [r6, #0]
 800e92c:	062e      	lsls	r6, r5, #24
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	d501      	bpl.n	800e936 <_printf_i+0x1c2>
 800e932:	6019      	str	r1, [r3, #0]
 800e934:	e002      	b.n	800e93c <_printf_i+0x1c8>
 800e936:	0668      	lsls	r0, r5, #25
 800e938:	d5fb      	bpl.n	800e932 <_printf_i+0x1be>
 800e93a:	8019      	strh	r1, [r3, #0]
 800e93c:	2300      	movs	r3, #0
 800e93e:	4616      	mov	r6, r2
 800e940:	6123      	str	r3, [r4, #16]
 800e942:	e7bc      	b.n	800e8be <_printf_i+0x14a>
 800e944:	6833      	ldr	r3, [r6, #0]
 800e946:	2100      	movs	r1, #0
 800e948:	1d1a      	adds	r2, r3, #4
 800e94a:	6032      	str	r2, [r6, #0]
 800e94c:	681e      	ldr	r6, [r3, #0]
 800e94e:	6862      	ldr	r2, [r4, #4]
 800e950:	4630      	mov	r0, r6
 800e952:	f000 f877 	bl	800ea44 <memchr>
 800e956:	b108      	cbz	r0, 800e95c <_printf_i+0x1e8>
 800e958:	1b80      	subs	r0, r0, r6
 800e95a:	6060      	str	r0, [r4, #4]
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	6123      	str	r3, [r4, #16]
 800e960:	2300      	movs	r3, #0
 800e962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e966:	e7aa      	b.n	800e8be <_printf_i+0x14a>
 800e968:	4632      	mov	r2, r6
 800e96a:	4649      	mov	r1, r9
 800e96c:	4640      	mov	r0, r8
 800e96e:	6923      	ldr	r3, [r4, #16]
 800e970:	47d0      	blx	sl
 800e972:	3001      	adds	r0, #1
 800e974:	d0ad      	beq.n	800e8d2 <_printf_i+0x15e>
 800e976:	6823      	ldr	r3, [r4, #0]
 800e978:	079b      	lsls	r3, r3, #30
 800e97a:	d413      	bmi.n	800e9a4 <_printf_i+0x230>
 800e97c:	68e0      	ldr	r0, [r4, #12]
 800e97e:	9b03      	ldr	r3, [sp, #12]
 800e980:	4298      	cmp	r0, r3
 800e982:	bfb8      	it	lt
 800e984:	4618      	movlt	r0, r3
 800e986:	e7a6      	b.n	800e8d6 <_printf_i+0x162>
 800e988:	2301      	movs	r3, #1
 800e98a:	4632      	mov	r2, r6
 800e98c:	4649      	mov	r1, r9
 800e98e:	4640      	mov	r0, r8
 800e990:	47d0      	blx	sl
 800e992:	3001      	adds	r0, #1
 800e994:	d09d      	beq.n	800e8d2 <_printf_i+0x15e>
 800e996:	3501      	adds	r5, #1
 800e998:	68e3      	ldr	r3, [r4, #12]
 800e99a:	9903      	ldr	r1, [sp, #12]
 800e99c:	1a5b      	subs	r3, r3, r1
 800e99e:	42ab      	cmp	r3, r5
 800e9a0:	dcf2      	bgt.n	800e988 <_printf_i+0x214>
 800e9a2:	e7eb      	b.n	800e97c <_printf_i+0x208>
 800e9a4:	2500      	movs	r5, #0
 800e9a6:	f104 0619 	add.w	r6, r4, #25
 800e9aa:	e7f5      	b.n	800e998 <_printf_i+0x224>
 800e9ac:	0800f854 	.word	0x0800f854
 800e9b0:	0800f865 	.word	0x0800f865

0800e9b4 <_realloc_r>:
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	4615      	mov	r5, r2
 800e9bc:	460c      	mov	r4, r1
 800e9be:	b921      	cbnz	r1, 800e9ca <_realloc_r+0x16>
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c6:	f7ff bb43 	b.w	800e050 <_malloc_r>
 800e9ca:	b92a      	cbnz	r2, 800e9d8 <_realloc_r+0x24>
 800e9cc:	f7ff fcc0 	bl	800e350 <_free_r>
 800e9d0:	2400      	movs	r4, #0
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d8:	f000 f842 	bl	800ea60 <_malloc_usable_size_r>
 800e9dc:	4285      	cmp	r5, r0
 800e9de:	4606      	mov	r6, r0
 800e9e0:	d802      	bhi.n	800e9e8 <_realloc_r+0x34>
 800e9e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e9e6:	d8f4      	bhi.n	800e9d2 <_realloc_r+0x1e>
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f7ff fb30 	bl	800e050 <_malloc_r>
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d0ec      	beq.n	800e9d0 <_realloc_r+0x1c>
 800e9f6:	42b5      	cmp	r5, r6
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	bf28      	it	cs
 800e9fe:	4632      	movcs	r2, r6
 800ea00:	f7ff fc90 	bl	800e324 <memcpy>
 800ea04:	4621      	mov	r1, r4
 800ea06:	4640      	mov	r0, r8
 800ea08:	f7ff fca2 	bl	800e350 <_free_r>
 800ea0c:	463c      	mov	r4, r7
 800ea0e:	e7e0      	b.n	800e9d2 <_realloc_r+0x1e>

0800ea10 <memmove>:
 800ea10:	4288      	cmp	r0, r1
 800ea12:	b510      	push	{r4, lr}
 800ea14:	eb01 0402 	add.w	r4, r1, r2
 800ea18:	d902      	bls.n	800ea20 <memmove+0x10>
 800ea1a:	4284      	cmp	r4, r0
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	d807      	bhi.n	800ea30 <memmove+0x20>
 800ea20:	1e43      	subs	r3, r0, #1
 800ea22:	42a1      	cmp	r1, r4
 800ea24:	d008      	beq.n	800ea38 <memmove+0x28>
 800ea26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea2e:	e7f8      	b.n	800ea22 <memmove+0x12>
 800ea30:	4601      	mov	r1, r0
 800ea32:	4402      	add	r2, r0
 800ea34:	428a      	cmp	r2, r1
 800ea36:	d100      	bne.n	800ea3a <memmove+0x2a>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea42:	e7f7      	b.n	800ea34 <memmove+0x24>

0800ea44 <memchr>:
 800ea44:	4603      	mov	r3, r0
 800ea46:	b510      	push	{r4, lr}
 800ea48:	b2c9      	uxtb	r1, r1
 800ea4a:	4402      	add	r2, r0
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	4618      	mov	r0, r3
 800ea50:	d101      	bne.n	800ea56 <memchr+0x12>
 800ea52:	2000      	movs	r0, #0
 800ea54:	e003      	b.n	800ea5e <memchr+0x1a>
 800ea56:	7804      	ldrb	r4, [r0, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	428c      	cmp	r4, r1
 800ea5c:	d1f6      	bne.n	800ea4c <memchr+0x8>
 800ea5e:	bd10      	pop	{r4, pc}

0800ea60 <_malloc_usable_size_r>:
 800ea60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea64:	1f18      	subs	r0, r3, #4
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	bfbc      	itt	lt
 800ea6a:	580b      	ldrlt	r3, [r1, r0]
 800ea6c:	18c0      	addlt	r0, r0, r3
 800ea6e:	4770      	bx	lr

0800ea70 <_init>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	bf00      	nop
 800ea74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea76:	bc08      	pop	{r3}
 800ea78:	469e      	mov	lr, r3
 800ea7a:	4770      	bx	lr

0800ea7c <_fini>:
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	bf00      	nop
 800ea80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea82:	bc08      	pop	{r3}
 800ea84:	469e      	mov	lr, r3
 800ea86:	4770      	bx	lr
