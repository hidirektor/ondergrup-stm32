
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08008bc4  08008bc4  00009bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  0000afa0  2**0
                  CONTENTS
  4 .ARM          00000008  08008edc  08008edc  00009edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee4  08008ee4  0000afa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee4  08008ee4  00009ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee8  08008ee8  00009ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fa0  20000000  08008eec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  20000fa0  08009e8c  0000afa0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001df8  08009e8c  0000bdf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000afa0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168c2  00000000  00000000  0000afc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300d  00000000  00000000  0002188b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00024898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e25  00000000  00000000  00025ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be78  00000000  00000000  000268ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018145  00000000  00000000  00042765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02f9  00000000  00000000  0005a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  000fabe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ffcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fa0 	.word	0x20000fa0
 8000200:	00000000 	.word	0x00000000
 8000204:	08008bac 	.word	0x08008bac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fa4 	.word	0x20000fa4
 8000220:	08008bac 	.word	0x08008bac

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b8b      	ldr	r3, [pc, #556]	@ (8000474 <eepromKontrol+0x240>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	488a      	ldr	r0, [pc, #552]	@ (8000478 <eepromKontrol+0x244>)
 8000250:	f005 fb6a 	bl	8005928 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f004 f9fa 	bl	8004650 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800025c:	4b85      	ldr	r3, [pc, #532]	@ (8000474 <eepromKontrol+0x240>)
 800025e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	4b85      	ldr	r3, [pc, #532]	@ (800047c <eepromKontrol+0x248>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b82      	ldr	r3, [pc, #520]	@ (8000474 <eepromKontrol+0x240>)
 800026a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	4b83      	ldr	r3, [pc, #524]	@ (8000480 <eepromKontrol+0x24c>)
 8000272:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000274:	4b7f      	ldr	r3, [pc, #508]	@ (8000474 <eepromKontrol+0x240>)
 8000276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	4b81      	ldr	r3, [pc, #516]	@ (8000484 <eepromKontrol+0x250>)
 800027e:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000280:	4b7c      	ldr	r3, [pc, #496]	@ (8000474 <eepromKontrol+0x240>)
 8000282:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	4b7f      	ldr	r3, [pc, #508]	@ (8000488 <eepromKontrol+0x254>)
 800028a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800028c:	4b79      	ldr	r3, [pc, #484]	@ (8000474 <eepromKontrol+0x240>)
 800028e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	4b7d      	ldr	r3, [pc, #500]	@ (800048c <eepromKontrol+0x258>)
 8000296:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000298:	4b76      	ldr	r3, [pc, #472]	@ (8000474 <eepromKontrol+0x240>)
 800029a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000490 <eepromKontrol+0x25c>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80002a4:	4b73      	ldr	r3, [pc, #460]	@ (8000474 <eepromKontrol+0x240>)
 80002a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	4b79      	ldr	r3, [pc, #484]	@ (8000494 <eepromKontrol+0x260>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80002b0:	4b70      	ldr	r3, [pc, #448]	@ (8000474 <eepromKontrol+0x240>)
 80002b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	4b77      	ldr	r3, [pc, #476]	@ (8000498 <eepromKontrol+0x264>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000474 <eepromKontrol+0x240>)
 80002be:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4b75      	ldr	r3, [pc, #468]	@ (800049c <eepromKontrol+0x268>)
 80002c6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000474 <eepromKontrol+0x240>)
 80002ca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	4b73      	ldr	r3, [pc, #460]	@ (80004a0 <eepromKontrol+0x26c>)
 80002d2:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002d4:	4b67      	ldr	r3, [pc, #412]	@ (8000474 <eepromKontrol+0x240>)
 80002d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	4b71      	ldr	r3, [pc, #452]	@ (80004a4 <eepromKontrol+0x270>)
 80002de:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002e0:	4b64      	ldr	r3, [pc, #400]	@ (8000474 <eepromKontrol+0x240>)
 80002e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002ec:	4b61      	ldr	r3, [pc, #388]	@ (8000474 <eepromKontrol+0x240>)
 80002ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	4b6d      	ldr	r3, [pc, #436]	@ (80004ac <eepromKontrol+0x278>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000474 <eepromKontrol+0x240>)
 80002fa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	4b6b      	ldr	r3, [pc, #428]	@ (80004b0 <eepromKontrol+0x27c>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8000304:	4b5b      	ldr	r3, [pc, #364]	@ (8000474 <eepromKontrol+0x240>)
 8000306:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	4b69      	ldr	r3, [pc, #420]	@ (80004b4 <eepromKontrol+0x280>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8000310:	4b58      	ldr	r3, [pc, #352]	@ (8000474 <eepromKontrol+0x240>)
 8000312:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	4b67      	ldr	r3, [pc, #412]	@ (80004b8 <eepromKontrol+0x284>)
 800031a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800031c:	4b55      	ldr	r3, [pc, #340]	@ (8000474 <eepromKontrol+0x240>)
 800031e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8000322:	b2d2      	uxtb	r2, r2
 8000324:	4b65      	ldr	r3, [pc, #404]	@ (80004bc <eepromKontrol+0x288>)
 8000326:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8000328:	4b52      	ldr	r3, [pc, #328]	@ (8000474 <eepromKontrol+0x240>)
 800032a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	4b63      	ldr	r3, [pc, #396]	@ (80004c0 <eepromKontrol+0x28c>)
 8000332:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8000334:	4b4f      	ldr	r3, [pc, #316]	@ (8000474 <eepromKontrol+0x240>)
 8000336:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	4b61      	ldr	r3, [pc, #388]	@ (80004c4 <eepromKontrol+0x290>)
 800033e:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8000340:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <eepromKontrol+0x240>)
 8000342:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	4b5f      	ldr	r3, [pc, #380]	@ (80004c8 <eepromKontrol+0x294>)
 800034a:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800034c:	4b49      	ldr	r3, [pc, #292]	@ (8000474 <eepromKontrol+0x240>)
 800034e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	4b5d      	ldr	r3, [pc, #372]	@ (80004cc <eepromKontrol+0x298>)
 8000356:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000358:	4b46      	ldr	r3, [pc, #280]	@ (8000474 <eepromKontrol+0x240>)
 800035a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	4b5b      	ldr	r3, [pc, #364]	@ (80004d0 <eepromKontrol+0x29c>)
 8000362:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000364:	4b43      	ldr	r3, [pc, #268]	@ (8000474 <eepromKontrol+0x240>)
 8000366:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	4b59      	ldr	r3, [pc, #356]	@ (80004d4 <eepromKontrol+0x2a0>)
 800036e:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000370:	4b40      	ldr	r3, [pc, #256]	@ (8000474 <eepromKontrol+0x240>)
 8000372:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	4b57      	ldr	r3, [pc, #348]	@ (80004d8 <eepromKontrol+0x2a4>)
 800037a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800037c:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <eepromKontrol+0x240>)
 800037e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4b55      	ldr	r3, [pc, #340]	@ (80004dc <eepromKontrol+0x2a8>)
 8000386:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000388:	4b3a      	ldr	r3, [pc, #232]	@ (8000474 <eepromKontrol+0x240>)
 800038a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	4b53      	ldr	r3, [pc, #332]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000392:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000394:	4b37      	ldr	r3, [pc, #220]	@ (8000474 <eepromKontrol+0x240>)
 8000396:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800039a:	4952      	ldr	r1, [pc, #328]	@ (80004e4 <eepromKontrol+0x2b0>)
 800039c:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisiDemo = eepromData[28];
 80003a0:	4b34      	ldr	r3, [pc, #208]	@ (8000474 <eepromKontrol+0x240>)
 80003a2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80003a6:	4950      	ldr	r1, [pc, #320]	@ (80004e8 <eepromKontrol+0x2b4>)
 80003a8:	e9c1 2300 	strd	r2, r3, [r1]
	dilSecim = eepromData[33];
 80003ac:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <eepromKontrol+0x240>)
 80003ae:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	4b4d      	ldr	r3, [pc, #308]	@ (80004ec <eepromKontrol+0x2b8>)
 80003b6:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80003b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000474 <eepromKontrol+0x240>)
 80003ba:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	@ 0x180
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	4b4b      	ldr	r3, [pc, #300]	@ (80004f0 <eepromKontrol+0x2bc>)
 80003c2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80003c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000474 <eepromKontrol+0x240>)
 80003c6:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	4b49      	ldr	r3, [pc, #292]	@ (80004f4 <eepromKontrol+0x2c0>)
 80003ce:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80003d0:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <eepromKontrol+0x240>)
 80003d2:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 80003d6:	b2d2      	uxtb	r2, r2
 80003d8:	4b47      	ldr	r3, [pc, #284]	@ (80004f8 <eepromKontrol+0x2c4>)
 80003da:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80003dc:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <eepromKontrol+0x240>)
 80003de:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	4b45      	ldr	r3, [pc, #276]	@ (80004fc <eepromKontrol+0x2c8>)
 80003e6:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 80003e8:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <eepromKontrol+0x240>)
 80003ea:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	@ 0x130
 80003ee:	b2d2      	uxtb	r2, r2
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <eepromKontrol+0x2cc>)
 80003f2:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 80003f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <eepromKontrol+0x240>)
 80003f6:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	@ 0x138
 80003fa:	b2d2      	uxtb	r2, r2
 80003fc:	4b41      	ldr	r3, [pc, #260]	@ (8000504 <eepromKontrol+0x2d0>)
 80003fe:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000400:	4b1c      	ldr	r3, [pc, #112]	@ (8000474 <eepromKontrol+0x240>)
 8000402:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	4b3f      	ldr	r3, [pc, #252]	@ (8000508 <eepromKontrol+0x2d4>)
 800040a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800040c:	4b19      	ldr	r3, [pc, #100]	@ (8000474 <eepromKontrol+0x240>)
 800040e:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	@ 0x148
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	4b3d      	ldr	r3, [pc, #244]	@ (800050c <eepromKontrol+0x2d8>)
 8000416:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000418:	4b16      	ldr	r3, [pc, #88]	@ (8000474 <eepromKontrol+0x240>)
 800041a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	@ 0x150
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	4b3b      	ldr	r3, [pc, #236]	@ (8000510 <eepromKontrol+0x2dc>)
 8000422:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <eepromKontrol+0x240>)
 8000426:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	@ 0x158
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <eepromKontrol+0x2e0>)
 800042e:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <eepromKontrol+0x240>)
 8000432:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	4b37      	ldr	r3, [pc, #220]	@ (8000518 <eepromKontrol+0x2e4>)
 800043a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 800043c:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <eepromKontrol+0x240>)
 800043e:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	@ 0x168
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	4b35      	ldr	r3, [pc, #212]	@ (800051c <eepromKontrol+0x2e8>)
 8000446:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <eepromKontrol+0x240>)
 800044a:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	@ 0x170
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <eepromKontrol+0x2ec>)
 8000452:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <eepromKontrol+0x240>)
 8000456:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	@ 0x178
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	4b31      	ldr	r3, [pc, #196]	@ (8000524 <eepromKontrol+0x2f0>)
 800045e:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 8000460:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <eepromKontrol+0x240>)
 8000462:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	@ 0x340
 8000466:	b2d2      	uxtb	r2, r2
 8000468:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <eepromKontrol+0x2f4>)
 800046a:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <eepromKontrol+0x24c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	e05b      	b.n	800052c <eepromKontrol+0x2f8>
 8000474:	20000fc0 	.word	0x20000fc0
 8000478:	20001bc4 	.word	0x20001bc4
 800047c:	20001365 	.word	0x20001365
 8000480:	20001381 	.word	0x20001381
 8000484:	20001382 	.word	0x20001382
 8000488:	20001383 	.word	0x20001383
 800048c:	20001384 	.word	0x20001384
 8000490:	20001385 	.word	0x20001385
 8000494:	20001386 	.word	0x20001386
 8000498:	20001387 	.word	0x20001387
 800049c:	20001397 	.word	0x20001397
 80004a0:	20001388 	.word	0x20001388
 80004a4:	20001398 	.word	0x20001398
 80004a8:	20001389 	.word	0x20001389
 80004ac:	20001399 	.word	0x20001399
 80004b0:	2000138c 	.word	0x2000138c
 80004b4:	2000138d 	.word	0x2000138d
 80004b8:	2000138e 	.word	0x2000138e
 80004bc:	2000138f 	.word	0x2000138f
 80004c0:	20001390 	.word	0x20001390
 80004c4:	20001391 	.word	0x20001391
 80004c8:	20001392 	.word	0x20001392
 80004cc:	20001393 	.word	0x20001393
 80004d0:	20001394 	.word	0x20001394
 80004d4:	20001395 	.word	0x20001395
 80004d8:	20001396 	.word	0x20001396
 80004dc:	2000139a 	.word	0x2000139a
 80004e0:	2000139b 	.word	0x2000139b
 80004e4:	20001370 	.word	0x20001370
 80004e8:	20001378 	.word	0x20001378
 80004ec:	2000139e 	.word	0x2000139e
 80004f0:	2000139c 	.word	0x2000139c
 80004f4:	2000138b 	.word	0x2000138b
 80004f8:	2000139d 	.word	0x2000139d
 80004fc:	2000138a 	.word	0x2000138a
 8000500:	2000139f 	.word	0x2000139f
 8000504:	200013a0 	.word	0x200013a0
 8000508:	200013a1 	.word	0x200013a1
 800050c:	200013a2 	.word	0x200013a2
 8000510:	200013a3 	.word	0x200013a3
 8000514:	200013a4 	.word	0x200013a4
 8000518:	200013a5 	.word	0x200013a5
 800051c:	200013a6 	.word	0x200013a6
 8000520:	200013a7 	.word	0x200013a7
 8000524:	200013a8 	.word	0x200013a8
 8000528:	20001364 	.word	0x20001364
 800052c:	d902      	bls.n	8000534 <eepromKontrol+0x300>
	    calismaSekli=0;
 800052e:	4b74      	ldr	r3, [pc, #464]	@ (8000700 <eepromKontrol+0x4cc>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000534:	4b73      	ldr	r3, [pc, #460]	@ (8000704 <eepromKontrol+0x4d0>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d902      	bls.n	8000542 <eepromKontrol+0x30e>
	    emniyetCercevesi=1;
 800053c:	4b71      	ldr	r3, [pc, #452]	@ (8000704 <eepromKontrol+0x4d0>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000542:	4b71      	ldr	r3, [pc, #452]	@ (8000708 <eepromKontrol+0x4d4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d902      	bls.n	8000550 <eepromKontrol+0x31c>
	    yavaslamaLimit=0;
 800054a:	4b6f      	ldr	r3, [pc, #444]	@ (8000708 <eepromKontrol+0x4d4>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000550:	4b6e      	ldr	r3, [pc, #440]	@ (800070c <eepromKontrol+0x4d8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d902      	bls.n	800055e <eepromKontrol+0x32a>
	    altLimit=1;
 8000558:	4b6c      	ldr	r3, [pc, #432]	@ (800070c <eepromKontrol+0x4d8>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800055e:	4b6c      	ldr	r3, [pc, #432]	@ (8000710 <eepromKontrol+0x4dc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d902      	bls.n	800056c <eepromKontrol+0x338>
	    basincSalteri=1;
 8000566:	4b6a      	ldr	r3, [pc, #424]	@ (8000710 <eepromKontrol+0x4dc>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800056c:	4b69      	ldr	r3, [pc, #420]	@ (8000714 <eepromKontrol+0x4e0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d902      	bls.n	800057a <eepromKontrol+0x346>
	    kapiSecimleri=3;
 8000574:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <eepromKontrol+0x4e0>)
 8000576:	2203      	movs	r2, #3
 8000578:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800057a:	4b67      	ldr	r3, [pc, #412]	@ (8000718 <eepromKontrol+0x4e4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d902      	bls.n	8000588 <eepromKontrol+0x354>
	    kapiAcTipi=0;
 8000582:	4b65      	ldr	r3, [pc, #404]	@ (8000718 <eepromKontrol+0x4e4>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000588:	4b64      	ldr	r3, [pc, #400]	@ (800071c <eepromKontrol+0x4e8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d902      	bls.n	8000596 <eepromKontrol+0x362>
	    kapi1Tip=1;
 8000590:	4b62      	ldr	r3, [pc, #392]	@ (800071c <eepromKontrol+0x4e8>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000596:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <eepromKontrol+0x4ec>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d902      	bls.n	80005a4 <eepromKontrol+0x370>
	    kapi1AcSure=5;
 800059e:	4b60      	ldr	r3, [pc, #384]	@ (8000720 <eepromKontrol+0x4ec>)
 80005a0:	2205      	movs	r2, #5
 80005a2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80005a4:	4b5f      	ldr	r3, [pc, #380]	@ (8000724 <eepromKontrol+0x4f0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d902      	bls.n	80005b2 <eepromKontrol+0x37e>
	    kapi2Tip=1;
 80005ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000724 <eepromKontrol+0x4f0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 80005b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000728 <eepromKontrol+0x4f4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d902      	bls.n	80005c0 <eepromKontrol+0x38c>
	    kapi2AcSure=5;
 80005ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000728 <eepromKontrol+0x4f4>)
 80005bc:	2205      	movs	r2, #5
 80005be:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005c0:	4b5a      	ldr	r3, [pc, #360]	@ (800072c <eepromKontrol+0x4f8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d902      	bls.n	80005ce <eepromKontrol+0x39a>
	    kapitablaTip=1;
 80005c8:	4b58      	ldr	r3, [pc, #352]	@ (800072c <eepromKontrol+0x4f8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005ce:	4b58      	ldr	r3, [pc, #352]	@ (8000730 <eepromKontrol+0x4fc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d902      	bls.n	80005dc <eepromKontrol+0x3a8>
	    kapiTablaAcKonum=2;
 80005d6:	4b56      	ldr	r3, [pc, #344]	@ (8000730 <eepromKontrol+0x4fc>)
 80005d8:	2202      	movs	r2, #2
 80005da:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005dc:	4b55      	ldr	r3, [pc, #340]	@ (8000734 <eepromKontrol+0x500>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d902      	bls.n	80005ea <eepromKontrol+0x3b6>
	    kapiTablaAcSure=5;
 80005e4:	4b53      	ldr	r3, [pc, #332]	@ (8000734 <eepromKontrol+0x500>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005ea:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <eepromKontrol+0x504>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d902      	bls.n	80005f8 <eepromKontrol+0x3c4>
	    yukariYavasLimit=0;
 80005f2:	4b51      	ldr	r3, [pc, #324]	@ (8000738 <eepromKontrol+0x504>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005f8:	4b50      	ldr	r3, [pc, #320]	@ (800073c <eepromKontrol+0x508>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d902      	bls.n	8000606 <eepromKontrol+0x3d2>
	    devirmeYuruyusSecim=0;
 8000600:	4b4e      	ldr	r3, [pc, #312]	@ (800073c <eepromKontrol+0x508>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000606:	4b4e      	ldr	r3, [pc, #312]	@ (8000740 <eepromKontrol+0x50c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d902      	bls.n	8000614 <eepromKontrol+0x3e0>
	    devirmeYukariIleriLimit=1;
 800060e:	4b4c      	ldr	r3, [pc, #304]	@ (8000740 <eepromKontrol+0x50c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000614:	4b4b      	ldr	r3, [pc, #300]	@ (8000744 <eepromKontrol+0x510>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d902      	bls.n	8000622 <eepromKontrol+0x3ee>
	    devirmeAsagiGeriLimit=1;
 800061c:	4b49      	ldr	r3, [pc, #292]	@ (8000744 <eepromKontrol+0x510>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8000622:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <eepromKontrol+0x514>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d902      	bls.n	8000630 <eepromKontrol+0x3fc>
	    devirmeSilindirTipi=0;
 800062a:	4b47      	ldr	r3, [pc, #284]	@ (8000748 <eepromKontrol+0x514>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8000630:	4b46      	ldr	r3, [pc, #280]	@ (800074c <eepromKontrol+0x518>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d902      	bls.n	800063e <eepromKontrol+0x40a>
	    platformSilindirTipi=0;
 8000638:	4b44      	ldr	r3, [pc, #272]	@ (800074c <eepromKontrol+0x518>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 800063e:	4b44      	ldr	r3, [pc, #272]	@ (8000750 <eepromKontrol+0x51c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d902      	bls.n	800064c <eepromKontrol+0x418>
	    yukariValfTmr=0;
 8000646:	4b42      	ldr	r3, [pc, #264]	@ (8000750 <eepromKontrol+0x51c>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800064c:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <eepromKontrol+0x520>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d902      	bls.n	800065a <eepromKontrol+0x426>
	    asagiValfTmr=0;
 8000654:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <eepromKontrol+0x520>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800065a:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <eepromKontrol+0x524>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b05      	cmp	r3, #5
 8000660:	d902      	bls.n	8000668 <eepromKontrol+0x434>
	    devirmeYukariIleriTmr=0;
 8000662:	4b3d      	ldr	r3, [pc, #244]	@ (8000758 <eepromKontrol+0x524>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <eepromKontrol+0x528>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b05      	cmp	r3, #5
 800066e:	d902      	bls.n	8000676 <eepromKontrol+0x442>
	    devirmeAsagiGeriTmr=0;
 8000670:	4b3a      	ldr	r3, [pc, #232]	@ (800075c <eepromKontrol+0x528>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000676:	4b3a      	ldr	r3, [pc, #232]	@ (8000760 <eepromKontrol+0x52c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2bb4      	cmp	r3, #180	@ 0xb4
 800067c:	d902      	bls.n	8000684 <eepromKontrol+0x450>
	    makineCalismaTmr=60;
 800067e:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <eepromKontrol+0x52c>)
 8000680:	223c      	movs	r2, #60	@ 0x3c
 8000682:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8000684:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <eepromKontrol+0x530>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d902      	bls.n	8000692 <eepromKontrol+0x45e>
	    buzzer=0;
 800068c:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <eepromKontrol+0x530>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <eepromKontrol+0x534>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d902      	bls.n	80006a0 <eepromKontrol+0x46c>
	    demoMode=0;
 800069a:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <eepromKontrol+0x534>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80006a0:	4b32      	ldr	r3, [pc, #200]	@ (800076c <eepromKontrol+0x538>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d902      	bls.n	80006ae <eepromKontrol+0x47a>
	    calismaSayModu=0;
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <eepromKontrol+0x538>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <eepromKontrol+0x53c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d902      	bls.n	80006bc <eepromKontrol+0x488>
	    dilSecim=0;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000770 <eepromKontrol+0x53c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <eepromKontrol+0x540>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d902      	bls.n	80006ca <eepromKontrol+0x496>
		iotMode=0;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <eepromKontrol+0x540>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f854 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	@ 0xfa
 80006d2:	f003 ffbd 	bl	8004650 <HAL_Delay>

	convertArrays(2);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f84e 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006dc:	20fa      	movs	r0, #250	@ 0xfa
 80006de:	f003 ffb7 	bl	8004650 <HAL_Delay>

	convertArrays(3);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f848 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006e8:	20fa      	movs	r0, #250	@ 0xfa
 80006ea:	f003 ffb1 	bl	8004650 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <eepromKontrol+0x53c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fd0e 	bl	8001114 <loadMenuTexts>
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20001381 	.word	0x20001381
 8000704:	20001382 	.word	0x20001382
 8000708:	20001383 	.word	0x20001383
 800070c:	20001384 	.word	0x20001384
 8000710:	20001385 	.word	0x20001385
 8000714:	20001386 	.word	0x20001386
 8000718:	2000138a 	.word	0x2000138a
 800071c:	20001387 	.word	0x20001387
 8000720:	20001397 	.word	0x20001397
 8000724:	20001388 	.word	0x20001388
 8000728:	20001398 	.word	0x20001398
 800072c:	20001389 	.word	0x20001389
 8000730:	2000138b 	.word	0x2000138b
 8000734:	20001399 	.word	0x20001399
 8000738:	2000138c 	.word	0x2000138c
 800073c:	2000138d 	.word	0x2000138d
 8000740:	2000138e 	.word	0x2000138e
 8000744:	2000138f 	.word	0x2000138f
 8000748:	20001390 	.word	0x20001390
 800074c:	20001391 	.word	0x20001391
 8000750:	20001392 	.word	0x20001392
 8000754:	20001393 	.word	0x20001393
 8000758:	20001394 	.word	0x20001394
 800075c:	20001395 	.word	0x20001395
 8000760:	20001396 	.word	0x20001396
 8000764:	2000139a 	.word	0x2000139a
 8000768:	2000139b 	.word	0x2000139b
 800076c:	2000139d 	.word	0x2000139d
 8000770:	2000139e 	.word	0x2000139e
 8000774:	2000139c 	.word	0x2000139c

08000778 <convertArrays>:
		HAL_Delay(500);
		lcd_clear();
	}
}

void convertArrays(int state) {
 8000778:	b480      	push	{r7}
 800077a:	b08b      	sub	sp, #44	@ 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d120      	bne.n	80007c8 <convertArrays+0x50>
		int eepromVal = idStartPos;
 8000786:	4b3a      	ldr	r3, [pc, #232]	@ (8000870 <convertArrays+0xf8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	e016      	b.n	80007c0 <convertArrays+0x48>
			characterPos = eepromData[eepromVal];
 8000792:	4a38      	ldr	r2, [pc, #224]	@ (8000874 <convertArrays+0xfc>)
 8000794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	4413      	add	r3, r2
 800079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800079e:	4613      	mov	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80007a2:	4a35      	ldr	r2, [pc, #212]	@ (8000878 <convertArrays+0x100>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	7819      	ldrb	r1, [r3, #0]
 80007aa:	4a34      	ldr	r2, [pc, #208]	@ (800087c <convertArrays+0x104>)
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	3301      	adds	r3, #1
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	3301      	adds	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dde5      	ble.n	8000792 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80007c6:	e04d      	b.n	8000864 <convertArrays+0xec>
	} else if(state == 2) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d125      	bne.n	800081a <convertArrays+0xa2>
		int eepromVal = ssidStartPos;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <convertArrays+0x108>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e01b      	b.n	8000812 <convertArrays+0x9a>
			if(eepromData[eepromVal] != 0) {
 80007da:	4a26      	ldr	r2, [pc, #152]	@ (8000874 <convertArrays+0xfc>)
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	d010      	beq.n	800080c <convertArrays+0x94>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <convertArrays+0xfc>)
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f6:	4923      	ldr	r1, [pc, #140]	@ (8000884 <convertArrays+0x10c>)
 80007f8:	188b      	adds	r3, r1, r2
 80007fa:	7819      	ldrb	r1, [r3, #0]
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <convertArrays+0x110>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3301      	adds	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde0      	ble.n	80007da <convertArrays+0x62>
}
 8000818:	e024      	b.n	8000864 <convertArrays+0xec>
		int eepromVal = passStartPos;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <convertArrays+0x114>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	e01b      	b.n	800085e <convertArrays+0xe6>
			if(eepromData[eepromVal] != 0) {
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <convertArrays+0xfc>)
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000832:	4313      	orrs	r3, r2
 8000834:	d010      	beq.n	8000858 <convertArrays+0xe0>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <convertArrays+0xfc>)
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000842:	4910      	ldr	r1, [pc, #64]	@ (8000884 <convertArrays+0x10c>)
 8000844:	188b      	adds	r3, r1, r2
 8000846:	7819      	ldrb	r1, [r3, #0]
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <convertArrays+0x118>)
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	3301      	adds	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b13      	cmp	r3, #19
 8000862:	dde0      	ble.n	8000826 <convertArrays+0xae>
}
 8000864:	bf00      	nop
 8000866:	372c      	adds	r7, #44	@ 0x2c
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	20000fc0 	.word	0x20000fc0
 8000878:	2000000c 	.word	0x2000000c
 800087c:	20001330 	.word	0x20001330
 8000880:	20000004 	.word	0x20000004
 8000884:	20000018 	.word	0x20000018
 8000888:	2000133c 	.word	0x2000133c
 800088c:	20000008 	.word	0x20000008
 8000890:	20001350 	.word	0x20001350

08000894 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b09e      	sub	sp, #120	@ 0x78
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80008a0:	4947      	ldr	r1, [pc, #284]	@ (80009c0 <ESP8266_Init+0x12c>)
 80008a2:	4848      	ldr	r0, [pc, #288]	@ (80009c4 <ESP8266_Init+0x130>)
 80008a4:	f007 fd56 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a8:	4846      	ldr	r0, [pc, #280]	@ (80009c4 <ESP8266_Init+0x130>)
 80008aa:	f7ff fcbb 	bl	8000224 <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4943      	ldr	r1, [pc, #268]	@ (80009c4 <ESP8266_Init+0x130>)
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f006 ff7e 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c0:	f003 fec6 	bl	8004650 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80008c4:	4940      	ldr	r1, [pc, #256]	@ (80009c8 <ESP8266_Init+0x134>)
 80008c6:	483f      	ldr	r0, [pc, #252]	@ (80009c4 <ESP8266_Init+0x130>)
 80008c8:	f007 fd44 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008cc:	483d      	ldr	r0, [pc, #244]	@ (80009c4 <ESP8266_Init+0x130>)
 80008ce:	f7ff fca9 	bl	8000224 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	493a      	ldr	r1, [pc, #232]	@ (80009c4 <ESP8266_Init+0x130>)
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f006 ff6c 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e4:	f003 feb4 	bl	8004650 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008e8:	4938      	ldr	r1, [pc, #224]	@ (80009cc <ESP8266_Init+0x138>)
 80008ea:	4836      	ldr	r0, [pc, #216]	@ (80009c4 <ESP8266_Init+0x130>)
 80008ec:	f007 fd32 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008f0:	4834      	ldr	r0, [pc, #208]	@ (80009c4 <ESP8266_Init+0x130>)
 80008f2:	f7ff fc97 	bl	8000224 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4931      	ldr	r1, [pc, #196]	@ (80009c4 <ESP8266_Init+0x130>)
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f006 ff5a 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000904:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000908:	f003 fea2 	bl	8004650 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 800090c:	4930      	ldr	r1, [pc, #192]	@ (80009d0 <ESP8266_Init+0x13c>)
 800090e:	482d      	ldr	r0, [pc, #180]	@ (80009c4 <ESP8266_Init+0x130>)
 8000910:	f007 fd20 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000914:	482b      	ldr	r0, [pc, #172]	@ (80009c4 <ESP8266_Init+0x130>)
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29b      	uxth	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	4928      	ldr	r1, [pc, #160]	@ (80009c4 <ESP8266_Init+0x130>)
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f006 ff48 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800092c:	f003 fe90 	bl	8004650 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <ESP8266_Init+0x140>)
 8000936:	ca07      	ldmia	r2, {r0, r1, r2}
 8000938:	c303      	stmia	r3!, {r0, r1}
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	3302      	adds	r3, #2
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	4618      	mov	r0, r3
 800094a:	f007 fd23 	bl	8008394 <strcat>
	strcat(str, "\",\"");
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc66 	bl	8000224 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4413      	add	r3, r2
 8000962:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <ESP8266_Init+0x144>)
 8000964:	6810      	ldr	r0, [r2, #0]
 8000966:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f007 fd10 	bl	8008394 <strcat>
	strcat(str, "\"\r\n");
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc53 	bl	8000224 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4413      	add	r3, r2
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <ESP8266_Init+0x148>)
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	461a      	mov	r2, r3
 8000994:	4912      	ldr	r1, [pc, #72]	@ (80009e0 <ESP8266_Init+0x14c>)
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <ESP8266_Init+0x130>)
 8000998:	f007 fcdc 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <ESP8266_Init+0x130>)
 800099e:	f7ff fc41 	bl	8000224 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	4906      	ldr	r1, [pc, #24]	@ (80009c4 <ESP8266_Init+0x130>)
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f006 ff04 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b4:	f003 fe4c 	bl	8004650 <HAL_Delay>
}
 80009b8:	bf00      	nop
 80009ba:	3778      	adds	r7, #120	@ 0x78
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08008bc4 	.word	0x08008bc4
 80009c4:	200013ac 	.word	0x200013ac
 80009c8:	08008bd4 	.word	0x08008bd4
 80009cc:	08008be0 	.word	0x08008be0
 80009d0:	08008be8 	.word	0x08008be8
 80009d4:	08008bf8 	.word	0x08008bf8
 80009d8:	08008c04 	.word	0x08008c04
 80009dc:	08008c08 	.word	0x08008c08
 80009e0:	08008c0c 	.word	0x08008c0c

080009e4 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80009ea:	af04      	add	r7, sp, #16
 80009ec:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 80009f0:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 80009f4:	6020      	str	r0, [r4, #0]
 80009f6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80009fa:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80009fe:	6001      	str	r1, [r0, #0]
 8000a00:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000a04:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000a08:	600a      	str	r2, [r1, #0]
 8000a0a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000a0e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000a12:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000a14:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a18:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000a1c:	f107 0014 	add.w	r0, r7, #20
 8000a20:	220c      	movs	r2, #12
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	f007 fcc5 	bl	80083b2 <strncpy>
	subMachineID[12] = '\0';
 8000a28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000a30:	2200      	movs	r2, #0
 8000a32:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a34:	4a35      	ldr	r2, [pc, #212]	@ (8000b0c <sendMachineData+0x128>)
 8000a36:	4936      	ldr	r1, [pc, #216]	@ (8000b10 <sendMachineData+0x12c>)
 8000a38:	4836      	ldr	r0, [pc, #216]	@ (8000b14 <sendMachineData+0x130>)
 8000a3a:	f007 fc8b 	bl	8008354 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3e:	4835      	ldr	r0, [pc, #212]	@ (8000b14 <sendMachineData+0x130>)
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a4c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a50:	4930      	ldr	r1, [pc, #192]	@ (8000b14 <sendMachineData+0x130>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	f006 feb0 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a58:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a5c:	f003 fdf8 	bl	8004650 <HAL_Delay>

	sprintf(local_txA,
 8000a60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000a68:	f107 0114 	add.w	r1, r7, #20
 8000a6c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a70:	4a29      	ldr	r2, [pc, #164]	@ (8000b18 <sendMachineData+0x134>)
 8000a72:	9202      	str	r2, [sp, #8]
 8000a74:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8000a78:	9201      	str	r2, [sp, #4]
 8000a7a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000a7e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	460a      	mov	r2, r1
 8000a8a:	4924      	ldr	r1, [pc, #144]	@ (8000b1c <sendMachineData+0x138>)
 8000a8c:	f007 fc62 	bl	8008354 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbc5 	bl	8000224 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000aa8:	491d      	ldr	r1, [pc, #116]	@ (8000b20 <sendMachineData+0x13c>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fc52 	bl	8008354 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fbb5 	bl	8000224 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ac2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ac6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f006 fe74 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000ad0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000ad4:	f003 fdbc 	bl	8004650 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000ad8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fba1 	bl	8000224 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000aea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000aee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	f006 fe60 	bl	80077b8 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000af8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000afc:	f003 fda8 	bl	8004650 <HAL_Delay>
}
 8000b00:	bf00      	nop
 8000b02:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08008c10 	.word	0x08008c10
 8000b10:	08008c20 	.word	0x08008c20
 8000b14:	200013ac 	.word	0x200013ac
 8000b18:	08008cb4 	.word	0x08008cb4
 8000b1c:	08008c40 	.word	0x08008c40
 8000b20:	08008cc8 	.word	0x08008cc8

08000b24 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b36:	4b50      	ldr	r3, [pc, #320]	@ (8000c78 <i2cTest+0x154>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c78 <i2cTest+0x154>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000b46:	484c      	ldr	r0, [pc, #304]	@ (8000c78 <i2cTest+0x154>)
 8000b48:	f004 fcc6 	bl	80054d8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4c:	23c0      	movs	r3, #192	@ 0xc0
 8000b4e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000b50:	2311      	movs	r3, #17
 8000b52:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4846      	ldr	r0, [pc, #280]	@ (8000c7c <i2cTest+0x158>)
 8000b62:	f004 f8e5 	bl	8004d30 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2140      	movs	r1, #64	@ 0x40
 8000b6a:	4844      	ldr	r0, [pc, #272]	@ (8000c7c <i2cTest+0x158>)
 8000b6c:	f004 fb57 	bl	800521e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	4841      	ldr	r0, [pc, #260]	@ (8000c7c <i2cTest+0x158>)
 8000b76:	f004 fb52 	bl	800521e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f003 fd68 	bl	8004650 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b80:	bf00      	nop
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	483d      	ldr	r0, [pc, #244]	@ (8000c7c <i2cTest+0x158>)
 8000b86:	f004 fb33 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d006      	beq.n	8000b9e <i2cTest+0x7a>
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	483a      	ldr	r0, [pc, #232]	@ (8000c7c <i2cTest+0x158>)
 8000b94:	f004 fb2c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d1f1      	bne.n	8000b82 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	4836      	ldr	r0, [pc, #216]	@ (8000c7c <i2cTest+0x158>)
 8000ba4:	f004 fb3b 	bl	800521e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f003 fd51 	bl	8004650 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000bae:	bf00      	nop
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	4832      	ldr	r0, [pc, #200]	@ (8000c7c <i2cTest+0x158>)
 8000bb4:	f004 fb1c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d0f8      	beq.n	8000bb0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	@ 0x40
 8000bc2:	482e      	ldr	r0, [pc, #184]	@ (8000c7c <i2cTest+0x158>)
 8000bc4:	f004 fb2b 	bl	800521e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bc8:	200a      	movs	r0, #10
 8000bca:	f003 fd41 	bl	8004650 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000bce:	bf00      	nop
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	482a      	ldr	r0, [pc, #168]	@ (8000c7c <i2cTest+0x158>)
 8000bd4:	f004 fb0c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d0f8      	beq.n	8000bd0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	4826      	ldr	r0, [pc, #152]	@ (8000c7c <i2cTest+0x158>)
 8000be4:	f004 fb1b 	bl	800521e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f003 fd31 	bl	8004650 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000bee:	bf00      	nop
 8000bf0:	2140      	movs	r1, #64	@ 0x40
 8000bf2:	4822      	ldr	r0, [pc, #136]	@ (8000c7c <i2cTest+0x158>)
 8000bf4:	f004 fafc 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d1f8      	bne.n	8000bf0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	481e      	ldr	r0, [pc, #120]	@ (8000c7c <i2cTest+0x158>)
 8000c04:	f004 fb0b 	bl	800521e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f003 fd21 	bl	8004650 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c0e:	bf00      	nop
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <i2cTest+0x158>)
 8000c14:	f004 faec 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d1f8      	bne.n	8000c10 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	@ 0xc0
 8000c20:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <i2cTest+0x158>)
 8000c34:	f004 f87c 	bl	8004d30 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <i2cTest+0x154>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <i2cTest+0x154>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c46:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <i2cTest+0x154>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c56:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <i2cTest+0x154>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <i2cTest+0x154>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <i2cTest+0x154>)
 8000c6a:	f004 faf1 	bl	8005250 <HAL_I2C_Init>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20001bc4 	.word	0x20001bc4
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000c8a:	20c8      	movs	r0, #200	@ 0xc8
 8000c8c:	f003 fce0 	bl	8004650 <HAL_Delay>
	lcd_clear();
 8000c90:	f002 ffb0 	bl	8003bf4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d13e      	bne.n	8000d18 <printTemplate+0x98>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d13b      	bne.n	8000d18 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000ca0:	4a9a      	ldr	r2, [pc, #616]	@ (8000f0c <printTemplate+0x28c>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f002 ff79 	bl	8003b9c <lcd_print>
		lcd_print(2, 3, "0");
 8000caa:	4a99      	ldr	r2, [pc, #612]	@ (8000f10 <printTemplate+0x290>)
 8000cac:	2103      	movs	r1, #3
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f002 ff74 	bl	8003b9c <lcd_print>
		lcd_print(2, 4, "1");
 8000cb4:	4a97      	ldr	r2, [pc, #604]	@ (8000f14 <printTemplate+0x294>)
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f002 ff6f 	bl	8003b9c <lcd_print>
		lcd_print(2, 5, "2");
 8000cbe:	4a96      	ldr	r2, [pc, #600]	@ (8000f18 <printTemplate+0x298>)
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f002 ff6a 	bl	8003b9c <lcd_print>
		lcd_print(2, 6, "3");
 8000cc8:	4a94      	ldr	r2, [pc, #592]	@ (8000f1c <printTemplate+0x29c>)
 8000cca:	2106      	movs	r1, #6
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 ff65 	bl	8003b9c <lcd_print>
		lcd_print(2, 7, "4");
 8000cd2:	4a93      	ldr	r2, [pc, #588]	@ (8000f20 <printTemplate+0x2a0>)
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f002 ff60 	bl	8003b9c <lcd_print>
		lcd_print(2, 10, "5");
 8000cdc:	4a91      	ldr	r2, [pc, #580]	@ (8000f24 <printTemplate+0x2a4>)
 8000cde:	210a      	movs	r1, #10
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f002 ff5b 	bl	8003b9c <lcd_print>
		lcd_print(2, 11, "6");
 8000ce6:	4a90      	ldr	r2, [pc, #576]	@ (8000f28 <printTemplate+0x2a8>)
 8000ce8:	210b      	movs	r1, #11
 8000cea:	2002      	movs	r0, #2
 8000cec:	f002 ff56 	bl	8003b9c <lcd_print>
		lcd_print(2, 12, "7");
 8000cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8000f2c <printTemplate+0x2ac>)
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f002 ff51 	bl	8003b9c <lcd_print>
		lcd_print(2, 13, "8");
 8000cfa:	4a8d      	ldr	r2, [pc, #564]	@ (8000f30 <printTemplate+0x2b0>)
 8000cfc:	210d      	movs	r1, #13
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f002 ff4c 	bl	8003b9c <lcd_print>
		lcd_print(2, 14, "9");
 8000d04:	4a8b      	ldr	r2, [pc, #556]	@ (8000f34 <printTemplate+0x2b4>)
 8000d06:	210e      	movs	r1, #14
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f002 ff47 	bl	8003b9c <lcd_print>
		lcd_gotoxy(2, 3);
 8000d0e:	2103      	movs	r1, #3
 8000d10:	2002      	movs	r0, #2
 8000d12:	f002 ff24 	bl	8003b5e <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d16:	e0f5      	b.n	8000f04 <printTemplate+0x284>
	} else if(type == 2) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d178      	bne.n	8000e10 <printTemplate+0x190>
		if(page == 1) {
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d114      	bne.n	8000d4e <printTemplate+0xce>
			lcd_clear();
 8000d24:	f002 ff66 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f003 fc91 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d2e:	4a82      	ldr	r2, [pc, #520]	@ (8000f38 <printTemplate+0x2b8>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	2001      	movs	r0, #1
 8000d34:	f002 ff32 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d38:	4a80      	ldr	r2, [pc, #512]	@ (8000f3c <printTemplate+0x2bc>)
 8000d3a:	2107      	movs	r1, #7
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f002 ff2d 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d42:	4a7f      	ldr	r2, [pc, #508]	@ (8000f40 <printTemplate+0x2c0>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	2002      	movs	r0, #2
 8000d48:	f002 ff28 	bl	8003b9c <lcd_print>
}
 8000d4c:	e0da      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 2) {
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d114      	bne.n	8000d7e <printTemplate+0xfe>
			lcd_clear();
 8000d54:	f002 ff4e 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f003 fc79 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d5e:	4a79      	ldr	r2, [pc, #484]	@ (8000f44 <printTemplate+0x2c4>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	2001      	movs	r0, #1
 8000d64:	f002 ff1a 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d68:	4a74      	ldr	r2, [pc, #464]	@ (8000f3c <printTemplate+0x2bc>)
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f002 ff15 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000d72:	4a75      	ldr	r2, [pc, #468]	@ (8000f48 <printTemplate+0x2c8>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2002      	movs	r0, #2
 8000d78:	f002 ff10 	bl	8003b9c <lcd_print>
}
 8000d7c:	e0c2      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 3) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d114      	bne.n	8000dae <printTemplate+0x12e>
			lcd_clear();
 8000d84:	f002 ff36 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000d88:	2064      	movs	r0, #100	@ 0x64
 8000d8a:	f003 fc61 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d8e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f38 <printTemplate+0x2b8>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	2001      	movs	r0, #1
 8000d94:	f002 ff02 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d98:	4a68      	ldr	r2, [pc, #416]	@ (8000f3c <printTemplate+0x2bc>)
 8000d9a:	2107      	movs	r1, #7
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f002 fefd 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000da2:	4a6a      	ldr	r2, [pc, #424]	@ (8000f4c <printTemplate+0x2cc>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	2002      	movs	r0, #2
 8000da8:	f002 fef8 	bl	8003b9c <lcd_print>
}
 8000dac:	e0aa      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 4) {
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d114      	bne.n	8000dde <printTemplate+0x15e>
			lcd_clear();
 8000db4:	f002 ff1e 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000db8:	2064      	movs	r0, #100	@ 0x64
 8000dba:	f003 fc49 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8000f38 <printTemplate+0x2b8>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f002 feea 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8000f3c <printTemplate+0x2bc>)
 8000dca:	2107      	movs	r1, #7
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f002 fee5 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000dd2:	4a5f      	ldr	r2, [pc, #380]	@ (8000f50 <printTemplate+0x2d0>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 fee0 	bl	8003b9c <lcd_print>
}
 8000ddc:	e092      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 5) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	f040 808f 	bne.w	8000f04 <printTemplate+0x284>
			lcd_clear();
 8000de6:	f002 ff05 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f003 fc30 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000df0:	4a51      	ldr	r2, [pc, #324]	@ (8000f38 <printTemplate+0x2b8>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2001      	movs	r0, #1
 8000df6:	f002 fed1 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dfa:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <printTemplate+0x2bc>)
 8000dfc:	2107      	movs	r1, #7
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f002 fecc 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e04:	4a53      	ldr	r2, [pc, #332]	@ (8000f54 <printTemplate+0x2d4>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f002 fec7 	bl	8003b9c <lcd_print>
}
 8000e0e:	e079      	b.n	8000f04 <printTemplate+0x284>
	} else if(type == 3) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d176      	bne.n	8000f04 <printTemplate+0x284>
		if(page == 1) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d114      	bne.n	8000e46 <printTemplate+0x1c6>
			lcd_clear();
 8000e1c:	f002 feea 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f003 fc15 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e26:	4a4c      	ldr	r2, [pc, #304]	@ (8000f58 <printTemplate+0x2d8>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f002 feb6 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e30:	4a4a      	ldr	r2, [pc, #296]	@ (8000f5c <printTemplate+0x2dc>)
 8000e32:	2107      	movs	r1, #7
 8000e34:	2001      	movs	r0, #1
 8000e36:	f002 feb1 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e3a:	4a41      	ldr	r2, [pc, #260]	@ (8000f40 <printTemplate+0x2c0>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f002 feac 	bl	8003b9c <lcd_print>
}
 8000e44:	e05e      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 2) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d114      	bne.n	8000e76 <printTemplate+0x1f6>
			lcd_clear();
 8000e4c:	f002 fed2 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f003 fbfd 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e56:	4a40      	ldr	r2, [pc, #256]	@ (8000f58 <printTemplate+0x2d8>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f002 fe9e 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e60:	4a3e      	ldr	r2, [pc, #248]	@ (8000f5c <printTemplate+0x2dc>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	2001      	movs	r0, #1
 8000e66:	f002 fe99 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e6a:	4a37      	ldr	r2, [pc, #220]	@ (8000f48 <printTemplate+0x2c8>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f002 fe94 	bl	8003b9c <lcd_print>
}
 8000e74:	e046      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 3) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d114      	bne.n	8000ea6 <printTemplate+0x226>
			lcd_clear();
 8000e7c:	f002 feba 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	@ 0x64
 8000e82:	f003 fbe5 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e86:	4a34      	ldr	r2, [pc, #208]	@ (8000f58 <printTemplate+0x2d8>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f002 fe86 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <printTemplate+0x2dc>)
 8000e92:	2107      	movs	r1, #7
 8000e94:	2001      	movs	r0, #1
 8000e96:	f002 fe81 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000f4c <printTemplate+0x2cc>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f002 fe7c 	bl	8003b9c <lcd_print>
}
 8000ea4:	e02e      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 4) {
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d114      	bne.n	8000ed6 <printTemplate+0x256>
			lcd_clear();
 8000eac:	f002 fea2 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000eb0:	2064      	movs	r0, #100	@ 0x64
 8000eb2:	f003 fbcd 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000eb6:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <printTemplate+0x2d8>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f002 fe6e 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ec0:	4a26      	ldr	r2, [pc, #152]	@ (8000f5c <printTemplate+0x2dc>)
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f002 fe69 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000eca:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <printTemplate+0x2d0>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f002 fe64 	bl	8003b9c <lcd_print>
}
 8000ed4:	e016      	b.n	8000f04 <printTemplate+0x284>
		} else if(page == 5) {
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d113      	bne.n	8000f04 <printTemplate+0x284>
			lcd_clear();
 8000edc:	f002 fe8a 	bl	8003bf4 <lcd_clear>
			HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	@ 0x64
 8000ee2:	f003 fbb5 	bl	8004650 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <printTemplate+0x2d8>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 fe56 	bl	8003b9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <printTemplate+0x2dc>)
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f002 fe51 	bl	8003b9c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <printTemplate+0x2d4>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f002 fe4c 	bl	8003b9c <lcd_print>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08008d3c 	.word	0x08008d3c
 8000f10:	08008d44 	.word	0x08008d44
 8000f14:	08008d48 	.word	0x08008d48
 8000f18:	08008d4c 	.word	0x08008d4c
 8000f1c:	08008d50 	.word	0x08008d50
 8000f20:	08008d54 	.word	0x08008d54
 8000f24:	08008d58 	.word	0x08008d58
 8000f28:	08008d5c 	.word	0x08008d5c
 8000f2c:	08008d60 	.word	0x08008d60
 8000f30:	08008d64 	.word	0x08008d64
 8000f34:	08008d68 	.word	0x08008d68
 8000f38:	08008d6c 	.word	0x08008d6c
 8000f3c:	2000133c 	.word	0x2000133c
 8000f40:	08008d80 	.word	0x08008d80
 8000f44:	08008d94 	.word	0x08008d94
 8000f48:	08008d9c 	.word	0x08008d9c
 8000f4c:	08008db0 	.word	0x08008db0
 8000f50:	08008dc4 	.word	0x08008dc4
 8000f54:	08008dd8 	.word	0x08008dd8
 8000f58:	08008dec 	.word	0x08008dec
 8000f5c:	20001350 	.word	0x20001350

08000f60 <checkSlideVal>:

int checkSlideVal(int state) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d111      	bne.n	8000f92 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <checkSlideVal+0x60>)
 8000f72:	f004 f93d 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <checkSlideVal+0x20>
			return 34;
 8000f7c:	2322      	movs	r3, #34	@ 0x22
 8000f7e:	e01b      	b.n	8000fb8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f80:	2108      	movs	r1, #8
 8000f82:	4810      	ldr	r0, [pc, #64]	@ (8000fc4 <checkSlideVal+0x64>)
 8000f84:	f004 f934 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d113      	bne.n	8000fb6 <checkSlideVal+0x56>
			return 32;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	e012      	b.n	8000fb8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f92:	2101      	movs	r1, #1
 8000f94:	480a      	ldr	r0, [pc, #40]	@ (8000fc0 <checkSlideVal+0x60>)
 8000f96:	f004 f92b 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <checkSlideVal+0x44>
			return 35;
 8000fa0:	2323      	movs	r3, #35	@ 0x23
 8000fa2:	e009      	b.n	8000fb8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <checkSlideVal+0x64>)
 8000fa8:	f004 f922 	bl	80051f0 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <checkSlideVal+0x56>
			return 33;
 8000fb2:	2321      	movs	r3, #33	@ 0x21
 8000fb4:	e000      	b.n	8000fb8 <checkSlideVal+0x58>
		}
	}
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40011000 	.word	0x40011000

08000fc8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff f924 	bl	8000224 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8000fe4:	e08a      	b.n	80010fc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f7ff ffba 	bl	8000f60 <checkSlideVal>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	dd07      	ble.n	8001002 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f7ff ffb4 	bl	8000f60 <checkSlideVal>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b44      	ldr	r3, [pc, #272]	@ (8001110 <slideText+0x148>)
 8000ffe:	701a      	strb	r2, [r3, #0]
			break;
 8001000:	e081      	b.n	8001106 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	e075      	b.n	80010f4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f7ff ffa9 	bl	8000f60 <checkSlideVal>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd09      	ble.n	8001028 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f7ff ffa3 	bl	8000f60 <checkSlideVal>
 800101a:	4603      	mov	r3, r0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <slideText+0x148>)
 8001020:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 8001026:	e069      	b.n	80010fc <slideText+0x134>
			}

			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	4413      	add	r3, r2
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	e029      	b.n	8001086 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff ff94 	bl	8000f60 <checkSlideVal>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	dd0b      	ble.n	8001056 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f7ff ff8e 	bl	8000f60 <checkSlideVal>
 8001044:	4603      	mov	r3, r0
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <slideText+0x148>)
 800104a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001054:	e01d      	b.n	8001092 <slideText+0xca>
				}

				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	b2d9      	uxtb	r1, r3
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	f002 fda6 	bl	8003bc6 <lcd_print_char>
				HAL_Delay(30);
 800107a:	201e      	movs	r0, #30
 800107c:	f003 fae8 	bl	8004650 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	3301      	adds	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	7dfa      	ldrb	r2, [r7, #23]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbcf      	blt.n	8001032 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	3b01      	subs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	e023      	b.n	80010e2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff ff60 	bl	8000f60 <checkSlideVal>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dd0b      	ble.n	80010be <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff ff5a 	bl	8000f60 <checkSlideVal>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <slideText+0x148>)
 80010b2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80010bc:	e017      	b.n	80010ee <slideText+0x126>
				}

			    if(j >= startPos) {
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	db0a      	blt.n	80010dc <slideText+0x114>
			    	lcd_print_char(startLine, j, ' ');
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	b2d1      	uxtb	r1, r2
 80010ce:	2220      	movs	r2, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 fd78 	bl	8003bc6 <lcd_print_char>
			    	HAL_Delay(30);
 80010d6:	201e      	movs	r0, #30
 80010d8:	f003 faba 	bl	8004650 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	7dfa      	ldrb	r2, [r7, #23]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dad5      	bge.n	800109a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	3301      	adds	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	db85      	blt.n	8001008 <slideText+0x40>
	while(mainLoopVal == 1) {
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	2b01      	cmp	r3, #1
 8001100:	f43f af71 	beq.w	8000fe6 <slideText+0x1e>
			    }
			}
		}
	}
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20001380 	.word	0x20001380

08001114 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f040 853d 	bne.w	8001ba0 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8001126:	4ac7      	ldr	r2, [pc, #796]	@ (8001444 <loadMenuTexts+0x330>)
 8001128:	4bc7      	ldr	r3, [pc, #796]	@ (8001448 <loadMenuTexts+0x334>)
 800112a:	4614      	mov	r4, r2
 800112c:	461d      	mov	r5, r3
 800112e:	6828      	ldr	r0, [r5, #0]
 8001130:	6869      	ldr	r1, [r5, #4]
 8001132:	68aa      	ldr	r2, [r5, #8]
 8001134:	68eb      	ldr	r3, [r5, #12]
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	7c2b      	ldrb	r3, [r5, #16]
 800113a:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 800113c:	4ac3      	ldr	r2, [pc, #780]	@ (800144c <loadMenuTexts+0x338>)
 800113e:	4bc4      	ldr	r3, [pc, #784]	@ (8001450 <loadMenuTexts+0x33c>)
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	6828      	ldr	r0, [r5, #0]
 8001146:	6869      	ldr	r1, [r5, #4]
 8001148:	68aa      	ldr	r2, [r5, #8]
 800114a:	68eb      	ldr	r3, [r5, #12]
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	7c2b      	ldrb	r3, [r5, #16]
 8001150:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8001152:	4ac0      	ldr	r2, [pc, #768]	@ (8001454 <loadMenuTexts+0x340>)
 8001154:	4bc0      	ldr	r3, [pc, #768]	@ (8001458 <loadMenuTexts+0x344>)
 8001156:	4614      	mov	r4, r2
 8001158:	461d      	mov	r5, r3
 800115a:	6828      	ldr	r0, [r5, #0]
 800115c:	6869      	ldr	r1, [r5, #4]
 800115e:	68aa      	ldr	r2, [r5, #8]
 8001160:	68eb      	ldr	r3, [r5, #12]
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	7c2b      	ldrb	r3, [r5, #16]
 8001166:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8001168:	4abc      	ldr	r2, [pc, #752]	@ (800145c <loadMenuTexts+0x348>)
 800116a:	4bbd      	ldr	r3, [pc, #756]	@ (8001460 <loadMenuTexts+0x34c>)
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	6828      	ldr	r0, [r5, #0]
 8001172:	6869      	ldr	r1, [r5, #4]
 8001174:	68aa      	ldr	r2, [r5, #8]
 8001176:	68eb      	ldr	r3, [r5, #12]
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	7c2b      	ldrb	r3, [r5, #16]
 800117c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 800117e:	4ab9      	ldr	r2, [pc, #740]	@ (8001464 <loadMenuTexts+0x350>)
 8001180:	4bb9      	ldr	r3, [pc, #740]	@ (8001468 <loadMenuTexts+0x354>)
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	6828      	ldr	r0, [r5, #0]
 8001188:	6869      	ldr	r1, [r5, #4]
 800118a:	68aa      	ldr	r2, [r5, #8]
 800118c:	68eb      	ldr	r3, [r5, #12]
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	7c2b      	ldrb	r3, [r5, #16]
 8001192:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8001194:	4ab5      	ldr	r2, [pc, #724]	@ (800146c <loadMenuTexts+0x358>)
 8001196:	4bb6      	ldr	r3, [pc, #728]	@ (8001470 <loadMenuTexts+0x35c>)
 8001198:	4614      	mov	r4, r2
 800119a:	461d      	mov	r5, r3
 800119c:	6828      	ldr	r0, [r5, #0]
 800119e:	6869      	ldr	r1, [r5, #4]
 80011a0:	68aa      	ldr	r2, [r5, #8]
 80011a2:	68eb      	ldr	r3, [r5, #12]
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	7c2b      	ldrb	r3, [r5, #16]
 80011a8:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80011aa:	4ab2      	ldr	r2, [pc, #712]	@ (8001474 <loadMenuTexts+0x360>)
 80011ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001478 <loadMenuTexts+0x364>)
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	6828      	ldr	r0, [r5, #0]
 80011b4:	6869      	ldr	r1, [r5, #4]
 80011b6:	68aa      	ldr	r2, [r5, #8]
 80011b8:	68eb      	ldr	r3, [r5, #12]
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	7c2b      	ldrb	r3, [r5, #16]
 80011be:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80011c0:	4aae      	ldr	r2, [pc, #696]	@ (800147c <loadMenuTexts+0x368>)
 80011c2:	4baf      	ldr	r3, [pc, #700]	@ (8001480 <loadMenuTexts+0x36c>)
 80011c4:	4614      	mov	r4, r2
 80011c6:	461d      	mov	r5, r3
 80011c8:	6828      	ldr	r0, [r5, #0]
 80011ca:	6869      	ldr	r1, [r5, #4]
 80011cc:	68aa      	ldr	r2, [r5, #8]
 80011ce:	68eb      	ldr	r3, [r5, #12]
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	7c2b      	ldrb	r3, [r5, #16]
 80011d4:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80011d6:	4aab      	ldr	r2, [pc, #684]	@ (8001484 <loadMenuTexts+0x370>)
 80011d8:	4bab      	ldr	r3, [pc, #684]	@ (8001488 <loadMenuTexts+0x374>)
 80011da:	4614      	mov	r4, r2
 80011dc:	461d      	mov	r5, r3
 80011de:	6828      	ldr	r0, [r5, #0]
 80011e0:	6869      	ldr	r1, [r5, #4]
 80011e2:	68aa      	ldr	r2, [r5, #8]
 80011e4:	68eb      	ldr	r3, [r5, #12]
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	7c2b      	ldrb	r3, [r5, #16]
 80011ea:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80011ec:	4aa7      	ldr	r2, [pc, #668]	@ (800148c <loadMenuTexts+0x378>)
 80011ee:	4ba8      	ldr	r3, [pc, #672]	@ (8001490 <loadMenuTexts+0x37c>)
 80011f0:	4614      	mov	r4, r2
 80011f2:	461d      	mov	r5, r3
 80011f4:	6828      	ldr	r0, [r5, #0]
 80011f6:	6869      	ldr	r1, [r5, #4]
 80011f8:	68aa      	ldr	r2, [r5, #8]
 80011fa:	68eb      	ldr	r3, [r5, #12]
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	7c2b      	ldrb	r3, [r5, #16]
 8001200:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8001202:	4aa4      	ldr	r2, [pc, #656]	@ (8001494 <loadMenuTexts+0x380>)
 8001204:	4ba4      	ldr	r3, [pc, #656]	@ (8001498 <loadMenuTexts+0x384>)
 8001206:	4614      	mov	r4, r2
 8001208:	461d      	mov	r5, r3
 800120a:	6828      	ldr	r0, [r5, #0]
 800120c:	6869      	ldr	r1, [r5, #4]
 800120e:	68aa      	ldr	r2, [r5, #8]
 8001210:	68eb      	ldr	r3, [r5, #12]
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	7c2b      	ldrb	r3, [r5, #16]
 8001216:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8001218:	4aa0      	ldr	r2, [pc, #640]	@ (800149c <loadMenuTexts+0x388>)
 800121a:	4ba1      	ldr	r3, [pc, #644]	@ (80014a0 <loadMenuTexts+0x38c>)
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	6828      	ldr	r0, [r5, #0]
 8001222:	6869      	ldr	r1, [r5, #4]
 8001224:	68aa      	ldr	r2, [r5, #8]
 8001226:	68eb      	ldr	r3, [r5, #12]
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	7c2b      	ldrb	r3, [r5, #16]
 800122c:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 800122e:	4a9d      	ldr	r2, [pc, #628]	@ (80014a4 <loadMenuTexts+0x390>)
 8001230:	4b9d      	ldr	r3, [pc, #628]	@ (80014a8 <loadMenuTexts+0x394>)
 8001232:	4614      	mov	r4, r2
 8001234:	461d      	mov	r5, r3
 8001236:	6828      	ldr	r0, [r5, #0]
 8001238:	6869      	ldr	r1, [r5, #4]
 800123a:	68aa      	ldr	r2, [r5, #8]
 800123c:	68eb      	ldr	r3, [r5, #12]
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	7c2b      	ldrb	r3, [r5, #16]
 8001242:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8001244:	4a99      	ldr	r2, [pc, #612]	@ (80014ac <loadMenuTexts+0x398>)
 8001246:	4b9a      	ldr	r3, [pc, #616]	@ (80014b0 <loadMenuTexts+0x39c>)
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	6828      	ldr	r0, [r5, #0]
 800124e:	6869      	ldr	r1, [r5, #4]
 8001250:	68aa      	ldr	r2, [r5, #8]
 8001252:	68eb      	ldr	r3, [r5, #12]
 8001254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001256:	7c2b      	ldrb	r3, [r5, #16]
 8001258:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800125a:	4a96      	ldr	r2, [pc, #600]	@ (80014b4 <loadMenuTexts+0x3a0>)
 800125c:	4b96      	ldr	r3, [pc, #600]	@ (80014b8 <loadMenuTexts+0x3a4>)
 800125e:	4614      	mov	r4, r2
 8001260:	461d      	mov	r5, r3
 8001262:	6828      	ldr	r0, [r5, #0]
 8001264:	6869      	ldr	r1, [r5, #4]
 8001266:	68aa      	ldr	r2, [r5, #8]
 8001268:	68eb      	ldr	r3, [r5, #12]
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	7c2b      	ldrb	r3, [r5, #16]
 800126e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8001270:	4a92      	ldr	r2, [pc, #584]	@ (80014bc <loadMenuTexts+0x3a8>)
 8001272:	4b93      	ldr	r3, [pc, #588]	@ (80014c0 <loadMenuTexts+0x3ac>)
 8001274:	4614      	mov	r4, r2
 8001276:	461d      	mov	r5, r3
 8001278:	6828      	ldr	r0, [r5, #0]
 800127a:	6869      	ldr	r1, [r5, #4]
 800127c:	68aa      	ldr	r2, [r5, #8]
 800127e:	68eb      	ldr	r3, [r5, #12]
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	7c2b      	ldrb	r3, [r5, #16]
 8001284:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8001286:	4a8f      	ldr	r2, [pc, #572]	@ (80014c4 <loadMenuTexts+0x3b0>)
 8001288:	4b8f      	ldr	r3, [pc, #572]	@ (80014c8 <loadMenuTexts+0x3b4>)
 800128a:	4614      	mov	r4, r2
 800128c:	461d      	mov	r5, r3
 800128e:	6828      	ldr	r0, [r5, #0]
 8001290:	6869      	ldr	r1, [r5, #4]
 8001292:	68aa      	ldr	r2, [r5, #8]
 8001294:	68eb      	ldr	r3, [r5, #12]
 8001296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001298:	7c2b      	ldrb	r3, [r5, #16]
 800129a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800129c:	4a8b      	ldr	r2, [pc, #556]	@ (80014cc <loadMenuTexts+0x3b8>)
 800129e:	4b8c      	ldr	r3, [pc, #560]	@ (80014d0 <loadMenuTexts+0x3bc>)
 80012a0:	4614      	mov	r4, r2
 80012a2:	461d      	mov	r5, r3
 80012a4:	6828      	ldr	r0, [r5, #0]
 80012a6:	6869      	ldr	r1, [r5, #4]
 80012a8:	68aa      	ldr	r2, [r5, #8]
 80012aa:	68eb      	ldr	r3, [r5, #12]
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	7c2b      	ldrb	r3, [r5, #16]
 80012b0:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80012b2:	4a88      	ldr	r2, [pc, #544]	@ (80014d4 <loadMenuTexts+0x3c0>)
 80012b4:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <loadMenuTexts+0x3c4>)
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6828      	ldr	r0, [r5, #0]
 80012bc:	6869      	ldr	r1, [r5, #4]
 80012be:	68aa      	ldr	r2, [r5, #8]
 80012c0:	68eb      	ldr	r3, [r5, #12]
 80012c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c4:	7c2b      	ldrb	r3, [r5, #16]
 80012c6:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80012c8:	4a84      	ldr	r2, [pc, #528]	@ (80014dc <loadMenuTexts+0x3c8>)
 80012ca:	4b85      	ldr	r3, [pc, #532]	@ (80014e0 <loadMenuTexts+0x3cc>)
 80012cc:	4614      	mov	r4, r2
 80012ce:	461d      	mov	r5, r3
 80012d0:	6828      	ldr	r0, [r5, #0]
 80012d2:	6869      	ldr	r1, [r5, #4]
 80012d4:	68aa      	ldr	r2, [r5, #8]
 80012d6:	68eb      	ldr	r3, [r5, #12]
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	7c2b      	ldrb	r3, [r5, #16]
 80012dc:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80012de:	4a81      	ldr	r2, [pc, #516]	@ (80014e4 <loadMenuTexts+0x3d0>)
 80012e0:	4b81      	ldr	r3, [pc, #516]	@ (80014e8 <loadMenuTexts+0x3d4>)
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	6828      	ldr	r0, [r5, #0]
 80012e8:	6869      	ldr	r1, [r5, #4]
 80012ea:	68aa      	ldr	r2, [r5, #8]
 80012ec:	68eb      	ldr	r3, [r5, #12]
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	7c2b      	ldrb	r3, [r5, #16]
 80012f2:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80012f4:	4a7d      	ldr	r2, [pc, #500]	@ (80014ec <loadMenuTexts+0x3d8>)
 80012f6:	4b7e      	ldr	r3, [pc, #504]	@ (80014f0 <loadMenuTexts+0x3dc>)
 80012f8:	4614      	mov	r4, r2
 80012fa:	461d      	mov	r5, r3
 80012fc:	6828      	ldr	r0, [r5, #0]
 80012fe:	6869      	ldr	r1, [r5, #4]
 8001300:	68aa      	ldr	r2, [r5, #8]
 8001302:	68eb      	ldr	r3, [r5, #12]
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	7c2b      	ldrb	r3, [r5, #16]
 8001308:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800130a:	4a7a      	ldr	r2, [pc, #488]	@ (80014f4 <loadMenuTexts+0x3e0>)
 800130c:	4b7a      	ldr	r3, [pc, #488]	@ (80014f8 <loadMenuTexts+0x3e4>)
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	6828      	ldr	r0, [r5, #0]
 8001314:	6869      	ldr	r1, [r5, #4]
 8001316:	68aa      	ldr	r2, [r5, #8]
 8001318:	68eb      	ldr	r3, [r5, #12]
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	7c2b      	ldrb	r3, [r5, #16]
 800131e:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8001320:	4a76      	ldr	r2, [pc, #472]	@ (80014fc <loadMenuTexts+0x3e8>)
 8001322:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <loadMenuTexts+0x3ec>)
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	6828      	ldr	r0, [r5, #0]
 800132a:	6869      	ldr	r1, [r5, #4]
 800132c:	68aa      	ldr	r2, [r5, #8]
 800132e:	68eb      	ldr	r3, [r5, #12]
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	7c2b      	ldrb	r3, [r5, #16]
 8001334:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8001336:	4a73      	ldr	r2, [pc, #460]	@ (8001504 <loadMenuTexts+0x3f0>)
 8001338:	4b73      	ldr	r3, [pc, #460]	@ (8001508 <loadMenuTexts+0x3f4>)
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	6828      	ldr	r0, [r5, #0]
 8001340:	6869      	ldr	r1, [r5, #4]
 8001342:	68aa      	ldr	r2, [r5, #8]
 8001344:	68eb      	ldr	r3, [r5, #12]
 8001346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001348:	7c2b      	ldrb	r3, [r5, #16]
 800134a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 800134c:	4a6f      	ldr	r2, [pc, #444]	@ (800150c <loadMenuTexts+0x3f8>)
 800134e:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <loadMenuTexts+0x3fc>)
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	6828      	ldr	r0, [r5, #0]
 8001356:	6869      	ldr	r1, [r5, #4]
 8001358:	68aa      	ldr	r2, [r5, #8]
 800135a:	68eb      	ldr	r3, [r5, #12]
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	7c2b      	ldrb	r3, [r5, #16]
 8001360:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8001362:	4a6c      	ldr	r2, [pc, #432]	@ (8001514 <loadMenuTexts+0x400>)
 8001364:	4b6c      	ldr	r3, [pc, #432]	@ (8001518 <loadMenuTexts+0x404>)
 8001366:	4614      	mov	r4, r2
 8001368:	461d      	mov	r5, r3
 800136a:	6828      	ldr	r0, [r5, #0]
 800136c:	6869      	ldr	r1, [r5, #4]
 800136e:	68aa      	ldr	r2, [r5, #8]
 8001370:	68eb      	ldr	r3, [r5, #12]
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	7c2b      	ldrb	r3, [r5, #16]
 8001376:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8001378:	4a68      	ldr	r2, [pc, #416]	@ (800151c <loadMenuTexts+0x408>)
 800137a:	4b69      	ldr	r3, [pc, #420]	@ (8001520 <loadMenuTexts+0x40c>)
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	6828      	ldr	r0, [r5, #0]
 8001382:	6869      	ldr	r1, [r5, #4]
 8001384:	68aa      	ldr	r2, [r5, #8]
 8001386:	68eb      	ldr	r3, [r5, #12]
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	7c2b      	ldrb	r3, [r5, #16]
 800138c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800138e:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <loadMenuTexts+0x410>)
 8001390:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <loadMenuTexts+0x414>)
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	6828      	ldr	r0, [r5, #0]
 8001398:	6869      	ldr	r1, [r5, #4]
 800139a:	68aa      	ldr	r2, [r5, #8]
 800139c:	68eb      	ldr	r3, [r5, #12]
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	7c2b      	ldrb	r3, [r5, #16]
 80013a2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80013a4:	4a61      	ldr	r2, [pc, #388]	@ (800152c <loadMenuTexts+0x418>)
 80013a6:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <loadMenuTexts+0x41c>)
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6828      	ldr	r0, [r5, #0]
 80013ae:	6869      	ldr	r1, [r5, #4]
 80013b0:	68aa      	ldr	r2, [r5, #8]
 80013b2:	68eb      	ldr	r3, [r5, #12]
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	7c2b      	ldrb	r3, [r5, #16]
 80013b8:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80013ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001534 <loadMenuTexts+0x420>)
 80013bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001538 <loadMenuTexts+0x424>)
 80013be:	4614      	mov	r4, r2
 80013c0:	461d      	mov	r5, r3
 80013c2:	6828      	ldr	r0, [r5, #0]
 80013c4:	6869      	ldr	r1, [r5, #4]
 80013c6:	68aa      	ldr	r2, [r5, #8]
 80013c8:	68eb      	ldr	r3, [r5, #12]
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	7c2b      	ldrb	r3, [r5, #16]
 80013ce:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80013d0:	4a5a      	ldr	r2, [pc, #360]	@ (800153c <loadMenuTexts+0x428>)
 80013d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <loadMenuTexts+0x42c>)
 80013d4:	4614      	mov	r4, r2
 80013d6:	461d      	mov	r5, r3
 80013d8:	6828      	ldr	r0, [r5, #0]
 80013da:	6869      	ldr	r1, [r5, #4]
 80013dc:	68aa      	ldr	r2, [r5, #8]
 80013de:	68eb      	ldr	r3, [r5, #12]
 80013e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e2:	7c2b      	ldrb	r3, [r5, #16]
 80013e4:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80013e6:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <loadMenuTexts+0x430>)
 80013e8:	4b57      	ldr	r3, [pc, #348]	@ (8001548 <loadMenuTexts+0x434>)
 80013ea:	4614      	mov	r4, r2
 80013ec:	461d      	mov	r5, r3
 80013ee:	6828      	ldr	r0, [r5, #0]
 80013f0:	6869      	ldr	r1, [r5, #4]
 80013f2:	68aa      	ldr	r2, [r5, #8]
 80013f4:	68eb      	ldr	r3, [r5, #12]
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	7c2b      	ldrb	r3, [r5, #16]
 80013fa:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80013fc:	4a53      	ldr	r2, [pc, #332]	@ (800154c <loadMenuTexts+0x438>)
 80013fe:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <loadMenuTexts+0x43c>)
 8001400:	4614      	mov	r4, r2
 8001402:	461d      	mov	r5, r3
 8001404:	6828      	ldr	r0, [r5, #0]
 8001406:	6869      	ldr	r1, [r5, #4]
 8001408:	68aa      	ldr	r2, [r5, #8]
 800140a:	68eb      	ldr	r3, [r5, #12]
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	7c2b      	ldrb	r3, [r5, #16]
 8001410:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8001412:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <loadMenuTexts+0x440>)
 8001414:	4b50      	ldr	r3, [pc, #320]	@ (8001558 <loadMenuTexts+0x444>)
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	6828      	ldr	r0, [r5, #0]
 800141c:	6869      	ldr	r1, [r5, #4]
 800141e:	68aa      	ldr	r2, [r5, #8]
 8001420:	68eb      	ldr	r3, [r5, #12]
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	7c2b      	ldrb	r3, [r5, #16]
 8001426:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8001428:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <loadMenuTexts+0x448>)
 800142a:	4b4d      	ldr	r3, [pc, #308]	@ (8001560 <loadMenuTexts+0x44c>)
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	6828      	ldr	r0, [r5, #0]
 8001432:	6869      	ldr	r1, [r5, #4]
 8001434:	68aa      	ldr	r2, [r5, #8]
 8001436:	68eb      	ldr	r3, [r5, #12]
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	7c2b      	ldrb	r3, [r5, #16]
 800143c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800143e:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <loadMenuTexts+0x450>)
 8001440:	e092      	b.n	8001568 <loadMenuTexts+0x454>
 8001442:	bf00      	nop
 8001444:	200014a8 	.word	0x200014a8
 8001448:	2000015c 	.word	0x2000015c
 800144c:	200014bc 	.word	0x200014bc
 8001450:	20000170 	.word	0x20000170
 8001454:	200014d0 	.word	0x200014d0
 8001458:	20000184 	.word	0x20000184
 800145c:	200014e4 	.word	0x200014e4
 8001460:	20000198 	.word	0x20000198
 8001464:	200014f8 	.word	0x200014f8
 8001468:	200001ac 	.word	0x200001ac
 800146c:	2000150c 	.word	0x2000150c
 8001470:	200001c0 	.word	0x200001c0
 8001474:	20001520 	.word	0x20001520
 8001478:	200001d4 	.word	0x200001d4
 800147c:	20001534 	.word	0x20001534
 8001480:	200001e8 	.word	0x200001e8
 8001484:	20001548 	.word	0x20001548
 8001488:	200001fc 	.word	0x200001fc
 800148c:	2000155c 	.word	0x2000155c
 8001490:	20000210 	.word	0x20000210
 8001494:	20001570 	.word	0x20001570
 8001498:	20000224 	.word	0x20000224
 800149c:	20001584 	.word	0x20001584
 80014a0:	20000238 	.word	0x20000238
 80014a4:	20001598 	.word	0x20001598
 80014a8:	2000024c 	.word	0x2000024c
 80014ac:	200015ac 	.word	0x200015ac
 80014b0:	20000260 	.word	0x20000260
 80014b4:	200015c0 	.word	0x200015c0
 80014b8:	20000274 	.word	0x20000274
 80014bc:	200015d4 	.word	0x200015d4
 80014c0:	20000288 	.word	0x20000288
 80014c4:	200015e8 	.word	0x200015e8
 80014c8:	2000029c 	.word	0x2000029c
 80014cc:	200015fc 	.word	0x200015fc
 80014d0:	200002b0 	.word	0x200002b0
 80014d4:	20001610 	.word	0x20001610
 80014d8:	200002c4 	.word	0x200002c4
 80014dc:	20001624 	.word	0x20001624
 80014e0:	200002d8 	.word	0x200002d8
 80014e4:	20001638 	.word	0x20001638
 80014e8:	200002ec 	.word	0x200002ec
 80014ec:	2000164c 	.word	0x2000164c
 80014f0:	20000300 	.word	0x20000300
 80014f4:	20001660 	.word	0x20001660
 80014f8:	20000314 	.word	0x20000314
 80014fc:	20001674 	.word	0x20001674
 8001500:	20000328 	.word	0x20000328
 8001504:	20001688 	.word	0x20001688
 8001508:	2000033c 	.word	0x2000033c
 800150c:	2000169c 	.word	0x2000169c
 8001510:	20000350 	.word	0x20000350
 8001514:	200016b0 	.word	0x200016b0
 8001518:	20000364 	.word	0x20000364
 800151c:	200016c4 	.word	0x200016c4
 8001520:	20000378 	.word	0x20000378
 8001524:	200016d8 	.word	0x200016d8
 8001528:	2000038c 	.word	0x2000038c
 800152c:	200016ec 	.word	0x200016ec
 8001530:	200003a0 	.word	0x200003a0
 8001534:	20001700 	.word	0x20001700
 8001538:	200003b4 	.word	0x200003b4
 800153c:	20001714 	.word	0x20001714
 8001540:	200003c8 	.word	0x200003c8
 8001544:	20001728 	.word	0x20001728
 8001548:	200003dc 	.word	0x200003dc
 800154c:	2000173c 	.word	0x2000173c
 8001550:	200003f0 	.word	0x200003f0
 8001554:	20001750 	.word	0x20001750
 8001558:	20000404 	.word	0x20000404
 800155c:	20001764 	.word	0x20001764
 8001560:	20000418 	.word	0x20000418
 8001564:	20001778 	.word	0x20001778
 8001568:	4bc7      	ldr	r3, [pc, #796]	@ (8001888 <loadMenuTexts+0x774>)
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	6828      	ldr	r0, [r5, #0]
 8001570:	6869      	ldr	r1, [r5, #4]
 8001572:	68aa      	ldr	r2, [r5, #8]
 8001574:	68eb      	ldr	r3, [r5, #12]
 8001576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001578:	7c2b      	ldrb	r3, [r5, #16]
 800157a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800157c:	4ac3      	ldr	r2, [pc, #780]	@ (800188c <loadMenuTexts+0x778>)
 800157e:	4bc4      	ldr	r3, [pc, #784]	@ (8001890 <loadMenuTexts+0x77c>)
 8001580:	4614      	mov	r4, r2
 8001582:	461d      	mov	r5, r3
 8001584:	6828      	ldr	r0, [r5, #0]
 8001586:	6869      	ldr	r1, [r5, #4]
 8001588:	68aa      	ldr	r2, [r5, #8]
 800158a:	68eb      	ldr	r3, [r5, #12]
 800158c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158e:	7c2b      	ldrb	r3, [r5, #16]
 8001590:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8001592:	4ac0      	ldr	r2, [pc, #768]	@ (8001894 <loadMenuTexts+0x780>)
 8001594:	4bc0      	ldr	r3, [pc, #768]	@ (8001898 <loadMenuTexts+0x784>)
 8001596:	4614      	mov	r4, r2
 8001598:	461d      	mov	r5, r3
 800159a:	6828      	ldr	r0, [r5, #0]
 800159c:	6869      	ldr	r1, [r5, #4]
 800159e:	68aa      	ldr	r2, [r5, #8]
 80015a0:	68eb      	ldr	r3, [r5, #12]
 80015a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a4:	7c2b      	ldrb	r3, [r5, #16]
 80015a6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80015a8:	4abc      	ldr	r2, [pc, #752]	@ (800189c <loadMenuTexts+0x788>)
 80015aa:	4bbd      	ldr	r3, [pc, #756]	@ (80018a0 <loadMenuTexts+0x78c>)
 80015ac:	4614      	mov	r4, r2
 80015ae:	461d      	mov	r5, r3
 80015b0:	6828      	ldr	r0, [r5, #0]
 80015b2:	6869      	ldr	r1, [r5, #4]
 80015b4:	68aa      	ldr	r2, [r5, #8]
 80015b6:	68eb      	ldr	r3, [r5, #12]
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	7c2b      	ldrb	r3, [r5, #16]
 80015bc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80015be:	4ab9      	ldr	r2, [pc, #740]	@ (80018a4 <loadMenuTexts+0x790>)
 80015c0:	4bb9      	ldr	r3, [pc, #740]	@ (80018a8 <loadMenuTexts+0x794>)
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	6828      	ldr	r0, [r5, #0]
 80015c8:	6869      	ldr	r1, [r5, #4]
 80015ca:	68aa      	ldr	r2, [r5, #8]
 80015cc:	68eb      	ldr	r3, [r5, #12]
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	7c2b      	ldrb	r3, [r5, #16]
 80015d2:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80015d4:	4ab5      	ldr	r2, [pc, #724]	@ (80018ac <loadMenuTexts+0x798>)
 80015d6:	4bb6      	ldr	r3, [pc, #728]	@ (80018b0 <loadMenuTexts+0x79c>)
 80015d8:	4614      	mov	r4, r2
 80015da:	461d      	mov	r5, r3
 80015dc:	6828      	ldr	r0, [r5, #0]
 80015de:	6869      	ldr	r1, [r5, #4]
 80015e0:	68aa      	ldr	r2, [r5, #8]
 80015e2:	68eb      	ldr	r3, [r5, #12]
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	7c2b      	ldrb	r3, [r5, #16]
 80015e8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80015ea:	4ab2      	ldr	r2, [pc, #712]	@ (80018b4 <loadMenuTexts+0x7a0>)
 80015ec:	4bb2      	ldr	r3, [pc, #712]	@ (80018b8 <loadMenuTexts+0x7a4>)
 80015ee:	4614      	mov	r4, r2
 80015f0:	461d      	mov	r5, r3
 80015f2:	6828      	ldr	r0, [r5, #0]
 80015f4:	6869      	ldr	r1, [r5, #4]
 80015f6:	68aa      	ldr	r2, [r5, #8]
 80015f8:	68eb      	ldr	r3, [r5, #12]
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	7c2b      	ldrb	r3, [r5, #16]
 80015fe:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8001600:	4aae      	ldr	r2, [pc, #696]	@ (80018bc <loadMenuTexts+0x7a8>)
 8001602:	4baf      	ldr	r3, [pc, #700]	@ (80018c0 <loadMenuTexts+0x7ac>)
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	6828      	ldr	r0, [r5, #0]
 800160a:	6869      	ldr	r1, [r5, #4]
 800160c:	68aa      	ldr	r2, [r5, #8]
 800160e:	68eb      	ldr	r3, [r5, #12]
 8001610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001612:	7c2b      	ldrb	r3, [r5, #16]
 8001614:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8001616:	4aab      	ldr	r2, [pc, #684]	@ (80018c4 <loadMenuTexts+0x7b0>)
 8001618:	4bab      	ldr	r3, [pc, #684]	@ (80018c8 <loadMenuTexts+0x7b4>)
 800161a:	4614      	mov	r4, r2
 800161c:	461d      	mov	r5, r3
 800161e:	6828      	ldr	r0, [r5, #0]
 8001620:	6869      	ldr	r1, [r5, #4]
 8001622:	68aa      	ldr	r2, [r5, #8]
 8001624:	68eb      	ldr	r3, [r5, #12]
 8001626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001628:	7c2b      	ldrb	r3, [r5, #16]
 800162a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 800162c:	4aa7      	ldr	r2, [pc, #668]	@ (80018cc <loadMenuTexts+0x7b8>)
 800162e:	4ba8      	ldr	r3, [pc, #672]	@ (80018d0 <loadMenuTexts+0x7bc>)
 8001630:	4614      	mov	r4, r2
 8001632:	461d      	mov	r5, r3
 8001634:	6828      	ldr	r0, [r5, #0]
 8001636:	6869      	ldr	r1, [r5, #4]
 8001638:	68aa      	ldr	r2, [r5, #8]
 800163a:	68eb      	ldr	r3, [r5, #12]
 800163c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163e:	7c2b      	ldrb	r3, [r5, #16]
 8001640:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8001642:	4aa4      	ldr	r2, [pc, #656]	@ (80018d4 <loadMenuTexts+0x7c0>)
 8001644:	4ba4      	ldr	r3, [pc, #656]	@ (80018d8 <loadMenuTexts+0x7c4>)
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	6828      	ldr	r0, [r5, #0]
 800164c:	6869      	ldr	r1, [r5, #4]
 800164e:	68aa      	ldr	r2, [r5, #8]
 8001650:	68eb      	ldr	r3, [r5, #12]
 8001652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001654:	7c2b      	ldrb	r3, [r5, #16]
 8001656:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8001658:	4aa0      	ldr	r2, [pc, #640]	@ (80018dc <loadMenuTexts+0x7c8>)
 800165a:	4ba1      	ldr	r3, [pc, #644]	@ (80018e0 <loadMenuTexts+0x7cc>)
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	6828      	ldr	r0, [r5, #0]
 8001662:	6869      	ldr	r1, [r5, #4]
 8001664:	68aa      	ldr	r2, [r5, #8]
 8001666:	68eb      	ldr	r3, [r5, #12]
 8001668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166a:	7c2b      	ldrb	r3, [r5, #16]
 800166c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800166e:	4a9d      	ldr	r2, [pc, #628]	@ (80018e4 <loadMenuTexts+0x7d0>)
 8001670:	4b9d      	ldr	r3, [pc, #628]	@ (80018e8 <loadMenuTexts+0x7d4>)
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	6828      	ldr	r0, [r5, #0]
 8001678:	6869      	ldr	r1, [r5, #4]
 800167a:	68aa      	ldr	r2, [r5, #8]
 800167c:	68eb      	ldr	r3, [r5, #12]
 800167e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001680:	7c2b      	ldrb	r3, [r5, #16]
 8001682:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8001684:	4a99      	ldr	r2, [pc, #612]	@ (80018ec <loadMenuTexts+0x7d8>)
 8001686:	4b9a      	ldr	r3, [pc, #616]	@ (80018f0 <loadMenuTexts+0x7dc>)
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	6828      	ldr	r0, [r5, #0]
 800168e:	6869      	ldr	r1, [r5, #4]
 8001690:	68aa      	ldr	r2, [r5, #8]
 8001692:	68eb      	ldr	r3, [r5, #12]
 8001694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001696:	7c2b      	ldrb	r3, [r5, #16]
 8001698:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800169a:	4a96      	ldr	r2, [pc, #600]	@ (80018f4 <loadMenuTexts+0x7e0>)
 800169c:	4b96      	ldr	r3, [pc, #600]	@ (80018f8 <loadMenuTexts+0x7e4>)
 800169e:	4614      	mov	r4, r2
 80016a0:	461d      	mov	r5, r3
 80016a2:	6828      	ldr	r0, [r5, #0]
 80016a4:	6869      	ldr	r1, [r5, #4]
 80016a6:	68aa      	ldr	r2, [r5, #8]
 80016a8:	68eb      	ldr	r3, [r5, #12]
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	7c2b      	ldrb	r3, [r5, #16]
 80016ae:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80016b0:	4a92      	ldr	r2, [pc, #584]	@ (80018fc <loadMenuTexts+0x7e8>)
 80016b2:	4b93      	ldr	r3, [pc, #588]	@ (8001900 <loadMenuTexts+0x7ec>)
 80016b4:	4614      	mov	r4, r2
 80016b6:	461d      	mov	r5, r3
 80016b8:	6828      	ldr	r0, [r5, #0]
 80016ba:	6869      	ldr	r1, [r5, #4]
 80016bc:	68aa      	ldr	r2, [r5, #8]
 80016be:	68eb      	ldr	r3, [r5, #12]
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	7c2b      	ldrb	r3, [r5, #16]
 80016c4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80016c6:	4a8f      	ldr	r2, [pc, #572]	@ (8001904 <loadMenuTexts+0x7f0>)
 80016c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001908 <loadMenuTexts+0x7f4>)
 80016ca:	4614      	mov	r4, r2
 80016cc:	461d      	mov	r5, r3
 80016ce:	6828      	ldr	r0, [r5, #0]
 80016d0:	6869      	ldr	r1, [r5, #4]
 80016d2:	68aa      	ldr	r2, [r5, #8]
 80016d4:	68eb      	ldr	r3, [r5, #12]
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	7c2b      	ldrb	r3, [r5, #16]
 80016da:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80016dc:	4a8b      	ldr	r2, [pc, #556]	@ (800190c <loadMenuTexts+0x7f8>)
 80016de:	4b8c      	ldr	r3, [pc, #560]	@ (8001910 <loadMenuTexts+0x7fc>)
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	6828      	ldr	r0, [r5, #0]
 80016e6:	6869      	ldr	r1, [r5, #4]
 80016e8:	68aa      	ldr	r2, [r5, #8]
 80016ea:	68eb      	ldr	r3, [r5, #12]
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	7c2b      	ldrb	r3, [r5, #16]
 80016f0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80016f2:	4a88      	ldr	r2, [pc, #544]	@ (8001914 <loadMenuTexts+0x800>)
 80016f4:	4b88      	ldr	r3, [pc, #544]	@ (8001918 <loadMenuTexts+0x804>)
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	6828      	ldr	r0, [r5, #0]
 80016fc:	6869      	ldr	r1, [r5, #4]
 80016fe:	68aa      	ldr	r2, [r5, #8]
 8001700:	68eb      	ldr	r3, [r5, #12]
 8001702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001704:	7c2b      	ldrb	r3, [r5, #16]
 8001706:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8001708:	4a84      	ldr	r2, [pc, #528]	@ (800191c <loadMenuTexts+0x808>)
 800170a:	4b85      	ldr	r3, [pc, #532]	@ (8001920 <loadMenuTexts+0x80c>)
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	6828      	ldr	r0, [r5, #0]
 8001712:	6869      	ldr	r1, [r5, #4]
 8001714:	68aa      	ldr	r2, [r5, #8]
 8001716:	68eb      	ldr	r3, [r5, #12]
 8001718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171a:	7c2b      	ldrb	r3, [r5, #16]
 800171c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800171e:	4a81      	ldr	r2, [pc, #516]	@ (8001924 <loadMenuTexts+0x810>)
 8001720:	4b81      	ldr	r3, [pc, #516]	@ (8001928 <loadMenuTexts+0x814>)
 8001722:	4614      	mov	r4, r2
 8001724:	461d      	mov	r5, r3
 8001726:	6828      	ldr	r0, [r5, #0]
 8001728:	6869      	ldr	r1, [r5, #4]
 800172a:	68aa      	ldr	r2, [r5, #8]
 800172c:	68eb      	ldr	r3, [r5, #12]
 800172e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001730:	7c2b      	ldrb	r3, [r5, #16]
 8001732:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8001734:	4a7d      	ldr	r2, [pc, #500]	@ (800192c <loadMenuTexts+0x818>)
 8001736:	4b7e      	ldr	r3, [pc, #504]	@ (8001930 <loadMenuTexts+0x81c>)
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
 800173c:	6828      	ldr	r0, [r5, #0]
 800173e:	6869      	ldr	r1, [r5, #4]
 8001740:	68aa      	ldr	r2, [r5, #8]
 8001742:	68eb      	ldr	r3, [r5, #12]
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	7c2b      	ldrb	r3, [r5, #16]
 8001748:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800174a:	4a7a      	ldr	r2, [pc, #488]	@ (8001934 <loadMenuTexts+0x820>)
 800174c:	4b7a      	ldr	r3, [pc, #488]	@ (8001938 <loadMenuTexts+0x824>)
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	6828      	ldr	r0, [r5, #0]
 8001754:	6869      	ldr	r1, [r5, #4]
 8001756:	68aa      	ldr	r2, [r5, #8]
 8001758:	68eb      	ldr	r3, [r5, #12]
 800175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175c:	7c2b      	ldrb	r3, [r5, #16]
 800175e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8001760:	4a76      	ldr	r2, [pc, #472]	@ (800193c <loadMenuTexts+0x828>)
 8001762:	4b77      	ldr	r3, [pc, #476]	@ (8001940 <loadMenuTexts+0x82c>)
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	6828      	ldr	r0, [r5, #0]
 800176a:	6869      	ldr	r1, [r5, #4]
 800176c:	68aa      	ldr	r2, [r5, #8]
 800176e:	68eb      	ldr	r3, [r5, #12]
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	7c2b      	ldrb	r3, [r5, #16]
 8001774:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8001776:	4a73      	ldr	r2, [pc, #460]	@ (8001944 <loadMenuTexts+0x830>)
 8001778:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <loadMenuTexts+0x834>)
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	6828      	ldr	r0, [r5, #0]
 8001780:	6869      	ldr	r1, [r5, #4]
 8001782:	68aa      	ldr	r2, [r5, #8]
 8001784:	68eb      	ldr	r3, [r5, #12]
 8001786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001788:	7c2b      	ldrb	r3, [r5, #16]
 800178a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800178c:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <loadMenuTexts+0x838>)
 800178e:	4b70      	ldr	r3, [pc, #448]	@ (8001950 <loadMenuTexts+0x83c>)
 8001790:	4614      	mov	r4, r2
 8001792:	461d      	mov	r5, r3
 8001794:	6828      	ldr	r0, [r5, #0]
 8001796:	6869      	ldr	r1, [r5, #4]
 8001798:	68aa      	ldr	r2, [r5, #8]
 800179a:	68eb      	ldr	r3, [r5, #12]
 800179c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179e:	7c2b      	ldrb	r3, [r5, #16]
 80017a0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80017a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001954 <loadMenuTexts+0x840>)
 80017a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <loadMenuTexts+0x844>)
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	6828      	ldr	r0, [r5, #0]
 80017ac:	6869      	ldr	r1, [r5, #4]
 80017ae:	68aa      	ldr	r2, [r5, #8]
 80017b0:	68eb      	ldr	r3, [r5, #12]
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	7c2b      	ldrb	r3, [r5, #16]
 80017b6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80017b8:	4a68      	ldr	r2, [pc, #416]	@ (800195c <loadMenuTexts+0x848>)
 80017ba:	4b69      	ldr	r3, [pc, #420]	@ (8001960 <loadMenuTexts+0x84c>)
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	6828      	ldr	r0, [r5, #0]
 80017c2:	6869      	ldr	r1, [r5, #4]
 80017c4:	68aa      	ldr	r2, [r5, #8]
 80017c6:	68eb      	ldr	r3, [r5, #12]
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	7c2b      	ldrb	r3, [r5, #16]
 80017cc:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80017ce:	4a65      	ldr	r2, [pc, #404]	@ (8001964 <loadMenuTexts+0x850>)
 80017d0:	4b65      	ldr	r3, [pc, #404]	@ (8001968 <loadMenuTexts+0x854>)
 80017d2:	4614      	mov	r4, r2
 80017d4:	461d      	mov	r5, r3
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	6869      	ldr	r1, [r5, #4]
 80017da:	68aa      	ldr	r2, [r5, #8]
 80017dc:	68eb      	ldr	r3, [r5, #12]
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	7c2b      	ldrb	r3, [r5, #16]
 80017e2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80017e4:	4a61      	ldr	r2, [pc, #388]	@ (800196c <loadMenuTexts+0x858>)
 80017e6:	4b62      	ldr	r3, [pc, #392]	@ (8001970 <loadMenuTexts+0x85c>)
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	6828      	ldr	r0, [r5, #0]
 80017ee:	6869      	ldr	r1, [r5, #4]
 80017f0:	68aa      	ldr	r2, [r5, #8]
 80017f2:	68eb      	ldr	r3, [r5, #12]
 80017f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f6:	7c2b      	ldrb	r3, [r5, #16]
 80017f8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80017fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001974 <loadMenuTexts+0x860>)
 80017fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001978 <loadMenuTexts+0x864>)
 80017fe:	4614      	mov	r4, r2
 8001800:	461d      	mov	r5, r3
 8001802:	6828      	ldr	r0, [r5, #0]
 8001804:	6869      	ldr	r1, [r5, #4]
 8001806:	68aa      	ldr	r2, [r5, #8]
 8001808:	68eb      	ldr	r3, [r5, #12]
 800180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180c:	7c2b      	ldrb	r3, [r5, #16]
 800180e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8001810:	4a5a      	ldr	r2, [pc, #360]	@ (800197c <loadMenuTexts+0x868>)
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <loadMenuTexts+0x86c>)
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	6828      	ldr	r0, [r5, #0]
 800181a:	6869      	ldr	r1, [r5, #4]
 800181c:	68aa      	ldr	r2, [r5, #8]
 800181e:	68eb      	ldr	r3, [r5, #12]
 8001820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001822:	7c2b      	ldrb	r3, [r5, #16]
 8001824:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8001826:	4a57      	ldr	r2, [pc, #348]	@ (8001984 <loadMenuTexts+0x870>)
 8001828:	4b57      	ldr	r3, [pc, #348]	@ (8001988 <loadMenuTexts+0x874>)
 800182a:	4614      	mov	r4, r2
 800182c:	461d      	mov	r5, r3
 800182e:	6828      	ldr	r0, [r5, #0]
 8001830:	6869      	ldr	r1, [r5, #4]
 8001832:	68aa      	ldr	r2, [r5, #8]
 8001834:	68eb      	ldr	r3, [r5, #12]
 8001836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001838:	7c2b      	ldrb	r3, [r5, #16]
 800183a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 800183c:	4a53      	ldr	r2, [pc, #332]	@ (800198c <loadMenuTexts+0x878>)
 800183e:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <loadMenuTexts+0x87c>)
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	6828      	ldr	r0, [r5, #0]
 8001846:	6869      	ldr	r1, [r5, #4]
 8001848:	68aa      	ldr	r2, [r5, #8]
 800184a:	68eb      	ldr	r3, [r5, #12]
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	7c2b      	ldrb	r3, [r5, #16]
 8001850:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8001852:	4a50      	ldr	r2, [pc, #320]	@ (8001994 <loadMenuTexts+0x880>)
 8001854:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <loadMenuTexts+0x884>)
 8001856:	4614      	mov	r4, r2
 8001858:	461d      	mov	r5, r3
 800185a:	6828      	ldr	r0, [r5, #0]
 800185c:	6869      	ldr	r1, [r5, #4]
 800185e:	68aa      	ldr	r2, [r5, #8]
 8001860:	68eb      	ldr	r3, [r5, #12]
 8001862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001864:	7c2b      	ldrb	r3, [r5, #16]
 8001866:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8001868:	4a4c      	ldr	r2, [pc, #304]	@ (800199c <loadMenuTexts+0x888>)
 800186a:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <loadMenuTexts+0x88c>)
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	6828      	ldr	r0, [r5, #0]
 8001872:	6869      	ldr	r1, [r5, #4]
 8001874:	68aa      	ldr	r2, [r5, #8]
 8001876:	68eb      	ldr	r3, [r5, #12]
 8001878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187a:	7c2b      	ldrb	r3, [r5, #16]
 800187c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800187e:	4a49      	ldr	r2, [pc, #292]	@ (80019a4 <loadMenuTexts+0x890>)
 8001880:	4b49      	ldr	r3, [pc, #292]	@ (80019a8 <loadMenuTexts+0x894>)
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	e091      	b.n	80019ac <loadMenuTexts+0x898>
 8001888:	2000042c 	.word	0x2000042c
 800188c:	2000178c 	.word	0x2000178c
 8001890:	20000440 	.word	0x20000440
 8001894:	200017a0 	.word	0x200017a0
 8001898:	20000454 	.word	0x20000454
 800189c:	200017b4 	.word	0x200017b4
 80018a0:	20000468 	.word	0x20000468
 80018a4:	200017c8 	.word	0x200017c8
 80018a8:	2000047c 	.word	0x2000047c
 80018ac:	200017dc 	.word	0x200017dc
 80018b0:	20000490 	.word	0x20000490
 80018b4:	200017f0 	.word	0x200017f0
 80018b8:	200004a4 	.word	0x200004a4
 80018bc:	20001804 	.word	0x20001804
 80018c0:	200004b8 	.word	0x200004b8
 80018c4:	20001818 	.word	0x20001818
 80018c8:	200004cc 	.word	0x200004cc
 80018cc:	2000182c 	.word	0x2000182c
 80018d0:	200004e0 	.word	0x200004e0
 80018d4:	20001840 	.word	0x20001840
 80018d8:	200004f4 	.word	0x200004f4
 80018dc:	20001854 	.word	0x20001854
 80018e0:	20000508 	.word	0x20000508
 80018e4:	20001868 	.word	0x20001868
 80018e8:	2000051c 	.word	0x2000051c
 80018ec:	2000187c 	.word	0x2000187c
 80018f0:	20000530 	.word	0x20000530
 80018f4:	20001890 	.word	0x20001890
 80018f8:	20000544 	.word	0x20000544
 80018fc:	200018a4 	.word	0x200018a4
 8001900:	20000558 	.word	0x20000558
 8001904:	200018b8 	.word	0x200018b8
 8001908:	2000056c 	.word	0x2000056c
 800190c:	200018cc 	.word	0x200018cc
 8001910:	20000580 	.word	0x20000580
 8001914:	200018e0 	.word	0x200018e0
 8001918:	20000594 	.word	0x20000594
 800191c:	200018f4 	.word	0x200018f4
 8001920:	200005a8 	.word	0x200005a8
 8001924:	20001908 	.word	0x20001908
 8001928:	200005bc 	.word	0x200005bc
 800192c:	2000191c 	.word	0x2000191c
 8001930:	200005d0 	.word	0x200005d0
 8001934:	20001930 	.word	0x20001930
 8001938:	200005e4 	.word	0x200005e4
 800193c:	20001944 	.word	0x20001944
 8001940:	200005f8 	.word	0x200005f8
 8001944:	20001958 	.word	0x20001958
 8001948:	2000060c 	.word	0x2000060c
 800194c:	2000196c 	.word	0x2000196c
 8001950:	20000620 	.word	0x20000620
 8001954:	20001980 	.word	0x20001980
 8001958:	20000634 	.word	0x20000634
 800195c:	20001994 	.word	0x20001994
 8001960:	20000648 	.word	0x20000648
 8001964:	200019a8 	.word	0x200019a8
 8001968:	2000065c 	.word	0x2000065c
 800196c:	200019bc 	.word	0x200019bc
 8001970:	20000670 	.word	0x20000670
 8001974:	200019d0 	.word	0x200019d0
 8001978:	20000684 	.word	0x20000684
 800197c:	200019e4 	.word	0x200019e4
 8001980:	20000698 	.word	0x20000698
 8001984:	200019f8 	.word	0x200019f8
 8001988:	200006ac 	.word	0x200006ac
 800198c:	20001a0c 	.word	0x20001a0c
 8001990:	200006c0 	.word	0x200006c0
 8001994:	20001a20 	.word	0x20001a20
 8001998:	20000c4c 	.word	0x20000c4c
 800199c:	20001a34 	.word	0x20001a34
 80019a0:	20000c60 	.word	0x20000c60
 80019a4:	20001a48 	.word	0x20001a48
 80019a8:	20000c74 	.word	0x20000c74
 80019ac:	6828      	ldr	r0, [r5, #0]
 80019ae:	6869      	ldr	r1, [r5, #4]
 80019b0:	68aa      	ldr	r2, [r5, #8]
 80019b2:	68eb      	ldr	r3, [r5, #12]
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	7c2b      	ldrb	r3, [r5, #16]
 80019b8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80019ba:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <loadMenuTexts+0xa0c>)
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <loadMenuTexts+0xa10>)
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
 80019c2:	6828      	ldr	r0, [r5, #0]
 80019c4:	6869      	ldr	r1, [r5, #4]
 80019c6:	68aa      	ldr	r2, [r5, #8]
 80019c8:	68eb      	ldr	r3, [r5, #12]
 80019ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019cc:	7c2b      	ldrb	r3, [r5, #16]
 80019ce:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80019d0:	4a55      	ldr	r2, [pc, #340]	@ (8001b28 <loadMenuTexts+0xa14>)
 80019d2:	4b56      	ldr	r3, [pc, #344]	@ (8001b2c <loadMenuTexts+0xa18>)
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	6828      	ldr	r0, [r5, #0]
 80019da:	6869      	ldr	r1, [r5, #4]
 80019dc:	68aa      	ldr	r2, [r5, #8]
 80019de:	68eb      	ldr	r3, [r5, #12]
 80019e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e2:	7c2b      	ldrb	r3, [r5, #16]
 80019e4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <loadMenuTexts+0xa1c>)
 80019e8:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <loadMenuTexts+0xa20>)
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
 80019ee:	6828      	ldr	r0, [r5, #0]
 80019f0:	6869      	ldr	r1, [r5, #4]
 80019f2:	68aa      	ldr	r2, [r5, #8]
 80019f4:	68eb      	ldr	r3, [r5, #12]
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	7c2b      	ldrb	r3, [r5, #16]
 80019fa:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80019fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b38 <loadMenuTexts+0xa24>)
 80019fe:	4b4f      	ldr	r3, [pc, #316]	@ (8001b3c <loadMenuTexts+0xa28>)
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	6828      	ldr	r0, [r5, #0]
 8001a06:	6869      	ldr	r1, [r5, #4]
 8001a08:	68aa      	ldr	r2, [r5, #8]
 8001a0a:	68eb      	ldr	r3, [r5, #12]
 8001a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0e:	7c2b      	ldrb	r3, [r5, #16]
 8001a10:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8001a12:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <loadMenuTexts+0xa2c>)
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <loadMenuTexts+0xa30>)
 8001a16:	4614      	mov	r4, r2
 8001a18:	461d      	mov	r5, r3
 8001a1a:	6828      	ldr	r0, [r5, #0]
 8001a1c:	6869      	ldr	r1, [r5, #4]
 8001a1e:	68aa      	ldr	r2, [r5, #8]
 8001a20:	68eb      	ldr	r3, [r5, #12]
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	7c2b      	ldrb	r3, [r5, #16]
 8001a26:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8001a28:	4a47      	ldr	r2, [pc, #284]	@ (8001b48 <loadMenuTexts+0xa34>)
 8001a2a:	4b48      	ldr	r3, [pc, #288]	@ (8001b4c <loadMenuTexts+0xa38>)
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	6828      	ldr	r0, [r5, #0]
 8001a32:	6869      	ldr	r1, [r5, #4]
 8001a34:	68aa      	ldr	r2, [r5, #8]
 8001a36:	68eb      	ldr	r3, [r5, #12]
 8001a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3a:	7c2b      	ldrb	r3, [r5, #16]
 8001a3c:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8001a3e:	4a44      	ldr	r2, [pc, #272]	@ (8001b50 <loadMenuTexts+0xa3c>)
 8001a40:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <loadMenuTexts+0xa40>)
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	6828      	ldr	r0, [r5, #0]
 8001a48:	6869      	ldr	r1, [r5, #4]
 8001a4a:	68aa      	ldr	r2, [r5, #8]
 8001a4c:	68eb      	ldr	r3, [r5, #12]
 8001a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a50:	7c2b      	ldrb	r3, [r5, #16]
 8001a52:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8001a54:	4a40      	ldr	r2, [pc, #256]	@ (8001b58 <loadMenuTexts+0xa44>)
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <loadMenuTexts+0xa48>)
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	6828      	ldr	r0, [r5, #0]
 8001a5e:	6869      	ldr	r1, [r5, #4]
 8001a60:	68aa      	ldr	r2, [r5, #8]
 8001a62:	68eb      	ldr	r3, [r5, #12]
 8001a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a66:	7c2b      	ldrb	r3, [r5, #16]
 8001a68:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <loadMenuTexts+0xa4c>)
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <loadMenuTexts+0xa50>)
 8001a6e:	4614      	mov	r4, r2
 8001a70:	461d      	mov	r5, r3
 8001a72:	6828      	ldr	r0, [r5, #0]
 8001a74:	6869      	ldr	r1, [r5, #4]
 8001a76:	68aa      	ldr	r2, [r5, #8]
 8001a78:	68eb      	ldr	r3, [r5, #12]
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	7c2b      	ldrb	r3, [r5, #16]
 8001a7e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8001a80:	4a39      	ldr	r2, [pc, #228]	@ (8001b68 <loadMenuTexts+0xa54>)
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <loadMenuTexts+0xa58>)
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	6828      	ldr	r0, [r5, #0]
 8001a8a:	6869      	ldr	r1, [r5, #4]
 8001a8c:	68aa      	ldr	r2, [r5, #8]
 8001a8e:	68eb      	ldr	r3, [r5, #12]
 8001a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a92:	7c2b      	ldrb	r3, [r5, #16]
 8001a94:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8001a96:	4a36      	ldr	r2, [pc, #216]	@ (8001b70 <loadMenuTexts+0xa5c>)
 8001a98:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <loadMenuTexts+0xa60>)
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	6828      	ldr	r0, [r5, #0]
 8001aa0:	6869      	ldr	r1, [r5, #4]
 8001aa2:	68aa      	ldr	r2, [r5, #8]
 8001aa4:	68eb      	ldr	r3, [r5, #12]
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	7c2b      	ldrb	r3, [r5, #16]
 8001aaa:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8001aac:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <loadMenuTexts+0xa64>)
 8001aae:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <loadMenuTexts+0xa68>)
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	6828      	ldr	r0, [r5, #0]
 8001ab6:	6869      	ldr	r1, [r5, #4]
 8001ab8:	68aa      	ldr	r2, [r5, #8]
 8001aba:	68eb      	ldr	r3, [r5, #12]
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	7c2b      	ldrb	r3, [r5, #16]
 8001ac0:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b80 <loadMenuTexts+0xa6c>)
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <loadMenuTexts+0xa70>)
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	6828      	ldr	r0, [r5, #0]
 8001acc:	6869      	ldr	r1, [r5, #4]
 8001ace:	68aa      	ldr	r2, [r5, #8]
 8001ad0:	68eb      	ldr	r3, [r5, #12]
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	7c2b      	ldrb	r3, [r5, #16]
 8001ad6:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8001ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b88 <loadMenuTexts+0xa74>)
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <loadMenuTexts+0xa78>)
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	6828      	ldr	r0, [r5, #0]
 8001ae2:	6869      	ldr	r1, [r5, #4]
 8001ae4:	68aa      	ldr	r2, [r5, #8]
 8001ae6:	68eb      	ldr	r3, [r5, #12]
 8001ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aea:	7c2b      	ldrb	r3, [r5, #16]
 8001aec:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8001aee:	4a28      	ldr	r2, [pc, #160]	@ (8001b90 <loadMenuTexts+0xa7c>)
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <loadMenuTexts+0xa80>)
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	6828      	ldr	r0, [r5, #0]
 8001af8:	6869      	ldr	r1, [r5, #4]
 8001afa:	68aa      	ldr	r2, [r5, #8]
 8001afc:	68eb      	ldr	r3, [r5, #12]
 8001afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b00:	7c2b      	ldrb	r3, [r5, #16]
 8001b02:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8001b04:	4a24      	ldr	r2, [pc, #144]	@ (8001b98 <loadMenuTexts+0xa84>)
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <loadMenuTexts+0xa88>)
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	6828      	ldr	r0, [r5, #0]
 8001b0e:	6869      	ldr	r1, [r5, #4]
 8001b10:	68aa      	ldr	r2, [r5, #8]
 8001b12:	68eb      	ldr	r3, [r5, #12]
 8001b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b16:	7c2b      	ldrb	r3, [r5, #16]
 8001b18:	7023      	strb	r3, [r4, #0]
 8001b1a:	f000 bd3a 	b.w	8002592 <loadMenuTexts+0x147e>
 8001b1e:	bf00      	nop
 8001b20:	20001a5c 	.word	0x20001a5c
 8001b24:	20000c88 	.word	0x20000c88
 8001b28:	20001a70 	.word	0x20001a70
 8001b2c:	20000cec 	.word	0x20000cec
 8001b30:	20001a84 	.word	0x20001a84
 8001b34:	20000d00 	.word	0x20000d00
 8001b38:	20001a98 	.word	0x20001a98
 8001b3c:	20000d3c 	.word	0x20000d3c
 8001b40:	20001aac 	.word	0x20001aac
 8001b44:	20000d50 	.word	0x20000d50
 8001b48:	20001ac0 	.word	0x20001ac0
 8001b4c:	20000d8c 	.word	0x20000d8c
 8001b50:	20001ad4 	.word	0x20001ad4
 8001b54:	20000da0 	.word	0x20000da0
 8001b58:	20001ae8 	.word	0x20001ae8
 8001b5c:	20000ddc 	.word	0x20000ddc
 8001b60:	20001afc 	.word	0x20001afc
 8001b64:	20000e04 	.word	0x20000e04
 8001b68:	20001b10 	.word	0x20001b10
 8001b6c:	20000e2c 	.word	0x20000e2c
 8001b70:	20001b24 	.word	0x20001b24
 8001b74:	20000e54 	.word	0x20000e54
 8001b78:	20001b38 	.word	0x20001b38
 8001b7c:	20000e7c 	.word	0x20000e7c
 8001b80:	20001b4c 	.word	0x20001b4c
 8001b84:	20000ea4 	.word	0x20000ea4
 8001b88:	20001b60 	.word	0x20001b60
 8001b8c:	20000ecc 	.word	0x20000ecc
 8001b90:	20001b74 	.word	0x20001b74
 8001b94:	20000ef4 	.word	0x20000ef4
 8001b98:	20001b88 	.word	0x20001b88
 8001b9c:	20000f1c 	.word	0x20000f1c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8001ba0:	4ac6      	ldr	r2, [pc, #792]	@ (8001ebc <loadMenuTexts+0xda8>)
 8001ba2:	4bc7      	ldr	r3, [pc, #796]	@ (8001ec0 <loadMenuTexts+0xdac>)
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	6828      	ldr	r0, [r5, #0]
 8001baa:	6869      	ldr	r1, [r5, #4]
 8001bac:	68aa      	ldr	r2, [r5, #8]
 8001bae:	68eb      	ldr	r3, [r5, #12]
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	7c2b      	ldrb	r3, [r5, #16]
 8001bb4:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8001bb6:	4ac3      	ldr	r2, [pc, #780]	@ (8001ec4 <loadMenuTexts+0xdb0>)
 8001bb8:	4bc3      	ldr	r3, [pc, #780]	@ (8001ec8 <loadMenuTexts+0xdb4>)
 8001bba:	4614      	mov	r4, r2
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	6828      	ldr	r0, [r5, #0]
 8001bc0:	6869      	ldr	r1, [r5, #4]
 8001bc2:	68aa      	ldr	r2, [r5, #8]
 8001bc4:	68eb      	ldr	r3, [r5, #12]
 8001bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc8:	7c2b      	ldrb	r3, [r5, #16]
 8001bca:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8001bcc:	4abf      	ldr	r2, [pc, #764]	@ (8001ecc <loadMenuTexts+0xdb8>)
 8001bce:	4bc0      	ldr	r3, [pc, #768]	@ (8001ed0 <loadMenuTexts+0xdbc>)
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	6828      	ldr	r0, [r5, #0]
 8001bd6:	6869      	ldr	r1, [r5, #4]
 8001bd8:	68aa      	ldr	r2, [r5, #8]
 8001bda:	68eb      	ldr	r3, [r5, #12]
 8001bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bde:	7c2b      	ldrb	r3, [r5, #16]
 8001be0:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8001be2:	4abc      	ldr	r2, [pc, #752]	@ (8001ed4 <loadMenuTexts+0xdc0>)
 8001be4:	4bbc      	ldr	r3, [pc, #752]	@ (8001ed8 <loadMenuTexts+0xdc4>)
 8001be6:	4614      	mov	r4, r2
 8001be8:	461d      	mov	r5, r3
 8001bea:	6828      	ldr	r0, [r5, #0]
 8001bec:	6869      	ldr	r1, [r5, #4]
 8001bee:	68aa      	ldr	r2, [r5, #8]
 8001bf0:	68eb      	ldr	r3, [r5, #12]
 8001bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf4:	7c2b      	ldrb	r3, [r5, #16]
 8001bf6:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8001bf8:	4ab8      	ldr	r2, [pc, #736]	@ (8001edc <loadMenuTexts+0xdc8>)
 8001bfa:	4bb9      	ldr	r3, [pc, #740]	@ (8001ee0 <loadMenuTexts+0xdcc>)
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	6828      	ldr	r0, [r5, #0]
 8001c02:	6869      	ldr	r1, [r5, #4]
 8001c04:	68aa      	ldr	r2, [r5, #8]
 8001c06:	68eb      	ldr	r3, [r5, #12]
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	7c2b      	ldrb	r3, [r5, #16]
 8001c0c:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8001c0e:	4ab5      	ldr	r2, [pc, #724]	@ (8001ee4 <loadMenuTexts+0xdd0>)
 8001c10:	4bb5      	ldr	r3, [pc, #724]	@ (8001ee8 <loadMenuTexts+0xdd4>)
 8001c12:	4614      	mov	r4, r2
 8001c14:	461d      	mov	r5, r3
 8001c16:	6828      	ldr	r0, [r5, #0]
 8001c18:	6869      	ldr	r1, [r5, #4]
 8001c1a:	68aa      	ldr	r2, [r5, #8]
 8001c1c:	68eb      	ldr	r3, [r5, #12]
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	7c2b      	ldrb	r3, [r5, #16]
 8001c22:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8001c24:	4ab1      	ldr	r2, [pc, #708]	@ (8001eec <loadMenuTexts+0xdd8>)
 8001c26:	4bb2      	ldr	r3, [pc, #712]	@ (8001ef0 <loadMenuTexts+0xddc>)
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	6828      	ldr	r0, [r5, #0]
 8001c2e:	6869      	ldr	r1, [r5, #4]
 8001c30:	68aa      	ldr	r2, [r5, #8]
 8001c32:	68eb      	ldr	r3, [r5, #12]
 8001c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c36:	7c2b      	ldrb	r3, [r5, #16]
 8001c38:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8001c3a:	4aae      	ldr	r2, [pc, #696]	@ (8001ef4 <loadMenuTexts+0xde0>)
 8001c3c:	4bae      	ldr	r3, [pc, #696]	@ (8001ef8 <loadMenuTexts+0xde4>)
 8001c3e:	4614      	mov	r4, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	6828      	ldr	r0, [r5, #0]
 8001c44:	6869      	ldr	r1, [r5, #4]
 8001c46:	68aa      	ldr	r2, [r5, #8]
 8001c48:	68eb      	ldr	r3, [r5, #12]
 8001c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4c:	7c2b      	ldrb	r3, [r5, #16]
 8001c4e:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8001c50:	4aaa      	ldr	r2, [pc, #680]	@ (8001efc <loadMenuTexts+0xde8>)
 8001c52:	4bab      	ldr	r3, [pc, #684]	@ (8001f00 <loadMenuTexts+0xdec>)
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	6828      	ldr	r0, [r5, #0]
 8001c5a:	6869      	ldr	r1, [r5, #4]
 8001c5c:	68aa      	ldr	r2, [r5, #8]
 8001c5e:	68eb      	ldr	r3, [r5, #12]
 8001c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c62:	7c2b      	ldrb	r3, [r5, #16]
 8001c64:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8001c66:	4aa7      	ldr	r2, [pc, #668]	@ (8001f04 <loadMenuTexts+0xdf0>)
 8001c68:	4ba7      	ldr	r3, [pc, #668]	@ (8001f08 <loadMenuTexts+0xdf4>)
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	6828      	ldr	r0, [r5, #0]
 8001c70:	6869      	ldr	r1, [r5, #4]
 8001c72:	68aa      	ldr	r2, [r5, #8]
 8001c74:	68eb      	ldr	r3, [r5, #12]
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	7c2b      	ldrb	r3, [r5, #16]
 8001c7a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8001c7c:	4aa3      	ldr	r2, [pc, #652]	@ (8001f0c <loadMenuTexts+0xdf8>)
 8001c7e:	4ba4      	ldr	r3, [pc, #656]	@ (8001f10 <loadMenuTexts+0xdfc>)
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	6828      	ldr	r0, [r5, #0]
 8001c86:	6869      	ldr	r1, [r5, #4]
 8001c88:	68aa      	ldr	r2, [r5, #8]
 8001c8a:	68eb      	ldr	r3, [r5, #12]
 8001c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c8e:	7c2b      	ldrb	r3, [r5, #16]
 8001c90:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8001c92:	4aa0      	ldr	r2, [pc, #640]	@ (8001f14 <loadMenuTexts+0xe00>)
 8001c94:	4ba0      	ldr	r3, [pc, #640]	@ (8001f18 <loadMenuTexts+0xe04>)
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	6828      	ldr	r0, [r5, #0]
 8001c9c:	6869      	ldr	r1, [r5, #4]
 8001c9e:	68aa      	ldr	r2, [r5, #8]
 8001ca0:	68eb      	ldr	r3, [r5, #12]
 8001ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca4:	7c2b      	ldrb	r3, [r5, #16]
 8001ca6:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8001ca8:	4a9c      	ldr	r2, [pc, #624]	@ (8001f1c <loadMenuTexts+0xe08>)
 8001caa:	4b9d      	ldr	r3, [pc, #628]	@ (8001f20 <loadMenuTexts+0xe0c>)
 8001cac:	4614      	mov	r4, r2
 8001cae:	461d      	mov	r5, r3
 8001cb0:	6828      	ldr	r0, [r5, #0]
 8001cb2:	6869      	ldr	r1, [r5, #4]
 8001cb4:	68aa      	ldr	r2, [r5, #8]
 8001cb6:	68eb      	ldr	r3, [r5, #12]
 8001cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cba:	7c2b      	ldrb	r3, [r5, #16]
 8001cbc:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8001cbe:	4a99      	ldr	r2, [pc, #612]	@ (8001f24 <loadMenuTexts+0xe10>)
 8001cc0:	4b99      	ldr	r3, [pc, #612]	@ (8001f28 <loadMenuTexts+0xe14>)
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	6828      	ldr	r0, [r5, #0]
 8001cc8:	6869      	ldr	r1, [r5, #4]
 8001cca:	68aa      	ldr	r2, [r5, #8]
 8001ccc:	68eb      	ldr	r3, [r5, #12]
 8001cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd0:	7c2b      	ldrb	r3, [r5, #16]
 8001cd2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8001cd4:	4a95      	ldr	r2, [pc, #596]	@ (8001f2c <loadMenuTexts+0xe18>)
 8001cd6:	4b96      	ldr	r3, [pc, #600]	@ (8001f30 <loadMenuTexts+0xe1c>)
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	6828      	ldr	r0, [r5, #0]
 8001cde:	6869      	ldr	r1, [r5, #4]
 8001ce0:	68aa      	ldr	r2, [r5, #8]
 8001ce2:	68eb      	ldr	r3, [r5, #12]
 8001ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce6:	7c2b      	ldrb	r3, [r5, #16]
 8001ce8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8001cea:	4a92      	ldr	r2, [pc, #584]	@ (8001f34 <loadMenuTexts+0xe20>)
 8001cec:	4b92      	ldr	r3, [pc, #584]	@ (8001f38 <loadMenuTexts+0xe24>)
 8001cee:	4614      	mov	r4, r2
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	6828      	ldr	r0, [r5, #0]
 8001cf4:	6869      	ldr	r1, [r5, #4]
 8001cf6:	68aa      	ldr	r2, [r5, #8]
 8001cf8:	68eb      	ldr	r3, [r5, #12]
 8001cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfc:	7c2b      	ldrb	r3, [r5, #16]
 8001cfe:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8001d00:	4a8e      	ldr	r2, [pc, #568]	@ (8001f3c <loadMenuTexts+0xe28>)
 8001d02:	4b8f      	ldr	r3, [pc, #572]	@ (8001f40 <loadMenuTexts+0xe2c>)
 8001d04:	4614      	mov	r4, r2
 8001d06:	461d      	mov	r5, r3
 8001d08:	6828      	ldr	r0, [r5, #0]
 8001d0a:	6869      	ldr	r1, [r5, #4]
 8001d0c:	68aa      	ldr	r2, [r5, #8]
 8001d0e:	68eb      	ldr	r3, [r5, #12]
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	7c2b      	ldrb	r3, [r5, #16]
 8001d14:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8001d16:	4a8b      	ldr	r2, [pc, #556]	@ (8001f44 <loadMenuTexts+0xe30>)
 8001d18:	4b8b      	ldr	r3, [pc, #556]	@ (8001f48 <loadMenuTexts+0xe34>)
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	6828      	ldr	r0, [r5, #0]
 8001d20:	6869      	ldr	r1, [r5, #4]
 8001d22:	68aa      	ldr	r2, [r5, #8]
 8001d24:	68eb      	ldr	r3, [r5, #12]
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	7c2b      	ldrb	r3, [r5, #16]
 8001d2a:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8001d2c:	4a87      	ldr	r2, [pc, #540]	@ (8001f4c <loadMenuTexts+0xe38>)
 8001d2e:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <loadMenuTexts+0xe3c>)
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	6828      	ldr	r0, [r5, #0]
 8001d36:	6869      	ldr	r1, [r5, #4]
 8001d38:	68aa      	ldr	r2, [r5, #8]
 8001d3a:	68eb      	ldr	r3, [r5, #12]
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	7c2b      	ldrb	r3, [r5, #16]
 8001d40:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8001d42:	4a84      	ldr	r2, [pc, #528]	@ (8001f54 <loadMenuTexts+0xe40>)
 8001d44:	4b84      	ldr	r3, [pc, #528]	@ (8001f58 <loadMenuTexts+0xe44>)
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
 8001d4a:	6828      	ldr	r0, [r5, #0]
 8001d4c:	6869      	ldr	r1, [r5, #4]
 8001d4e:	68aa      	ldr	r2, [r5, #8]
 8001d50:	68eb      	ldr	r3, [r5, #12]
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	7c2b      	ldrb	r3, [r5, #16]
 8001d56:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8001d58:	4a80      	ldr	r2, [pc, #512]	@ (8001f5c <loadMenuTexts+0xe48>)
 8001d5a:	4b81      	ldr	r3, [pc, #516]	@ (8001f60 <loadMenuTexts+0xe4c>)
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	6828      	ldr	r0, [r5, #0]
 8001d62:	6869      	ldr	r1, [r5, #4]
 8001d64:	68aa      	ldr	r2, [r5, #8]
 8001d66:	68eb      	ldr	r3, [r5, #12]
 8001d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6a:	7c2b      	ldrb	r3, [r5, #16]
 8001d6c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8001d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f64 <loadMenuTexts+0xe50>)
 8001d70:	4b7d      	ldr	r3, [pc, #500]	@ (8001f68 <loadMenuTexts+0xe54>)
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	6828      	ldr	r0, [r5, #0]
 8001d78:	6869      	ldr	r1, [r5, #4]
 8001d7a:	68aa      	ldr	r2, [r5, #8]
 8001d7c:	68eb      	ldr	r3, [r5, #12]
 8001d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d80:	7c2b      	ldrb	r3, [r5, #16]
 8001d82:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8001d84:	4a79      	ldr	r2, [pc, #484]	@ (8001f6c <loadMenuTexts+0xe58>)
 8001d86:	4b7a      	ldr	r3, [pc, #488]	@ (8001f70 <loadMenuTexts+0xe5c>)
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	6828      	ldr	r0, [r5, #0]
 8001d8e:	6869      	ldr	r1, [r5, #4]
 8001d90:	68aa      	ldr	r2, [r5, #8]
 8001d92:	68eb      	ldr	r3, [r5, #12]
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	7c2b      	ldrb	r3, [r5, #16]
 8001d98:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8001d9a:	4a76      	ldr	r2, [pc, #472]	@ (8001f74 <loadMenuTexts+0xe60>)
 8001d9c:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <loadMenuTexts+0xe64>)
 8001d9e:	4614      	mov	r4, r2
 8001da0:	461d      	mov	r5, r3
 8001da2:	6828      	ldr	r0, [r5, #0]
 8001da4:	6869      	ldr	r1, [r5, #4]
 8001da6:	68aa      	ldr	r2, [r5, #8]
 8001da8:	68eb      	ldr	r3, [r5, #12]
 8001daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dac:	7c2b      	ldrb	r3, [r5, #16]
 8001dae:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8001db0:	4a72      	ldr	r2, [pc, #456]	@ (8001f7c <loadMenuTexts+0xe68>)
 8001db2:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <loadMenuTexts+0xe6c>)
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	6828      	ldr	r0, [r5, #0]
 8001dba:	6869      	ldr	r1, [r5, #4]
 8001dbc:	68aa      	ldr	r2, [r5, #8]
 8001dbe:	68eb      	ldr	r3, [r5, #12]
 8001dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc2:	7c2b      	ldrb	r3, [r5, #16]
 8001dc4:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8001dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001f84 <loadMenuTexts+0xe70>)
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f88 <loadMenuTexts+0xe74>)
 8001dca:	4614      	mov	r4, r2
 8001dcc:	461d      	mov	r5, r3
 8001dce:	6828      	ldr	r0, [r5, #0]
 8001dd0:	6869      	ldr	r1, [r5, #4]
 8001dd2:	68aa      	ldr	r2, [r5, #8]
 8001dd4:	68eb      	ldr	r3, [r5, #12]
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	7c2b      	ldrb	r3, [r5, #16]
 8001dda:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8001ddc:	4a6b      	ldr	r2, [pc, #428]	@ (8001f8c <loadMenuTexts+0xe78>)
 8001dde:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <loadMenuTexts+0xe7c>)
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	6828      	ldr	r0, [r5, #0]
 8001de6:	6869      	ldr	r1, [r5, #4]
 8001de8:	68aa      	ldr	r2, [r5, #8]
 8001dea:	68eb      	ldr	r3, [r5, #12]
 8001dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dee:	7c2b      	ldrb	r3, [r5, #16]
 8001df0:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8001df2:	4a68      	ldr	r2, [pc, #416]	@ (8001f94 <loadMenuTexts+0xe80>)
 8001df4:	4b68      	ldr	r3, [pc, #416]	@ (8001f98 <loadMenuTexts+0xe84>)
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	6828      	ldr	r0, [r5, #0]
 8001dfc:	6869      	ldr	r1, [r5, #4]
 8001dfe:	68aa      	ldr	r2, [r5, #8]
 8001e00:	68eb      	ldr	r3, [r5, #12]
 8001e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e04:	7c2b      	ldrb	r3, [r5, #16]
 8001e06:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8001e08:	4a64      	ldr	r2, [pc, #400]	@ (8001f9c <loadMenuTexts+0xe88>)
 8001e0a:	4b65      	ldr	r3, [pc, #404]	@ (8001fa0 <loadMenuTexts+0xe8c>)
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
 8001e10:	6828      	ldr	r0, [r5, #0]
 8001e12:	6869      	ldr	r1, [r5, #4]
 8001e14:	68aa      	ldr	r2, [r5, #8]
 8001e16:	68eb      	ldr	r3, [r5, #12]
 8001e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1a:	7c2b      	ldrb	r3, [r5, #16]
 8001e1c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8001e1e:	4a61      	ldr	r2, [pc, #388]	@ (8001fa4 <loadMenuTexts+0xe90>)
 8001e20:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <loadMenuTexts+0xe94>)
 8001e22:	4614      	mov	r4, r2
 8001e24:	461d      	mov	r5, r3
 8001e26:	6828      	ldr	r0, [r5, #0]
 8001e28:	6869      	ldr	r1, [r5, #4]
 8001e2a:	68aa      	ldr	r2, [r5, #8]
 8001e2c:	68eb      	ldr	r3, [r5, #12]
 8001e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e30:	7c2b      	ldrb	r3, [r5, #16]
 8001e32:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8001e34:	4a5d      	ldr	r2, [pc, #372]	@ (8001fac <loadMenuTexts+0xe98>)
 8001e36:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb0 <loadMenuTexts+0xe9c>)
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	6828      	ldr	r0, [r5, #0]
 8001e3e:	6869      	ldr	r1, [r5, #4]
 8001e40:	68aa      	ldr	r2, [r5, #8]
 8001e42:	68eb      	ldr	r3, [r5, #12]
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	7c2b      	ldrb	r3, [r5, #16]
 8001e48:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8001e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb4 <loadMenuTexts+0xea0>)
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb8 <loadMenuTexts+0xea4>)
 8001e4e:	4614      	mov	r4, r2
 8001e50:	461d      	mov	r5, r3
 8001e52:	6828      	ldr	r0, [r5, #0]
 8001e54:	6869      	ldr	r1, [r5, #4]
 8001e56:	68aa      	ldr	r2, [r5, #8]
 8001e58:	68eb      	ldr	r3, [r5, #12]
 8001e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5c:	7c2b      	ldrb	r3, [r5, #16]
 8001e5e:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8001e60:	4a56      	ldr	r2, [pc, #344]	@ (8001fbc <loadMenuTexts+0xea8>)
 8001e62:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <loadMenuTexts+0xeac>)
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	6828      	ldr	r0, [r5, #0]
 8001e6a:	6869      	ldr	r1, [r5, #4]
 8001e6c:	68aa      	ldr	r2, [r5, #8]
 8001e6e:	68eb      	ldr	r3, [r5, #12]
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	7c2b      	ldrb	r3, [r5, #16]
 8001e74:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8001e76:	4a53      	ldr	r2, [pc, #332]	@ (8001fc4 <loadMenuTexts+0xeb0>)
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <loadMenuTexts+0xeb4>)
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	6828      	ldr	r0, [r5, #0]
 8001e80:	6869      	ldr	r1, [r5, #4]
 8001e82:	68aa      	ldr	r2, [r5, #8]
 8001e84:	68eb      	ldr	r3, [r5, #12]
 8001e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e88:	7c2b      	ldrb	r3, [r5, #16]
 8001e8a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <loadMenuTexts+0xeb8>)
 8001e8e:	4b50      	ldr	r3, [pc, #320]	@ (8001fd0 <loadMenuTexts+0xebc>)
 8001e90:	4614      	mov	r4, r2
 8001e92:	461d      	mov	r5, r3
 8001e94:	6828      	ldr	r0, [r5, #0]
 8001e96:	6869      	ldr	r1, [r5, #4]
 8001e98:	68aa      	ldr	r2, [r5, #8]
 8001e9a:	68eb      	ldr	r3, [r5, #12]
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	7c2b      	ldrb	r3, [r5, #16]
 8001ea0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8001ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd4 <loadMenuTexts+0xec0>)
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd8 <loadMenuTexts+0xec4>)
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	6828      	ldr	r0, [r5, #0]
 8001eac:	6869      	ldr	r1, [r5, #4]
 8001eae:	68aa      	ldr	r2, [r5, #8]
 8001eb0:	68eb      	ldr	r3, [r5, #12]
 8001eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb4:	7c2b      	ldrb	r3, [r5, #16]
 8001eb6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8001eb8:	4a48      	ldr	r2, [pc, #288]	@ (8001fdc <loadMenuTexts+0xec8>)
 8001eba:	e091      	b.n	8001fe0 <loadMenuTexts+0xecc>
 8001ebc:	200014a8 	.word	0x200014a8
 8001ec0:	200006d4 	.word	0x200006d4
 8001ec4:	200014bc 	.word	0x200014bc
 8001ec8:	200006e8 	.word	0x200006e8
 8001ecc:	200014d0 	.word	0x200014d0
 8001ed0:	200006fc 	.word	0x200006fc
 8001ed4:	200014e4 	.word	0x200014e4
 8001ed8:	20000710 	.word	0x20000710
 8001edc:	200014f8 	.word	0x200014f8
 8001ee0:	20000724 	.word	0x20000724
 8001ee4:	2000150c 	.word	0x2000150c
 8001ee8:	20000738 	.word	0x20000738
 8001eec:	20001520 	.word	0x20001520
 8001ef0:	2000074c 	.word	0x2000074c
 8001ef4:	20001534 	.word	0x20001534
 8001ef8:	20000760 	.word	0x20000760
 8001efc:	20001548 	.word	0x20001548
 8001f00:	20000774 	.word	0x20000774
 8001f04:	2000155c 	.word	0x2000155c
 8001f08:	20000788 	.word	0x20000788
 8001f0c:	20001570 	.word	0x20001570
 8001f10:	2000079c 	.word	0x2000079c
 8001f14:	20001584 	.word	0x20001584
 8001f18:	200007b0 	.word	0x200007b0
 8001f1c:	20001598 	.word	0x20001598
 8001f20:	200007c4 	.word	0x200007c4
 8001f24:	200015ac 	.word	0x200015ac
 8001f28:	200007d8 	.word	0x200007d8
 8001f2c:	200015c0 	.word	0x200015c0
 8001f30:	200007ec 	.word	0x200007ec
 8001f34:	200015d4 	.word	0x200015d4
 8001f38:	20000800 	.word	0x20000800
 8001f3c:	200015e8 	.word	0x200015e8
 8001f40:	20000814 	.word	0x20000814
 8001f44:	200015fc 	.word	0x200015fc
 8001f48:	20000828 	.word	0x20000828
 8001f4c:	20001610 	.word	0x20001610
 8001f50:	2000083c 	.word	0x2000083c
 8001f54:	20001624 	.word	0x20001624
 8001f58:	20000850 	.word	0x20000850
 8001f5c:	20001638 	.word	0x20001638
 8001f60:	20000864 	.word	0x20000864
 8001f64:	2000164c 	.word	0x2000164c
 8001f68:	20000878 	.word	0x20000878
 8001f6c:	20001660 	.word	0x20001660
 8001f70:	2000088c 	.word	0x2000088c
 8001f74:	20001674 	.word	0x20001674
 8001f78:	200008a0 	.word	0x200008a0
 8001f7c:	20001688 	.word	0x20001688
 8001f80:	200008b4 	.word	0x200008b4
 8001f84:	2000169c 	.word	0x2000169c
 8001f88:	200008c8 	.word	0x200008c8
 8001f8c:	200016b0 	.word	0x200016b0
 8001f90:	200008dc 	.word	0x200008dc
 8001f94:	200016c4 	.word	0x200016c4
 8001f98:	200008f0 	.word	0x200008f0
 8001f9c:	200016d8 	.word	0x200016d8
 8001fa0:	20000904 	.word	0x20000904
 8001fa4:	200016ec 	.word	0x200016ec
 8001fa8:	20000918 	.word	0x20000918
 8001fac:	20001700 	.word	0x20001700
 8001fb0:	2000092c 	.word	0x2000092c
 8001fb4:	20001714 	.word	0x20001714
 8001fb8:	20000940 	.word	0x20000940
 8001fbc:	20001728 	.word	0x20001728
 8001fc0:	20000954 	.word	0x20000954
 8001fc4:	2000173c 	.word	0x2000173c
 8001fc8:	20000968 	.word	0x20000968
 8001fcc:	20001750 	.word	0x20001750
 8001fd0:	2000097c 	.word	0x2000097c
 8001fd4:	20001764 	.word	0x20001764
 8001fd8:	20000990 	.word	0x20000990
 8001fdc:	20001778 	.word	0x20001778
 8001fe0:	4bc7      	ldr	r3, [pc, #796]	@ (8002300 <loadMenuTexts+0x11ec>)
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	6828      	ldr	r0, [r5, #0]
 8001fe8:	6869      	ldr	r1, [r5, #4]
 8001fea:	68aa      	ldr	r2, [r5, #8]
 8001fec:	68eb      	ldr	r3, [r5, #12]
 8001fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff0:	7c2b      	ldrb	r3, [r5, #16]
 8001ff2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8001ff4:	4ac3      	ldr	r2, [pc, #780]	@ (8002304 <loadMenuTexts+0x11f0>)
 8001ff6:	4bc4      	ldr	r3, [pc, #784]	@ (8002308 <loadMenuTexts+0x11f4>)
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	6828      	ldr	r0, [r5, #0]
 8001ffe:	6869      	ldr	r1, [r5, #4]
 8002000:	68aa      	ldr	r2, [r5, #8]
 8002002:	68eb      	ldr	r3, [r5, #12]
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	7c2b      	ldrb	r3, [r5, #16]
 8002008:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800200a:	4ac0      	ldr	r2, [pc, #768]	@ (800230c <loadMenuTexts+0x11f8>)
 800200c:	4bc0      	ldr	r3, [pc, #768]	@ (8002310 <loadMenuTexts+0x11fc>)
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	6828      	ldr	r0, [r5, #0]
 8002014:	6869      	ldr	r1, [r5, #4]
 8002016:	68aa      	ldr	r2, [r5, #8]
 8002018:	68eb      	ldr	r3, [r5, #12]
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	7c2b      	ldrb	r3, [r5, #16]
 800201e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8002020:	4abc      	ldr	r2, [pc, #752]	@ (8002314 <loadMenuTexts+0x1200>)
 8002022:	4bbd      	ldr	r3, [pc, #756]	@ (8002318 <loadMenuTexts+0x1204>)
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	6828      	ldr	r0, [r5, #0]
 800202a:	6869      	ldr	r1, [r5, #4]
 800202c:	68aa      	ldr	r2, [r5, #8]
 800202e:	68eb      	ldr	r3, [r5, #12]
 8002030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002032:	7c2b      	ldrb	r3, [r5, #16]
 8002034:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8002036:	4ab9      	ldr	r2, [pc, #740]	@ (800231c <loadMenuTexts+0x1208>)
 8002038:	4bb9      	ldr	r3, [pc, #740]	@ (8002320 <loadMenuTexts+0x120c>)
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	6828      	ldr	r0, [r5, #0]
 8002040:	6869      	ldr	r1, [r5, #4]
 8002042:	68aa      	ldr	r2, [r5, #8]
 8002044:	68eb      	ldr	r3, [r5, #12]
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	7c2b      	ldrb	r3, [r5, #16]
 800204a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 800204c:	4ab5      	ldr	r2, [pc, #724]	@ (8002324 <loadMenuTexts+0x1210>)
 800204e:	4bb6      	ldr	r3, [pc, #728]	@ (8002328 <loadMenuTexts+0x1214>)
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	6828      	ldr	r0, [r5, #0]
 8002056:	6869      	ldr	r1, [r5, #4]
 8002058:	68aa      	ldr	r2, [r5, #8]
 800205a:	68eb      	ldr	r3, [r5, #12]
 800205c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205e:	7c2b      	ldrb	r3, [r5, #16]
 8002060:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8002062:	4ab2      	ldr	r2, [pc, #712]	@ (800232c <loadMenuTexts+0x1218>)
 8002064:	4bb2      	ldr	r3, [pc, #712]	@ (8002330 <loadMenuTexts+0x121c>)
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	6828      	ldr	r0, [r5, #0]
 800206c:	6869      	ldr	r1, [r5, #4]
 800206e:	68aa      	ldr	r2, [r5, #8]
 8002070:	68eb      	ldr	r3, [r5, #12]
 8002072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002074:	7c2b      	ldrb	r3, [r5, #16]
 8002076:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8002078:	4aae      	ldr	r2, [pc, #696]	@ (8002334 <loadMenuTexts+0x1220>)
 800207a:	4baf      	ldr	r3, [pc, #700]	@ (8002338 <loadMenuTexts+0x1224>)
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	6828      	ldr	r0, [r5, #0]
 8002082:	6869      	ldr	r1, [r5, #4]
 8002084:	68aa      	ldr	r2, [r5, #8]
 8002086:	68eb      	ldr	r3, [r5, #12]
 8002088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208a:	7c2b      	ldrb	r3, [r5, #16]
 800208c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 800208e:	4aab      	ldr	r2, [pc, #684]	@ (800233c <loadMenuTexts+0x1228>)
 8002090:	4bab      	ldr	r3, [pc, #684]	@ (8002340 <loadMenuTexts+0x122c>)
 8002092:	4614      	mov	r4, r2
 8002094:	461d      	mov	r5, r3
 8002096:	6828      	ldr	r0, [r5, #0]
 8002098:	6869      	ldr	r1, [r5, #4]
 800209a:	68aa      	ldr	r2, [r5, #8]
 800209c:	68eb      	ldr	r3, [r5, #12]
 800209e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a0:	7c2b      	ldrb	r3, [r5, #16]
 80020a2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80020a4:	4aa7      	ldr	r2, [pc, #668]	@ (8002344 <loadMenuTexts+0x1230>)
 80020a6:	4ba8      	ldr	r3, [pc, #672]	@ (8002348 <loadMenuTexts+0x1234>)
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	6828      	ldr	r0, [r5, #0]
 80020ae:	6869      	ldr	r1, [r5, #4]
 80020b0:	68aa      	ldr	r2, [r5, #8]
 80020b2:	68eb      	ldr	r3, [r5, #12]
 80020b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b6:	7c2b      	ldrb	r3, [r5, #16]
 80020b8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80020ba:	4aa4      	ldr	r2, [pc, #656]	@ (800234c <loadMenuTexts+0x1238>)
 80020bc:	4ba4      	ldr	r3, [pc, #656]	@ (8002350 <loadMenuTexts+0x123c>)
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	6828      	ldr	r0, [r5, #0]
 80020c4:	6869      	ldr	r1, [r5, #4]
 80020c6:	68aa      	ldr	r2, [r5, #8]
 80020c8:	68eb      	ldr	r3, [r5, #12]
 80020ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020cc:	7c2b      	ldrb	r3, [r5, #16]
 80020ce:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80020d0:	4aa0      	ldr	r2, [pc, #640]	@ (8002354 <loadMenuTexts+0x1240>)
 80020d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002358 <loadMenuTexts+0x1244>)
 80020d4:	4614      	mov	r4, r2
 80020d6:	461d      	mov	r5, r3
 80020d8:	6828      	ldr	r0, [r5, #0]
 80020da:	6869      	ldr	r1, [r5, #4]
 80020dc:	68aa      	ldr	r2, [r5, #8]
 80020de:	68eb      	ldr	r3, [r5, #12]
 80020e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e2:	7c2b      	ldrb	r3, [r5, #16]
 80020e4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80020e6:	4a9d      	ldr	r2, [pc, #628]	@ (800235c <loadMenuTexts+0x1248>)
 80020e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002360 <loadMenuTexts+0x124c>)
 80020ea:	4614      	mov	r4, r2
 80020ec:	461d      	mov	r5, r3
 80020ee:	6828      	ldr	r0, [r5, #0]
 80020f0:	6869      	ldr	r1, [r5, #4]
 80020f2:	68aa      	ldr	r2, [r5, #8]
 80020f4:	68eb      	ldr	r3, [r5, #12]
 80020f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f8:	7c2b      	ldrb	r3, [r5, #16]
 80020fa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 80020fc:	4a99      	ldr	r2, [pc, #612]	@ (8002364 <loadMenuTexts+0x1250>)
 80020fe:	4b9a      	ldr	r3, [pc, #616]	@ (8002368 <loadMenuTexts+0x1254>)
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	6828      	ldr	r0, [r5, #0]
 8002106:	6869      	ldr	r1, [r5, #4]
 8002108:	68aa      	ldr	r2, [r5, #8]
 800210a:	68eb      	ldr	r3, [r5, #12]
 800210c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210e:	7c2b      	ldrb	r3, [r5, #16]
 8002110:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8002112:	4a96      	ldr	r2, [pc, #600]	@ (800236c <loadMenuTexts+0x1258>)
 8002114:	4b96      	ldr	r3, [pc, #600]	@ (8002370 <loadMenuTexts+0x125c>)
 8002116:	4614      	mov	r4, r2
 8002118:	461d      	mov	r5, r3
 800211a:	6828      	ldr	r0, [r5, #0]
 800211c:	6869      	ldr	r1, [r5, #4]
 800211e:	68aa      	ldr	r2, [r5, #8]
 8002120:	68eb      	ldr	r3, [r5, #12]
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	7c2b      	ldrb	r3, [r5, #16]
 8002126:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8002128:	4a92      	ldr	r2, [pc, #584]	@ (8002374 <loadMenuTexts+0x1260>)
 800212a:	4b93      	ldr	r3, [pc, #588]	@ (8002378 <loadMenuTexts+0x1264>)
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	6828      	ldr	r0, [r5, #0]
 8002132:	6869      	ldr	r1, [r5, #4]
 8002134:	68aa      	ldr	r2, [r5, #8]
 8002136:	68eb      	ldr	r3, [r5, #12]
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	7c2b      	ldrb	r3, [r5, #16]
 800213c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 800213e:	4a8f      	ldr	r2, [pc, #572]	@ (800237c <loadMenuTexts+0x1268>)
 8002140:	4b8f      	ldr	r3, [pc, #572]	@ (8002380 <loadMenuTexts+0x126c>)
 8002142:	4614      	mov	r4, r2
 8002144:	461d      	mov	r5, r3
 8002146:	6828      	ldr	r0, [r5, #0]
 8002148:	6869      	ldr	r1, [r5, #4]
 800214a:	68aa      	ldr	r2, [r5, #8]
 800214c:	68eb      	ldr	r3, [r5, #12]
 800214e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002150:	7c2b      	ldrb	r3, [r5, #16]
 8002152:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8002154:	4a8b      	ldr	r2, [pc, #556]	@ (8002384 <loadMenuTexts+0x1270>)
 8002156:	4b8c      	ldr	r3, [pc, #560]	@ (8002388 <loadMenuTexts+0x1274>)
 8002158:	4614      	mov	r4, r2
 800215a:	461d      	mov	r5, r3
 800215c:	6828      	ldr	r0, [r5, #0]
 800215e:	6869      	ldr	r1, [r5, #4]
 8002160:	68aa      	ldr	r2, [r5, #8]
 8002162:	68eb      	ldr	r3, [r5, #12]
 8002164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002166:	7c2b      	ldrb	r3, [r5, #16]
 8002168:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800216a:	4a88      	ldr	r2, [pc, #544]	@ (800238c <loadMenuTexts+0x1278>)
 800216c:	4b88      	ldr	r3, [pc, #544]	@ (8002390 <loadMenuTexts+0x127c>)
 800216e:	4614      	mov	r4, r2
 8002170:	461d      	mov	r5, r3
 8002172:	6828      	ldr	r0, [r5, #0]
 8002174:	6869      	ldr	r1, [r5, #4]
 8002176:	68aa      	ldr	r2, [r5, #8]
 8002178:	68eb      	ldr	r3, [r5, #12]
 800217a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217c:	7c2b      	ldrb	r3, [r5, #16]
 800217e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8002180:	4a84      	ldr	r2, [pc, #528]	@ (8002394 <loadMenuTexts+0x1280>)
 8002182:	4b85      	ldr	r3, [pc, #532]	@ (8002398 <loadMenuTexts+0x1284>)
 8002184:	4614      	mov	r4, r2
 8002186:	461d      	mov	r5, r3
 8002188:	6828      	ldr	r0, [r5, #0]
 800218a:	6869      	ldr	r1, [r5, #4]
 800218c:	68aa      	ldr	r2, [r5, #8]
 800218e:	68eb      	ldr	r3, [r5, #12]
 8002190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002192:	7c2b      	ldrb	r3, [r5, #16]
 8002194:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8002196:	4a81      	ldr	r2, [pc, #516]	@ (800239c <loadMenuTexts+0x1288>)
 8002198:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <loadMenuTexts+0x128c>)
 800219a:	4614      	mov	r4, r2
 800219c:	461d      	mov	r5, r3
 800219e:	6828      	ldr	r0, [r5, #0]
 80021a0:	6869      	ldr	r1, [r5, #4]
 80021a2:	68aa      	ldr	r2, [r5, #8]
 80021a4:	68eb      	ldr	r3, [r5, #12]
 80021a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a8:	7c2b      	ldrb	r3, [r5, #16]
 80021aa:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80021ac:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <loadMenuTexts+0x1290>)
 80021ae:	4b7e      	ldr	r3, [pc, #504]	@ (80023a8 <loadMenuTexts+0x1294>)
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	6828      	ldr	r0, [r5, #0]
 80021b6:	6869      	ldr	r1, [r5, #4]
 80021b8:	68aa      	ldr	r2, [r5, #8]
 80021ba:	68eb      	ldr	r3, [r5, #12]
 80021bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021be:	7c2b      	ldrb	r3, [r5, #16]
 80021c0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80021c2:	4a7a      	ldr	r2, [pc, #488]	@ (80023ac <loadMenuTexts+0x1298>)
 80021c4:	4b7a      	ldr	r3, [pc, #488]	@ (80023b0 <loadMenuTexts+0x129c>)
 80021c6:	4614      	mov	r4, r2
 80021c8:	461d      	mov	r5, r3
 80021ca:	6828      	ldr	r0, [r5, #0]
 80021cc:	6869      	ldr	r1, [r5, #4]
 80021ce:	68aa      	ldr	r2, [r5, #8]
 80021d0:	68eb      	ldr	r3, [r5, #12]
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	7c2b      	ldrb	r3, [r5, #16]
 80021d6:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80021d8:	4a76      	ldr	r2, [pc, #472]	@ (80023b4 <loadMenuTexts+0x12a0>)
 80021da:	4b77      	ldr	r3, [pc, #476]	@ (80023b8 <loadMenuTexts+0x12a4>)
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	6828      	ldr	r0, [r5, #0]
 80021e2:	6869      	ldr	r1, [r5, #4]
 80021e4:	68aa      	ldr	r2, [r5, #8]
 80021e6:	68eb      	ldr	r3, [r5, #12]
 80021e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ea:	7c2b      	ldrb	r3, [r5, #16]
 80021ec:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 80021ee:	4a73      	ldr	r2, [pc, #460]	@ (80023bc <loadMenuTexts+0x12a8>)
 80021f0:	4b73      	ldr	r3, [pc, #460]	@ (80023c0 <loadMenuTexts+0x12ac>)
 80021f2:	4614      	mov	r4, r2
 80021f4:	461d      	mov	r5, r3
 80021f6:	6828      	ldr	r0, [r5, #0]
 80021f8:	6869      	ldr	r1, [r5, #4]
 80021fa:	68aa      	ldr	r2, [r5, #8]
 80021fc:	68eb      	ldr	r3, [r5, #12]
 80021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002200:	7c2b      	ldrb	r3, [r5, #16]
 8002202:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8002204:	4a6f      	ldr	r2, [pc, #444]	@ (80023c4 <loadMenuTexts+0x12b0>)
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <loadMenuTexts+0x12b4>)
 8002208:	4614      	mov	r4, r2
 800220a:	461d      	mov	r5, r3
 800220c:	6828      	ldr	r0, [r5, #0]
 800220e:	6869      	ldr	r1, [r5, #4]
 8002210:	68aa      	ldr	r2, [r5, #8]
 8002212:	68eb      	ldr	r3, [r5, #12]
 8002214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002216:	7c2b      	ldrb	r3, [r5, #16]
 8002218:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800221a:	4a6c      	ldr	r2, [pc, #432]	@ (80023cc <loadMenuTexts+0x12b8>)
 800221c:	4b6c      	ldr	r3, [pc, #432]	@ (80023d0 <loadMenuTexts+0x12bc>)
 800221e:	4614      	mov	r4, r2
 8002220:	461d      	mov	r5, r3
 8002222:	6828      	ldr	r0, [r5, #0]
 8002224:	6869      	ldr	r1, [r5, #4]
 8002226:	68aa      	ldr	r2, [r5, #8]
 8002228:	68eb      	ldr	r3, [r5, #12]
 800222a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222c:	7c2b      	ldrb	r3, [r5, #16]
 800222e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8002230:	4a68      	ldr	r2, [pc, #416]	@ (80023d4 <loadMenuTexts+0x12c0>)
 8002232:	4b69      	ldr	r3, [pc, #420]	@ (80023d8 <loadMenuTexts+0x12c4>)
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	6828      	ldr	r0, [r5, #0]
 800223a:	6869      	ldr	r1, [r5, #4]
 800223c:	68aa      	ldr	r2, [r5, #8]
 800223e:	68eb      	ldr	r3, [r5, #12]
 8002240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002242:	7c2b      	ldrb	r3, [r5, #16]
 8002244:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8002246:	4a65      	ldr	r2, [pc, #404]	@ (80023dc <loadMenuTexts+0x12c8>)
 8002248:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <loadMenuTexts+0x12cc>)
 800224a:	4614      	mov	r4, r2
 800224c:	461d      	mov	r5, r3
 800224e:	6828      	ldr	r0, [r5, #0]
 8002250:	6869      	ldr	r1, [r5, #4]
 8002252:	68aa      	ldr	r2, [r5, #8]
 8002254:	68eb      	ldr	r3, [r5, #12]
 8002256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002258:	7c2b      	ldrb	r3, [r5, #16]
 800225a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 800225c:	4a61      	ldr	r2, [pc, #388]	@ (80023e4 <loadMenuTexts+0x12d0>)
 800225e:	4b62      	ldr	r3, [pc, #392]	@ (80023e8 <loadMenuTexts+0x12d4>)
 8002260:	4614      	mov	r4, r2
 8002262:	461d      	mov	r5, r3
 8002264:	6828      	ldr	r0, [r5, #0]
 8002266:	6869      	ldr	r1, [r5, #4]
 8002268:	68aa      	ldr	r2, [r5, #8]
 800226a:	68eb      	ldr	r3, [r5, #12]
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	7c2b      	ldrb	r3, [r5, #16]
 8002270:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8002272:	4a5e      	ldr	r2, [pc, #376]	@ (80023ec <loadMenuTexts+0x12d8>)
 8002274:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <loadMenuTexts+0x12dc>)
 8002276:	4614      	mov	r4, r2
 8002278:	461d      	mov	r5, r3
 800227a:	6828      	ldr	r0, [r5, #0]
 800227c:	6869      	ldr	r1, [r5, #4]
 800227e:	68aa      	ldr	r2, [r5, #8]
 8002280:	68eb      	ldr	r3, [r5, #12]
 8002282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002284:	7c2b      	ldrb	r3, [r5, #16]
 8002286:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8002288:	4a5a      	ldr	r2, [pc, #360]	@ (80023f4 <loadMenuTexts+0x12e0>)
 800228a:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <loadMenuTexts+0x12e4>)
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	6828      	ldr	r0, [r5, #0]
 8002292:	6869      	ldr	r1, [r5, #4]
 8002294:	68aa      	ldr	r2, [r5, #8]
 8002296:	68eb      	ldr	r3, [r5, #12]
 8002298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229a:	7c2b      	ldrb	r3, [r5, #16]
 800229c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800229e:	4a57      	ldr	r2, [pc, #348]	@ (80023fc <loadMenuTexts+0x12e8>)
 80022a0:	4b57      	ldr	r3, [pc, #348]	@ (8002400 <loadMenuTexts+0x12ec>)
 80022a2:	4614      	mov	r4, r2
 80022a4:	461d      	mov	r5, r3
 80022a6:	6828      	ldr	r0, [r5, #0]
 80022a8:	6869      	ldr	r1, [r5, #4]
 80022aa:	68aa      	ldr	r2, [r5, #8]
 80022ac:	68eb      	ldr	r3, [r5, #12]
 80022ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b0:	7c2b      	ldrb	r3, [r5, #16]
 80022b2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80022b4:	4a53      	ldr	r2, [pc, #332]	@ (8002404 <loadMenuTexts+0x12f0>)
 80022b6:	4b54      	ldr	r3, [pc, #336]	@ (8002408 <loadMenuTexts+0x12f4>)
 80022b8:	4614      	mov	r4, r2
 80022ba:	461d      	mov	r5, r3
 80022bc:	6828      	ldr	r0, [r5, #0]
 80022be:	6869      	ldr	r1, [r5, #4]
 80022c0:	68aa      	ldr	r2, [r5, #8]
 80022c2:	68eb      	ldr	r3, [r5, #12]
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	7c2b      	ldrb	r3, [r5, #16]
 80022c8:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <loadMenuTexts+0x12f8>)
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <loadMenuTexts+0x12fc>)
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	6828      	ldr	r0, [r5, #0]
 80022d4:	6869      	ldr	r1, [r5, #4]
 80022d6:	68aa      	ldr	r2, [r5, #8]
 80022d8:	68eb      	ldr	r3, [r5, #12]
 80022da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022dc:	7c2b      	ldrb	r3, [r5, #16]
 80022de:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80022e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002414 <loadMenuTexts+0x1300>)
 80022e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002418 <loadMenuTexts+0x1304>)
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	6828      	ldr	r0, [r5, #0]
 80022ea:	6869      	ldr	r1, [r5, #4]
 80022ec:	68aa      	ldr	r2, [r5, #8]
 80022ee:	68eb      	ldr	r3, [r5, #12]
 80022f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f2:	7c2b      	ldrb	r3, [r5, #16]
 80022f4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80022f6:	4a49      	ldr	r2, [pc, #292]	@ (800241c <loadMenuTexts+0x1308>)
 80022f8:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <loadMenuTexts+0x130c>)
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
 80022fe:	e091      	b.n	8002424 <loadMenuTexts+0x1310>
 8002300:	200009a4 	.word	0x200009a4
 8002304:	2000178c 	.word	0x2000178c
 8002308:	200009b8 	.word	0x200009b8
 800230c:	200017a0 	.word	0x200017a0
 8002310:	200009cc 	.word	0x200009cc
 8002314:	200017b4 	.word	0x200017b4
 8002318:	200009e0 	.word	0x200009e0
 800231c:	200017c8 	.word	0x200017c8
 8002320:	200009f4 	.word	0x200009f4
 8002324:	200017dc 	.word	0x200017dc
 8002328:	20000a08 	.word	0x20000a08
 800232c:	200017f0 	.word	0x200017f0
 8002330:	20000a1c 	.word	0x20000a1c
 8002334:	20001804 	.word	0x20001804
 8002338:	20000a30 	.word	0x20000a30
 800233c:	20001818 	.word	0x20001818
 8002340:	20000a44 	.word	0x20000a44
 8002344:	2000182c 	.word	0x2000182c
 8002348:	20000a58 	.word	0x20000a58
 800234c:	20001840 	.word	0x20001840
 8002350:	20000a6c 	.word	0x20000a6c
 8002354:	20001854 	.word	0x20001854
 8002358:	20000a80 	.word	0x20000a80
 800235c:	20001868 	.word	0x20001868
 8002360:	20000a94 	.word	0x20000a94
 8002364:	2000187c 	.word	0x2000187c
 8002368:	20000aa8 	.word	0x20000aa8
 800236c:	20001890 	.word	0x20001890
 8002370:	20000abc 	.word	0x20000abc
 8002374:	200018a4 	.word	0x200018a4
 8002378:	20000ad0 	.word	0x20000ad0
 800237c:	200018b8 	.word	0x200018b8
 8002380:	20000ae4 	.word	0x20000ae4
 8002384:	200018cc 	.word	0x200018cc
 8002388:	20000af8 	.word	0x20000af8
 800238c:	200018e0 	.word	0x200018e0
 8002390:	20000b0c 	.word	0x20000b0c
 8002394:	200018f4 	.word	0x200018f4
 8002398:	20000b20 	.word	0x20000b20
 800239c:	20001908 	.word	0x20001908
 80023a0:	20000b34 	.word	0x20000b34
 80023a4:	2000191c 	.word	0x2000191c
 80023a8:	20000b48 	.word	0x20000b48
 80023ac:	20001930 	.word	0x20001930
 80023b0:	20000b5c 	.word	0x20000b5c
 80023b4:	20001944 	.word	0x20001944
 80023b8:	20000b70 	.word	0x20000b70
 80023bc:	20001958 	.word	0x20001958
 80023c0:	20000b84 	.word	0x20000b84
 80023c4:	2000196c 	.word	0x2000196c
 80023c8:	20000b98 	.word	0x20000b98
 80023cc:	20001980 	.word	0x20001980
 80023d0:	20000bac 	.word	0x20000bac
 80023d4:	20001994 	.word	0x20001994
 80023d8:	20000bc0 	.word	0x20000bc0
 80023dc:	200019a8 	.word	0x200019a8
 80023e0:	20000bd4 	.word	0x20000bd4
 80023e4:	200019bc 	.word	0x200019bc
 80023e8:	20000be8 	.word	0x20000be8
 80023ec:	200019d0 	.word	0x200019d0
 80023f0:	20000bfc 	.word	0x20000bfc
 80023f4:	200019e4 	.word	0x200019e4
 80023f8:	20000c10 	.word	0x20000c10
 80023fc:	200019f8 	.word	0x200019f8
 8002400:	20000c24 	.word	0x20000c24
 8002404:	20001a0c 	.word	0x20001a0c
 8002408:	20000c38 	.word	0x20000c38
 800240c:	20001a20 	.word	0x20001a20
 8002410:	20000cc4 	.word	0x20000cc4
 8002414:	20001a34 	.word	0x20001a34
 8002418:	20000cd8 	.word	0x20000cd8
 800241c:	20001a48 	.word	0x20001a48
 8002420:	20000c9c 	.word	0x20000c9c
 8002424:	6828      	ldr	r0, [r5, #0]
 8002426:	6869      	ldr	r1, [r5, #4]
 8002428:	68aa      	ldr	r2, [r5, #8]
 800242a:	68eb      	ldr	r3, [r5, #12]
 800242c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242e:	7c2b      	ldrb	r3, [r5, #16]
 8002430:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8002432:	4a5b      	ldr	r2, [pc, #364]	@ (80025a0 <loadMenuTexts+0x148c>)
 8002434:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <loadMenuTexts+0x1490>)
 8002436:	4614      	mov	r4, r2
 8002438:	461d      	mov	r5, r3
 800243a:	6828      	ldr	r0, [r5, #0]
 800243c:	6869      	ldr	r1, [r5, #4]
 800243e:	68aa      	ldr	r2, [r5, #8]
 8002440:	68eb      	ldr	r3, [r5, #12]
 8002442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002444:	7c2b      	ldrb	r3, [r5, #16]
 8002446:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8002448:	4a57      	ldr	r2, [pc, #348]	@ (80025a8 <loadMenuTexts+0x1494>)
 800244a:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <loadMenuTexts+0x1498>)
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	6828      	ldr	r0, [r5, #0]
 8002452:	6869      	ldr	r1, [r5, #4]
 8002454:	68aa      	ldr	r2, [r5, #8]
 8002456:	68eb      	ldr	r3, [r5, #12]
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	7c2b      	ldrb	r3, [r5, #16]
 800245c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800245e:	4a54      	ldr	r2, [pc, #336]	@ (80025b0 <loadMenuTexts+0x149c>)
 8002460:	4b54      	ldr	r3, [pc, #336]	@ (80025b4 <loadMenuTexts+0x14a0>)
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	6828      	ldr	r0, [r5, #0]
 8002468:	6869      	ldr	r1, [r5, #4]
 800246a:	68aa      	ldr	r2, [r5, #8]
 800246c:	68eb      	ldr	r3, [r5, #12]
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	7c2b      	ldrb	r3, [r5, #16]
 8002472:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8002474:	4a50      	ldr	r2, [pc, #320]	@ (80025b8 <loadMenuTexts+0x14a4>)
 8002476:	4b51      	ldr	r3, [pc, #324]	@ (80025bc <loadMenuTexts+0x14a8>)
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	6828      	ldr	r0, [r5, #0]
 800247e:	6869      	ldr	r1, [r5, #4]
 8002480:	68aa      	ldr	r2, [r5, #8]
 8002482:	68eb      	ldr	r3, [r5, #12]
 8002484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002486:	7c2b      	ldrb	r3, [r5, #16]
 8002488:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800248a:	4a4d      	ldr	r2, [pc, #308]	@ (80025c0 <loadMenuTexts+0x14ac>)
 800248c:	4b4d      	ldr	r3, [pc, #308]	@ (80025c4 <loadMenuTexts+0x14b0>)
 800248e:	4614      	mov	r4, r2
 8002490:	461d      	mov	r5, r3
 8002492:	6828      	ldr	r0, [r5, #0]
 8002494:	6869      	ldr	r1, [r5, #4]
 8002496:	68aa      	ldr	r2, [r5, #8]
 8002498:	68eb      	ldr	r3, [r5, #12]
 800249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249c:	7c2b      	ldrb	r3, [r5, #16]
 800249e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80024a0:	4a49      	ldr	r2, [pc, #292]	@ (80025c8 <loadMenuTexts+0x14b4>)
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <loadMenuTexts+0x14b8>)
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	6828      	ldr	r0, [r5, #0]
 80024aa:	6869      	ldr	r1, [r5, #4]
 80024ac:	68aa      	ldr	r2, [r5, #8]
 80024ae:	68eb      	ldr	r3, [r5, #12]
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	7c2b      	ldrb	r3, [r5, #16]
 80024b4:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80024b6:	4a46      	ldr	r2, [pc, #280]	@ (80025d0 <loadMenuTexts+0x14bc>)
 80024b8:	4b46      	ldr	r3, [pc, #280]	@ (80025d4 <loadMenuTexts+0x14c0>)
 80024ba:	4614      	mov	r4, r2
 80024bc:	461d      	mov	r5, r3
 80024be:	6828      	ldr	r0, [r5, #0]
 80024c0:	6869      	ldr	r1, [r5, #4]
 80024c2:	68aa      	ldr	r2, [r5, #8]
 80024c4:	68eb      	ldr	r3, [r5, #12]
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	7c2b      	ldrb	r3, [r5, #16]
 80024ca:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80024cc:	4a42      	ldr	r2, [pc, #264]	@ (80025d8 <loadMenuTexts+0x14c4>)
 80024ce:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <loadMenuTexts+0x14c8>)
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	6828      	ldr	r0, [r5, #0]
 80024d6:	6869      	ldr	r1, [r5, #4]
 80024d8:	68aa      	ldr	r2, [r5, #8]
 80024da:	68eb      	ldr	r3, [r5, #12]
 80024dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024de:	7c2b      	ldrb	r3, [r5, #16]
 80024e0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80024e2:	4a3f      	ldr	r2, [pc, #252]	@ (80025e0 <loadMenuTexts+0x14cc>)
 80024e4:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <loadMenuTexts+0x14d0>)
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	6828      	ldr	r0, [r5, #0]
 80024ec:	6869      	ldr	r1, [r5, #4]
 80024ee:	68aa      	ldr	r2, [r5, #8]
 80024f0:	68eb      	ldr	r3, [r5, #12]
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	7c2b      	ldrb	r3, [r5, #16]
 80024f6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80024f8:	4a3b      	ldr	r2, [pc, #236]	@ (80025e8 <loadMenuTexts+0x14d4>)
 80024fa:	4b3c      	ldr	r3, [pc, #240]	@ (80025ec <loadMenuTexts+0x14d8>)
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	6828      	ldr	r0, [r5, #0]
 8002502:	6869      	ldr	r1, [r5, #4]
 8002504:	68aa      	ldr	r2, [r5, #8]
 8002506:	68eb      	ldr	r3, [r5, #12]
 8002508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800250a:	7c2b      	ldrb	r3, [r5, #16]
 800250c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800250e:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <loadMenuTexts+0x14dc>)
 8002510:	4b38      	ldr	r3, [pc, #224]	@ (80025f4 <loadMenuTexts+0x14e0>)
 8002512:	4614      	mov	r4, r2
 8002514:	461d      	mov	r5, r3
 8002516:	6828      	ldr	r0, [r5, #0]
 8002518:	6869      	ldr	r1, [r5, #4]
 800251a:	68aa      	ldr	r2, [r5, #8]
 800251c:	68eb      	ldr	r3, [r5, #12]
 800251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002520:	7c2b      	ldrb	r3, [r5, #16]
 8002522:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8002524:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <loadMenuTexts+0x14e4>)
 8002526:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <loadMenuTexts+0x14e8>)
 8002528:	4614      	mov	r4, r2
 800252a:	461d      	mov	r5, r3
 800252c:	6828      	ldr	r0, [r5, #0]
 800252e:	6869      	ldr	r1, [r5, #4]
 8002530:	68aa      	ldr	r2, [r5, #8]
 8002532:	68eb      	ldr	r3, [r5, #12]
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	7c2b      	ldrb	r3, [r5, #16]
 8002538:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800253a:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <loadMenuTexts+0x14ec>)
 800253c:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <loadMenuTexts+0x14f0>)
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	6828      	ldr	r0, [r5, #0]
 8002544:	6869      	ldr	r1, [r5, #4]
 8002546:	68aa      	ldr	r2, [r5, #8]
 8002548:	68eb      	ldr	r3, [r5, #12]
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	7c2b      	ldrb	r3, [r5, #16]
 800254e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8002550:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <loadMenuTexts+0x14f4>)
 8002552:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <loadMenuTexts+0x14f8>)
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	6828      	ldr	r0, [r5, #0]
 800255a:	6869      	ldr	r1, [r5, #4]
 800255c:	68aa      	ldr	r2, [r5, #8]
 800255e:	68eb      	ldr	r3, [r5, #12]
 8002560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002562:	7c2b      	ldrb	r3, [r5, #16]
 8002564:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8002566:	4a2a      	ldr	r2, [pc, #168]	@ (8002610 <loadMenuTexts+0x14fc>)
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <loadMenuTexts+0x1500>)
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	6828      	ldr	r0, [r5, #0]
 8002570:	6869      	ldr	r1, [r5, #4]
 8002572:	68aa      	ldr	r2, [r5, #8]
 8002574:	68eb      	ldr	r3, [r5, #12]
 8002576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002578:	7c2b      	ldrb	r3, [r5, #16]
 800257a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 800257c:	4a26      	ldr	r2, [pc, #152]	@ (8002618 <loadMenuTexts+0x1504>)
 800257e:	4b27      	ldr	r3, [pc, #156]	@ (800261c <loadMenuTexts+0x1508>)
 8002580:	4614      	mov	r4, r2
 8002582:	461d      	mov	r5, r3
 8002584:	6828      	ldr	r0, [r5, #0]
 8002586:	6869      	ldr	r1, [r5, #4]
 8002588:	68aa      	ldr	r2, [r5, #8]
 800258a:	68eb      	ldr	r3, [r5, #12]
 800258c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258e:	7c2b      	ldrb	r3, [r5, #16]
 8002590:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8002592:	f000 f845 	bl	8002620 <menuVariableFinisher>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	bf00      	nop
 80025a0:	20001a5c 	.word	0x20001a5c
 80025a4:	20000cb0 	.word	0x20000cb0
 80025a8:	20001a70 	.word	0x20001a70
 80025ac:	20000d14 	.word	0x20000d14
 80025b0:	20001a84 	.word	0x20001a84
 80025b4:	20000d28 	.word	0x20000d28
 80025b8:	20001a98 	.word	0x20001a98
 80025bc:	20000d64 	.word	0x20000d64
 80025c0:	20001aac 	.word	0x20001aac
 80025c4:	20000d78 	.word	0x20000d78
 80025c8:	20001ac0 	.word	0x20001ac0
 80025cc:	20000db4 	.word	0x20000db4
 80025d0:	20001ad4 	.word	0x20001ad4
 80025d4:	20000dc8 	.word	0x20000dc8
 80025d8:	20001ae8 	.word	0x20001ae8
 80025dc:	20000df0 	.word	0x20000df0
 80025e0:	20001afc 	.word	0x20001afc
 80025e4:	20000e18 	.word	0x20000e18
 80025e8:	20001b10 	.word	0x20001b10
 80025ec:	20000e40 	.word	0x20000e40
 80025f0:	20001b24 	.word	0x20001b24
 80025f4:	20000e68 	.word	0x20000e68
 80025f8:	20001b38 	.word	0x20001b38
 80025fc:	20000e90 	.word	0x20000e90
 8002600:	20001b4c 	.word	0x20001b4c
 8002604:	20000eb8 	.word	0x20000eb8
 8002608:	20001b60 	.word	0x20001b60
 800260c:	20000ee0 	.word	0x20000ee0
 8002610:	20001b74 	.word	0x20001b74
 8002614:	20000f08 	.word	0x20000f08
 8002618:	20001b88 	.word	0x20001b88
 800261c:	20000f30 	.word	0x20000f30

08002620 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8002624:	4b99      	ldr	r3, [pc, #612]	@ (800288c <menuVariableFinisher+0x26c>)
 8002626:	2200      	movs	r2, #0
 8002628:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800262a:	4b99      	ldr	r3, [pc, #612]	@ (8002890 <menuVariableFinisher+0x270>)
 800262c:	2200      	movs	r2, #0
 800262e:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8002630:	4b98      	ldr	r3, [pc, #608]	@ (8002894 <menuVariableFinisher+0x274>)
 8002632:	2200      	movs	r2, #0
 8002634:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8002636:	4b98      	ldr	r3, [pc, #608]	@ (8002898 <menuVariableFinisher+0x278>)
 8002638:	2200      	movs	r2, #0
 800263a:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 800263c:	4b97      	ldr	r3, [pc, #604]	@ (800289c <menuVariableFinisher+0x27c>)
 800263e:	2200      	movs	r2, #0
 8002640:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8002642:	4b97      	ldr	r3, [pc, #604]	@ (80028a0 <menuVariableFinisher+0x280>)
 8002644:	2200      	movs	r2, #0
 8002646:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8002648:	4b96      	ldr	r3, [pc, #600]	@ (80028a4 <menuVariableFinisher+0x284>)
 800264a:	2200      	movs	r2, #0
 800264c:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800264e:	4b96      	ldr	r3, [pc, #600]	@ (80028a8 <menuVariableFinisher+0x288>)
 8002650:	2200      	movs	r2, #0
 8002652:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8002654:	4b95      	ldr	r3, [pc, #596]	@ (80028ac <menuVariableFinisher+0x28c>)
 8002656:	2200      	movs	r2, #0
 8002658:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800265a:	4b95      	ldr	r3, [pc, #596]	@ (80028b0 <menuVariableFinisher+0x290>)
 800265c:	2200      	movs	r2, #0
 800265e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8002660:	4b94      	ldr	r3, [pc, #592]	@ (80028b4 <menuVariableFinisher+0x294>)
 8002662:	2200      	movs	r2, #0
 8002664:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8002666:	4b94      	ldr	r3, [pc, #592]	@ (80028b8 <menuVariableFinisher+0x298>)
 8002668:	2200      	movs	r2, #0
 800266a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800266c:	4b93      	ldr	r3, [pc, #588]	@ (80028bc <menuVariableFinisher+0x29c>)
 800266e:	2200      	movs	r2, #0
 8002670:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8002672:	4b93      	ldr	r3, [pc, #588]	@ (80028c0 <menuVariableFinisher+0x2a0>)
 8002674:	2200      	movs	r2, #0
 8002676:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8002678:	4b92      	ldr	r3, [pc, #584]	@ (80028c4 <menuVariableFinisher+0x2a4>)
 800267a:	2200      	movs	r2, #0
 800267c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800267e:	4b92      	ldr	r3, [pc, #584]	@ (80028c8 <menuVariableFinisher+0x2a8>)
 8002680:	2200      	movs	r2, #0
 8002682:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8002684:	4b91      	ldr	r3, [pc, #580]	@ (80028cc <menuVariableFinisher+0x2ac>)
 8002686:	2200      	movs	r2, #0
 8002688:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800268a:	4b91      	ldr	r3, [pc, #580]	@ (80028d0 <menuVariableFinisher+0x2b0>)
 800268c:	2200      	movs	r2, #0
 800268e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8002690:	4b90      	ldr	r3, [pc, #576]	@ (80028d4 <menuVariableFinisher+0x2b4>)
 8002692:	2200      	movs	r2, #0
 8002694:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8002696:	4b90      	ldr	r3, [pc, #576]	@ (80028d8 <menuVariableFinisher+0x2b8>)
 8002698:	2200      	movs	r2, #0
 800269a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800269c:	4b8f      	ldr	r3, [pc, #572]	@ (80028dc <menuVariableFinisher+0x2bc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80026a2:	4b8f      	ldr	r3, [pc, #572]	@ (80028e0 <menuVariableFinisher+0x2c0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80026a8:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <menuVariableFinisher+0x2c4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80026ae:	4b8e      	ldr	r3, [pc, #568]	@ (80028e8 <menuVariableFinisher+0x2c8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80026b4:	4b8d      	ldr	r3, [pc, #564]	@ (80028ec <menuVariableFinisher+0x2cc>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80026ba:	4b8d      	ldr	r3, [pc, #564]	@ (80028f0 <menuVariableFinisher+0x2d0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80026c0:	4b8c      	ldr	r3, [pc, #560]	@ (80028f4 <menuVariableFinisher+0x2d4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80026c6:	4b8c      	ldr	r3, [pc, #560]	@ (80028f8 <menuVariableFinisher+0x2d8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80026cc:	4b8b      	ldr	r3, [pc, #556]	@ (80028fc <menuVariableFinisher+0x2dc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80026d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002900 <menuVariableFinisher+0x2e0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80026d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002904 <menuVariableFinisher+0x2e4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80026de:	4b8a      	ldr	r3, [pc, #552]	@ (8002908 <menuVariableFinisher+0x2e8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80026e4:	4b89      	ldr	r3, [pc, #548]	@ (800290c <menuVariableFinisher+0x2ec>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80026ea:	4b89      	ldr	r3, [pc, #548]	@ (8002910 <menuVariableFinisher+0x2f0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80026f0:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <menuVariableFinisher+0x2f4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80026f6:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <menuVariableFinisher+0x2f8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80026fc:	4b87      	ldr	r3, [pc, #540]	@ (800291c <menuVariableFinisher+0x2fc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8002702:	4b87      	ldr	r3, [pc, #540]	@ (8002920 <menuVariableFinisher+0x300>)
 8002704:	2200      	movs	r2, #0
 8002706:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8002708:	4b86      	ldr	r3, [pc, #536]	@ (8002924 <menuVariableFinisher+0x304>)
 800270a:	2200      	movs	r2, #0
 800270c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800270e:	4b86      	ldr	r3, [pc, #536]	@ (8002928 <menuVariableFinisher+0x308>)
 8002710:	2200      	movs	r2, #0
 8002712:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8002714:	4b85      	ldr	r3, [pc, #532]	@ (800292c <menuVariableFinisher+0x30c>)
 8002716:	2200      	movs	r2, #0
 8002718:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800271a:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <menuVariableFinisher+0x310>)
 800271c:	2200      	movs	r2, #0
 800271e:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8002720:	4b84      	ldr	r3, [pc, #528]	@ (8002934 <menuVariableFinisher+0x314>)
 8002722:	2200      	movs	r2, #0
 8002724:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8002726:	4b84      	ldr	r3, [pc, #528]	@ (8002938 <menuVariableFinisher+0x318>)
 8002728:	2200      	movs	r2, #0
 800272a:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 800272c:	4b83      	ldr	r3, [pc, #524]	@ (800293c <menuVariableFinisher+0x31c>)
 800272e:	2200      	movs	r2, #0
 8002730:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8002732:	4b83      	ldr	r3, [pc, #524]	@ (8002940 <menuVariableFinisher+0x320>)
 8002734:	2200      	movs	r2, #0
 8002736:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8002738:	4b82      	ldr	r3, [pc, #520]	@ (8002944 <menuVariableFinisher+0x324>)
 800273a:	2200      	movs	r2, #0
 800273c:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <menuVariableFinisher+0x328>)
 8002740:	2200      	movs	r2, #0
 8002742:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8002744:	4b81      	ldr	r3, [pc, #516]	@ (800294c <menuVariableFinisher+0x32c>)
 8002746:	2200      	movs	r2, #0
 8002748:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800274a:	4b81      	ldr	r3, [pc, #516]	@ (8002950 <menuVariableFinisher+0x330>)
 800274c:	2200      	movs	r2, #0
 800274e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8002750:	4b80      	ldr	r3, [pc, #512]	@ (8002954 <menuVariableFinisher+0x334>)
 8002752:	2200      	movs	r2, #0
 8002754:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8002756:	4b80      	ldr	r3, [pc, #512]	@ (8002958 <menuVariableFinisher+0x338>)
 8002758:	2200      	movs	r2, #0
 800275a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 800275c:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <menuVariableFinisher+0x33c>)
 800275e:	2200      	movs	r2, #0
 8002760:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8002762:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <menuVariableFinisher+0x340>)
 8002764:	2200      	movs	r2, #0
 8002766:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <menuVariableFinisher+0x344>)
 800276a:	2200      	movs	r2, #0
 800276c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800276e:	4b7e      	ldr	r3, [pc, #504]	@ (8002968 <menuVariableFinisher+0x348>)
 8002770:	2200      	movs	r2, #0
 8002772:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8002774:	4b7d      	ldr	r3, [pc, #500]	@ (800296c <menuVariableFinisher+0x34c>)
 8002776:	2200      	movs	r2, #0
 8002778:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800277a:	4b7d      	ldr	r3, [pc, #500]	@ (8002970 <menuVariableFinisher+0x350>)
 800277c:	2200      	movs	r2, #0
 800277e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8002780:	4b7c      	ldr	r3, [pc, #496]	@ (8002974 <menuVariableFinisher+0x354>)
 8002782:	2200      	movs	r2, #0
 8002784:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8002786:	4b7c      	ldr	r3, [pc, #496]	@ (8002978 <menuVariableFinisher+0x358>)
 8002788:	2200      	movs	r2, #0
 800278a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 800278c:	4b7b      	ldr	r3, [pc, #492]	@ (800297c <menuVariableFinisher+0x35c>)
 800278e:	2200      	movs	r2, #0
 8002790:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8002792:	4b7b      	ldr	r3, [pc, #492]	@ (8002980 <menuVariableFinisher+0x360>)
 8002794:	2200      	movs	r2, #0
 8002796:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8002798:	4b7a      	ldr	r3, [pc, #488]	@ (8002984 <menuVariableFinisher+0x364>)
 800279a:	2200      	movs	r2, #0
 800279c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800279e:	4b7a      	ldr	r3, [pc, #488]	@ (8002988 <menuVariableFinisher+0x368>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80027a4:	4b79      	ldr	r3, [pc, #484]	@ (800298c <menuVariableFinisher+0x36c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80027aa:	4b79      	ldr	r3, [pc, #484]	@ (8002990 <menuVariableFinisher+0x370>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80027b0:	4b78      	ldr	r3, [pc, #480]	@ (8002994 <menuVariableFinisher+0x374>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80027b6:	4b78      	ldr	r3, [pc, #480]	@ (8002998 <menuVariableFinisher+0x378>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80027bc:	4b77      	ldr	r3, [pc, #476]	@ (800299c <menuVariableFinisher+0x37c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80027c2:	4b77      	ldr	r3, [pc, #476]	@ (80029a0 <menuVariableFinisher+0x380>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80027c8:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <menuVariableFinisher+0x384>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80027ce:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <menuVariableFinisher+0x388>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80027d4:	4b75      	ldr	r3, [pc, #468]	@ (80029ac <menuVariableFinisher+0x38c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80027da:	4b75      	ldr	r3, [pc, #468]	@ (80029b0 <menuVariableFinisher+0x390>)
 80027dc:	2200      	movs	r2, #0
 80027de:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80027e0:	4b74      	ldr	r3, [pc, #464]	@ (80029b4 <menuVariableFinisher+0x394>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80027e6:	4b74      	ldr	r3, [pc, #464]	@ (80029b8 <menuVariableFinisher+0x398>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80027ec:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <menuVariableFinisher+0x39c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80027f2:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <menuVariableFinisher+0x3a0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80027f8:	4b72      	ldr	r3, [pc, #456]	@ (80029c4 <menuVariableFinisher+0x3a4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <menuVariableFinisher+0x3a8>)
 8002800:	2200      	movs	r2, #0
 8002802:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8002804:	4b71      	ldr	r3, [pc, #452]	@ (80029cc <menuVariableFinisher+0x3ac>)
 8002806:	2200      	movs	r2, #0
 8002808:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800280a:	4b71      	ldr	r3, [pc, #452]	@ (80029d0 <menuVariableFinisher+0x3b0>)
 800280c:	2200      	movs	r2, #0
 800280e:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8002810:	4b70      	ldr	r3, [pc, #448]	@ (80029d4 <menuVariableFinisher+0x3b4>)
 8002812:	2200      	movs	r2, #0
 8002814:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8002816:	4b70      	ldr	r3, [pc, #448]	@ (80029d8 <menuVariableFinisher+0x3b8>)
 8002818:	2200      	movs	r2, #0
 800281a:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 800281c:	4b6f      	ldr	r3, [pc, #444]	@ (80029dc <menuVariableFinisher+0x3bc>)
 800281e:	2200      	movs	r2, #0
 8002820:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8002822:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <menuVariableFinisher+0x3c0>)
 8002824:	2200      	movs	r2, #0
 8002826:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8002828:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <menuVariableFinisher+0x3c4>)
 800282a:	2200      	movs	r2, #0
 800282c:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <menuVariableFinisher+0x3c8>)
 8002830:	2200      	movs	r2, #0
 8002832:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8002834:	4b6d      	ldr	r3, [pc, #436]	@ (80029ec <menuVariableFinisher+0x3cc>)
 8002836:	2200      	movs	r2, #0
 8002838:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800283a:	4b6d      	ldr	r3, [pc, #436]	@ (80029f0 <menuVariableFinisher+0x3d0>)
 800283c:	2200      	movs	r2, #0
 800283e:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8002840:	4b6c      	ldr	r3, [pc, #432]	@ (80029f4 <menuVariableFinisher+0x3d4>)
 8002842:	2200      	movs	r2, #0
 8002844:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8002846:	4b6c      	ldr	r3, [pc, #432]	@ (80029f8 <menuVariableFinisher+0x3d8>)
 8002848:	2200      	movs	r2, #0
 800284a:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 800284c:	4b6b      	ldr	r3, [pc, #428]	@ (80029fc <menuVariableFinisher+0x3dc>)
 800284e:	2200      	movs	r2, #0
 8002850:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8002852:	4b6b      	ldr	r3, [pc, #428]	@ (8002a00 <menuVariableFinisher+0x3e0>)
 8002854:	2200      	movs	r2, #0
 8002856:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8002858:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <menuVariableFinisher+0x3e4>)
 800285a:	2200      	movs	r2, #0
 800285c:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800285e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <menuVariableFinisher+0x3e8>)
 8002860:	2200      	movs	r2, #0
 8002862:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8002864:	4b69      	ldr	r3, [pc, #420]	@ (8002a0c <menuVariableFinisher+0x3ec>)
 8002866:	2200      	movs	r2, #0
 8002868:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800286a:	4b69      	ldr	r3, [pc, #420]	@ (8002a10 <menuVariableFinisher+0x3f0>)
 800286c:	2200      	movs	r2, #0
 800286e:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8002870:	4b68      	ldr	r3, [pc, #416]	@ (8002a14 <menuVariableFinisher+0x3f4>)
 8002872:	2200      	movs	r2, #0
 8002874:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8002876:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <menuVariableFinisher+0x3f8>)
 8002878:	2200      	movs	r2, #0
 800287a:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 800287c:	4b67      	ldr	r3, [pc, #412]	@ (8002a1c <menuVariableFinisher+0x3fc>)
 800287e:	2200      	movs	r2, #0
 8002880:	741a      	strb	r2, [r3, #16]
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000006c 	.word	0x2000006c
 8002890:	20000080 	.word	0x20000080
 8002894:	20000094 	.word	0x20000094
 8002898:	200000a8 	.word	0x200000a8
 800289c:	200000bc 	.word	0x200000bc
 80028a0:	200000d0 	.word	0x200000d0
 80028a4:	200000e4 	.word	0x200000e4
 80028a8:	200000f8 	.word	0x200000f8
 80028ac:	2000010c 	.word	0x2000010c
 80028b0:	20000120 	.word	0x20000120
 80028b4:	20000134 	.word	0x20000134
 80028b8:	20000148 	.word	0x20000148
 80028bc:	200014a8 	.word	0x200014a8
 80028c0:	200014bc 	.word	0x200014bc
 80028c4:	200014d0 	.word	0x200014d0
 80028c8:	200014e4 	.word	0x200014e4
 80028cc:	200014f8 	.word	0x200014f8
 80028d0:	2000150c 	.word	0x2000150c
 80028d4:	20001520 	.word	0x20001520
 80028d8:	20001534 	.word	0x20001534
 80028dc:	20001548 	.word	0x20001548
 80028e0:	2000155c 	.word	0x2000155c
 80028e4:	20001570 	.word	0x20001570
 80028e8:	20001584 	.word	0x20001584
 80028ec:	20001598 	.word	0x20001598
 80028f0:	200015ac 	.word	0x200015ac
 80028f4:	200015c0 	.word	0x200015c0
 80028f8:	200015d4 	.word	0x200015d4
 80028fc:	200015e8 	.word	0x200015e8
 8002900:	200015fc 	.word	0x200015fc
 8002904:	20001610 	.word	0x20001610
 8002908:	20001624 	.word	0x20001624
 800290c:	20001638 	.word	0x20001638
 8002910:	2000164c 	.word	0x2000164c
 8002914:	20001660 	.word	0x20001660
 8002918:	20001674 	.word	0x20001674
 800291c:	20001688 	.word	0x20001688
 8002920:	2000169c 	.word	0x2000169c
 8002924:	200016b0 	.word	0x200016b0
 8002928:	200016c4 	.word	0x200016c4
 800292c:	200016d8 	.word	0x200016d8
 8002930:	200016ec 	.word	0x200016ec
 8002934:	20001700 	.word	0x20001700
 8002938:	20001714 	.word	0x20001714
 800293c:	20001728 	.word	0x20001728
 8002940:	2000173c 	.word	0x2000173c
 8002944:	20001750 	.word	0x20001750
 8002948:	20001764 	.word	0x20001764
 800294c:	20001778 	.word	0x20001778
 8002950:	2000178c 	.word	0x2000178c
 8002954:	200017a0 	.word	0x200017a0
 8002958:	200017b4 	.word	0x200017b4
 800295c:	200017c8 	.word	0x200017c8
 8002960:	200017dc 	.word	0x200017dc
 8002964:	200017f0 	.word	0x200017f0
 8002968:	20001804 	.word	0x20001804
 800296c:	20001818 	.word	0x20001818
 8002970:	2000182c 	.word	0x2000182c
 8002974:	20001840 	.word	0x20001840
 8002978:	20001854 	.word	0x20001854
 800297c:	20001868 	.word	0x20001868
 8002980:	2000187c 	.word	0x2000187c
 8002984:	20001890 	.word	0x20001890
 8002988:	200018a4 	.word	0x200018a4
 800298c:	200018b8 	.word	0x200018b8
 8002990:	200018cc 	.word	0x200018cc
 8002994:	200018e0 	.word	0x200018e0
 8002998:	200018f4 	.word	0x200018f4
 800299c:	20001908 	.word	0x20001908
 80029a0:	2000191c 	.word	0x2000191c
 80029a4:	20001930 	.word	0x20001930
 80029a8:	20001944 	.word	0x20001944
 80029ac:	20001958 	.word	0x20001958
 80029b0:	2000196c 	.word	0x2000196c
 80029b4:	20001980 	.word	0x20001980
 80029b8:	20001994 	.word	0x20001994
 80029bc:	200019a8 	.word	0x200019a8
 80029c0:	200019bc 	.word	0x200019bc
 80029c4:	200019d0 	.word	0x200019d0
 80029c8:	200019e4 	.word	0x200019e4
 80029cc:	200019f8 	.word	0x200019f8
 80029d0:	20001a0c 	.word	0x20001a0c
 80029d4:	20001a20 	.word	0x20001a20
 80029d8:	20001a34 	.word	0x20001a34
 80029dc:	20001a48 	.word	0x20001a48
 80029e0:	20001a5c 	.word	0x20001a5c
 80029e4:	20001a70 	.word	0x20001a70
 80029e8:	20001a84 	.word	0x20001a84
 80029ec:	20001a98 	.word	0x20001a98
 80029f0:	20001aac 	.word	0x20001aac
 80029f4:	20001ac0 	.word	0x20001ac0
 80029f8:	20001ad4 	.word	0x20001ad4
 80029fc:	20001ae8 	.word	0x20001ae8
 8002a00:	20001afc 	.word	0x20001afc
 8002a04:	20001b10 	.word	0x20001b10
 8002a08:	20001b24 	.word	0x20001b24
 8002a0c:	20001b38 	.word	0x20001b38
 8002a10:	20001b4c 	.word	0x20001b4c
 8002a14:	20001b60 	.word	0x20001b60
 8002a18:	20001b74 	.word	0x20001b74
 8002a1c:	20001b88 	.word	0x20001b88

08002a20 <takeMachineID>:
	HAL_Delay(50);

	printCredentials(1); //Ekrana makine id'si yazdır.
}

void takeMachineID() {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f001 f916 	bl	8003c58 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4892      	ldr	r0, [pc, #584]	@ (8002c7c <takeMachineID+0x25c>)
 8002a32:	f005 fcd1 	bl	80083d8 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8002a36:	2305      	movs	r3, #5
 8002a38:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8002a42:	4b8f      	ldr	r3, [pc, #572]	@ (8002c80 <takeMachineID+0x260>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7fe f918 	bl	8000c80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8002a50:	2108      	movs	r1, #8
 8002a52:	488c      	ldr	r0, [pc, #560]	@ (8002c84 <takeMachineID+0x264>)
 8002a54:	f002 fbcc 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d128      	bne.n	8002ab0 <takeMachineID+0x90>
        	lcd_cursor(0);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f001 f8fa 	bl	8003c58 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8002a64:	f000 feda 	bl	800381c <checkEEPROM4ID>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d00e      	beq.n	8002a8c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8002a6e:	4a86      	ldr	r2, [pc, #536]	@ (8002c88 <takeMachineID+0x268>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	2001      	movs	r0, #1
 8002a74:	f001 f892 	bl	8003b9c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8002a78:	4a84      	ldr	r2, [pc, #528]	@ (8002c8c <takeMachineID+0x26c>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f001 f88d 	bl	8003b9c <lcd_print>
        		HAL_Delay(1250);
 8002a82:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8002a86:	f001 fde3 	bl	8004650 <HAL_Delay>

        		goto mainSection;
 8002a8a:	e7cc      	b.n	8002a26 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8002a8c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	236e      	movs	r3, #110	@ 0x6e
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <takeMachineID+0x270>)
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	236e      	movs	r3, #110	@ 0x6e
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	21a0      	movs	r1, #160	@ 0xa0
 8002aa0:	487c      	ldr	r0, [pc, #496]	@ (8002c94 <takeMachineID+0x274>)
 8002aa2:	f002 fe47 	bl	8005734 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8002aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aaa:	f001 fdd1 	bl	8004650 <HAL_Delay>

            	break;
 8002aae:	e16a      	b.n	8002d86 <takeMachineID+0x366>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4874      	ldr	r0, [pc, #464]	@ (8002c84 <takeMachineID+0x264>)
 8002ab4:	f002 fb9c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d111      	bne.n	8002ae2 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d102      	bne.n	8002aca <takeMachineID+0xaa>
        		cursorPosition = 10;
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	e008      	b.n	8002adc <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b0e      	cmp	r3, #14
 8002ace:	d102      	bne.n	8002ad6 <takeMachineID+0xb6>
                cursorPosition = 3;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	e002      	b.n	8002adc <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8002adc:	2096      	movs	r0, #150	@ 0x96
 8002ade:	f001 fdb7 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	486c      	ldr	r0, [pc, #432]	@ (8002c98 <takeMachineID+0x278>)
 8002ae6:	f002 fb83 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d111      	bne.n	8002b14 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d102      	bne.n	8002afc <takeMachineID+0xdc>
                cursorPosition = 14;
 8002af6:	230e      	movs	r3, #14
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	e008      	b.n	8002b0e <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d102      	bne.n	8002b08 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8002b02:	2307      	movs	r3, #7
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	e002      	b.n	8002b0e <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8002b0e:	20fa      	movs	r0, #250	@ 0xfa
 8002b10:	f001 fd9e 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8002b14:	2102      	movs	r1, #2
 8002b16:	485b      	ldr	r0, [pc, #364]	@ (8002c84 <takeMachineID+0x264>)
 8002b18:	f002 fb6a 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	f040 80e4 	bne.w	8002cec <takeMachineID+0x2cc>
        	if(cursorPosition == 3) {
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d10f      	bne.n	8002b4a <takeMachineID+0x12a>
        		machineID[arrayPos] = '0';
 8002b2a:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <takeMachineID+0x25c>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	2230      	movs	r2, #48	@ 0x30
 8002b32:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8002b34:	4a56      	ldr	r2, [pc, #344]	@ (8002c90 <takeMachineID+0x270>)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	18d1      	adds	r1, r2, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c1 2300 	strd	r2, r3, [r1]
 8002b48:	e0ba      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 4) {
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d10f      	bne.n	8002b70 <takeMachineID+0x150>
        		machineID[arrayPos] = '1';
 8002b50:	4a4a      	ldr	r2, [pc, #296]	@ (8002c7c <takeMachineID+0x25c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	2231      	movs	r2, #49	@ 0x31
 8002b58:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8002b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c90 <takeMachineID+0x270>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	18d1      	adds	r1, r2, r3
 8002b62:	f04f 0201 	mov.w	r2, #1
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9c1 2300 	strd	r2, r3, [r1]
 8002b6e:	e0a7      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 5) {
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10f      	bne.n	8002b96 <takeMachineID+0x176>
        		machineID[arrayPos] = '2';
 8002b76:	4a41      	ldr	r2, [pc, #260]	@ (8002c7c <takeMachineID+0x25c>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2232      	movs	r2, #50	@ 0x32
 8002b7e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <takeMachineID+0x270>)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	18d1      	adds	r1, r2, r3
 8002b88:	f04f 0202 	mov.w	r2, #2
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
 8002b94:	e094      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 6) {
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d10f      	bne.n	8002bbc <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8002b9c:	4a37      	ldr	r2, [pc, #220]	@ (8002c7c <takeMachineID+0x25c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	2233      	movs	r2, #51	@ 0x33
 8002ba4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8002c90 <takeMachineID+0x270>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	18d1      	adds	r1, r2, r3
 8002bae:	f04f 0203 	mov.w	r2, #3
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
 8002bba:	e081      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 7) {
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b07      	cmp	r3, #7
 8002bc0:	d10f      	bne.n	8002be2 <takeMachineID+0x1c2>
        		machineID[arrayPos] = '4';
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <takeMachineID+0x25c>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2234      	movs	r2, #52	@ 0x34
 8002bca:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8002bcc:	4a30      	ldr	r2, [pc, #192]	@ (8002c90 <takeMachineID+0x270>)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	18d1      	adds	r1, r2, r3
 8002bd4:	f04f 0204 	mov.w	r2, #4
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9c1 2300 	strd	r2, r3, [r1]
 8002be0:	e06e      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 10) {
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b0a      	cmp	r3, #10
 8002be6:	d10f      	bne.n	8002c08 <takeMachineID+0x1e8>
        		machineID[arrayPos] = '5';
 8002be8:	4a24      	ldr	r2, [pc, #144]	@ (8002c7c <takeMachineID+0x25c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	2235      	movs	r2, #53	@ 0x35
 8002bf0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8002bf2:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <takeMachineID+0x270>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	18d1      	adds	r1, r2, r3
 8002bfa:	f04f 0205 	mov.w	r2, #5
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
 8002c06:	e05b      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 11) {
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b0b      	cmp	r3, #11
 8002c0c:	d10f      	bne.n	8002c2e <takeMachineID+0x20e>
        		machineID[arrayPos] = '6';
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <takeMachineID+0x25c>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	2236      	movs	r2, #54	@ 0x36
 8002c16:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <takeMachineID+0x270>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	18d1      	adds	r1, r2, r3
 8002c20:	f04f 0206 	mov.w	r2, #6
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9c1 2300 	strd	r2, r3, [r1]
 8002c2c:	e048      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 12) {
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d10f      	bne.n	8002c54 <takeMachineID+0x234>
        		machineID[arrayPos] = '7';
 8002c34:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <takeMachineID+0x25c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2237      	movs	r2, #55	@ 0x37
 8002c3c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8002c3e:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <takeMachineID+0x270>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	18d1      	adds	r1, r2, r3
 8002c46:	f04f 0207 	mov.w	r2, #7
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9c1 2300 	strd	r2, r3, [r1]
 8002c52:	e035      	b.n	8002cc0 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 13) {
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b0d      	cmp	r3, #13
 8002c58:	d120      	bne.n	8002c9c <takeMachineID+0x27c>
        		machineID[arrayPos] = '8';
 8002c5a:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <takeMachineID+0x25c>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	2238      	movs	r2, #56	@ 0x38
 8002c62:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8002c64:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <takeMachineID+0x270>)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	18d1      	adds	r1, r2, r3
 8002c6c:	f04f 0208 	mov.w	r2, #8
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9c1 2300 	strd	r2, r3, [r1]
 8002c78:	e022      	b.n	8002cc0 <takeMachineID+0x2a0>
 8002c7a:	bf00      	nop
 8002c7c:	20001330 	.word	0x20001330
 8002c80:	20000000 	.word	0x20000000
 8002c84:	40010800 	.word	0x40010800
 8002c88:	20001a70 	.word	0x20001a70
 8002c8c:	20001a84 	.word	0x20001a84
 8002c90:	20000fc0 	.word	0x20000fc0
 8002c94:	20001bc4 	.word	0x20001bc4
 8002c98:	40011000 	.word	0x40011000
        	} else if(cursorPosition == 14) {
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b0e      	cmp	r3, #14
 8002ca0:	d10e      	bne.n	8002cc0 <takeMachineID+0x2a0>
        		machineID[arrayPos] = '9';
 8002ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8002d90 <takeMachineID+0x370>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	2239      	movs	r2, #57	@ 0x39
 8002caa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8002cac:	4a39      	ldr	r2, [pc, #228]	@ (8002d94 <takeMachineID+0x374>)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	18d1      	adds	r1, r2, r3
 8002cb4:	f04f 0209 	mov.w	r2, #9
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9c1 2300 	strd	r2, r3, [r1]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	4a32      	ldr	r2, [pc, #200]	@ (8002d90 <takeMachineID+0x370>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 ff79 	bl	8003bc6 <lcd_print_char>

        	writeLoc++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8002ce6:	2096      	movs	r0, #150	@ 0x96
 8002ce8:	f001 fcb2 	bl	8004650 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8002cec:	2104      	movs	r1, #4
 8002cee:	482a      	ldr	r0, [pc, #168]	@ (8002d98 <takeMachineID+0x378>)
 8002cf0:	f002 fa7e 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <takeMachineID+0x358>
            if(strlen(machineID) >= 1) {
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <takeMachineID+0x370>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d037      	beq.n	8002d72 <takeMachineID+0x352>
                machineID[arrayPos] = '\0';
 8002d02:	4a23      	ldr	r2, [pc, #140]	@ (8002d90 <takeMachineID+0x370>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8002d0c:	4a21      	ldr	r2, [pc, #132]	@ (8002d94 <takeMachineID+0x374>)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	18d1      	adds	r1, r2, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9c1 2300 	strd	r2, r3, [r1]

                if(writeLoc > 5) {
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	dd03      	ble.n	8002d2e <takeMachineID+0x30e>
                	writeLoc--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e004      	b.n	8002d38 <takeMachineID+0x318>
                } else if(writeLoc < 5) {
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	dc01      	bgt.n	8002d38 <takeMachineID+0x318>
                	writeLoc = 5;
 8002d34:	2305      	movs	r3, #5
 8002d36:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dd06      	ble.n	8002d4c <takeMachineID+0x32c>
                	arrayPos--;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	e007      	b.n	8002d5c <takeMachineID+0x33c>
                } else if(arrayPos < 0) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da04      	bge.n	8002d5c <takeMachineID+0x33c>
                	arrayPos = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <takeMachineID+0x37c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3305      	adds	r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4619      	mov	r1, r3
 8002d66:	2001      	movs	r0, #1
 8002d68:	f000 ff4e 	bl	8003c08 <lcd_delete_char>
                HAL_Delay(50);
 8002d6c:	2032      	movs	r0, #50	@ 0x32
 8002d6e:	f001 fc6f 	bl	8004650 <HAL_Delay>
            }

            HAL_Delay(150);
 8002d72:	2096      	movs	r0, #150	@ 0x96
 8002d74:	f001 fc6c 	bl	8004650 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f000 feed 	bl	8003b5e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8002d84:	e664      	b.n	8002a50 <takeMachineID+0x30>
    }
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20001330 	.word	0x20001330
 8002d94:	20000fc0 	.word	0x20000fc0
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	20000000 	.word	0x20000000

08002da0 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <ssidConfirmation+0xbc>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2001      	movs	r0, #1
 8002db0:	f000 fef4 	bl	8003b9c <lcd_print>

	while(loopVal == 1) {
 8002db4:	e01f      	b.n	8002df6 <ssidConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8002db6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <ssidConfirmation+0xc0>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f000 feee 	bl	8003b9c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4828      	ldr	r0, [pc, #160]	@ (8002e64 <ssidConfirmation+0xc4>)
 8002dc4:	f002 fa14 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <ssidConfirmation+0x32>
			loopVal = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8002dd2:	4825      	ldr	r0, [pc, #148]	@ (8002e68 <ssidConfirmation+0xc8>)
 8002dd4:	f7fd fa26 	bl	8000224 <strlen>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d906      	bls.n	8002dec <ssidConfirmation+0x4c>
			slideText(wifiSSID, 1, 1, 1);
 8002dde:	2301      	movs	r3, #1
 8002de0:	2201      	movs	r2, #1
 8002de2:	2101      	movs	r1, #1
 8002de4:	4820      	ldr	r0, [pc, #128]	@ (8002e68 <ssidConfirmation+0xc8>)
 8002de6:	f7fe f8ef 	bl	8000fc8 <slideText>
 8002dea:	e004      	b.n	8002df6 <ssidConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiSSID);
 8002dec:	4a1e      	ldr	r2, [pc, #120]	@ (8002e68 <ssidConfirmation+0xc8>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2001      	movs	r0, #1
 8002df2:	f000 fed3 	bl	8003b9c <lcd_print>
	while(loopVal == 1) {
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d0dc      	beq.n	8002db6 <ssidConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f000 ff2b 	bl	8003c58 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8002e02:	4819      	ldr	r0, [pc, #100]	@ (8002e68 <ssidConfirmation+0xc8>)
 8002e04:	f7fd fa0e 	bl	8000224 <strlen>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b14      	cmp	r3, #20
 8002e0c:	d90f      	bls.n	8002e2e <ssidConfirmation+0x8e>
    	lcd_print(1, 1, ssidExceedErrorText);
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <ssidConfirmation+0xcc>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fec2 	bl	8003b9c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8002e18:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <ssidConfirmation+0xd0>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f000 febd 	bl	8003b9c <lcd_print>
        HAL_Delay(1250);
 8002e22:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8002e26:	f001 fc13 	bl	8004650 <HAL_Delay>

        return 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e011      	b.n	8002e52 <ssidConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8002e2e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	236e      	movs	r3, #110	@ 0x6e
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <ssidConfirmation+0xd4>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	236e      	movs	r3, #110	@ 0x6e
 8002e3e:	2200      	movs	r2, #0
 8002e40:	21a0      	movs	r1, #160	@ 0xa0
 8002e42:	480d      	ldr	r0, [pc, #52]	@ (8002e78 <ssidConfirmation+0xd8>)
 8002e44:	f002 fc76 	bl	8005734 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8002e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e4c:	f001 fc00 	bl	8004650 <HAL_Delay>

    	return 1;
 8002e50:	2301      	movs	r3, #1
    }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	08008e44 	.word	0x08008e44
 8002e60:	20001b88 	.word	0x20001b88
 8002e64:	40010800 	.word	0x40010800
 8002e68:	2000133c 	.word	0x2000133c
 8002e6c:	20001a98 	.word	0x20001a98
 8002e70:	20001aac 	.word	0x20001aac
 8002e74:	20000fc0 	.word	0x20000fc0
 8002e78:	20001bc4 	.word	0x20001bc4

08002e7c <takeWifiSSID>:

void takeWifiSSID() {
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 fee8 	bl	8003c58 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8002e88:	2214      	movs	r2, #20
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	489a      	ldr	r0, [pc, #616]	@ (80030f8 <takeWifiSSID+0x27c>)
 8002e8e:	f005 faa3 	bl	80083d8 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8002e96:	2307      	movs	r3, #7
 8002e98:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8002ea2:	4b96      	ldr	r3, [pc, #600]	@ (80030fc <takeWifiSSID+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2002      	movs	r0, #2
 8002eac:	f7fd fee8 	bl	8000c80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	4893      	ldr	r0, [pc, #588]	@ (8003100 <takeWifiSSID+0x284>)
 8002eb4:	f002 f99c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d106      	bne.n	8002ecc <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8002ebe:	f7ff ff6f 	bl	8002da0 <ssidConfirmation>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 8140 	bne.w	800314a <takeWifiSSID+0x2ce>
        		goto mainSSIDSection;
 8002eca:	e7da      	b.n	8002e82 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8002ecc:	2101      	movs	r1, #1
 8002ece:	488c      	ldr	r0, [pc, #560]	@ (8003100 <takeWifiSSID+0x284>)
 8002ed0:	f002 f98e 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d14d      	bne.n	8002f76 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b50      	cmp	r3, #80	@ 0x50
 8002ede:	dd01      	ble.n	8002ee4 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d13f      	bne.n	8002f6a <takeWifiSSID+0xee>
            	if(page == 1) {
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d109      	bne.n	8002f04 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
            		page++;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8002efa:	2102      	movs	r1, #2
 8002efc:	2002      	movs	r0, #2
 8002efe:	f7fd febf 	bl	8000c80 <printTemplate>
 8002f02:	e035      	b.n	8002f70 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d109      	bne.n	8002f1e <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
            		page++;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8002f14:	2103      	movs	r1, #3
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7fd feb2 	bl	8000c80 <printTemplate>
 8002f1c:	e028      	b.n	8002f70 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d109      	bne.n	8002f38 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
            		page++;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8002f2e:	2104      	movs	r1, #4
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fea5 	bl	8000c80 <printTemplate>
 8002f36:	e01b      	b.n	8002f70 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d109      	bne.n	8002f52 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
            		page++;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8002f48:	2105      	movs	r1, #5
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	f7fd fe98 	bl	8000c80 <printTemplate>
 8002f50:	e00e      	b.n	8002f70 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10b      	bne.n	8002f70 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8002f60:	2101      	movs	r1, #1
 8002f62:	2002      	movs	r0, #2
 8002f64:	f7fd fe8c 	bl	8000c80 <printTemplate>
 8002f68:	e002      	b.n	8002f70 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8002f70:	2096      	movs	r0, #150	@ 0x96
 8002f72:	f001 fb6d 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4862      	ldr	r0, [pc, #392]	@ (8003104 <takeWifiSSID+0x288>)
 8002f7a:	f002 f939 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d149      	bne.n	8003018 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	dc01      	bgt.n	8002f8e <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8002f8a:	2350      	movs	r3, #80	@ 0x50
 8002f8c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d13b      	bne.n	800300c <takeWifiSSID+0x190>
            	if(page == 1) {
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d108      	bne.n	8002fac <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7fd fe6b 	bl	8000c80 <printTemplate>
 8002faa:	e032      	b.n	8003012 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d108      	bne.n	8002fc4 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8002fba:	2101      	movs	r1, #1
 8002fbc:	2002      	movs	r0, #2
 8002fbe:	f7fd fe5f 	bl	8000c80 <printTemplate>
 8002fc2:	e026      	b.n	8003012 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d108      	bne.n	8002fdc <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8002fca:	2310      	movs	r3, #16
 8002fcc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7fd fe53 	bl	8000c80 <printTemplate>
 8002fda:	e01a      	b.n	8003012 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d108      	bne.n	8002ff4 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8002fea:	2103      	movs	r1, #3
 8002fec:	2002      	movs	r0, #2
 8002fee:	f7fd fe47 	bl	8000c80 <printTemplate>
 8002ff2:	e00e      	b.n	8003012 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10b      	bne.n	8003012 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8002ffe:	2304      	movs	r3, #4
 8003000:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8003002:	2104      	movs	r1, #4
 8003004:	2002      	movs	r0, #2
 8003006:	f7fd fe3b 	bl	8000c80 <printTemplate>
 800300a:	e002      	b.n	8003012 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8003012:	2096      	movs	r0, #150	@ 0x96
 8003014:	f001 fb1c 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8003018:	2102      	movs	r1, #2
 800301a:	4839      	ldr	r0, [pc, #228]	@ (8003100 <takeWifiSSID+0x284>)
 800301c:	f002 f8e8 	bl	80051f0 <HAL_GPIO_ReadPin>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d137      	bne.n	8003096 <takeWifiSSID+0x21a>
            eepromData[eepromVal] = cursorPosition;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	17da      	asrs	r2, r3, #31
 800302a:	461c      	mov	r4, r3
 800302c:	4615      	mov	r5, r2
 800302e:	4a36      	ldr	r2, [pc, #216]	@ (8003108 <takeWifiSSID+0x28c>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	e9c3 4500 	strd	r4, r5, [r3]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <takeWifiSSID+0x290>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	7819      	ldrb	r1, [r3, #0]
 8003042:	4a2d      	ldr	r2, [pc, #180]	@ (80030f8 <takeWifiSSID+0x27c>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4413      	add	r3, r2
 8003048:	460a      	mov	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	b2d9      	uxtb	r1, r3
 8003050:	4a2e      	ldr	r2, [pc, #184]	@ (800310c <takeWifiSSID+0x290>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	2001      	movs	r0, #1
 800305c:	f000 fdb3 	bl	8003bc6 <lcd_print_char>

            writeLoc++;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3301      	adds	r3, #1
 8003064:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3301      	adds	r3, #1
 8003070:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8003072:	4a25      	ldr	r2, [pc, #148]	@ (8003108 <takeWifiSSID+0x28c>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	18d1      	adds	r1, r2, r3
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9c1 2300 	strd	r2, r3, [r1]
            wifiSSID[arrayPosition] = '\0';
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <takeWifiSSID+0x27c>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8003090:	2096      	movs	r0, #150	@ 0x96
 8003092:	f001 fadd 	bl	8004650 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8003096:	2104      	movs	r1, #4
 8003098:	4819      	ldr	r0, [pc, #100]	@ (8003100 <takeWifiSSID+0x284>)
 800309a:	f002 f8a9 	bl	80051f0 <HAL_GPIO_ReadPin>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d14b      	bne.n	800313c <takeWifiSSID+0x2c0>
        	if(strlen(wifiSSID) >= 1) {
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <takeWifiSSID+0x27c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d044      	beq.n	8003136 <takeWifiSSID+0x2ba>
        		eepromData[eepromVal] = '\0';
 80030ac:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <takeWifiSSID+0x28c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	18d1      	adds	r1, r2, r3
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9c1 2300 	strd	r2, r3, [r1]
        		wifiSSID[arrayPosition] = '\0';
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <takeWifiSSID+0x27c>)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]

        		//if(strlen(wifiSSID) > 10) {
        		    //slideTextInput(wifiSSID, 7, 1, 1);
        		//}

        		if(writeLoc > 7) {
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	dd03      	ble.n	80030d8 <takeWifiSSID+0x25c>
        			writeLoc--;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e004      	b.n	80030e2 <takeWifiSSID+0x266>
        		} else if(writeLoc < 7) {
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b06      	cmp	r3, #6
 80030dc:	dc01      	bgt.n	80030e2 <takeWifiSSID+0x266>
        			writeLoc = 7;
 80030de:	2307      	movs	r3, #7
 80030e0:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dd13      	ble.n	8003110 <takeWifiSSID+0x294>
        			arrayPosition--;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	e014      	b.n	8003120 <takeWifiSSID+0x2a4>
 80030f6:	bf00      	nop
 80030f8:	2000133c 	.word	0x2000133c
 80030fc:	20000004 	.word	0x20000004
 8003100:	40010800 	.word	0x40010800
 8003104:	40011000 	.word	0x40011000
 8003108:	20000fc0 	.word	0x20000fc0
 800310c:	20000018 	.word	0x20000018
        		} else if(arrayPosition < 0) {
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da04      	bge.n	8003120 <takeWifiSSID+0x2a4>
        			arrayPosition = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800311a:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <takeWifiSSID+0x2d8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3307      	adds	r3, #7
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	2001      	movs	r0, #1
 800312c:	f000 fd6c 	bl	8003c08 <lcd_delete_char>
        		HAL_Delay(50);
 8003130:	2032      	movs	r0, #50	@ 0x32
 8003132:	f001 fa8d 	bl	8004650 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8003136:	2096      	movs	r0, #150	@ 0x96
 8003138:	f001 fa8a 	bl	8004650 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	2002      	movs	r0, #2
 8003144:	f000 fd0b 	bl	8003b5e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8003148:	e6b2      	b.n	8002eb0 <takeWifiSSID+0x34>
        		break;
 800314a:	bf00      	nop
    }
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	20000004 	.word	0x20000004

08003158 <passConfirmation>:

uint8_t passConfirmation() {
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8003162:	4a2c      	ldr	r2, [pc, #176]	@ (8003214 <passConfirmation+0xbc>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f000 fd18 	bl	8003b9c <lcd_print>

	while(loopVal == 1) {
 800316c:	e01f      	b.n	80031ae <passConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 800316e:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <passConfirmation+0xc0>)
 8003170:	2101      	movs	r1, #1
 8003172:	2002      	movs	r0, #2
 8003174:	f000 fd12 	bl	8003b9c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8003178:	2102      	movs	r1, #2
 800317a:	4828      	ldr	r0, [pc, #160]	@ (800321c <passConfirmation+0xc4>)
 800317c:	f002 f838 	bl	80051f0 <HAL_GPIO_ReadPin>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <passConfirmation+0x32>
			loopVal = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiPass) > 16) {
 800318a:	4825      	ldr	r0, [pc, #148]	@ (8003220 <passConfirmation+0xc8>)
 800318c:	f7fd f84a 	bl	8000224 <strlen>
 8003190:	4603      	mov	r3, r0
 8003192:	2b10      	cmp	r3, #16
 8003194:	d906      	bls.n	80031a4 <passConfirmation+0x4c>
			slideText(wifiPass, 1, 1, 1);
 8003196:	2301      	movs	r3, #1
 8003198:	2201      	movs	r2, #1
 800319a:	2101      	movs	r1, #1
 800319c:	4820      	ldr	r0, [pc, #128]	@ (8003220 <passConfirmation+0xc8>)
 800319e:	f7fd ff13 	bl	8000fc8 <slideText>
 80031a2:	e004      	b.n	80031ae <passConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiPass);
 80031a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003220 <passConfirmation+0xc8>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2001      	movs	r0, #1
 80031aa:	f000 fcf7 	bl	8003b9c <lcd_print>
	while(loopVal == 1) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d0dc      	beq.n	800316e <passConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f000 fd4f 	bl	8003c58 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80031ba:	4819      	ldr	r0, [pc, #100]	@ (8003220 <passConfirmation+0xc8>)
 80031bc:	f7fd f832 	bl	8000224 <strlen>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b14      	cmp	r3, #20
 80031c4:	d90f      	bls.n	80031e6 <passConfirmation+0x8e>
    	lcd_print(1, 1, passExceedErrorText);
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <passConfirmation+0xcc>)
 80031c8:	2101      	movs	r1, #1
 80031ca:	2001      	movs	r0, #1
 80031cc:	f000 fce6 	bl	8003b9c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80031d0:	4a15      	ldr	r2, [pc, #84]	@ (8003228 <passConfirmation+0xd0>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f000 fce1 	bl	8003b9c <lcd_print>
        HAL_Delay(1250);
 80031da:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80031de:	f001 fa37 	bl	8004650 <HAL_Delay>

        return 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e011      	b.n	800320a <passConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80031e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	236e      	movs	r3, #110	@ 0x6e
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <passConfirmation+0xd4>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	236e      	movs	r3, #110	@ 0x6e
 80031f6:	2200      	movs	r2, #0
 80031f8:	21a0      	movs	r1, #160	@ 0xa0
 80031fa:	480d      	ldr	r0, [pc, #52]	@ (8003230 <passConfirmation+0xd8>)
 80031fc:	f002 fa9a 	bl	8005734 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8003200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003204:	f001 fa24 	bl	8004650 <HAL_Delay>

    	return 1;
 8003208:	2301      	movs	r3, #1
    }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	08008e44 	.word	0x08008e44
 8003218:	20001b88 	.word	0x20001b88
 800321c:	40010800 	.word	0x40010800
 8003220:	20001350 	.word	0x20001350
 8003224:	20001ac0 	.word	0x20001ac0
 8003228:	20001ad4 	.word	0x20001ad4
 800322c:	20000fc0 	.word	0x20000fc0
 8003230:	20001bc4 	.word	0x20001bc4

08003234 <takeWifiPass>:

void takeWifiPass() {
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f000 fd0c 	bl	8003c58 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8003240:	2214      	movs	r2, #20
 8003242:	2100      	movs	r1, #0
 8003244:	489a      	ldr	r0, [pc, #616]	@ (80034b0 <takeWifiPass+0x27c>)
 8003246:	f005 f8c7 	bl	80083d8 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800324a:	2301      	movs	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800324e:	2307      	movs	r3, #7
 8003250:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8003252:	2301      	movs	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800325a:	4b96      	ldr	r3, [pc, #600]	@ (80034b4 <takeWifiPass+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8003260:	2101      	movs	r1, #1
 8003262:	2003      	movs	r0, #3
 8003264:	f7fd fd0c 	bl	8000c80 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8003268:	2108      	movs	r1, #8
 800326a:	4893      	ldr	r0, [pc, #588]	@ (80034b8 <takeWifiPass+0x284>)
 800326c:	f001 ffc0 	bl	80051f0 <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d106      	bne.n	8003284 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8003276:	f7ff ff6f 	bl	8003158 <passConfirmation>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 8140 	bne.w	8003502 <takeWifiPass+0x2ce>
    	        goto mainPassSection;
 8003282:	e7da      	b.n	800323a <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8003284:	2101      	movs	r1, #1
 8003286:	488c      	ldr	r0, [pc, #560]	@ (80034b8 <takeWifiPass+0x284>)
 8003288:	f001 ffb2 	bl	80051f0 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d14d      	bne.n	800332e <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b50      	cmp	r3, #80	@ 0x50
 8003296:	dd01      	ble.n	800329c <takeWifiPass+0x68>
        		cursorPosition = 1;
 8003298:	2301      	movs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d13f      	bne.n	8003322 <takeWifiPass+0xee>
            	if(page == 1) {
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d109      	bne.n	80032bc <takeWifiPass+0x88>
            		cursorPosition = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
            		page++;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3301      	adds	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80032b2:	2102      	movs	r1, #2
 80032b4:	2003      	movs	r0, #3
 80032b6:	f7fd fce3 	bl	8000c80 <printTemplate>
 80032ba:	e035      	b.n	8003328 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d109      	bne.n	80032d6 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
            		page++;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80032cc:	2103      	movs	r1, #3
 80032ce:	2003      	movs	r0, #3
 80032d0:	f7fd fcd6 	bl	8000c80 <printTemplate>
 80032d4:	e028      	b.n	8003328 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d109      	bne.n	80032f0 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80032dc:	2301      	movs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
            		page++;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80032e6:	2104      	movs	r1, #4
 80032e8:	2003      	movs	r0, #3
 80032ea:	f7fd fcc9 	bl	8000c80 <printTemplate>
 80032ee:	e01b      	b.n	8003328 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d109      	bne.n	800330a <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
            		page++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8003300:	2105      	movs	r1, #5
 8003302:	2003      	movs	r0, #3
 8003304:	f7fd fcbc 	bl	8000c80 <printTemplate>
 8003308:	e00e      	b.n	8003328 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10b      	bne.n	8003328 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8003310:	2301      	movs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8003318:	2101      	movs	r1, #1
 800331a:	2003      	movs	r0, #3
 800331c:	f7fd fcb0 	bl	8000c80 <printTemplate>
 8003320:	e002      	b.n	8003328 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8003328:	2096      	movs	r0, #150	@ 0x96
 800332a:	f001 f991 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800332e:	2108      	movs	r1, #8
 8003330:	4862      	ldr	r0, [pc, #392]	@ (80034bc <takeWifiPass+0x288>)
 8003332:	f001 ff5d 	bl	80051f0 <HAL_GPIO_ReadPin>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d149      	bne.n	80033d0 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	dc01      	bgt.n	8003346 <takeWifiPass+0x112>
        		cursorPosition = 80;
 8003342:	2350      	movs	r3, #80	@ 0x50
 8003344:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d13b      	bne.n	80033c4 <takeWifiPass+0x190>
            	if(page == 1) {
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8003352:	2310      	movs	r3, #16
 8003354:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8003356:	2305      	movs	r3, #5
 8003358:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800335a:	2105      	movs	r1, #5
 800335c:	2003      	movs	r0, #3
 800335e:	f7fd fc8f 	bl	8000c80 <printTemplate>
 8003362:	e032      	b.n	80033ca <takeWifiPass+0x196>
            	} else if(page == 2) {
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d108      	bne.n	800337c <takeWifiPass+0x148>
            		cursorPosition = 16;
 800336a:	2310      	movs	r3, #16
 800336c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8003372:	2101      	movs	r1, #1
 8003374:	2003      	movs	r0, #3
 8003376:	f7fd fc83 	bl	8000c80 <printTemplate>
 800337a:	e026      	b.n	80033ca <takeWifiPass+0x196>
            	} else if(page == 3) {
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d108      	bne.n	8003394 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8003382:	2310      	movs	r3, #16
 8003384:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8003386:	2302      	movs	r3, #2
 8003388:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800338a:	2102      	movs	r1, #2
 800338c:	2003      	movs	r0, #3
 800338e:	f7fd fc77 	bl	8000c80 <printTemplate>
 8003392:	e01a      	b.n	80033ca <takeWifiPass+0x196>
            	} else if(page == 4) {
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d108      	bne.n	80033ac <takeWifiPass+0x178>
            		cursorPosition = 16;
 800339a:	2310      	movs	r3, #16
 800339c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800339e:	2303      	movs	r3, #3
 80033a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80033a2:	2103      	movs	r1, #3
 80033a4:	2003      	movs	r0, #3
 80033a6:	f7fd fc6b 	bl	8000c80 <printTemplate>
 80033aa:	e00e      	b.n	80033ca <takeWifiPass+0x196>
            	} else if(page == 5) {
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d10b      	bne.n	80033ca <takeWifiPass+0x196>
            		cursorPosition = 16;
 80033b2:	2310      	movs	r3, #16
 80033b4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80033b6:	2304      	movs	r3, #4
 80033b8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80033ba:	2104      	movs	r1, #4
 80033bc:	2003      	movs	r0, #3
 80033be:	f7fd fc5f 	bl	8000c80 <printTemplate>
 80033c2:	e002      	b.n	80033ca <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80033ca:	2096      	movs	r0, #150	@ 0x96
 80033cc:	f001 f940 	bl	8004650 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80033d0:	2102      	movs	r1, #2
 80033d2:	4839      	ldr	r0, [pc, #228]	@ (80034b8 <takeWifiPass+0x284>)
 80033d4:	f001 ff0c 	bl	80051f0 <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d137      	bne.n	800344e <takeWifiPass+0x21a>
            eepromData[eepromVal] = cursorPosition;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	17da      	asrs	r2, r3, #31
 80033e2:	461c      	mov	r4, r3
 80033e4:	4615      	mov	r5, r2
 80033e6:	4a36      	ldr	r2, [pc, #216]	@ (80034c0 <takeWifiPass+0x28c>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	e9c3 4500 	strd	r4, r5, [r3]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80033f2:	4a34      	ldr	r2, [pc, #208]	@ (80034c4 <takeWifiPass+0x290>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	7819      	ldrb	r1, [r3, #0]
 80033fa:	4a2d      	ldr	r2, [pc, #180]	@ (80034b0 <takeWifiPass+0x27c>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4413      	add	r3, r2
 8003400:	460a      	mov	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	b2d9      	uxtb	r1, r3
 8003408:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <takeWifiPass+0x290>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	2001      	movs	r0, #1
 8003414:	f000 fbd7 	bl	8003bc6 <lcd_print_char>

            writeLoc++;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3301      	adds	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800342a:	4a25      	ldr	r2, [pc, #148]	@ (80034c0 <takeWifiPass+0x28c>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	18d1      	adds	r1, r2, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9c1 2300 	strd	r2, r3, [r1]
            wifiPass[arrayPosition] = '\0';
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <takeWifiPass+0x27c>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4413      	add	r3, r2
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8003448:	2096      	movs	r0, #150	@ 0x96
 800344a:	f001 f901 	bl	8004650 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800344e:	2104      	movs	r1, #4
 8003450:	4819      	ldr	r0, [pc, #100]	@ (80034b8 <takeWifiPass+0x284>)
 8003452:	f001 fecd 	bl	80051f0 <HAL_GPIO_ReadPin>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d14b      	bne.n	80034f4 <takeWifiPass+0x2c0>
        	if(strlen(wifiPass) >= 1) {
 800345c:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <takeWifiPass+0x27c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d044      	beq.n	80034ee <takeWifiPass+0x2ba>
        		eepromData[eepromVal] = '\0';
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <takeWifiPass+0x28c>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	18d1      	adds	r1, r2, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9c1 2300 	strd	r2, r3, [r1]
        		wifiPass[arrayPosition] = '\0';
 8003478:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <takeWifiPass+0x27c>)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b07      	cmp	r3, #7
 8003486:	dd03      	ble.n	8003490 <takeWifiPass+0x25c>
        			writeLoc--;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3b01      	subs	r3, #1
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e004      	b.n	800349a <takeWifiPass+0x266>
        		} else if(writeLoc < 7) {
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b06      	cmp	r3, #6
 8003494:	dc01      	bgt.n	800349a <takeWifiPass+0x266>
        			writeLoc = 7;
 8003496:	2307      	movs	r3, #7
 8003498:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dd13      	ble.n	80034c8 <takeWifiPass+0x294>
        			arrayPosition--;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e014      	b.n	80034d8 <takeWifiPass+0x2a4>
 80034ae:	bf00      	nop
 80034b0:	20001350 	.word	0x20001350
 80034b4:	20000008 	.word	0x20000008
 80034b8:	40010800 	.word	0x40010800
 80034bc:	40011000 	.word	0x40011000
 80034c0:	20000fc0 	.word	0x20000fc0
 80034c4:	20000018 	.word	0x20000018
        		} else if(arrayPosition < 0) {
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da04      	bge.n	80034d8 <takeWifiPass+0x2a4>
        			arrayPosition = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <takeWifiPass+0x2d8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3307      	adds	r3, #7
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	2001      	movs	r0, #1
 80034e4:	f000 fb90 	bl	8003c08 <lcd_delete_char>
        		HAL_Delay(50);
 80034e8:	2032      	movs	r0, #50	@ 0x32
 80034ea:	f001 f8b1 	bl	8004650 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80034ee:	2096      	movs	r0, #150	@ 0x96
 80034f0:	f001 f8ae 	bl	8004650 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	2002      	movs	r0, #2
 80034fc:	f000 fb2f 	bl	8003b5e <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8003500:	e6b2      	b.n	8003268 <takeWifiPass+0x34>
    	        break;
 8003502:	bf00      	nop
    }
}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bdb0      	pop	{r4, r5, r7, pc}
 800350c:	20000008 	.word	0x20000008

08003510 <mergeData>:

char* mergeData() {
 8003510:	b580      	push	{r7, lr}
 8003512:	b09c      	sub	sp, #112	@ 0x70
 8003514:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800351a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800351e:	2229      	movs	r2, #41	@ 0x29
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f004 ff58 	bl	80083d8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8003528:	4b66      	ldr	r3, [pc, #408]	@ (80036c4 <mergeData+0x1b4>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	703b      	strb	r3, [r7, #0]
 800352e:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <mergeData+0x1b8>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	707b      	strb	r3, [r7, #1]
 8003534:	4b65      	ldr	r3, [pc, #404]	@ (80036cc <mergeData+0x1bc>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	70bb      	strb	r3, [r7, #2]
 800353a:	4b65      	ldr	r3, [pc, #404]	@ (80036d0 <mergeData+0x1c0>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	70fb      	strb	r3, [r7, #3]
 8003540:	4b64      	ldr	r3, [pc, #400]	@ (80036d4 <mergeData+0x1c4>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	713b      	strb	r3, [r7, #4]
 8003546:	4b64      	ldr	r3, [pc, #400]	@ (80036d8 <mergeData+0x1c8>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	717b      	strb	r3, [r7, #5]
 800354c:	4b63      	ldr	r3, [pc, #396]	@ (80036dc <mergeData+0x1cc>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	71bb      	strb	r3, [r7, #6]
 8003552:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <mergeData+0x1d0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	4b62      	ldr	r3, [pc, #392]	@ (80036e4 <mergeData+0x1d4>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	723b      	strb	r3, [r7, #8]
 800355e:	4b62      	ldr	r3, [pc, #392]	@ (80036e8 <mergeData+0x1d8>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	727b      	strb	r3, [r7, #9]
 8003564:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <mergeData+0x1dc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	72bb      	strb	r3, [r7, #10]
 800356a:	4b61      	ldr	r3, [pc, #388]	@ (80036f0 <mergeData+0x1e0>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	72fb      	strb	r3, [r7, #11]
 8003570:	4b60      	ldr	r3, [pc, #384]	@ (80036f4 <mergeData+0x1e4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	733b      	strb	r3, [r7, #12]
 8003576:	4b60      	ldr	r3, [pc, #384]	@ (80036f8 <mergeData+0x1e8>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	737b      	strb	r3, [r7, #13]
 800357c:	4b5f      	ldr	r3, [pc, #380]	@ (80036fc <mergeData+0x1ec>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	73bb      	strb	r3, [r7, #14]
 8003582:	4b5f      	ldr	r3, [pc, #380]	@ (8003700 <mergeData+0x1f0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	4b5e      	ldr	r3, [pc, #376]	@ (8003704 <mergeData+0x1f4>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	743b      	strb	r3, [r7, #16]
 800358e:	4b5e      	ldr	r3, [pc, #376]	@ (8003708 <mergeData+0x1f8>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	747b      	strb	r3, [r7, #17]
 8003594:	4b5d      	ldr	r3, [pc, #372]	@ (800370c <mergeData+0x1fc>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	74bb      	strb	r3, [r7, #18]
 800359a:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <mergeData+0x200>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	74fb      	strb	r3, [r7, #19]
 80035a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <mergeData+0x204>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	753b      	strb	r3, [r7, #20]
 80035a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003718 <mergeData+0x208>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	757b      	strb	r3, [r7, #21]
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <mergeData+0x20c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	75bb      	strb	r3, [r7, #22]
 80035b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <mergeData+0x210>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	75fb      	strb	r3, [r7, #23]
 80035b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003724 <mergeData+0x214>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	763b      	strb	r3, [r7, #24]
 80035be:	4b5a      	ldr	r3, [pc, #360]	@ (8003728 <mergeData+0x218>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	767b      	strb	r3, [r7, #25]
 80035c4:	4b59      	ldr	r3, [pc, #356]	@ (800372c <mergeData+0x21c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	76bb      	strb	r3, [r7, #26]
 80035ca:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <mergeData+0x220>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	b2d3      	uxtb	r3, r2
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	4b57      	ldr	r3, [pc, #348]	@ (8003734 <mergeData+0x224>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	b2d3      	uxtb	r3, r2
 80035dc:	773b      	strb	r3, [r7, #28]
 80035de:	4b56      	ldr	r3, [pc, #344]	@ (8003738 <mergeData+0x228>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 80035e4:	4b55      	ldr	r3, [pc, #340]	@ (800373c <mergeData+0x22c>)
 80035e6:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	@ 0x130
	uint8_t uintVariables[] = {
 80035ea:	b2d3      	uxtb	r3, r2
 80035ec:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 80035ee:	4b53      	ldr	r3, [pc, #332]	@ (800373c <mergeData+0x22c>)
 80035f0:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	@ 0x138
	uint8_t uintVariables[] = {
 80035f4:	b2d3      	uxtb	r3, r2
 80035f6:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 80035f8:	4b50      	ldr	r3, [pc, #320]	@ (800373c <mergeData+0x22c>)
 80035fa:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
	uint8_t uintVariables[] = {
 80035fe:	b2d3      	uxtb	r3, r2
 8003600:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8003604:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <mergeData+0x22c>)
 8003606:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	@ 0x148
	uint8_t uintVariables[] = {
 800360a:	b2d3      	uxtb	r3, r2
 800360c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8003610:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <mergeData+0x22c>)
 8003612:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	@ 0x150
	uint8_t uintVariables[] = {
 8003616:	b2d3      	uxtb	r3, r2
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 800361c:	4b47      	ldr	r3, [pc, #284]	@ (800373c <mergeData+0x22c>)
 800361e:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	@ 0x158
	uint8_t uintVariables[] = {
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8003628:	4b44      	ldr	r3, [pc, #272]	@ (800373c <mergeData+0x22c>)
 800362a:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
	uint8_t uintVariables[] = {
 800362e:	b2d3      	uxtb	r3, r2
 8003630:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8003634:	4b41      	ldr	r3, [pc, #260]	@ (800373c <mergeData+0x22c>)
 8003636:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	@ 0x168
	uint8_t uintVariables[] = {
 800363a:	b2d3      	uxtb	r3, r2
 800363c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8003640:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <mergeData+0x22c>)
 8003642:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	@ 0x170
	uint8_t uintVariables[] = {
 8003646:	b2d3      	uxtb	r3, r2
 8003648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 800364c:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <mergeData+0x22c>)
 800364e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	@ 0x178
	uint8_t uintVariables[] = {
 8003652:	b2d3      	uxtb	r3, r2
 8003654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003658:	2306      	movs	r3, #6
 800365a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800365e:	2300      	movs	r3, #0
 8003660:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003662:	e015      	b.n	8003690 <mergeData+0x180>
	    sprintf(temp, "%u", uintVariables[i]);
 8003664:	463a      	mov	r2, r7
 8003666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003672:	4933      	ldr	r1, [pc, #204]	@ (8003740 <mergeData+0x230>)
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fe6d 	bl	8008354 <siprintf>
	    strcat(combinedString, temp);
 800367a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800367e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f004 fe85 	bl	8008394 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800368a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800368c:	3301      	adds	r3, #1
 800368e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003692:	2b28      	cmp	r3, #40	@ 0x28
 8003694:	d9e6      	bls.n	8003664 <mergeData+0x154>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8003696:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc fdc2 	bl	8000224 <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	3301      	adds	r3, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 fd9f 	bl	80081e8 <malloc>
 80036aa:	4603      	mov	r3, r0
 80036ac:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 80036ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036b2:	4619      	mov	r1, r3
 80036b4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80036b6:	f004 fed3 	bl	8008460 <strcpy>
	return result;
 80036ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3770      	adds	r7, #112	@ 0x70
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	2000138d 	.word	0x2000138d
 80036c8:	20001381 	.word	0x20001381
 80036cc:	20001382 	.word	0x20001382
 80036d0:	20001383 	.word	0x20001383
 80036d4:	20001384 	.word	0x20001384
 80036d8:	2000138b 	.word	0x2000138b
 80036dc:	20001385 	.word	0x20001385
 80036e0:	20001386 	.word	0x20001386
 80036e4:	2000138a 	.word	0x2000138a
 80036e8:	20001387 	.word	0x20001387
 80036ec:	20001397 	.word	0x20001397
 80036f0:	20001388 	.word	0x20001388
 80036f4:	20001398 	.word	0x20001398
 80036f8:	20001389 	.word	0x20001389
 80036fc:	20001399 	.word	0x20001399
 8003700:	2000138c 	.word	0x2000138c
 8003704:	2000138e 	.word	0x2000138e
 8003708:	2000138f 	.word	0x2000138f
 800370c:	20001390 	.word	0x20001390
 8003710:	20001391 	.word	0x20001391
 8003714:	20001392 	.word	0x20001392
 8003718:	20001393 	.word	0x20001393
 800371c:	20001394 	.word	0x20001394
 8003720:	20001395 	.word	0x20001395
 8003724:	20001396 	.word	0x20001396
 8003728:	2000139a 	.word	0x2000139a
 800372c:	2000139b 	.word	0x2000139b
 8003730:	20001370 	.word	0x20001370
 8003734:	20001378 	.word	0x20001378
 8003738:	2000139e 	.word	0x2000139e
 800373c:	20000fc0 	.word	0x20000fc0
 8003740:	08008e58 	.word	0x08008e58

08003744 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 800374a:	4a13      	ldr	r2, [pc, #76]	@ (8003798 <convertAndSendData+0x54>)
 800374c:	2101      	movs	r1, #1
 800374e:	2001      	movs	r0, #1
 8003750:	f000 fa24 	bl	8003b9c <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8003754:	4a11      	ldr	r2, [pc, #68]	@ (800379c <convertAndSendData+0x58>)
 8003756:	2101      	movs	r1, #1
 8003758:	2002      	movs	r0, #2
 800375a:	f000 fa1f 	bl	8003b9c <lcd_print>

	for(int i=0; i<2; i++) {
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e00c      	b.n	800377e <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8003764:	f7ff fed4 	bl	8003510 <mergeData>
 8003768:	4603      	mov	r3, r0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <convertAndSendData+0x5c>)
 800376e:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <convertAndSendData+0x60>)
 8003770:	490d      	ldr	r1, [pc, #52]	@ (80037a8 <convertAndSendData+0x64>)
 8003772:	480e      	ldr	r0, [pc, #56]	@ (80037ac <convertAndSendData+0x68>)
 8003774:	f7fd f936 	bl	80009e4 <sendMachineData>
	for(int i=0; i<2; i++) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b01      	cmp	r3, #1
 8003782:	ddef      	ble.n	8003764 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8003784:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003788:	f000 ff62 	bl	8004650 <HAL_Delay>
	lcd_clear();
 800378c:	f000 fa32 	bl	8003bf4 <lcd_clear>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20001a20 	.word	0x20001a20
 800379c:	20001a34 	.word	0x20001a34
 80037a0:	20001350 	.word	0x20001350
 80037a4:	2000133c 	.word	0x2000133c
 80037a8:	20001330 	.word	0x20001330
 80037ac:	20001c60 	.word	0x20001c60

080037b0 <iotSetup>:

void iotSetup() {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <iotSetup+0x54>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 80037bc:	f000 f82e 	bl	800381c <checkEEPROM4ID>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <iotSetup+0x1a>
			takeMachineID();
 80037c6:	f7ff f92b 	bl	8002a20 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80037ca:	480f      	ldr	r0, [pc, #60]	@ (8003808 <iotSetup+0x58>)
 80037cc:	f7fc fd2a 	bl	8000224 <strlen>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d801      	bhi.n	80037da <iotSetup+0x2a>
			takeWifiSSID();
 80037d6:	f7ff fb51 	bl	8002e7c <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80037da:	480c      	ldr	r0, [pc, #48]	@ (800380c <iotSetup+0x5c>)
 80037dc:	f7fc fd22 	bl	8000224 <strlen>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d801      	bhi.n	80037ea <iotSetup+0x3a>
			takeWifiPass();
 80037e6:	f7ff fd25 	bl	8003234 <takeWifiPass>
			//HAL_Delay(200);
			//goto takeIDSection;
		//}
	//}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <iotSetup+0x60>)
 80037ec:	4909      	ldr	r1, [pc, #36]	@ (8003814 <iotSetup+0x64>)
 80037ee:	480a      	ldr	r0, [pc, #40]	@ (8003818 <iotSetup+0x68>)
 80037f0:	f7fd f850 	bl	8000894 <ESP8266_Init>
	HAL_Delay(500);
 80037f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037f8:	f000 ff2a 	bl	8004650 <HAL_Delay>
	convertAndSendData();
 80037fc:	f7ff ffa2 	bl	8003744 <convertAndSendData>
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	2000139c 	.word	0x2000139c
 8003808:	2000133c 	.word	0x2000133c
 800380c:	20001350 	.word	0x20001350
 8003810:	08008e5c 	.word	0x08008e5c
 8003814:	08008e74 	.word	0x08008e74
 8003818:	20001c60 	.word	0x20001c60

0800381c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8003822:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <checkEEPROM4ID+0x48>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8003828:	2301      	movs	r3, #1
 800382a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800382c:	2300      	movs	r3, #0
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	e00f      	b.n	8003852 <checkEEPROM4ID+0x36>
		if(eepromData[eepromVal] == '\0') {
 8003832:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <checkEEPROM4ID+0x4c>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	4313      	orrs	r3, r2
 8003840:	d101      	bne.n	8003846 <checkEEPROM4ID+0x2a>
			returnVal = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3301      	adds	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0b      	cmp	r3, #11
 8003856:	ddec      	ble.n	8003832 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8003858:	68bb      	ldr	r3, [r7, #8]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000000 	.word	0x20000000
 8003868:	20000fc0 	.word	0x20000fc0

0800386c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	f023 030f 	bic.w	r3, r3, #15
 800387c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003884:	7b7b      	ldrb	r3, [r7, #13]
 8003886:	f043 030c 	orr.w	r3, r3, #12
 800388a:	b2db      	uxtb	r3, r3
 800388c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800388e:	7b7b      	ldrb	r3, [r7, #13]
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	b2db      	uxtb	r3, r3
 8003896:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003898:	7b3b      	ldrb	r3, [r7, #12]
 800389a:	f043 030c 	orr.w	r3, r3, #12
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80038a2:	7b3b      	ldrb	r3, [r7, #12]
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80038ac:	bf00      	nop
 80038ae:	4825      	ldr	r0, [pc, #148]	@ (8003944 <lcd_send_cmd+0xd8>)
 80038b0:	f002 faaf 	bl	8005e12 <HAL_I2C_GetError>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d0f9      	beq.n	80038ae <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80038ba:	bf00      	nop
 80038bc:	4821      	ldr	r0, [pc, #132]	@ (8003944 <lcd_send_cmd+0xd8>)
 80038be:	f002 fa9b 	bl	8005df8 <HAL_I2C_GetState>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d1f9      	bne.n	80038bc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <lcd_send_cmd+0xdc>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d116      	bne.n	80038fe <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e00f      	b.n	80038f6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	3310      	adds	r3, #16
 80038da:	443b      	add	r3, r7
 80038dc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	f022 0208 	bic.w	r2, r2, #8
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	3310      	adds	r3, #16
 80038ea:	443b      	add	r3, r7
 80038ec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d9ec      	bls.n	80038d6 <lcd_send_cmd+0x6a>
 80038fc:	e015      	b.n	800392a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	73bb      	strb	r3, [r7, #14]
 8003902:	e00f      	b.n	8003924 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	3310      	adds	r3, #16
 8003908:	443b      	add	r3, r7
 800390a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800390e:	7bbb      	ldrb	r3, [r7, #14]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	3310      	adds	r3, #16
 8003918:	443b      	add	r3, r7
 800391a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800391e:	7bbb      	ldrb	r3, [r7, #14]
 8003920:	3301      	adds	r3, #1
 8003922:	73bb      	strb	r3, [r7, #14]
 8003924:	7bbb      	ldrb	r3, [r7, #14]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d9ec      	bls.n	8003904 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800392a:	f107 0208 	add.w	r2, r7, #8
 800392e:	2364      	movs	r3, #100	@ 0x64
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2304      	movs	r3, #4
 8003934:	214e      	movs	r1, #78	@ 0x4e
 8003936:	4803      	ldr	r0, [pc, #12]	@ (8003944 <lcd_send_cmd+0xd8>)
 8003938:	f001 fdfe 	bl	8005538 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20001bc4 	.word	0x20001bc4
 8003948:	20001b99 	.word	0x20001b99

0800394c <lcd_send_data>:

void lcd_send_data (char data) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003964:	7b7b      	ldrb	r3, [r7, #13]
 8003966:	f043 030d 	orr.w	r3, r3, #13
 800396a:	b2db      	uxtb	r3, r3
 800396c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800396e:	7b7b      	ldrb	r3, [r7, #13]
 8003970:	f043 0309 	orr.w	r3, r3, #9
 8003974:	b2db      	uxtb	r3, r3
 8003976:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003978:	7b3b      	ldrb	r3, [r7, #12]
 800397a:	f043 030d 	orr.w	r3, r3, #13
 800397e:	b2db      	uxtb	r3, r3
 8003980:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003982:	7b3b      	ldrb	r3, [r7, #12]
 8003984:	f043 0309 	orr.w	r3, r3, #9
 8003988:	b2db      	uxtb	r3, r3
 800398a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800398c:	bf00      	nop
 800398e:	4825      	ldr	r0, [pc, #148]	@ (8003a24 <lcd_send_data+0xd8>)
 8003990:	f002 fa3f 	bl	8005e12 <HAL_I2C_GetError>
 8003994:	4603      	mov	r3, r0
 8003996:	2b04      	cmp	r3, #4
 8003998:	d0f9      	beq.n	800398e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800399a:	bf00      	nop
 800399c:	4821      	ldr	r0, [pc, #132]	@ (8003a24 <lcd_send_data+0xd8>)
 800399e:	f002 fa2b 	bl	8005df8 <HAL_I2C_GetState>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d1f9      	bne.n	800399c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80039a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a28 <lcd_send_data+0xdc>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e00f      	b.n	80039d6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3310      	adds	r3, #16
 80039ba:	443b      	add	r3, r7
 80039bc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	f022 0208 	bic.w	r2, r2, #8
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	3310      	adds	r3, #16
 80039ca:	443b      	add	r3, r7
 80039cc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d9ec      	bls.n	80039b6 <lcd_send_data+0x6a>
 80039dc:	e015      	b.n	8003a0a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80039de:	2300      	movs	r3, #0
 80039e0:	73bb      	strb	r3, [r7, #14]
 80039e2:	e00f      	b.n	8003a04 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80039e4:	7bbb      	ldrb	r3, [r7, #14]
 80039e6:	3310      	adds	r3, #16
 80039e8:	443b      	add	r3, r7
 80039ea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80039ee:	7bbb      	ldrb	r3, [r7, #14]
 80039f0:	f042 0208 	orr.w	r2, r2, #8
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	3310      	adds	r3, #16
 80039f8:	443b      	add	r3, r7
 80039fa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80039fe:	7bbb      	ldrb	r3, [r7, #14]
 8003a00:	3301      	adds	r3, #1
 8003a02:	73bb      	strb	r3, [r7, #14]
 8003a04:	7bbb      	ldrb	r3, [r7, #14]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d9ec      	bls.n	80039e4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a0a:	f107 0208 	add.w	r2, r7, #8
 8003a0e:	2364      	movs	r3, #100	@ 0x64
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2304      	movs	r3, #4
 8003a14:	214e      	movs	r1, #78	@ 0x4e
 8003a16:	4803      	ldr	r0, [pc, #12]	@ (8003a24 <lcd_send_data+0xd8>)
 8003a18:	f001 fd8e 	bl	8005538 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20001bc4 	.word	0x20001bc4
 8003a28:	20001b99 	.word	0x20001b99

08003a2c <lcd_send_string>:

void lcd_send_string (char *str) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	while (*str) {
 8003a34:	e006      	b.n	8003a44 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff84 	bl	800394c <lcd_send_data>
	while (*str) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f4      	bne.n	8003a36 <lcd_send_string+0xa>
	}
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <lcd_send_char>:

void lcd_send_char(char ch) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8003a70:	7b7b      	ldrb	r3, [r7, #13]
 8003a72:	f043 030d 	orr.w	r3, r3, #13
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8003a7a:	7b7b      	ldrb	r3, [r7, #13]
 8003a7c:	f043 0309 	orr.w	r3, r3, #9
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8003a84:	7b3b      	ldrb	r3, [r7, #12]
 8003a86:	f043 030d 	orr.w	r3, r3, #13
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8003a8e:	7b3b      	ldrb	r3, [r7, #12]
 8003a90:	f043 0309 	orr.w	r3, r3, #9
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003a98:	bf00      	nop
 8003a9a:	4825      	ldr	r0, [pc, #148]	@ (8003b30 <lcd_send_char+0xd8>)
 8003a9c:	f002 f9b9 	bl	8005e12 <HAL_I2C_GetError>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d0f9      	beq.n	8003a9a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003aa6:	bf00      	nop
 8003aa8:	4821      	ldr	r0, [pc, #132]	@ (8003b30 <lcd_send_char+0xd8>)
 8003aaa:	f002 f9a5 	bl	8005df8 <HAL_I2C_GetState>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d1f9      	bne.n	8003aa8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <lcd_send_char+0xdc>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e00f      	b.n	8003ae2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	3310      	adds	r3, #16
 8003ac6:	443b      	add	r3, r7
 8003ac8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	f022 0208 	bic.w	r2, r2, #8
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	3310      	adds	r3, #16
 8003ad6:	443b      	add	r3, r7
 8003ad8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d9ec      	bls.n	8003ac2 <lcd_send_char+0x6a>
 8003ae8:	e015      	b.n	8003b16 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	73bb      	strb	r3, [r7, #14]
 8003aee:	e00f      	b.n	8003b10 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	3310      	adds	r3, #16
 8003af4:	443b      	add	r3, r7
 8003af6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003afa:	7bbb      	ldrb	r3, [r7, #14]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	3310      	adds	r3, #16
 8003b04:	443b      	add	r3, r7
 8003b06:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8003b0a:	7bbb      	ldrb	r3, [r7, #14]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	73bb      	strb	r3, [r7, #14]
 8003b10:	7bbb      	ldrb	r3, [r7, #14]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d9ec      	bls.n	8003af0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003b16:	f107 0208 	add.w	r2, r7, #8
 8003b1a:	2364      	movs	r3, #100	@ 0x64
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2304      	movs	r3, #4
 8003b20:	214e      	movs	r1, #78	@ 0x4e
 8003b22:	4803      	ldr	r0, [pc, #12]	@ (8003b30 <lcd_send_char+0xd8>)
 8003b24:	f001 fd08 	bl	8005538 <HAL_I2C_Master_Transmit>
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20001bc4 	.word	0x20001bc4
 8003b34:	20001b99 	.word	0x20001b99

08003b38 <lcd_init>:

void lcd_init (void) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8003b3c:	2002      	movs	r0, #2
 8003b3e:	f7ff fe95 	bl	800386c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8003b42:	2028      	movs	r0, #40	@ 0x28
 8003b44:	f7ff fe92 	bl	800386c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8003b48:	200c      	movs	r0, #12
 8003b4a:	f7ff fe8f 	bl	800386c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8003b4e:	2080      	movs	r0, #128	@ 0x80
 8003b50:	f7ff fe8c 	bl	800386c <lcd_send_cmd>
	lcd_backlight(1);
 8003b54:	2001      	movs	r0, #1
 8003b56:	f000 f86d 	bl	8003c34 <lcd_backlight>
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	460a      	mov	r2, r1
 8003b68:	71fb      	strb	r3, [r7, #7]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8003b74:	79bb      	ldrb	r3, [r7, #6]
 8003b76:	337f      	adds	r3, #127	@ 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fe76 	bl	800386c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8003b80:	e008      	b.n	8003b94 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d105      	bne.n	8003b94 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8003b88:	79bb      	ldrb	r3, [r7, #6]
 8003b8a:	3b41      	subs	r3, #65	@ 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe6c 	bl	800386c <lcd_send_cmd>
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	603a      	str	r2, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8003bac:	79ba      	ldrb	r2, [r7, #6]
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ffd3 	bl	8003b5e <lcd_gotoxy>
	lcd_send_string(str);
 8003bb8:	6838      	ldr	r0, [r7, #0]
 8003bba:	f7ff ff37 	bl	8003a2c <lcd_send_string>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	71bb      	strb	r3, [r7, #6]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8003bd8:	79ba      	ldrb	r2, [r7, #6]
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffbd 	bl	8003b5e <lcd_gotoxy>
    lcd_send_char(ch);
 8003be4:	797b      	ldrb	r3, [r7, #5]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff36 	bl	8003a58 <lcd_send_char>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <lcd_clear>:

void lcd_clear(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7ff fe37 	bl	800386c <lcd_send_cmd>
    HAL_Delay(2);
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f000 fd26 	bl	8004650 <HAL_Delay>
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460a      	mov	r2, r1
 8003c12:	71fb      	strb	r3, [r7, #7]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8003c18:	79ba      	ldrb	r2, [r7, #6]
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff9d 	bl	8003b5e <lcd_gotoxy>

    lcd_send_char(' ');
 8003c24:	2020      	movs	r0, #32
 8003c26:	f7ff ff17 	bl	8003a58 <lcd_send_char>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8003c3e:	4a05      	ldr	r2, [pc, #20]	@ (8003c54 <lcd_backlight+0x20>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7ff fe11 	bl	800386c <lcd_send_cmd>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20001b99 	.word	0x20001b99

08003c58 <lcd_cursor>:

void lcd_cursor(int state) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d106      	bne.n	8003c74 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8003c66:	200e      	movs	r0, #14
 8003c68:	f7ff fe00 	bl	800386c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8003c6c:	200f      	movs	r0, #15
 8003c6e:	f7ff fdfd 	bl	800386c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8003c72:	e002      	b.n	8003c7a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8003c74:	200c      	movs	r0, #12
 8003c76:	f7ff fdf9 	bl	800386c <lcd_send_cmd>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a03      	ldr	r2, [pc, #12]	@ (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	20001368 	.word	0x20001368

08003ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca8:	f000 fc70 	bl	800458c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8003cac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cb0:	f000 fcce 	bl	8004650 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cb4:	f000 f89c 	bl	8003df0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb8:	f000 f9be 	bl	8004038 <MX_GPIO_Init>
  MX_CAN_Init();
 8003cbc:	f000 f8de 	bl	8003e7c <MX_CAN_Init>
  MX_I2C1_Init();
 8003cc0:	f000 f910 	bl	8003ee4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003cc4:	f000 f93c 	bl	8003f40 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003cc8:	f000 f98c 	bl	8003fe4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2140      	movs	r1, #64	@ 0x40
 8003cd0:	483e      	ldr	r0, [pc, #248]	@ (8003dcc <main+0x128>)
 8003cd2:	f001 faa4 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2180      	movs	r1, #128	@ 0x80
 8003cda:	483c      	ldr	r0, [pc, #240]	@ (8003dcc <main+0x128>)
 8003cdc:	f001 fa9f 	bl	800521e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f000 fcb5 	bl	8004650 <HAL_Delay>
  lcd_init();
 8003ce6:	f7ff ff27 	bl	8003b38 <lcd_init>
  HAL_Delay(10);
 8003cea:	200a      	movs	r0, #10
 8003cec:	f000 fcb0 	bl	8004650 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8003cf0:	4837      	ldr	r0, [pc, #220]	@ (8003dd0 <main+0x12c>)
 8003cf2:	f003 f92f 	bl	8006f54 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003cf6:	bf00      	nop
 8003cf8:	4836      	ldr	r0, [pc, #216]	@ (8003dd4 <main+0x130>)
 8003cfa:	f002 f88a 	bl	8005e12 <HAL_I2C_GetError>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d0f9      	beq.n	8003cf8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003d04:	bf00      	nop
 8003d06:	4833      	ldr	r0, [pc, #204]	@ (8003dd4 <main+0x130>)
 8003d08:	f002 f876 	bl	8005df8 <HAL_I2C_GetState>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d1f9      	bne.n	8003d06 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003d12:	2200      	movs	r2, #0
 8003d14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d18:	482c      	ldr	r0, [pc, #176]	@ (8003dcc <main+0x128>)
 8003d1a:	f001 fa80 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d24:	4829      	ldr	r0, [pc, #164]	@ (8003dcc <main+0x128>)
 8003d26:	f001 fa7a 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	4827      	ldr	r0, [pc, #156]	@ (8003dcc <main+0x128>)
 8003d30:	f001 fa75 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8003d34:	2200      	movs	r2, #0
 8003d36:	2102      	movs	r1, #2
 8003d38:	4824      	ldr	r0, [pc, #144]	@ (8003dcc <main+0x128>)
 8003d3a:	f001 fa70 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2101      	movs	r1, #1
 8003d42:	4822      	ldr	r0, [pc, #136]	@ (8003dcc <main+0x128>)
 8003d44:	f001 fa6b 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	4822      	ldr	r0, [pc, #136]	@ (8003dd8 <main+0x134>)
 8003d4e:	f001 fa66 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2110      	movs	r1, #16
 8003d56:	4820      	ldr	r0, [pc, #128]	@ (8003dd8 <main+0x134>)
 8003d58:	f001 fa61 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2180      	movs	r1, #128	@ 0x80
 8003d60:	481e      	ldr	r0, [pc, #120]	@ (8003ddc <main+0x138>)
 8003d62:	f001 fa5c 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	@ 0x40
 8003d6a:	481c      	ldr	r0, [pc, #112]	@ (8003ddc <main+0x138>)
 8003d6c:	f001 fa57 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8003d70:	2200      	movs	r2, #0
 8003d72:	2120      	movs	r1, #32
 8003d74:	4819      	ldr	r0, [pc, #100]	@ (8003ddc <main+0x138>)
 8003d76:	f001 fa52 	bl	800521e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	4817      	ldr	r0, [pc, #92]	@ (8003ddc <main+0x138>)
 8003d80:	f001 fa4d 	bl	800521e <HAL_GPIO_WritePin>

  i2cTest();
 8003d84:	f7fc fece 	bl	8000b24 <i2cTest>
  HAL_Delay(100);
 8003d88:	2064      	movs	r0, #100	@ 0x64
 8003d8a:	f000 fc61 	bl	8004650 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8003d8e:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <main+0x13c>)
 8003d90:	2101      	movs	r1, #1
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff ff02 	bl	8003b9c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8003d98:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <main+0x140>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f7ff fefd 	bl	8003b9c <lcd_print>
  HAL_Delay(1000);
 8003da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003da6:	f000 fc53 	bl	8004650 <HAL_Delay>
  lcd_clear();
 8003daa:	f7ff ff23 	bl	8003bf4 <lcd_clear>

  eepromKontrol();
 8003dae:	f7fc fa41 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8003db2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003db6:	f000 fc4b 	bl	8004650 <HAL_Delay>

  backLightTimer = millis;
 8003dba:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <main+0x144>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003dec <main+0x148>)
 8003dc0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8003dc2:	f7ff fcf5 	bl	80037b0 <iotSetup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <main+0x122>
 8003dca:	bf00      	nop
 8003dcc:	40010c00 	.word	0x40010c00
 8003dd0:	20001c18 	.word	0x20001c18
 8003dd4:	20001bc4 	.word	0x20001bc4
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	40010800 	.word	0x40010800
 8003de0:	2000006c 	.word	0x2000006c
 8003de4:	20000080 	.word	0x20000080
 8003de8:	20001368 	.word	0x20001368
 8003dec:	2000136c 	.word	0x2000136c

08003df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b090      	sub	sp, #64	@ 0x40
 8003df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003df6:	f107 0318 	add.w	r3, r7, #24
 8003dfa:	2228      	movs	r2, #40	@ 0x28
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 faea 	bl	80083d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e20:	2301      	movs	r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e24:	2302      	movs	r3, #2
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e34:	f107 0318 	add.w	r3, r7, #24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fc2b 	bl	8006694 <HAL_RCC_OscConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003e44:	f000 f9a2 	bl	800418c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e48:	230f      	movs	r3, #15
 8003e4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 fe98 	bl	8006b98 <HAL_RCC_ClockConfig>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e6e:	f000 f98d 	bl	800418c <Error_Handler>
  }
}
 8003e72:	bf00      	nop
 8003e74:	3740      	adds	r7, #64	@ 0x40
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003e80:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <MX_CAN_Init+0x60>)
 8003e82:	4a17      	ldr	r2, [pc, #92]	@ (8003ee0 <MX_CAN_Init+0x64>)
 8003e84:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <MX_CAN_Init+0x60>)
 8003e88:	2210      	movs	r2, #16
 8003e8a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <MX_CAN_Init+0x60>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <MX_CAN_Init+0x60>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <MX_CAN_Init+0x60>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <MX_CAN_Init+0x60>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <MX_CAN_Init+0x60>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <MX_CAN_Init+0x60>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <MX_CAN_Init+0x60>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <MX_CAN_Init+0x60>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <MX_CAN_Init+0x60>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <MX_CAN_Init+0x60>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003ec8:	4804      	ldr	r0, [pc, #16]	@ (8003edc <MX_CAN_Init+0x60>)
 8003eca:	f000 fbe5 	bl	8004698 <HAL_CAN_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8003ed4:	f000 f95a 	bl	800418c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20001b9c 	.word	0x20001b9c
 8003ee0:	40006400 	.word	0x40006400

08003ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ee8:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003eea:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <MX_I2C1_Init+0x54>)
 8003eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003eee:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003ef0:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <MX_I2C1_Init+0x58>)
 8003ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f0e:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f14:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f20:	4804      	ldr	r0, [pc, #16]	@ (8003f34 <MX_I2C1_Init+0x50>)
 8003f22:	f001 f995 	bl	8005250 <HAL_I2C_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f2c:	f000 f92e 	bl	800418c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20001bc4 	.word	0x20001bc4
 8003f38:	40005400 	.word	0x40005400
 8003f3c:	00061a80 	.word	0x00061a80

08003f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f54:	463b      	mov	r3, r7
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f5e:	4a20      	ldr	r2, [pc, #128]	@ (8003fe0 <MX_TIM1_Init+0xa0>)
 8003f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f64:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8003f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f72:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f78:	4b18      	ldr	r3, [pc, #96]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f7e:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f8a:	4814      	ldr	r0, [pc, #80]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f8c:	f002 ff92 	bl	8006eb4 <HAL_TIM_Base_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f96:	f000 f8f9 	bl	800418c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003fa8:	f003 f93c 	bl	8007224 <HAL_TIM_ConfigClockSource>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003fb2:	f000 f8eb 	bl	800418c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4806      	ldr	r0, [pc, #24]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003fc4:	f003 fb2a 	bl	800761c <HAL_TIMEx_MasterConfigSynchronization>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003fce:	f000 f8dd 	bl	800418c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001c18 	.word	0x20001c18
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	@ (8004034 <MX_USART1_UART_Init+0x50>)
 8003fec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ff4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004002:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8004004:	2200      	movs	r2, #0
 8004006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 800400a:	220c      	movs	r2, #12
 800400c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 8004016:	2200      	movs	r2, #0
 8004018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800401a:	4805      	ldr	r0, [pc, #20]	@ (8004030 <MX_USART1_UART_Init+0x4c>)
 800401c:	f003 fb7c 	bl	8007718 <HAL_UART_Init>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004026:	f000 f8b1 	bl	800418c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20001c60 	.word	0x20001c60
 8004034:	40013800 	.word	0x40013800

08004038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403e:	f107 0310 	add.w	r3, r7, #16
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800404c:	4b4b      	ldr	r3, [pc, #300]	@ (800417c <MX_GPIO_Init+0x144>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	4a4a      	ldr	r2, [pc, #296]	@ (800417c <MX_GPIO_Init+0x144>)
 8004052:	f043 0310 	orr.w	r3, r3, #16
 8004056:	6193      	str	r3, [r2, #24]
 8004058:	4b48      	ldr	r3, [pc, #288]	@ (800417c <MX_GPIO_Init+0x144>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004064:	4b45      	ldr	r3, [pc, #276]	@ (800417c <MX_GPIO_Init+0x144>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	4a44      	ldr	r2, [pc, #272]	@ (800417c <MX_GPIO_Init+0x144>)
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	6193      	str	r3, [r2, #24]
 8004070:	4b42      	ldr	r3, [pc, #264]	@ (800417c <MX_GPIO_Init+0x144>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800407c:	4b3f      	ldr	r3, [pc, #252]	@ (800417c <MX_GPIO_Init+0x144>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	4a3e      	ldr	r2, [pc, #248]	@ (800417c <MX_GPIO_Init+0x144>)
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	6193      	str	r3, [r2, #24]
 8004088:	4b3c      	ldr	r3, [pc, #240]	@ (800417c <MX_GPIO_Init+0x144>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004094:	4b39      	ldr	r3, [pc, #228]	@ (800417c <MX_GPIO_Init+0x144>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	4a38      	ldr	r2, [pc, #224]	@ (800417c <MX_GPIO_Init+0x144>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6193      	str	r3, [r2, #24]
 80040a0:	4b36      	ldr	r3, [pc, #216]	@ (800417c <MX_GPIO_Init+0x144>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80040ac:	2200      	movs	r2, #0
 80040ae:	21f0      	movs	r1, #240	@ 0xf0
 80040b0:	4833      	ldr	r0, [pc, #204]	@ (8004180 <MX_GPIO_Init+0x148>)
 80040b2:	f001 f8b4 	bl	800521e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80040b6:	2200      	movs	r2, #0
 80040b8:	f241 0130 	movw	r1, #4144	@ 0x1030
 80040bc:	4831      	ldr	r0, [pc, #196]	@ (8004184 <MX_GPIO_Init+0x14c>)
 80040be:	f001 f8ae 	bl	800521e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80040c2:	2200      	movs	r2, #0
 80040c4:	f640 4107 	movw	r1, #3079	@ 0xc07
 80040c8:	482f      	ldr	r0, [pc, #188]	@ (8004188 <MX_GPIO_Init+0x150>)
 80040ca:	f001 f8a8 	bl	800521e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80040ce:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80040d2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040dc:	f107 0310 	add.w	r3, r7, #16
 80040e0:	4619      	mov	r1, r3
 80040e2:	4828      	ldr	r0, [pc, #160]	@ (8004184 <MX_GPIO_Init+0x14c>)
 80040e4:	f000 fe24 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80040e8:	f248 130f 	movw	r3, #33039	@ 0x810f
 80040ec:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	f107 0310 	add.w	r3, r7, #16
 80040fa:	4619      	mov	r1, r3
 80040fc:	4820      	ldr	r0, [pc, #128]	@ (8004180 <MX_GPIO_Init+0x148>)
 80040fe:	f000 fe17 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8004102:	23f0      	movs	r3, #240	@ 0xf0
 8004104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004106:	2301      	movs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410e:	2302      	movs	r3, #2
 8004110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	f107 0310 	add.w	r3, r7, #16
 8004116:	4619      	mov	r1, r3
 8004118:	4819      	ldr	r0, [pc, #100]	@ (8004180 <MX_GPIO_Init+0x148>)
 800411a:	f000 fe09 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800411e:	f241 0330 	movw	r3, #4144	@ 0x1030
 8004122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412c:	2302      	movs	r3, #2
 800412e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	4619      	mov	r1, r3
 8004136:	4813      	ldr	r0, [pc, #76]	@ (8004184 <MX_GPIO_Init+0x14c>)
 8004138:	f000 fdfa 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800413c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8004140:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004142:	2301      	movs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2302      	movs	r3, #2
 800414c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414e:	f107 0310 	add.w	r3, r7, #16
 8004152:	4619      	mov	r1, r3
 8004154:	480c      	ldr	r0, [pc, #48]	@ (8004188 <MX_GPIO_Init+0x150>)
 8004156:	f000 fdeb 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800415a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800415e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4619      	mov	r1, r3
 800416e:	4806      	ldr	r0, [pc, #24]	@ (8004188 <MX_GPIO_Init+0x150>)
 8004170:	f000 fdde 	bl	8004d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	40010800 	.word	0x40010800
 8004184:	40011000 	.word	0x40011000
 8004188:	40010c00 	.word	0x40010c00

0800418c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4a14      	ldr	r2, [pc, #80]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6193      	str	r3, [r2, #24]
 80041aa:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b0f      	ldr	r3, [pc, #60]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	4a0e      	ldr	r2, [pc, #56]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	61d3      	str	r3, [r2, #28]
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <HAL_MspInit+0x5c>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_MspInit+0x60>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <HAL_MspInit+0x60>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40010000 	.word	0x40010000

080041fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	f107 0310 	add.w	r3, r7, #16
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_CAN_MspInit+0x8c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d131      	bne.n	8004280 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800421c:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_CAN_MspInit+0x90>)
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4a1a      	ldr	r2, [pc, #104]	@ (800428c <HAL_CAN_MspInit+0x90>)
 8004222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004226:	61d3      	str	r3, [r2, #28]
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_CAN_MspInit+0x90>)
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004234:	4b15      	ldr	r3, [pc, #84]	@ (800428c <HAL_CAN_MspInit+0x90>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4a14      	ldr	r2, [pc, #80]	@ (800428c <HAL_CAN_MspInit+0x90>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6193      	str	r3, [r2, #24]
 8004240:	4b12      	ldr	r3, [pc, #72]	@ (800428c <HAL_CAN_MspInit+0x90>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800424c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4619      	mov	r1, r3
 8004260:	480b      	ldr	r0, [pc, #44]	@ (8004290 <HAL_CAN_MspInit+0x94>)
 8004262:	f000 fd65 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800426a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004270:	2303      	movs	r3, #3
 8004272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	4619      	mov	r1, r3
 800427a:	4805      	ldr	r0, [pc, #20]	@ (8004290 <HAL_CAN_MspInit+0x94>)
 800427c:	f000 fd58 	bl	8004d30 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004280:	bf00      	nop
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40006400 	.word	0x40006400
 800428c:	40021000 	.word	0x40021000
 8004290:	40010800 	.word	0x40010800

08004294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <HAL_I2C_MspInit+0x70>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d123      	bne.n	80042fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042ba:	f043 0308 	orr.w	r3, r3, #8
 80042be:	6193      	str	r3, [r2, #24]
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042cc:	23c0      	movs	r3, #192	@ 0xc0
 80042ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042d0:	2312      	movs	r3, #18
 80042d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d4:	2303      	movs	r3, #3
 80042d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	4619      	mov	r1, r3
 80042de:	480b      	ldr	r0, [pc, #44]	@ (800430c <HAL_I2C_MspInit+0x78>)
 80042e0:	f000 fd26 	bl	8004d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042ee:	61d3      	str	r3, [r2, #28]
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_I2C_MspInit+0x74>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80042fc:	bf00      	nop
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40005400 	.word	0x40005400
 8004308:	40021000 	.word	0x40021000
 800430c:	40010c00 	.word	0x40010c00

08004310 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0a      	ldr	r2, [pc, #40]	@ (8004348 <HAL_I2C_MspDeInit+0x38>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d10d      	bne.n	800433e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <HAL_I2C_MspDeInit+0x3c>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <HAL_I2C_MspDeInit+0x3c>)
 8004328:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800432c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800432e:	2140      	movs	r1, #64	@ 0x40
 8004330:	4807      	ldr	r0, [pc, #28]	@ (8004350 <HAL_I2C_MspDeInit+0x40>)
 8004332:	f000 fe91 	bl	8005058 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	4805      	ldr	r0, [pc, #20]	@ (8004350 <HAL_I2C_MspDeInit+0x40>)
 800433a:	f000 fe8d 	bl	8005058 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40005400 	.word	0x40005400
 800434c:	40021000 	.word	0x40021000
 8004350:	40010c00 	.word	0x40010c00

08004354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0d      	ldr	r2, [pc, #52]	@ (8004398 <HAL_TIM_Base_MspInit+0x44>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <HAL_TIM_Base_MspInit+0x48>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <HAL_TIM_Base_MspInit+0x48>)
 800436c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004370:	6193      	str	r3, [r2, #24]
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <HAL_TIM_Base_MspInit+0x48>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2100      	movs	r1, #0
 8004382:	2019      	movs	r0, #25
 8004384:	f000 fb5b 	bl	8004a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004388:	2019      	movs	r0, #25
 800438a:	f000 fb74 	bl	8004a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40021000 	.word	0x40021000

080043a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a20      	ldr	r2, [pc, #128]	@ (800443c <HAL_UART_MspInit+0x9c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d139      	bne.n	8004434 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043ca:	6193      	str	r3, [r2, #24]
 80043cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	4a18      	ldr	r2, [pc, #96]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	6193      	str	r3, [r2, #24]
 80043e4:	4b16      	ldr	r3, [pc, #88]	@ (8004440 <HAL_UART_MspInit+0xa0>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043fa:	2303      	movs	r3, #3
 80043fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	4619      	mov	r1, r3
 8004404:	480f      	ldr	r0, [pc, #60]	@ (8004444 <HAL_UART_MspInit+0xa4>)
 8004406:	f000 fc93 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800440a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800440e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004418:	f107 0310 	add.w	r3, r7, #16
 800441c:	4619      	mov	r1, r3
 800441e:	4809      	ldr	r0, [pc, #36]	@ (8004444 <HAL_UART_MspInit+0xa4>)
 8004420:	f000 fc86 	bl	8004d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004424:	2200      	movs	r2, #0
 8004426:	2100      	movs	r1, #0
 8004428:	2025      	movs	r0, #37	@ 0x25
 800442a:	f000 fb08 	bl	8004a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800442e:	2025      	movs	r0, #37	@ 0x25
 8004430:	f000 fb21 	bl	8004a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004434:	bf00      	nop
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40013800 	.word	0x40013800
 8004440:	40021000 	.word	0x40021000
 8004444:	40010800 	.word	0x40010800

08004448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <NMI_Handler+0x4>

08004450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <HardFault_Handler+0x4>

08004458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <MemManage_Handler+0x4>

08004460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <BusFault_Handler+0x4>

08004468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <UsageFault_Handler+0x4>

08004470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004498:	f000 f8be 	bl	8004618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}

080044a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044a4:	4802      	ldr	r0, [pc, #8]	@ (80044b0 <TIM1_UP_IRQHandler+0x10>)
 80044a6:	f002 fdb5 	bl	8007014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20001c18 	.word	0x20001c18

080044b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <USART1_IRQHandler+0x10>)
 80044ba:	f003 f9b3 	bl	8007824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20001c60 	.word	0x20001c60

080044c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d0:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <_sbrk+0x5c>)
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <_sbrk+0x60>)
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044dc:	4b13      	ldr	r3, [pc, #76]	@ (800452c <_sbrk+0x64>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044e4:	4b11      	ldr	r3, [pc, #68]	@ (800452c <_sbrk+0x64>)
 80044e6:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <_sbrk+0x68>)
 80044e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <_sbrk+0x64>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d207      	bcs.n	8004508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044f8:	f003 ff86 	bl	8008408 <__errno>
 80044fc:	4603      	mov	r3, r0
 80044fe:	220c      	movs	r2, #12
 8004500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004506:	e009      	b.n	800451c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <_sbrk+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <_sbrk+0x64>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <_sbrk+0x64>)
 8004518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800451a:	68fb      	ldr	r3, [r7, #12]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	2000c000 	.word	0x2000c000
 8004528:	00000400 	.word	0x00000400
 800452c:	20001ca8 	.word	0x20001ca8
 8004530:	20001df8 	.word	0x20001df8

08004534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004540:	480c      	ldr	r0, [pc, #48]	@ (8004574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004542:	490d      	ldr	r1, [pc, #52]	@ (8004578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004544:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004548:	e002      	b.n	8004550 <LoopCopyDataInit>

0800454a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800454a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800454c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800454e:	3304      	adds	r3, #4

08004550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004554:	d3f9      	bcc.n	800454a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004558:	4c0a      	ldr	r4, [pc, #40]	@ (8004584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800455a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800455c:	e001      	b.n	8004562 <LoopFillZerobss>

0800455e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800455e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004560:	3204      	adds	r2, #4

08004562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004564:	d3fb      	bcc.n	800455e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004566:	f7ff ffe5 	bl	8004534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800456a:	f003 ff53 	bl	8008414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800456e:	f7ff fb99 	bl	8003ca4 <main>
  bx lr
 8004572:	4770      	bx	lr
  ldr r0, =_sdata
 8004574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004578:	20000fa0 	.word	0x20000fa0
  ldr r2, =_sidata
 800457c:	08008eec 	.word	0x08008eec
  ldr r2, =_sbss
 8004580:	20000fa0 	.word	0x20000fa0
  ldr r4, =_ebss
 8004584:	20001df8 	.word	0x20001df8

08004588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004588:	e7fe      	b.n	8004588 <ADC1_2_IRQHandler>
	...

0800458c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004590:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_Init+0x28>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <HAL_Init+0x28>)
 8004596:	f043 0310 	orr.w	r3, r3, #16
 800459a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800459c:	2003      	movs	r0, #3
 800459e:	f000 fa43 	bl	8004a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045a2:	200f      	movs	r0, #15
 80045a4:	f000 f808 	bl	80045b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045a8:	f7ff fdf6 	bl	8004198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40022000 	.word	0x40022000

080045b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_InitTick+0x54>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_InitTick+0x58>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fa5b 	bl	8004a92 <HAL_SYSTICK_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00e      	b.n	8004604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d80a      	bhi.n	8004602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ec:	2200      	movs	r2, #0
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045f4:	f000 fa23 	bl	8004a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f8:	4a06      	ldr	r2, [pc, #24]	@ (8004614 <HAL_InitTick+0x5c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000f44 	.word	0x20000f44
 8004610:	20000f4c 	.word	0x20000f4c
 8004614:	20000f48 	.word	0x20000f48

08004618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_IncTick+0x1c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_IncTick+0x20>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a03      	ldr	r2, [pc, #12]	@ (8004638 <HAL_IncTick+0x20>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	20000f4c 	.word	0x20000f4c
 8004638:	20001cac 	.word	0x20001cac

0800463c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return uwTick;
 8004640:	4b02      	ldr	r3, [pc, #8]	@ (800464c <HAL_GetTick+0x10>)
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	20001cac 	.word	0x20001cac

08004650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7ff fff0 	bl	800463c <HAL_GetTick>
 800465c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004668:	d005      	beq.n	8004676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800466a:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <HAL_Delay+0x44>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004676:	bf00      	nop
 8004678:	f7ff ffe0 	bl	800463c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d8f7      	bhi.n	8004678 <HAL_Delay+0x28>
  {
  }
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000f4c 	.word	0x20000f4c

08004698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0ed      	b.n	8004886 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fda0 	bl	80041fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046cc:	f7ff ffb6 	bl	800463c <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046d2:	e012      	b.n	80046fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046d4:	f7ff ffb2 	bl	800463c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d90b      	bls.n	80046fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2205      	movs	r2, #5
 80046f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0c5      	b.n	8004886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0e5      	beq.n	80046d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0202 	bic.w	r2, r2, #2
 8004716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004718:	f7ff ff90 	bl	800463c <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800471e:	e012      	b.n	8004746 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004720:	f7ff ff8c 	bl	800463c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b0a      	cmp	r3, #10
 800472c:	d90b      	bls.n	8004746 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2205      	movs	r2, #5
 800473e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e09f      	b.n	8004886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7e1b      	ldrb	r3, [r3, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d108      	bne.n	800476e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e007      	b.n	800477e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7e5b      	ldrb	r3, [r3, #25]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e007      	b.n	80047a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7e9b      	ldrb	r3, [r3, #26]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d108      	bne.n	80047c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0220 	orr.w	r2, r2, #32
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e007      	b.n	80047d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0220 	bic.w	r2, r2, #32
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7edb      	ldrb	r3, [r3, #27]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d108      	bne.n	80047ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0210 	bic.w	r2, r2, #16
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e007      	b.n	80047fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0210 	orr.w	r2, r2, #16
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7f1b      	ldrb	r3, [r3, #28]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d108      	bne.n	8004816 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e007      	b.n	8004826 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0208 	bic.w	r2, r2, #8
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7f5b      	ldrb	r3, [r3, #29]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0204 	orr.w	r2, r2, #4
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e007      	b.n	8004850 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0204 	bic.w	r2, r2, #4
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	ea42 0103 	orr.w	r1, r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	1e5a      	subs	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <__NVIC_SetPriorityGrouping+0x44>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048ac:	4013      	ands	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048c2:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <__NVIC_SetPriorityGrouping+0x44>)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	60d3      	str	r3, [r2, #12]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048dc:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <__NVIC_GetPriorityGrouping+0x18>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	f003 0307 	and.w	r3, r3, #7
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db0b      	blt.n	800491e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	4906      	ldr	r1, [pc, #24]	@ (8004928 <__NVIC_EnableIRQ+0x34>)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2001      	movs	r0, #1
 8004916:	fa00 f202 	lsl.w	r2, r0, r2
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100

0800492c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	2b00      	cmp	r3, #0
 800493e:	db0a      	blt.n	8004956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	490c      	ldr	r1, [pc, #48]	@ (8004978 <__NVIC_SetPriority+0x4c>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	440b      	add	r3, r1
 8004950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004954:	e00a      	b.n	800496c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	4908      	ldr	r1, [pc, #32]	@ (800497c <__NVIC_SetPriority+0x50>)
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3b04      	subs	r3, #4
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	440b      	add	r3, r1
 800496a:	761a      	strb	r2, [r3, #24]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000e100 	.word	0xe000e100
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	@ 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f1c3 0307 	rsb	r3, r3, #7
 800499a:	2b04      	cmp	r3, #4
 800499c:	bf28      	it	cs
 800499e:	2304      	movcs	r3, #4
 80049a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d902      	bls.n	80049b0 <NVIC_EncodePriority+0x30>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3b03      	subs	r3, #3
 80049ae:	e000      	b.n	80049b2 <NVIC_EncodePriority+0x32>
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43da      	mvns	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	401a      	ands	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43d9      	mvns	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d8:	4313      	orrs	r3, r2
         );
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	@ 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049f4:	d301      	bcc.n	80049fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049f6:	2301      	movs	r3, #1
 80049f8:	e00f      	b.n	8004a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <SysTick_Config+0x40>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a02:	210f      	movs	r1, #15
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a08:	f7ff ff90 	bl	800492c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <SysTick_Config+0x40>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a12:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <SysTick_Config+0x40>)
 8004a14:	2207      	movs	r2, #7
 8004a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000e010 	.word	0xe000e010

08004a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff2d 	bl	8004890 <__NVIC_SetPriorityGrouping>
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	4603      	mov	r3, r0
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a50:	f7ff ff42 	bl	80048d8 <__NVIC_GetPriorityGrouping>
 8004a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f7ff ff90 	bl	8004980 <NVIC_EncodePriority>
 8004a60:	4602      	mov	r2, r0
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ff5f 	bl	800492c <__NVIC_SetPriority>
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff35 	bl	80048f4 <__NVIC_EnableIRQ>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ffa2 	bl	80049e4 <SysTick_Config>
 8004aa0:	4603      	mov	r3, r0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d008      	beq.n	8004ad4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e020      	b.n	8004b16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020e 	bic.w	r2, r2, #14
 8004ae2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f202 	lsl.w	r2, r1, r2
 8004b02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d005      	beq.n	8004b44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	e0d6      	b.n	8004cf2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 020e 	bic.w	r2, r2, #14
 8004b52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b64      	ldr	r3, [pc, #400]	@ (8004cfc <HAL_DMA_Abort_IT+0x1dc>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d958      	bls.n	8004c22 <HAL_DMA_Abort_IT+0x102>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a62      	ldr	r2, [pc, #392]	@ (8004d00 <HAL_DMA_Abort_IT+0x1e0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d04f      	beq.n	8004c1a <HAL_DMA_Abort_IT+0xfa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a61      	ldr	r2, [pc, #388]	@ (8004d04 <HAL_DMA_Abort_IT+0x1e4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d048      	beq.n	8004c16 <HAL_DMA_Abort_IT+0xf6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5f      	ldr	r2, [pc, #380]	@ (8004d08 <HAL_DMA_Abort_IT+0x1e8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d040      	beq.n	8004c10 <HAL_DMA_Abort_IT+0xf0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a5e      	ldr	r2, [pc, #376]	@ (8004d0c <HAL_DMA_Abort_IT+0x1ec>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d038      	beq.n	8004c0a <HAL_DMA_Abort_IT+0xea>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8004d10 <HAL_DMA_Abort_IT+0x1f0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d030      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xe4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d14 <HAL_DMA_Abort_IT+0x1f4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d028      	beq.n	8004bfe <HAL_DMA_Abort_IT+0xde>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a52      	ldr	r2, [pc, #328]	@ (8004cfc <HAL_DMA_Abort_IT+0x1dc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d020      	beq.n	8004bf8 <HAL_DMA_Abort_IT+0xd8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a57      	ldr	r2, [pc, #348]	@ (8004d18 <HAL_DMA_Abort_IT+0x1f8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d019      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0xd4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a55      	ldr	r2, [pc, #340]	@ (8004d1c <HAL_DMA_Abort_IT+0x1fc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d012      	beq.n	8004bf0 <HAL_DMA_Abort_IT+0xd0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <HAL_DMA_Abort_IT+0x200>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00a      	beq.n	8004bea <HAL_DMA_Abort_IT+0xca>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a52      	ldr	r2, [pc, #328]	@ (8004d24 <HAL_DMA_Abort_IT+0x204>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d102      	bne.n	8004be4 <HAL_DMA_Abort_IT+0xc4>
 8004bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004be2:	e01b      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004be8:	e018      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bee:	e015      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	e013      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e011      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bfc:	e00e      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004bfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c02:	e00b      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c08:	e008      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0e:	e005      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c14:	e002      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004c16:	2310      	movs	r3, #16
 8004c18:	e000      	b.n	8004c1c <HAL_DMA_Abort_IT+0xfc>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4a42      	ldr	r2, [pc, #264]	@ (8004d28 <HAL_DMA_Abort_IT+0x208>)
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e057      	b.n	8004cd2 <HAL_DMA_Abort_IT+0x1b2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a36      	ldr	r2, [pc, #216]	@ (8004d00 <HAL_DMA_Abort_IT+0x1e0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d04f      	beq.n	8004ccc <HAL_DMA_Abort_IT+0x1ac>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a34      	ldr	r2, [pc, #208]	@ (8004d04 <HAL_DMA_Abort_IT+0x1e4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d048      	beq.n	8004cc8 <HAL_DMA_Abort_IT+0x1a8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a33      	ldr	r2, [pc, #204]	@ (8004d08 <HAL_DMA_Abort_IT+0x1e8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <HAL_DMA_Abort_IT+0x1a2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a31      	ldr	r2, [pc, #196]	@ (8004d0c <HAL_DMA_Abort_IT+0x1ec>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d038      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x19c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a30      	ldr	r2, [pc, #192]	@ (8004d10 <HAL_DMA_Abort_IT+0x1f0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d030      	beq.n	8004cb6 <HAL_DMA_Abort_IT+0x196>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2e      	ldr	r2, [pc, #184]	@ (8004d14 <HAL_DMA_Abort_IT+0x1f4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d028      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0x190>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <HAL_DMA_Abort_IT+0x1dc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d020      	beq.n	8004caa <HAL_DMA_Abort_IT+0x18a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d18 <HAL_DMA_Abort_IT+0x1f8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d019      	beq.n	8004ca6 <HAL_DMA_Abort_IT+0x186>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <HAL_DMA_Abort_IT+0x1fc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d012      	beq.n	8004ca2 <HAL_DMA_Abort_IT+0x182>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a27      	ldr	r2, [pc, #156]	@ (8004d20 <HAL_DMA_Abort_IT+0x200>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00a      	beq.n	8004c9c <HAL_DMA_Abort_IT+0x17c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a26      	ldr	r2, [pc, #152]	@ (8004d24 <HAL_DMA_Abort_IT+0x204>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d102      	bne.n	8004c96 <HAL_DMA_Abort_IT+0x176>
 8004c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c94:	e01b      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c9a:	e018      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ca0:	e015      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	e013      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e011      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004caa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cae:	e00e      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004cb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004cb4:	e00b      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004cb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cba:	e008      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cc0:	e005      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cc6:	e002      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	e000      	b.n	8004cce <HAL_DMA_Abort_IT+0x1ae>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <HAL_DMA_Abort_IT+0x20c>)
 8004cd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
    } 
  }
  return status;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40020080 	.word	0x40020080
 8004d00:	40020008 	.word	0x40020008
 8004d04:	4002001c 	.word	0x4002001c
 8004d08:	40020030 	.word	0x40020030
 8004d0c:	40020044 	.word	0x40020044
 8004d10:	40020058 	.word	0x40020058
 8004d14:	4002006c 	.word	0x4002006c
 8004d18:	40020408 	.word	0x40020408
 8004d1c:	4002041c 	.word	0x4002041c
 8004d20:	40020430 	.word	0x40020430
 8004d24:	40020444 	.word	0x40020444
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	40020000 	.word	0x40020000

08004d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b08b      	sub	sp, #44	@ 0x2c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d42:	e179      	b.n	8005038 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d44:	2201      	movs	r2, #1
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	f040 8168 	bne.w	8005032 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a96      	ldr	r2, [pc, #600]	@ (8004fc0 <HAL_GPIO_Init+0x290>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d05e      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d6c:	4a94      	ldr	r2, [pc, #592]	@ (8004fc0 <HAL_GPIO_Init+0x290>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d875      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d72:	4a94      	ldr	r2, [pc, #592]	@ (8004fc4 <HAL_GPIO_Init+0x294>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d058      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d78:	4a92      	ldr	r2, [pc, #584]	@ (8004fc4 <HAL_GPIO_Init+0x294>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d86f      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d7e:	4a92      	ldr	r2, [pc, #584]	@ (8004fc8 <HAL_GPIO_Init+0x298>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d052      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d84:	4a90      	ldr	r2, [pc, #576]	@ (8004fc8 <HAL_GPIO_Init+0x298>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d869      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d8a:	4a90      	ldr	r2, [pc, #576]	@ (8004fcc <HAL_GPIO_Init+0x29c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04c      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d90:	4a8e      	ldr	r2, [pc, #568]	@ (8004fcc <HAL_GPIO_Init+0x29c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d863      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d96:	4a8e      	ldr	r2, [pc, #568]	@ (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d046      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d9c:	4a8c      	ldr	r2, [pc, #560]	@ (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d85d      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d82a      	bhi.n	8004dfc <HAL_GPIO_Init+0xcc>
 8004da6:	2b12      	cmp	r3, #18
 8004da8:	d859      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <HAL_GPIO_Init+0x80>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004e2b 	.word	0x08004e2b
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e17 	.word	0x08004e17
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e5f 	.word	0x08004e5f
 8004dc4:	08004e5f 	.word	0x08004e5f
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004e5f 	.word	0x08004e5f
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e5f 	.word	0x08004e5f
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004e5f 	.word	0x08004e5f
 8004de4:	08004e5f 	.word	0x08004e5f
 8004de8:	08004e5f 	.word	0x08004e5f
 8004dec:	08004e5f 	.word	0x08004e5f
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	4a75      	ldr	r2, [pc, #468]	@ (8004fd4 <HAL_GPIO_Init+0x2a4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e02:	e02c      	b.n	8004e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	623b      	str	r3, [r7, #32]
          break;
 8004e0a:	e029      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	3304      	adds	r3, #4
 8004e12:	623b      	str	r3, [r7, #32]
          break;
 8004e14:	e024      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e01f      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	330c      	adds	r3, #12
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e01a      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e32:	2304      	movs	r3, #4
 8004e34:	623b      	str	r3, [r7, #32]
          break;
 8004e36:	e013      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e40:	2308      	movs	r3, #8
 8004e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	611a      	str	r2, [r3, #16]
          break;
 8004e4a:	e009      	b.n	8004e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	615a      	str	r2, [r3, #20]
          break;
 8004e56:	e003      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
          break;
 8004e5c:	e000      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          break;
 8004e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d801      	bhi.n	8004e6a <HAL_GPIO_Init+0x13a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	e001      	b.n	8004e6e <HAL_GPIO_Init+0x13e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2bff      	cmp	r3, #255	@ 0xff
 8004e74:	d802      	bhi.n	8004e7c <HAL_GPIO_Init+0x14c>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	e002      	b.n	8004e82 <HAL_GPIO_Init+0x152>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	3b08      	subs	r3, #8
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	210f      	movs	r1, #15
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	6a39      	ldr	r1, [r7, #32]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80c1 	beq.w	8005032 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004eb0:	4b49      	ldr	r3, [pc, #292]	@ (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4a48      	ldr	r2, [pc, #288]	@ (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6193      	str	r3, [r2, #24]
 8004ebc:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ec8:	4a44      	ldr	r2, [pc, #272]	@ (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	3302      	adds	r3, #2
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe0 <HAL_GPIO_Init+0x2b0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d01f      	beq.n	8004f34 <HAL_GPIO_Init+0x204>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <HAL_GPIO_Init+0x2b4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d019      	beq.n	8004f30 <HAL_GPIO_Init+0x200>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3a      	ldr	r2, [pc, #232]	@ (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_GPIO_Init+0x1fc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a39      	ldr	r2, [pc, #228]	@ (8004fec <HAL_GPIO_Init+0x2bc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00d      	beq.n	8004f28 <HAL_GPIO_Init+0x1f8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	@ (8004ff0 <HAL_GPIO_Init+0x2c0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <HAL_GPIO_Init+0x1f4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a37      	ldr	r2, [pc, #220]	@ (8004ff4 <HAL_GPIO_Init+0x2c4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_GPIO_Init+0x1f0>
 8004f1c:	2305      	movs	r3, #5
 8004f1e:	e00a      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f20:	2306      	movs	r3, #6
 8004f22:	e008      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f24:	2304      	movs	r3, #4
 8004f26:	e006      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e004      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e002      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_GPIO_Init+0x206>
 8004f34:	2300      	movs	r3, #0
 8004f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f38:	f002 0203 	and.w	r2, r2, #3
 8004f3c:	0092      	lsls	r2, r2, #2
 8004f3e:	4093      	lsls	r3, r2
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f46:	4925      	ldr	r1, [pc, #148]	@ (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f60:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4924      	ldr	r1, [pc, #144]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]
 8004f6c:	e006      	b.n	8004f7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	4920      	ldr	r1, [pc, #128]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	491a      	ldr	r1, [pc, #104]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60cb      	str	r3, [r1, #12]
 8004f94:	e006      	b.n	8004fa4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	4916      	ldr	r1, [pc, #88]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d025      	beq.n	8004ffc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	4910      	ldr	r1, [pc, #64]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
 8004fbc:	e025      	b.n	800500a <HAL_GPIO_Init+0x2da>
 8004fbe:	bf00      	nop
 8004fc0:	10320000 	.word	0x10320000
 8004fc4:	10310000 	.word	0x10310000
 8004fc8:	10220000 	.word	0x10220000
 8004fcc:	10210000 	.word	0x10210000
 8004fd0:	10120000 	.word	0x10120000
 8004fd4:	10110000 	.word	0x10110000
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40010800 	.word	0x40010800
 8004fe4:	40010c00 	.word	0x40010c00
 8004fe8:	40011000 	.word	0x40011000
 8004fec:	40011400 	.word	0x40011400
 8004ff0:	40011800 	.word	0x40011800
 8004ff4:	40011c00 	.word	0x40011c00
 8004ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ffc:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <HAL_GPIO_Init+0x324>)
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	43db      	mvns	r3, r3
 8005004:	4913      	ldr	r1, [pc, #76]	@ (8005054 <HAL_GPIO_Init+0x324>)
 8005006:	4013      	ands	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005016:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <HAL_GPIO_Init+0x324>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	490e      	ldr	r1, [pc, #56]	@ (8005054 <HAL_GPIO_Init+0x324>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	e006      	b.n	8005032 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_GPIO_Init+0x324>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	43db      	mvns	r3, r3
 800502c:	4909      	ldr	r1, [pc, #36]	@ (8005054 <HAL_GPIO_Init+0x324>)
 800502e:	4013      	ands	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	3301      	adds	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	f47f ae7e 	bne.w	8004d44 <HAL_GPIO_Init+0x14>
  }
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	372c      	adds	r7, #44	@ 0x2c
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40010400 	.word	0x40010400

08005058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	@ 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005066:	e0a6      	b.n	80051b6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005068:	2201      	movs	r2, #1
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8099 	beq.w	80051b0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800507e:	4a54      	ldr	r2, [pc, #336]	@ (80051d0 <HAL_GPIO_DeInit+0x178>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a4c      	ldr	r2, [pc, #304]	@ (80051d4 <HAL_GPIO_DeInit+0x17c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d01f      	beq.n	80050e8 <HAL_GPIO_DeInit+0x90>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a4b      	ldr	r2, [pc, #300]	@ (80051d8 <HAL_GPIO_DeInit+0x180>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d019      	beq.n	80050e4 <HAL_GPIO_DeInit+0x8c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a4a      	ldr	r2, [pc, #296]	@ (80051dc <HAL_GPIO_DeInit+0x184>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_GPIO_DeInit+0x88>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a49      	ldr	r2, [pc, #292]	@ (80051e0 <HAL_GPIO_DeInit+0x188>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00d      	beq.n	80050dc <HAL_GPIO_DeInit+0x84>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a48      	ldr	r2, [pc, #288]	@ (80051e4 <HAL_GPIO_DeInit+0x18c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <HAL_GPIO_DeInit+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a47      	ldr	r2, [pc, #284]	@ (80051e8 <HAL_GPIO_DeInit+0x190>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_GPIO_DeInit+0x7c>
 80050d0:	2305      	movs	r3, #5
 80050d2:	e00a      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050d4:	2306      	movs	r3, #6
 80050d6:	e008      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050d8:	2304      	movs	r3, #4
 80050da:	e006      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050dc:	2303      	movs	r3, #3
 80050de:	e004      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e002      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_GPIO_DeInit+0x92>
 80050e8:	2300      	movs	r3, #0
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	f002 0203 	and.w	r2, r2, #3
 80050f0:	0092      	lsls	r2, r2, #2
 80050f2:	4093      	lsls	r3, r2
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d132      	bne.n	8005160 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80050fa:	4b3c      	ldr	r3, [pc, #240]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	43db      	mvns	r3, r3
 8005102:	493a      	ldr	r1, [pc, #232]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 8005104:	4013      	ands	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005108:	4b38      	ldr	r3, [pc, #224]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	43db      	mvns	r3, r3
 8005110:	4936      	ldr	r1, [pc, #216]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 8005112:	4013      	ands	r3, r2
 8005114:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005116:	4b35      	ldr	r3, [pc, #212]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	43db      	mvns	r3, r3
 800511e:	4933      	ldr	r1, [pc, #204]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 8005120:	4013      	ands	r3, r2
 8005122:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005124:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	43db      	mvns	r3, r3
 800512c:	492f      	ldr	r1, [pc, #188]	@ (80051ec <HAL_GPIO_DeInit+0x194>)
 800512e:	4013      	ands	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	220f      	movs	r2, #15
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005142:	4a23      	ldr	r2, [pc, #140]	@ (80051d0 <HAL_GPIO_DeInit+0x178>)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	43da      	mvns	r2, r3
 8005152:	481f      	ldr	r0, [pc, #124]	@ (80051d0 <HAL_GPIO_DeInit+0x178>)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	400a      	ands	r2, r1
 800515a:	3302      	adds	r3, #2
 800515c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2bff      	cmp	r3, #255	@ 0xff
 8005164:	d801      	bhi.n	800516a <HAL_GPIO_DeInit+0x112>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	e001      	b.n	800516e <HAL_GPIO_DeInit+0x116>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2bff      	cmp	r3, #255	@ 0xff
 8005174:	d802      	bhi.n	800517c <HAL_GPIO_DeInit+0x124>
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	e002      	b.n	8005182 <HAL_GPIO_DeInit+0x12a>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3b08      	subs	r3, #8
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	210f      	movs	r1, #15
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	2104      	movs	r1, #4
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	431a      	orrs	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f47f af52 	bne.w	8005068 <HAL_GPIO_DeInit+0x10>
  }
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3724      	adds	r7, #36	@ 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010800 	.word	0x40010800
 80051d8:	40010c00 	.word	0x40010c00
 80051dc:	40011000 	.word	0x40011000
 80051e0:	40011400 	.word	0x40011400
 80051e4:	40011800 	.word	0x40011800
 80051e8:	40011c00 	.word	0x40011c00
 80051ec:	40010400 	.word	0x40010400

080051f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	887b      	ldrh	r3, [r7, #2]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
 800520c:	e001      	b.n	8005212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]
 800522a:	4613      	mov	r3, r2
 800522c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800522e:	787b      	ldrb	r3, [r7, #1]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005234:	887a      	ldrh	r2, [r7, #2]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800523a:	e003      	b.n	8005244 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	041a      	lsls	r2, r3, #16
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	611a      	str	r2, [r3, #16]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
	...

08005250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e12b      	b.n	80054ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff f80c 	bl	8004294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	@ 0x24
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052b4:	f001 fdb8 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4a81      	ldr	r2, [pc, #516]	@ (80054c4 <HAL_I2C_Init+0x274>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d807      	bhi.n	80052d4 <HAL_I2C_Init+0x84>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a80      	ldr	r2, [pc, #512]	@ (80054c8 <HAL_I2C_Init+0x278>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bf94      	ite	ls
 80052cc:	2301      	movls	r3, #1
 80052ce:	2300      	movhi	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e006      	b.n	80052e2 <HAL_I2C_Init+0x92>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a7d      	ldr	r2, [pc, #500]	@ (80054cc <HAL_I2C_Init+0x27c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	bf94      	ite	ls
 80052dc:	2301      	movls	r3, #1
 80052de:	2300      	movhi	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0e7      	b.n	80054ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a78      	ldr	r2, [pc, #480]	@ (80054d0 <HAL_I2C_Init+0x280>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0c9b      	lsrs	r3, r3, #18
 80052f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a6a      	ldr	r2, [pc, #424]	@ (80054c4 <HAL_I2C_Init+0x274>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <HAL_I2C_Init+0xd4>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3301      	adds	r3, #1
 8005322:	e009      	b.n	8005338 <HAL_I2C_Init+0xe8>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	4a69      	ldr	r2, [pc, #420]	@ (80054d4 <HAL_I2C_Init+0x284>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	099b      	lsrs	r3, r3, #6
 8005336:	3301      	adds	r3, #1
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800534a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	495c      	ldr	r1, [pc, #368]	@ (80054c4 <HAL_I2C_Init+0x274>)
 8005354:	428b      	cmp	r3, r1
 8005356:	d819      	bhi.n	800538c <HAL_I2C_Init+0x13c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e59      	subs	r1, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fbb1 f3f3 	udiv	r3, r1, r3
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800536c:	400b      	ands	r3, r1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_I2C_Init+0x138>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1e59      	subs	r1, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005380:	3301      	adds	r3, #1
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	e051      	b.n	800542c <HAL_I2C_Init+0x1dc>
 8005388:	2304      	movs	r3, #4
 800538a:	e04f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d111      	bne.n	80053b8 <HAL_I2C_Init+0x168>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1e58      	subs	r0, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	440b      	add	r3, r1
 80053a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a6:	3301      	adds	r3, #1
 80053a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e012      	b.n	80053de <HAL_I2C_Init+0x18e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1e58      	subs	r0, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	0099      	lsls	r1, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_Init+0x196>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e022      	b.n	800542c <HAL_I2C_Init+0x1dc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10e      	bne.n	800540c <HAL_I2C_Init+0x1bc>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e58      	subs	r0, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	440b      	add	r3, r1
 80053fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005400:	3301      	adds	r3, #1
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540a:	e00f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1e58      	subs	r0, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	0099      	lsls	r1, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005422:	3301      	adds	r3, #1
 8005424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005428:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6809      	ldr	r1, [r1, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800545a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6911      	ldr	r1, [r2, #16]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68d2      	ldr	r2, [r2, #12]
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	430b      	orrs	r3, r1
 800546e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	000186a0 	.word	0x000186a0
 80054c8:	001e847f 	.word	0x001e847f
 80054cc:	003d08ff 	.word	0x003d08ff
 80054d0:	431bde83 	.word	0x431bde83
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e021      	b.n	800552e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2224      	movs	r2, #36	@ 0x24
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fe ff04 	bl	8004310 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	461a      	mov	r2, r3
 8005544:	460b      	mov	r3, r1
 8005546:	817b      	strh	r3, [r7, #10]
 8005548:	4613      	mov	r3, r2
 800554a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800554c:	f7ff f876 	bl	800463c <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	f040 80e0 	bne.w	8005720 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2319      	movs	r3, #25
 8005566:	2201      	movs	r2, #1
 8005568:	4970      	ldr	r1, [pc, #448]	@ (800572c <HAL_I2C_Master_Transmit+0x1f4>)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fe5c 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
 8005578:	e0d3      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2C_Master_Transmit+0x50>
 8005584:	2302      	movs	r3, #2
 8005586:	e0cc      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d007      	beq.n	80055ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2221      	movs	r2, #33	@ 0x21
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2210      	movs	r2, #16
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	893a      	ldrh	r2, [r7, #8]
 80055de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a50      	ldr	r2, [pc, #320]	@ (8005730 <HAL_I2C_Master_Transmit+0x1f8>)
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055f0:	8979      	ldrh	r1, [r7, #10]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fc16 	bl	8005e28 <I2C_MasterRequestWrite>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e08d      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800561c:	e066      	b.n	80056ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 ff1a 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005644:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06b      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b04      	cmp	r3, #4
 8005686:	d11b      	bne.n	80056c0 <HAL_I2C_Master_Transmit+0x188>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	d017      	beq.n	80056c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	781a      	ldrb	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	6a39      	ldr	r1, [r7, #32]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 ff11 	bl	80064ec <I2C_WaitOnBTFFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d107      	bne.n	80056e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e01a      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d194      	bne.n	800561e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	00100002 	.word	0x00100002
 8005730:	ffff0000 	.word	0xffff0000

08005734 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4603      	mov	r3, r0
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	460b      	mov	r3, r1
 8005748:	813b      	strh	r3, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800574e:	f7fe ff75 	bl	800463c <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b20      	cmp	r3, #32
 800575e:	f040 80d9 	bne.w	8005914 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2319      	movs	r3, #25
 8005768:	2201      	movs	r2, #1
 800576a:	496d      	ldr	r1, [pc, #436]	@ (8005920 <HAL_I2C_Mem_Write+0x1ec>)
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fd5b 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	e0cc      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_I2C_Mem_Write+0x56>
 8005786:	2302      	movs	r3, #2
 8005788:	e0c5      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d007      	beq.n	80057b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2221      	movs	r2, #33	@ 0x21
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2240      	movs	r2, #64	@ 0x40
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a4d      	ldr	r2, [pc, #308]	@ (8005924 <HAL_I2C_Mem_Write+0x1f0>)
 80057f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f2:	88f8      	ldrh	r0, [r7, #6]
 80057f4:	893a      	ldrh	r2, [r7, #8]
 80057f6:	8979      	ldrh	r1, [r7, #10]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4603      	mov	r3, r0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fb92 	bl	8005f2c <I2C_RequestMemoryWrite>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d052      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e081      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fe20 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2b04      	cmp	r3, #4
 8005828:	d107      	bne.n	800583a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e06b      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	781a      	ldrb	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d11b      	bne.n	80058b4 <HAL_I2C_Mem_Write+0x180>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d017      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1aa      	bne.n	8005812 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fe13 	bl	80064ec <I2C_WaitOnBTFFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d107      	bne.n	80058e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e016      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
  }
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	00100002 	.word	0x00100002
 8005924:	ffff0000 	.word	0xffff0000

08005928 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	@ 0x30
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	4608      	mov	r0, r1
 8005932:	4611      	mov	r1, r2
 8005934:	461a      	mov	r2, r3
 8005936:	4603      	mov	r3, r0
 8005938:	817b      	strh	r3, [r7, #10]
 800593a:	460b      	mov	r3, r1
 800593c:	813b      	strh	r3, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005946:	f7fe fe79 	bl	800463c <HAL_GetTick>
 800594a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b20      	cmp	r3, #32
 8005956:	f040 8244 	bne.w	8005de2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	2319      	movs	r3, #25
 8005960:	2201      	movs	r2, #1
 8005962:	4982      	ldr	r1, [pc, #520]	@ (8005b6c <HAL_I2C_Mem_Read+0x244>)
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fc5f 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
 8005972:	e237      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_I2C_Mem_Read+0x5a>
 800597e:	2302      	movs	r3, #2
 8005980:	e230      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	d007      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2222      	movs	r2, #34	@ 0x22
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2240      	movs	r2, #64	@ 0x40
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a62      	ldr	r2, [pc, #392]	@ (8005b70 <HAL_I2C_Mem_Read+0x248>)
 80059e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ea:	88f8      	ldrh	r0, [r7, #6]
 80059ec:	893a      	ldrh	r2, [r7, #8]
 80059ee:	8979      	ldrh	r1, [r7, #10]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	4603      	mov	r3, r0
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fb2c 	bl	8006058 <I2C_RequestMemoryRead>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e1ec      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d113      	bne.n	8005a3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e1c0      	b.n	8005dbc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d11e      	bne.n	8005a80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a50:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a52:	b672      	cpsid	i
}
 8005a54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a7c:	b662      	cpsie	i
}
 8005a7e:	e035      	b.n	8005aec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d11e      	bne.n	8005ac6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a98:	b672      	cpsid	i
}
 8005a9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ac2:	b662      	cpsie	i
}
 8005ac4:	e012      	b.n	8005aec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ad4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005aec:	e166      	b.n	8005dbc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f200 811f 	bhi.w	8005d36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d123      	bne.n	8005b48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fd39 	bl	800657c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e167      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b46:	e139      	b.n	8005dbc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d152      	bne.n	8005bf6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	2200      	movs	r2, #0
 8005b58:	4906      	ldr	r1, [pc, #24]	@ (8005b74 <HAL_I2C_Mem_Read+0x24c>)
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fb64 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e13c      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
 8005b6a:	bf00      	nop
 8005b6c:	00100002 	.word	0x00100002
 8005b70:	ffff0000 	.word	0xffff0000
 8005b74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b78:	b672      	cpsid	i
}
 8005b7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bbe:	b662      	cpsie	i
}
 8005bc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bf4:	e0e2      	b.n	8005dbc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	497b      	ldr	r1, [pc, #492]	@ (8005dec <HAL_I2C_Mem_Read+0x4c4>)
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fb11 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0e9      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c20:	b672      	cpsid	i
}
 8005c22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c56:	4b66      	ldr	r3, [pc, #408]	@ (8005df0 <HAL_I2C_Mem_Read+0x4c8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	08db      	lsrs	r3, r3, #3
 8005c5c:	4a65      	ldr	r2, [pc, #404]	@ (8005df4 <HAL_I2C_Mem_Read+0x4cc>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	0a1a      	lsrs	r2, r3, #8
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00da      	lsls	r2, r3, #3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d118      	bne.n	8005cae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005c9e:	b662      	cpsie	i
}
 8005ca0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e09a      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d1d9      	bne.n	8005c70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cfe:	b662      	cpsie	i
}
 8005d00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d34:	e042      	b.n	8005dbc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fc1e 	bl	800657c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e04c      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d118      	bne.n	8005dbc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f ae94 	bne.w	8005aee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e000      	b.n	8005de4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005de2:	2302      	movs	r3, #2
  }
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3728      	adds	r7, #40	@ 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	00010004 	.word	0x00010004
 8005df0:	20000f44 	.word	0x20000f44
 8005df4:	14f8b589 	.word	0x14f8b589

08005df8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e06:	b2db      	uxtb	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	460b      	mov	r3, r1
 8005e36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d006      	beq.n	8005e52 <I2C_MasterRequestWrite+0x2a>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d003      	beq.n	8005e52 <I2C_MasterRequestWrite+0x2a>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e50:	d108      	bne.n	8005e64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e00b      	b.n	8005e7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	2b12      	cmp	r3, #18
 8005e6a:	d107      	bne.n	8005e7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f9cd 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea2:	d103      	bne.n	8005eac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e035      	b.n	8005f1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb8:	d108      	bne.n	8005ecc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eba:	897b      	ldrh	r3, [r7, #10]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	e01b      	b.n	8005f04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ecc:	897b      	ldrh	r3, [r7, #10]
 8005ece:	11db      	asrs	r3, r3, #7
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f063 030f 	orn	r3, r3, #15
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	490e      	ldr	r1, [pc, #56]	@ (8005f24 <I2C_MasterRequestWrite+0xfc>)
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa16 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e010      	b.n	8005f1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4907      	ldr	r1, [pc, #28]	@ (8005f28 <I2C_MasterRequestWrite+0x100>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fa06 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	00010008 	.word	0x00010008
 8005f28:	00010002 	.word	0x00010002

08005f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	813b      	strh	r3, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f960 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7c:	d103      	bne.n	8005f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e05f      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	492d      	ldr	r1, [pc, #180]	@ (8006054 <I2C_RequestMemoryWrite+0x128>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f9bb 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04c      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fa46 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d107      	bne.n	8005fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02b      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff8:	893b      	ldrh	r3, [r7, #8]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	e021      	b.n	8006048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006004:	893b      	ldrh	r3, [r7, #8]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006014:	6a39      	ldr	r1, [r7, #32]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa20 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	2b04      	cmp	r3, #4
 8006028:	d107      	bne.n	800603a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e005      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800603e:	893b      	ldrh	r3, [r7, #8]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	2200      	movs	r2, #0
 800609a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f8c2 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d103      	bne.n	80060c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e0aa      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	4952      	ldr	r1, [pc, #328]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f91d 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e097      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f9a8 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b04      	cmp	r3, #4
 8006118:	d107      	bne.n	800612a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e076      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d105      	bne.n	8006140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006134:	893b      	ldrh	r3, [r7, #8]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	611a      	str	r2, [r3, #16]
 800613e:	e021      	b.n	8006184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006140:	893b      	ldrh	r3, [r7, #8]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f982 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	2b04      	cmp	r3, #4
 8006164:	d107      	bne.n	8006176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e050      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f967 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e035      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f82b 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d103      	bne.n	80061f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e013      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	4906      	ldr	r1, [pc, #24]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f886 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	00010002 	.word	0x00010002

08006228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006238:	e048      	b.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006240:	d044      	beq.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006242:	f7fe f9fb 	bl	800463c <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d139      	bne.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10d      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	43da      	mvns	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4013      	ands	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	e00c      	b.n	8006298 <I2C_WaitOnFlagUntilTimeout+0x70>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	43da      	mvns	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	429a      	cmp	r2, r3
 800629c:	d116      	bne.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e023      	b.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10d      	bne.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	43da      	mvns	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	e00c      	b.n	800630c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	43da      	mvns	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	429a      	cmp	r2, r3
 8006310:	d093      	beq.n	800623a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800632a:	e071      	b.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633a:	d123      	bne.n	8006384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e067      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800638a:	d041      	beq.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fe f956 	bl	800463c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d136      	bne.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10c      	bne.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	43da      	mvns	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf14      	ite	ne
 80063be:	2301      	movne	r3, #1
 80063c0:	2300      	moveq	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	e00b      	b.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	43da      	mvns	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e021      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10c      	bne.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	43da      	mvns	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e00b      	b.n	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	43da      	mvns	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af6d 	bne.w	800632c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006468:	e034      	b.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8e3 	bl	8006636 <I2C_IsAcknowledgeFailed>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e034      	b.n	80064e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006480:	d028      	beq.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fe f8db 	bl	800463c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11d      	bne.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b80      	cmp	r3, #128	@ 0x80
 80064a4:	d016      	beq.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e007      	b.n	80064e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b80      	cmp	r3, #128	@ 0x80
 80064e0:	d1c3      	bne.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064f8:	e034      	b.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f89b 	bl	8006636 <I2C_IsAcknowledgeFailed>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e034      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006510:	d028      	beq.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe f893 	bl	800463c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b04      	cmp	r3, #4
 8006534:	d016      	beq.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d1c3      	bne.n	80064fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006588:	e049      	b.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d119      	bne.n	80065cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0210 	mvn.w	r2, #16
 80065a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e030      	b.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065cc:	f7fe f836 	bl	800463c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11d      	bne.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d016      	beq.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e007      	b.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d1ae      	bne.n	800658a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664c:	d11b      	bne.n	8006686 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006656:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e272      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8087 	beq.w	80067c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b4:	4b92      	ldr	r3, [pc, #584]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d00c      	beq.n	80066da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 030c 	and.w	r3, r3, #12
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d112      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
 80066cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	4b89      	ldr	r3, [pc, #548]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <HAL_RCC_OscConfig+0x12c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d168      	bne.n	80067c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e24c      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x76>
 80066fc:	4b80      	ldr	r3, [pc, #512]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a7f      	ldr	r2, [pc, #508]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e02e      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x98>
 8006712:	4b7b      	ldr	r3, [pc, #492]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a7a      	ldr	r2, [pc, #488]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b78      	ldr	r3, [pc, #480]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a77      	ldr	r2, [pc, #476]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0xbc>
 8006736:	4b72      	ldr	r3, [pc, #456]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a71      	ldr	r2, [pc, #452]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b6f      	ldr	r3, [pc, #444]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6e      	ldr	r2, [pc, #440]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 8006750:	4b6b      	ldr	r3, [pc, #428]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a6a      	ldr	r2, [pc, #424]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b68      	ldr	r3, [pc, #416]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a67      	ldr	r2, [pc, #412]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7fd ff64 	bl	800463c <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fd ff60 	bl	800463c <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	@ 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e200      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b5d      	ldr	r3, [pc, #372]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xe4>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006798:	f7fd ff50 	bl	800463c <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fd ff4c 	bl	800463c <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	@ 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e1ec      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x10c>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d063      	beq.n	8006896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067da:	4b49      	ldr	r3, [pc, #292]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d11c      	bne.n	8006820 <HAL_RCC_OscConfig+0x18c>
 80067e6:	4b46      	ldr	r3, [pc, #280]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d116      	bne.n	8006820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	4b43      	ldr	r3, [pc, #268]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_RCC_OscConfig+0x176>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e1c0      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b3d      	ldr	r3, [pc, #244]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4939      	ldr	r1, [pc, #228]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681e:	e03a      	b.n	8006896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006828:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <HAL_RCC_OscConfig+0x270>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682e:	f7fd ff05 	bl	800463c <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006836:	f7fd ff01 	bl	800463c <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e1a1      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006848:	4b2d      	ldr	r3, [pc, #180]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006854:	4b2a      	ldr	r3, [pc, #168]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4927      	ldr	r1, [pc, #156]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686a:	4b26      	ldr	r3, [pc, #152]	@ (8006904 <HAL_RCC_OscConfig+0x270>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fd fee4 	bl	800463c <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006878:	f7fd fee0 	bl	800463c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e180      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688a:	4b1d      	ldr	r3, [pc, #116]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d03a      	beq.n	8006918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d019      	beq.n	80068de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068aa:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <HAL_RCC_OscConfig+0x274>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b0:	f7fd fec4 	bl	800463c <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b8:	f7fd fec0 	bl	800463c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e160      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <HAL_RCC_OscConfig+0x26c>)
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80068d6:	2001      	movs	r0, #1
 80068d8:	f000 face 	bl	8006e78 <RCC_Delay>
 80068dc:	e01c      	b.n	8006918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068de:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <HAL_RCC_OscConfig+0x274>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e4:	f7fd feaa 	bl	800463c <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ea:	e00f      	b.n	800690c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ec:	f7fd fea6 	bl	800463c <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d908      	bls.n	800690c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e146      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
 80068fe:	bf00      	nop
 8006900:	40021000 	.word	0x40021000
 8006904:	42420000 	.word	0x42420000
 8006908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800690c:	4b92      	ldr	r3, [pc, #584]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e9      	bne.n	80068ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80a6 	beq.w	8006a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692a:	4b8b      	ldr	r3, [pc, #556]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006936:	4b88      	ldr	r3, [pc, #544]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4a87      	ldr	r2, [pc, #540]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006940:	61d3      	str	r3, [r2, #28]
 8006942:	4b85      	ldr	r3, [pc, #532]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006952:	4b82      	ldr	r3, [pc, #520]	@ (8006b5c <HAL_RCC_OscConfig+0x4c8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d118      	bne.n	8006990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800695e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b5c <HAL_RCC_OscConfig+0x4c8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a7e      	ldr	r2, [pc, #504]	@ (8006b5c <HAL_RCC_OscConfig+0x4c8>)
 8006964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696a:	f7fd fe67 	bl	800463c <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006972:	f7fd fe63 	bl	800463c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b64      	cmp	r3, #100	@ 0x64
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e103      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006984:	4b75      	ldr	r3, [pc, #468]	@ (8006b5c <HAL_RCC_OscConfig+0x4c8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d106      	bne.n	80069a6 <HAL_RCC_OscConfig+0x312>
 8006998:	4b6f      	ldr	r3, [pc, #444]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6213      	str	r3, [r2, #32]
 80069a4:	e02d      	b.n	8006a02 <HAL_RCC_OscConfig+0x36e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0x334>
 80069ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	4a69      	ldr	r2, [pc, #420]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	6213      	str	r3, [r2, #32]
 80069ba:	4b67      	ldr	r3, [pc, #412]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4a66      	ldr	r2, [pc, #408]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	6213      	str	r3, [r2, #32]
 80069c6:	e01c      	b.n	8006a02 <HAL_RCC_OscConfig+0x36e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d10c      	bne.n	80069ea <HAL_RCC_OscConfig+0x356>
 80069d0:	4b61      	ldr	r3, [pc, #388]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	4a60      	ldr	r2, [pc, #384]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069d6:	f043 0304 	orr.w	r3, r3, #4
 80069da:	6213      	str	r3, [r2, #32]
 80069dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6213      	str	r3, [r2, #32]
 80069e8:	e00b      	b.n	8006a02 <HAL_RCC_OscConfig+0x36e>
 80069ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	4a5a      	ldr	r2, [pc, #360]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	6213      	str	r3, [r2, #32]
 80069f6:	4b58      	ldr	r3, [pc, #352]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	4a57      	ldr	r2, [pc, #348]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0a:	f7fd fe17 	bl	800463c <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fd fe13 	bl	800463c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0b1      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a28:	4b4b      	ldr	r3, [pc, #300]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0ee      	beq.n	8006a12 <HAL_RCC_OscConfig+0x37e>
 8006a34:	e014      	b.n	8006a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a36:	f7fd fe01 	bl	800463c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3e:	f7fd fdfd 	bl	800463c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e09b      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a54:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ee      	bne.n	8006a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a66:	4b3c      	ldr	r3, [pc, #240]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8087 	beq.w	8006b8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a7c:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 030c 	and.w	r3, r3, #12
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d061      	beq.n	8006b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d146      	bne.n	8006b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a90:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a96:	f7fd fdd1 	bl	800463c <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a9e:	f7fd fdcd 	bl	800463c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e06d      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ab0:	4b29      	ldr	r3, [pc, #164]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d108      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ac6:	4b24      	ldr	r3, [pc, #144]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	4921      	ldr	r1, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a19      	ldr	r1, [r3, #32]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	491b      	ldr	r1, [pc, #108]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <HAL_RCC_OscConfig+0x4cc>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af6:	f7fd fda1 	bl	800463c <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afe:	f7fd fd9d 	bl	800463c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e03d      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b10:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f0      	beq.n	8006afe <HAL_RCC_OscConfig+0x46a>
 8006b1c:	e035      	b.n	8006b8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1e:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <HAL_RCC_OscConfig+0x4cc>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b24:	f7fd fd8a 	bl	800463c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fd fd86 	bl	800463c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e026      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b3e:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <HAL_RCC_OscConfig+0x4c4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x498>
 8006b4a:	e01e      	b.n	8006b8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d107      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e019      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40007000 	.word	0x40007000
 8006b60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b64:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <HAL_RCC_OscConfig+0x500>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d106      	bne.n	8006b86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d001      	beq.n	8006b8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000

08006b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0d0      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bac:	4b6a      	ldr	r3, [pc, #424]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d910      	bls.n	8006bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bba:	4b67      	ldr	r3, [pc, #412]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 0207 	bic.w	r2, r3, #7
 8006bc2:	4965      	ldr	r1, [pc, #404]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	4b63      	ldr	r3, [pc, #396]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0b8      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d020      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bf4:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4a58      	ldr	r2, [pc, #352]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c0c:	4b53      	ldr	r3, [pc, #332]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a52      	ldr	r2, [pc, #328]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c18:	4b50      	ldr	r3, [pc, #320]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	494d      	ldr	r1, [pc, #308]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d040      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3e:	4b47      	ldr	r3, [pc, #284]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d115      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e07f      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c56:	4b41      	ldr	r3, [pc, #260]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e073      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c66:	4b3d      	ldr	r3, [pc, #244]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e06b      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c76:	4b39      	ldr	r3, [pc, #228]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f023 0203 	bic.w	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4936      	ldr	r1, [pc, #216]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c88:	f7fd fcd8 	bl	800463c <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c8e:	e00a      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c90:	f7fd fcd4 	bl	800463c <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e053      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 020c 	and.w	r2, r3, #12
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1eb      	bne.n	8006c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb8:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d210      	bcs.n	8006ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc6:	4b24      	ldr	r3, [pc, #144]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 0207 	bic.w	r2, r3, #7
 8006cce:	4922      	ldr	r1, [pc, #136]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd6:	4b20      	ldr	r3, [pc, #128]	@ (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e032      	b.n	8006d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cf4:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4916      	ldr	r1, [pc, #88]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d12:	4b12      	ldr	r3, [pc, #72]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	490e      	ldr	r1, [pc, #56]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d26:	f000 f821 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	490a      	ldr	r1, [pc, #40]	@ (8006d60 <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	5ccb      	ldrb	r3, [r1, r3]
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	4a09      	ldr	r2, [pc, #36]	@ (8006d64 <HAL_RCC_ClockConfig+0x1cc>)
 8006d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <HAL_RCC_ClockConfig+0x1d0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd fc36 	bl	80045b8 <HAL_InitTick>

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40022000 	.word	0x40022000
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	08008e7c 	.word	0x08008e7c
 8006d64:	20000f44 	.word	0x20000f44
 8006d68:	20000f48 	.word	0x20000f48

08006d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	2300      	movs	r3, #0
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d86:	4b1e      	ldr	r3, [pc, #120]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d002      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0x30>
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d003      	beq.n	8006da2 <HAL_RCC_GetSysClockFreq+0x36>
 8006d9a:	e027      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d9c:	4b19      	ldr	r3, [pc, #100]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d9e:	613b      	str	r3, [r7, #16]
      break;
 8006da0:	e027      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	0c9b      	lsrs	r3, r3, #18
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	4a17      	ldr	r2, [pc, #92]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006dac:	5cd3      	ldrb	r3, [r2, r3]
 8006dae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006dba:	4b11      	ldr	r3, [pc, #68]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	0c5b      	lsrs	r3, r3, #17
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	4a11      	ldr	r2, [pc, #68]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006dc6:	5cd3      	ldrb	r3, [r2, r3]
 8006dc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8006dce:	fb03 f202 	mul.w	r2, r3, r2
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e004      	b.n	8006de6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0c      	ldr	r2, [pc, #48]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	613b      	str	r3, [r7, #16]
      break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006dec:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8006dee:	613b      	str	r3, [r7, #16]
      break;
 8006df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006df2:	693b      	ldr	r3, [r7, #16]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40021000 	.word	0x40021000
 8006e04:	007a1200 	.word	0x007a1200
 8006e08:	08008e94 	.word	0x08008e94
 8006e0c:	08008ea4 	.word	0x08008ea4
 8006e10:	003d0900 	.word	0x003d0900

08006e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e18:	4b02      	ldr	r3, [pc, #8]	@ (8006e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	20000f44 	.word	0x20000f44

08006e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e2c:	f7ff fff2 	bl	8006e14 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b05      	ldr	r3, [pc, #20]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4903      	ldr	r1, [pc, #12]	@ (8006e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	08008e8c 	.word	0x08008e8c

08006e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e54:	f7ff ffde 	bl	8006e14 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	0adb      	lsrs	r3, r3, #11
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4903      	ldr	r1, [pc, #12]	@ (8006e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40021000 	.word	0x40021000
 8006e74:	08008e8c 	.word	0x08008e8c

08006e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e80:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <RCC_Delay+0x34>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <RCC_Delay+0x38>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	0a5b      	lsrs	r3, r3, #9
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e94:	bf00      	nop
  }
  while (Delay --);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	60fa      	str	r2, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f9      	bne.n	8006e94 <RCC_Delay+0x1c>
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr
 8006eac:	20000f44 	.word	0x20000f44
 8006eb0:	10624dd3 	.word	0x10624dd3

08006eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e041      	b.n	8006f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fd fa3a 	bl	8004354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f000 fa82 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d001      	beq.n	8006f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e044      	b.n	8006ff6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <HAL_TIM_Base_Start_IT+0xac>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1c      	ldr	r2, [pc, #112]	@ (8007004 <HAL_TIM_Base_Start_IT+0xb0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <HAL_TIM_Base_Start_IT+0xb4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	@ (800700c <HAL_TIM_Base_Start_IT+0xb8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a15      	ldr	r2, [pc, #84]	@ (8007010 <HAL_TIM_Base_Start_IT+0xbc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d111      	bne.n	8006fe4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b06      	cmp	r3, #6
 8006fd0:	d010      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	e007      	b.n	8006ff4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40013400 	.word	0x40013400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00

08007014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b02      	cmp	r3, #2
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0202 	mvn.w	r2, #2
 8007040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9b4 	bl	80073c4 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9a7 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f9b6 	bl	80073d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b04      	cmp	r3, #4
 800707c:	d122      	bne.n	80070c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b04      	cmp	r3, #4
 800708a:	d11b      	bne.n	80070c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0204 	mvn.w	r2, #4
 8007094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f98a 	bl	80073c4 <HAL_TIM_IC_CaptureCallback>
 80070b0:	e005      	b.n	80070be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f97d 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f98c 	bl	80073d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d122      	bne.n	8007118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0208 	mvn.w	r2, #8
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f960 	bl	80073c4 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f953 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f962 	bl	80073d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b10      	cmp	r3, #16
 8007124:	d122      	bne.n	800716c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b10      	cmp	r3, #16
 8007132:	d11b      	bne.n	800716c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0210 	mvn.w	r2, #16
 800713c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2208      	movs	r2, #8
 8007142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f936 	bl	80073c4 <HAL_TIM_IC_CaptureCallback>
 8007158:	e005      	b.n	8007166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f929 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f938 	bl	80073d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10e      	bne.n	8007198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b01      	cmp	r3, #1
 8007186:	d107      	bne.n	8007198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0201 	mvn.w	r2, #1
 8007190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fc fd76 	bl	8003c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a2:	2b80      	cmp	r3, #128	@ 0x80
 80071a4:	d10e      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b0:	2b80      	cmp	r3, #128	@ 0x80
 80071b2:	d107      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 faa1 	bl	8007706 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	d10e      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071dc:	2b40      	cmp	r3, #64	@ 0x40
 80071de:	d107      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8fc 	bl	80073e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d10e      	bne.n	800721c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b20      	cmp	r3, #32
 800720a:	d107      	bne.n	800721c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0220 	mvn.w	r2, #32
 8007214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa6c 	bl	80076f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_TIM_ConfigClockSource+0x1c>
 800723c:	2302      	movs	r3, #2
 800723e:	e0b4      	b.n	80073aa <HAL_TIM_ConfigClockSource+0x186>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800725e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007278:	d03e      	beq.n	80072f8 <HAL_TIM_ConfigClockSource+0xd4>
 800727a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727e:	f200 8087 	bhi.w	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007286:	f000 8086 	beq.w	8007396 <HAL_TIM_ConfigClockSource+0x172>
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728e:	d87f      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 8007290:	2b70      	cmp	r3, #112	@ 0x70
 8007292:	d01a      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0xa6>
 8007294:	2b70      	cmp	r3, #112	@ 0x70
 8007296:	d87b      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 8007298:	2b60      	cmp	r3, #96	@ 0x60
 800729a:	d050      	beq.n	800733e <HAL_TIM_ConfigClockSource+0x11a>
 800729c:	2b60      	cmp	r3, #96	@ 0x60
 800729e:	d877      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 80072a0:	2b50      	cmp	r3, #80	@ 0x50
 80072a2:	d03c      	beq.n	800731e <HAL_TIM_ConfigClockSource+0xfa>
 80072a4:	2b50      	cmp	r3, #80	@ 0x50
 80072a6:	d873      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	d058      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x13a>
 80072ac:	2b40      	cmp	r3, #64	@ 0x40
 80072ae:	d86f      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b30      	cmp	r3, #48	@ 0x30
 80072b2:	d064      	beq.n	800737e <HAL_TIM_ConfigClockSource+0x15a>
 80072b4:	2b30      	cmp	r3, #48	@ 0x30
 80072b6:	d86b      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d060      	beq.n	800737e <HAL_TIM_ConfigClockSource+0x15a>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d867      	bhi.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d05c      	beq.n	800737e <HAL_TIM_ConfigClockSource+0x15a>
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d05a      	beq.n	800737e <HAL_TIM_ConfigClockSource+0x15a>
 80072c8:	e062      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072da:	f000 f980 	bl	80075de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	609a      	str	r2, [r3, #8]
      break;
 80072f6:	e04f      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007308:	f000 f969 	bl	80075de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800731a:	609a      	str	r2, [r3, #8]
      break;
 800731c:	e03c      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800732a:	461a      	mov	r2, r3
 800732c:	f000 f8e0 	bl	80074f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2150      	movs	r1, #80	@ 0x50
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f937 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 800733c:	e02c      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800734a:	461a      	mov	r2, r3
 800734c:	f000 f8fe 	bl	800754c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2160      	movs	r1, #96	@ 0x60
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f927 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 800735c:	e01c      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800736a:	461a      	mov	r2, r3
 800736c:	f000 f8c0 	bl	80074f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2140      	movs	r1, #64	@ 0x40
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f917 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 800737c:	e00c      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f000 f90e 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 800738e:	e003      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	73fb      	strb	r3, [r7, #15]
      break;
 8007394:	e000      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
	...

080073fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a33      	ldr	r2, [pc, #204]	@ (80074dc <TIM_Base_SetConfig+0xe0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a32      	ldr	r2, [pc, #200]	@ (80074e0 <TIM_Base_SetConfig+0xe4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007422:	d00b      	beq.n	800743c <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a2f      	ldr	r2, [pc, #188]	@ (80074e4 <TIM_Base_SetConfig+0xe8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a2e      	ldr	r2, [pc, #184]	@ (80074e8 <TIM_Base_SetConfig+0xec>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a2d      	ldr	r2, [pc, #180]	@ (80074ec <TIM_Base_SetConfig+0xf0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d108      	bne.n	800744e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a22      	ldr	r2, [pc, #136]	@ (80074dc <TIM_Base_SetConfig+0xe0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <TIM_Base_SetConfig+0x82>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a21      	ldr	r2, [pc, #132]	@ (80074e0 <TIM_Base_SetConfig+0xe4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00f      	beq.n	800747e <TIM_Base_SetConfig+0x82>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007464:	d00b      	beq.n	800747e <TIM_Base_SetConfig+0x82>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1e      	ldr	r2, [pc, #120]	@ (80074e4 <TIM_Base_SetConfig+0xe8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_Base_SetConfig+0x82>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <TIM_Base_SetConfig+0xec>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_Base_SetConfig+0x82>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1c      	ldr	r2, [pc, #112]	@ (80074ec <TIM_Base_SetConfig+0xf0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d108      	bne.n	8007490 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a09      	ldr	r2, [pc, #36]	@ (80074dc <TIM_Base_SetConfig+0xe0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0xc8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a08      	ldr	r2, [pc, #32]	@ (80074e0 <TIM_Base_SetConfig+0xe4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d103      	bne.n	80074cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	615a      	str	r2, [r3, #20]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40000c00 	.word	0x40000c00

080074f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f023 0201 	bic.w	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800751a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 030a 	bic.w	r3, r3, #10
 800752c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f023 0210 	bic.w	r2, r3, #16
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	031b      	lsls	r3, r3, #12
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007588:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr

080075aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f043 0307 	orr.w	r3, r3, #7
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	021a      	lsls	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	431a      	orrs	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4313      	orrs	r3, r2
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	609a      	str	r2, [r3, #8]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e050      	b.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1b      	ldr	r2, [pc, #108]	@ (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d018      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a19      	ldr	r2, [pc, #100]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768a:	d00e      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a15      	ldr	r2, [pc, #84]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d009      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a14      	ldr	r2, [pc, #80]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a12      	ldr	r2, [pc, #72]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10c      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40013400 	.word	0x40013400
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00

080076f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr

08007706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e042      	b.n	80077b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fc fe2e 	bl	80043a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2224      	movs	r2, #36	@ 0x24
 8007748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800775a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fcb5 	bl	80080cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d121      	bne.n	8007816 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_UART_Transmit_IT+0x26>
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e01a      	b.n	8007818 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2221      	movs	r2, #33	@ 0x21
 80077fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007810:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
  }
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
	...

08007824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b0ba      	sub	sp, #232	@ 0xe8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800784a:	2300      	movs	r3, #0
 800784c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <HAL_UART_IRQHandler+0x66>
 8007876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb63 	bl	8007f4e <UART_Receive_IT>
      return;
 8007888:	e25b      	b.n	8007d42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800788a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 80de 	beq.w	8007a50 <HAL_UART_IRQHandler+0x22c>
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80d1 	beq.w	8007a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_UART_IRQHandler+0xae>
 80078ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ca:	f043 0201 	orr.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0xd2>
 80078de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_UART_IRQHandler+0xf6>
 8007902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	f043 0204 	orr.w	r2, r3, #4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <HAL_UART_IRQHandler+0x126>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007942:	f043 0208 	orr.w	r2, r3, #8
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 81f2 	beq.w	8007d38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_UART_IRQHandler+0x14e>
 8007960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 faee 	bl	8007f4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <HAL_UART_IRQHandler+0x17a>
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800799a:	2b00      	cmp	r3, #0
 800799c:	d04f      	beq.n	8007a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f9f8 	bl	8007d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d041      	beq.n	8007a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3314      	adds	r3, #20
 80079b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3314      	adds	r3, #20
 80079da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1d9      	bne.n	80079b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c04 <HAL_UART_IRQHandler+0x3e0>)
 8007a0c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd f884 	bl	8004b20 <HAL_DMA_Abort_IT>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	e00e      	b.n	8007a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f99c 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	e00a      	b.n	8007a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f998 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e006      	b.n	8007a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f994 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a4a:	e175      	b.n	8007d38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	bf00      	nop
    return;
 8007a4e:	e173      	b.n	8007d38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 814f 	bne.w	8007cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8148 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 8141 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60bb      	str	r3, [r7, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	60bb      	str	r3, [r7, #8]
 8007a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80b6 	beq.w	8007c08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8145 	beq.w	8007d3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aba:	429a      	cmp	r2, r3
 8007abc:	f080 813e 	bcs.w	8007d3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	f000 8088 	beq.w	8007be4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	330c      	adds	r3, #12
 8007afc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b00:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1d9      	bne.n	8007ad4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e1      	bne.n	8007b20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3314      	adds	r3, #20
 8007b62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e3      	bne.n	8007b5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bb4:	f023 0310 	bic.w	r3, r3, #16
 8007bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bc6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bc8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fc ff63 	bl	8004aaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8bf 	bl	8007d7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c00:	e09c      	b.n	8007d3c <HAL_UART_IRQHandler+0x518>
 8007c02:	bf00      	nop
 8007c04:	08007e59 	.word	0x08007e59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 808e 	beq.w	8007d40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8089 	beq.w	8007d40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c52:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e3      	bne.n	8007c2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	623b      	str	r3, [r7, #32]
   return(result);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3314      	adds	r3, #20
 8007c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e3      	bne.n	8007c66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	330c      	adds	r3, #12
 8007ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007cd0:	61fa      	str	r2, [r7, #28]
 8007cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f844 	bl	8007d7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cf6:	e023      	b.n	8007d40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <HAL_UART_IRQHandler+0x4f4>
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8b5 	bl	8007e80 <UART_Transmit_IT>
    return;
 8007d16:	e014      	b.n	8007d42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00e      	beq.n	8007d42 <HAL_UART_IRQHandler+0x51e>
 8007d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f8f4 	bl	8007f1e <UART_EndTransmit_IT>
    return;
 8007d36:	e004      	b.n	8007d42 <HAL_UART_IRQHandler+0x51e>
    return;
 8007d38:	bf00      	nop
 8007d3a:	e002      	b.n	8007d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d3c:	bf00      	nop
 8007d3e:	e000      	b.n	8007d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d40:	bf00      	nop
  }
}
 8007d42:	37e8      	adds	r7, #232	@ 0xe8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr

08007d5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr

08007d7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b095      	sub	sp, #84	@ 0x54
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	330c      	adds	r3, #12
 8007dba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e5      	bne.n	8007dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d119      	bne.n	8007e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0310 	bic.w	r3, r3, #16
 8007e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2c:	61ba      	str	r2, [r7, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e4e:	bf00      	nop
 8007e50:	3754      	adds	r7, #84	@ 0x54
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff ff7a 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b21      	cmp	r3, #33	@ 0x21
 8007e92:	d13e      	bne.n	8007f12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9c:	d114      	bne.n	8007ec8 <UART_Transmit_IT+0x48>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d110      	bne.n	8007ec8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	1c9a      	adds	r2, r3, #2
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	621a      	str	r2, [r3, #32]
 8007ec6:	e008      	b.n	8007eda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	1c59      	adds	r1, r3, #1
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6211      	str	r1, [r2, #32]
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10f      	bne.n	8007f0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007efc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e000      	b.n	8007f14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f12:	2302      	movs	r3, #2
  }
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff ff02 	bl	8007d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b08c      	sub	sp, #48	@ 0x30
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b22      	cmp	r3, #34	@ 0x22
 8007f60:	f040 80ae 	bne.w	80080c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6c:	d117      	bne.n	8007f9e <UART_Receive_IT+0x50>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d113      	bne.n	8007f9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f9c:	e026      	b.n	8007fec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb0:	d007      	beq.n	8007fc2 <UART_Receive_IT+0x74>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <UART_Receive_IT+0x82>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e008      	b.n	8007fe2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d15d      	bne.n	80080bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0220 	bic.w	r2, r2, #32
 800800e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800801e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	2b01      	cmp	r3, #1
 8008044:	d135      	bne.n	80080b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	613b      	str	r3, [r7, #16]
   return(result);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 0310 	bic.w	r3, r3, #16
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	330c      	adds	r3, #12
 800806a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800806c:	623a      	str	r2, [r7, #32]
 800806e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	69f9      	ldr	r1, [r7, #28]
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	61bb      	str	r3, [r7, #24]
   return(result);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e5      	bne.n	800804c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	d10a      	bne.n	80080a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fe67 	bl	8007d7e <HAL_UARTEx_RxEventCallback>
 80080b0:	e002      	b.n	80080b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fe51 	bl	8007d5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e002      	b.n	80080c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3730      	adds	r7, #48	@ 0x30
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008106:	f023 030c 	bic.w	r3, r3, #12
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	430b      	orrs	r3, r1
 8008112:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a2c      	ldr	r2, [pc, #176]	@ (80081e0 <UART_SetConfig+0x114>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d103      	bne.n	800813c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008134:	f7fe fe8c 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	e002      	b.n	8008142 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800813c:	f7fe fe74 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 8008140:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009a      	lsls	r2, r3, #2
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	4a22      	ldr	r2, [pc, #136]	@ (80081e4 <UART_SetConfig+0x118>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	0119      	lsls	r1, r3, #4
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009a      	lsls	r2, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	fbb2 f2f3 	udiv	r2, r2, r3
 8008178:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <UART_SetConfig+0x118>)
 800817a:	fba3 0302 	umull	r0, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	2064      	movs	r0, #100	@ 0x64
 8008182:	fb00 f303 	mul.w	r3, r0, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	3332      	adds	r3, #50	@ 0x32
 800818c:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <UART_SetConfig+0x118>)
 800818e:	fba2 2303 	umull	r2, r3, r2, r3
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008198:	4419      	add	r1, r3
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009a      	lsls	r2, r3, #2
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <UART_SetConfig+0x118>)
 80081b2:	fba3 0302 	umull	r0, r3, r3, r2
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	2064      	movs	r0, #100	@ 0x64
 80081ba:	fb00 f303 	mul.w	r3, r0, r3
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	3332      	adds	r3, #50	@ 0x32
 80081c4:	4a07      	ldr	r2, [pc, #28]	@ (80081e4 <UART_SetConfig+0x118>)
 80081c6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	440a      	add	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40013800 	.word	0x40013800
 80081e4:	51eb851f 	.word	0x51eb851f

080081e8 <malloc>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <malloc+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f000 b825 	b.w	800823c <_malloc_r>
 80081f2:	bf00      	nop
 80081f4:	20000f50 	.word	0x20000f50

080081f8 <sbrk_aligned>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008238 <sbrk_aligned+0x40>)
 80081fc:	460c      	mov	r4, r1
 80081fe:	6831      	ldr	r1, [r6, #0]
 8008200:	4605      	mov	r5, r0
 8008202:	b911      	cbnz	r1, 800820a <sbrk_aligned+0x12>
 8008204:	f000 f8f0 	bl	80083e8 <_sbrk_r>
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	4621      	mov	r1, r4
 800820c:	4628      	mov	r0, r5
 800820e:	f000 f8eb 	bl	80083e8 <_sbrk_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d103      	bne.n	800821e <sbrk_aligned+0x26>
 8008216:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800821a:	4620      	mov	r0, r4
 800821c:	bd70      	pop	{r4, r5, r6, pc}
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d0f8      	beq.n	800821a <sbrk_aligned+0x22>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4628      	mov	r0, r5
 800822c:	f000 f8dc 	bl	80083e8 <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d1f2      	bne.n	800821a <sbrk_aligned+0x22>
 8008234:	e7ef      	b.n	8008216 <sbrk_aligned+0x1e>
 8008236:	bf00      	nop
 8008238:	20001cb0 	.word	0x20001cb0

0800823c <_malloc_r>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	1ccd      	adds	r5, r1, #3
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	2d00      	cmp	r5, #0
 8008250:	4606      	mov	r6, r0
 8008252:	db01      	blt.n	8008258 <_malloc_r+0x1c>
 8008254:	42a9      	cmp	r1, r5
 8008256:	d904      	bls.n	8008262 <_malloc_r+0x26>
 8008258:	230c      	movs	r3, #12
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	2000      	movs	r0, #0
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008338 <_malloc_r+0xfc>
 8008266:	f000 f869 	bl	800833c <__malloc_lock>
 800826a:	f8d8 3000 	ldr.w	r3, [r8]
 800826e:	461c      	mov	r4, r3
 8008270:	bb44      	cbnz	r4, 80082c4 <_malloc_r+0x88>
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff ffbf 	bl	80081f8 <sbrk_aligned>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	4604      	mov	r4, r0
 800827e:	d158      	bne.n	8008332 <_malloc_r+0xf6>
 8008280:	f8d8 4000 	ldr.w	r4, [r8]
 8008284:	4627      	mov	r7, r4
 8008286:	2f00      	cmp	r7, #0
 8008288:	d143      	bne.n	8008312 <_malloc_r+0xd6>
 800828a:	2c00      	cmp	r4, #0
 800828c:	d04b      	beq.n	8008326 <_malloc_r+0xea>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4639      	mov	r1, r7
 8008292:	4630      	mov	r0, r6
 8008294:	eb04 0903 	add.w	r9, r4, r3
 8008298:	f000 f8a6 	bl	80083e8 <_sbrk_r>
 800829c:	4581      	cmp	r9, r0
 800829e:	d142      	bne.n	8008326 <_malloc_r+0xea>
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	4630      	mov	r0, r6
 80082a4:	1a6d      	subs	r5, r5, r1
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7ff ffa6 	bl	80081f8 <sbrk_aligned>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d03a      	beq.n	8008326 <_malloc_r+0xea>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	442b      	add	r3, r5
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	bb62      	cbnz	r2, 8008318 <_malloc_r+0xdc>
 80082be:	f8c8 7000 	str.w	r7, [r8]
 80082c2:	e00f      	b.n	80082e4 <_malloc_r+0xa8>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	1b52      	subs	r2, r2, r5
 80082c8:	d420      	bmi.n	800830c <_malloc_r+0xd0>
 80082ca:	2a0b      	cmp	r2, #11
 80082cc:	d917      	bls.n	80082fe <_malloc_r+0xc2>
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	6059      	strne	r1, [r3, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	bf08      	it	eq
 80082dc:	f8c8 1000 	streq.w	r1, [r8]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 f82f 	bl	8008348 <__malloc_unlock>
 80082ea:	f104 000b 	add.w	r0, r4, #11
 80082ee:	1d23      	adds	r3, r4, #4
 80082f0:	f020 0007 	bic.w	r0, r0, #7
 80082f4:	1ac2      	subs	r2, r0, r3
 80082f6:	bf1c      	itt	ne
 80082f8:	1a1b      	subne	r3, r3, r0
 80082fa:	50a3      	strne	r3, [r4, r2]
 80082fc:	e7af      	b.n	800825e <_malloc_r+0x22>
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	42a3      	cmp	r3, r4
 8008302:	bf0c      	ite	eq
 8008304:	f8c8 2000 	streq.w	r2, [r8]
 8008308:	605a      	strne	r2, [r3, #4]
 800830a:	e7eb      	b.n	80082e4 <_malloc_r+0xa8>
 800830c:	4623      	mov	r3, r4
 800830e:	6864      	ldr	r4, [r4, #4]
 8008310:	e7ae      	b.n	8008270 <_malloc_r+0x34>
 8008312:	463c      	mov	r4, r7
 8008314:	687f      	ldr	r7, [r7, #4]
 8008316:	e7b6      	b.n	8008286 <_malloc_r+0x4a>
 8008318:	461a      	mov	r2, r3
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	42a3      	cmp	r3, r4
 800831e:	d1fb      	bne.n	8008318 <_malloc_r+0xdc>
 8008320:	2300      	movs	r3, #0
 8008322:	6053      	str	r3, [r2, #4]
 8008324:	e7de      	b.n	80082e4 <_malloc_r+0xa8>
 8008326:	230c      	movs	r3, #12
 8008328:	4630      	mov	r0, r6
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	f000 f80c 	bl	8008348 <__malloc_unlock>
 8008330:	e794      	b.n	800825c <_malloc_r+0x20>
 8008332:	6005      	str	r5, [r0, #0]
 8008334:	e7d6      	b.n	80082e4 <_malloc_r+0xa8>
 8008336:	bf00      	nop
 8008338:	20001cb4 	.word	0x20001cb4

0800833c <__malloc_lock>:
 800833c:	4801      	ldr	r0, [pc, #4]	@ (8008344 <__malloc_lock+0x8>)
 800833e:	f000 b88d 	b.w	800845c <__retarget_lock_acquire_recursive>
 8008342:	bf00      	nop
 8008344:	20001df0 	.word	0x20001df0

08008348 <__malloc_unlock>:
 8008348:	4801      	ldr	r0, [pc, #4]	@ (8008350 <__malloc_unlock+0x8>)
 800834a:	f000 b888 	b.w	800845e <__retarget_lock_release_recursive>
 800834e:	bf00      	nop
 8008350:	20001df0 	.word	0x20001df0

08008354 <siprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800835a:	b500      	push	{lr}
 800835c:	b09c      	sub	sp, #112	@ 0x70
 800835e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008360:	9002      	str	r0, [sp, #8]
 8008362:	9006      	str	r0, [sp, #24]
 8008364:	9107      	str	r1, [sp, #28]
 8008366:	9104      	str	r1, [sp, #16]
 8008368:	4808      	ldr	r0, [pc, #32]	@ (800838c <siprintf+0x38>)
 800836a:	4909      	ldr	r1, [pc, #36]	@ (8008390 <siprintf+0x3c>)
 800836c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	a902      	add	r1, sp, #8
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	f000 f91e 	bl	80085b8 <_svfiprintf_r>
 800837c:	2200      	movs	r2, #0
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	b01c      	add	sp, #112	@ 0x70
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20000f50 	.word	0x20000f50
 8008390:	ffff0208 	.word	0xffff0208

08008394 <strcat>:
 8008394:	4602      	mov	r2, r0
 8008396:	b510      	push	{r4, lr}
 8008398:	7814      	ldrb	r4, [r2, #0]
 800839a:	4613      	mov	r3, r2
 800839c:	3201      	adds	r2, #1
 800839e:	2c00      	cmp	r4, #0
 80083a0:	d1fa      	bne.n	8008398 <strcat+0x4>
 80083a2:	3b01      	subs	r3, #1
 80083a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	d1f9      	bne.n	80083a4 <strcat+0x10>
 80083b0:	bd10      	pop	{r4, pc}

080083b2 <strncpy>:
 80083b2:	4603      	mov	r3, r0
 80083b4:	b510      	push	{r4, lr}
 80083b6:	3901      	subs	r1, #1
 80083b8:	b132      	cbz	r2, 80083c8 <strncpy+0x16>
 80083ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083be:	3a01      	subs	r2, #1
 80083c0:	f803 4b01 	strb.w	r4, [r3], #1
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	d1f7      	bne.n	80083b8 <strncpy+0x6>
 80083c8:	2100      	movs	r1, #0
 80083ca:	441a      	add	r2, r3
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d100      	bne.n	80083d2 <strncpy+0x20>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	f803 1b01 	strb.w	r1, [r3], #1
 80083d6:	e7f9      	b.n	80083cc <strncpy+0x1a>

080083d8 <memset>:
 80083d8:	4603      	mov	r3, r0
 80083da:	4402      	add	r2, r0
 80083dc:	4293      	cmp	r3, r2
 80083de:	d100      	bne.n	80083e2 <memset+0xa>
 80083e0:	4770      	bx	lr
 80083e2:	f803 1b01 	strb.w	r1, [r3], #1
 80083e6:	e7f9      	b.n	80083dc <memset+0x4>

080083e8 <_sbrk_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	2300      	movs	r3, #0
 80083ec:	4d05      	ldr	r5, [pc, #20]	@ (8008404 <_sbrk_r+0x1c>)
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7fc f868 	bl	80044c8 <_sbrk>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_sbrk_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_sbrk_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	20001df4 	.word	0x20001df4

08008408 <__errno>:
 8008408:	4b01      	ldr	r3, [pc, #4]	@ (8008410 <__errno+0x8>)
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000f50 	.word	0x20000f50

08008414 <__libc_init_array>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	2600      	movs	r6, #0
 8008418:	4d0c      	ldr	r5, [pc, #48]	@ (800844c <__libc_init_array+0x38>)
 800841a:	4c0d      	ldr	r4, [pc, #52]	@ (8008450 <__libc_init_array+0x3c>)
 800841c:	1b64      	subs	r4, r4, r5
 800841e:	10a4      	asrs	r4, r4, #2
 8008420:	42a6      	cmp	r6, r4
 8008422:	d109      	bne.n	8008438 <__libc_init_array+0x24>
 8008424:	f000 fbc2 	bl	8008bac <_init>
 8008428:	2600      	movs	r6, #0
 800842a:	4d0a      	ldr	r5, [pc, #40]	@ (8008454 <__libc_init_array+0x40>)
 800842c:	4c0a      	ldr	r4, [pc, #40]	@ (8008458 <__libc_init_array+0x44>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	42a6      	cmp	r6, r4
 8008434:	d105      	bne.n	8008442 <__libc_init_array+0x2e>
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	f855 3b04 	ldr.w	r3, [r5], #4
 800843c:	4798      	blx	r3
 800843e:	3601      	adds	r6, #1
 8008440:	e7ee      	b.n	8008420 <__libc_init_array+0xc>
 8008442:	f855 3b04 	ldr.w	r3, [r5], #4
 8008446:	4798      	blx	r3
 8008448:	3601      	adds	r6, #1
 800844a:	e7f2      	b.n	8008432 <__libc_init_array+0x1e>
 800844c:	08008ee4 	.word	0x08008ee4
 8008450:	08008ee4 	.word	0x08008ee4
 8008454:	08008ee4 	.word	0x08008ee4
 8008458:	08008ee8 	.word	0x08008ee8

0800845c <__retarget_lock_acquire_recursive>:
 800845c:	4770      	bx	lr

0800845e <__retarget_lock_release_recursive>:
 800845e:	4770      	bx	lr

08008460 <strcpy>:
 8008460:	4603      	mov	r3, r0
 8008462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008466:	f803 2b01 	strb.w	r2, [r3], #1
 800846a:	2a00      	cmp	r2, #0
 800846c:	d1f9      	bne.n	8008462 <strcpy+0x2>
 800846e:	4770      	bx	lr

08008470 <_free_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4605      	mov	r5, r0
 8008474:	2900      	cmp	r1, #0
 8008476:	d040      	beq.n	80084fa <_free_r+0x8a>
 8008478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847c:	1f0c      	subs	r4, r1, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfb8      	it	lt
 8008482:	18e4      	addlt	r4, r4, r3
 8008484:	f7ff ff5a 	bl	800833c <__malloc_lock>
 8008488:	4a1c      	ldr	r2, [pc, #112]	@ (80084fc <_free_r+0x8c>)
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	b933      	cbnz	r3, 800849c <_free_r+0x2c>
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	6014      	str	r4, [r2, #0]
 8008492:	4628      	mov	r0, r5
 8008494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008498:	f7ff bf56 	b.w	8008348 <__malloc_unlock>
 800849c:	42a3      	cmp	r3, r4
 800849e:	d908      	bls.n	80084b2 <_free_r+0x42>
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	1821      	adds	r1, r4, r0
 80084a4:	428b      	cmp	r3, r1
 80084a6:	bf01      	itttt	eq
 80084a8:	6819      	ldreq	r1, [r3, #0]
 80084aa:	685b      	ldreq	r3, [r3, #4]
 80084ac:	1809      	addeq	r1, r1, r0
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	e7ed      	b.n	800848e <_free_r+0x1e>
 80084b2:	461a      	mov	r2, r3
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	b10b      	cbz	r3, 80084bc <_free_r+0x4c>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d9fa      	bls.n	80084b2 <_free_r+0x42>
 80084bc:	6811      	ldr	r1, [r2, #0]
 80084be:	1850      	adds	r0, r2, r1
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d10b      	bne.n	80084dc <_free_r+0x6c>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	4401      	add	r1, r0
 80084c8:	1850      	adds	r0, r2, r1
 80084ca:	4283      	cmp	r3, r0
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	d1e0      	bne.n	8008492 <_free_r+0x22>
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	4408      	add	r0, r1
 80084d6:	6010      	str	r0, [r2, #0]
 80084d8:	6053      	str	r3, [r2, #4]
 80084da:	e7da      	b.n	8008492 <_free_r+0x22>
 80084dc:	d902      	bls.n	80084e4 <_free_r+0x74>
 80084de:	230c      	movs	r3, #12
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	e7d6      	b.n	8008492 <_free_r+0x22>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	1821      	adds	r1, r4, r0
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf01      	itttt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	1809      	addeq	r1, r1, r0
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	6054      	str	r4, [r2, #4]
 80084f8:	e7cb      	b.n	8008492 <_free_r+0x22>
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	20001cb4 	.word	0x20001cb4

08008500 <__ssputs_r>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	461f      	mov	r7, r3
 8008506:	688e      	ldr	r6, [r1, #8]
 8008508:	4682      	mov	sl, r0
 800850a:	42be      	cmp	r6, r7
 800850c:	460c      	mov	r4, r1
 800850e:	4690      	mov	r8, r2
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	d82d      	bhi.n	8008570 <__ssputs_r+0x70>
 8008514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008518:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800851c:	d026      	beq.n	800856c <__ssputs_r+0x6c>
 800851e:	6965      	ldr	r5, [r4, #20]
 8008520:	6909      	ldr	r1, [r1, #16]
 8008522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008526:	eba3 0901 	sub.w	r9, r3, r1
 800852a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800852e:	1c7b      	adds	r3, r7, #1
 8008530:	444b      	add	r3, r9
 8008532:	106d      	asrs	r5, r5, #1
 8008534:	429d      	cmp	r5, r3
 8008536:	bf38      	it	cc
 8008538:	461d      	movcc	r5, r3
 800853a:	0553      	lsls	r3, r2, #21
 800853c:	d527      	bpl.n	800858e <__ssputs_r+0x8e>
 800853e:	4629      	mov	r1, r5
 8008540:	f7ff fe7c 	bl	800823c <_malloc_r>
 8008544:	4606      	mov	r6, r0
 8008546:	b360      	cbz	r0, 80085a2 <__ssputs_r+0xa2>
 8008548:	464a      	mov	r2, r9
 800854a:	6921      	ldr	r1, [r4, #16]
 800854c:	f000 fb18 	bl	8008b80 <memcpy>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	6126      	str	r6, [r4, #16]
 800855e:	444e      	add	r6, r9
 8008560:	6026      	str	r6, [r4, #0]
 8008562:	463e      	mov	r6, r7
 8008564:	6165      	str	r5, [r4, #20]
 8008566:	eba5 0509 	sub.w	r5, r5, r9
 800856a:	60a5      	str	r5, [r4, #8]
 800856c:	42be      	cmp	r6, r7
 800856e:	d900      	bls.n	8008572 <__ssputs_r+0x72>
 8008570:	463e      	mov	r6, r7
 8008572:	4632      	mov	r2, r6
 8008574:	4641      	mov	r1, r8
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	f000 fada 	bl	8008b30 <memmove>
 800857c:	2000      	movs	r0, #0
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	1b9b      	subs	r3, r3, r6
 8008582:	60a3      	str	r3, [r4, #8]
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4433      	add	r3, r6
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	462a      	mov	r2, r5
 8008590:	f000 faa0 	bl	8008ad4 <_realloc_r>
 8008594:	4606      	mov	r6, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d1e0      	bne.n	800855c <__ssputs_r+0x5c>
 800859a:	4650      	mov	r0, sl
 800859c:	6921      	ldr	r1, [r4, #16]
 800859e:	f7ff ff67 	bl	8008470 <_free_r>
 80085a2:	230c      	movs	r3, #12
 80085a4:	f8ca 3000 	str.w	r3, [sl]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	e7e9      	b.n	800858a <__ssputs_r+0x8a>
	...

080085b8 <_svfiprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	4698      	mov	r8, r3
 80085be:	898b      	ldrh	r3, [r1, #12]
 80085c0:	4607      	mov	r7, r0
 80085c2:	061b      	lsls	r3, r3, #24
 80085c4:	460d      	mov	r5, r1
 80085c6:	4614      	mov	r4, r2
 80085c8:	b09d      	sub	sp, #116	@ 0x74
 80085ca:	d510      	bpl.n	80085ee <_svfiprintf_r+0x36>
 80085cc:	690b      	ldr	r3, [r1, #16]
 80085ce:	b973      	cbnz	r3, 80085ee <_svfiprintf_r+0x36>
 80085d0:	2140      	movs	r1, #64	@ 0x40
 80085d2:	f7ff fe33 	bl	800823c <_malloc_r>
 80085d6:	6028      	str	r0, [r5, #0]
 80085d8:	6128      	str	r0, [r5, #16]
 80085da:	b930      	cbnz	r0, 80085ea <_svfiprintf_r+0x32>
 80085dc:	230c      	movs	r3, #12
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085e4:	b01d      	add	sp, #116	@ 0x74
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	2340      	movs	r3, #64	@ 0x40
 80085ec:	616b      	str	r3, [r5, #20]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f2:	2320      	movs	r3, #32
 80085f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085f8:	2330      	movs	r3, #48	@ 0x30
 80085fa:	f04f 0901 	mov.w	r9, #1
 80085fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008602:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800879c <_svfiprintf_r+0x1e4>
 8008606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800860a:	4623      	mov	r3, r4
 800860c:	469a      	mov	sl, r3
 800860e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008612:	b10a      	cbz	r2, 8008618 <_svfiprintf_r+0x60>
 8008614:	2a25      	cmp	r2, #37	@ 0x25
 8008616:	d1f9      	bne.n	800860c <_svfiprintf_r+0x54>
 8008618:	ebba 0b04 	subs.w	fp, sl, r4
 800861c:	d00b      	beq.n	8008636 <_svfiprintf_r+0x7e>
 800861e:	465b      	mov	r3, fp
 8008620:	4622      	mov	r2, r4
 8008622:	4629      	mov	r1, r5
 8008624:	4638      	mov	r0, r7
 8008626:	f7ff ff6b 	bl	8008500 <__ssputs_r>
 800862a:	3001      	adds	r0, #1
 800862c:	f000 80a7 	beq.w	800877e <_svfiprintf_r+0x1c6>
 8008630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008632:	445a      	add	r2, fp
 8008634:	9209      	str	r2, [sp, #36]	@ 0x24
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 809f 	beq.w	800877e <_svfiprintf_r+0x1c6>
 8008640:	2300      	movs	r3, #0
 8008642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800864a:	f10a 0a01 	add.w	sl, sl, #1
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008656:	931a      	str	r3, [sp, #104]	@ 0x68
 8008658:	4654      	mov	r4, sl
 800865a:	2205      	movs	r2, #5
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	484e      	ldr	r0, [pc, #312]	@ (800879c <_svfiprintf_r+0x1e4>)
 8008662:	f000 fa7f 	bl	8008b64 <memchr>
 8008666:	9a04      	ldr	r2, [sp, #16]
 8008668:	b9d8      	cbnz	r0, 80086a2 <_svfiprintf_r+0xea>
 800866a:	06d0      	lsls	r0, r2, #27
 800866c:	bf44      	itt	mi
 800866e:	2320      	movmi	r3, #32
 8008670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008674:	0711      	lsls	r1, r2, #28
 8008676:	bf44      	itt	mi
 8008678:	232b      	movmi	r3, #43	@ 0x2b
 800867a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867e:	f89a 3000 	ldrb.w	r3, [sl]
 8008682:	2b2a      	cmp	r3, #42	@ 0x2a
 8008684:	d015      	beq.n	80086b2 <_svfiprintf_r+0xfa>
 8008686:	4654      	mov	r4, sl
 8008688:	2000      	movs	r0, #0
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4621      	mov	r1, r4
 8008692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008696:	3b30      	subs	r3, #48	@ 0x30
 8008698:	2b09      	cmp	r3, #9
 800869a:	d94b      	bls.n	8008734 <_svfiprintf_r+0x17c>
 800869c:	b1b0      	cbz	r0, 80086cc <_svfiprintf_r+0x114>
 800869e:	9207      	str	r2, [sp, #28]
 80086a0:	e014      	b.n	80086cc <_svfiprintf_r+0x114>
 80086a2:	eba0 0308 	sub.w	r3, r0, r8
 80086a6:	fa09 f303 	lsl.w	r3, r9, r3
 80086aa:	4313      	orrs	r3, r2
 80086ac:	46a2      	mov	sl, r4
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	e7d2      	b.n	8008658 <_svfiprintf_r+0xa0>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	1d19      	adds	r1, r3, #4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	9103      	str	r1, [sp, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbb      	ittet	lt
 80086be:	425b      	neglt	r3, r3
 80086c0:	f042 0202 	orrlt.w	r2, r2, #2
 80086c4:	9307      	strge	r3, [sp, #28]
 80086c6:	9307      	strlt	r3, [sp, #28]
 80086c8:	bfb8      	it	lt
 80086ca:	9204      	strlt	r2, [sp, #16]
 80086cc:	7823      	ldrb	r3, [r4, #0]
 80086ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80086d0:	d10a      	bne.n	80086e8 <_svfiprintf_r+0x130>
 80086d2:	7863      	ldrb	r3, [r4, #1]
 80086d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d6:	d132      	bne.n	800873e <_svfiprintf_r+0x186>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	3402      	adds	r4, #2
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9203      	str	r2, [sp, #12]
 80086e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80087a0 <_svfiprintf_r+0x1e8>
 80086ec:	2203      	movs	r2, #3
 80086ee:	4650      	mov	r0, sl
 80086f0:	7821      	ldrb	r1, [r4, #0]
 80086f2:	f000 fa37 	bl	8008b64 <memchr>
 80086f6:	b138      	cbz	r0, 8008708 <_svfiprintf_r+0x150>
 80086f8:	2240      	movs	r2, #64	@ 0x40
 80086fa:	9b04      	ldr	r3, [sp, #16]
 80086fc:	eba0 000a 	sub.w	r0, r0, sl
 8008700:	4082      	lsls	r2, r0
 8008702:	4313      	orrs	r3, r2
 8008704:	3401      	adds	r4, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	2206      	movs	r2, #6
 800870e:	4825      	ldr	r0, [pc, #148]	@ (80087a4 <_svfiprintf_r+0x1ec>)
 8008710:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008714:	f000 fa26 	bl	8008b64 <memchr>
 8008718:	2800      	cmp	r0, #0
 800871a:	d036      	beq.n	800878a <_svfiprintf_r+0x1d2>
 800871c:	4b22      	ldr	r3, [pc, #136]	@ (80087a8 <_svfiprintf_r+0x1f0>)
 800871e:	bb1b      	cbnz	r3, 8008768 <_svfiprintf_r+0x1b0>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	3307      	adds	r3, #7
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	3308      	adds	r3, #8
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872e:	4433      	add	r3, r6
 8008730:	9309      	str	r3, [sp, #36]	@ 0x24
 8008732:	e76a      	b.n	800860a <_svfiprintf_r+0x52>
 8008734:	460c      	mov	r4, r1
 8008736:	2001      	movs	r0, #1
 8008738:	fb0c 3202 	mla	r2, ip, r2, r3
 800873c:	e7a8      	b.n	8008690 <_svfiprintf_r+0xd8>
 800873e:	2300      	movs	r3, #0
 8008740:	f04f 0c0a 	mov.w	ip, #10
 8008744:	4619      	mov	r1, r3
 8008746:	3401      	adds	r4, #1
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	4620      	mov	r0, r4
 800874c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008750:	3a30      	subs	r2, #48	@ 0x30
 8008752:	2a09      	cmp	r2, #9
 8008754:	d903      	bls.n	800875e <_svfiprintf_r+0x1a6>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0c6      	beq.n	80086e8 <_svfiprintf_r+0x130>
 800875a:	9105      	str	r1, [sp, #20]
 800875c:	e7c4      	b.n	80086e8 <_svfiprintf_r+0x130>
 800875e:	4604      	mov	r4, r0
 8008760:	2301      	movs	r3, #1
 8008762:	fb0c 2101 	mla	r1, ip, r1, r2
 8008766:	e7f0      	b.n	800874a <_svfiprintf_r+0x192>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4638      	mov	r0, r7
 8008770:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <_svfiprintf_r+0x1f4>)
 8008772:	a904      	add	r1, sp, #16
 8008774:	f3af 8000 	nop.w
 8008778:	1c42      	adds	r2, r0, #1
 800877a:	4606      	mov	r6, r0
 800877c:	d1d6      	bne.n	800872c <_svfiprintf_r+0x174>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	065b      	lsls	r3, r3, #25
 8008782:	f53f af2d 	bmi.w	80085e0 <_svfiprintf_r+0x28>
 8008786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008788:	e72c      	b.n	80085e4 <_svfiprintf_r+0x2c>
 800878a:	ab03      	add	r3, sp, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	462a      	mov	r2, r5
 8008790:	4638      	mov	r0, r7
 8008792:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <_svfiprintf_r+0x1f4>)
 8008794:	a904      	add	r1, sp, #16
 8008796:	f000 f87d 	bl	8008894 <_printf_i>
 800879a:	e7ed      	b.n	8008778 <_svfiprintf_r+0x1c0>
 800879c:	08008ea6 	.word	0x08008ea6
 80087a0:	08008eac 	.word	0x08008eac
 80087a4:	08008eb0 	.word	0x08008eb0
 80087a8:	00000000 	.word	0x00000000
 80087ac:	08008501 	.word	0x08008501

080087b0 <_printf_common>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	4616      	mov	r6, r2
 80087b6:	4698      	mov	r8, r3
 80087b8:	688a      	ldr	r2, [r1, #8]
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	4607      	mov	r7, r0
 80087be:	4293      	cmp	r3, r2
 80087c0:	bfb8      	it	lt
 80087c2:	4613      	movlt	r3, r2
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087ca:	460c      	mov	r4, r1
 80087cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087d0:	b10a      	cbz	r2, 80087d6 <_printf_common+0x26>
 80087d2:	3301      	adds	r3, #1
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	0699      	lsls	r1, r3, #26
 80087da:	bf42      	ittt	mi
 80087dc:	6833      	ldrmi	r3, [r6, #0]
 80087de:	3302      	addmi	r3, #2
 80087e0:	6033      	strmi	r3, [r6, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	f015 0506 	ands.w	r5, r5, #6
 80087e8:	d106      	bne.n	80087f8 <_printf_common+0x48>
 80087ea:	f104 0a19 	add.w	sl, r4, #25
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	6832      	ldr	r2, [r6, #0]
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dc2b      	bgt.n	8008850 <_printf_common+0xa0>
 80087f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	3b00      	subs	r3, #0
 8008800:	bf18      	it	ne
 8008802:	2301      	movne	r3, #1
 8008804:	0692      	lsls	r2, r2, #26
 8008806:	d430      	bmi.n	800886a <_printf_common+0xba>
 8008808:	4641      	mov	r1, r8
 800880a:	4638      	mov	r0, r7
 800880c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008810:	47c8      	blx	r9
 8008812:	3001      	adds	r0, #1
 8008814:	d023      	beq.n	800885e <_printf_common+0xae>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	f003 0306 	and.w	r3, r3, #6
 800881e:	2b04      	cmp	r3, #4
 8008820:	bf14      	ite	ne
 8008822:	2500      	movne	r5, #0
 8008824:	6833      	ldreq	r3, [r6, #0]
 8008826:	f04f 0600 	mov.w	r6, #0
 800882a:	bf08      	it	eq
 800882c:	68e5      	ldreq	r5, [r4, #12]
 800882e:	f104 041a 	add.w	r4, r4, #26
 8008832:	bf08      	it	eq
 8008834:	1aed      	subeq	r5, r5, r3
 8008836:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800883a:	bf08      	it	eq
 800883c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008840:	4293      	cmp	r3, r2
 8008842:	bfc4      	itt	gt
 8008844:	1a9b      	subgt	r3, r3, r2
 8008846:	18ed      	addgt	r5, r5, r3
 8008848:	42b5      	cmp	r5, r6
 800884a:	d11a      	bne.n	8008882 <_printf_common+0xd2>
 800884c:	2000      	movs	r0, #0
 800884e:	e008      	b.n	8008862 <_printf_common+0xb2>
 8008850:	2301      	movs	r3, #1
 8008852:	4652      	mov	r2, sl
 8008854:	4641      	mov	r1, r8
 8008856:	4638      	mov	r0, r7
 8008858:	47c8      	blx	r9
 800885a:	3001      	adds	r0, #1
 800885c:	d103      	bne.n	8008866 <_printf_common+0xb6>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	3501      	adds	r5, #1
 8008868:	e7c1      	b.n	80087ee <_printf_common+0x3e>
 800886a:	2030      	movs	r0, #48	@ 0x30
 800886c:	18e1      	adds	r1, r4, r3
 800886e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008878:	4422      	add	r2, r4
 800887a:	3302      	adds	r3, #2
 800887c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008880:	e7c2      	b.n	8008808 <_printf_common+0x58>
 8008882:	2301      	movs	r3, #1
 8008884:	4622      	mov	r2, r4
 8008886:	4641      	mov	r1, r8
 8008888:	4638      	mov	r0, r7
 800888a:	47c8      	blx	r9
 800888c:	3001      	adds	r0, #1
 800888e:	d0e6      	beq.n	800885e <_printf_common+0xae>
 8008890:	3601      	adds	r6, #1
 8008892:	e7d9      	b.n	8008848 <_printf_common+0x98>

08008894 <_printf_i>:
 8008894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	7e0f      	ldrb	r7, [r1, #24]
 800889a:	4691      	mov	r9, r2
 800889c:	2f78      	cmp	r7, #120	@ 0x78
 800889e:	4680      	mov	r8, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	469a      	mov	sl, r3
 80088a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088aa:	d807      	bhi.n	80088bc <_printf_i+0x28>
 80088ac:	2f62      	cmp	r7, #98	@ 0x62
 80088ae:	d80a      	bhi.n	80088c6 <_printf_i+0x32>
 80088b0:	2f00      	cmp	r7, #0
 80088b2:	f000 80d3 	beq.w	8008a5c <_printf_i+0x1c8>
 80088b6:	2f58      	cmp	r7, #88	@ 0x58
 80088b8:	f000 80ba 	beq.w	8008a30 <_printf_i+0x19c>
 80088bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088c4:	e03a      	b.n	800893c <_printf_i+0xa8>
 80088c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088ca:	2b15      	cmp	r3, #21
 80088cc:	d8f6      	bhi.n	80088bc <_printf_i+0x28>
 80088ce:	a101      	add	r1, pc, #4	@ (adr r1, 80088d4 <_printf_i+0x40>)
 80088d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088d4:	0800892d 	.word	0x0800892d
 80088d8:	08008941 	.word	0x08008941
 80088dc:	080088bd 	.word	0x080088bd
 80088e0:	080088bd 	.word	0x080088bd
 80088e4:	080088bd 	.word	0x080088bd
 80088e8:	080088bd 	.word	0x080088bd
 80088ec:	08008941 	.word	0x08008941
 80088f0:	080088bd 	.word	0x080088bd
 80088f4:	080088bd 	.word	0x080088bd
 80088f8:	080088bd 	.word	0x080088bd
 80088fc:	080088bd 	.word	0x080088bd
 8008900:	08008a43 	.word	0x08008a43
 8008904:	0800896b 	.word	0x0800896b
 8008908:	080089fd 	.word	0x080089fd
 800890c:	080088bd 	.word	0x080088bd
 8008910:	080088bd 	.word	0x080088bd
 8008914:	08008a65 	.word	0x08008a65
 8008918:	080088bd 	.word	0x080088bd
 800891c:	0800896b 	.word	0x0800896b
 8008920:	080088bd 	.word	0x080088bd
 8008924:	080088bd 	.word	0x080088bd
 8008928:	08008a05 	.word	0x08008a05
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6032      	str	r2, [r6, #0]
 8008934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800893c:	2301      	movs	r3, #1
 800893e:	e09e      	b.n	8008a7e <_printf_i+0x1ea>
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	6820      	ldr	r0, [r4, #0]
 8008944:	1d19      	adds	r1, r3, #4
 8008946:	6031      	str	r1, [r6, #0]
 8008948:	0606      	lsls	r6, r0, #24
 800894a:	d501      	bpl.n	8008950 <_printf_i+0xbc>
 800894c:	681d      	ldr	r5, [r3, #0]
 800894e:	e003      	b.n	8008958 <_printf_i+0xc4>
 8008950:	0645      	lsls	r5, r0, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0xb8>
 8008954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008958:	2d00      	cmp	r5, #0
 800895a:	da03      	bge.n	8008964 <_printf_i+0xd0>
 800895c:	232d      	movs	r3, #45	@ 0x2d
 800895e:	426d      	negs	r5, r5
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008964:	230a      	movs	r3, #10
 8008966:	4859      	ldr	r0, [pc, #356]	@ (8008acc <_printf_i+0x238>)
 8008968:	e011      	b.n	800898e <_printf_i+0xfa>
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	0608      	lsls	r0, r1, #24
 8008970:	f853 5b04 	ldr.w	r5, [r3], #4
 8008974:	d402      	bmi.n	800897c <_printf_i+0xe8>
 8008976:	0649      	lsls	r1, r1, #25
 8008978:	bf48      	it	mi
 800897a:	b2ad      	uxthmi	r5, r5
 800897c:	2f6f      	cmp	r7, #111	@ 0x6f
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	bf14      	ite	ne
 8008982:	230a      	movne	r3, #10
 8008984:	2308      	moveq	r3, #8
 8008986:	4851      	ldr	r0, [pc, #324]	@ (8008acc <_printf_i+0x238>)
 8008988:	2100      	movs	r1, #0
 800898a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800898e:	6866      	ldr	r6, [r4, #4]
 8008990:	2e00      	cmp	r6, #0
 8008992:	bfa8      	it	ge
 8008994:	6821      	ldrge	r1, [r4, #0]
 8008996:	60a6      	str	r6, [r4, #8]
 8008998:	bfa4      	itt	ge
 800899a:	f021 0104 	bicge.w	r1, r1, #4
 800899e:	6021      	strge	r1, [r4, #0]
 80089a0:	b90d      	cbnz	r5, 80089a6 <_printf_i+0x112>
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d04b      	beq.n	8008a3e <_printf_i+0x1aa>
 80089a6:	4616      	mov	r6, r2
 80089a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ac:	fb03 5711 	mls	r7, r3, r1, r5
 80089b0:	5dc7      	ldrb	r7, [r0, r7]
 80089b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089b6:	462f      	mov	r7, r5
 80089b8:	42bb      	cmp	r3, r7
 80089ba:	460d      	mov	r5, r1
 80089bc:	d9f4      	bls.n	80089a8 <_printf_i+0x114>
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d10b      	bne.n	80089da <_printf_i+0x146>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	07df      	lsls	r7, r3, #31
 80089c6:	d508      	bpl.n	80089da <_printf_i+0x146>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	6861      	ldr	r1, [r4, #4]
 80089cc:	4299      	cmp	r1, r3
 80089ce:	bfde      	ittt	le
 80089d0:	2330      	movle	r3, #48	@ 0x30
 80089d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80089da:	1b92      	subs	r2, r2, r6
 80089dc:	6122      	str	r2, [r4, #16]
 80089de:	464b      	mov	r3, r9
 80089e0:	4621      	mov	r1, r4
 80089e2:	4640      	mov	r0, r8
 80089e4:	f8cd a000 	str.w	sl, [sp]
 80089e8:	aa03      	add	r2, sp, #12
 80089ea:	f7ff fee1 	bl	80087b0 <_printf_common>
 80089ee:	3001      	adds	r0, #1
 80089f0:	d14a      	bne.n	8008a88 <_printf_i+0x1f4>
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089f6:	b004      	add	sp, #16
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f043 0320 	orr.w	r3, r3, #32
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	2778      	movs	r7, #120	@ 0x78
 8008a06:	4832      	ldr	r0, [pc, #200]	@ (8008ad0 <_printf_i+0x23c>)
 8008a08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	6831      	ldr	r1, [r6, #0]
 8008a10:	061f      	lsls	r7, r3, #24
 8008a12:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a16:	d402      	bmi.n	8008a1e <_printf_i+0x18a>
 8008a18:	065f      	lsls	r7, r3, #25
 8008a1a:	bf48      	it	mi
 8008a1c:	b2ad      	uxthmi	r5, r5
 8008a1e:	6031      	str	r1, [r6, #0]
 8008a20:	07d9      	lsls	r1, r3, #31
 8008a22:	bf44      	itt	mi
 8008a24:	f043 0320 	orrmi.w	r3, r3, #32
 8008a28:	6023      	strmi	r3, [r4, #0]
 8008a2a:	b11d      	cbz	r5, 8008a34 <_printf_i+0x1a0>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	e7ab      	b.n	8008988 <_printf_i+0xf4>
 8008a30:	4826      	ldr	r0, [pc, #152]	@ (8008acc <_printf_i+0x238>)
 8008a32:	e7e9      	b.n	8008a08 <_printf_i+0x174>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	f023 0320 	bic.w	r3, r3, #32
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e7f6      	b.n	8008a2c <_printf_i+0x198>
 8008a3e:	4616      	mov	r6, r2
 8008a40:	e7bd      	b.n	80089be <_printf_i+0x12a>
 8008a42:	6833      	ldr	r3, [r6, #0]
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	1d18      	adds	r0, r3, #4
 8008a48:	6961      	ldr	r1, [r4, #20]
 8008a4a:	6030      	str	r0, [r6, #0]
 8008a4c:	062e      	lsls	r6, r5, #24
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	d501      	bpl.n	8008a56 <_printf_i+0x1c2>
 8008a52:	6019      	str	r1, [r3, #0]
 8008a54:	e002      	b.n	8008a5c <_printf_i+0x1c8>
 8008a56:	0668      	lsls	r0, r5, #25
 8008a58:	d5fb      	bpl.n	8008a52 <_printf_i+0x1be>
 8008a5a:	8019      	strh	r1, [r3, #0]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4616      	mov	r6, r2
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	e7bc      	b.n	80089de <_printf_i+0x14a>
 8008a64:	6833      	ldr	r3, [r6, #0]
 8008a66:	2100      	movs	r1, #0
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	6032      	str	r2, [r6, #0]
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	6862      	ldr	r2, [r4, #4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f877 	bl	8008b64 <memchr>
 8008a76:	b108      	cbz	r0, 8008a7c <_printf_i+0x1e8>
 8008a78:	1b80      	subs	r0, r0, r6
 8008a7a:	6060      	str	r0, [r4, #4]
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	2300      	movs	r3, #0
 8008a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a86:	e7aa      	b.n	80089de <_printf_i+0x14a>
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	47d0      	blx	sl
 8008a92:	3001      	adds	r0, #1
 8008a94:	d0ad      	beq.n	80089f2 <_printf_i+0x15e>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	079b      	lsls	r3, r3, #30
 8008a9a:	d413      	bmi.n	8008ac4 <_printf_i+0x230>
 8008a9c:	68e0      	ldr	r0, [r4, #12]
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	4298      	cmp	r0, r3
 8008aa2:	bfb8      	it	lt
 8008aa4:	4618      	movlt	r0, r3
 8008aa6:	e7a6      	b.n	80089f6 <_printf_i+0x162>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4632      	mov	r2, r6
 8008aac:	4649      	mov	r1, r9
 8008aae:	4640      	mov	r0, r8
 8008ab0:	47d0      	blx	sl
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d09d      	beq.n	80089f2 <_printf_i+0x15e>
 8008ab6:	3501      	adds	r5, #1
 8008ab8:	68e3      	ldr	r3, [r4, #12]
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	42ab      	cmp	r3, r5
 8008ac0:	dcf2      	bgt.n	8008aa8 <_printf_i+0x214>
 8008ac2:	e7eb      	b.n	8008a9c <_printf_i+0x208>
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	f104 0619 	add.w	r6, r4, #25
 8008aca:	e7f5      	b.n	8008ab8 <_printf_i+0x224>
 8008acc:	08008eb7 	.word	0x08008eb7
 8008ad0:	08008ec8 	.word	0x08008ec8

08008ad4 <_realloc_r>:
 8008ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad8:	4680      	mov	r8, r0
 8008ada:	4615      	mov	r5, r2
 8008adc:	460c      	mov	r4, r1
 8008ade:	b921      	cbnz	r1, 8008aea <_realloc_r+0x16>
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae6:	f7ff bba9 	b.w	800823c <_malloc_r>
 8008aea:	b92a      	cbnz	r2, 8008af8 <_realloc_r+0x24>
 8008aec:	f7ff fcc0 	bl	8008470 <_free_r>
 8008af0:	2400      	movs	r4, #0
 8008af2:	4620      	mov	r0, r4
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	f000 f850 	bl	8008b9c <_malloc_usable_size_r>
 8008afc:	4285      	cmp	r5, r0
 8008afe:	4606      	mov	r6, r0
 8008b00:	d802      	bhi.n	8008b08 <_realloc_r+0x34>
 8008b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b06:	d8f4      	bhi.n	8008af2 <_realloc_r+0x1e>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f7ff fb96 	bl	800823c <_malloc_r>
 8008b10:	4607      	mov	r7, r0
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0ec      	beq.n	8008af0 <_realloc_r+0x1c>
 8008b16:	42b5      	cmp	r5, r6
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	bf28      	it	cs
 8008b1e:	4632      	movcs	r2, r6
 8008b20:	f000 f82e 	bl	8008b80 <memcpy>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4640      	mov	r0, r8
 8008b28:	f7ff fca2 	bl	8008470 <_free_r>
 8008b2c:	463c      	mov	r4, r7
 8008b2e:	e7e0      	b.n	8008af2 <_realloc_r+0x1e>

08008b30 <memmove>:
 8008b30:	4288      	cmp	r0, r1
 8008b32:	b510      	push	{r4, lr}
 8008b34:	eb01 0402 	add.w	r4, r1, r2
 8008b38:	d902      	bls.n	8008b40 <memmove+0x10>
 8008b3a:	4284      	cmp	r4, r0
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	d807      	bhi.n	8008b50 <memmove+0x20>
 8008b40:	1e43      	subs	r3, r0, #1
 8008b42:	42a1      	cmp	r1, r4
 8008b44:	d008      	beq.n	8008b58 <memmove+0x28>
 8008b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b4e:	e7f8      	b.n	8008b42 <memmove+0x12>
 8008b50:	4601      	mov	r1, r0
 8008b52:	4402      	add	r2, r0
 8008b54:	428a      	cmp	r2, r1
 8008b56:	d100      	bne.n	8008b5a <memmove+0x2a>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b62:	e7f7      	b.n	8008b54 <memmove+0x24>

08008b64 <memchr>:
 8008b64:	4603      	mov	r3, r0
 8008b66:	b510      	push	{r4, lr}
 8008b68:	b2c9      	uxtb	r1, r1
 8008b6a:	4402      	add	r2, r0
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	d101      	bne.n	8008b76 <memchr+0x12>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e003      	b.n	8008b7e <memchr+0x1a>
 8008b76:	7804      	ldrb	r4, [r0, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	428c      	cmp	r4, r1
 8008b7c:	d1f6      	bne.n	8008b6c <memchr+0x8>
 8008b7e:	bd10      	pop	{r4, pc}

08008b80 <memcpy>:
 8008b80:	440a      	add	r2, r1
 8008b82:	4291      	cmp	r1, r2
 8008b84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b88:	d100      	bne.n	8008b8c <memcpy+0xc>
 8008b8a:	4770      	bx	lr
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b92:	4291      	cmp	r1, r2
 8008b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b98:	d1f9      	bne.n	8008b8e <memcpy+0xe>
 8008b9a:	bd10      	pop	{r4, pc}

08008b9c <_malloc_usable_size_r>:
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f18      	subs	r0, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfbc      	itt	lt
 8008ba6:	580b      	ldrlt	r3, [r1, r0]
 8008ba8:	18c0      	addlt	r0, r0, r3
 8008baa:	4770      	bx	lr

08008bac <_init>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_fini>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr
