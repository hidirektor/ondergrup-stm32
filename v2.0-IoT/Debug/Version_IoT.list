
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edc0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800efa4  0800efa4  0000ffa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f430  0800f430  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f430  0800f430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f438  0800f438  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f438  0800f438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f43c  0800f43c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f440  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b9c  20000fd0  08010410  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  08010410  00012b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e06  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003680  00000000  00000000  0002adff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  0002f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8c7  00000000  00000000  00030635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3b9  00000000  00000000  0004cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04db  00000000  00000000  0006b2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  0010b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ef8c 	.word	0x0800ef8c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800ef8c 	.word	0x0800ef8c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9b      	ldr	r3, [pc, #620]	@ (80004b4 <eepromKontrol+0x280>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489a      	ldr	r0, [pc, #616]	@ (80004b8 <eepromKontrol+0x284>)
 8000250:	f00b fcfe 	bl	800bc50 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f00a fb76 	bl	800a948 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b96      	ldr	r3, [pc, #600]	@ (80004bc <eepromKontrol+0x288>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b93      	ldr	r3, [pc, #588]	@ (80004b4 <eepromKontrol+0x280>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b95      	ldr	r3, [pc, #596]	@ (80004c0 <eepromKontrol+0x28c>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b91      	ldr	r3, [pc, #580]	@ (80004b4 <eepromKontrol+0x280>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b94      	ldr	r3, [pc, #592]	@ (80004c4 <eepromKontrol+0x290>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b8f      	ldr	r3, [pc, #572]	@ (80004b4 <eepromKontrol+0x280>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b93      	ldr	r3, [pc, #588]	@ (80004c8 <eepromKontrol+0x294>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8d      	ldr	r3, [pc, #564]	@ (80004b4 <eepromKontrol+0x280>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b92      	ldr	r3, [pc, #584]	@ (80004cc <eepromKontrol+0x298>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8b      	ldr	r3, [pc, #556]	@ (80004b4 <eepromKontrol+0x280>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b91      	ldr	r3, [pc, #580]	@ (80004d0 <eepromKontrol+0x29c>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b89      	ldr	r3, [pc, #548]	@ (80004b4 <eepromKontrol+0x280>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b90      	ldr	r3, [pc, #576]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b87      	ldr	r3, [pc, #540]	@ (80004b4 <eepromKontrol+0x280>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b8f      	ldr	r3, [pc, #572]	@ (80004d8 <eepromKontrol+0x2a4>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b85      	ldr	r3, [pc, #532]	@ (80004b4 <eepromKontrol+0x280>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8e      	ldr	r3, [pc, #568]	@ (80004dc <eepromKontrol+0x2a8>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b83      	ldr	r3, [pc, #524]	@ (80004b4 <eepromKontrol+0x280>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8d      	ldr	r3, [pc, #564]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b81      	ldr	r3, [pc, #516]	@ (80004b4 <eepromKontrol+0x280>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8c      	ldr	r3, [pc, #560]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b7f      	ldr	r3, [pc, #508]	@ (80004b4 <eepromKontrol+0x280>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8b      	ldr	r3, [pc, #556]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7d      	ldr	r3, [pc, #500]	@ (80004b4 <eepromKontrol+0x280>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8a      	ldr	r3, [pc, #552]	@ (80004ec <eepromKontrol+0x2b8>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7b      	ldr	r3, [pc, #492]	@ (80004b4 <eepromKontrol+0x280>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b89      	ldr	r3, [pc, #548]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b79      	ldr	r3, [pc, #484]	@ (80004b4 <eepromKontrol+0x280>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b88      	ldr	r3, [pc, #544]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b77      	ldr	r3, [pc, #476]	@ (80004b4 <eepromKontrol+0x280>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b87      	ldr	r3, [pc, #540]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b75      	ldr	r3, [pc, #468]	@ (80004b4 <eepromKontrol+0x280>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b86      	ldr	r3, [pc, #536]	@ (80004fc <eepromKontrol+0x2c8>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b73      	ldr	r3, [pc, #460]	@ (80004b4 <eepromKontrol+0x280>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b85      	ldr	r3, [pc, #532]	@ (8000500 <eepromKontrol+0x2cc>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b71      	ldr	r3, [pc, #452]	@ (80004b4 <eepromKontrol+0x280>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b84      	ldr	r3, [pc, #528]	@ (8000504 <eepromKontrol+0x2d0>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b6f      	ldr	r3, [pc, #444]	@ (80004b4 <eepromKontrol+0x280>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b83      	ldr	r3, [pc, #524]	@ (8000508 <eepromKontrol+0x2d4>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6d      	ldr	r3, [pc, #436]	@ (80004b4 <eepromKontrol+0x280>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b82      	ldr	r3, [pc, #520]	@ (800050c <eepromKontrol+0x2d8>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6b      	ldr	r3, [pc, #428]	@ (80004b4 <eepromKontrol+0x280>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b81      	ldr	r3, [pc, #516]	@ (8000510 <eepromKontrol+0x2dc>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b69      	ldr	r3, [pc, #420]	@ (80004b4 <eepromKontrol+0x280>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b80      	ldr	r3, [pc, #512]	@ (8000514 <eepromKontrol+0x2e0>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b67      	ldr	r3, [pc, #412]	@ (80004b4 <eepromKontrol+0x280>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b7f      	ldr	r3, [pc, #508]	@ (8000518 <eepromKontrol+0x2e4>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b65      	ldr	r3, [pc, #404]	@ (80004b4 <eepromKontrol+0x280>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7e      	ldr	r3, [pc, #504]	@ (800051c <eepromKontrol+0x2e8>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b63      	ldr	r3, [pc, #396]	@ (80004b4 <eepromKontrol+0x280>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7d      	ldr	r3, [pc, #500]	@ (8000520 <eepromKontrol+0x2ec>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b61      	ldr	r3, [pc, #388]	@ (80004b4 <eepromKontrol+0x280>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7c      	ldr	r3, [pc, #496]	@ (8000524 <eepromKontrol+0x2f0>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000334:	4b5f      	ldr	r3, [pc, #380]	@ (80004b4 <eepromKontrol+0x280>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7b      	ldr	r3, [pc, #492]	@ (8000528 <eepromKontrol+0x2f4>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 800033c:	4b5d      	ldr	r3, [pc, #372]	@ (80004b4 <eepromKontrol+0x280>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7a      	ldr	r3, [pc, #488]	@ (800052c <eepromKontrol+0x2f8>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000344:	4b5b      	ldr	r3, [pc, #364]	@ (80004b4 <eepromKontrol+0x280>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b79      	ldr	r3, [pc, #484]	@ (8000530 <eepromKontrol+0x2fc>)
 800034a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800034c:	4b59      	ldr	r3, [pc, #356]	@ (80004b4 <eepromKontrol+0x280>)
 800034e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000352:	4b78      	ldr	r3, [pc, #480]	@ (8000534 <eepromKontrol+0x300>)
 8000354:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000356:	4b57      	ldr	r3, [pc, #348]	@ (80004b4 <eepromKontrol+0x280>)
 8000358:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800035c:	4b76      	ldr	r3, [pc, #472]	@ (8000538 <eepromKontrol+0x304>)
 800035e:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000360:	4b54      	ldr	r3, [pc, #336]	@ (80004b4 <eepromKontrol+0x280>)
 8000362:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000366:	4b75      	ldr	r3, [pc, #468]	@ (800053c <eepromKontrol+0x308>)
 8000368:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036a:	4b52      	ldr	r3, [pc, #328]	@ (80004b4 <eepromKontrol+0x280>)
 800036c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000370:	4b73      	ldr	r3, [pc, #460]	@ (8000540 <eepromKontrol+0x30c>)
 8000372:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000374:	4b4f      	ldr	r3, [pc, #316]	@ (80004b4 <eepromKontrol+0x280>)
 8000376:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037a:	4b72      	ldr	r3, [pc, #456]	@ (8000544 <eepromKontrol+0x310>)
 800037c:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800037e:	4b4d      	ldr	r3, [pc, #308]	@ (80004b4 <eepromKontrol+0x280>)
 8000380:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000384:	4b70      	ldr	r3, [pc, #448]	@ (8000548 <eepromKontrol+0x314>)
 8000386:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000388:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <eepromKontrol+0x280>)
 800038a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800038e:	4b6f      	ldr	r3, [pc, #444]	@ (800054c <eepromKontrol+0x318>)
 8000390:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000392:	4b48      	ldr	r3, [pc, #288]	@ (80004b4 <eepromKontrol+0x280>)
 8000394:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000398:	4b6d      	ldr	r3, [pc, #436]	@ (8000550 <eepromKontrol+0x31c>)
 800039a:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 800039c:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <eepromKontrol+0x280>)
 800039e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000554 <eepromKontrol+0x320>)
 80003a4:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a6:	4b43      	ldr	r3, [pc, #268]	@ (80004b4 <eepromKontrol+0x280>)
 80003a8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000558 <eepromKontrol+0x324>)
 80003ae:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b0:	4b40      	ldr	r3, [pc, #256]	@ (80004b4 <eepromKontrol+0x280>)
 80003b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b6:	4b69      	ldr	r3, [pc, #420]	@ (800055c <eepromKontrol+0x328>)
 80003b8:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003ba:	4b3e      	ldr	r3, [pc, #248]	@ (80004b4 <eepromKontrol+0x280>)
 80003bc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c0:	4b67      	ldr	r3, [pc, #412]	@ (8000560 <eepromKontrol+0x32c>)
 80003c2:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c4:	4b3b      	ldr	r3, [pc, #236]	@ (80004b4 <eepromKontrol+0x280>)
 80003c6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ca:	4b66      	ldr	r3, [pc, #408]	@ (8000564 <eepromKontrol+0x330>)
 80003cc:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <eepromKontrol+0x280>)
 80003d0:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d4:	4b64      	ldr	r3, [pc, #400]	@ (8000568 <eepromKontrol+0x334>)
 80003d6:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80003d8:	4b36      	ldr	r3, [pc, #216]	@ (80004b4 <eepromKontrol+0x280>)
 80003da:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80003de:	4b63      	ldr	r3, [pc, #396]	@ (800056c <eepromKontrol+0x338>)
 80003e0:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003e2:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <eepromKontrol+0x280>)
 80003e4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003e8:	4b61      	ldr	r3, [pc, #388]	@ (8000570 <eepromKontrol+0x33c>)
 80003ea:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003ec:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d902      	bls.n	80003fa <eepromKontrol+0x1c6>
	    calismaSekli=0;
 80003f4:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003fa:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d902      	bls.n	8000408 <eepromKontrol+0x1d4>
	    emniyetCercevesi=1;
 8000402:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d902      	bls.n	8000416 <eepromKontrol+0x1e2>
	    yavaslamaLimit=0;
 8000410:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d902      	bls.n	8000424 <eepromKontrol+0x1f0>
	    altLimit=1;
 800041e:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000424:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <eepromKontrol+0x29c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d902      	bls.n	8000432 <eepromKontrol+0x1fe>
	    basincSalteri=1;
 800042c:	4b28      	ldr	r3, [pc, #160]	@ (80004d0 <eepromKontrol+0x29c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000432:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d902      	bls.n	8000440 <eepromKontrol+0x20c>
	    kapiSecimleri=3;
 800043a:	4b26      	ldr	r3, [pc, #152]	@ (80004d4 <eepromKontrol+0x2a0>)
 800043c:	2203      	movs	r2, #3
 800043e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000440:	4b3f      	ldr	r3, [pc, #252]	@ (8000540 <eepromKontrol+0x30c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d902      	bls.n	800044e <eepromKontrol+0x21a>
	    kapiAcTipi=0;
 8000448:	4b3d      	ldr	r3, [pc, #244]	@ (8000540 <eepromKontrol+0x30c>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800044e:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d902      	bls.n	800045c <eepromKontrol+0x228>
	    kapi1Tip=1;
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800045c:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d902      	bls.n	800046a <eepromKontrol+0x236>
	    kapi1AcSure=5;
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d902      	bls.n	8000478 <eepromKontrol+0x244>
	    kapi2Tip=1;
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <eepromKontrol+0x2b0>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b05      	cmp	r3, #5
 800047e:	d902      	bls.n	8000486 <eepromKontrol+0x252>
	    kapi2AcSure=5;
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000482:	2205      	movs	r2, #5
 8000484:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000486:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d902      	bls.n	8000494 <eepromKontrol+0x260>
	    kapitablaTip=1;
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000494:	4b28      	ldr	r3, [pc, #160]	@ (8000538 <eepromKontrol+0x304>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d902      	bls.n	80004a2 <eepromKontrol+0x26e>
	    kapiTablaAcKonum=2;
 800049c:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <eepromKontrol+0x304>)
 800049e:	2202      	movs	r2, #2
 80004a0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b05      	cmp	r3, #5
 80004a8:	d964      	bls.n	8000574 <eepromKontrol+0x340>
	    kapiTablaAcSure=5;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <eepromKontrol+0x2b8>)
 80004ac:	2205      	movs	r2, #5
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	e060      	b.n	8000574 <eepromKontrol+0x340>
 80004b2:	bf00      	nop
 80004b4:	20000fec 	.word	0x20000fec
 80004b8:	20001938 	.word	0x20001938
 80004bc:	20001091 	.word	0x20001091
 80004c0:	200010b9 	.word	0x200010b9
 80004c4:	200010bc 	.word	0x200010bc
 80004c8:	200010bd 	.word	0x200010bd
 80004cc:	200010be 	.word	0x200010be
 80004d0:	200010bf 	.word	0x200010bf
 80004d4:	200010c0 	.word	0x200010c0
 80004d8:	200010c1 	.word	0x200010c1
 80004dc:	200010d1 	.word	0x200010d1
 80004e0:	200010c2 	.word	0x200010c2
 80004e4:	200010d2 	.word	0x200010d2
 80004e8:	200010c3 	.word	0x200010c3
 80004ec:	200010d3 	.word	0x200010d3
 80004f0:	200010c6 	.word	0x200010c6
 80004f4:	200010c7 	.word	0x200010c7
 80004f8:	200010c8 	.word	0x200010c8
 80004fc:	200010c9 	.word	0x200010c9
 8000500:	200010ca 	.word	0x200010ca
 8000504:	200010cb 	.word	0x200010cb
 8000508:	200010cc 	.word	0x200010cc
 800050c:	200010cd 	.word	0x200010cd
 8000510:	200010ce 	.word	0x200010ce
 8000514:	200010cf 	.word	0x200010cf
 8000518:	200010d0 	.word	0x200010d0
 800051c:	200010d4 	.word	0x200010d4
 8000520:	200010d6 	.word	0x200010d6
 8000524:	200010b4 	.word	0x200010b4
 8000528:	200010b5 	.word	0x200010b5
 800052c:	200010b6 	.word	0x200010b6
 8000530:	200010b7 	.word	0x200010b7
 8000534:	200010d9 	.word	0x200010d9
 8000538:	200010c5 	.word	0x200010c5
 800053c:	200010d8 	.word	0x200010d8
 8000540:	200010c4 	.word	0x200010c4
 8000544:	200010da 	.word	0x200010da
 8000548:	200010db 	.word	0x200010db
 800054c:	200010dc 	.word	0x200010dc
 8000550:	200010dd 	.word	0x200010dd
 8000554:	200010de 	.word	0x200010de
 8000558:	200010df 	.word	0x200010df
 800055c:	200010e0 	.word	0x200010e0
 8000560:	200010e1 	.word	0x200010e1
 8000564:	200010e2 	.word	0x200010e2
 8000568:	200010e3 	.word	0x200010e3
 800056c:	200010d7 	.word	0x200010d7
 8000570:	20001090 	.word	0x20001090
	}

	if(yukariYavasLimit>1) {
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <eepromKontrol+0x454>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d902      	bls.n	8000582 <eepromKontrol+0x34e>
	    yukariYavasLimit=0;
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <eepromKontrol+0x454>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000582:	4b42      	ldr	r3, [pc, #264]	@ (800068c <eepromKontrol+0x458>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d902      	bls.n	8000590 <eepromKontrol+0x35c>
	    devirmeYuruyusSecim=0;
 800058a:	4b40      	ldr	r3, [pc, #256]	@ (800068c <eepromKontrol+0x458>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000590:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <eepromKontrol+0x45c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d902      	bls.n	800059e <eepromKontrol+0x36a>
	    devirmeYukariIleriLimit=1;
 8000598:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <eepromKontrol+0x45c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800059e:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <eepromKontrol+0x460>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d902      	bls.n	80005ac <eepromKontrol+0x378>
	    devirmeAsagiGeriLimit=1;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000694 <eepromKontrol+0x460>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80005ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000698 <eepromKontrol+0x464>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d902      	bls.n	80005ba <eepromKontrol+0x386>
	    devirmeSilindirTipi=0;
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <eepromKontrol+0x464>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005ba:	4b38      	ldr	r3, [pc, #224]	@ (800069c <eepromKontrol+0x468>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d902      	bls.n	80005c8 <eepromKontrol+0x394>
	    platformSilindirTipi=0;
 80005c2:	4b36      	ldr	r3, [pc, #216]	@ (800069c <eepromKontrol+0x468>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <eepromKontrol+0x46c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d902      	bls.n	80005d6 <eepromKontrol+0x3a2>
	    yukariValfTmr=0;
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <eepromKontrol+0x46c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <eepromKontrol+0x470>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d902      	bls.n	80005e4 <eepromKontrol+0x3b0>
	    asagiValfTmr=0;
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <eepromKontrol+0x470>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <eepromKontrol+0x474>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d902      	bls.n	80005f2 <eepromKontrol+0x3be>
	    devirmeYukariIleriTmr=0;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <eepromKontrol+0x474>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <eepromKontrol+0x478>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d902      	bls.n	8000600 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriTmr=0;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <eepromKontrol+0x478>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <eepromKontrol+0x47c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2bb4      	cmp	r3, #180	@ 0xb4
 8000606:	d902      	bls.n	800060e <eepromKontrol+0x3da>
	    makineCalismaTmr=60;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <eepromKontrol+0x47c>)
 800060a:	223c      	movs	r2, #60	@ 0x3c
 800060c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <eepromKontrol+0x480>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d902      	bls.n	800061c <eepromKontrol+0x3e8>
	    buzzer=0;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <eepromKontrol+0x480>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <eepromKontrol+0x484>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d902      	bls.n	800062a <eepromKontrol+0x3f6>
	    demoMode=0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <eepromKontrol+0x484>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <eepromKontrol+0x488>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d902      	bls.n	8000638 <eepromKontrol+0x404>
	    calismaSayModu=0;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <eepromKontrol+0x488>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <eepromKontrol+0x48c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d902      	bls.n	8000646 <eepromKontrol+0x412>
	    dilSecim=0;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <eepromKontrol+0x48c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <eepromKontrol+0x490>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d902      	bls.n	8000654 <eepromKontrol+0x420>
		iotMode=0;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <eepromKontrol+0x490>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f837 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f00a f974 	bl	800a948 <HAL_Delay>

	convertArrays(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 f831 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f00a f96e 	bl	800a948 <HAL_Delay>

	convertArrays(3);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f82b 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	@ 0xfa
 8000674:	f00a f968 	bl	800a948 <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <eepromKontrol+0x48c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f006 ff13 	bl	80074a8 <loadMenuTexts>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200010c6 	.word	0x200010c6
 800068c:	200010c7 	.word	0x200010c7
 8000690:	200010c8 	.word	0x200010c8
 8000694:	200010c9 	.word	0x200010c9
 8000698:	200010ca 	.word	0x200010ca
 800069c:	200010cb 	.word	0x200010cb
 80006a0:	200010cc 	.word	0x200010cc
 80006a4:	200010cd 	.word	0x200010cd
 80006a8:	200010ce 	.word	0x200010ce
 80006ac:	200010cf 	.word	0x200010cf
 80006b0:	200010d0 	.word	0x200010d0
 80006b4:	200010d4 	.word	0x200010d4
 80006b8:	200010d6 	.word	0x200010d6
 80006bc:	200010d8 	.word	0x200010d8
 80006c0:	200010d9 	.word	0x200010d9
 80006c4:	200010d7 	.word	0x200010d7

080006c8 <convertArrays>:
		HAL_Delay(500);
		lcd_clear();
	}
}

void convertArrays(int state) {
 80006c8:	b480      	push	{r7}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d11d      	bne.n	8000712 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80006d6:	4b34      	ldr	r3, [pc, #208]	@ (80007a8 <convertArrays+0xe0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e013      	b.n	800070a <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80006e2:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <convertArrays+0xe4>)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <convertArrays+0xe8>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	4a2f      	ldr	r2, [pc, #188]	@ (80007b4 <convertArrays+0xec>)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	3301      	adds	r3, #1
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	3301      	adds	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
 800070a:	6a3b      	ldr	r3, [r7, #32]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dde8      	ble.n	80006e2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000710:	e045      	b.n	800079e <convertArrays+0xd6>
	} else if(state == 2) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d121      	bne.n	800075c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <convertArrays+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e017      	b.n	8000754 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <convertArrays+0xe4>)
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00e      	beq.n	800074e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000730:	4a1e      	ldr	r2, [pc, #120]	@ (80007ac <convertArrays+0xe4>)
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <convertArrays+0xf4>)
 800073c:	5c99      	ldrb	r1, [r3, r2]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <convertArrays+0xf8>)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3301      	adds	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	3301      	adds	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	dde4      	ble.n	8000724 <convertArrays+0x5c>
}
 800075a:	e020      	b.n	800079e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <convertArrays+0xfc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	e017      	b.n	8000798 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000768:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <convertArrays+0xe4>)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00e      	beq.n	8000792 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <convertArrays+0xe4>)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <convertArrays+0xf4>)
 8000780:	5c99      	ldrb	r1, [r3, r2]
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <convertArrays+0x100>)
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	dde4      	ble.n	8000768 <convertArrays+0xa0>
}
 800079e:	bf00      	nop
 80007a0:	372c      	adds	r7, #44	@ 0x2c
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000fec 	.word	0x20000fec
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	20001064 	.word	0x20001064
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000018 	.word	0x20000018
 80007c0:	20001070 	.word	0x20001070
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20001080 	.word	0x20001080

080007cc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b09f      	sub	sp, #124	@ 0x7c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80007d8:	4948      	ldr	r1, [pc, #288]	@ (80008fc <ESP8266_Init+0x130>)
 80007da:	4849      	ldr	r0, [pc, #292]	@ (8000900 <ESP8266_Init+0x134>)
 80007dc:	f00d ffaa 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80007e0:	4847      	ldr	r0, [pc, #284]	@ (8000900 <ESP8266_Init+0x134>)
 80007e2:	f7ff fd1f 	bl	8000224 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4944      	ldr	r1, [pc, #272]	@ (8000900 <ESP8266_Init+0x134>)
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f00d f976 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f8:	f00a f8a6 	bl	800a948 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80007fc:	4941      	ldr	r1, [pc, #260]	@ (8000904 <ESP8266_Init+0x138>)
 80007fe:	4840      	ldr	r0, [pc, #256]	@ (8000900 <ESP8266_Init+0x134>)
 8000800:	f00d ff98 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000804:	483e      	ldr	r0, [pc, #248]	@ (8000900 <ESP8266_Init+0x134>)
 8000806:	f7ff fd0d 	bl	8000224 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29b      	uxth	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	493b      	ldr	r1, [pc, #236]	@ (8000900 <ESP8266_Init+0x134>)
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f00d f964 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f00a f894 	bl	800a948 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000820:	4939      	ldr	r1, [pc, #228]	@ (8000908 <ESP8266_Init+0x13c>)
 8000822:	4837      	ldr	r0, [pc, #220]	@ (8000900 <ESP8266_Init+0x134>)
 8000824:	f00d ff86 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000828:	4835      	ldr	r0, [pc, #212]	@ (8000900 <ESP8266_Init+0x134>)
 800082a:	f7ff fcfb 	bl	8000224 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4932      	ldr	r1, [pc, #200]	@ (8000900 <ESP8266_Init+0x134>)
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f00d f952 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800083c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000840:	f00a f882 	bl	800a948 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000844:	4931      	ldr	r1, [pc, #196]	@ (800090c <ESP8266_Init+0x140>)
 8000846:	482e      	ldr	r0, [pc, #184]	@ (8000900 <ESP8266_Init+0x134>)
 8000848:	f00d ff74 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800084c:	482c      	ldr	r0, [pc, #176]	@ (8000900 <ESP8266_Init+0x134>)
 800084e:	f7ff fce9 	bl	8000224 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	4929      	ldr	r1, [pc, #164]	@ (8000900 <ESP8266_Init+0x134>)
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f00d f940 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000860:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000864:	f00a f870 	bl	800a948 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <ESP8266_Init+0x144>)
 800086e:	461c      	mov	r4, r3
 8000870:	4613      	mov	r3, r2
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	c407      	stmia	r4!, {r0, r1, r2}
 8000876:	8023      	strh	r3, [r4, #0]
 8000878:	3402      	adds	r4, #2
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	4618      	mov	r0, r3
 8000886:	f00d ff7d 	bl	800e784 <strcat>
	strcat(str, "\",\"");
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fcc8 	bl	8000224 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4413      	add	r3, r2
 800089e:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <ESP8266_Init+0x148>)
 80008a0:	6810      	ldr	r0, [r2, #0]
 80008a2:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00d ff6a 	bl	800e784 <strcat>
	strcat(str, "\"\r\n");
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcb5 	bl	8000224 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4413      	add	r3, r2
 80008c4:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <ESP8266_Init+0x14c>)
 80008c6:	6810      	ldr	r0, [r2, #0]
 80008c8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	461a      	mov	r2, r3
 80008d0:	4912      	ldr	r1, [pc, #72]	@ (800091c <ESP8266_Init+0x150>)
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <ESP8266_Init+0x134>)
 80008d4:	f00d ff2e 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <ESP8266_Init+0x134>)
 80008da:	f7ff fca3 	bl	8000224 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	4906      	ldr	r1, [pc, #24]	@ (8000900 <ESP8266_Init+0x134>)
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f00d f8fa 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008f0:	f00a f82a 	bl	800a948 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	377c      	adds	r7, #124	@ 0x7c
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	0800efa4 	.word	0x0800efa4
 8000900:	20001120 	.word	0x20001120
 8000904:	0800efb4 	.word	0x0800efb4
 8000908:	0800efc0 	.word	0x0800efc0
 800090c:	0800efc8 	.word	0x0800efc8
 8000910:	0800efd8 	.word	0x0800efd8
 8000914:	0800efe8 	.word	0x0800efe8
 8000918:	0800efec 	.word	0x0800efec
 800091c:	0800eff0 	.word	0x0800eff0

08000920 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8000926:	af04      	add	r7, sp, #16
 8000928:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 800092c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000930:	6020      	str	r0, [r4, #0]
 8000932:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8000936:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800093a:	6001      	str	r1, [r0, #0]
 800093c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000940:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000944:	600a      	str	r2, [r1, #0]
 8000946:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800094a:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 800094e:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000950:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000954:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000958:	f107 0014 	add.w	r0, r7, #20
 800095c:	220c      	movs	r2, #12
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	f00d ff1f 	bl	800e7a2 <strncpy>
	subMachineID[12] = '\0';
 8000964:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000968:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800096c:	2200      	movs	r2, #0
 800096e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000970:	4a35      	ldr	r2, [pc, #212]	@ (8000a48 <sendMachineData+0x128>)
 8000972:	4936      	ldr	r1, [pc, #216]	@ (8000a4c <sendMachineData+0x12c>)
 8000974:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <sendMachineData+0x130>)
 8000976:	f00d fedd 	bl	800e734 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800097a:	4835      	ldr	r0, [pc, #212]	@ (8000a50 <sendMachineData+0x130>)
 800097c:	f7ff fc52 	bl	8000224 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	b29a      	uxth	r2, r3
 8000984:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000988:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800098c:	4930      	ldr	r1, [pc, #192]	@ (8000a50 <sendMachineData+0x130>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f00d f8a6 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000994:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000998:	f009 ffd6 	bl	800a948 <HAL_Delay>

	sprintf(local_txA,
 800099c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80009a4:	f107 0114 	add.w	r1, r7, #20
 80009a8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80009ac:	4a29      	ldr	r2, [pc, #164]	@ (8000a54 <sendMachineData+0x134>)
 80009ae:	9202      	str	r2, [sp, #8]
 80009b0:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80009ba:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	460a      	mov	r2, r1
 80009c6:	4924      	ldr	r1, [pc, #144]	@ (8000a58 <sendMachineData+0x138>)
 80009c8:	f00d feb4 	bl	800e734 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80009e4:	491d      	ldr	r1, [pc, #116]	@ (8000a5c <sendMachineData+0x13c>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00d fea4 	bl	800e734 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc17 	bl	8000224 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80009fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a02:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00d f86a 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a10:	f009 ff9a 	bl	800a948 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a2a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	f00d f856 	bl	800dae0 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a34:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a38:	f009 ff86 	bl	800a948 <HAL_Delay>
}
 8000a3c:	bf00      	nop
 8000a3e:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800f0e0 	.word	0x0800f0e0
 8000a4c:	0800f0f0 	.word	0x0800f0f0
 8000a50:	20001120 	.word	0x20001120
 8000a54:	0800f184 	.word	0x0800f184
 8000a58:	0800f110 	.word	0x0800f110
 8000a5c:	0800f198 	.word	0x0800f198

08000a60 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	@ 0x24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a6a:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a24      	ldr	r2, [pc, #144]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a7e:	f000 f8d1 	bl	8000c24 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a82:	e000      	b.n	8000a86 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a84:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e012      	b.n	8000ab2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d107      	bne.n	8000aac <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4918      	ldr	r1, [pc, #96]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	54ca      	strb	r2, [r1, r3]
					break;
 8000aaa:	e007      	b.n	8000abc <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbe7      	blt.n	8000a8c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	b298      	uxth	r0, r3
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	b292      	uxth	r2, r2
 8000ad6:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000ada:	9402      	str	r4, [sp, #8]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	460a      	mov	r2, r1
 8000ae4:	21a0      	movs	r1, #160	@ 0xa0
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <hata2EEPROM+0xac>)
 8000ae8:	f00a ffb8 	bl	800ba5c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000aec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af0:	f009 ff2a 	bl	800a948 <HAL_Delay>
	eepromKontrol();
 8000af4:	f7ff fb9e 	bl	8000234 <eepromKontrol>
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	20000094 	.word	0x20000094
 8000b04:	20000098 	.word	0x20000098
 8000b08:	20000fec 	.word	0x20000fec
 8000b0c:	20001938 	.word	0x20001938

08000b10 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10f      	bne.n	8000b40 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000b20:	4a38      	ldr	r2, [pc, #224]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	2001      	movs	r0, #1
 8000b26:	f009 f9b5 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, "1");
 8000b2a:	4a37      	ldr	r2, [pc, #220]	@ (8000c08 <hataKoduLcdGoster+0xf8>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f009 f9b0 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b34:	4a35      	ldr	r2, [pc, #212]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b36:	2107      	movs	r1, #7
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f009 f9ab 	bl	8009e94 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b3e:	e05d      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d10f      	bne.n	8000b66 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000b46:	4a2f      	ldr	r2, [pc, #188]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f009 f9a2 	bl	8009e94 <lcd_print>
		lcd_print(2, 2, "2");
 8000b50:	4a2f      	ldr	r2, [pc, #188]	@ (8000c10 <hataKoduLcdGoster+0x100>)
 8000b52:	2102      	movs	r1, #2
 8000b54:	2002      	movs	r0, #2
 8000b56:	f009 f99d 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f009 f998 	bl	8009e94 <lcd_print>
}
 8000b64:	e04a      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d10f      	bne.n	8000b8c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000b6c:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2001      	movs	r0, #1
 8000b72:	f009 f98f 	bl	8009e94 <lcd_print>
		lcd_print(2, 3, "3");
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <hataKoduLcdGoster+0x104>)
 8000b78:	2103      	movs	r1, #3
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f009 f98a 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b82:	2107      	movs	r1, #7
 8000b84:	2002      	movs	r0, #2
 8000b86:	f009 f985 	bl	8009e94 <lcd_print>
}
 8000b8a:	e037      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d10f      	bne.n	8000bb2 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000b92:	4a1c      	ldr	r2, [pc, #112]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2001      	movs	r0, #1
 8000b98:	f009 f97c 	bl	8009e94 <lcd_print>
		lcd_print(2, 4, "4");
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <hataKoduLcdGoster+0x108>)
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f009 f977 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba6:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000ba8:	2107      	movs	r1, #7
 8000baa:	2002      	movs	r0, #2
 8000bac:	f009 f972 	bl	8009e94 <lcd_print>
}
 8000bb0:	e024      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d10f      	bne.n	8000bd8 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f009 f969 	bl	8009e94 <lcd_print>
		lcd_print(2, 5, "5");
 8000bc2:	4a16      	ldr	r2, [pc, #88]	@ (8000c1c <hataKoduLcdGoster+0x10c>)
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f009 f964 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000bce:	2107      	movs	r1, #7
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f009 f95f 	bl	8009e94 <lcd_print>
}
 8000bd6:	e011      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d10e      	bne.n	8000bfc <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f009 f956 	bl	8009e94 <lcd_print>
		lcd_print(2, 6, "6");
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <hataKoduLcdGoster+0x110>)
 8000bea:	2106      	movs	r1, #6
 8000bec:	2002      	movs	r0, #2
 8000bee:	f009 f951 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf2:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f009 f94c 	bl	8009e94 <lcd_print>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200018ac 	.word	0x200018ac
 8000c08:	0800f20c 	.word	0x0800f20c
 8000c0c:	0800f210 	.word	0x0800f210
 8000c10:	0800f21c 	.word	0x0800f21c
 8000c14:	0800f220 	.word	0x0800f220
 8000c18:	0800f224 	.word	0x0800f224
 8000c1c:	0800f228 	.word	0x0800f228
 8000c20:	0800f22c 	.word	0x0800f22c

08000c24 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	e009      	b.n	8000c44 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <eepromDataFillWithEmpty+0x38>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <eepromDataFillWithEmpty+0x3c>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <eepromDataFillWithEmpty+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbf0      	blt.n	8000c30 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000006c 	.word	0x2000006c
 8000c60:	20000fec 	.word	0x20000fec
 8000c64:	20000094 	.word	0x20000094

08000c68 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c7a:	4b50      	ldr	r3, [pc, #320]	@ (8000dbc <i2cTest+0x154>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b4e      	ldr	r3, [pc, #312]	@ (8000dbc <i2cTest+0x154>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0201 	bic.w	r2, r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c8a:	484c      	ldr	r0, [pc, #304]	@ (8000dbc <i2cTest+0x154>)
 8000c8c:	f00a fdb8 	bl	800b800 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c90:	23c0      	movs	r3, #192	@ 0xc0
 8000c92:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4846      	ldr	r0, [pc, #280]	@ (8000dc0 <i2cTest+0x158>)
 8000ca6:	f00a f9bf 	bl	800b028 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	4844      	ldr	r0, [pc, #272]	@ (8000dc0 <i2cTest+0x158>)
 8000cb0:	f00a fc31 	bl	800b516 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	4841      	ldr	r0, [pc, #260]	@ (8000dc0 <i2cTest+0x158>)
 8000cba:	f00a fc2c 	bl	800b516 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f009 fe42 	bl	800a948 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cc4:	bf00      	nop
 8000cc6:	2140      	movs	r1, #64	@ 0x40
 8000cc8:	483d      	ldr	r0, [pc, #244]	@ (8000dc0 <i2cTest+0x158>)
 8000cca:	f00a fc0d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d006      	beq.n	8000ce2 <i2cTest+0x7a>
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	483a      	ldr	r0, [pc, #232]	@ (8000dc0 <i2cTest+0x158>)
 8000cd8:	f00a fc06 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d1f1      	bne.n	8000cc6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	4836      	ldr	r0, [pc, #216]	@ (8000dc0 <i2cTest+0x158>)
 8000ce8:	f00a fc15 	bl	800b516 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f009 fe2b 	bl	800a948 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cf2:	bf00      	nop
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	4832      	ldr	r0, [pc, #200]	@ (8000dc0 <i2cTest+0x158>)
 8000cf8:	f00a fbf6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d0f8      	beq.n	8000cf4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	482e      	ldr	r0, [pc, #184]	@ (8000dc0 <i2cTest+0x158>)
 8000d08:	f00a fc05 	bl	800b516 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f009 fe1b 	bl	800a948 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d12:	bf00      	nop
 8000d14:	2140      	movs	r1, #64	@ 0x40
 8000d16:	482a      	ldr	r0, [pc, #168]	@ (8000dc0 <i2cTest+0x158>)
 8000d18:	f00a fbe6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d0f8      	beq.n	8000d14 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	4826      	ldr	r0, [pc, #152]	@ (8000dc0 <i2cTest+0x158>)
 8000d28:	f00a fbf5 	bl	800b516 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f009 fe0b 	bl	800a948 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d32:	bf00      	nop
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	4822      	ldr	r0, [pc, #136]	@ (8000dc0 <i2cTest+0x158>)
 8000d38:	f00a fbd6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d1f8      	bne.n	8000d34 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <i2cTest+0x158>)
 8000d48:	f00a fbe5 	bl	800b516 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f009 fdfb 	bl	800a948 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d52:	bf00      	nop
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	481a      	ldr	r0, [pc, #104]	@ (8000dc0 <i2cTest+0x158>)
 8000d58:	f00a fbc6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1f8      	bne.n	8000d54 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d62:	23c0      	movs	r3, #192	@ 0xc0
 8000d64:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4812      	ldr	r0, [pc, #72]	@ (8000dc0 <i2cTest+0x158>)
 8000d78:	f00a f956 	bl	800b028 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <i2cTest+0x154>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <i2cTest+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d8a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <i2cTest+0x154>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <i2cTest+0x154>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d9a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <i2cTest+0x154>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <i2cTest+0x154>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <i2cTest+0x154>)
 8000dae:	f00a fbe3 	bl	800b578 <HAL_I2C_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20001938 	.word	0x20001938
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dce:	20c8      	movs	r0, #200	@ 0xc8
 8000dd0:	f009 fdba 	bl	800a948 <HAL_Delay>
	lcd_clear();
 8000dd4:	f009 f88a 	bl	8009eec <lcd_clear>
	if(type == 1 && page == 0) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d13e      	bne.n	8000e5c <printTemplate+0x98>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13b      	bne.n	8000e5c <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000de4:	4a9a      	ldr	r2, [pc, #616]	@ (8001050 <printTemplate+0x28c>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2001      	movs	r0, #1
 8000dea:	f009 f853 	bl	8009e94 <lcd_print>
		lcd_print(2, 3, "0");
 8000dee:	4a99      	ldr	r2, [pc, #612]	@ (8001054 <printTemplate+0x290>)
 8000df0:	2103      	movs	r1, #3
 8000df2:	2002      	movs	r0, #2
 8000df4:	f009 f84e 	bl	8009e94 <lcd_print>
		lcd_print(2, 4, "1");
 8000df8:	4a97      	ldr	r2, [pc, #604]	@ (8001058 <printTemplate+0x294>)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f009 f849 	bl	8009e94 <lcd_print>
		lcd_print(2, 5, "2");
 8000e02:	4a96      	ldr	r2, [pc, #600]	@ (800105c <printTemplate+0x298>)
 8000e04:	2105      	movs	r1, #5
 8000e06:	2002      	movs	r0, #2
 8000e08:	f009 f844 	bl	8009e94 <lcd_print>
		lcd_print(2, 6, "3");
 8000e0c:	4a94      	ldr	r2, [pc, #592]	@ (8001060 <printTemplate+0x29c>)
 8000e0e:	2106      	movs	r1, #6
 8000e10:	2002      	movs	r0, #2
 8000e12:	f009 f83f 	bl	8009e94 <lcd_print>
		lcd_print(2, 7, "4");
 8000e16:	4a93      	ldr	r2, [pc, #588]	@ (8001064 <printTemplate+0x2a0>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f009 f83a 	bl	8009e94 <lcd_print>
		lcd_print(2, 10, "5");
 8000e20:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <printTemplate+0x2a4>)
 8000e22:	210a      	movs	r1, #10
 8000e24:	2002      	movs	r0, #2
 8000e26:	f009 f835 	bl	8009e94 <lcd_print>
		lcd_print(2, 11, "6");
 8000e2a:	4a90      	ldr	r2, [pc, #576]	@ (800106c <printTemplate+0x2a8>)
 8000e2c:	210b      	movs	r1, #11
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f009 f830 	bl	8009e94 <lcd_print>
		lcd_print(2, 12, "7");
 8000e34:	4a8e      	ldr	r2, [pc, #568]	@ (8001070 <printTemplate+0x2ac>)
 8000e36:	210c      	movs	r1, #12
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f009 f82b 	bl	8009e94 <lcd_print>
		lcd_print(2, 13, "8");
 8000e3e:	4a8d      	ldr	r2, [pc, #564]	@ (8001074 <printTemplate+0x2b0>)
 8000e40:	210d      	movs	r1, #13
 8000e42:	2002      	movs	r0, #2
 8000e44:	f009 f826 	bl	8009e94 <lcd_print>
		lcd_print(2, 14, "9");
 8000e48:	4a8b      	ldr	r2, [pc, #556]	@ (8001078 <printTemplate+0x2b4>)
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f009 f821 	bl	8009e94 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e52:	2103      	movs	r1, #3
 8000e54:	2002      	movs	r0, #2
 8000e56:	f008 fffe 	bl	8009e56 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000e5a:	e0f5      	b.n	8001048 <printTemplate+0x284>
	} else if(type == 2) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d178      	bne.n	8000f54 <printTemplate+0x190>
		if(page == 1) {
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d114      	bne.n	8000e92 <printTemplate+0xce>
			lcd_clear();
 8000e68:	f009 f840 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f009 fd6b 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e72:	4a82      	ldr	r2, [pc, #520]	@ (800107c <printTemplate+0x2b8>)
 8000e74:	2101      	movs	r1, #1
 8000e76:	2001      	movs	r0, #1
 8000e78:	f009 f80c 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e7c:	4a80      	ldr	r2, [pc, #512]	@ (8001080 <printTemplate+0x2bc>)
 8000e7e:	2107      	movs	r1, #7
 8000e80:	2001      	movs	r0, #1
 8000e82:	f009 f807 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e86:	4a7f      	ldr	r2, [pc, #508]	@ (8001084 <printTemplate+0x2c0>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f009 f802 	bl	8009e94 <lcd_print>
}
 8000e90:	e0da      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 2) {
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d114      	bne.n	8000ec2 <printTemplate+0xfe>
			lcd_clear();
 8000e98:	f009 f828 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000e9c:	2064      	movs	r0, #100	@ 0x64
 8000e9e:	f009 fd53 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ea2:	4a79      	ldr	r2, [pc, #484]	@ (8001088 <printTemplate+0x2c4>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f008 fff4 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eac:	4a74      	ldr	r2, [pc, #464]	@ (8001080 <printTemplate+0x2bc>)
 8000eae:	2107      	movs	r1, #7
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f008 ffef 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000eb6:	4a75      	ldr	r2, [pc, #468]	@ (800108c <printTemplate+0x2c8>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f008 ffea 	bl	8009e94 <lcd_print>
}
 8000ec0:	e0c2      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 3) {
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d114      	bne.n	8000ef2 <printTemplate+0x12e>
			lcd_clear();
 8000ec8:	f009 f810 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000ecc:	2064      	movs	r0, #100	@ 0x64
 8000ece:	f009 fd3b 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <printTemplate+0x2b8>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f008 ffdc 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000edc:	4a68      	ldr	r2, [pc, #416]	@ (8001080 <printTemplate+0x2bc>)
 8000ede:	2107      	movs	r1, #7
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f008 ffd7 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8001090 <printTemplate+0x2cc>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2002      	movs	r0, #2
 8000eec:	f008 ffd2 	bl	8009e94 <lcd_print>
}
 8000ef0:	e0aa      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 4) {
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d114      	bne.n	8000f22 <printTemplate+0x15e>
			lcd_clear();
 8000ef8:	f008 fff8 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f009 fd23 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f02:	4a5e      	ldr	r2, [pc, #376]	@ (800107c <printTemplate+0x2b8>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f008 ffc4 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001080 <printTemplate+0x2bc>)
 8000f0e:	2107      	movs	r1, #7
 8000f10:	2001      	movs	r0, #1
 8000f12:	f008 ffbf 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f16:	4a5f      	ldr	r2, [pc, #380]	@ (8001094 <printTemplate+0x2d0>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f008 ffba 	bl	8009e94 <lcd_print>
}
 8000f20:	e092      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 5) {
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	f040 808f 	bne.w	8001048 <printTemplate+0x284>
			lcd_clear();
 8000f2a:	f008 ffdf 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	@ 0x64
 8000f30:	f009 fd0a 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f34:	4a51      	ldr	r2, [pc, #324]	@ (800107c <printTemplate+0x2b8>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f008 ffab 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f3e:	4a50      	ldr	r2, [pc, #320]	@ (8001080 <printTemplate+0x2bc>)
 8000f40:	2107      	movs	r1, #7
 8000f42:	2001      	movs	r0, #1
 8000f44:	f008 ffa6 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f48:	4a53      	ldr	r2, [pc, #332]	@ (8001098 <printTemplate+0x2d4>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f008 ffa1 	bl	8009e94 <lcd_print>
}
 8000f52:	e079      	b.n	8001048 <printTemplate+0x284>
	} else if(type == 3) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d176      	bne.n	8001048 <printTemplate+0x284>
		if(page == 1) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d114      	bne.n	8000f8a <printTemplate+0x1c6>
			lcd_clear();
 8000f60:	f008 ffc4 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	@ 0x64
 8000f66:	f009 fcef 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <printTemplate+0x2d8>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f008 ff90 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f74:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <printTemplate+0x2dc>)
 8000f76:	2107      	movs	r1, #7
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f008 ff8b 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f7e:	4a41      	ldr	r2, [pc, #260]	@ (8001084 <printTemplate+0x2c0>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	2002      	movs	r0, #2
 8000f84:	f008 ff86 	bl	8009e94 <lcd_print>
}
 8000f88:	e05e      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 2) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d114      	bne.n	8000fba <printTemplate+0x1f6>
			lcd_clear();
 8000f90:	f008 ffac 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f009 fcd7 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f9a:	4a40      	ldr	r2, [pc, #256]	@ (800109c <printTemplate+0x2d8>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f008 ff78 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80010a0 <printTemplate+0x2dc>)
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f008 ff73 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fae:	4a37      	ldr	r2, [pc, #220]	@ (800108c <printTemplate+0x2c8>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f008 ff6e 	bl	8009e94 <lcd_print>
}
 8000fb8:	e046      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 3) {
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d114      	bne.n	8000fea <printTemplate+0x226>
			lcd_clear();
 8000fc0:	f008 ff94 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000fc4:	2064      	movs	r0, #100	@ 0x64
 8000fc6:	f009 fcbf 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <printTemplate+0x2d8>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f008 ff60 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fd4:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <printTemplate+0x2dc>)
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f008 ff5b 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <printTemplate+0x2cc>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f008 ff56 	bl	8009e94 <lcd_print>
}
 8000fe8:	e02e      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 4) {
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d114      	bne.n	800101a <printTemplate+0x256>
			lcd_clear();
 8000ff0:	f008 ff7c 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	@ 0x64
 8000ff6:	f009 fca7 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ffa:	4a28      	ldr	r2, [pc, #160]	@ (800109c <printTemplate+0x2d8>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f008 ff48 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <printTemplate+0x2dc>)
 8001006:	2107      	movs	r1, #7
 8001008:	2001      	movs	r0, #1
 800100a:	f008 ff43 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800100e:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <printTemplate+0x2d0>)
 8001010:	2101      	movs	r1, #1
 8001012:	2002      	movs	r0, #2
 8001014:	f008 ff3e 	bl	8009e94 <lcd_print>
}
 8001018:	e016      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 5) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d113      	bne.n	8001048 <printTemplate+0x284>
			lcd_clear();
 8001020:	f008 ff64 	bl	8009eec <lcd_clear>
			HAL_Delay(100);
 8001024:	2064      	movs	r0, #100	@ 0x64
 8001026:	f009 fc8f 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <printTemplate+0x2d8>)
 800102c:	2101      	movs	r1, #1
 800102e:	2001      	movs	r0, #1
 8001030:	f008 ff30 	bl	8009e94 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001034:	4a1a      	ldr	r2, [pc, #104]	@ (80010a0 <printTemplate+0x2dc>)
 8001036:	2107      	movs	r1, #7
 8001038:	2001      	movs	r0, #1
 800103a:	f008 ff2b 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800103e:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <printTemplate+0x2d4>)
 8001040:	2101      	movs	r1, #1
 8001042:	2002      	movs	r0, #2
 8001044:	f008 ff26 	bl	8009e94 <lcd_print>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800f230 	.word	0x0800f230
 8001054:	0800f238 	.word	0x0800f238
 8001058:	0800f23c 	.word	0x0800f23c
 800105c:	0800f240 	.word	0x0800f240
 8001060:	0800f244 	.word	0x0800f244
 8001064:	0800f248 	.word	0x0800f248
 8001068:	0800f24c 	.word	0x0800f24c
 800106c:	0800f250 	.word	0x0800f250
 8001070:	0800f254 	.word	0x0800f254
 8001074:	0800f258 	.word	0x0800f258
 8001078:	0800f25c 	.word	0x0800f25c
 800107c:	0800f260 	.word	0x0800f260
 8001080:	20001070 	.word	0x20001070
 8001084:	0800f274 	.word	0x0800f274
 8001088:	0800f288 	.word	0x0800f288
 800108c:	0800f290 	.word	0x0800f290
 8001090:	0800f2a4 	.word	0x0800f2a4
 8001094:	0800f2b8 	.word	0x0800f2b8
 8001098:	0800f2cc 	.word	0x0800f2cc
 800109c:	0800f2e0 	.word	0x0800f2e0
 80010a0:	20001080 	.word	0x20001080

080010a4 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10a      	bne.n	80010c8 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <printCredentials+0x70>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	2002      	movs	r0, #2
 80010b8:	f008 feec 	bl	8009e94 <lcd_print>
		lcd_print(2, 13, "    ");
 80010bc:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <printCredentials+0x74>)
 80010be:	210d      	movs	r1, #13
 80010c0:	2002      	movs	r0, #2
 80010c2:	f008 fee7 	bl	8009e94 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80010c6:	e021      	b.n	800110c <printCredentials+0x68>
	} else if(type == 2) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d10f      	bne.n	80010ee <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <printCredentials+0x78>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	2001      	movs	r0, #1
 80010d4:	f008 fede 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, "                ");
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <printCredentials+0x7c>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f008 fed9 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <printCredentials+0x80>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2002      	movs	r0, #2
 80010e8:	f008 fed4 	bl	8009e94 <lcd_print>
}
 80010ec:	e00e      	b.n	800110c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <printCredentials+0x84>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	2001      	movs	r0, #1
 80010f4:	f008 fece 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, "                ");
 80010f8:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <printCredentials+0x7c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2002      	movs	r0, #2
 80010fe:	f008 fec9 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <printCredentials+0x88>)
 8001104:	2101      	movs	r1, #1
 8001106:	2002      	movs	r0, #2
 8001108:	f008 fec4 	bl	8009e94 <lcd_print>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20001064 	.word	0x20001064
 8001118:	0800f2f4 	.word	0x0800f2f4
 800111c:	0800f2fc 	.word	0x0800f2fc
 8001120:	0800f310 	.word	0x0800f310
 8001124:	20001070 	.word	0x20001070
 8001128:	0800f324 	.word	0x0800f324
 800112c:	20001080 	.word	0x20001080

08001130 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001134:	f3bf 8f4f 	dsb	sy
}
 8001138:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <__NVIC_SystemReset+0x24>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001142:	4904      	ldr	r1, [pc, #16]	@ (8001154 <__NVIC_SystemReset+0x24>)
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__NVIC_SystemReset+0x28>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800114a:	f3bf 8f4f 	dsb	sy
}
 800114e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <__NVIC_SystemReset+0x20>
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	05fa0004 	.word	0x05fa0004

0800115c <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001162:	2101      	movs	r1, #1
 8001164:	488e      	ldr	r0, [pc, #568]	@ (80013a0 <menu+0x244>)
 8001166:	f00a f9bf 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	f040 8099 	bne.w	80012a4 <menu+0x148>
 8001172:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <menu+0x248>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8091 	beq.w	80012a4 <menu+0x148>
		menuSayac = menuSayac+1;
 8001182:	4b89      	ldr	r3, [pc, #548]	@ (80013a8 <menu+0x24c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b87      	ldr	r3, [pc, #540]	@ (80013a8 <menu+0x24c>)
 800118c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800118e:	4b86      	ldr	r3, [pc, #536]	@ (80013a8 <menu+0x24c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b24      	cmp	r3, #36	@ 0x24
 8001194:	d102      	bne.n	800119c <menu+0x40>
			menuSayac = 1;
 8001196:	4b84      	ldr	r3, [pc, #528]	@ (80013a8 <menu+0x24c>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800119c:	4b82      	ldr	r3, [pc, #520]	@ (80013a8 <menu+0x24c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b12      	cmp	r3, #18
 80011a2:	d106      	bne.n	80011b2 <menu+0x56>
 80011a4:	4b81      	ldr	r3, [pc, #516]	@ (80013ac <menu+0x250>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <menu+0x56>
			menuSayac = 21;
 80011ac:	4b7e      	ldr	r3, [pc, #504]	@ (80013a8 <menu+0x24c>)
 80011ae:	2215      	movs	r2, #21
 80011b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011b2:	4b7d      	ldr	r3, [pc, #500]	@ (80013a8 <menu+0x24c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d106      	bne.n	80011c8 <menu+0x6c>
 80011ba:	4b7d      	ldr	r3, [pc, #500]	@ (80013b0 <menu+0x254>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <menu+0x6c>
			menuSayac = 16;
 80011c2:	4b79      	ldr	r3, [pc, #484]	@ (80013a8 <menu+0x24c>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80011c8:	4b77      	ldr	r3, [pc, #476]	@ (80013a8 <menu+0x24c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b0d      	cmp	r3, #13
 80011ce:	d106      	bne.n	80011de <menu+0x82>
 80011d0:	4b77      	ldr	r3, [pc, #476]	@ (80013b0 <menu+0x254>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <menu+0x82>
			menuSayac = 16;
 80011d8:	4b73      	ldr	r3, [pc, #460]	@ (80013a8 <menu+0x24c>)
 80011da:	2210      	movs	r2, #16
 80011dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80011de:	4b72      	ldr	r3, [pc, #456]	@ (80013a8 <menu+0x24c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d106      	bne.n	80011f4 <menu+0x98>
 80011e6:	4b72      	ldr	r3, [pc, #456]	@ (80013b0 <menu+0x254>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d102      	bne.n	80011f4 <menu+0x98>
			menuSayac = 13;
 80011ee:	4b6e      	ldr	r3, [pc, #440]	@ (80013a8 <menu+0x24c>)
 80011f0:	220d      	movs	r2, #13
 80011f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011f4:	4b6c      	ldr	r3, [pc, #432]	@ (80013a8 <menu+0x24c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d10a      	bne.n	8001212 <menu+0xb6>
 80011fc:	4b6d      	ldr	r3, [pc, #436]	@ (80013b4 <menu+0x258>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <menu+0xb0>
 8001204:	4b6b      	ldr	r3, [pc, #428]	@ (80013b4 <menu+0x258>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d102      	bne.n	8001212 <menu+0xb6>
			menuSayac = 11;
 800120c:	4b66      	ldr	r3, [pc, #408]	@ (80013a8 <menu+0x24c>)
 800120e:	220b      	movs	r2, #11
 8001210:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001212:	4b65      	ldr	r3, [pc, #404]	@ (80013a8 <menu+0x24c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d10e      	bne.n	8001238 <menu+0xdc>
 800121a:	4b67      	ldr	r3, [pc, #412]	@ (80013b8 <menu+0x25c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d003      	beq.n	800122a <menu+0xce>
 8001222:	4b65      	ldr	r3, [pc, #404]	@ (80013b8 <menu+0x25c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d106      	bne.n	8001238 <menu+0xdc>
 800122a:	4b61      	ldr	r3, [pc, #388]	@ (80013b0 <menu+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <menu+0xdc>
			menuSayac = 16;
 8001232:	4b5d      	ldr	r3, [pc, #372]	@ (80013a8 <menu+0x24c>)
 8001234:	2210      	movs	r2, #16
 8001236:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001238:	4b5b      	ldr	r3, [pc, #364]	@ (80013a8 <menu+0x24c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d10e      	bne.n	800125e <menu+0x102>
 8001240:	4b5d      	ldr	r3, [pc, #372]	@ (80013b8 <menu+0x25c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <menu+0xf4>
 8001248:	4b5b      	ldr	r3, [pc, #364]	@ (80013b8 <menu+0x25c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d106      	bne.n	800125e <menu+0x102>
 8001250:	4b57      	ldr	r3, [pc, #348]	@ (80013b0 <menu+0x254>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d102      	bne.n	800125e <menu+0x102>
			menuSayac = 13;
 8001258:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <menu+0x24c>)
 800125a:	220d      	movs	r2, #13
 800125c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <menu+0x24c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	d106      	bne.n	8001274 <menu+0x118>
 8001266:	4b55      	ldr	r3, [pc, #340]	@ (80013bc <menu+0x260>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <menu+0x118>
			menuSayac = 16;
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <menu+0x24c>)
 8001270:	2210      	movs	r2, #16
 8001272:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001274:	4b4c      	ldr	r3, [pc, #304]	@ (80013a8 <menu+0x24c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b18      	cmp	r3, #24
 800127a:	d106      	bne.n	800128a <menu+0x12e>
 800127c:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <menu+0x250>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <menu+0x12e>
			menuSayac = 26;
 8001284:	4b48      	ldr	r3, [pc, #288]	@ (80013a8 <menu+0x24c>)
 8001286:	221a      	movs	r2, #26
 8001288:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <menu+0x24c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b21      	cmp	r3, #33	@ 0x21
 8001290:	d106      	bne.n	80012a0 <menu+0x144>
 8001292:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <menu+0x264>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <menu+0x144>
			menuSayac = 35;
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <menu+0x24c>)
 800129c:	2223      	movs	r2, #35	@ 0x23
 800129e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012a0:	f002 fc66 	bl	8003b70 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012a4:	2108      	movs	r1, #8
 80012a6:	4847      	ldr	r0, [pc, #284]	@ (80013c4 <menu+0x268>)
 80012a8:	f00a f91e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	f040 8097 	bne.w	80013e2 <menu+0x286>
 80012b4:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <menu+0x248>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 808f 	beq.w	80013e2 <menu+0x286>
		if (menuSayac <= 1) {
 80012c4:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <menu+0x24c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d802      	bhi.n	80012d2 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <menu+0x24c>)
 80012ce:	2224      	movs	r2, #36	@ 0x24
 80012d0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012d2:	4b35      	ldr	r3, [pc, #212]	@ (80013a8 <menu+0x24c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <menu+0x24c>)
 80012dc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <menu+0x24c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b14      	cmp	r3, #20
 80012e4:	d106      	bne.n	80012f4 <menu+0x198>
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <menu+0x250>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <menu+0x198>
			menuSayac = 17;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <menu+0x24c>)
 80012f0:	2211      	movs	r2, #17
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <menu+0x24c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d106      	bne.n	800130a <menu+0x1ae>
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <menu+0x254>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <menu+0x1ae>
			menuSayac = 7;
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <menu+0x24c>)
 8001306:	2207      	movs	r2, #7
 8001308:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <menu+0x24c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d106      	bne.n	8001320 <menu+0x1c4>
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <menu+0x254>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <menu+0x1c4>
			menuSayac = 12;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <menu+0x24c>)
 800131c:	220c      	movs	r2, #12
 800131e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <menu+0x24c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d106      	bne.n	8001336 <menu+0x1da>
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <menu+0x254>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d102      	bne.n	8001336 <menu+0x1da>
			menuSayac = 8;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <menu+0x24c>)
 8001332:	2208      	movs	r2, #8
 8001334:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <menu+0x24c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d10a      	bne.n	8001354 <menu+0x1f8>
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <menu+0x258>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <menu+0x1f2>
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <menu+0x258>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d102      	bne.n	8001354 <menu+0x1f8>
			menuSayac = 9;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <menu+0x24c>)
 8001350:	2209      	movs	r2, #9
 8001352:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <menu+0x24c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d10a      	bne.n	8001372 <menu+0x216>
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <menu+0x25c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d003      	beq.n	800136c <menu+0x210>
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <menu+0x25c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d102      	bne.n	8001372 <menu+0x216>
			menuSayac = 11;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <menu+0x24c>)
 800136e:	220b      	movs	r2, #11
 8001370:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <menu+0x24c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d106      	bne.n	8001388 <menu+0x22c>
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <menu+0x260>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <menu+0x22c>
			menuSayac = 14;
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <menu+0x24c>)
 8001384:	220e      	movs	r2, #14
 8001386:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <menu+0x24c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b19      	cmp	r3, #25
 800138e:	d11b      	bne.n	80013c8 <menu+0x26c>
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <menu+0x250>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d117      	bne.n	80013c8 <menu+0x26c>
			menuSayac = 23;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <menu+0x24c>)
 800139a:	2217      	movs	r2, #23
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e013      	b.n	80013c8 <menu+0x26c>
 80013a0:	40010800 	.word	0x40010800
 80013a4:	200010e7 	.word	0x200010e7
 80013a8:	200010b8 	.word	0x200010b8
 80013ac:	200010c7 	.word	0x200010c7
 80013b0:	200010c0 	.word	0x200010c0
 80013b4:	200010c1 	.word	0x200010c1
 80013b8:	200010c2 	.word	0x200010c2
 80013bc:	200010c3 	.word	0x200010c3
 80013c0:	200010d7 	.word	0x200010d7
 80013c4:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80013c8:	4bb0      	ldr	r3, [pc, #704]	@ (800168c <menu+0x530>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b22      	cmp	r3, #34	@ 0x22
 80013ce:	d106      	bne.n	80013de <menu+0x282>
 80013d0:	4baf      	ldr	r3, [pc, #700]	@ (8001690 <menu+0x534>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <menu+0x282>
			menuSayac = 32;
 80013d8:	4bac      	ldr	r3, [pc, #688]	@ (800168c <menu+0x530>)
 80013da:	2220      	movs	r2, #32
 80013dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013de:	f002 fbc7 	bl	8003b70 <bekle>
	}

	if (menuSayac == 0) {
 80013e2:	4baa      	ldr	r3, [pc, #680]	@ (800168c <menu+0x530>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80013ea:	4aaa      	ldr	r2, [pc, #680]	@ (8001694 <menu+0x538>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	2001      	movs	r0, #1
 80013f0:	f008 fd50 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80013f4:	4aa8      	ldr	r2, [pc, #672]	@ (8001698 <menu+0x53c>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	2002      	movs	r0, #2
 80013fa:	f008 fd4b 	bl	8009e94 <lcd_print>
	}

	if (menuSayac == 1) {
 80013fe:	4ba3      	ldr	r3, [pc, #652]	@ (800168c <menu+0x530>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 81f4 	bne.w	80017f0 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001408:	4aa4      	ldr	r2, [pc, #656]	@ (800169c <menu+0x540>)
 800140a:	2101      	movs	r1, #1
 800140c:	2001      	movs	r0, #1
 800140e:	f008 fd41 	bl	8009e94 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001412:	4ba3      	ldr	r3, [pc, #652]	@ (80016a0 <menu+0x544>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d115      	bne.n	8001446 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800141a:	4aa2      	ldr	r2, [pc, #648]	@ (80016a4 <menu+0x548>)
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f008 fd38 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "   ");
 8001424:	4aa0      	ldr	r2, [pc, #640]	@ (80016a8 <menu+0x54c>)
 8001426:	210f      	movs	r1, #15
 8001428:	2002      	movs	r0, #2
 800142a:	f008 fd33 	bl	8009e94 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800142e:	4b9f      	ldr	r3, [pc, #636]	@ (80016ac <menu+0x550>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	220a      	movs	r2, #10
 8001434:	499e      	ldr	r1, [pc, #632]	@ (80016b0 <menu+0x554>)
 8001436:	4618      	mov	r0, r3
 8001438:	f00d f882 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 800143c:	4a9c      	ldr	r2, [pc, #624]	@ (80016b0 <menu+0x554>)
 800143e:	210e      	movs	r1, #14
 8001440:	2002      	movs	r0, #2
 8001442:	f008 fd27 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001446:	4b96      	ldr	r3, [pc, #600]	@ (80016a0 <menu+0x544>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d115      	bne.n	800147a <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800144e:	4a99      	ldr	r2, [pc, #612]	@ (80016b4 <menu+0x558>)
 8001450:	2101      	movs	r1, #1
 8001452:	2002      	movs	r0, #2
 8001454:	f008 fd1e 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 8001458:	4a97      	ldr	r2, [pc, #604]	@ (80016b8 <menu+0x55c>)
 800145a:	210f      	movs	r1, #15
 800145c:	2002      	movs	r0, #2
 800145e:	f008 fd19 	bl	8009e94 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001462:	4b96      	ldr	r3, [pc, #600]	@ (80016bc <menu+0x560>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	220a      	movs	r2, #10
 8001468:	4991      	ldr	r1, [pc, #580]	@ (80016b0 <menu+0x554>)
 800146a:	4618      	mov	r0, r3
 800146c:	f00d f868 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 8001470:	4a8f      	ldr	r2, [pc, #572]	@ (80016b0 <menu+0x554>)
 8001472:	210e      	movs	r1, #14
 8001474:	2002      	movs	r0, #2
 8001476:	f008 fd0d 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <menu+0x544>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d115      	bne.n	80014ae <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001482:	4a8f      	ldr	r2, [pc, #572]	@ (80016c0 <menu+0x564>)
 8001484:	2101      	movs	r1, #1
 8001486:	2002      	movs	r0, #2
 8001488:	f008 fd04 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 800148c:	4a8a      	ldr	r2, [pc, #552]	@ (80016b8 <menu+0x55c>)
 800148e:	210f      	movs	r1, #15
 8001490:	2002      	movs	r0, #2
 8001492:	f008 fcff 	bl	8009e94 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001496:	4b8b      	ldr	r3, [pc, #556]	@ (80016c4 <menu+0x568>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	220a      	movs	r2, #10
 800149c:	4984      	ldr	r1, [pc, #528]	@ (80016b0 <menu+0x554>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f00d f84e 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 80014a4:	4a82      	ldr	r2, [pc, #520]	@ (80016b0 <menu+0x554>)
 80014a6:	210e      	movs	r1, #14
 80014a8:	2002      	movs	r0, #2
 80014aa:	f008 fcf3 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80014ae:	4b7c      	ldr	r3, [pc, #496]	@ (80016a0 <menu+0x544>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d115      	bne.n	80014e2 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80014b6:	4a84      	ldr	r2, [pc, #528]	@ (80016c8 <menu+0x56c>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	2002      	movs	r0, #2
 80014bc:	f008 fcea 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 80014c0:	4a7d      	ldr	r2, [pc, #500]	@ (80016b8 <menu+0x55c>)
 80014c2:	210f      	movs	r1, #15
 80014c4:	2002      	movs	r0, #2
 80014c6:	f008 fce5 	bl	8009e94 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80014ca:	4b80      	ldr	r3, [pc, #512]	@ (80016cc <menu+0x570>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	220a      	movs	r2, #10
 80014d0:	4977      	ldr	r1, [pc, #476]	@ (80016b0 <menu+0x554>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00d f834 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 80014d8:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <menu+0x554>)
 80014da:	210e      	movs	r1, #14
 80014dc:	2002      	movs	r0, #2
 80014de:	f008 fcd9 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <menu+0x544>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d115      	bne.n	8001516 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80014ea:	4a79      	ldr	r2, [pc, #484]	@ (80016d0 <menu+0x574>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f008 fcd0 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 80014f4:	4a70      	ldr	r2, [pc, #448]	@ (80016b8 <menu+0x55c>)
 80014f6:	210f      	movs	r1, #15
 80014f8:	2002      	movs	r0, #2
 80014fa:	f008 fccb 	bl	8009e94 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014fe:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <menu+0x578>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	220a      	movs	r2, #10
 8001504:	496a      	ldr	r1, [pc, #424]	@ (80016b0 <menu+0x554>)
 8001506:	4618      	mov	r0, r3
 8001508:	f00d f81a 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <menu+0x554>)
 800150e:	210e      	movs	r1, #14
 8001510:	2002      	movs	r0, #2
 8001512:	f008 fcbf 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001516:	4b62      	ldr	r3, [pc, #392]	@ (80016a0 <menu+0x544>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d115      	bne.n	800154a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800151e:	4a6e      	ldr	r2, [pc, #440]	@ (80016d8 <menu+0x57c>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f008 fcb6 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 8001528:	4a63      	ldr	r2, [pc, #396]	@ (80016b8 <menu+0x55c>)
 800152a:	210f      	movs	r1, #15
 800152c:	2002      	movs	r0, #2
 800152e:	f008 fcb1 	bl	8009e94 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001532:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <menu+0x580>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	220a      	movs	r2, #10
 8001538:	495d      	ldr	r1, [pc, #372]	@ (80016b0 <menu+0x554>)
 800153a:	4618      	mov	r0, r3
 800153c:	f00d f800 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 8001540:	4a5b      	ldr	r2, [pc, #364]	@ (80016b0 <menu+0x554>)
 8001542:	210e      	movs	r1, #14
 8001544:	2002      	movs	r0, #2
 8001546:	f008 fca5 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800154a:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <menu+0x544>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d115      	bne.n	800157e <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001552:	4a63      	ldr	r2, [pc, #396]	@ (80016e0 <menu+0x584>)
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f008 fc9c 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 800155c:	4a56      	ldr	r2, [pc, #344]	@ (80016b8 <menu+0x55c>)
 800155e:	210f      	movs	r1, #15
 8001560:	2002      	movs	r0, #2
 8001562:	f008 fc97 	bl	8009e94 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001566:	4b5f      	ldr	r3, [pc, #380]	@ (80016e4 <menu+0x588>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	220a      	movs	r2, #10
 800156c:	4950      	ldr	r1, [pc, #320]	@ (80016b0 <menu+0x554>)
 800156e:	4618      	mov	r0, r3
 8001570:	f00c ffe6 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <menu+0x554>)
 8001576:	210e      	movs	r1, #14
 8001578:	2002      	movs	r0, #2
 800157a:	f008 fc8b 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <menu+0x544>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d115      	bne.n	80015b2 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001586:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <menu+0x58c>)
 8001588:	2101      	movs	r1, #1
 800158a:	2002      	movs	r0, #2
 800158c:	f008 fc82 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 8001590:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <menu+0x55c>)
 8001592:	210f      	movs	r1, #15
 8001594:	2002      	movs	r0, #2
 8001596:	f008 fc7d 	bl	8009e94 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800159a:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <menu+0x590>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	220a      	movs	r2, #10
 80015a0:	4943      	ldr	r1, [pc, #268]	@ (80016b0 <menu+0x554>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00c ffcc 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 80015a8:	4a41      	ldr	r2, [pc, #260]	@ (80016b0 <menu+0x554>)
 80015aa:	210e      	movs	r1, #14
 80015ac:	2002      	movs	r0, #2
 80015ae:	f008 fc71 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <menu+0x544>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d115      	bne.n	80015e6 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80015ba:	4a4d      	ldr	r2, [pc, #308]	@ (80016f0 <menu+0x594>)
 80015bc:	2101      	movs	r1, #1
 80015be:	2002      	movs	r0, #2
 80015c0:	f008 fc68 	bl	8009e94 <lcd_print>
			lcd_print(2, 15, "  ");
 80015c4:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <menu+0x55c>)
 80015c6:	210f      	movs	r1, #15
 80015c8:	2002      	movs	r0, #2
 80015ca:	f008 fc63 	bl	8009e94 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80015ce:	4b49      	ldr	r3, [pc, #292]	@ (80016f4 <menu+0x598>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	220a      	movs	r2, #10
 80015d4:	4936      	ldr	r1, [pc, #216]	@ (80016b0 <menu+0x554>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00c ffb2 	bl	800e540 <itoa>
			lcd_print(2, 14, snum);
 80015dc:	4a34      	ldr	r2, [pc, #208]	@ (80016b0 <menu+0x554>)
 80015de:	210e      	movs	r1, #14
 80015e0:	2002      	movs	r0, #2
 80015e2:	f008 fc57 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <menu+0x544>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d115      	bne.n	800161a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80015ee:	4a42      	ldr	r2, [pc, #264]	@ (80016f8 <menu+0x59c>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	2002      	movs	r0, #2
 80015f4:	f008 fc4e 	bl	8009e94 <lcd_print>
			lcd_print(2, 16, " ");
 80015f8:	4a40      	ldr	r2, [pc, #256]	@ (80016fc <menu+0x5a0>)
 80015fa:	2110      	movs	r1, #16
 80015fc:	2002      	movs	r0, #2
 80015fe:	f008 fc49 	bl	8009e94 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001602:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <menu+0x5a4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	220a      	movs	r2, #10
 8001608:	4929      	ldr	r1, [pc, #164]	@ (80016b0 <menu+0x554>)
 800160a:	4618      	mov	r0, r3
 800160c:	f00c ff98 	bl	800e540 <itoa>
			lcd_print(2, 15, snum);
 8001610:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <menu+0x554>)
 8001612:	210f      	movs	r1, #15
 8001614:	2002      	movs	r0, #2
 8001616:	f008 fc3d 	bl	8009e94 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <menu+0x544>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d104      	bne.n	800162c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001622:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <menu+0x5a8>)
 8001624:	2101      	movs	r1, #1
 8001626:	2002      	movs	r0, #2
 8001628:	f008 fc34 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800162c:	2102      	movs	r1, #2
 800162e:	4836      	ldr	r0, [pc, #216]	@ (8001708 <menu+0x5ac>)
 8001630:	f009 ff5a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d119      	bne.n	800166e <menu+0x512>
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <menu+0x5b0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f083 0301 	eor.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d012      	beq.n	800166e <menu+0x512>
 8001648:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <menu+0x5b4>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10e      	bne.n	800166e <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <menu+0x544>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <menu+0x544>)
 800165a:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <menu+0x544>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b0a      	cmp	r3, #10
 8001662:	d902      	bls.n	800166a <menu+0x50e>
				hataGostermeSirasi = 0;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <menu+0x544>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800166a:	f002 fa81 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800166e:	2104      	movs	r1, #4
 8001670:	4825      	ldr	r0, [pc, #148]	@ (8001708 <menu+0x5ac>)
 8001672:	f009 ff39 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d15e      	bne.n	800173a <menu+0x5de>
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <menu+0x5b0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d057      	beq.n	800173a <menu+0x5de>
 800168a:	e043      	b.n	8001714 <menu+0x5b8>
 800168c:	200010b8 	.word	0x200010b8
 8001690:	200010d7 	.word	0x200010d7
 8001694:	2000121c 	.word	0x2000121c
 8001698:	20001230 	.word	0x20001230
 800169c:	20001244 	.word	0x20001244
 80016a0:	200010ba 	.word	0x200010ba
 80016a4:	20001258 	.word	0x20001258
 80016a8:	0800f338 	.word	0x0800f338
 80016ac:	200010da 	.word	0x200010da
 80016b0:	2000105c 	.word	0x2000105c
 80016b4:	2000126c 	.word	0x2000126c
 80016b8:	0800f33c 	.word	0x0800f33c
 80016bc:	200010db 	.word	0x200010db
 80016c0:	20001280 	.word	0x20001280
 80016c4:	200010dc 	.word	0x200010dc
 80016c8:	20001294 	.word	0x20001294
 80016cc:	200010dd 	.word	0x200010dd
 80016d0:	200012a8 	.word	0x200012a8
 80016d4:	200010de 	.word	0x200010de
 80016d8:	200012bc 	.word	0x200012bc
 80016dc:	200010df 	.word	0x200010df
 80016e0:	200012d0 	.word	0x200012d0
 80016e4:	200010e0 	.word	0x200010e0
 80016e8:	200012e4 	.word	0x200012e4
 80016ec:	200010e1 	.word	0x200010e1
 80016f0:	200012f8 	.word	0x200012f8
 80016f4:	200010e2 	.word	0x200010e2
 80016f8:	2000130c 	.word	0x2000130c
 80016fc:	0800f340 	.word	0x0800f340
 8001700:	200010e3 	.word	0x200010e3
 8001704:	20001320 	.word	0x20001320
 8001708:	40010800 	.word	0x40010800
 800170c:	200010e7 	.word	0x200010e7
 8001710:	200010c7 	.word	0x200010c7
 8001714:	4b8a      	ldr	r3, [pc, #552]	@ (8001940 <menu+0x7e4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800171c:	4b89      	ldr	r3, [pc, #548]	@ (8001944 <menu+0x7e8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b87      	ldr	r3, [pc, #540]	@ (8001944 <menu+0x7e8>)
 8001726:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001728:	4b86      	ldr	r3, [pc, #536]	@ (8001944 <menu+0x7e8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b0b      	cmp	r3, #11
 800172e:	d902      	bls.n	8001736 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001730:	4b84      	ldr	r3, [pc, #528]	@ (8001944 <menu+0x7e8>)
 8001732:	220a      	movs	r2, #10
 8001734:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001736:	f002 fa1b 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800173a:	2108      	movs	r1, #8
 800173c:	4882      	ldr	r0, [pc, #520]	@ (8001948 <menu+0x7ec>)
 800173e:	f009 fed3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d153      	bne.n	80017f0 <menu+0x694>
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <menu+0x7f0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04c      	beq.n	80017f0 <menu+0x694>
 8001756:	4b7b      	ldr	r3, [pc, #492]	@ (8001944 <menu+0x7e8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d148      	bne.n	80017f0 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800175e:	4b7c      	ldr	r3, [pc, #496]	@ (8001950 <menu+0x7f4>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	4b7b      	ldr	r3, [pc, #492]	@ (8001954 <menu+0x7f8>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800176c:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <menu+0x7fc>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	4b78      	ldr	r3, [pc, #480]	@ (8001954 <menu+0x7f8>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800177a:	4b78      	ldr	r3, [pc, #480]	@ (800195c <menu+0x800>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	4b74      	ldr	r3, [pc, #464]	@ (8001954 <menu+0x7f8>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001788:	4b75      	ldr	r3, [pc, #468]	@ (8001960 <menu+0x804>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	4b71      	ldr	r3, [pc, #452]	@ (8001954 <menu+0x7f8>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001796:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <menu+0x808>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	4b6d      	ldr	r3, [pc, #436]	@ (8001954 <menu+0x7f8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80017a4:	4b70      	ldr	r3, [pc, #448]	@ (8001968 <menu+0x80c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <menu+0x7f8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80017b2:	4b6e      	ldr	r3, [pc, #440]	@ (800196c <menu+0x810>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <menu+0x7f8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80017c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001970 <menu+0x814>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <menu+0x7f8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80017ce:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <menu+0x818>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001954 <menu+0x7f8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80017dc:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <menu+0x81c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001954 <menu+0x7f8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80017ea:	4b64      	ldr	r3, [pc, #400]	@ (800197c <menu+0x820>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80017f0:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <menu+0x824>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	f040 808e 	bne.w	8001916 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80017fa:	4a62      	ldr	r2, [pc, #392]	@ (8001984 <menu+0x828>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	2001      	movs	r0, #1
 8001800:	f008 fb48 	bl	8009e94 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001804:	4b4e      	ldr	r3, [pc, #312]	@ (8001940 <menu+0x7e4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d003      	beq.n	8001814 <menu+0x6b8>
 800180c:	4b4c      	ldr	r3, [pc, #304]	@ (8001940 <menu+0x7e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d104      	bne.n	800181e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001814:	4a5c      	ldr	r2, [pc, #368]	@ (8001988 <menu+0x82c>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f008 fb3b 	bl	8009e94 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800181e:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <menu+0x830>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <menu+0x6dc>
 8001826:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <menu+0x7e4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 800182e:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <menu+0x834>)
 8001830:	2101      	movs	r1, #1
 8001832:	2002      	movs	r0, #2
 8001834:	f008 fb2e 	bl	8009e94 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001838:	4b54      	ldr	r3, [pc, #336]	@ (800198c <menu+0x830>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <menu+0x6f6>
 8001840:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <menu+0x7e4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d104      	bne.n	8001852 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001848:	4a52      	ldr	r2, [pc, #328]	@ (8001994 <menu+0x838>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f008 fb21 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001852:	2102      	movs	r1, #2
 8001854:	483c      	ldr	r0, [pc, #240]	@ (8001948 <menu+0x7ec>)
 8001856:	f009 fe47 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d119      	bne.n	8001894 <menu+0x738>
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <menu+0x7f0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <menu+0x738>
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <menu+0x7e4>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001876:	4b45      	ldr	r3, [pc, #276]	@ (800198c <menu+0x830>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b43      	ldr	r3, [pc, #268]	@ (800198c <menu+0x830>)
 8001880:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001882:	4b42      	ldr	r3, [pc, #264]	@ (800198c <menu+0x830>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d902      	bls.n	8001890 <menu+0x734>
				calismaSekli = 0;
 800188a:	4b40      	ldr	r3, [pc, #256]	@ (800198c <menu+0x830>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001890:	f002 f96e 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001894:	2104      	movs	r1, #4
 8001896:	482c      	ldr	r0, [pc, #176]	@ (8001948 <menu+0x7ec>)
 8001898:	f009 fe26 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d119      	bne.n	80018d6 <menu+0x77a>
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <menu+0x7f0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d012      	beq.n	80018d6 <menu+0x77a>
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <menu+0x7e4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10e      	bne.n	80018d6 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 80018b8:	4b34      	ldr	r3, [pc, #208]	@ (800198c <menu+0x830>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <menu+0x830>)
 80018c2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80018c4:	4b31      	ldr	r3, [pc, #196]	@ (800198c <menu+0x830>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <menu+0x776>
	    		calismaSekli = 1;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <menu+0x830>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018d2:	f002 f94d 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018d6:	2108      	movs	r1, #8
 80018d8:	481b      	ldr	r0, [pc, #108]	@ (8001948 <menu+0x7ec>)
 80018da:	f009 fe05 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d118      	bne.n	8001916 <menu+0x7ba>
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <menu+0x7f0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d011      	beq.n	8001916 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <menu+0x830>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <menu+0x7f8>)
 80018f8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <menu+0x830>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d106      	bne.n	8001910 <menu+0x7b4>
				altLimit = 1;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <menu+0x83c>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <menu+0x83c>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <menu+0x7f8>)
 800190e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <menu+0x820>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <menu+0x824>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b03      	cmp	r3, #3
 800191c:	f040 809c 	bne.w	8001a58 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001920:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <menu+0x840>)
 8001922:	2101      	movs	r1, #1
 8001924:	2001      	movs	r0, #1
 8001926:	f008 fab5 	bl	8009e94 <lcd_print>

		if(emniyetCercevesi == 0) {
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <menu+0x844>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13a      	bne.n	80019a8 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <menu+0x848>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f008 faac 	bl	8009e94 <lcd_print>
 800193c:	e03d      	b.n	80019ba <menu+0x85e>
 800193e:	bf00      	nop
 8001940:	200010c7 	.word	0x200010c7
 8001944:	200010ba 	.word	0x200010ba
 8001948:	40010800 	.word	0x40010800
 800194c:	200010e7 	.word	0x200010e7
 8001950:	200010da 	.word	0x200010da
 8001954:	20000fec 	.word	0x20000fec
 8001958:	200010db 	.word	0x200010db
 800195c:	200010dc 	.word	0x200010dc
 8001960:	200010dd 	.word	0x200010dd
 8001964:	200010de 	.word	0x200010de
 8001968:	200010df 	.word	0x200010df
 800196c:	200010e0 	.word	0x200010e0
 8001970:	200010e1 	.word	0x200010e1
 8001974:	200010e2 	.word	0x200010e2
 8001978:	200010e3 	.word	0x200010e3
 800197c:	200010e4 	.word	0x200010e4
 8001980:	200010b8 	.word	0x200010b8
 8001984:	20001334 	.word	0x20001334
 8001988:	20001348 	.word	0x20001348
 800198c:	200010b9 	.word	0x200010b9
 8001990:	2000135c 	.word	0x2000135c
 8001994:	20001370 	.word	0x20001370
 8001998:	200010be 	.word	0x200010be
 800199c:	20001384 	.word	0x20001384
 80019a0:	200010bc 	.word	0x200010bc
 80019a4:	20001398 	.word	0x20001398
		} else if(emniyetCercevesi == 1) {
 80019a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b58 <menu+0x9fc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d104      	bne.n	80019ba <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 80019b0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <menu+0xa00>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f008 fa6d 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019ba:	2102      	movs	r1, #2
 80019bc:	4868      	ldr	r0, [pc, #416]	@ (8001b60 <menu+0xa04>)
 80019be:	f009 fd93 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d115      	bne.n	80019f4 <menu+0x898>
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <menu+0xa08>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <menu+0x9fc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <menu+0x9fc>)
 80019e0:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <menu+0x9fc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d902      	bls.n	80019f0 <menu+0x894>
				emniyetCercevesi = 0;
 80019ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <menu+0x9fc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019f0:	f002 f8be 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019f4:	2104      	movs	r1, #4
 80019f6:	485a      	ldr	r0, [pc, #360]	@ (8001b60 <menu+0xa04>)
 80019f8:	f009 fd76 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d115      	bne.n	8001a2e <menu+0x8d2>
 8001a02:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <menu+0xa08>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001a10:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <menu+0x9fc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <menu+0x9fc>)
 8001a1a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <menu+0x9fc>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001a24:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <menu+0x9fc>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a2a:	f002 f8a1 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001a2e:	2108      	movs	r1, #8
 8001a30:	484b      	ldr	r0, [pc, #300]	@ (8001b60 <menu+0xa04>)
 8001a32:	f009 fd59 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <menu+0x8fc>
 8001a3c:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <menu+0xa08>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001a4a:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <menu+0x9fc>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <menu+0xa0c>)
 8001a50:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <menu+0xa10>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001a58:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <menu+0xa14>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d166      	bne.n	8001b2e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001a60:	4a44      	ldr	r2, [pc, #272]	@ (8001b74 <menu+0xa18>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2001      	movs	r0, #1
 8001a66:	f008 fa15 	bl	8009e94 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <menu+0xa1c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001a72:	4a42      	ldr	r2, [pc, #264]	@ (8001b7c <menu+0xa20>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	2002      	movs	r0, #2
 8001a78:	f008 fa0c 	bl	8009e94 <lcd_print>
 8001a7c:	e008      	b.n	8001a90 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <menu+0xa1c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d104      	bne.n	8001a90 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001a86:	4a3e      	ldr	r2, [pc, #248]	@ (8001b80 <menu+0xa24>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f008 fa02 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a90:	2102      	movs	r1, #2
 8001a92:	4833      	ldr	r0, [pc, #204]	@ (8001b60 <menu+0xa04>)
 8001a94:	f009 fd28 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d115      	bne.n	8001aca <menu+0x96e>
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <menu+0xa08>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00e      	beq.n	8001aca <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <menu+0xa1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <menu+0xa1c>)
 8001ab6:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <menu+0xa1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d902      	bls.n	8001ac6 <menu+0x96a>
				yavaslamaLimit = 0;
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <menu+0xa1c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac6:	f002 f853 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001aca:	2104      	movs	r1, #4
 8001acc:	4824      	ldr	r0, [pc, #144]	@ (8001b60 <menu+0xa04>)
 8001ace:	f009 fd0b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d115      	bne.n	8001b04 <menu+0x9a8>
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <menu+0xa08>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f083 0301 	eor.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <menu+0xa1c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <menu+0xa1c>)
 8001af0:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <menu+0xa1c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <menu+0xa1c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b00:	f002 f836 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b04:	2108      	movs	r1, #8
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <menu+0xa04>)
 8001b08:	f009 fcee 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <menu+0x9d2>
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <menu+0xa08>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f083 0301 	eor.w	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <menu+0xa1c>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <menu+0xa0c>)
 8001b26:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <menu+0xa10>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <menu+0xa14>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	f040 80aa 	bne.w	8001c8c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001b38:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <menu+0xa28>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f008 f9a9 	bl	8009e94 <lcd_print>

		if(altLimit == 0) {
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <menu+0xa2c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d120      	bne.n	8001b8c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b7c <menu+0xa20>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f008 f9a0 	bl	8009e94 <lcd_print>
 8001b54:	e023      	b.n	8001b9e <menu+0xa42>
 8001b56:	bf00      	nop
 8001b58:	200010bc 	.word	0x200010bc
 8001b5c:	200000ec 	.word	0x200000ec
 8001b60:	40010800 	.word	0x40010800
 8001b64:	200010e7 	.word	0x200010e7
 8001b68:	20000fec 	.word	0x20000fec
 8001b6c:	200010e4 	.word	0x200010e4
 8001b70:	200010b8 	.word	0x200010b8
 8001b74:	200013c0 	.word	0x200013c0
 8001b78:	200010bd 	.word	0x200010bd
 8001b7c:	20001398 	.word	0x20001398
 8001b80:	200013ac 	.word	0x200013ac
 8001b84:	200013d4 	.word	0x200013d4
 8001b88:	200010be 	.word	0x200010be
		} else if(altLimit == 1) {
 8001b8c:	4b89      	ldr	r3, [pc, #548]	@ (8001db4 <menu+0xc58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d104      	bne.n	8001b9e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001b94:	4a88      	ldr	r2, [pc, #544]	@ (8001db8 <menu+0xc5c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f008 f97b 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4886      	ldr	r0, [pc, #536]	@ (8001dbc <menu+0xc60>)
 8001ba2:	f009 fca1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d119      	bne.n	8001be0 <menu+0xa84>
 8001bac:	4b84      	ldr	r3, [pc, #528]	@ (8001dc0 <menu+0xc64>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f083 0301 	eor.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <menu+0xa84>
 8001bba:	4b82      	ldr	r3, [pc, #520]	@ (8001dc4 <menu+0xc68>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10e      	bne.n	8001be0 <menu+0xa84>
			altLimit = altLimit + 1;
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <menu+0xc58>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b7a      	ldr	r3, [pc, #488]	@ (8001db4 <menu+0xc58>)
 8001bcc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001bce:	4b79      	ldr	r3, [pc, #484]	@ (8001db4 <menu+0xc58>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d902      	bls.n	8001bdc <menu+0xa80>
				altLimit = 0;
 8001bd6:	4b77      	ldr	r3, [pc, #476]	@ (8001db4 <menu+0xc58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bdc:	f001 ffc8 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001be0:	2104      	movs	r1, #4
 8001be2:	4876      	ldr	r0, [pc, #472]	@ (8001dbc <menu+0xc60>)
 8001be4:	f009 fc80 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d119      	bne.n	8001c22 <menu+0xac6>
 8001bee:	4b74      	ldr	r3, [pc, #464]	@ (8001dc0 <menu+0xc64>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <menu+0xac6>
 8001bfc:	4b71      	ldr	r3, [pc, #452]	@ (8001dc4 <menu+0xc68>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <menu+0xac6>
			altLimit = altLimit - 1;
 8001c04:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <menu+0xc58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <menu+0xc58>)
 8001c0e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <menu+0xc58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <menu+0xac2>
		   		altLimit = 1;
 8001c18:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <menu+0xc58>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c1e:	f001 ffa7 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c22:	2108      	movs	r1, #8
 8001c24:	4865      	ldr	r0, [pc, #404]	@ (8001dbc <menu+0xc60>)
 8001c26:	f009 fc5f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d12d      	bne.n	8001c8c <menu+0xb30>
 8001c30:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <menu+0xc64>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f083 0301 	eor.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <menu+0xb30>
			eepromData[5] = altLimit;
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <menu+0xc58>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b61      	ldr	r3, [pc, #388]	@ (8001dc8 <menu+0xc6c>)
 8001c44:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001c46:	4b5b      	ldr	r3, [pc, #364]	@ (8001db4 <menu+0xc58>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d110      	bne.n	8001c70 <menu+0xb14>
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dcc <menu+0xc70>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <menu+0xb02>
 8001c56:	4b5d      	ldr	r3, [pc, #372]	@ (8001dcc <menu+0xc70>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d108      	bne.n	8001c70 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <menu+0xc70>)
 8001c60:	2203      	movs	r2, #3
 8001c62:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <menu+0xc70>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <menu+0xc6c>)
 8001c6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001c6e:	e00a      	b.n	8001c86 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <menu+0xc58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d106      	bne.n	8001c86 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001c78:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <menu+0xc74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001c7e:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <menu+0xc74>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <menu+0xc6c>)
 8001c84:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001c86:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <menu+0xc78>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001c8c:	4b52      	ldr	r3, [pc, #328]	@ (8001dd8 <menu+0xc7c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d166      	bne.n	8001d62 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001c94:	4a51      	ldr	r2, [pc, #324]	@ (8001ddc <menu+0xc80>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f008 f8fb 	bl	8009e94 <lcd_print>

		if(basincSalteri == 0) {
 8001c9e:	4b50      	ldr	r3, [pc, #320]	@ (8001de0 <menu+0xc84>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001ca6:	4a4f      	ldr	r2, [pc, #316]	@ (8001de4 <menu+0xc88>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2002      	movs	r0, #2
 8001cac:	f008 f8f2 	bl	8009e94 <lcd_print>
 8001cb0:	e008      	b.n	8001cc4 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <menu+0xc84>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001cba:	4a3f      	ldr	r2, [pc, #252]	@ (8001db8 <menu+0xc5c>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f008 f8e8 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	483d      	ldr	r0, [pc, #244]	@ (8001dbc <menu+0xc60>)
 8001cc8:	f009 fc0e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <menu+0xba2>
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <menu+0xc64>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8001de0 <menu+0xc84>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <menu+0xc84>)
 8001cea:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001cec:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <menu+0xc84>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d902      	bls.n	8001cfa <menu+0xb9e>
				basincSalteri = 0;
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <menu+0xc84>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfa:	f001 ff39 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cfe:	2104      	movs	r1, #4
 8001d00:	482e      	ldr	r0, [pc, #184]	@ (8001dbc <menu+0xc60>)
 8001d02:	f009 fbf1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d115      	bne.n	8001d38 <menu+0xbdc>
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <menu+0xc64>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00e      	beq.n	8001d38 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <menu+0xc84>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <menu+0xc84>)
 8001d24:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <menu+0xc84>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <menu+0xbd8>
		   		basincSalteri = 1;
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <menu+0xc84>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d34:	f001 ff1c 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d38:	2108      	movs	r1, #8
 8001d3a:	4820      	ldr	r0, [pc, #128]	@ (8001dbc <menu+0xc60>)
 8001d3c:	f009 fbd4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <menu+0xc06>
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <menu+0xc64>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <menu+0xc84>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <menu+0xc6c>)
 8001d5a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <menu+0xc78>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <menu+0xc7c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f040 80a9 	bne.w	8001ebe <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <menu+0xc8c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2001      	movs	r0, #1
 8001d72:	f008 f88f 	bl	8009e94 <lcd_print>

		if(kapiSecimleri == 0) {
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <menu+0xc90>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001d7e:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <menu+0xc88>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f008 f886 	bl	8009e94 <lcd_print>
 8001d88:	e03f      	b.n	8001e0a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <menu+0xc90>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001d92:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <menu+0xc94>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f008 f87c 	bl	8009e94 <lcd_print>
 8001d9c:	e035      	b.n	8001e0a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <menu+0xc90>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d128      	bne.n	8001df8 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001da6:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <menu+0xc98>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	2002      	movs	r0, #2
 8001dac:	f008 f872 	bl	8009e94 <lcd_print>
 8001db0:	e02b      	b.n	8001e0a <menu+0xcae>
 8001db2:	bf00      	nop
 8001db4:	200010be 	.word	0x200010be
 8001db8:	200013ac 	.word	0x200013ac
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	200010e7 	.word	0x200010e7
 8001dc4:	200010b9 	.word	0x200010b9
 8001dc8:	20000fec 	.word	0x20000fec
 8001dcc:	200010c5 	.word	0x200010c5
 8001dd0:	200010cb 	.word	0x200010cb
 8001dd4:	200010e4 	.word	0x200010e4
 8001dd8:	200010b8 	.word	0x200010b8
 8001ddc:	200013e8 	.word	0x200013e8
 8001de0:	200010bf 	.word	0x200010bf
 8001de4:	20001398 	.word	0x20001398
 8001de8:	200013fc 	.word	0x200013fc
 8001dec:	200010c0 	.word	0x200010c0
 8001df0:	20001410 	.word	0x20001410
 8001df4:	20001424 	.word	0x20001424
		} else if(kapiSecimleri == 3) {
 8001df8:	4b76      	ldr	r3, [pc, #472]	@ (8001fd4 <menu+0xe78>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d104      	bne.n	8001e0a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001e00:	4a75      	ldr	r2, [pc, #468]	@ (8001fd8 <menu+0xe7c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f008 f845 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4873      	ldr	r0, [pc, #460]	@ (8001fdc <menu+0xe80>)
 8001e0e:	f009 fb6b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d115      	bne.n	8001e44 <menu+0xce8>
 8001e18:	4b71      	ldr	r3, [pc, #452]	@ (8001fe0 <menu+0xe84>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001e26:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd4 <menu+0xe78>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b69      	ldr	r3, [pc, #420]	@ (8001fd4 <menu+0xe78>)
 8001e30:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001e32:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <menu+0xe78>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d902      	bls.n	8001e40 <menu+0xce4>
				kapiSecimleri = 0;
 8001e3a:	4b66      	ldr	r3, [pc, #408]	@ (8001fd4 <menu+0xe78>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e40:	f001 fe96 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e44:	2104      	movs	r1, #4
 8001e46:	4865      	ldr	r0, [pc, #404]	@ (8001fdc <menu+0xe80>)
 8001e48:	f009 fb4e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d115      	bne.n	8001e7e <menu+0xd22>
 8001e52:	4b63      	ldr	r3, [pc, #396]	@ (8001fe0 <menu+0xe84>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001e60:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <menu+0xe78>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd4 <menu+0xe78>)
 8001e6a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001e6c:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <menu+0xe78>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d902      	bls.n	8001e7a <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001e74:	4b57      	ldr	r3, [pc, #348]	@ (8001fd4 <menu+0xe78>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e7a:	f001 fe79 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4856      	ldr	r0, [pc, #344]	@ (8001fdc <menu+0xe80>)
 8001e82:	f009 fb31 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d118      	bne.n	8001ebe <menu+0xd62>
 8001e8c:	4b54      	ldr	r3, [pc, #336]	@ (8001fe0 <menu+0xe84>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <menu+0xe78>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <menu+0xe88>)
 8001ea0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <menu+0xe78>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <menu+0xd5c>
				altLimit = 1;
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <menu+0xe8c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <menu+0xe8c>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <menu+0xe88>)
 8001eb6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <menu+0xe90>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff0 <menu+0xe94>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d167      	bne.n	8001f96 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <menu+0xe98>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f007 ffe2 	bl	8009e94 <lcd_print>

		if(kapiAcTipi == 0) {
 8001ed0:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <menu+0xe9c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001ed8:	4a48      	ldr	r2, [pc, #288]	@ (8001ffc <menu+0xea0>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2002      	movs	r0, #2
 8001ede:	f007 ffd9 	bl	8009e94 <lcd_print>
 8001ee2:	e008      	b.n	8001ef6 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001ee4:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <menu+0xe9c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d104      	bne.n	8001ef6 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001eec:	4a44      	ldr	r2, [pc, #272]	@ (8002000 <menu+0xea4>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f007 ffcf 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4838      	ldr	r0, [pc, #224]	@ (8001fdc <menu+0xe80>)
 8001efa:	f009 faf5 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d115      	bne.n	8001f30 <menu+0xdd4>
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <menu+0xe84>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001f12:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <menu+0xe9c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <menu+0xe9c>)
 8001f1c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001f1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <menu+0xe9c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d902      	bls.n	8001f2c <menu+0xdd0>
				kapiAcTipi = 0;
 8001f26:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <menu+0xe9c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f2c:	f001 fe20 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f30:	2104      	movs	r1, #4
 8001f32:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <menu+0xe80>)
 8001f34:	f009 fad8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d115      	bne.n	8001f6a <menu+0xe0e>
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <menu+0xe84>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <menu+0xe9c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <menu+0xe9c>)
 8001f56:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <menu+0xe9c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <menu+0xe9c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f66:	f001 fe03 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	481b      	ldr	r0, [pc, #108]	@ (8001fdc <menu+0xe80>)
 8001f6e:	f009 fabb 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d10e      	bne.n	8001f96 <menu+0xe3a>
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <menu+0xe84>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <menu+0xe9c>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <menu+0xe88>)
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <menu+0xe90>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <menu+0xe94>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	f040 8092 	bne.w	80020c4 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001fa0:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <menu+0xea8>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f007 ff75 	bl	8009e94 <lcd_print>

		if(kapi1Tip == 0) {
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <menu+0xeac>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001fb2:	4a16      	ldr	r2, [pc, #88]	@ (800200c <menu+0xeb0>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f007 ff6c 	bl	8009e94 <lcd_print>
 8001fbc:	e033      	b.n	8002026 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <menu+0xeac>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d126      	bne.n	8002014 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <menu+0xeb4>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f007 ff62 	bl	8009e94 <lcd_print>
 8001fd0:	e029      	b.n	8002026 <menu+0xeca>
 8001fd2:	bf00      	nop
 8001fd4:	200010c0 	.word	0x200010c0
 8001fd8:	20001438 	.word	0x20001438
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	200010e7 	.word	0x200010e7
 8001fe4:	20000fec 	.word	0x20000fec
 8001fe8:	200010be 	.word	0x200010be
 8001fec:	200010e4 	.word	0x200010e4
 8001ff0:	200010b8 	.word	0x200010b8
 8001ff4:	2000144c 	.word	0x2000144c
 8001ff8:	200010c4 	.word	0x200010c4
 8001ffc:	20001460 	.word	0x20001460
 8002000:	20001474 	.word	0x20001474
 8002004:	20001488 	.word	0x20001488
 8002008:	200010c1 	.word	0x200010c1
 800200c:	20000100 	.word	0x20000100
 8002010:	2000149c 	.word	0x2000149c
		} else if(kapi1Tip == 2) {
 8002014:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <menu+0x1088>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800201c:	4a72      	ldr	r2, [pc, #456]	@ (80021e8 <menu+0x108c>)
 800201e:	2101      	movs	r1, #1
 8002020:	2002      	movs	r0, #2
 8002022:	f007 ff37 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2102      	movs	r1, #2
 8002028:	4870      	ldr	r0, [pc, #448]	@ (80021ec <menu+0x1090>)
 800202a:	f009 fa5d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d115      	bne.n	8002060 <menu+0xf04>
 8002034:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <menu+0x1094>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <menu+0x1088>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <menu+0x1088>)
 800204c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <menu+0x1088>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <menu+0xf00>
				kapi1Tip = 0;
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <menu+0x1088>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800205c:	f001 fd88 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002060:	2104      	movs	r1, #4
 8002062:	4862      	ldr	r0, [pc, #392]	@ (80021ec <menu+0x1090>)
 8002064:	f009 fa40 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d115      	bne.n	800209a <menu+0xf3e>
 800206e:	4b60      	ldr	r3, [pc, #384]	@ (80021f0 <menu+0x1094>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00e      	beq.n	800209a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 800207c:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <menu+0x1088>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <menu+0x1088>)
 8002086:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002088:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <menu+0x1088>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d902      	bls.n	8002096 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002090:	4b54      	ldr	r3, [pc, #336]	@ (80021e4 <menu+0x1088>)
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002096:	f001 fd6b 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800209a:	2108      	movs	r1, #8
 800209c:	4853      	ldr	r0, [pc, #332]	@ (80021ec <menu+0x1090>)
 800209e:	f009 fa23 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <menu+0xf68>
 80020a8:	4b51      	ldr	r3, [pc, #324]	@ (80021f0 <menu+0x1094>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80020b6:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <menu+0x1088>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <menu+0x1098>)
 80020bc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80020be:	4b4e      	ldr	r3, [pc, #312]	@ (80021f8 <menu+0x109c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80020c4:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <menu+0x10a0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0a      	cmp	r3, #10
 80020ca:	d16c      	bne.n	80021a6 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <menu+0x10a4>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f007 fedf 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80020d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <menu+0x10a8>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f007 feda 	bl	8009e94 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80020e0:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <menu+0x10ac>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	220a      	movs	r2, #10
 80020e6:	4949      	ldr	r1, [pc, #292]	@ (800220c <menu+0x10b0>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00c fa29 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 80020ee:	4a47      	ldr	r2, [pc, #284]	@ (800220c <menu+0x10b0>)
 80020f0:	2110      	movs	r1, #16
 80020f2:	2002      	movs	r0, #2
 80020f4:	f007 fece 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80020f8:	2102      	movs	r1, #2
 80020fa:	483c      	ldr	r0, [pc, #240]	@ (80021ec <menu+0x1090>)
 80020fc:	f009 f9f4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d119      	bne.n	800213a <menu+0xfde>
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <menu+0x1094>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <menu+0xfde>
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <menu+0x1088>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10e      	bne.n	800213a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800211c:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <menu+0x10ac>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <menu+0x10ac>)
 8002126:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002128:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <menu+0x10ac>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d902      	bls.n	8002136 <menu+0xfda>
				kapi1AcSure = 0;
 8002130:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <menu+0x10ac>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002136:	f001 fd1b 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800213a:	2104      	movs	r1, #4
 800213c:	482b      	ldr	r0, [pc, #172]	@ (80021ec <menu+0x1090>)
 800213e:	f009 f9d3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <menu+0x1020>
 8002148:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <menu+0x1094>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <menu+0x1020>
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <menu+0x1088>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800215e:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <menu+0x10ac>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <menu+0x10ac>)
 8002168:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <menu+0x10ac>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <menu+0x101c>
		   		kapi1AcSure = 5;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <menu+0x10ac>)
 8002174:	2205      	movs	r2, #5
 8002176:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002178:	f001 fcfa 	bl	8003b70 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800217c:	2108      	movs	r1, #8
 800217e:	481b      	ldr	r0, [pc, #108]	@ (80021ec <menu+0x1090>)
 8002180:	f009 f9b2 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <menu+0x104a>
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <menu+0x1094>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <menu+0x10ac>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <menu+0x1098>)
 800219e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <menu+0x109c>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <menu+0x10a0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b0b      	cmp	r3, #11
 80021ac:	f040 8090 	bne.w	80022d0 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <menu+0x10b4>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f007 fe6d 	bl	8009e94 <lcd_print>

		if(kapi2Tip == 0) {
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <menu+0x10b8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <menu+0x10bc>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f007 fe64 	bl	8009e94 <lcd_print>
 80021cc:	e031      	b.n	8002232 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <menu+0x10b8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d124      	bne.n	8002220 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80021d6:	4a11      	ldr	r2, [pc, #68]	@ (800221c <menu+0x10c0>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f007 fe5a 	bl	8009e94 <lcd_print>
 80021e0:	e027      	b.n	8002232 <menu+0x10d6>
 80021e2:	bf00      	nop
 80021e4:	200010c1 	.word	0x200010c1
 80021e8:	20000114 	.word	0x20000114
 80021ec:	40010800 	.word	0x40010800
 80021f0:	200010e7 	.word	0x200010e7
 80021f4:	20000fec 	.word	0x20000fec
 80021f8:	200010e4 	.word	0x200010e4
 80021fc:	200010b8 	.word	0x200010b8
 8002200:	200014b0 	.word	0x200014b0
 8002204:	200014c4 	.word	0x200014c4
 8002208:	200010d1 	.word	0x200010d1
 800220c:	2000105c 	.word	0x2000105c
 8002210:	200014d8 	.word	0x200014d8
 8002214:	200010c2 	.word	0x200010c2
 8002218:	20000100 	.word	0x20000100
 800221c:	2000149c 	.word	0x2000149c
		} else if(kapi2Tip == 2) {
 8002220:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <menu+0x1294>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d104      	bne.n	8002232 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002228:	4a72      	ldr	r2, [pc, #456]	@ (80023f4 <menu+0x1298>)
 800222a:	2101      	movs	r1, #1
 800222c:	2002      	movs	r0, #2
 800222e:	f007 fe31 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002232:	2102      	movs	r1, #2
 8002234:	4870      	ldr	r0, [pc, #448]	@ (80023f8 <menu+0x129c>)
 8002236:	f009 f957 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d115      	bne.n	800226c <menu+0x1110>
 8002240:	4b6e      	ldr	r3, [pc, #440]	@ (80023fc <menu+0x12a0>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00e      	beq.n	800226c <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800224e:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <menu+0x1294>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <menu+0x1294>)
 8002258:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800225a:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <menu+0x1294>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d902      	bls.n	8002268 <menu+0x110c>
				kapi2Tip = 0;
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <menu+0x1294>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002268:	f001 fc82 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800226c:	2104      	movs	r1, #4
 800226e:	4862      	ldr	r0, [pc, #392]	@ (80023f8 <menu+0x129c>)
 8002270:	f009 f93a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <menu+0x114a>
 800227a:	4b60      	ldr	r3, [pc, #384]	@ (80023fc <menu+0x12a0>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <menu+0x1294>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <menu+0x1294>)
 8002292:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002294:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <menu+0x1294>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d902      	bls.n	80022a2 <menu+0x1146>
		   		kapi2Tip = 2;
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <menu+0x1294>)
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022a2:	f001 fc65 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a6:	2108      	movs	r1, #8
 80022a8:	4853      	ldr	r0, [pc, #332]	@ (80023f8 <menu+0x129c>)
 80022aa:	f009 f91d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10d      	bne.n	80022d0 <menu+0x1174>
 80022b4:	4b51      	ldr	r3, [pc, #324]	@ (80023fc <menu+0x12a0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80022c2:	4b4b      	ldr	r3, [pc, #300]	@ (80023f0 <menu+0x1294>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002400 <menu+0x12a4>)
 80022c8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80022ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <menu+0x12a8>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80022d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002408 <menu+0x12ac>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d16c      	bne.n	80023b2 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80022d8:	4a4c      	ldr	r2, [pc, #304]	@ (800240c <menu+0x12b0>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2001      	movs	r0, #1
 80022de:	f007 fdd9 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002410 <menu+0x12b4>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f007 fdd4 	bl	8009e94 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80022ec:	4b49      	ldr	r3, [pc, #292]	@ (8002414 <menu+0x12b8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	220a      	movs	r2, #10
 80022f2:	4949      	ldr	r1, [pc, #292]	@ (8002418 <menu+0x12bc>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c f923 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 80022fa:	4a47      	ldr	r2, [pc, #284]	@ (8002418 <menu+0x12bc>)
 80022fc:	2110      	movs	r1, #16
 80022fe:	2002      	movs	r0, #2
 8002300:	f007 fdc8 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002304:	2102      	movs	r1, #2
 8002306:	483c      	ldr	r0, [pc, #240]	@ (80023f8 <menu+0x129c>)
 8002308:	f009 f8ee 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d119      	bne.n	8002346 <menu+0x11ea>
 8002312:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <menu+0x12a0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d012      	beq.n	8002346 <menu+0x11ea>
 8002320:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <menu+0x1294>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002328:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <menu+0x12b8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <menu+0x12b8>)
 8002332:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <menu+0x12b8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d902      	bls.n	8002342 <menu+0x11e6>
				kapi2AcSure = 0;
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <menu+0x12b8>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002342:	f001 fc15 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002346:	2104      	movs	r1, #4
 8002348:	482b      	ldr	r0, [pc, #172]	@ (80023f8 <menu+0x129c>)
 800234a:	f009 f8cd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d119      	bne.n	8002388 <menu+0x122c>
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <menu+0x12a0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <menu+0x122c>
 8002362:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <menu+0x1294>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10e      	bne.n	8002388 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <menu+0x12b8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <menu+0x12b8>)
 8002374:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002376:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <menu+0x12b8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <menu+0x1228>
		   		kapi2AcSure = 5;
 800237e:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <menu+0x12b8>)
 8002380:	2205      	movs	r2, #5
 8002382:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002384:	f001 fbf4 	bl	8003b70 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002388:	2108      	movs	r1, #8
 800238a:	481b      	ldr	r0, [pc, #108]	@ (80023f8 <menu+0x129c>)
 800238c:	f009 f8ac 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d10d      	bne.n	80023b2 <menu+0x1256>
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <menu+0x12a0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <menu+0x12b8>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <menu+0x12a4>)
 80023aa:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <menu+0x12a8>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <menu+0x12ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b0d      	cmp	r3, #13
 80023b8:	f040 8090 	bne.w	80024dc <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <menu+0x12c0>)
 80023be:	2101      	movs	r1, #1
 80023c0:	2001      	movs	r0, #1
 80023c2:	f007 fd67 	bl	8009e94 <lcd_print>

		if(kapitablaTip == 0) {
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <menu+0x12c4>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80023ce:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <menu+0x12c8>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f007 fd5e 	bl	8009e94 <lcd_print>
 80023d8:	e031      	b.n	800243e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <menu+0x12c4>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d124      	bne.n	800242c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80023e2:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <menu+0x12cc>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f007 fd54 	bl	8009e94 <lcd_print>
 80023ec:	e027      	b.n	800243e <menu+0x12e2>
 80023ee:	bf00      	nop
 80023f0:	200010c2 	.word	0x200010c2
 80023f4:	20000114 	.word	0x20000114
 80023f8:	40010800 	.word	0x40010800
 80023fc:	200010e7 	.word	0x200010e7
 8002400:	20000fec 	.word	0x20000fec
 8002404:	200010e4 	.word	0x200010e4
 8002408:	200010b8 	.word	0x200010b8
 800240c:	200014ec 	.word	0x200014ec
 8002410:	200014c4 	.word	0x200014c4
 8002414:	200010d2 	.word	0x200010d2
 8002418:	2000105c 	.word	0x2000105c
 800241c:	20001500 	.word	0x20001500
 8002420:	200010c3 	.word	0x200010c3
 8002424:	20000100 	.word	0x20000100
 8002428:	2000149c 	.word	0x2000149c
		} else if(kapitablaTip == 2) {
 800242c:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <menu+0x13d0>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d104      	bne.n	800243e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002434:	4a3e      	ldr	r2, [pc, #248]	@ (8002530 <menu+0x13d4>)
 8002436:	2101      	movs	r1, #1
 8002438:	2002      	movs	r0, #2
 800243a:	f007 fd2b 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800243e:	2102      	movs	r1, #2
 8002440:	483c      	ldr	r0, [pc, #240]	@ (8002534 <menu+0x13d8>)
 8002442:	f009 f851 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d115      	bne.n	8002478 <menu+0x131c>
 800244c:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <menu+0x13dc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800245a:	4b34      	ldr	r3, [pc, #208]	@ (800252c <menu+0x13d0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b32      	ldr	r3, [pc, #200]	@ (800252c <menu+0x13d0>)
 8002464:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002466:	4b31      	ldr	r3, [pc, #196]	@ (800252c <menu+0x13d0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d902      	bls.n	8002474 <menu+0x1318>
				kapitablaTip = 0;
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <menu+0x13d0>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002474:	f001 fb7c 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002478:	2104      	movs	r1, #4
 800247a:	482e      	ldr	r0, [pc, #184]	@ (8002534 <menu+0x13d8>)
 800247c:	f009 f834 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d115      	bne.n	80024b2 <menu+0x1356>
 8002486:	4b2c      	ldr	r3, [pc, #176]	@ (8002538 <menu+0x13dc>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002494:	4b25      	ldr	r3, [pc, #148]	@ (800252c <menu+0x13d0>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3b01      	subs	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <menu+0x13d0>)
 800249e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80024a0:	4b22      	ldr	r3, [pc, #136]	@ (800252c <menu+0x13d0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d902      	bls.n	80024ae <menu+0x1352>
		   		kapitablaTip = 2;
 80024a8:	4b20      	ldr	r3, [pc, #128]	@ (800252c <menu+0x13d0>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ae:	f001 fb5f 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b2:	2108      	movs	r1, #8
 80024b4:	481f      	ldr	r0, [pc, #124]	@ (8002534 <menu+0x13d8>)
 80024b6:	f009 f817 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10d      	bne.n	80024dc <menu+0x1380>
 80024c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <menu+0x13dc>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80024ce:	4b17      	ldr	r3, [pc, #92]	@ (800252c <menu+0x13d0>)
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <menu+0x13e0>)
 80024d4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <menu+0x13e4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <menu+0x13e8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b0e      	cmp	r3, #14
 80024e2:	f040 80a3 	bne.w	800262c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <menu+0x13ec>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2001      	movs	r0, #1
 80024ec:	f007 fcd2 	bl	8009e94 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <menu+0x13f0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80024f8:	4a15      	ldr	r2, [pc, #84]	@ (8002550 <menu+0x13f4>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	2002      	movs	r0, #2
 80024fe:	f007 fcc9 	bl	8009e94 <lcd_print>
 8002502:	e034      	b.n	800256e <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <menu+0x13f0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <menu+0x13f8>)
 800250e:	2101      	movs	r1, #1
 8002510:	2002      	movs	r0, #2
 8002512:	f007 fcbf 	bl	8009e94 <lcd_print>
 8002516:	e02a      	b.n	800256e <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <menu+0x13f0>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d11d      	bne.n	800255c <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <menu+0x13fc>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f007 fcb5 	bl	8009e94 <lcd_print>
 800252a:	e020      	b.n	800256e <menu+0x1412>
 800252c:	200010c3 	.word	0x200010c3
 8002530:	20000114 	.word	0x20000114
 8002534:	40010800 	.word	0x40010800
 8002538:	200010e7 	.word	0x200010e7
 800253c:	20000fec 	.word	0x20000fec
 8002540:	200010e4 	.word	0x200010e4
 8002544:	200010b8 	.word	0x200010b8
 8002548:	20001514 	.word	0x20001514
 800254c:	200010c5 	.word	0x200010c5
 8002550:	20001528 	.word	0x20001528
 8002554:	2000153c 	.word	0x2000153c
 8002558:	20001550 	.word	0x20001550
		} else if(kapiTablaAcKonum == 3) {
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <menu+0x15dc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d104      	bne.n	800256e <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002564:	4a75      	ldr	r2, [pc, #468]	@ (800273c <menu+0x15e0>)
 8002566:	2101      	movs	r1, #1
 8002568:	2002      	movs	r0, #2
 800256a:	f007 fc93 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800256e:	2102      	movs	r1, #2
 8002570:	4873      	ldr	r0, [pc, #460]	@ (8002740 <menu+0x15e4>)
 8002572:	f008 ffb9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d115      	bne.n	80025a8 <menu+0x144c>
 800257c:	4b71      	ldr	r3, [pc, #452]	@ (8002744 <menu+0x15e8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800258a:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <menu+0x15dc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b69      	ldr	r3, [pc, #420]	@ (8002738 <menu+0x15dc>)
 8002594:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002596:	4b68      	ldr	r3, [pc, #416]	@ (8002738 <menu+0x15dc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800259e:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <menu+0x15dc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025a4:	f001 fae4 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a8:	2104      	movs	r1, #4
 80025aa:	4865      	ldr	r0, [pc, #404]	@ (8002740 <menu+0x15e4>)
 80025ac:	f008 ff9c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d115      	bne.n	80025e2 <menu+0x1486>
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <menu+0x15e8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80025c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <menu+0x15dc>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <menu+0x15dc>)
 80025ce:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <menu+0x15dc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d902      	bls.n	80025de <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80025d8:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <menu+0x15dc>)
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025de:	f001 fac7 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025e2:	2108      	movs	r1, #8
 80025e4:	4856      	ldr	r0, [pc, #344]	@ (8002740 <menu+0x15e4>)
 80025e6:	f008 ff7f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d11d      	bne.n	800262c <menu+0x14d0>
 80025f0:	4b54      	ldr	r3, [pc, #336]	@ (8002744 <menu+0x15e8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80025fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002738 <menu+0x15dc>)
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <menu+0x15ec>)
 8002604:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002608:	4b4b      	ldr	r3, [pc, #300]	@ (8002738 <menu+0x15dc>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <menu+0x14bc>
 8002610:	4b49      	ldr	r3, [pc, #292]	@ (8002738 <menu+0x15dc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d106      	bne.n	8002626 <menu+0x14ca>
				altLimit = 1;
 8002618:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <menu+0x15f0>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <menu+0x15f0>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <menu+0x15ec>)
 8002624:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002626:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <menu+0x15f4>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800262c:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <menu+0x15f8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d16c      	bne.n	800270e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002634:	4a48      	ldr	r2, [pc, #288]	@ (8002758 <menu+0x15fc>)
 8002636:	2101      	movs	r1, #1
 8002638:	2001      	movs	r0, #1
 800263a:	f007 fc2b 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800263e:	4a47      	ldr	r2, [pc, #284]	@ (800275c <menu+0x1600>)
 8002640:	2101      	movs	r1, #1
 8002642:	2002      	movs	r0, #2
 8002644:	f007 fc26 	bl	8009e94 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002648:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <menu+0x1604>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	220a      	movs	r2, #10
 800264e:	4945      	ldr	r1, [pc, #276]	@ (8002764 <menu+0x1608>)
 8002650:	4618      	mov	r0, r3
 8002652:	f00b ff75 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 8002656:	4a43      	ldr	r2, [pc, #268]	@ (8002764 <menu+0x1608>)
 8002658:	2110      	movs	r1, #16
 800265a:	2002      	movs	r0, #2
 800265c:	f007 fc1a 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002660:	2102      	movs	r1, #2
 8002662:	4837      	ldr	r0, [pc, #220]	@ (8002740 <menu+0x15e4>)
 8002664:	f008 ff40 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d119      	bne.n	80026a2 <menu+0x1546>
 800266e:	4b35      	ldr	r3, [pc, #212]	@ (8002744 <menu+0x15e8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f083 0301 	eor.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <menu+0x1546>
 800267c:	4b3a      	ldr	r3, [pc, #232]	@ (8002768 <menu+0x160c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <menu+0x1604>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <menu+0x1604>)
 800268e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002690:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <menu+0x1604>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d902      	bls.n	800269e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002698:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <menu+0x1604>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269e:	f001 fa67 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80026a2:	2104      	movs	r1, #4
 80026a4:	4826      	ldr	r0, [pc, #152]	@ (8002740 <menu+0x15e4>)
 80026a6:	f008 ff1f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <menu+0x1588>
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <menu+0x15e8>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <menu+0x1588>
 80026be:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <menu+0x160c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10e      	bne.n	80026e4 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <menu+0x1604>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <menu+0x1604>)
 80026d0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <menu+0x1604>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <menu+0x1604>)
 80026dc:	2205      	movs	r2, #5
 80026de:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80026e0:	f001 fa46 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e4:	2108      	movs	r1, #8
 80026e6:	4816      	ldr	r0, [pc, #88]	@ (8002740 <menu+0x15e4>)
 80026e8:	f008 fefe 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <menu+0x15b2>
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <menu+0x15e8>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002700:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <menu+0x1604>)
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <menu+0x15ec>)
 8002706:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <menu+0x15f4>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <menu+0x15f8>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	f040 8086 	bne.w	8002824 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <menu+0x1610>)
 800271a:	2101      	movs	r1, #1
 800271c:	2001      	movs	r0, #1
 800271e:	f007 fbb9 	bl	8009e94 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <menu+0x1614>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d124      	bne.n	8002774 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <menu+0x15e0>)
 800272c:	2101      	movs	r1, #1
 800272e:	2002      	movs	r0, #2
 8002730:	f007 fbb0 	bl	8009e94 <lcd_print>
 8002734:	e027      	b.n	8002786 <menu+0x162a>
 8002736:	bf00      	nop
 8002738:	200010c5 	.word	0x200010c5
 800273c:	20001398 	.word	0x20001398
 8002740:	40010800 	.word	0x40010800
 8002744:	200010e7 	.word	0x200010e7
 8002748:	20000fec 	.word	0x20000fec
 800274c:	200010be 	.word	0x200010be
 8002750:	200010e4 	.word	0x200010e4
 8002754:	200010b8 	.word	0x200010b8
 8002758:	20001564 	.word	0x20001564
 800275c:	200014c4 	.word	0x200014c4
 8002760:	200010d3 	.word	0x200010d3
 8002764:	2000105c 	.word	0x2000105c
 8002768:	200010c3 	.word	0x200010c3
 800276c:	20001578 	.word	0x20001578
 8002770:	200010c6 	.word	0x200010c6
		} else if(yukariYavasLimit == 1) {
 8002774:	4b84      	ldr	r3, [pc, #528]	@ (8002988 <menu+0x182c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d104      	bne.n	8002786 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 800277c:	4a83      	ldr	r2, [pc, #524]	@ (800298c <menu+0x1830>)
 800277e:	2101      	movs	r1, #1
 8002780:	2002      	movs	r0, #2
 8002782:	f007 fb87 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002786:	2102      	movs	r1, #2
 8002788:	4881      	ldr	r0, [pc, #516]	@ (8002990 <menu+0x1834>)
 800278a:	f008 fead 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d115      	bne.n	80027c0 <menu+0x1664>
 8002794:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <menu+0x1838>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00e      	beq.n	80027c0 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80027a2:	4b79      	ldr	r3, [pc, #484]	@ (8002988 <menu+0x182c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b77      	ldr	r3, [pc, #476]	@ (8002988 <menu+0x182c>)
 80027ac:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80027ae:	4b76      	ldr	r3, [pc, #472]	@ (8002988 <menu+0x182c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d902      	bls.n	80027bc <menu+0x1660>
				yukariYavasLimit = 0;
 80027b6:	4b74      	ldr	r3, [pc, #464]	@ (8002988 <menu+0x182c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027bc:	f001 f9d8 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c0:	2104      	movs	r1, #4
 80027c2:	4873      	ldr	r0, [pc, #460]	@ (8002990 <menu+0x1834>)
 80027c4:	f008 fe90 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d115      	bne.n	80027fa <menu+0x169e>
 80027ce:	4b71      	ldr	r3, [pc, #452]	@ (8002994 <menu+0x1838>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80027dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <menu+0x182c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b68      	ldr	r3, [pc, #416]	@ (8002988 <menu+0x182c>)
 80027e6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80027e8:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <menu+0x182c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <menu+0x169a>
		   		yukariYavasLimit = 1;
 80027f0:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <menu+0x182c>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027f6:	f001 f9bb 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fa:	2108      	movs	r1, #8
 80027fc:	4864      	ldr	r0, [pc, #400]	@ (8002990 <menu+0x1834>)
 80027fe:	f008 fe73 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10d      	bne.n	8002824 <menu+0x16c8>
 8002808:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <menu+0x1838>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f083 0301 	eor.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002816:	4b5c      	ldr	r3, [pc, #368]	@ (8002988 <menu+0x182c>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	4b5f      	ldr	r3, [pc, #380]	@ (8002998 <menu+0x183c>)
 800281c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800281e:	4b5f      	ldr	r3, [pc, #380]	@ (800299c <menu+0x1840>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002824:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <menu+0x1844>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b11      	cmp	r3, #17
 800282a:	f040 808b 	bne.w	8002944 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800282e:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <menu+0x1848>)
 8002830:	2101      	movs	r1, #1
 8002832:	2001      	movs	r0, #1
 8002834:	f007 fb2e 	bl	8009e94 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002838:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <menu+0x184c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d105      	bne.n	800284c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002840:	4a5a      	ldr	r2, [pc, #360]	@ (80029ac <menu+0x1850>)
 8002842:	2101      	movs	r1, #1
 8002844:	2002      	movs	r0, #2
 8002846:	f007 fb25 	bl	8009e94 <lcd_print>
 800284a:	e012      	b.n	8002872 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 800284c:	4b56      	ldr	r3, [pc, #344]	@ (80029a8 <menu+0x184c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002854:	4a56      	ldr	r2, [pc, #344]	@ (80029b0 <menu+0x1854>)
 8002856:	2101      	movs	r1, #1
 8002858:	2002      	movs	r0, #2
 800285a:	f007 fb1b 	bl	8009e94 <lcd_print>
 800285e:	e008      	b.n	8002872 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002860:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <menu+0x184c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002868:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <menu+0x1858>)
 800286a:	2101      	movs	r1, #1
 800286c:	2002      	movs	r0, #2
 800286e:	f007 fb11 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2102      	movs	r1, #2
 8002874:	4846      	ldr	r0, [pc, #280]	@ (8002990 <menu+0x1834>)
 8002876:	f008 fe37 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d115      	bne.n	80028ac <menu+0x1750>
 8002880:	4b44      	ldr	r3, [pc, #272]	@ (8002994 <menu+0x1838>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00e      	beq.n	80028ac <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800288e:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <menu+0x184c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <menu+0x184c>)
 8002898:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800289a:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <menu+0x184c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <menu+0x184c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028a8:	f001 f962 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ac:	2104      	movs	r1, #4
 80028ae:	4838      	ldr	r0, [pc, #224]	@ (8002990 <menu+0x1834>)
 80028b0:	f008 fe1a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d115      	bne.n	80028e6 <menu+0x178a>
 80028ba:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <menu+0x1838>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <menu+0x184c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b35      	ldr	r3, [pc, #212]	@ (80029a8 <menu+0x184c>)
 80028d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80028d4:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <menu+0x184c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d902      	bls.n	80028e2 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 80028dc:	4b32      	ldr	r3, [pc, #200]	@ (80029a8 <menu+0x184c>)
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028e2:	f001 f945 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028e6:	2108      	movs	r1, #8
 80028e8:	4829      	ldr	r0, [pc, #164]	@ (8002990 <menu+0x1834>)
 80028ea:	f008 fdfd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d127      	bne.n	8002944 <menu+0x17e8>
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <menu+0x1838>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f083 0301 	eor.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <menu+0x184c>)
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <menu+0x183c>)
 8002908:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800290a:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <menu+0x184c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <menu+0x17be>
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <menu+0x184c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <menu+0x17cc>
				calismaSekli = 0;
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <menu+0x185c>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <menu+0x185c>)
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <menu+0x183c>)
 8002926:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <menu+0x184c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <menu+0x1860>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <menu+0x1860>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <menu+0x183c>)
 800293c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <menu+0x1840>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <menu+0x1844>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	f040 8097 	bne.w	8002a7c <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 800294e:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <menu+0x184c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d105      	bne.n	8002962 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002956:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <menu+0x1864>)
 8002958:	2101      	movs	r1, #1
 800295a:	2001      	movs	r0, #1
 800295c:	f007 fa9a 	bl	8009e94 <lcd_print>
 8002960:	e008      	b.n	8002974 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <menu+0x184c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d104      	bne.n	8002974 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 800296a:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <menu+0x1868>)
 800296c:	2101      	movs	r1, #1
 800296e:	2001      	movs	r0, #1
 8002970:	f007 fa90 	bl	8009e94 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <menu+0x186c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d127      	bne.n	80029cc <menu+0x1870>
			lcd_print(2, 1, pasifText);
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <menu+0x1858>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f007 fa87 	bl	8009e94 <lcd_print>
 8002986:	e02a      	b.n	80029de <menu+0x1882>
 8002988:	200010c6 	.word	0x200010c6
 800298c:	200013ac 	.word	0x200013ac
 8002990:	40010800 	.word	0x40010800
 8002994:	200010e7 	.word	0x200010e7
 8002998:	20000fec 	.word	0x20000fec
 800299c:	200010e4 	.word	0x200010e4
 80029a0:	200010b8 	.word	0x200010b8
 80029a4:	2000158c 	.word	0x2000158c
 80029a8:	200010c7 	.word	0x200010c7
 80029ac:	200015a0 	.word	0x200015a0
 80029b0:	200015b4 	.word	0x200015b4
 80029b4:	20001398 	.word	0x20001398
 80029b8:	200010b9 	.word	0x200010b9
 80029bc:	200010ca 	.word	0x200010ca
 80029c0:	200015c8 	.word	0x200015c8
 80029c4:	200015dc 	.word	0x200015dc
 80029c8:	200010c8 	.word	0x200010c8
		} else if(devirmeYukariIleriLimit == 1){
 80029cc:	4b79      	ldr	r3, [pc, #484]	@ (8002bb4 <menu+0x1a58>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d104      	bne.n	80029de <menu+0x1882>
			lcd_print(2, 1, aktifText);
 80029d4:	4a78      	ldr	r2, [pc, #480]	@ (8002bb8 <menu+0x1a5c>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	2002      	movs	r0, #2
 80029da:	f007 fa5b 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029de:	2102      	movs	r1, #2
 80029e0:	4876      	ldr	r0, [pc, #472]	@ (8002bbc <menu+0x1a60>)
 80029e2:	f008 fd81 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d115      	bne.n	8002a18 <menu+0x18bc>
 80029ec:	4b74      	ldr	r3, [pc, #464]	@ (8002bc0 <menu+0x1a64>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f083 0301 	eor.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00e      	beq.n	8002a18 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80029fa:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb4 <menu+0x1a58>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <menu+0x1a58>)
 8002a04:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002a06:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb4 <menu+0x1a58>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d902      	bls.n	8002a14 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002a0e:	4b69      	ldr	r3, [pc, #420]	@ (8002bb4 <menu+0x1a58>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a14:	f001 f8ac 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a18:	2104      	movs	r1, #4
 8002a1a:	4868      	ldr	r0, [pc, #416]	@ (8002bbc <menu+0x1a60>)
 8002a1c:	f008 fd64 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d115      	bne.n	8002a52 <menu+0x18f6>
 8002a26:	4b66      	ldr	r3, [pc, #408]	@ (8002bc0 <menu+0x1a64>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	f083 0301 	eor.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <menu+0x1a58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <menu+0x1a58>)
 8002a3e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002a40:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb4 <menu+0x1a58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002a48:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <menu+0x1a58>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a4e:	f001 f88f 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a52:	2108      	movs	r1, #8
 8002a54:	4859      	ldr	r0, [pc, #356]	@ (8002bbc <menu+0x1a60>)
 8002a56:	f008 fd47 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10d      	bne.n	8002a7c <menu+0x1920>
 8002a60:	4b57      	ldr	r3, [pc, #348]	@ (8002bc0 <menu+0x1a64>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f083 0301 	eor.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <menu+0x1a58>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <menu+0x1a68>)
 8002a74:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <menu+0x1a6c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <menu+0x1a70>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b13      	cmp	r3, #19
 8002a82:	d174      	bne.n	8002b6e <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002a84:	4b52      	ldr	r3, [pc, #328]	@ (8002bd0 <menu+0x1a74>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d105      	bne.n	8002a98 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002a8c:	4a51      	ldr	r2, [pc, #324]	@ (8002bd4 <menu+0x1a78>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2001      	movs	r0, #1
 8002a92:	f007 f9ff 	bl	8009e94 <lcd_print>
 8002a96:	e008      	b.n	8002aaa <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002a98:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <menu+0x1a74>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d104      	bne.n	8002aaa <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd8 <menu+0x1a7c>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f007 f9f5 	bl	8009e94 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8002bdc <menu+0x1a80>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8002be0 <menu+0x1a84>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f007 f9ec 	bl	8009e94 <lcd_print>
 8002abc:	e008      	b.n	8002ad0 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <menu+0x1a80>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb8 <menu+0x1a5c>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2002      	movs	r0, #2
 8002acc:	f007 f9e2 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	483a      	ldr	r0, [pc, #232]	@ (8002bbc <menu+0x1a60>)
 8002ad4:	f008 fd08 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <menu+0x19ae>
 8002ade:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <menu+0x1a64>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002aec:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <menu+0x1a80>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <menu+0x1a80>)
 8002af6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002af8:	4b38      	ldr	r3, [pc, #224]	@ (8002bdc <menu+0x1a80>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d902      	bls.n	8002b06 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002b00:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <menu+0x1a80>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b06:	f001 f833 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	482b      	ldr	r0, [pc, #172]	@ (8002bbc <menu+0x1a60>)
 8002b0e:	f008 fceb 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d115      	bne.n	8002b44 <menu+0x19e8>
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <menu+0x1a64>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002b26:	4b2d      	ldr	r3, [pc, #180]	@ (8002bdc <menu+0x1a80>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <menu+0x1a80>)
 8002b30:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <menu+0x1a80>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <menu+0x1a80>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b40:	f001 f816 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b44:	2108      	movs	r1, #8
 8002b46:	481d      	ldr	r0, [pc, #116]	@ (8002bbc <menu+0x1a60>)
 8002b48:	f008 fcce 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10d      	bne.n	8002b6e <menu+0x1a12>
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <menu+0x1a64>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <menu+0x1a80>)
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <menu+0x1a68>)
 8002b66:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <menu+0x1a6c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <menu+0x1a70>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b14      	cmp	r3, #20
 8002b74:	f040 809e 	bne.w	8002cb4 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <menu+0x1a74>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002b80:	4a18      	ldr	r2, [pc, #96]	@ (8002be4 <menu+0x1a88>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	2001      	movs	r0, #1
 8002b86:	f007 f985 	bl	8009e94 <lcd_print>
 8002b8a:	e008      	b.n	8002b9e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <menu+0x1a74>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d104      	bne.n	8002b9e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <menu+0x1a8c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f007 f97b 	bl	8009e94 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <menu+0x1a90>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d126      	bne.n	8002bf4 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002ba6:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <menu+0x1a94>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f007 f972 	bl	8009e94 <lcd_print>
 8002bb0:	e029      	b.n	8002c06 <menu+0x1aaa>
 8002bb2:	bf00      	nop
 8002bb4:	200010c8 	.word	0x200010c8
 8002bb8:	200013ac 	.word	0x200013ac
 8002bbc:	40010800 	.word	0x40010800
 8002bc0:	200010e7 	.word	0x200010e7
 8002bc4:	20000fec 	.word	0x20000fec
 8002bc8:	200010e4 	.word	0x200010e4
 8002bcc:	200010b8 	.word	0x200010b8
 8002bd0:	200010c7 	.word	0x200010c7
 8002bd4:	200015f0 	.word	0x200015f0
 8002bd8:	20001604 	.word	0x20001604
 8002bdc:	200010c9 	.word	0x200010c9
 8002be0:	20001398 	.word	0x20001398
 8002be4:	20001618 	.word	0x20001618
 8002be8:	2000162c 	.word	0x2000162c
 8002bec:	200010ca 	.word	0x200010ca
 8002bf0:	20001640 	.word	0x20001640
		} else if(devirmeSilindirTipi == 1) {
 8002bf4:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <menu+0x1b80>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d104      	bne.n	8002c06 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002bfc:	4a38      	ldr	r2, [pc, #224]	@ (8002ce0 <menu+0x1b84>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2002      	movs	r0, #2
 8002c02:	f007 f947 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c06:	2102      	movs	r1, #2
 8002c08:	4836      	ldr	r0, [pc, #216]	@ (8002ce4 <menu+0x1b88>)
 8002c0a:	f008 fc6d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d119      	bne.n	8002c48 <menu+0x1aec>
 8002c14:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <menu+0x1b8c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <menu+0x1aec>
 8002c22:	4b32      	ldr	r3, [pc, #200]	@ (8002cec <menu+0x1b90>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d10e      	bne.n	8002c48 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <menu+0x1b80>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <menu+0x1b80>)
 8002c34:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <menu+0x1b80>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d902      	bls.n	8002c44 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	@ (8002cdc <menu+0x1b80>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c44:	f000 ff94 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c48:	2104      	movs	r1, #4
 8002c4a:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <menu+0x1b88>)
 8002c4c:	f008 fc4c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d119      	bne.n	8002c8a <menu+0x1b2e>
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <menu+0x1b8c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f083 0301 	eor.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d012      	beq.n	8002c8a <menu+0x1b2e>
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <menu+0x1b90>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d10e      	bne.n	8002c8a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <menu+0x1b80>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <menu+0x1b80>)
 8002c76:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002c78:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <menu+0x1b80>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <menu+0x1b80>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c86:	f000 ff73 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	4815      	ldr	r0, [pc, #84]	@ (8002ce4 <menu+0x1b88>)
 8002c8e:	f008 fc2b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10d      	bne.n	8002cb4 <menu+0x1b58>
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <menu+0x1b8c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <menu+0x1b80>)
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <menu+0x1b94>)
 8002cac:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <menu+0x1b98>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <menu+0x1b9c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b15      	cmp	r3, #21
 8002cba:	f040 8088 	bne.w	8002dce <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002cfc <menu+0x1ba0>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f007 f8e6 	bl	8009e94 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <menu+0x1ba4>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11b      	bne.n	8002d08 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <menu+0x1ba8>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f007 f8dd 	bl	8009e94 <lcd_print>
 8002cda:	e01e      	b.n	8002d1a <menu+0x1bbe>
 8002cdc:	200010ca 	.word	0x200010ca
 8002ce0:	20001654 	.word	0x20001654
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	200010e7 	.word	0x200010e7
 8002cec:	200010c7 	.word	0x200010c7
 8002cf0:	20000fec 	.word	0x20000fec
 8002cf4:	200010e4 	.word	0x200010e4
 8002cf8:	200010b8 	.word	0x200010b8
 8002cfc:	20001668 	.word	0x20001668
 8002d00:	200010cb 	.word	0x200010cb
 8002d04:	20001640 	.word	0x20001640
		} else if(platformSilindirTipi == 1) {
 8002d08:	4ba1      	ldr	r3, [pc, #644]	@ (8002f90 <menu+0x1e34>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d104      	bne.n	8002d1a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002d10:	4aa0      	ldr	r2, [pc, #640]	@ (8002f94 <menu+0x1e38>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	2002      	movs	r0, #2
 8002d16:	f007 f8bd 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	489e      	ldr	r0, [pc, #632]	@ (8002f98 <menu+0x1e3c>)
 8002d1e:	f008 fbe3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d115      	bne.n	8002d54 <menu+0x1bf8>
 8002d28:	4b9c      	ldr	r3, [pc, #624]	@ (8002f9c <menu+0x1e40>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002d36:	4b96      	ldr	r3, [pc, #600]	@ (8002f90 <menu+0x1e34>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b94      	ldr	r3, [pc, #592]	@ (8002f90 <menu+0x1e34>)
 8002d40:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002d42:	4b93      	ldr	r3, [pc, #588]	@ (8002f90 <menu+0x1e34>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d902      	bls.n	8002d50 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002d4a:	4b91      	ldr	r3, [pc, #580]	@ (8002f90 <menu+0x1e34>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d50:	f000 ff0e 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d54:	2104      	movs	r1, #4
 8002d56:	4890      	ldr	r0, [pc, #576]	@ (8002f98 <menu+0x1e3c>)
 8002d58:	f008 fbc6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d115      	bne.n	8002d8e <menu+0x1c32>
 8002d62:	4b8e      	ldr	r3, [pc, #568]	@ (8002f9c <menu+0x1e40>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002d70:	4b87      	ldr	r3, [pc, #540]	@ (8002f90 <menu+0x1e34>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <menu+0x1e34>)
 8002d7a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d7c:	4b84      	ldr	r3, [pc, #528]	@ (8002f90 <menu+0x1e34>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002d84:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <menu+0x1e34>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d8a:	f000 fef1 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8e:	2108      	movs	r1, #8
 8002d90:	4881      	ldr	r0, [pc, #516]	@ (8002f98 <menu+0x1e3c>)
 8002d92:	f008 fba9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d118      	bne.n	8002dce <menu+0x1c72>
 8002d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f9c <menu+0x1e40>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d011      	beq.n	8002dce <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002daa:	4b79      	ldr	r3, [pc, #484]	@ (8002f90 <menu+0x1e34>)
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <menu+0x1e44>)
 8002db0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002db2:	4b77      	ldr	r3, [pc, #476]	@ (8002f90 <menu+0x1e34>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <menu+0x1c6c>
				altLimit = 1;
 8002dba:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa4 <menu+0x1e48>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002dc0:	4b78      	ldr	r3, [pc, #480]	@ (8002fa4 <menu+0x1e48>)
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <menu+0x1e44>)
 8002dc6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002dc8:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <menu+0x1e4c>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002dce:	4b77      	ldr	r3, [pc, #476]	@ (8002fac <menu+0x1e50>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b16      	cmp	r3, #22
 8002dd4:	d164      	bne.n	8002ea0 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002dd6:	4a76      	ldr	r2, [pc, #472]	@ (8002fb0 <menu+0x1e54>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f007 f85a 	bl	8009e94 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002de0:	4a74      	ldr	r2, [pc, #464]	@ (8002fb4 <menu+0x1e58>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f007 f855 	bl	8009e94 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002dea:	4b73      	ldr	r3, [pc, #460]	@ (8002fb8 <menu+0x1e5c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	220a      	movs	r2, #10
 8002df0:	4972      	ldr	r1, [pc, #456]	@ (8002fbc <menu+0x1e60>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00b fba4 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 8002df8:	4a70      	ldr	r2, [pc, #448]	@ (8002fbc <menu+0x1e60>)
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f007 f849 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e02:	2102      	movs	r1, #2
 8002e04:	4864      	ldr	r0, [pc, #400]	@ (8002f98 <menu+0x1e3c>)
 8002e06:	f008 fb6f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d115      	bne.n	8002e3c <menu+0x1ce0>
 8002e10:	4b62      	ldr	r3, [pc, #392]	@ (8002f9c <menu+0x1e40>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002e1e:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <menu+0x1e5c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b64      	ldr	r3, [pc, #400]	@ (8002fb8 <menu+0x1e5c>)
 8002e28:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002e2a:	4b63      	ldr	r3, [pc, #396]	@ (8002fb8 <menu+0x1e5c>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d902      	bls.n	8002e38 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002e32:	4b61      	ldr	r3, [pc, #388]	@ (8002fb8 <menu+0x1e5c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e38:	f000 fe9a 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	4856      	ldr	r0, [pc, #344]	@ (8002f98 <menu+0x1e3c>)
 8002e40:	f008 fb52 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d115      	bne.n	8002e76 <menu+0x1d1a>
 8002e4a:	4b54      	ldr	r3, [pc, #336]	@ (8002f9c <menu+0x1e40>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002e58:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <menu+0x1e5c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <menu+0x1e5c>)
 8002e62:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <menu+0x1e5c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d902      	bls.n	8002e72 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <menu+0x1e5c>)
 8002e6e:	2205      	movs	r2, #5
 8002e70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e72:	f000 fe7d 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e76:	2108      	movs	r1, #8
 8002e78:	4847      	ldr	r0, [pc, #284]	@ (8002f98 <menu+0x1e3c>)
 8002e7a:	f008 fb35 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <menu+0x1d44>
 8002e84:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <menu+0x1e40>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002e92:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <menu+0x1e5c>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b42      	ldr	r3, [pc, #264]	@ (8002fa0 <menu+0x1e44>)
 8002e98:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e9a:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <menu+0x1e4c>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002ea0:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <menu+0x1e50>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b17      	cmp	r3, #23
 8002ea6:	d164      	bne.n	8002f72 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002ea8:	4a45      	ldr	r2, [pc, #276]	@ (8002fc0 <menu+0x1e64>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2001      	movs	r0, #1
 8002eae:	f006 fff1 	bl	8009e94 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002eb2:	4a40      	ldr	r2, [pc, #256]	@ (8002fb4 <menu+0x1e58>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f006 ffec 	bl	8009e94 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <menu+0x1e68>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	220a      	movs	r2, #10
 8002ec2:	493e      	ldr	r1, [pc, #248]	@ (8002fbc <menu+0x1e60>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00b fb3b 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 8002eca:	4a3c      	ldr	r2, [pc, #240]	@ (8002fbc <menu+0x1e60>)
 8002ecc:	2110      	movs	r1, #16
 8002ece:	2002      	movs	r0, #2
 8002ed0:	f006 ffe0 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4830      	ldr	r0, [pc, #192]	@ (8002f98 <menu+0x1e3c>)
 8002ed8:	f008 fb06 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d115      	bne.n	8002f0e <menu+0x1db2>
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8002f9c <menu+0x1e40>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <menu+0x1e68>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <menu+0x1e68>)
 8002efa:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <menu+0x1e68>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d902      	bls.n	8002f0a <menu+0x1dae>
				asagiValfTmr = 0;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <menu+0x1e68>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f0a:	f000 fe31 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0e:	2104      	movs	r1, #4
 8002f10:	4821      	ldr	r0, [pc, #132]	@ (8002f98 <menu+0x1e3c>)
 8002f12:	f008 fae9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d115      	bne.n	8002f48 <menu+0x1dec>
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <menu+0x1e40>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002f2a:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <menu+0x1e68>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <menu+0x1e68>)
 8002f34:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <menu+0x1e68>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <menu+0x1e68>)
 8002f40:	2205      	movs	r2, #5
 8002f42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f44:	f000 fe14 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f48:	2108      	movs	r1, #8
 8002f4a:	4813      	ldr	r0, [pc, #76]	@ (8002f98 <menu+0x1e3c>)
 8002f4c:	f008 facc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10d      	bne.n	8002f72 <menu+0x1e16>
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <menu+0x1e40>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <menu+0x1e68>)
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <menu+0x1e44>)
 8002f6a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <menu+0x1e4c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <menu+0x1e50>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	f040 8093 	bne.w	80030a2 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <menu+0x1e6c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d125      	bne.n	8002fd0 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <menu+0x1e70>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f006 ff83 	bl	8009e94 <lcd_print>
 8002f8e:	e028      	b.n	8002fe2 <menu+0x1e86>
 8002f90:	200010cb 	.word	0x200010cb
 8002f94:	20001654 	.word	0x20001654
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	200010e7 	.word	0x200010e7
 8002fa0:	20000fec 	.word	0x20000fec
 8002fa4:	200010be 	.word	0x200010be
 8002fa8:	200010e4 	.word	0x200010e4
 8002fac:	200010b8 	.word	0x200010b8
 8002fb0:	2000167c 	.word	0x2000167c
 8002fb4:	200014c4 	.word	0x200014c4
 8002fb8:	200010cc 	.word	0x200010cc
 8002fbc:	2000105c 	.word	0x2000105c
 8002fc0:	20001690 	.word	0x20001690
 8002fc4:	200010cd 	.word	0x200010cd
 8002fc8:	200010c7 	.word	0x200010c7
 8002fcc:	200016a4 	.word	0x200016a4
		} else if(devirmeYuruyusSecim == 1) {
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003204 <menu+0x20a8>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d104      	bne.n	8002fe2 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8003208 <menu+0x20ac>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f006 ff59 	bl	8009e94 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fe2:	4a8a      	ldr	r2, [pc, #552]	@ (800320c <menu+0x20b0>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f006 ff54 	bl	8009e94 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002fec:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <menu+0x20b4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	4988      	ldr	r1, [pc, #544]	@ (8003214 <menu+0x20b8>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f00b faa3 	bl	800e540 <itoa>
		lcd_print(2, 16, snum);
 8002ffa:	4a86      	ldr	r2, [pc, #536]	@ (8003214 <menu+0x20b8>)
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	2002      	movs	r0, #2
 8003000:	f006 ff48 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003004:	2102      	movs	r1, #2
 8003006:	4884      	ldr	r0, [pc, #528]	@ (8003218 <menu+0x20bc>)
 8003008:	f008 fa6e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d115      	bne.n	800303e <menu+0x1ee2>
 8003012:	4b82      	ldr	r3, [pc, #520]	@ (800321c <menu+0x20c0>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	f083 0301 	eor.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003020:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <menu+0x20b4>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <menu+0x20b4>)
 800302a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800302c:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <menu+0x20b4>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d902      	bls.n	800303a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003034:	4b76      	ldr	r3, [pc, #472]	@ (8003210 <menu+0x20b4>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800303a:	f000 fd99 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800303e:	2104      	movs	r1, #4
 8003040:	4875      	ldr	r0, [pc, #468]	@ (8003218 <menu+0x20bc>)
 8003042:	f008 fa51 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <menu+0x1f1c>
 800304c:	4b73      	ldr	r3, [pc, #460]	@ (800321c <menu+0x20c0>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800305a:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <menu+0x20b4>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b6b      	ldr	r3, [pc, #428]	@ (8003210 <menu+0x20b4>)
 8003064:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <menu+0x20b4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800306e:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <menu+0x20b4>)
 8003070:	2205      	movs	r2, #5
 8003072:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003074:	f000 fd7c 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003078:	2108      	movs	r1, #8
 800307a:	4867      	ldr	r0, [pc, #412]	@ (8003218 <menu+0x20bc>)
 800307c:	f008 fa34 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <menu+0x1f46>
 8003086:	4b65      	ldr	r3, [pc, #404]	@ (800321c <menu+0x20c0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003094:	4b5e      	ldr	r3, [pc, #376]	@ (8003210 <menu+0x20b4>)
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <menu+0x20c4>)
 800309a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800309c:	4b61      	ldr	r3, [pc, #388]	@ (8003224 <menu+0x20c8>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80030a2:	4b61      	ldr	r3, [pc, #388]	@ (8003228 <menu+0x20cc>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b19      	cmp	r3, #25
 80030a8:	d172      	bne.n	8003190 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80030aa:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <menu+0x20a8>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d105      	bne.n	80030be <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80030b2:	4a5e      	ldr	r2, [pc, #376]	@ (800322c <menu+0x20d0>)
 80030b4:	2101      	movs	r1, #1
 80030b6:	2001      	movs	r0, #1
 80030b8:	f006 feec 	bl	8009e94 <lcd_print>
 80030bc:	e008      	b.n	80030d0 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <menu+0x20a8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80030c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003230 <menu+0x20d4>)
 80030c8:	2101      	movs	r1, #1
 80030ca:	2001      	movs	r0, #1
 80030cc:	f006 fee2 	bl	8009e94 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80030d0:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <menu+0x20b0>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	2002      	movs	r0, #2
 80030d6:	f006 fedd 	bl	8009e94 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80030da:	4b56      	ldr	r3, [pc, #344]	@ (8003234 <menu+0x20d8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	220a      	movs	r2, #10
 80030e0:	494c      	ldr	r1, [pc, #304]	@ (8003214 <menu+0x20b8>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b fa2c 	bl	800e540 <itoa>
		lcd_print(2,16,snum);
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <menu+0x20b8>)
 80030ea:	2110      	movs	r1, #16
 80030ec:	2002      	movs	r0, #2
 80030ee:	f006 fed1 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f2:	2102      	movs	r1, #2
 80030f4:	4848      	ldr	r0, [pc, #288]	@ (8003218 <menu+0x20bc>)
 80030f6:	f008 f9f7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d115      	bne.n	800312c <menu+0x1fd0>
 8003100:	4b46      	ldr	r3, [pc, #280]	@ (800321c <menu+0x20c0>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800310e:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <menu+0x20d8>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <menu+0x20d8>)
 8003118:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800311a:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <menu+0x20d8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d902      	bls.n	8003128 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <menu+0x20d8>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003128:	f000 fd22 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800312c:	2104      	movs	r1, #4
 800312e:	483a      	ldr	r0, [pc, #232]	@ (8003218 <menu+0x20bc>)
 8003130:	f008 f9da 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d115      	bne.n	8003166 <menu+0x200a>
 800313a:	4b38      	ldr	r3, [pc, #224]	@ (800321c <menu+0x20c0>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003148:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <menu+0x20d8>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <menu+0x20d8>)
 8003152:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003154:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <menu+0x20d8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d902      	bls.n	8003162 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <menu+0x20d8>)
 800315e:	2205      	movs	r2, #5
 8003160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003162:	f000 fd05 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2108      	movs	r1, #8
 8003168:	482b      	ldr	r0, [pc, #172]	@ (8003218 <menu+0x20bc>)
 800316a:	f008 f9bd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10d      	bne.n	8003190 <menu+0x2034>
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <menu+0x20c0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003182:	4b2c      	ldr	r3, [pc, #176]	@ (8003234 <menu+0x20d8>)
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <menu+0x20c4>)
 8003188:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <menu+0x20c8>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <menu+0x20cc>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b1a      	cmp	r3, #26
 8003196:	f040 80b7 	bne.w	8003308 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800319a:	4a27      	ldr	r2, [pc, #156]	@ (8003238 <menu+0x20dc>)
 800319c:	2101      	movs	r1, #1
 800319e:	2001      	movs	r0, #1
 80031a0:	f006 fe78 	bl	8009e94 <lcd_print>

		if(makineCalismaTmr > 99) {
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <menu+0x20e0>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b63      	cmp	r3, #99	@ 0x63
 80031aa:	d911      	bls.n	80031d0 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <menu+0x20b0>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f006 fe6f 	bl	8009e94 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80031b6:	4b21      	ldr	r3, [pc, #132]	@ (800323c <menu+0x20e0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	220a      	movs	r2, #10
 80031bc:	4915      	ldr	r1, [pc, #84]	@ (8003214 <menu+0x20b8>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f00b f9be 	bl	800e540 <itoa>
			lcd_print(2,14,snum);
 80031c4:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <menu+0x20b8>)
 80031c6:	210e      	movs	r1, #14
 80031c8:	2002      	movs	r0, #2
 80031ca:	f006 fe63 	bl	8009e94 <lcd_print>
 80031ce:	e04c      	b.n	800326a <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <menu+0x20e0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d933      	bls.n	8003240 <menu+0x20e4>
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <menu+0x20e0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b63      	cmp	r3, #99	@ 0x63
 80031de:	d82f      	bhi.n	8003240 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80031e0:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <menu+0x20b0>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2002      	movs	r0, #2
 80031e6:	f006 fe55 	bl	8009e94 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <menu+0x20e0>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	220a      	movs	r2, #10
 80031f0:	4908      	ldr	r1, [pc, #32]	@ (8003214 <menu+0x20b8>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00b f9a4 	bl	800e540 <itoa>
			lcd_print(2, 15, snum);
 80031f8:	4a06      	ldr	r2, [pc, #24]	@ (8003214 <menu+0x20b8>)
 80031fa:	210f      	movs	r1, #15
 80031fc:	2002      	movs	r0, #2
 80031fe:	f006 fe49 	bl	8009e94 <lcd_print>
 8003202:	e032      	b.n	800326a <menu+0x210e>
 8003204:	200010c7 	.word	0x200010c7
 8003208:	200016b8 	.word	0x200016b8
 800320c:	200014c4 	.word	0x200014c4
 8003210:	200010ce 	.word	0x200010ce
 8003214:	2000105c 	.word	0x2000105c
 8003218:	40010800 	.word	0x40010800
 800321c:	200010e7 	.word	0x200010e7
 8003220:	20000fec 	.word	0x20000fec
 8003224:	200010e4 	.word	0x200010e4
 8003228:	200010b8 	.word	0x200010b8
 800322c:	200016cc 	.word	0x200016cc
 8003230:	200016e0 	.word	0x200016e0
 8003234:	200010cf 	.word	0x200010cf
 8003238:	200016f4 	.word	0x200016f4
 800323c:	200010d0 	.word	0x200010d0
		} else if(makineCalismaTmr <=  9) {
 8003240:	4b72      	ldr	r3, [pc, #456]	@ (800340c <menu+0x22b0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b09      	cmp	r3, #9
 8003246:	d810      	bhi.n	800326a <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003248:	4a71      	ldr	r2, [pc, #452]	@ (8003410 <menu+0x22b4>)
 800324a:	2101      	movs	r1, #1
 800324c:	2002      	movs	r0, #2
 800324e:	f006 fe21 	bl	8009e94 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003252:	4b6e      	ldr	r3, [pc, #440]	@ (800340c <menu+0x22b0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	220a      	movs	r2, #10
 8003258:	496e      	ldr	r1, [pc, #440]	@ (8003414 <menu+0x22b8>)
 800325a:	4618      	mov	r0, r3
 800325c:	f00b f970 	bl	800e540 <itoa>
			lcd_print(2, 16, snum);
 8003260:	4a6c      	ldr	r2, [pc, #432]	@ (8003414 <menu+0x22b8>)
 8003262:	2110      	movs	r1, #16
 8003264:	2002      	movs	r0, #2
 8003266:	f006 fe15 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800326a:	2102      	movs	r1, #2
 800326c:	486a      	ldr	r0, [pc, #424]	@ (8003418 <menu+0x22bc>)
 800326e:	f008 f93b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003272:	4603      	mov	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <menu+0x2148>
 8003278:	4b68      	ldr	r3, [pc, #416]	@ (800341c <menu+0x22c0>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003286:	4b61      	ldr	r3, [pc, #388]	@ (800340c <menu+0x22b0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <menu+0x22b0>)
 8003290:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003292:	4b5e      	ldr	r3, [pc, #376]	@ (800340c <menu+0x22b0>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2bb4      	cmp	r3, #180	@ 0xb4
 8003298:	d902      	bls.n	80032a0 <menu+0x2144>
				makineCalismaTmr = 0;
 800329a:	4b5c      	ldr	r3, [pc, #368]	@ (800340c <menu+0x22b0>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032a0:	f000 fc66 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a4:	2104      	movs	r1, #4
 80032a6:	485c      	ldr	r0, [pc, #368]	@ (8003418 <menu+0x22bc>)
 80032a8:	f008 f91e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <menu+0x2182>
 80032b2:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <menu+0x22c0>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f083 0301 	eor.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80032c0:	4b52      	ldr	r3, [pc, #328]	@ (800340c <menu+0x22b0>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <menu+0x22b0>)
 80032ca:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80032cc:	4b4f      	ldr	r3, [pc, #316]	@ (800340c <menu+0x22b0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2bb5      	cmp	r3, #181	@ 0xb5
 80032d2:	d902      	bls.n	80032da <menu+0x217e>
		   		makineCalismaTmr = 180;
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <menu+0x22b0>)
 80032d6:	22b4      	movs	r2, #180	@ 0xb4
 80032d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032da:	f000 fc49 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032de:	2108      	movs	r1, #8
 80032e0:	484d      	ldr	r0, [pc, #308]	@ (8003418 <menu+0x22bc>)
 80032e2:	f008 f901 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10d      	bne.n	8003308 <menu+0x21ac>
 80032ec:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <menu+0x22c0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d006      	beq.n	8003308 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80032fa:	4b44      	ldr	r3, [pc, #272]	@ (800340c <menu+0x22b0>)
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	4b48      	ldr	r3, [pc, #288]	@ (8003420 <menu+0x22c4>)
 8003300:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003302:	4b48      	ldr	r3, [pc, #288]	@ (8003424 <menu+0x22c8>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003308:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <menu+0x22cc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b1b      	cmp	r3, #27
 800330e:	d166      	bne.n	80033de <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003310:	4a46      	ldr	r2, [pc, #280]	@ (800342c <menu+0x22d0>)
 8003312:	2101      	movs	r1, #1
 8003314:	2001      	movs	r0, #1
 8003316:	f006 fdbd 	bl	8009e94 <lcd_print>

		if(buzzer == 0) {
 800331a:	4b45      	ldr	r3, [pc, #276]	@ (8003430 <menu+0x22d4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003322:	4a44      	ldr	r2, [pc, #272]	@ (8003434 <menu+0x22d8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f006 fdb4 	bl	8009e94 <lcd_print>
 800332c:	e008      	b.n	8003340 <menu+0x21e4>
		} else if(buzzer == 1) {
 800332e:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <menu+0x22d4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d104      	bne.n	8003340 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003336:	4a40      	ldr	r2, [pc, #256]	@ (8003438 <menu+0x22dc>)
 8003338:	2101      	movs	r1, #1
 800333a:	2002      	movs	r0, #2
 800333c:	f006 fdaa 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003340:	2102      	movs	r1, #2
 8003342:	4835      	ldr	r0, [pc, #212]	@ (8003418 <menu+0x22bc>)
 8003344:	f008 f8d0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d115      	bne.n	800337a <menu+0x221e>
 800334e:	4b33      	ldr	r3, [pc, #204]	@ (800341c <menu+0x22c0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <menu+0x221e>
			buzzer = buzzer + 1;
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <menu+0x22d4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <menu+0x22d4>)
 8003366:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <menu+0x22d4>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d902      	bls.n	8003376 <menu+0x221a>
				buzzer = 0;
 8003370:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <menu+0x22d4>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003376:	f000 fbfb 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800337a:	2104      	movs	r1, #4
 800337c:	4826      	ldr	r0, [pc, #152]	@ (8003418 <menu+0x22bc>)
 800337e:	f008 f8b3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d115      	bne.n	80033b4 <menu+0x2258>
 8003388:	4b24      	ldr	r3, [pc, #144]	@ (800341c <menu+0x22c0>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f083 0301 	eor.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <menu+0x2258>
			buzzer = buzzer - 1;
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <menu+0x22d4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <menu+0x22d4>)
 80033a0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80033a2:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <menu+0x22d4>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <menu+0x2254>
		   		buzzer = 1;
 80033aa:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <menu+0x22d4>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033b0:	f000 fbde 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b4:	2108      	movs	r1, #8
 80033b6:	4818      	ldr	r0, [pc, #96]	@ (8003418 <menu+0x22bc>)
 80033b8:	f008 f896 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <menu+0x2282>
 80033c2:	4b16      	ldr	r3, [pc, #88]	@ (800341c <menu+0x22c0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <menu+0x2282>
			eepromData[25] = buzzer;
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <menu+0x22d4>)
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <menu+0x22c4>)
 80033d6:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <menu+0x22c8>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <menu+0x22cc>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b1c      	cmp	r3, #28
 80033e4:	f040 8088 	bne.w	80034f8 <menu+0x239c>
		calismaSayModu = 0;
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <menu+0x22e0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80033ee:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <menu+0x22e4>)
 80033f0:	2101      	movs	r1, #1
 80033f2:	2001      	movs	r0, #1
 80033f4:	f006 fd4e 	bl	8009e94 <lcd_print>

		if(demoMode == 0) {
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <menu+0x22e8>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d123      	bne.n	8003448 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <menu+0x22d8>)
 8003402:	2101      	movs	r1, #1
 8003404:	2002      	movs	r0, #2
 8003406:	f006 fd45 	bl	8009e94 <lcd_print>
 800340a:	e026      	b.n	800345a <menu+0x22fe>
 800340c:	200010d0 	.word	0x200010d0
 8003410:	200014c4 	.word	0x200014c4
 8003414:	2000105c 	.word	0x2000105c
 8003418:	40010800 	.word	0x40010800
 800341c:	200010e7 	.word	0x200010e7
 8003420:	20000fec 	.word	0x20000fec
 8003424:	200010e4 	.word	0x200010e4
 8003428:	200010b8 	.word	0x200010b8
 800342c:	20000128 	.word	0x20000128
 8003430:	200010d4 	.word	0x200010d4
 8003434:	20001398 	.word	0x20001398
 8003438:	200013ac 	.word	0x200013ac
 800343c:	200010d8 	.word	0x200010d8
 8003440:	2000013c 	.word	0x2000013c
 8003444:	200010d6 	.word	0x200010d6
		} else if(demoMode == 1) {
 8003448:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <menu+0x24f4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d104      	bne.n	800345a <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003450:	4a80      	ldr	r2, [pc, #512]	@ (8003654 <menu+0x24f8>)
 8003452:	2101      	movs	r1, #1
 8003454:	2002      	movs	r0, #2
 8003456:	f006 fd1d 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800345a:	2102      	movs	r1, #2
 800345c:	487e      	ldr	r0, [pc, #504]	@ (8003658 <menu+0x24fc>)
 800345e:	f008 f843 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <menu+0x2338>
 8003468:	4b7c      	ldr	r3, [pc, #496]	@ (800365c <menu+0x2500>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <menu+0x2338>
			demoMode = demoMode + 1;
 8003476:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <menu+0x24f4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b74      	ldr	r3, [pc, #464]	@ (8003650 <menu+0x24f4>)
 8003480:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003482:	4b73      	ldr	r3, [pc, #460]	@ (8003650 <menu+0x24f4>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d902      	bls.n	8003490 <menu+0x2334>
				demoMode = 0;
 800348a:	4b71      	ldr	r3, [pc, #452]	@ (8003650 <menu+0x24f4>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003490:	f000 fb6e 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003494:	2104      	movs	r1, #4
 8003496:	4870      	ldr	r0, [pc, #448]	@ (8003658 <menu+0x24fc>)
 8003498:	f008 f826 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d115      	bne.n	80034ce <menu+0x2372>
 80034a2:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <menu+0x2500>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <menu+0x2372>
			demoMode = demoMode - 1;
 80034b0:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <menu+0x24f4>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b65      	ldr	r3, [pc, #404]	@ (8003650 <menu+0x24f4>)
 80034ba:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <menu+0x24f4>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <menu+0x236e>
		   		demoMode = 1;
 80034c4:	4b62      	ldr	r3, [pc, #392]	@ (8003650 <menu+0x24f4>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ca:	f000 fb51 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ce:	2108      	movs	r1, #8
 80034d0:	4861      	ldr	r0, [pc, #388]	@ (8003658 <menu+0x24fc>)
 80034d2:	f008 f809 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10d      	bne.n	80034f8 <menu+0x239c>
 80034dc:	4b5f      	ldr	r3, [pc, #380]	@ (800365c <menu+0x2500>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <menu+0x239c>
			eepromData[26] = demoMode;
 80034ea:	4b59      	ldr	r3, [pc, #356]	@ (8003650 <menu+0x24f4>)
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003660 <menu+0x2504>)
 80034f0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80034f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003664 <menu+0x2508>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80034f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003668 <menu+0x250c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b1d      	cmp	r3, #29
 80034fe:	f040 80d5 	bne.w	80036ac <menu+0x2550>
		if(calismaSayModu == 0) {
 8003502:	4b5a      	ldr	r3, [pc, #360]	@ (800366c <menu+0x2510>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d139      	bne.n	800357e <menu+0x2422>
			lcd_print(1, 1, calismaSayisiText);
 800350a:	4a59      	ldr	r2, [pc, #356]	@ (8003670 <menu+0x2514>)
 800350c:	2101      	movs	r1, #1
 800350e:	2001      	movs	r0, #1
 8003510:	f006 fcc0 	bl	8009e94 <lcd_print>
			int finalCount = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]

			if(demoMode == 1) {
 8003518:	4b4d      	ldr	r3, [pc, #308]	@ (8003650 <menu+0x24f4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10f      	bne.n	8003540 <menu+0x23e4>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003520:	4b54      	ldr	r3, [pc, #336]	@ (8003674 <menu+0x2518>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4613      	mov	r3, r2
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	607b      	str	r3, [r7, #4]
				finalCount += calismaSayisiDemo;
 8003532:	4b51      	ldr	r3, [pc, #324]	@ (8003678 <menu+0x251c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	e00e      	b.n	800355e <menu+0x2402>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003540:	4b4e      	ldr	r3, [pc, #312]	@ (800367c <menu+0x2520>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4613      	mov	r3, r2
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	607b      	str	r3, [r7, #4]
				finalCount += calismaSayisi;
 8003552:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <menu+0x2524>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	607b      	str	r3, [r7, #4]
			}

			itoa(finalCount, snum, 10);
 800355e:	220a      	movs	r2, #10
 8003560:	4948      	ldr	r1, [pc, #288]	@ (8003684 <menu+0x2528>)
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f00a ffec 	bl	800e540 <itoa>
			lcd_print(2, 16, snum);
 8003568:	4a46      	ldr	r2, [pc, #280]	@ (8003684 <menu+0x2528>)
 800356a:	2110      	movs	r1, #16
 800356c:	2002      	movs	r0, #2
 800356e:	f006 fc91 	bl	8009e94 <lcd_print>

			lcd_print(2, 1, "           ");
 8003572:	4a45      	ldr	r2, [pc, #276]	@ (8003688 <menu+0x252c>)
 8003574:	2101      	movs	r1, #1
 8003576:	2002      	movs	r0, #2
 8003578:	f006 fc8c 	bl	8009e94 <lcd_print>
 800357c:	e00d      	b.n	800359a <menu+0x243e>
		} else if(calismaSayModu == 1) {
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <menu+0x2510>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d109      	bne.n	800359a <menu+0x243e>
			lcd_print(1, 1, calismaSayisiText);
 8003586:	4a3a      	ldr	r2, [pc, #232]	@ (8003670 <menu+0x2514>)
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f006 fc82 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003590:	4a3e      	ldr	r2, [pc, #248]	@ (800368c <menu+0x2530>)
 8003592:	2101      	movs	r1, #1
 8003594:	2002      	movs	r0, #2
 8003596:	f006 fc7d 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800359a:	2102      	movs	r1, #2
 800359c:	482e      	ldr	r0, [pc, #184]	@ (8003658 <menu+0x24fc>)
 800359e:	f007 ffa3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d119      	bne.n	80035dc <menu+0x2480>
 80035a8:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <menu+0x2500>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f083 0301 	eor.w	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <menu+0x2480>
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <menu+0x2534>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <menu+0x2480>
			calismaSayModu = calismaSayModu + 1;
 80035be:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <menu+0x2510>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b29      	ldr	r3, [pc, #164]	@ (800366c <menu+0x2510>)
 80035c8:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80035ca:	4b28      	ldr	r3, [pc, #160]	@ (800366c <menu+0x2510>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d902      	bls.n	80035d8 <menu+0x247c>
				calismaSayModu = 0;
 80035d2:	4b26      	ldr	r3, [pc, #152]	@ (800366c <menu+0x2510>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035d8:	f000 faca 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80035dc:	2104      	movs	r1, #4
 80035de:	481e      	ldr	r0, [pc, #120]	@ (8003658 <menu+0x24fc>)
 80035e0:	f007 ff82 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d119      	bne.n	800361e <menu+0x24c2>
 80035ea:	4b1c      	ldr	r3, [pc, #112]	@ (800365c <menu+0x2500>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <menu+0x24c2>
 80035f8:	4b25      	ldr	r3, [pc, #148]	@ (8003690 <menu+0x2534>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <menu+0x24c2>
			calismaSayModu = calismaSayModu - 1;
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <menu+0x2510>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <menu+0x2510>)
 800360a:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800360c:	4b17      	ldr	r3, [pc, #92]	@ (800366c <menu+0x2510>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <menu+0x24be>
		   		calismaSayModu = 1;
 8003614:	4b15      	ldr	r3, [pc, #84]	@ (800366c <menu+0x2510>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361a:	f000 faa9 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2108      	movs	r1, #8
 8003620:	480d      	ldr	r0, [pc, #52]	@ (8003658 <menu+0x24fc>)
 8003622:	f007 ff61 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d13f      	bne.n	80036ac <menu+0x2550>
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <menu+0x2500>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d038      	beq.n	80036ac <menu+0x2550>
			if(demoMode == 1) {
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <menu+0x24f4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d128      	bne.n	8003694 <menu+0x2538>
				calismaSayisiDemo = 0;
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <menu+0x251c>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
				eepromData[28] = 0;
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <menu+0x2504>)
 800364a:	2200      	movs	r2, #0
 800364c:	771a      	strb	r2, [r3, #28]
 800364e:	e027      	b.n	80036a0 <menu+0x2544>
 8003650:	200010d6 	.word	0x200010d6
 8003654:	200013ac 	.word	0x200013ac
 8003658:	40010800 	.word	0x40010800
 800365c:	200010e7 	.word	0x200010e7
 8003660:	20000fec 	.word	0x20000fec
 8003664:	200010e4 	.word	0x200010e4
 8003668:	200010b8 	.word	0x200010b8
 800366c:	200010d8 	.word	0x200010d8
 8003670:	20001708 	.word	0x20001708
 8003674:	200010b7 	.word	0x200010b7
 8003678:	200010b5 	.word	0x200010b5
 800367c:	200010b6 	.word	0x200010b6
 8003680:	200010b4 	.word	0x200010b4
 8003684:	2000105c 	.word	0x2000105c
 8003688:	0800f344 	.word	0x0800f344
 800368c:	2000171c 	.word	0x2000171c
 8003690:	200010f9 	.word	0x200010f9
			} else {
				calismaSayisi = 0;
 8003694:	4b46      	ldr	r3, [pc, #280]	@ (80037b0 <menu+0x2654>)
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
				eepromData[27] = 0;
 800369a:	4b46      	ldr	r3, [pc, #280]	@ (80037b4 <menu+0x2658>)
 800369c:	2200      	movs	r2, #0
 800369e:	76da      	strb	r2, [r3, #27]
			}
			calismaSayModu = 0;
 80036a0:	4b45      	ldr	r3, [pc, #276]	@ (80037b8 <menu+0x265c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80036a6:	4b45      	ldr	r3, [pc, #276]	@ (80037bc <menu+0x2660>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80036ac:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <menu+0x2664>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b1e      	cmp	r3, #30
 80036b2:	d166      	bne.n	8003782 <menu+0x2626>
		calismaSayModu = 0;
 80036b4:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <menu+0x265c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80036ba:	4a42      	ldr	r2, [pc, #264]	@ (80037c4 <menu+0x2668>)
 80036bc:	2101      	movs	r1, #1
 80036be:	2001      	movs	r0, #1
 80036c0:	f006 fbe8 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80036c4:	4a40      	ldr	r2, [pc, #256]	@ (80037c8 <menu+0x266c>)
 80036c6:	2101      	movs	r1, #1
 80036c8:	2002      	movs	r0, #2
 80036ca:	f006 fbe3 	bl	8009e94 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ce:	2102      	movs	r1, #2
 80036d0:	483e      	ldr	r0, [pc, #248]	@ (80037cc <menu+0x2670>)
 80036d2:	f007 ff09 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d11a      	bne.n	8003712 <menu+0x25b6>
 80036dc:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <menu+0x2674>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d013      	beq.n	8003712 <menu+0x25b6>
			dilSecim = dilSecim + 1;
 80036ea:	4b3a      	ldr	r3, [pc, #232]	@ (80037d4 <menu+0x2678>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <menu+0x2678>)
 80036f4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80036f6:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <menu+0x2678>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d902      	bls.n	8003704 <menu+0x25a8>
				dilSecim = 0;
 80036fe:	4b35      	ldr	r3, [pc, #212]	@ (80037d4 <menu+0x2678>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <menu+0x2678>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f003 fecd 	bl	80074a8 <loadMenuTexts>

			bekle();
 800370e:	f000 fa2f 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003712:	2104      	movs	r1, #4
 8003714:	482d      	ldr	r0, [pc, #180]	@ (80037cc <menu+0x2670>)
 8003716:	f007 fee7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d11a      	bne.n	8003756 <menu+0x25fa>
 8003720:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <menu+0x2674>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <menu+0x25fa>
			dilSecim = dilSecim - 1;
 800372e:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <menu+0x2678>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <menu+0x2678>)
 8003738:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800373a:	4b26      	ldr	r3, [pc, #152]	@ (80037d4 <menu+0x2678>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <menu+0x25ec>
		   		dilSecim = 1;
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <menu+0x2678>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003748:	4b22      	ldr	r3, [pc, #136]	@ (80037d4 <menu+0x2678>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 feab 	bl	80074a8 <loadMenuTexts>

			bekle();
 8003752:	f000 fa0d 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003756:	2108      	movs	r1, #8
 8003758:	481c      	ldr	r0, [pc, #112]	@ (80037cc <menu+0x2670>)
 800375a:	f007 fec5 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10e      	bne.n	8003782 <menu+0x2626>
 8003764:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <menu+0x2674>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <menu+0x2626>
			eepromData[33] = dilSecim;
 8003772:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <menu+0x2678>)
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <menu+0x2658>)
 8003778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <menu+0x2660>)
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <menu+0x2664>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b1f      	cmp	r3, #31
 8003788:	f040 8085 	bne.w	8003896 <menu+0x273a>
		calismaSayModu = 0;
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <menu+0x265c>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003792:	4a11      	ldr	r2, [pc, #68]	@ (80037d8 <menu+0x267c>)
 8003794:	2101      	movs	r1, #1
 8003796:	2001      	movs	r0, #1
 8003798:	f006 fb7c 	bl	8009e94 <lcd_print>

		if(iotMode == 0) {
 800379c:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <menu+0x2680>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11f      	bne.n	80037e4 <menu+0x2688>
			lcd_print(2, 1, pasifText);
 80037a4:	4a0e      	ldr	r2, [pc, #56]	@ (80037e0 <menu+0x2684>)
 80037a6:	2101      	movs	r1, #1
 80037a8:	2002      	movs	r0, #2
 80037aa:	f006 fb73 	bl	8009e94 <lcd_print>
 80037ae:	e022      	b.n	80037f6 <menu+0x269a>
 80037b0:	200010b4 	.word	0x200010b4
 80037b4:	20000fec 	.word	0x20000fec
 80037b8:	200010d8 	.word	0x200010d8
 80037bc:	200010e4 	.word	0x200010e4
 80037c0:	200010b8 	.word	0x200010b8
 80037c4:	20001730 	.word	0x20001730
 80037c8:	20001744 	.word	0x20001744
 80037cc:	40010800 	.word	0x40010800
 80037d0:	200010e7 	.word	0x200010e7
 80037d4:	200010d9 	.word	0x200010d9
 80037d8:	20000150 	.word	0x20000150
 80037dc:	200010d7 	.word	0x200010d7
 80037e0:	20001398 	.word	0x20001398
		} else if(iotMode == 1) {
 80037e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a68 <menu+0x290c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d104      	bne.n	80037f6 <menu+0x269a>
			lcd_print(2, 1, aktifText);
 80037ec:	4a9f      	ldr	r2, [pc, #636]	@ (8003a6c <menu+0x2910>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	2002      	movs	r0, #2
 80037f2:	f006 fb4f 	bl	8009e94 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f6:	2102      	movs	r1, #2
 80037f8:	489d      	ldr	r0, [pc, #628]	@ (8003a70 <menu+0x2914>)
 80037fa:	f007 fe75 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d115      	bne.n	8003830 <menu+0x26d4>
 8003804:	4b9b      	ldr	r3, [pc, #620]	@ (8003a74 <menu+0x2918>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <menu+0x26d4>
			iotMode = iotMode + 1;
 8003812:	4b95      	ldr	r3, [pc, #596]	@ (8003a68 <menu+0x290c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b93      	ldr	r3, [pc, #588]	@ (8003a68 <menu+0x290c>)
 800381c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800381e:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <menu+0x290c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d902      	bls.n	800382c <menu+0x26d0>
				iotMode = 0;
 8003826:	4b90      	ldr	r3, [pc, #576]	@ (8003a68 <menu+0x290c>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800382c:	f000 f9a0 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003830:	2104      	movs	r1, #4
 8003832:	488f      	ldr	r0, [pc, #572]	@ (8003a70 <menu+0x2914>)
 8003834:	f007 fe58 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <menu+0x270e>
 800383e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a74 <menu+0x2918>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <menu+0x270e>
			iotMode = iotMode - 1;
 800384c:	4b86      	ldr	r3, [pc, #536]	@ (8003a68 <menu+0x290c>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b84      	ldr	r3, [pc, #528]	@ (8003a68 <menu+0x290c>)
 8003856:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003858:	4b83      	ldr	r3, [pc, #524]	@ (8003a68 <menu+0x290c>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <menu+0x270a>
		   		iotMode = 1;
 8003860:	4b81      	ldr	r3, [pc, #516]	@ (8003a68 <menu+0x290c>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003866:	f000 f983 	bl	8003b70 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800386a:	2108      	movs	r1, #8
 800386c:	4880      	ldr	r0, [pc, #512]	@ (8003a70 <menu+0x2914>)
 800386e:	f007 fe3b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10e      	bne.n	8003896 <menu+0x273a>
 8003878:	4b7e      	ldr	r3, [pc, #504]	@ (8003a74 <menu+0x2918>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <menu+0x273a>
			eepromData[48] = iotMode;
 8003886:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <menu+0x290c>)
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a78 <menu+0x291c>)
 800388c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003890:	4b7a      	ldr	r3, [pc, #488]	@ (8003a7c <menu+0x2920>)
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003896:	4b7a      	ldr	r3, [pc, #488]	@ (8003a80 <menu+0x2924>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b20      	cmp	r3, #32
 800389c:	d127      	bne.n	80038ee <menu+0x2792>
		calismaSayModu = 0;
 800389e:	4b79      	ldr	r3, [pc, #484]	@ (8003a84 <menu+0x2928>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 80038a4:	4a78      	ldr	r2, [pc, #480]	@ (8003a88 <menu+0x292c>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	2001      	movs	r0, #1
 80038aa:	f006 faf3 	bl	8009e94 <lcd_print>

		convertArrays(1);
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7fc ff0a 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 80038b4:	2032      	movs	r0, #50	@ 0x32
 80038b6:	f007 f847 	bl	800a948 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fd fbf2 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c0:	2102      	movs	r1, #2
 80038c2:	486b      	ldr	r0, [pc, #428]	@ (8003a70 <menu+0x2914>)
 80038c4:	f007 fe10 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10f      	bne.n	80038ee <menu+0x2792>
 80038ce:	2104      	movs	r1, #4
 80038d0:	4867      	ldr	r0, [pc, #412]	@ (8003a70 <menu+0x2914>)
 80038d2:	f007 fe09 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d108      	bne.n	80038ee <menu+0x2792>
 80038dc:	4b65      	ldr	r3, [pc, #404]	@ (8003a74 <menu+0x2918>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	f083 0301 	eor.w	r3, r3, #1
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <menu+0x2792>
			takeMachineIDWithConfirmation();
 80038ea:	f005 fa63 	bl	8008db4 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 80038ee:	4b64      	ldr	r3, [pc, #400]	@ (8003a80 <menu+0x2924>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b21      	cmp	r3, #33	@ 0x21
 80038f4:	d12b      	bne.n	800394e <menu+0x27f2>
		calismaSayModu = 0;
 80038f6:	4b63      	ldr	r3, [pc, #396]	@ (8003a84 <menu+0x2928>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 80038fc:	2002      	movs	r0, #2
 80038fe:	f7fc fee3 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 8003902:	2032      	movs	r0, #50	@ 0x32
 8003904:	f007 f820 	bl	800a948 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003908:	2002      	movs	r0, #2
 800390a:	f7fd fbcb 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4857      	ldr	r0, [pc, #348]	@ (8003a70 <menu+0x2914>)
 8003912:	f007 fde9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d118      	bne.n	800394e <menu+0x27f2>
 800391c:	2104      	movs	r1, #4
 800391e:	4854      	ldr	r0, [pc, #336]	@ (8003a70 <menu+0x2914>)
 8003920:	f007 fde2 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d111      	bne.n	800394e <menu+0x27f2>
 800392a:	4b52      	ldr	r3, [pc, #328]	@ (8003a74 <menu+0x2918>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f083 0301 	eor.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <menu+0x27f2>
			takeWifiSSID();
 8003938:	f005 fc54 	bl	80091e4 <takeWifiSSID>

			convertArrays(2);
 800393c:	2002      	movs	r0, #2
 800393e:	f7fc fec3 	bl	80006c8 <convertArrays>
			HAL_Delay(50);
 8003942:	2032      	movs	r0, #50	@ 0x32
 8003944:	f007 f800 	bl	800a948 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003948:	2002      	movs	r0, #2
 800394a:	f7fd fbab 	bl	80010a4 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 800394e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <menu+0x2924>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b22      	cmp	r3, #34	@ 0x22
 8003954:	d12b      	bne.n	80039ae <menu+0x2852>
		calismaSayModu = 0;
 8003956:	4b4b      	ldr	r3, [pc, #300]	@ (8003a84 <menu+0x2928>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 800395c:	2003      	movs	r0, #3
 800395e:	f7fc feb3 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 8003962:	2032      	movs	r0, #50	@ 0x32
 8003964:	f006 fff0 	bl	800a948 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003968:	2003      	movs	r0, #3
 800396a:	f7fd fb9b 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2102      	movs	r1, #2
 8003970:	483f      	ldr	r0, [pc, #252]	@ (8003a70 <menu+0x2914>)
 8003972:	f007 fdb9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d118      	bne.n	80039ae <menu+0x2852>
 800397c:	2104      	movs	r1, #4
 800397e:	483c      	ldr	r0, [pc, #240]	@ (8003a70 <menu+0x2914>)
 8003980:	f007 fdb2 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d111      	bne.n	80039ae <menu+0x2852>
 800398a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <menu+0x2918>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <menu+0x2852>
			takeWifiPass();
 8003998:	f005 fde2 	bl	8009560 <takeWifiPass>

			convertArrays(3);
 800399c:	2003      	movs	r0, #3
 800399e:	f7fc fe93 	bl	80006c8 <convertArrays>
			HAL_Delay(50);
 80039a2:	2032      	movs	r0, #50	@ 0x32
 80039a4:	f006 ffd0 	bl	800a948 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 80039a8:	2003      	movs	r0, #3
 80039aa:	f7fd fb7b 	bl	80010a4 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80039ae:	4b34      	ldr	r3, [pc, #208]	@ (8003a80 <menu+0x2924>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b23      	cmp	r3, #35	@ 0x23
 80039b4:	d154      	bne.n	8003a60 <menu+0x2904>
		lcd_print(1, 1, menudenCikisText);
 80039b6:	4a35      	ldr	r2, [pc, #212]	@ (8003a8c <menu+0x2930>)
 80039b8:	2101      	movs	r1, #1
 80039ba:	2001      	movs	r0, #1
 80039bc:	f006 fa6a 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80039c0:	4a33      	ldr	r2, [pc, #204]	@ (8003a90 <menu+0x2934>)
 80039c2:	2101      	movs	r1, #1
 80039c4:	2002      	movs	r0, #2
 80039c6:	f006 fa65 	bl	8009e94 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80039ca:	2108      	movs	r1, #8
 80039cc:	4828      	ldr	r0, [pc, #160]	@ (8003a70 <menu+0x2914>)
 80039ce:	f007 fd8b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d143      	bne.n	8003a60 <menu+0x2904>
			menuGiris = 0;
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <menu+0x2938>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 80039de:	f006 ffa9 	bl	800a934 <HAL_GetTick>
 80039e2:	6038      	str	r0, [r7, #0]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80039e4:	e007      	b.n	80039f6 <menu+0x289a>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80039e6:	f006 ffa5 	bl	800a934 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039f4:	d806      	bhi.n	8003a04 <menu+0x28a8>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80039f6:	4828      	ldr	r0, [pc, #160]	@ (8003a98 <menu+0x293c>)
 80039f8:	f008 fb9f 	bl	800c13a <HAL_I2C_GetError>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d0f1      	beq.n	80039e6 <menu+0x288a>
 8003a02:	e000      	b.n	8003a06 <menu+0x28aa>
			        break;
 8003a04:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003a06:	f006 ff95 	bl	800a934 <HAL_GetTick>
 8003a0a:	6038      	str	r0, [r7, #0]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003a0c:	e007      	b.n	8003a1e <menu+0x28c2>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003a0e:	f006 ff91 	bl	800a934 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a1c:	d806      	bhi.n	8003a2c <menu+0x28d0>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003a1e:	481e      	ldr	r0, [pc, #120]	@ (8003a98 <menu+0x293c>)
 8003a20:	f008 fb7e 	bl	800c120 <HAL_I2C_GetState>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d1f1      	bne.n	8003a0e <menu+0x28b2>
 8003a2a:	e000      	b.n	8003a2e <menu+0x28d2>
			        break;
 8003a2c:	bf00      	nop
			    }
			}

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003a2e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	236e      	movs	r3, #110	@ 0x6e
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <menu+0x291c>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	236e      	movs	r3, #110	@ 0x6e
 8003a3e:	2200      	movs	r2, #0
 8003a40:	21a0      	movs	r1, #160	@ 0xa0
 8003a42:	4815      	ldr	r0, [pc, #84]	@ (8003a98 <menu+0x293c>)
 8003a44:	f008 f80a 	bl	800ba5c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003a48:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003a4c:	f006 ff7c 	bl	800a948 <HAL_Delay>

			lcd_clear();
 8003a50:	f006 fa4c 	bl	8009eec <lcd_clear>
			HAL_Delay(500);
 8003a54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a58:	f006 ff76 	bl	800a948 <HAL_Delay>
			NVIC_SystemReset();
 8003a5c:	f7fd fb68 	bl	8001130 <__NVIC_SystemReset>
		}
	}
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200010d7 	.word	0x200010d7
 8003a6c:	200013ac 	.word	0x200013ac
 8003a70:	40010800 	.word	0x40010800
 8003a74:	200010e7 	.word	0x200010e7
 8003a78:	20000fec 	.word	0x20000fec
 8003a7c:	200010e4 	.word	0x200010e4
 8003a80:	200010b8 	.word	0x200010b8
 8003a84:	200010d8 	.word	0x200010d8
 8003a88:	200018c0 	.word	0x200018c0
 8003a8c:	20001758 	.word	0x20001758
 8003a90:	2000176c 	.word	0x2000176c
 8003a94:	200010d5 	.word	0x200010d5
 8003a98:	20001938 	.word	0x20001938

08003a9c <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003aac:	4a22      	ldr	r2, [pc, #136]	@ (8003b38 <lcdUpdate+0x9c>)
 8003aae:	2101      	movs	r1, #1
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	f006 f9ef 	bl	8009e94 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003ab6:	e03b      	b.n	8003b30 <lcdUpdate+0x94>
	} else if(y==2) {
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d105      	bne.n	8003aca <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003abe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <lcdUpdate+0x9c>)
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f006 f9e6 	bl	8009e94 <lcd_print>
}
 8003ac8:	e032      	b.n	8003b30 <lcdUpdate+0x94>
	} else if(y==3) {
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d105      	bne.n	8003adc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003ad0:	4a19      	ldr	r2, [pc, #100]	@ (8003b38 <lcdUpdate+0x9c>)
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	2002      	movs	r0, #2
 8003ad6:	f006 f9dd 	bl	8009e94 <lcd_print>
}
 8003ada:	e029      	b.n	8003b30 <lcdUpdate+0x94>
	} else if(y==4) {
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d105      	bne.n	8003aee <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003ae2:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <lcdUpdate+0x9c>)
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f006 f9d4 	bl	8009e94 <lcd_print>
}
 8003aec:	e020      	b.n	8003b30 <lcdUpdate+0x94>
	} else if(y==5) {
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d105      	bne.n	8003b00 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003af4:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <lcdUpdate+0x9c>)
 8003af6:	2105      	movs	r1, #5
 8003af8:	2002      	movs	r0, #2
 8003afa:	f006 f9cb 	bl	8009e94 <lcd_print>
}
 8003afe:	e017      	b.n	8003b30 <lcdUpdate+0x94>
	} else if(y==6) {
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d105      	bne.n	8003b12 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003b06:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <lcdUpdate+0x9c>)
 8003b08:	2106      	movs	r1, #6
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f006 f9c2 	bl	8009e94 <lcd_print>
}
 8003b10:	e00e      	b.n	8003b30 <lcdUpdate+0x94>
	} else if (y==7) {
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	d10b      	bne.n	8003b30 <lcdUpdate+0x94>
		lcd_clear();
 8003b18:	f006 f9e8 	bl	8009eec <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003b1c:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <lcdUpdate+0xa0>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	2001      	movs	r0, #1
 8003b22:	f006 f9b7 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003b26:	4a06      	ldr	r2, [pc, #24]	@ (8003b40 <lcdUpdate+0xa4>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	2002      	movs	r0, #2
 8003b2c:	f006 f9b2 	bl	8009e94 <lcd_print>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	0800f350 	.word	0x0800f350
 8003b3c:	200000c4 	.word	0x200000c4
 8003b40:	200000d8 	.word	0x200000d8

08003b44 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <checkLCDBacklight+0x24>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <checkLCDBacklight+0x28>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b3b      	cmp	r3, #59	@ 0x3b
 8003b54:	d903      	bls.n	8003b5e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f006 f9e8 	bl	8009f2c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003b5c:	e002      	b.n	8003b64 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f006 f9e4 	bl	8009f2c <lcd_backlight>
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20001094 	.word	0x20001094
 8003b6c:	200010b0 	.word	0x200010b0

08003b70 <bekle>:

void bekle() {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	timer1=millis;
 8003b74:	4b47      	ldr	r3, [pc, #284]	@ (8003c94 <bekle+0x124>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a47      	ldr	r2, [pc, #284]	@ (8003c98 <bekle+0x128>)
 8003b7a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b7c:	e002      	b.n	8003b84 <bekle+0x14>
    	butonKontrol = 1;
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <bekle+0x12c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b84:	2101      	movs	r1, #1
 8003b86:	4846      	ldr	r0, [pc, #280]	@ (8003ca0 <bekle+0x130>)
 8003b88:	f007 fcae 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d109      	bne.n	8003ba6 <bekle+0x36>
 8003b92:	4b40      	ldr	r3, [pc, #256]	@ (8003c94 <bekle+0x124>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b40      	ldr	r3, [pc, #256]	@ (8003c98 <bekle+0x128>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d0ef      	beq.n	8003b7e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b9e:	e002      	b.n	8003ba6 <bekle+0x36>
    	butonKontrol = 1;
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <bekle+0x12c>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ba6:	2108      	movs	r1, #8
 8003ba8:	483e      	ldr	r0, [pc, #248]	@ (8003ca4 <bekle+0x134>)
 8003baa:	f007 fc9d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d109      	bne.n	8003bc8 <bekle+0x58>
 8003bb4:	4b37      	ldr	r3, [pc, #220]	@ (8003c94 <bekle+0x124>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b37      	ldr	r3, [pc, #220]	@ (8003c98 <bekle+0x128>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d0ef      	beq.n	8003ba0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bc0:	e002      	b.n	8003bc8 <bekle+0x58>
    	butonKontrol = 1;
 8003bc2:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <bekle+0x12c>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4835      	ldr	r0, [pc, #212]	@ (8003ca0 <bekle+0x130>)
 8003bcc:	f007 fc8c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d109      	bne.n	8003bea <bekle+0x7a>
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c94 <bekle+0x124>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b2f      	ldr	r3, [pc, #188]	@ (8003c98 <bekle+0x128>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d0ef      	beq.n	8003bc2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003be2:	e002      	b.n	8003bea <bekle+0x7a>
    	butonKontrol = 1;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <bekle+0x12c>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bea:	2104      	movs	r1, #4
 8003bec:	482c      	ldr	r0, [pc, #176]	@ (8003ca0 <bekle+0x130>)
 8003bee:	f007 fc7b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d109      	bne.n	8003c0c <bekle+0x9c>
 8003bf8:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <bekle+0x124>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <bekle+0x128>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d0ef      	beq.n	8003be4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c04:	e002      	b.n	8003c0c <bekle+0x9c>
    	butonKontrol = 1;
 8003c06:	4b25      	ldr	r3, [pc, #148]	@ (8003c9c <bekle+0x12c>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c0c:	2108      	movs	r1, #8
 8003c0e:	4824      	ldr	r0, [pc, #144]	@ (8003ca0 <bekle+0x130>)
 8003c10:	f007 fc6a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d109      	bne.n	8003c2e <bekle+0xbe>
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <bekle+0x124>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <bekle+0x128>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d0ef      	beq.n	8003c06 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c26:	e002      	b.n	8003c2e <bekle+0xbe>
    	butonKontrol = 1;
 8003c28:	4b1c      	ldr	r3, [pc, #112]	@ (8003c9c <bekle+0x12c>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c2e:	2180      	movs	r1, #128	@ 0x80
 8003c30:	481c      	ldr	r0, [pc, #112]	@ (8003ca4 <bekle+0x134>)
 8003c32:	f007 fc59 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <bekle+0xe0>
 8003c3c:	4b15      	ldr	r3, [pc, #84]	@ (8003c94 <bekle+0x124>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <bekle+0x128>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d0ef      	beq.n	8003c28 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c48:	e002      	b.n	8003c50 <bekle+0xe0>
    	butonKontrol = 1;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <bekle+0x12c>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c54:	4813      	ldr	r0, [pc, #76]	@ (8003ca4 <bekle+0x134>)
 8003c56:	f007 fc47 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <bekle+0x104>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <bekle+0x124>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <bekle+0x128>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d0ee      	beq.n	8003c4a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c6c:	e002      	b.n	8003c74 <bekle+0x104>
    	butonKontrol = 1;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <bekle+0x12c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c78:	480a      	ldr	r0, [pc, #40]	@ (8003ca4 <bekle+0x134>)
 8003c7a:	f007 fc35 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <bekle+0x120>
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <bekle+0x124>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b03      	ldr	r3, [pc, #12]	@ (8003c98 <bekle+0x128>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d0ee      	beq.n	8003c6e <bekle+0xfe>
    }

}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20001094 	.word	0x20001094
 8003c98:	2000109c 	.word	0x2000109c
 8003c9c:	200010e7 	.word	0x200010e7
 8003ca0:	40010800 	.word	0x40010800
 8003ca4:	40011000 	.word	0x40011000

08003ca8 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003cac:	2101      	movs	r1, #1
 8003cae:	4815      	ldr	r0, [pc, #84]	@ (8003d04 <buttonCheck+0x5c>)
 8003cb0:	f007 fc1a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d01b      	beq.n	8003cf2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003cba:	2108      	movs	r1, #8
 8003cbc:	4812      	ldr	r0, [pc, #72]	@ (8003d08 <buttonCheck+0x60>)
 8003cbe:	f007 fc13 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d014      	beq.n	8003cf2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003cc8:	2102      	movs	r1, #2
 8003cca:	480e      	ldr	r0, [pc, #56]	@ (8003d04 <buttonCheck+0x5c>)
 8003ccc:	f007 fc0c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d00d      	beq.n	8003cf2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	480a      	ldr	r0, [pc, #40]	@ (8003d04 <buttonCheck+0x5c>)
 8003cda:	f007 fc05 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d006      	beq.n	8003cf2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003ce4:	2108      	movs	r1, #8
 8003ce6:	4807      	ldr	r0, [pc, #28]	@ (8003d04 <buttonCheck+0x5c>)
 8003ce8:	f007 fbfe 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d104      	bne.n	8003cfc <buttonCheck+0x54>
		backLightTimer = 0;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <buttonCheck+0x64>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
		return 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <buttonCheck+0x56>
	}
	return 0;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40010800 	.word	0x40010800
 8003d08:	40011000 	.word	0x40011000
 8003d0c:	200010b0 	.word	0x200010b0

08003d10 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003d14:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <checkBasincSalteri+0x54>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <checkBasincSalteri+0x12>
		basincVar=1;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <checkBasincSalteri+0x58>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <checkBasincSalteri+0x54>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d119      	bne.n	8003d5e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003d2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d2e:	480f      	ldr	r0, [pc, #60]	@ (8003d6c <checkBasincSalteri+0x5c>)
 8003d30:	f007 fbda 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <checkBasincSalteri+0x60>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <checkBasincSalteri+0x64>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d90a      	bls.n	8003d5e <checkBasincSalteri+0x4e>
				basincVar=1;
 8003d48:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <checkBasincSalteri+0x58>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003d4e:	e006      	b.n	8003d5e <checkBasincSalteri+0x4e>
			timer5=millis;
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <checkBasincSalteri+0x60>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a07      	ldr	r2, [pc, #28]	@ (8003d74 <checkBasincSalteri+0x64>)
 8003d56:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003d58:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <checkBasincSalteri+0x58>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200010bf 	.word	0x200010bf
 8003d68:	200010bb 	.word	0x200010bb
 8003d6c:	40011000 	.word	0x40011000
 8003d70:	20001094 	.word	0x20001094
 8003d74:	200010ac 	.word	0x200010ac

08003d78 <checkBasGonder>:

void checkBasGonder() {
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <checkBasGonder+0x74>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10b      	bne.n	8003d9c <checkBasGonder+0x24>
 8003d84:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <checkBasGonder+0x78>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <checkBasGonder+0x24>
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <checkBasGonder+0x7c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003d94:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <checkBasGonder+0x80>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e009      	b.n	8003db0 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003d9c:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <checkBasGonder+0x78>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003daa:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <checkBasGonder+0x80>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <checkBasGonder+0x74>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10b      	bne.n	8003dd0 <checkBasGonder+0x58>
 8003db8:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <checkBasGonder+0x84>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <checkBasGonder+0x58>
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <checkBasGonder+0x7c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <checkBasGonder+0x88>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003dce:	e009      	b.n	8003de4 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <checkBasGonder+0x84>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f083 0301 	eor.w	r3, r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <checkBasGonder+0x88>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	200010b9 	.word	0x200010b9
 8003df0:	200010ed 	.word	0x200010ed
 8003df4:	200010c7 	.word	0x200010c7
 8003df8:	200010f4 	.word	0x200010f4
 8003dfc:	200010f0 	.word	0x200010f0
 8003e00:	200010f5 	.word	0x200010f5

08003e04 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003e08:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <checkKapiSecimleri+0x98>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003e16:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <checkKapiSecimleri+0x98>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10e      	bne.n	8003e3c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e22:	4820      	ldr	r0, [pc, #128]	@ (8003ea4 <checkKapiSecimleri+0xa0>)
 8003e24:	f007 fb60 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e002      	b.n	8003e3c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003e3c:	4b17      	ldr	r3, [pc, #92]	@ (8003e9c <checkKapiSecimleri+0x98>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d10e      	bne.n	8003e62 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003e44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e48:	4816      	ldr	r0, [pc, #88]	@ (8003ea4 <checkKapiSecimleri+0xa0>)
 8003e4a:	f007 fb4d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e002      	b.n	8003e62 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <checkKapiSecimleri+0x98>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d116      	bne.n	8003e98 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e6e:	480d      	ldr	r0, [pc, #52]	@ (8003ea4 <checkKapiSecimleri+0xa0>)
 8003e70:	f007 fb3a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <checkKapiSecimleri+0x8e>
 8003e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e7e:	4809      	ldr	r0, [pc, #36]	@ (8003ea4 <checkKapiSecimleri+0xa0>)
 8003e80:	f007 fb32 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003e90:	e002      	b.n	8003e98 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003e92:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <checkKapiSecimleri+0x9c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200010c0 	.word	0x200010c0
 8003ea0:	2000110b 	.word	0x2000110b
 8003ea4:	40010800 	.word	0x40010800

08003ea8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <checkAktifCalisma+0x1a0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f041 8399 	bne.w	80055e8 <checkAktifCalisma+0x1740>
 8003eb6:	4b65      	ldr	r3, [pc, #404]	@ (800404c <checkAktifCalisma+0x1a4>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f041 8394 	bne.w	80055e8 <checkAktifCalisma+0x1740>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003ec0:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <checkAktifCalisma+0x1a8>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11a      	bne.n	8003efe <checkAktifCalisma+0x56>
 8003ec8:	4b62      	ldr	r3, [pc, #392]	@ (8004054 <checkAktifCalisma+0x1ac>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d116      	bne.n	8003efe <checkAktifCalisma+0x56>
 8003ed0:	4b61      	ldr	r3, [pc, #388]	@ (8004058 <checkAktifCalisma+0x1b0>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <checkAktifCalisma+0x46>
 8003ed8:	4b60      	ldr	r3, [pc, #384]	@ (800405c <checkAktifCalisma+0x1b4>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <checkAktifCalisma+0x46>
 8003ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8004060 <checkAktifCalisma+0x1b8>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d007      	beq.n	8003efe <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003eee:	4b5d      	ldr	r3, [pc, #372]	@ (8004064 <checkAktifCalisma+0x1bc>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01c      	beq.n	8003f30 <checkAktifCalisma+0x88>
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <checkAktifCalisma+0x1c0>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d118      	bne.n	8003f30 <checkAktifCalisma+0x88>
 8003efe:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <checkAktifCalisma+0x1c4>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <checkAktifCalisma+0x66>
 8003f06:	4b5a      	ldr	r3, [pc, #360]	@ (8004070 <checkAktifCalisma+0x1c8>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <checkAktifCalisma+0x88>
 8003f0e:	4b59      	ldr	r3, [pc, #356]	@ (8004074 <checkAktifCalisma+0x1cc>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003f16:	2201      	movs	r2, #1
 8003f18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f1c:	4856      	ldr	r0, [pc, #344]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8003f1e:	f007 fafa 	bl	800b516 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003f22:	4b56      	ldr	r3, [pc, #344]	@ (800407c <checkAktifCalisma+0x1d4>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003f28:	4b55      	ldr	r3, [pc, #340]	@ (8004080 <checkAktifCalisma+0x1d8>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e008      	b.n	8003f42 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f36:	4850      	ldr	r0, [pc, #320]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8003f38:	f007 faed 	bl	800b516 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <checkAktifCalisma+0x1d4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003f42:	4b42      	ldr	r3, [pc, #264]	@ (800404c <checkAktifCalisma+0x1a4>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d164      	bne.n	8004014 <checkAktifCalisma+0x16c>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <checkAktifCalisma+0x1c8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <checkAktifCalisma+0xb2>
 8003f52:	4b46      	ldr	r3, [pc, #280]	@ (800406c <checkAktifCalisma+0x1c4>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d05c      	beq.n	8004014 <checkAktifCalisma+0x16c>
 8003f5a:	4b46      	ldr	r3, [pc, #280]	@ (8004074 <checkAktifCalisma+0x1cc>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d058      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f66:	4844      	ldr	r0, [pc, #272]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8003f68:	f007 fabe 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <checkAktifCalisma+0xd2>
 8003f72:	4b44      	ldr	r3, [pc, #272]	@ (8004084 <checkAktifCalisma+0x1dc>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d04c      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	4842      	ldr	r0, [pc, #264]	@ (8004088 <checkAktifCalisma+0x1e0>)
 8003f7e:	f007 fab3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d145      	bne.n	8004014 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003f88:	4b40      	ldr	r3, [pc, #256]	@ (800408c <checkAktifCalisma+0x1e4>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d041      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003f90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f94:	4838      	ldr	r0, [pc, #224]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8003f96:	f007 faa7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10e      	bne.n	8003fbe <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003fa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa4:	4834      	ldr	r0, [pc, #208]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8003fa6:	f007 fa9f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003fb0:	2140      	movs	r1, #64	@ 0x40
 8003fb2:	4835      	ldr	r0, [pc, #212]	@ (8004088 <checkAktifCalisma+0x1e0>)
 8003fb4:	f007 fa98 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d003      	beq.n	8003fc6 <checkAktifCalisma+0x11e>
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <checkAktifCalisma+0x1a8>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d026      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003fc6:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <checkAktifCalisma+0x1b0>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	f083 0301 	eor.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01f      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <checkAktifCalisma+0x1ac>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f083 0301 	eor.w	r3, r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d018      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003fe2:	4b20      	ldr	r3, [pc, #128]	@ (8004064 <checkAktifCalisma+0x1bc>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003ff0:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <checkAktifCalisma+0x1e8>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	f083 0301 	eor.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8003ffe:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <checkAktifCalisma+0x1ec>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800400c:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <checkAktifCalisma+0x1a8>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004014:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <checkAktifCalisma+0x1a8>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <checkAktifCalisma+0x1a8>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03c      	beq.n	800409c <checkAktifCalisma+0x1f4>
 8004022:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004026:	4818      	ldr	r0, [pc, #96]	@ (8004088 <checkAktifCalisma+0x1e0>)
 8004028:	f007 fa5e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d134      	bne.n	800409c <checkAktifCalisma+0x1f4>
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <checkAktifCalisma+0x1f0>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800403a:	2201      	movs	r2, #1
 800403c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004040:	480d      	ldr	r0, [pc, #52]	@ (8004078 <checkAktifCalisma+0x1d0>)
 8004042:	f007 fa68 	bl	800b516 <HAL_GPIO_WritePin>
 8004046:	e02f      	b.n	80040a8 <checkAktifCalisma+0x200>
 8004048:	200010d6 	.word	0x200010d6
 800404c:	200010d5 	.word	0x200010d5
 8004050:	200010ed 	.word	0x200010ed
 8004054:	200010ee 	.word	0x200010ee
 8004058:	200010f0 	.word	0x200010f0
 800405c:	200010e8 	.word	0x200010e8
 8004060:	200010cb 	.word	0x200010cb
 8004064:	200010ef 	.word	0x200010ef
 8004068:	200010ca 	.word	0x200010ca
 800406c:	2000110a 	.word	0x2000110a
 8004070:	2000111d 	.word	0x2000111d
 8004074:	2000110b 	.word	0x2000110b
 8004078:	40010c00 	.word	0x40010c00
 800407c:	2000110c 	.word	0x2000110c
 8004080:	200010f7 	.word	0x200010f7
 8004084:	200010f4 	.word	0x200010f4
 8004088:	40011000 	.word	0x40011000
 800408c:	200010bb 	.word	0x200010bb
 8004090:	200010f2 	.word	0x200010f2
 8004094:	200010f3 	.word	0x200010f3
 8004098:	200010c6 	.word	0x200010c6
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040a2:	4865      	ldr	r0, [pc, #404]	@ (8004238 <checkAktifCalisma+0x390>)
 80040a4:	f007 fa37 	bl	800b516 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80040a8:	4b64      	ldr	r3, [pc, #400]	@ (800423c <checkAktifCalisma+0x394>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <checkAktifCalisma+0x230>
 80040b0:	4b63      	ldr	r3, [pc, #396]	@ (8004240 <checkAktifCalisma+0x398>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d007      	beq.n	80040c8 <checkAktifCalisma+0x220>
 80040b8:	4b61      	ldr	r3, [pc, #388]	@ (8004240 <checkAktifCalisma+0x398>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d003      	beq.n	80040c8 <checkAktifCalisma+0x220>
 80040c0:	4b60      	ldr	r3, [pc, #384]	@ (8004244 <checkAktifCalisma+0x39c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80040c8:	2201      	movs	r2, #1
 80040ca:	2104      	movs	r1, #4
 80040cc:	485a      	ldr	r0, [pc, #360]	@ (8004238 <checkAktifCalisma+0x390>)
 80040ce:	f007 fa22 	bl	800b516 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80040d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004248 <checkAktifCalisma+0x3a0>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80040d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004248 <checkAktifCalisma+0x3a0>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d033      	beq.n	8004148 <checkAktifCalisma+0x2a0>
 80040e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040e4:	4854      	ldr	r0, [pc, #336]	@ (8004238 <checkAktifCalisma+0x390>)
 80040e6:	f007 f9ff 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <checkAktifCalisma+0x256>
 80040f0:	4b56      	ldr	r3, [pc, #344]	@ (800424c <checkAktifCalisma+0x3a4>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <checkAktifCalisma+0x264>
 80040fe:	2102      	movs	r1, #2
 8004100:	4853      	ldr	r0, [pc, #332]	@ (8004250 <checkAktifCalisma+0x3a8>)
 8004102:	f007 f9f1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004106:	4603      	mov	r3, r0
 8004108:	2b01      	cmp	r3, #1
 800410a:	d11d      	bne.n	8004148 <checkAktifCalisma+0x2a0>
 800410c:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <checkAktifCalisma+0x3ac>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <checkAktifCalisma+0x274>
 8004114:	4b50      	ldr	r3, [pc, #320]	@ (8004258 <checkAktifCalisma+0x3b0>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <checkAktifCalisma+0x2a0>
 800411c:	4b4f      	ldr	r3, [pc, #316]	@ (800425c <checkAktifCalisma+0x3b4>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <checkAktifCalisma+0x2a0>
 8004124:	4b4e      	ldr	r3, [pc, #312]	@ (8004260 <checkAktifCalisma+0x3b8>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <checkAktifCalisma+0x2a0>
 800412c:	4b4d      	ldr	r3, [pc, #308]	@ (8004264 <checkAktifCalisma+0x3bc>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <checkAktifCalisma+0x2a0>
					timer2=millis;
 800413a:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <checkAktifCalisma+0x3c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4b      	ldr	r2, [pc, #300]	@ (800426c <checkAktifCalisma+0x3c4>)
 8004140:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8004142:	4b48      	ldr	r3, [pc, #288]	@ (8004264 <checkAktifCalisma+0x3bc>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004148:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <checkAktifCalisma+0x3c0>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b47      	ldr	r3, [pc, #284]	@ (800426c <checkAktifCalisma+0x3c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	4a47      	ldr	r2, [pc, #284]	@ (8004270 <checkAktifCalisma+0x3c8>)
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	4293      	cmp	r3, r2
 8004158:	d303      	bcc.n	8004162 <checkAktifCalisma+0x2ba>
 800415a:	4b42      	ldr	r3, [pc, #264]	@ (8004264 <checkAktifCalisma+0x3bc>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d118      	bne.n	8004194 <checkAktifCalisma+0x2ec>
 8004162:	4b3c      	ldr	r3, [pc, #240]	@ (8004254 <checkAktifCalisma+0x3ac>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <checkAktifCalisma+0x2d6>
 8004170:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <checkAktifCalisma+0x3b0>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	f083 0301 	eor.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <checkAktifCalisma+0x2ec>
 800417e:	4b37      	ldr	r3, [pc, #220]	@ (800425c <checkAktifCalisma+0x3b4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <checkAktifCalisma+0x2ec>
 800418c:	4b34      	ldr	r3, [pc, #208]	@ (8004260 <checkAktifCalisma+0x3b8>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	2104      	movs	r1, #4
 8004198:	4827      	ldr	r0, [pc, #156]	@ (8004238 <checkAktifCalisma+0x390>)
 800419a:	f007 f9bc 	bl	800b516 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800419e:	4b2a      	ldr	r3, [pc, #168]	@ (8004248 <checkAktifCalisma+0x3a0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80041a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004264 <checkAktifCalisma+0x3bc>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80041aa:	4b32      	ldr	r3, [pc, #200]	@ (8004274 <checkAktifCalisma+0x3cc>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <checkAktifCalisma+0x310>
					cerceveVar=1;
 80041b2:	4b31      	ldr	r3, [pc, #196]	@ (8004278 <checkAktifCalisma+0x3d0>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80041b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <checkAktifCalisma+0x3cc>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d116      	bne.n	80041ee <checkAktifCalisma+0x346>
 80041c0:	4b2e      	ldr	r3, [pc, #184]	@ (800427c <checkAktifCalisma+0x3d4>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d112      	bne.n	80041ee <checkAktifCalisma+0x346>
 80041c8:	2101      	movs	r1, #1
 80041ca:	4821      	ldr	r0, [pc, #132]	@ (8004250 <checkAktifCalisma+0x3a8>)
 80041cc:	f007 f98c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <checkAktifCalisma+0x346>
 80041d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041da:	4817      	ldr	r0, [pc, #92]	@ (8004238 <checkAktifCalisma+0x390>)
 80041dc:	f007 f984 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <checkAktifCalisma+0x346>
					cerceveVar=1;
 80041e6:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <checkAktifCalisma+0x3d0>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e011      	b.n	8004212 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80041ee:	4b21      	ldr	r3, [pc, #132]	@ (8004274 <checkAktifCalisma+0x3cc>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10d      	bne.n	8004212 <checkAktifCalisma+0x36a>
 80041f6:	2101      	movs	r1, #1
 80041f8:	4815      	ldr	r0, [pc, #84]	@ (8004250 <checkAktifCalisma+0x3a8>)
 80041fa:	f007 f975 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <checkAktifCalisma+0x36a>
 8004204:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <checkAktifCalisma+0x3d4>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 800420c:	4b1a      	ldr	r3, [pc, #104]	@ (8004278 <checkAktifCalisma+0x3d0>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004212:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <checkAktifCalisma+0x3cc>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d135      	bne.n	8004286 <checkAktifCalisma+0x3de>
 800421a:	4b18      	ldr	r3, [pc, #96]	@ (800427c <checkAktifCalisma+0x3d4>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d131      	bne.n	8004286 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004222:	2101      	movs	r1, #1
 8004224:	480a      	ldr	r0, [pc, #40]	@ (8004250 <checkAktifCalisma+0x3a8>)
 8004226:	f007 f95f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d127      	bne.n	8004280 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <checkAktifCalisma+0x3d0>)
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e026      	b.n	8004286 <checkAktifCalisma+0x3de>
 8004238:	40010c00 	.word	0x40010c00
 800423c:	200010ed 	.word	0x200010ed
 8004240:	200010c7 	.word	0x200010c7
 8004244:	200010cb 	.word	0x200010cb
 8004248:	200010f1 	.word	0x200010f1
 800424c:	200010f4 	.word	0x200010f4
 8004250:	40011000 	.word	0x40011000
 8004254:	2000110a 	.word	0x2000110a
 8004258:	2000111d 	.word	0x2000111d
 800425c:	2000110b 	.word	0x2000110b
 8004260:	200010bb 	.word	0x200010bb
 8004264:	200010e9 	.word	0x200010e9
 8004268:	20001094 	.word	0x20001094
 800426c:	200010a0 	.word	0x200010a0
 8004270:	200010cc 	.word	0x200010cc
 8004274:	200010bc 	.word	0x200010bc
 8004278:	2000110f 	.word	0x2000110f
 800427c:	200010b9 	.word	0x200010b9
					} else {
						cerceveVar=0;
 8004280:	4b7f      	ldr	r3, [pc, #508]	@ (8004480 <checkAktifCalisma+0x5d8>)
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004286:	4b7f      	ldr	r3, [pc, #508]	@ (8004484 <checkAktifCalisma+0x5dc>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d17c      	bne.n	8004388 <checkAktifCalisma+0x4e0>
 800428e:	4b7e      	ldr	r3, [pc, #504]	@ (8004488 <checkAktifCalisma+0x5e0>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d078      	beq.n	8004388 <checkAktifCalisma+0x4e0>
 8004296:	4b7d      	ldr	r3, [pc, #500]	@ (800448c <checkAktifCalisma+0x5e4>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d074      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800429e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042a2:	487b      	ldr	r0, [pc, #492]	@ (8004490 <checkAktifCalisma+0x5e8>)
 80042a4:	f007 f920 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <checkAktifCalisma+0x40e>
 80042ae:	4b79      	ldr	r3, [pc, #484]	@ (8004494 <checkAktifCalisma+0x5ec>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d068      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80042b6:	4b72      	ldr	r3, [pc, #456]	@ (8004480 <checkAktifCalisma+0x5d8>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d064      	beq.n	8004388 <checkAktifCalisma+0x4e0>
 80042be:	4b76      	ldr	r3, [pc, #472]	@ (8004498 <checkAktifCalisma+0x5f0>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05d      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80042cc:	2104      	movs	r1, #4
 80042ce:	4873      	ldr	r0, [pc, #460]	@ (800449c <checkAktifCalisma+0x5f4>)
 80042d0:	f007 f90a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <checkAktifCalisma+0x43a>
 80042da:	4b71      	ldr	r3, [pc, #452]	@ (80044a0 <checkAktifCalisma+0x5f8>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d152      	bne.n	8004388 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80042e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042e6:	486a      	ldr	r0, [pc, #424]	@ (8004490 <checkAktifCalisma+0x5e8>)
 80042e8:	f007 f8fe 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10e      	bne.n	8004310 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80042f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f6:	4866      	ldr	r0, [pc, #408]	@ (8004490 <checkAktifCalisma+0x5e8>)
 80042f8:	f007 f8f6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d106      	bne.n	8004310 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004302:	2140      	movs	r1, #64	@ 0x40
 8004304:	4865      	ldr	r0, [pc, #404]	@ (800449c <checkAktifCalisma+0x5f4>)
 8004306:	f007 f8ef 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d003      	beq.n	8004318 <checkAktifCalisma+0x470>
 8004310:	4b64      	ldr	r3, [pc, #400]	@ (80044a4 <checkAktifCalisma+0x5fc>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d037      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004318:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <checkAktifCalisma+0x600>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f083 0301 	eor.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d030      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004326:	4b61      	ldr	r3, [pc, #388]	@ (80044ac <checkAktifCalisma+0x604>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	f083 0301 	eor.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d029      	beq.n	8004388 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004334:	4b5e      	ldr	r3, [pc, #376]	@ (80044b0 <checkAktifCalisma+0x608>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	f083 0301 	eor.w	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d022      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004342:	4b5c      	ldr	r3, [pc, #368]	@ (80044b4 <checkAktifCalisma+0x60c>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004350:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <checkAktifCalisma+0x610>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	f083 0301 	eor.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800435e:	4b57      	ldr	r3, [pc, #348]	@ (80044bc <checkAktifCalisma+0x614>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	f083 0301 	eor.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800436c:	2201      	movs	r2, #1
 800436e:	2102      	movs	r1, #2
 8004370:	4847      	ldr	r0, [pc, #284]	@ (8004490 <checkAktifCalisma+0x5e8>)
 8004372:	f007 f8d0 	bl	800b516 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004376:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <checkAktifCalisma+0x5fc>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 800437c:	4b50      	ldr	r3, [pc, #320]	@ (80044c0 <checkAktifCalisma+0x618>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004382:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <checkAktifCalisma+0x61c>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004388:	4b46      	ldr	r3, [pc, #280]	@ (80044a4 <checkAktifCalisma+0x5fc>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d033      	beq.n	80043f8 <checkAktifCalisma+0x550>
 8004390:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004394:	483e      	ldr	r0, [pc, #248]	@ (8004490 <checkAktifCalisma+0x5e8>)
 8004396:	f007 f8a7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800439a:	4603      	mov	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <checkAktifCalisma+0x506>
 80043a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004494 <checkAktifCalisma+0x5ec>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <checkAktifCalisma+0x51c>
 80043ae:	2104      	movs	r1, #4
 80043b0:	483a      	ldr	r0, [pc, #232]	@ (800449c <checkAktifCalisma+0x5f4>)
 80043b2:	f007 f899 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d11d      	bne.n	80043f8 <checkAktifCalisma+0x550>
 80043bc:	4b38      	ldr	r3, [pc, #224]	@ (80044a0 <checkAktifCalisma+0x5f8>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <checkAktifCalisma+0x550>
 80043c4:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <checkAktifCalisma+0x5e0>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <checkAktifCalisma+0x550>
 80043cc:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <checkAktifCalisma+0x5e4>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d011      	beq.n	80043f8 <checkAktifCalisma+0x550>
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <checkAktifCalisma+0x5d8>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <checkAktifCalisma+0x550>
 80043dc:	4b3a      	ldr	r3, [pc, #232]	@ (80044c8 <checkAktifCalisma+0x620>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f083 0301 	eor.w	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <checkAktifCalisma+0x550>
					timer2=millis;
 80043ea:	4b38      	ldr	r3, [pc, #224]	@ (80044cc <checkAktifCalisma+0x624>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a38      	ldr	r2, [pc, #224]	@ (80044d0 <checkAktifCalisma+0x628>)
 80043f0:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80043f2:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <checkAktifCalisma+0x620>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <checkAktifCalisma+0x624>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <checkAktifCalisma+0x628>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4a34      	ldr	r2, [pc, #208]	@ (80044d4 <checkAktifCalisma+0x62c>)
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	4293      	cmp	r3, r2
 8004408:	d303      	bcc.n	8004412 <checkAktifCalisma+0x56a>
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <checkAktifCalisma+0x620>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d114      	bne.n	800443c <checkAktifCalisma+0x594>
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <checkAktifCalisma+0x5e0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <checkAktifCalisma+0x594>
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <checkAktifCalisma+0x5e4>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <checkAktifCalisma+0x594>
 800442e:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <checkAktifCalisma+0x5d8>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800443c:	2200      	movs	r2, #0
 800443e:	2102      	movs	r1, #2
 8004440:	4813      	ldr	r0, [pc, #76]	@ (8004490 <checkAktifCalisma+0x5e8>)
 8004442:	f007 f868 	bl	800b516 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004446:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <checkAktifCalisma+0x5fc>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 800444c:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <checkAktifCalisma+0x620>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <checkAktifCalisma+0x5fc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d040      	beq.n	80044dc <checkAktifCalisma+0x634>
 800445a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800445e:	480f      	ldr	r0, [pc, #60]	@ (800449c <checkAktifCalisma+0x5f4>)
 8004460:	f007 f842 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d138      	bne.n	80044dc <checkAktifCalisma+0x634>
 800446a:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <checkAktifCalisma+0x630>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d034      	beq.n	80044dc <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004472:	2201      	movs	r2, #1
 8004474:	2101      	movs	r1, #1
 8004476:	4806      	ldr	r0, [pc, #24]	@ (8004490 <checkAktifCalisma+0x5e8>)
 8004478:	f007 f84d 	bl	800b516 <HAL_GPIO_WritePin>
 800447c:	e033      	b.n	80044e6 <checkAktifCalisma+0x63e>
 800447e:	bf00      	nop
 8004480:	2000110f 	.word	0x2000110f
 8004484:	200010d5 	.word	0x200010d5
 8004488:	2000110a 	.word	0x2000110a
 800448c:	2000110b 	.word	0x2000110b
 8004490:	40010c00 	.word	0x40010c00
 8004494:	200010f5 	.word	0x200010f5
 8004498:	20001109 	.word	0x20001109
 800449c:	40011000 	.word	0x40011000
 80044a0:	200010be 	.word	0x200010be
 80044a4:	200010f0 	.word	0x200010f0
 80044a8:	200010ed 	.word	0x200010ed
 80044ac:	200010f1 	.word	0x200010f1
 80044b0:	200010ee 	.word	0x200010ee
 80044b4:	200010ef 	.word	0x200010ef
 80044b8:	200010f2 	.word	0x200010f2
 80044bc:	200010f3 	.word	0x200010f3
 80044c0:	200010f8 	.word	0x200010f8
 80044c4:	20001119 	.word	0x20001119
 80044c8:	200010e8 	.word	0x200010e8
 80044cc:	20001094 	.word	0x20001094
 80044d0:	200010a0 	.word	0x200010a0
 80044d4:	200010cd 	.word	0x200010cd
 80044d8:	200010bd 	.word	0x200010bd
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80044dc:	2200      	movs	r2, #0
 80044de:	2101      	movs	r1, #1
 80044e0:	4836      	ldr	r0, [pc, #216]	@ (80045bc <checkAktifCalisma+0x714>)
 80044e2:	f007 f818 	bl	800b516 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 80044e6:	4b36      	ldr	r3, [pc, #216]	@ (80045c0 <checkAktifCalisma+0x718>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 8080 	bne.w	80045f0 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80044f0:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <checkAktifCalisma+0x71c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d003      	beq.n	8004500 <checkAktifCalisma+0x658>
 80044f8:	4b32      	ldr	r3, [pc, #200]	@ (80045c4 <checkAktifCalisma+0x71c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d177      	bne.n	80045f0 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004500:	4b31      	ldr	r3, [pc, #196]	@ (80045c8 <checkAktifCalisma+0x720>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d073      	beq.n	80045f0 <checkAktifCalisma+0x748>
 8004508:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <checkAktifCalisma+0x724>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d06f      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004514:	4829      	ldr	r0, [pc, #164]	@ (80045bc <checkAktifCalisma+0x714>)
 8004516:	f006 ffe7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d167      	bne.n	80045f0 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004520:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004524:	482a      	ldr	r0, [pc, #168]	@ (80045d0 <checkAktifCalisma+0x728>)
 8004526:	f006 ffdf 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <checkAktifCalisma+0x690>
 8004530:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <checkAktifCalisma+0x72c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d15b      	bne.n	80045f0 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004538:	2140      	movs	r1, #64	@ 0x40
 800453a:	4825      	ldr	r0, [pc, #148]	@ (80045d0 <checkAktifCalisma+0x728>)
 800453c:	f006 ffd4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10f      	bne.n	8004566 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800454a:	481c      	ldr	r0, [pc, #112]	@ (80045bc <checkAktifCalisma+0x714>)
 800454c:	f006 ffcc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004556:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800455a:	4818      	ldr	r0, [pc, #96]	@ (80045bc <checkAktifCalisma+0x714>)
 800455c:	f006 ffc4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d003      	beq.n	800456e <checkAktifCalisma+0x6c6>
 8004566:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <checkAktifCalisma+0x730>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d040      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 800456e:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <checkAktifCalisma+0x734>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	f083 0301 	eor.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d039      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 800457c:	4b18      	ldr	r3, [pc, #96]	@ (80045e0 <checkAktifCalisma+0x738>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d032      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 800458a:	4b16      	ldr	r3, [pc, #88]	@ (80045e4 <checkAktifCalisma+0x73c>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f083 0301 	eor.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02b      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004598:	4b13      	ldr	r3, [pc, #76]	@ (80045e8 <checkAktifCalisma+0x740>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f083 0301 	eor.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d024      	beq.n	80045f0 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80045a6:	4b11      	ldr	r3, [pc, #68]	@ (80045ec <checkAktifCalisma+0x744>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01d      	beq.n	80045f0 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 80045b4:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <checkAktifCalisma+0x730>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e01c      	b.n	80045f6 <checkAktifCalisma+0x74e>
 80045bc:	40010c00 	.word	0x40010c00
 80045c0:	200010d5 	.word	0x200010d5
 80045c4:	200010c7 	.word	0x200010c7
 80045c8:	2000110a 	.word	0x2000110a
 80045cc:	2000110b 	.word	0x2000110b
 80045d0:	40011000 	.word	0x40011000
 80045d4:	200010c8 	.word	0x200010c8
 80045d8:	200010ee 	.word	0x200010ee
 80045dc:	200010ed 	.word	0x200010ed
 80045e0:	200010f1 	.word	0x200010f1
 80045e4:	200010f0 	.word	0x200010f0
 80045e8:	200010ef 	.word	0x200010ef
 80045ec:	200010f3 	.word	0x200010f3
				} else {
					devmotoryukaricalisiyor=0;
 80045f0:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <checkAktifCalisma+0x8dc>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80045f6:	4b63      	ldr	r3, [pc, #396]	@ (8004784 <checkAktifCalisma+0x8dc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80045fe:	2201      	movs	r2, #1
 8004600:	2120      	movs	r1, #32
 8004602:	4861      	ldr	r0, [pc, #388]	@ (8004788 <checkAktifCalisma+0x8e0>)
 8004604:	f006 ff87 	bl	800b516 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004608:	4b60      	ldr	r3, [pc, #384]	@ (800478c <checkAktifCalisma+0x8e4>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800460e:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <checkAktifCalisma+0x8e4>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d025      	beq.n	8004662 <checkAktifCalisma+0x7ba>
 8004616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800461a:	485d      	ldr	r0, [pc, #372]	@ (8004790 <checkAktifCalisma+0x8e8>)
 800461c:	f006 ff64 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d007      	beq.n	8004636 <checkAktifCalisma+0x78e>
 8004626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800462a:	4857      	ldr	r0, [pc, #348]	@ (8004788 <checkAktifCalisma+0x8e0>)
 800462c:	f006 ff5c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d115      	bne.n	8004662 <checkAktifCalisma+0x7ba>
 8004636:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <checkAktifCalisma+0x8ec>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <checkAktifCalisma+0x7ba>
 800463e:	4b56      	ldr	r3, [pc, #344]	@ (8004798 <checkAktifCalisma+0x8f0>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <checkAktifCalisma+0x7ba>
 8004646:	4b55      	ldr	r3, [pc, #340]	@ (800479c <checkAktifCalisma+0x8f4>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	f083 0301 	eor.w	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004654:	4b52      	ldr	r3, [pc, #328]	@ (80047a0 <checkAktifCalisma+0x8f8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a52      	ldr	r2, [pc, #328]	@ (80047a4 <checkAktifCalisma+0x8fc>)
 800465a:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 800465c:	4b4f      	ldr	r3, [pc, #316]	@ (800479c <checkAktifCalisma+0x8f4>)
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004662:	4b4f      	ldr	r3, [pc, #316]	@ (80047a0 <checkAktifCalisma+0x8f8>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b4f      	ldr	r3, [pc, #316]	@ (80047a4 <checkAktifCalisma+0x8fc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	4a4e      	ldr	r2, [pc, #312]	@ (80047a8 <checkAktifCalisma+0x900>)
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	4293      	cmp	r3, r2
 8004672:	d303      	bcc.n	800467c <checkAktifCalisma+0x7d4>
 8004674:	4b49      	ldr	r3, [pc, #292]	@ (800479c <checkAktifCalisma+0x8f4>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <checkAktifCalisma+0x7f0>
 800467c:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <checkAktifCalisma+0x8ec>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f083 0301 	eor.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <checkAktifCalisma+0x7f0>
 800468a:	4b43      	ldr	r3, [pc, #268]	@ (8004798 <checkAktifCalisma+0x8f0>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f083 0301 	eor.w	r3, r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	2120      	movs	r1, #32
 800469c:	483a      	ldr	r0, [pc, #232]	@ (8004788 <checkAktifCalisma+0x8e0>)
 800469e:	f006 ff3a 	bl	800b516 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80046a2:	4b3a      	ldr	r3, [pc, #232]	@ (800478c <checkAktifCalisma+0x8e4>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 80046a8:	4b3c      	ldr	r3, [pc, #240]	@ (800479c <checkAktifCalisma+0x8f4>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 80046ae:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <checkAktifCalisma+0x904>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8088 	bne.w	80047c8 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80046b8:	4b3d      	ldr	r3, [pc, #244]	@ (80047b0 <checkAktifCalisma+0x908>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d003      	beq.n	80046c8 <checkAktifCalisma+0x820>
 80046c0:	4b3b      	ldr	r3, [pc, #236]	@ (80047b0 <checkAktifCalisma+0x908>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d17f      	bne.n	80047c8 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 80046c8:	4b32      	ldr	r3, [pc, #200]	@ (8004794 <checkAktifCalisma+0x8ec>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d07b      	beq.n	80047c8 <checkAktifCalisma+0x920>
 80046d0:	4b31      	ldr	r3, [pc, #196]	@ (8004798 <checkAktifCalisma+0x8f0>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d077      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80046d8:	2140      	movs	r1, #64	@ 0x40
 80046da:	482b      	ldr	r0, [pc, #172]	@ (8004788 <checkAktifCalisma+0x8e0>)
 80046dc:	f006 ff04 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d170      	bne.n	80047c8 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80046e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046ea:	4827      	ldr	r0, [pc, #156]	@ (8004788 <checkAktifCalisma+0x8e0>)
 80046ec:	f006 fefc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <checkAktifCalisma+0x856>
 80046f6:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <checkAktifCalisma+0x90c>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d164      	bne.n	80047c8 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80046fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004702:	4823      	ldr	r0, [pc, #140]	@ (8004790 <checkAktifCalisma+0x8e8>)
 8004704:	f006 fef0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10f      	bne.n	800472e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800470e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004712:	481f      	ldr	r0, [pc, #124]	@ (8004790 <checkAktifCalisma+0x8e8>)
 8004714:	f006 fee8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800471e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004722:	481b      	ldr	r0, [pc, #108]	@ (8004790 <checkAktifCalisma+0x8e8>)
 8004724:	f006 fee0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d003      	beq.n	8004736 <checkAktifCalisma+0x88e>
 800472e:	4b22      	ldr	r3, [pc, #136]	@ (80047b8 <checkAktifCalisma+0x910>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d048      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004736:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <checkAktifCalisma+0x914>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	f083 0301 	eor.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d041      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <checkAktifCalisma+0x918>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f083 0301 	eor.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d03a      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004752:	4b1c      	ldr	r3, [pc, #112]	@ (80047c4 <checkAktifCalisma+0x91c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d033      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <checkAktifCalisma+0x8e4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f083 0301 	eor.w	r3, r3, #1
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02c      	beq.n	80047c8 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 800476e:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <checkAktifCalisma+0x8dc>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f083 0301 	eor.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d025      	beq.n	80047c8 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 800477c:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <checkAktifCalisma+0x910>)
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e024      	b.n	80047ce <checkAktifCalisma+0x926>
 8004784:	200010ee 	.word	0x200010ee
 8004788:	40011000 	.word	0x40011000
 800478c:	200010f2 	.word	0x200010f2
 8004790:	40010c00 	.word	0x40010c00
 8004794:	2000110a 	.word	0x2000110a
 8004798:	2000110b 	.word	0x2000110b
 800479c:	200010ea 	.word	0x200010ea
 80047a0:	20001094 	.word	0x20001094
 80047a4:	200010a0 	.word	0x200010a0
 80047a8:	200010ce 	.word	0x200010ce
 80047ac:	200010d5 	.word	0x200010d5
 80047b0:	200010c7 	.word	0x200010c7
 80047b4:	200010c9 	.word	0x200010c9
 80047b8:	200010ef 	.word	0x200010ef
 80047bc:	200010ed 	.word	0x200010ed
 80047c0:	200010f1 	.word	0x200010f1
 80047c4:	200010f0 	.word	0x200010f0
				} else {
					devmotorasagicalisiyor=0;
 80047c8:	4b96      	ldr	r3, [pc, #600]	@ (8004a24 <checkAktifCalisma+0xb7c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 80047ce:	4b95      	ldr	r3, [pc, #596]	@ (8004a24 <checkAktifCalisma+0xb7c>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80047d6:	2201      	movs	r2, #1
 80047d8:	2110      	movs	r1, #16
 80047da:	4893      	ldr	r0, [pc, #588]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80047dc:	f006 fe9b 	bl	800b516 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 80047e0:	4b92      	ldr	r3, [pc, #584]	@ (8004a2c <checkAktifCalisma+0xb84>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80047e6:	4b91      	ldr	r3, [pc, #580]	@ (8004a2c <checkAktifCalisma+0xb84>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d024      	beq.n	8004838 <checkAktifCalisma+0x990>
 80047ee:	2140      	movs	r1, #64	@ 0x40
 80047f0:	488d      	ldr	r0, [pc, #564]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80047f2:	f006 fe79 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d007      	beq.n	800480c <checkAktifCalisma+0x964>
 80047fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004800:	4889      	ldr	r0, [pc, #548]	@ (8004a28 <checkAktifCalisma+0xb80>)
 8004802:	f006 fe71 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004806:	4603      	mov	r3, r0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d115      	bne.n	8004838 <checkAktifCalisma+0x990>
 800480c:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <checkAktifCalisma+0xb88>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d011      	beq.n	8004838 <checkAktifCalisma+0x990>
 8004814:	4b87      	ldr	r3, [pc, #540]	@ (8004a34 <checkAktifCalisma+0xb8c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <checkAktifCalisma+0x990>
 800481c:	4b86      	ldr	r3, [pc, #536]	@ (8004a38 <checkAktifCalisma+0xb90>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f083 0301 	eor.w	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <checkAktifCalisma+0x990>
					timer2=millis;
 800482a:	4b84      	ldr	r3, [pc, #528]	@ (8004a3c <checkAktifCalisma+0xb94>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a84      	ldr	r2, [pc, #528]	@ (8004a40 <checkAktifCalisma+0xb98>)
 8004830:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004832:	4b81      	ldr	r3, [pc, #516]	@ (8004a38 <checkAktifCalisma+0xb90>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004838:	4b80      	ldr	r3, [pc, #512]	@ (8004a3c <checkAktifCalisma+0xb94>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b80      	ldr	r3, [pc, #512]	@ (8004a40 <checkAktifCalisma+0xb98>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <checkAktifCalisma+0xb9c>)
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	d303      	bcc.n	8004852 <checkAktifCalisma+0x9aa>
 800484a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a38 <checkAktifCalisma+0xb90>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <checkAktifCalisma+0x9c6>
 8004852:	4b77      	ldr	r3, [pc, #476]	@ (8004a30 <checkAktifCalisma+0xb88>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f083 0301 	eor.w	r3, r3, #1
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <checkAktifCalisma+0x9c6>
 8004860:	4b74      	ldr	r3, [pc, #464]	@ (8004a34 <checkAktifCalisma+0xb8c>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f083 0301 	eor.w	r3, r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800486e:	2200      	movs	r2, #0
 8004870:	2110      	movs	r1, #16
 8004872:	486d      	ldr	r0, [pc, #436]	@ (8004a28 <checkAktifCalisma+0xb80>)
 8004874:	f006 fe4f 	bl	800b516 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004878:	4b6c      	ldr	r3, [pc, #432]	@ (8004a2c <checkAktifCalisma+0xb84>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 800487e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a38 <checkAktifCalisma+0xb90>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004888:	486f      	ldr	r0, [pc, #444]	@ (8004a48 <checkAktifCalisma+0xba0>)
 800488a:	f006 fe2d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d120      	bne.n	80048d6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004894:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004898:	486b      	ldr	r0, [pc, #428]	@ (8004a48 <checkAktifCalisma+0xba0>)
 800489a:	f006 fe25 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d118      	bne.n	80048d6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80048a4:	2104      	movs	r1, #4
 80048a6:	4868      	ldr	r0, [pc, #416]	@ (8004a48 <checkAktifCalisma+0xba0>)
 80048a8:	f006 fe1e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d111      	bne.n	80048d6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80048b2:	2102      	movs	r1, #2
 80048b4:	4864      	ldr	r0, [pc, #400]	@ (8004a48 <checkAktifCalisma+0xba0>)
 80048b6:	f006 fe17 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80048c0:	2101      	movs	r1, #1
 80048c2:	4861      	ldr	r0, [pc, #388]	@ (8004a48 <checkAktifCalisma+0xba0>)
 80048c4:	f006 fe10 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <checkAktifCalisma+0xa2e>
					makineStop=1;
 80048ce:	4b5f      	ldr	r3, [pc, #380]	@ (8004a4c <checkAktifCalisma+0xba4>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e002      	b.n	80048dc <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 80048d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a4c <checkAktifCalisma+0xba4>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80048dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004a50 <checkAktifCalisma+0xba8>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d144      	bne.n	800496e <checkAktifCalisma+0xac6>
 80048e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a54 <checkAktifCalisma+0xbac>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d003      	beq.n	80048f4 <checkAktifCalisma+0xa4c>
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <checkAktifCalisma+0xbac>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d13c      	bne.n	800496e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80048f4:	2180      	movs	r1, #128	@ 0x80
 80048f6:	484c      	ldr	r0, [pc, #304]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80048f8:	f006 fdf6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <checkAktifCalisma+0xa62>
 8004902:	4b55      	ldr	r3, [pc, #340]	@ (8004a58 <checkAktifCalisma+0xbb0>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <checkAktifCalisma+0xa7a>
 800490a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800490e:	484e      	ldr	r0, [pc, #312]	@ (8004a48 <checkAktifCalisma+0xba0>)
 8004910:	f006 fdea 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d129      	bne.n	800496e <checkAktifCalisma+0xac6>
 800491a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <checkAktifCalisma+0xbb0>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d125      	bne.n	800496e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004922:	2104      	movs	r1, #4
 8004924:	4840      	ldr	r0, [pc, #256]	@ (8004a28 <checkAktifCalisma+0xb80>)
 8004926:	f006 fddf 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d003      	beq.n	8004938 <checkAktifCalisma+0xa90>
 8004930:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <checkAktifCalisma+0xbb4>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11a      	bne.n	800496e <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004938:	2102      	movs	r1, #2
 800493a:	483b      	ldr	r0, [pc, #236]	@ (8004a28 <checkAktifCalisma+0xb80>)
 800493c:	f006 fdd4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d113      	bne.n	800496e <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <checkAktifCalisma+0xbb8>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004954:	4b3d      	ldr	r3, [pc, #244]	@ (8004a4c <checkAktifCalisma+0xba4>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 800495c:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <checkAktifCalisma+0xbbc>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004962:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <checkAktifCalisma+0xb94>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a40      	ldr	r2, [pc, #256]	@ (8004a68 <checkAktifCalisma+0xbc0>)
 8004968:	6013      	str	r3, [r2, #0]
					bekle();
 800496a:	f7ff f901 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <checkAktifCalisma+0xb94>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b3d      	ldr	r3, [pc, #244]	@ (8004a68 <checkAktifCalisma+0xbc0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	4a3c      	ldr	r2, [pc, #240]	@ (8004a6c <checkAktifCalisma+0xbc4>)
 800497a:	7812      	ldrb	r2, [r2, #0]
 800497c:	4293      	cmp	r3, r2
 800497e:	d211      	bcs.n	80049a4 <checkAktifCalisma+0xafc>
 8004980:	2104      	movs	r1, #4
 8004982:	4829      	ldr	r0, [pc, #164]	@ (8004a28 <checkAktifCalisma+0xb80>)
 8004984:	f006 fdb0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <checkAktifCalisma+0xafc>
 800498e:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <checkAktifCalisma+0xbb4>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <checkAktifCalisma+0xafc>
 8004996:	4b2d      	ldr	r3, [pc, #180]	@ (8004a4c <checkAktifCalisma+0xba4>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	f083 0301 	eor.w	r3, r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 80049a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <checkAktifCalisma+0xbbc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80049aa:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <checkAktifCalisma+0xba8>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d160      	bne.n	8004a74 <checkAktifCalisma+0xbcc>
 80049b2:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <checkAktifCalisma+0xbac>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d003      	beq.n	80049c2 <checkAktifCalisma+0xb1a>
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <checkAktifCalisma+0xbac>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d158      	bne.n	8004a74 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80049c2:	2104      	movs	r1, #4
 80049c4:	4818      	ldr	r0, [pc, #96]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80049c6:	f006 fd8f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d003      	beq.n	80049d8 <checkAktifCalisma+0xb30>
 80049d0:	4b22      	ldr	r3, [pc, #136]	@ (8004a5c <checkAktifCalisma+0xbb4>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14d      	bne.n	8004a74 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80049d8:	2102      	movs	r1, #2
 80049da:	4813      	ldr	r0, [pc, #76]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80049dc:	f006 fd84 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d146      	bne.n	8004a74 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80049e6:	2180      	movs	r1, #128	@ 0x80
 80049e8:	480f      	ldr	r0, [pc, #60]	@ (8004a28 <checkAktifCalisma+0xb80>)
 80049ea:	f006 fd7d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <checkAktifCalisma+0xb54>
 80049f4:	4b18      	ldr	r3, [pc, #96]	@ (8004a58 <checkAktifCalisma+0xbb0>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <checkAktifCalisma+0xb6c>
 80049fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a00:	4811      	ldr	r0, [pc, #68]	@ (8004a48 <checkAktifCalisma+0xba0>)
 8004a02:	f006 fd71 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d133      	bne.n	8004a74 <checkAktifCalisma+0xbcc>
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <checkAktifCalisma+0xbb0>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d12f      	bne.n	8004a74 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004a14:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <checkAktifCalisma+0xba4>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02b      	beq.n	8004a74 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004a1c:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <checkAktifCalisma+0xbc8>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e02a      	b.n	8004a7a <checkAktifCalisma+0xbd2>
 8004a24:	200010ef 	.word	0x200010ef
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	200010f3 	.word	0x200010f3
 8004a30:	2000110a 	.word	0x2000110a
 8004a34:	2000110b 	.word	0x2000110b
 8004a38:	200010eb 	.word	0x200010eb
 8004a3c:	20001094 	.word	0x20001094
 8004a40:	200010a0 	.word	0x200010a0
 8004a44:	200010ce 	.word	0x200010ce
 8004a48:	40010c00 	.word	0x40010c00
 8004a4c:	200010fa 	.word	0x200010fa
 8004a50:	200010c1 	.word	0x200010c1
 8004a54:	200010c0 	.word	0x200010c0
 8004a58:	200010c4 	.word	0x200010c4
 8004a5c:	200010be 	.word	0x200010be
 8004a60:	200010e7 	.word	0x200010e7
 8004a64:	200010fb 	.word	0x200010fb
 8004a68:	20001098 	.word	0x20001098
 8004a6c:	200010d1 	.word	0x200010d1
 8004a70:	200010fc 	.word	0x200010fc
				} else {
					kapi1butonkontrol=0;
 8004a74:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca4 <checkAktifCalisma+0xdfc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca8 <checkAktifCalisma+0xe00>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d121      	bne.n	8004ac6 <checkAktifCalisma+0xc1e>
 8004a82:	4b8a      	ldr	r3, [pc, #552]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d003      	beq.n	8004a92 <checkAktifCalisma+0xbea>
 8004a8a:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d119      	bne.n	8004ac6 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004a92:	2104      	movs	r1, #4
 8004a94:	4886      	ldr	r0, [pc, #536]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004a96:	f006 fd27 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d003      	beq.n	8004aa8 <checkAktifCalisma+0xc00>
 8004aa0:	4b84      	ldr	r3, [pc, #528]	@ (8004cb4 <checkAktifCalisma+0xe0c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10e      	bne.n	8004ac6 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	4881      	ldr	r0, [pc, #516]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004aac:	f006 fd1c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004ab6:	4b80      	ldr	r3, [pc, #512]	@ (8004cb8 <checkAktifCalisma+0xe10>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004abe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cbc <checkAktifCalisma+0xe14>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e002      	b.n	8004acc <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cbc <checkAktifCalisma+0xe14>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004acc:	4b75      	ldr	r3, [pc, #468]	@ (8004ca4 <checkAktifCalisma+0xdfc>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <checkAktifCalisma+0xc3c>
 8004ad4:	4b79      	ldr	r3, [pc, #484]	@ (8004cbc <checkAktifCalisma+0xe14>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <checkAktifCalisma+0xc3c>
 8004adc:	4b78      	ldr	r3, [pc, #480]	@ (8004cc0 <checkAktifCalisma+0xe18>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	4876      	ldr	r0, [pc, #472]	@ (8004cc4 <checkAktifCalisma+0xe1c>)
 8004aea:	f006 fd14 	bl	800b516 <HAL_GPIO_WritePin>
 8004aee:	e004      	b.n	8004afa <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2180      	movs	r1, #128	@ 0x80
 8004af4:	4873      	ldr	r0, [pc, #460]	@ (8004cc4 <checkAktifCalisma+0xe1c>)
 8004af6:	f006 fd0e 	bl	800b516 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004afa:	4b73      	ldr	r3, [pc, #460]	@ (8004cc8 <checkAktifCalisma+0xe20>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d141      	bne.n	8004b86 <checkAktifCalisma+0xcde>
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d003      	beq.n	8004b12 <checkAktifCalisma+0xc6a>
 8004b0a:	4b68      	ldr	r3, [pc, #416]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d139      	bne.n	8004b86 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b16:	4866      	ldr	r0, [pc, #408]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004b18:	f006 fce6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <checkAktifCalisma+0xc82>
 8004b22:	4b6a      	ldr	r3, [pc, #424]	@ (8004ccc <checkAktifCalisma+0xe24>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <checkAktifCalisma+0xc9a>
 8004b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b2e:	4868      	ldr	r0, [pc, #416]	@ (8004cd0 <checkAktifCalisma+0xe28>)
 8004b30:	f006 fcda 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d125      	bne.n	8004b86 <checkAktifCalisma+0xcde>
 8004b3a:	4b64      	ldr	r3, [pc, #400]	@ (8004ccc <checkAktifCalisma+0xe24>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d121      	bne.n	8004b86 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004b42:	2102      	movs	r1, #2
 8004b44:	485a      	ldr	r0, [pc, #360]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004b46:	f006 fccf 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d11a      	bne.n	8004b86 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004b50:	2104      	movs	r1, #4
 8004b52:	4857      	ldr	r0, [pc, #348]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004b54:	f006 fcc8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d113      	bne.n	8004b86 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004b5e:	4b56      	ldr	r3, [pc, #344]	@ (8004cb8 <checkAktifCalisma+0xe10>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004b66:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd4 <checkAktifCalisma+0xe2c>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	f083 0301 	eor.w	r3, r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004b74:	4b58      	ldr	r3, [pc, #352]	@ (8004cd8 <checkAktifCalisma+0xe30>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004b7a:	4b58      	ldr	r3, [pc, #352]	@ (8004cdc <checkAktifCalisma+0xe34>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a58      	ldr	r2, [pc, #352]	@ (8004ce0 <checkAktifCalisma+0xe38>)
 8004b80:	6013      	str	r3, [r2, #0]
					bekle();
 8004b82:	f7fe fff5 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004b86:	4b55      	ldr	r3, [pc, #340]	@ (8004cdc <checkAktifCalisma+0xe34>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b55      	ldr	r3, [pc, #340]	@ (8004ce0 <checkAktifCalisma+0xe38>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	4a54      	ldr	r2, [pc, #336]	@ (8004ce4 <checkAktifCalisma+0xe3c>)
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d20d      	bcs.n	8004bb4 <checkAktifCalisma+0xd0c>
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4845      	ldr	r0, [pc, #276]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004b9c:	f006 fca4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <checkAktifCalisma+0xd0c>
 8004ba6:	4b44      	ldr	r3, [pc, #272]	@ (8004cb8 <checkAktifCalisma+0xe10>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	f083 0301 	eor.w	r3, r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004bb4:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <checkAktifCalisma+0xe30>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bba:	4b43      	ldr	r3, [pc, #268]	@ (8004cc8 <checkAktifCalisma+0xe20>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d135      	bne.n	8004c2e <checkAktifCalisma+0xd86>
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d003      	beq.n	8004bd2 <checkAktifCalisma+0xd2a>
 8004bca:	4b38      	ldr	r3, [pc, #224]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d12d      	bne.n	8004c2e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004bd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bd6:	4836      	ldr	r0, [pc, #216]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004bd8:	f006 fc86 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <checkAktifCalisma+0xd42>
 8004be2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <checkAktifCalisma+0xe24>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <checkAktifCalisma+0xd5a>
 8004bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bee:	4838      	ldr	r0, [pc, #224]	@ (8004cd0 <checkAktifCalisma+0xe28>)
 8004bf0:	f006 fc7a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d119      	bne.n	8004c2e <checkAktifCalisma+0xd86>
 8004bfa:	4b34      	ldr	r3, [pc, #208]	@ (8004ccc <checkAktifCalisma+0xe24>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d115      	bne.n	8004c2e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c02:	2102      	movs	r1, #2
 8004c04:	482a      	ldr	r0, [pc, #168]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004c06:	f006 fc6f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10e      	bne.n	8004c2e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c10:	2104      	movs	r1, #4
 8004c12:	4827      	ldr	r0, [pc, #156]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004c14:	f006 fc68 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004c1e:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <checkAktifCalisma+0xe10>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004c26:	4b30      	ldr	r3, [pc, #192]	@ (8004ce8 <checkAktifCalisma+0xe40>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e002      	b.n	8004c34 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce8 <checkAktifCalisma+0xe40>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c34:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <checkAktifCalisma+0xe20>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d11d      	bne.n	8004c78 <checkAktifCalisma+0xdd0>
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d003      	beq.n	8004c4c <checkAktifCalisma+0xda4>
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <checkAktifCalisma+0xe04>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d115      	bne.n	8004c78 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	4818      	ldr	r0, [pc, #96]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004c50:	f006 fc4a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10e      	bne.n	8004c78 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	4814      	ldr	r0, [pc, #80]	@ (8004cb0 <checkAktifCalisma+0xe08>)
 8004c5e:	f006 fc43 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004c68:	4b13      	ldr	r3, [pc, #76]	@ (8004cb8 <checkAktifCalisma+0xe10>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004c70:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <checkAktifCalisma+0xe44>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004c78:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <checkAktifCalisma+0xe44>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <checkAktifCalisma+0xe40>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <checkAktifCalisma+0xdee>
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <checkAktifCalisma+0xe44>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <checkAktifCalisma+0xdee>
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <checkAktifCalisma+0xe30>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02c      	beq.n	8004cf0 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004c96:	2201      	movs	r2, #1
 8004c98:	2140      	movs	r1, #64	@ 0x40
 8004c9a:	480a      	ldr	r0, [pc, #40]	@ (8004cc4 <checkAktifCalisma+0xe1c>)
 8004c9c:	f006 fc3b 	bl	800b516 <HAL_GPIO_WritePin>
 8004ca0:	e02b      	b.n	8004cfa <checkAktifCalisma+0xe52>
 8004ca2:	bf00      	nop
 8004ca4:	200010fc 	.word	0x200010fc
 8004ca8:	200010c1 	.word	0x200010c1
 8004cac:	200010c0 	.word	0x200010c0
 8004cb0:	40011000 	.word	0x40011000
 8004cb4:	200010be 	.word	0x200010be
 8004cb8:	200010fa 	.word	0x200010fa
 8004cbc:	200010fd 	.word	0x200010fd
 8004cc0:	200010fb 	.word	0x200010fb
 8004cc4:	40010800 	.word	0x40010800
 8004cc8:	200010c2 	.word	0x200010c2
 8004ccc:	200010c4 	.word	0x200010c4
 8004cd0:	40010c00 	.word	0x40010c00
 8004cd4:	200010e7 	.word	0x200010e7
 8004cd8:	200010fe 	.word	0x200010fe
 8004cdc:	20001094 	.word	0x20001094
 8004ce0:	20001098 	.word	0x20001098
 8004ce4:	200010d2 	.word	0x200010d2
 8004ce8:	200010ff 	.word	0x200010ff
 8004cec:	20001100 	.word	0x20001100
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2140      	movs	r1, #64	@ 0x40
 8004cf4:	4835      	ldr	r0, [pc, #212]	@ (8004dcc <checkAktifCalisma+0xf24>)
 8004cf6:	f006 fc0e 	bl	800b516 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004cfa:	4b35      	ldr	r3, [pc, #212]	@ (8004dd0 <checkAktifCalisma+0xf28>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <checkAktifCalisma+0xe62>
 8004d02:	4b33      	ldr	r3, [pc, #204]	@ (8004dd0 <checkAktifCalisma+0xf28>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d115      	bne.n	8004d36 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	4831      	ldr	r0, [pc, #196]	@ (8004dd4 <checkAktifCalisma+0xf2c>)
 8004d0e:	f006 fbeb 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d003      	beq.n	8004d20 <checkAktifCalisma+0xe78>
 8004d18:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd8 <checkAktifCalisma+0xf30>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004d20:	2102      	movs	r1, #2
 8004d22:	482c      	ldr	r0, [pc, #176]	@ (8004dd4 <checkAktifCalisma+0xf2c>)
 8004d24:	f006 fbe0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <checkAktifCalisma+0xf34>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e002      	b.n	8004d3c <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004d36:	4b29      	ldr	r3, [pc, #164]	@ (8004ddc <checkAktifCalisma+0xf34>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004d3c:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <checkAktifCalisma+0xf28>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d003      	beq.n	8004d4c <checkAktifCalisma+0xea4>
 8004d44:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <checkAktifCalisma+0xf28>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d111      	bne.n	8004d70 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4821      	ldr	r0, [pc, #132]	@ (8004dd4 <checkAktifCalisma+0xf2c>)
 8004d50:	f006 fbca 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10a      	bne.n	8004d70 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	481d      	ldr	r0, [pc, #116]	@ (8004dd4 <checkAktifCalisma+0xf2c>)
 8004d5e:	f006 fbc3 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <checkAktifCalisma+0xf38>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004d70:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <checkAktifCalisma+0xf38>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004d76:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <checkAktifCalisma+0xf34>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00f      	beq.n	8004d9e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004d7e:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <checkAktifCalisma+0xf3c>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10b      	bne.n	8004d9e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004d86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d8a:	4817      	ldr	r0, [pc, #92]	@ (8004de8 <checkAktifCalisma+0xf40>)
 8004d8c:	f006 fbac 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004d96:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <checkAktifCalisma+0xf44>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e002      	b.n	8004da4 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <checkAktifCalisma+0xf44>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004da4:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <checkAktifCalisma+0xf38>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d023      	beq.n	8004df4 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <checkAktifCalisma+0xf3c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d11f      	bne.n	8004df4 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004db4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004db8:	480b      	ldr	r0, [pc, #44]	@ (8004de8 <checkAktifCalisma+0xf40>)
 8004dba:	f006 fb95 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d117      	bne.n	8004df4 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <checkAktifCalisma+0xf48>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e016      	b.n	8004dfa <checkAktifCalisma+0xf52>
 8004dcc:	40010800 	.word	0x40010800
 8004dd0:	200010c5 	.word	0x200010c5
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	200010be 	.word	0x200010be
 8004ddc:	20001104 	.word	0x20001104
 8004de0:	20001105 	.word	0x20001105
 8004de4:	200010c4 	.word	0x200010c4
 8004de8:	40010c00 	.word	0x40010c00
 8004dec:	20001114 	.word	0x20001114
 8004df0:	20001115 	.word	0x20001115
				} else {
					kapiactablaesp2=0;
 8004df4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff0 <checkAktifCalisma+0x1148>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff4 <checkAktifCalisma+0x114c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d154      	bne.n	8004eac <checkAktifCalisma+0x1004>
 8004e02:	4b7d      	ldr	r3, [pc, #500]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <checkAktifCalisma+0xf6a>
 8004e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d14c      	bne.n	8004eac <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004e12:	4b7a      	ldr	r3, [pc, #488]	@ (8004ffc <checkAktifCalisma+0x1154>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <checkAktifCalisma+0xf7a>
 8004e1a:	4b79      	ldr	r3, [pc, #484]	@ (8005000 <checkAktifCalisma+0x1158>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004e22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e26:	4877      	ldr	r0, [pc, #476]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004e28:	f006 fb5e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004e32:	2180      	movs	r1, #128	@ 0x80
 8004e34:	4873      	ldr	r0, [pc, #460]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004e36:	f006 fb57 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004e40:	2104      	movs	r1, #4
 8004e42:	4870      	ldr	r0, [pc, #448]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004e44:	f006 fb50 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d00e      	beq.n	8004e6c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e52:	486c      	ldr	r0, [pc, #432]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004e54:	f006 fb48 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4868      	ldr	r0, [pc, #416]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004e62:	f006 fb41 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d103      	bne.n	8004e74 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004e6c:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <checkAktifCalisma+0x1160>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <checkAktifCalisma+0xfdc>
 8004e74:	4b65      	ldr	r3, [pc, #404]	@ (800500c <checkAktifCalisma+0x1164>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <checkAktifCalisma+0xfdc>
 8004e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff0 <checkAktifCalisma+0x1148>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d013      	beq.n	8004eac <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004e84:	4b62      	ldr	r3, [pc, #392]	@ (8005010 <checkAktifCalisma+0x1168>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00f      	beq.n	8004eac <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004e8c:	4b61      	ldr	r3, [pc, #388]	@ (8005014 <checkAktifCalisma+0x116c>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f083 0301 	eor.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 8004e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005018 <checkAktifCalisma+0x1170>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800501c <checkAktifCalisma+0x1174>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8005020 <checkAktifCalisma+0x1178>)
 8004ea6:	6013      	str	r3, [r2, #0]
					bekle();
 8004ea8:	f7fe fe62 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004eac:	4b5b      	ldr	r3, [pc, #364]	@ (800501c <checkAktifCalisma+0x1174>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <checkAktifCalisma+0x1178>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8005024 <checkAktifCalisma+0x117c>)
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d214      	bcs.n	8004ee8 <checkAktifCalisma+0x1040>
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8004ffc <checkAktifCalisma+0x1154>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <checkAktifCalisma+0x1032>
 8004ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8005000 <checkAktifCalisma+0x1158>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f083 0301 	eor.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <checkAktifCalisma+0x1040>
 8004eda:	4b4d      	ldr	r3, [pc, #308]	@ (8005010 <checkAktifCalisma+0x1168>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8005018 <checkAktifCalisma+0x1170>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004eee:	4b41      	ldr	r3, [pc, #260]	@ (8004ff4 <checkAktifCalisma+0x114c>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d148      	bne.n	8004f88 <checkAktifCalisma+0x10e0>
 8004ef6:	4b40      	ldr	r3, [pc, #256]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d003      	beq.n	8004f06 <checkAktifCalisma+0x105e>
 8004efe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d140      	bne.n	8004f88 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f06:	4b3d      	ldr	r3, [pc, #244]	@ (8004ffc <checkAktifCalisma+0x1154>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <checkAktifCalisma+0x106e>
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8005000 <checkAktifCalisma+0x1158>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d038      	beq.n	8004f88 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f1a:	483a      	ldr	r0, [pc, #232]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004f1c:	f006 fae4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01c      	beq.n	8004f60 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004f26:	2180      	movs	r1, #128	@ 0x80
 8004f28:	4836      	ldr	r0, [pc, #216]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004f2a:	f006 fadd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004f34:	2104      	movs	r1, #4
 8004f36:	4833      	ldr	r0, [pc, #204]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004f38:	f006 fad6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d00e      	beq.n	8004f60 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f46:	482f      	ldr	r0, [pc, #188]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004f48:	f006 face 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004f52:	2102      	movs	r1, #2
 8004f54:	482b      	ldr	r0, [pc, #172]	@ (8005004 <checkAktifCalisma+0x115c>)
 8004f56:	f006 fac7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d103      	bne.n	8004f68 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f60:	4b29      	ldr	r3, [pc, #164]	@ (8005008 <checkAktifCalisma+0x1160>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <checkAktifCalisma+0x10d0>
 8004f68:	4b28      	ldr	r3, [pc, #160]	@ (800500c <checkAktifCalisma+0x1164>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <checkAktifCalisma+0x10d0>
 8004f70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff0 <checkAktifCalisma+0x1148>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004f78:	4b25      	ldr	r3, [pc, #148]	@ (8005010 <checkAktifCalisma+0x1168>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004f80:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <checkAktifCalisma+0x1180>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004f88:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <checkAktifCalisma+0x1180>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ff4 <checkAktifCalisma+0x114c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d117      	bne.n	8004fc6 <checkAktifCalisma+0x111e>
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d003      	beq.n	8004fa6 <checkAktifCalisma+0x10fe>
 8004f9e:	4b16      	ldr	r3, [pc, #88]	@ (8004ff8 <checkAktifCalisma+0x1150>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d10f      	bne.n	8004fc6 <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <checkAktifCalisma+0x1154>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <checkAktifCalisma+0x110e>
 8004fae:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <checkAktifCalisma+0x1158>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004fb6:	4b16      	ldr	r3, [pc, #88]	@ (8005010 <checkAktifCalisma+0x1168>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <checkAktifCalisma+0x1184>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e002      	b.n	8004fcc <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004fc6:	4b19      	ldr	r3, [pc, #100]	@ (800502c <checkAktifCalisma+0x1184>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004fcc:	4b16      	ldr	r3, [pc, #88]	@ (8005028 <checkAktifCalisma+0x1180>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <checkAktifCalisma+0x113c>
 8004fd4:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <checkAktifCalisma+0x1170>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <checkAktifCalisma+0x113c>
 8004fdc:	4b13      	ldr	r3, [pc, #76]	@ (800502c <checkAktifCalisma+0x1184>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d027      	beq.n	8005034 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	4811      	ldr	r0, [pc, #68]	@ (8005030 <checkAktifCalisma+0x1188>)
 8004fea:	f006 fa94 	bl	800b516 <HAL_GPIO_WritePin>
 8004fee:	e026      	b.n	800503e <checkAktifCalisma+0x1196>
 8004ff0:	20001115 	.word	0x20001115
 8004ff4:	200010c3 	.word	0x200010c3
 8004ff8:	200010c0 	.word	0x200010c0
 8004ffc:	20001104 	.word	0x20001104
 8005000:	20001105 	.word	0x20001105
 8005004:	40011000 	.word	0x40011000
 8005008:	200010c4 	.word	0x200010c4
 800500c:	20001114 	.word	0x20001114
 8005010:	200010fa 	.word	0x200010fa
 8005014:	200010e7 	.word	0x200010e7
 8005018:	20001101 	.word	0x20001101
 800501c:	20001094 	.word	0x20001094
 8005020:	20001098 	.word	0x20001098
 8005024:	200010d3 	.word	0x200010d3
 8005028:	20001102 	.word	0x20001102
 800502c:	20001103 	.word	0x20001103
 8005030:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005034:	2200      	movs	r2, #0
 8005036:	2120      	movs	r1, #32
 8005038:	48a0      	ldr	r0, [pc, #640]	@ (80052bc <checkAktifCalisma+0x1414>)
 800503a:	f006 fa6c 	bl	800b516 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800503e:	4ba0      	ldr	r3, [pc, #640]	@ (80052c0 <checkAktifCalisma+0x1418>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <checkAktifCalisma+0x11bc>
 8005046:	2102      	movs	r1, #2
 8005048:	489e      	ldr	r0, [pc, #632]	@ (80052c4 <checkAktifCalisma+0x141c>)
 800504a:	f006 fa4d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800504e:	4603      	mov	r3, r0
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <checkAktifCalisma+0x11bc>
 8005054:	4b9c      	ldr	r3, [pc, #624]	@ (80052c8 <checkAktifCalisma+0x1420>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <checkAktifCalisma+0x11bc>
 800505c:	4b9b      	ldr	r3, [pc, #620]	@ (80052cc <checkAktifCalisma+0x1424>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d112      	bne.n	800508a <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005064:	4b9a      	ldr	r3, [pc, #616]	@ (80052d0 <checkAktifCalisma+0x1428>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d021      	beq.n	80050b0 <checkAktifCalisma+0x1208>
 800506c:	2104      	movs	r1, #4
 800506e:	4895      	ldr	r0, [pc, #596]	@ (80052c4 <checkAktifCalisma+0x141c>)
 8005070:	f006 fa3a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d11a      	bne.n	80050b0 <checkAktifCalisma+0x1208>
 800507a:	4b93      	ldr	r3, [pc, #588]	@ (80052c8 <checkAktifCalisma+0x1420>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <checkAktifCalisma+0x1208>
 8005082:	4b92      	ldr	r3, [pc, #584]	@ (80052cc <checkAktifCalisma+0x1424>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d012      	beq.n	80050b0 <checkAktifCalisma+0x1208>



					calismaSayisi++;
 800508a:	4b92      	ldr	r3, [pc, #584]	@ (80052d4 <checkAktifCalisma+0x142c>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b90      	ldr	r3, [pc, #576]	@ (80052d4 <checkAktifCalisma+0x142c>)
 8005094:	701a      	strb	r2, [r3, #0]
					eepromData[27]=calismaSayisi;
 8005096:	4b8f      	ldr	r3, [pc, #572]	@ (80052d4 <checkAktifCalisma+0x142c>)
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	4b8f      	ldr	r3, [pc, #572]	@ (80052d8 <checkAktifCalisma+0x1430>)
 800509c:	76da      	strb	r2, [r3, #27]

					hafizaYaz=1;
 800509e:	4b8f      	ldr	r3, [pc, #572]	@ (80052dc <checkAktifCalisma+0x1434>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80050a4:	4b86      	ldr	r3, [pc, #536]	@ (80052c0 <checkAktifCalisma+0x1418>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80050aa:	4b89      	ldr	r3, [pc, #548]	@ (80052d0 <checkAktifCalisma+0x1428>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80050b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050b4:	488a      	ldr	r0, [pc, #552]	@ (80052e0 <checkAktifCalisma+0x1438>)
 80050b6:	f006 fa17 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <checkAktifCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80050c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050c4:	4886      	ldr	r0, [pc, #536]	@ (80052e0 <checkAktifCalisma+0x1438>)
 80050c6:	f006 fa0f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <checkAktifCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80050d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d4:	4882      	ldr	r0, [pc, #520]	@ (80052e0 <checkAktifCalisma+0x1438>)
 80050d6:	f006 fa07 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <checkAktifCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80050e0:	2140      	movs	r1, #64	@ 0x40
 80050e2:	4878      	ldr	r0, [pc, #480]	@ (80052c4 <checkAktifCalisma+0x141c>)
 80050e4:	f006 fa00 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <checkAktifCalisma+0x124e>

					startBasili=1;
 80050ee:	4b7d      	ldr	r3, [pc, #500]	@ (80052e4 <checkAktifCalisma+0x143c>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e002      	b.n	80050fc <checkAktifCalisma+0x1254>
				} else {
					startBasili=0;
 80050f6:	4b7b      	ldr	r3, [pc, #492]	@ (80052e4 <checkAktifCalisma+0x143c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80050fc:	4b79      	ldr	r3, [pc, #484]	@ (80052e4 <checkAktifCalisma+0x143c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d014      	beq.n	800512e <checkAktifCalisma+0x1286>
 8005104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005108:	4875      	ldr	r0, [pc, #468]	@ (80052e0 <checkAktifCalisma+0x1438>)
 800510a:	f006 f9ed 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d10c      	bne.n	800512e <checkAktifCalisma+0x1286>

					hataVar=1;
 8005114:	4b74      	ldr	r3, [pc, #464]	@ (80052e8 <checkAktifCalisma+0x1440>)
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800511a:	2001      	movs	r0, #1
 800511c:	f7fb fcf8 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005120:	2001      	movs	r0, #1
 8005122:	f7fb fc9d 	bl	8000a60 <hata2EEPROM>
					acilstophatasi=1;
 8005126:	4b71      	ldr	r3, [pc, #452]	@ (80052ec <checkAktifCalisma+0x1444>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e018      	b.n	8005160 <checkAktifCalisma+0x12b8>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800512e:	4b6f      	ldr	r3, [pc, #444]	@ (80052ec <checkAktifCalisma+0x1444>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d014      	beq.n	8005160 <checkAktifCalisma+0x12b8>
 8005136:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800513a:	4869      	ldr	r0, [pc, #420]	@ (80052e0 <checkAktifCalisma+0x1438>)
 800513c:	f006 f9d4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <checkAktifCalisma+0x12b8>
 8005146:	4b67      	ldr	r3, [pc, #412]	@ (80052e4 <checkAktifCalisma+0x143c>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <checkAktifCalisma+0x12b8>
					acilstophatasi=0;
 8005154:	4b65      	ldr	r3, [pc, #404]	@ (80052ec <checkAktifCalisma+0x1444>)
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800515a:	2001      	movs	r0, #1
 800515c:	f7fe fc9e 	bl	8003a9c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005160:	4b63      	ldr	r3, [pc, #396]	@ (80052f0 <checkAktifCalisma+0x1448>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d023      	beq.n	80051b6 <checkAktifCalisma+0x130e>
 800516e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005172:	485b      	ldr	r0, [pc, #364]	@ (80052e0 <checkAktifCalisma+0x1438>)
 8005174:	f006 f9b8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <checkAktifCalisma+0x12de>
 800517e:	4b5d      	ldr	r3, [pc, #372]	@ (80052f4 <checkAktifCalisma+0x144c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d017      	beq.n	80051b6 <checkAktifCalisma+0x130e>
 8005186:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <checkAktifCalisma+0x1450>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d113      	bne.n	80051b6 <checkAktifCalisma+0x130e>
 800518e:	4b5b      	ldr	r3, [pc, #364]	@ (80052fc <checkAktifCalisma+0x1454>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f083 0301 	eor.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <checkAktifCalisma+0x130e>
					hataVar=1;
 800519c:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <checkAktifCalisma+0x1440>)
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80051a2:	2002      	movs	r0, #2
 80051a4:	f7fb fcb4 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80051a8:	2002      	movs	r0, #2
 80051aa:	f7fb fc59 	bl	8000a60 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80051ae:	4b53      	ldr	r3, [pc, #332]	@ (80052fc <checkAktifCalisma+0x1454>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e017      	b.n	80051e6 <checkAktifCalisma+0x133e>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80051b6:	4b51      	ldr	r3, [pc, #324]	@ (80052fc <checkAktifCalisma+0x1454>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <checkAktifCalisma+0x133e>
 80051be:	4b4c      	ldr	r3, [pc, #304]	@ (80052f0 <checkAktifCalisma+0x1448>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00f      	beq.n	80051e6 <checkAktifCalisma+0x133e>
 80051c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005300 <checkAktifCalisma+0x1458>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f083 0301 	eor.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <checkAktifCalisma+0x133e>
					emniyetCercevesihatasi=0;
 80051d4:	4b49      	ldr	r3, [pc, #292]	@ (80052fc <checkAktifCalisma+0x1454>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80051da:	4b46      	ldr	r3, [pc, #280]	@ (80052f4 <checkAktifCalisma+0x144c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80051e0:	2002      	movs	r0, #2
 80051e2:	f7fe fc5b 	bl	8003a9c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80051e6:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <checkAktifCalisma+0x145c>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d123      	bne.n	8005236 <checkAktifCalisma+0x138e>
 80051ee:	4b46      	ldr	r3, [pc, #280]	@ (8005308 <checkAktifCalisma+0x1460>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d11f      	bne.n	8005236 <checkAktifCalisma+0x138e>
 80051f6:	4b45      	ldr	r3, [pc, #276]	@ (800530c <checkAktifCalisma+0x1464>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01b      	beq.n	8005236 <checkAktifCalisma+0x138e>
 80051fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005202:	4830      	ldr	r0, [pc, #192]	@ (80052c4 <checkAktifCalisma+0x141c>)
 8005204:	f006 f970 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d113      	bne.n	8005236 <checkAktifCalisma+0x138e>
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <checkAktifCalisma+0x1468>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f083 0301 	eor.w	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <checkAktifCalisma+0x138e>
					hataVar=1;
 800521c:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <checkAktifCalisma+0x1440>)
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005222:	2003      	movs	r0, #3
 8005224:	f7fb fc74 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005228:	2003      	movs	r0, #3
 800522a:	f7fb fc19 	bl	8000a60 <hata2EEPROM>
					basinchatasi=1;
 800522e:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <checkAktifCalisma+0x1468>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e015      	b.n	8005262 <checkAktifCalisma+0x13ba>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <checkAktifCalisma+0x1468>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <checkAktifCalisma+0x13ba>
 800523e:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <checkAktifCalisma+0x145c>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d10d      	bne.n	8005262 <checkAktifCalisma+0x13ba>
 8005246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800524a:	4825      	ldr	r0, [pc, #148]	@ (80052e0 <checkAktifCalisma+0x1438>)
 800524c:	f006 f94c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d105      	bne.n	8005262 <checkAktifCalisma+0x13ba>
					basinchatasi=0;
 8005256:	4b2e      	ldr	r3, [pc, #184]	@ (8005310 <checkAktifCalisma+0x1468>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800525c:	2003      	movs	r0, #3
 800525e:	f7fe fc1d 	bl	8003a9c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005262:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <checkAktifCalisma+0x143c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <checkAktifCalisma+0x13ca>
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <checkAktifCalisma+0x146c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d056      	beq.n	8005320 <checkAktifCalisma+0x1478>
 8005272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005276:	4811      	ldr	r0, [pc, #68]	@ (80052bc <checkAktifCalisma+0x1414>)
 8005278:	f006 f936 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d14e      	bne.n	8005320 <checkAktifCalisma+0x1478>
 8005282:	4b25      	ldr	r3, [pc, #148]	@ (8005318 <checkAktifCalisma+0x1470>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d003      	beq.n	8005292 <checkAktifCalisma+0x13ea>
 800528a:	4b23      	ldr	r3, [pc, #140]	@ (8005318 <checkAktifCalisma+0x1470>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d146      	bne.n	8005320 <checkAktifCalisma+0x1478>
 8005292:	4b22      	ldr	r3, [pc, #136]	@ (800531c <checkAktifCalisma+0x1474>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d03f      	beq.n	8005320 <checkAktifCalisma+0x1478>
					hataVar=1;
 80052a0:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <checkAktifCalisma+0x1440>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80052a6:	2004      	movs	r0, #4
 80052a8:	f7fb fc32 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80052ac:	2004      	movs	r0, #4
 80052ae:	f7fb fbd7 	bl	8000a60 <hata2EEPROM>
					katkapisivicihatasi=1;
 80052b2:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <checkAktifCalisma+0x1474>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e052      	b.n	8005360 <checkAktifCalisma+0x14b8>
 80052ba:	bf00      	nop
 80052bc:	40010800 	.word	0x40010800
 80052c0:	200010f7 	.word	0x200010f7
 80052c4:	40011000 	.word	0x40011000
 80052c8:	200010be 	.word	0x200010be
 80052cc:	200010fa 	.word	0x200010fa
 80052d0:	200010f8 	.word	0x200010f8
 80052d4:	200010b4 	.word	0x200010b4
 80052d8:	20000fec 	.word	0x20000fec
 80052dc:	200010e4 	.word	0x200010e4
 80052e0:	40010c00 	.word	0x40010c00
 80052e4:	20001106 	.word	0x20001106
 80052e8:	2000110d 	.word	0x2000110d
 80052ec:	20001108 	.word	0x20001108
 80052f0:	2000110f 	.word	0x2000110f
 80052f4:	20001119 	.word	0x20001119
 80052f8:	200010bc 	.word	0x200010bc
 80052fc:	20001109 	.word	0x20001109
 8005300:	200010f0 	.word	0x200010f0
 8005304:	200010bb 	.word	0x200010bb
 8005308:	200010bf 	.word	0x200010bf
 800530c:	2000110c 	.word	0x2000110c
 8005310:	20001116 	.word	0x20001116
 8005314:	2000111a 	.word	0x2000111a
 8005318:	200010c0 	.word	0x200010c0
 800531c:	20001117 	.word	0x20001117
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005320:	4b64      	ldr	r3, [pc, #400]	@ (80054b4 <checkAktifCalisma+0x160c>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <checkAktifCalisma+0x14b8>
 8005328:	4b63      	ldr	r3, [pc, #396]	@ (80054b8 <checkAktifCalisma+0x1610>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d017      	beq.n	8005360 <checkAktifCalisma+0x14b8>
 8005330:	4b62      	ldr	r3, [pc, #392]	@ (80054bc <checkAktifCalisma+0x1614>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f083 0301 	eor.w	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <checkAktifCalisma+0x14b8>
 800533e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005342:	485f      	ldr	r0, [pc, #380]	@ (80054c0 <checkAktifCalisma+0x1618>)
 8005344:	f006 f8d0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <checkAktifCalisma+0x14b8>

					katkapisivicihatasi=0;
 800534e:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <checkAktifCalisma+0x160c>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005354:	4b5b      	ldr	r3, [pc, #364]	@ (80054c4 <checkAktifCalisma+0x161c>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800535a:	2004      	movs	r0, #4
 800535c:	f7fe fb9e 	bl	8003a9c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005360:	4b56      	ldr	r3, [pc, #344]	@ (80054bc <checkAktifCalisma+0x1614>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <checkAktifCalisma+0x14c8>
 8005368:	4b57      	ldr	r3, [pc, #348]	@ (80054c8 <checkAktifCalisma+0x1620>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d023      	beq.n	80053b8 <checkAktifCalisma+0x1510>
 8005370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005374:	4852      	ldr	r0, [pc, #328]	@ (80054c0 <checkAktifCalisma+0x1618>)
 8005376:	f006 f8b7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d11b      	bne.n	80053b8 <checkAktifCalisma+0x1510>
 8005380:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <checkAktifCalisma+0x1624>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d003      	beq.n	8005390 <checkAktifCalisma+0x14e8>
 8005388:	4b50      	ldr	r3, [pc, #320]	@ (80054cc <checkAktifCalisma+0x1624>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d113      	bne.n	80053b8 <checkAktifCalisma+0x1510>
 8005390:	4b4f      	ldr	r3, [pc, #316]	@ (80054d0 <checkAktifCalisma+0x1628>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f083 0301 	eor.w	r3, r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00c      	beq.n	80053b8 <checkAktifCalisma+0x1510>

					hataVar=1;
 800539e:	4b4d      	ldr	r3, [pc, #308]	@ (80054d4 <checkAktifCalisma+0x162c>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80053a4:	2005      	movs	r0, #5
 80053a6:	f7fb fbb3 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80053aa:	2005      	movs	r0, #5
 80053ac:	f7fb fb58 	bl	8000a60 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80053b0:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <checkAktifCalisma+0x1628>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e023      	b.n	8005400 <checkAktifCalisma+0x1558>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80053b8:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <checkAktifCalisma+0x1628>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01f      	beq.n	8005400 <checkAktifCalisma+0x1558>
 80053c0:	4b3d      	ldr	r3, [pc, #244]	@ (80054b8 <checkAktifCalisma+0x1610>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <checkAktifCalisma+0x1558>
 80053c8:	4b3c      	ldr	r3, [pc, #240]	@ (80054bc <checkAktifCalisma+0x1614>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f083 0301 	eor.w	r3, r3, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d014      	beq.n	8005400 <checkAktifCalisma+0x1558>
 80053d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053da:	4839      	ldr	r0, [pc, #228]	@ (80054c0 <checkAktifCalisma+0x1618>)
 80053dc:	f006 f884 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <checkAktifCalisma+0x1558>
 80053e6:	4b34      	ldr	r3, [pc, #208]	@ (80054b8 <checkAktifCalisma+0x1610>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d008      	beq.n	8005400 <checkAktifCalisma+0x1558>
					tablakapisivicihatasi=0;
 80053ee:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <checkAktifCalisma+0x1628>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80053f4:	4b34      	ldr	r3, [pc, #208]	@ (80054c8 <checkAktifCalisma+0x1620>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80053fa:	2005      	movs	r0, #5
 80053fc:	f7fe fb4e 	bl	8003a9c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005400:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <checkAktifCalisma+0x1630>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d107      	bne.n	8005418 <checkAktifCalisma+0x1570>
 8005408:	4b34      	ldr	r3, [pc, #208]	@ (80054dc <checkAktifCalisma+0x1634>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <checkAktifCalisma+0x1570>
 8005410:	4b33      	ldr	r3, [pc, #204]	@ (80054e0 <checkAktifCalisma+0x1638>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01b      	beq.n	8005450 <checkAktifCalisma+0x15a8>
 8005418:	4b32      	ldr	r3, [pc, #200]	@ (80054e4 <checkAktifCalisma+0x163c>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f083 0301 	eor.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d014      	beq.n	8005450 <checkAktifCalisma+0x15a8>
				    if(millis-timer4>=makineCalismaTmr) {
 8005426:	4b30      	ldr	r3, [pc, #192]	@ (80054e8 <checkAktifCalisma+0x1640>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b30      	ldr	r3, [pc, #192]	@ (80054ec <checkAktifCalisma+0x1644>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	4a2f      	ldr	r2, [pc, #188]	@ (80054f0 <checkAktifCalisma+0x1648>)
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	4293      	cmp	r3, r2
 8005436:	d30b      	bcc.n	8005450 <checkAktifCalisma+0x15a8>
					  	hataVar=1;
 8005438:	4b26      	ldr	r3, [pc, #152]	@ (80054d4 <checkAktifCalisma+0x162c>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800543e:	2006      	movs	r0, #6
 8005440:	f7fb fb66 	bl	8000b10 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005444:	2006      	movs	r0, #6
 8005446:	f7fb fb0b 	bl	8000a60 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800544a:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <checkAktifCalisma+0x163c>)
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005450:	4b24      	ldr	r3, [pc, #144]	@ (80054e4 <checkAktifCalisma+0x163c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <checkAktifCalisma+0x15d8>
 8005458:	2108      	movs	r1, #8
 800545a:	4819      	ldr	r0, [pc, #100]	@ (80054c0 <checkAktifCalisma+0x1618>)
 800545c:	f006 f844 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <checkAktifCalisma+0x15d8>
 8005466:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <checkAktifCalisma+0x1614>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <checkAktifCalisma+0x15d8>
					maksimumcalismahatasi=0;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <checkAktifCalisma+0x163c>)
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800547a:	2006      	movs	r0, #6
 800547c:	f7fe fb0e 	bl	8003a9c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005480:	4b1c      	ldr	r3, [pc, #112]	@ (80054f4 <checkAktifCalisma+0x164c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <checkAktifCalisma+0x15f8>
 8005488:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <checkAktifCalisma+0x1634>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <checkAktifCalisma+0x15f8>
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <checkAktifCalisma+0x1650>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <checkAktifCalisma+0x15f8>
 8005498:	4b11      	ldr	r3, [pc, #68]	@ (80054e0 <checkAktifCalisma+0x1638>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02f      	beq.n	8005500 <checkAktifCalisma+0x1658>
					makineCalisiyor=0;
 80054a0:	4b16      	ldr	r3, [pc, #88]	@ (80054fc <checkAktifCalisma+0x1654>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <checkAktifCalisma+0x161c>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <checkAktifCalisma+0x1620>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e02c      	b.n	800550e <checkAktifCalisma+0x1666>
 80054b4:	20001117 	.word	0x20001117
 80054b8:	200010fa 	.word	0x200010fa
 80054bc:	20001106 	.word	0x20001106
 80054c0:	40010800 	.word	0x40010800
 80054c4:	2000111a 	.word	0x2000111a
 80054c8:	2000111b 	.word	0x2000111b
 80054cc:	200010c0 	.word	0x200010c0
 80054d0:	20001118 	.word	0x20001118
 80054d4:	2000110d 	.word	0x2000110d
 80054d8:	2000110c 	.word	0x2000110c
 80054dc:	200010f0 	.word	0x200010f0
 80054e0:	200010ef 	.word	0x200010ef
 80054e4:	20001107 	.word	0x20001107
 80054e8:	20001094 	.word	0x20001094
 80054ec:	200010a8 	.word	0x200010a8
 80054f0:	200010d0 	.word	0x200010d0
 80054f4:	200010ed 	.word	0x200010ed
 80054f8:	200010ee 	.word	0x200010ee
 80054fc:	2000110e 	.word	0x2000110e
				} else {
					makineCalisiyor=1;
 8005500:	4b3a      	ldr	r3, [pc, #232]	@ (80055ec <checkAktifCalisma+0x1744>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005506:	4b3a      	ldr	r3, [pc, #232]	@ (80055f0 <checkAktifCalisma+0x1748>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3a      	ldr	r2, [pc, #232]	@ (80055f4 <checkAktifCalisma+0x174c>)
 800550c:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800550e:	4b3a      	ldr	r3, [pc, #232]	@ (80055f8 <checkAktifCalisma+0x1750>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02f      	beq.n	8005576 <checkAktifCalisma+0x16ce>
 8005516:	4b39      	ldr	r3, [pc, #228]	@ (80055fc <checkAktifCalisma+0x1754>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f083 0301 	eor.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d028      	beq.n	8005576 <checkAktifCalisma+0x16ce>
 8005524:	4b36      	ldr	r3, [pc, #216]	@ (8005600 <checkAktifCalisma+0x1758>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f083 0301 	eor.w	r3, r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d021      	beq.n	8005576 <checkAktifCalisma+0x16ce>
 8005532:	4b34      	ldr	r3, [pc, #208]	@ (8005604 <checkAktifCalisma+0x175c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f083 0301 	eor.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <checkAktifCalisma+0x16ce>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005540:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <checkAktifCalisma+0x1760>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d013      	beq.n	8005576 <checkAktifCalisma+0x16ce>
 800554e:	4b2f      	ldr	r3, [pc, #188]	@ (800560c <checkAktifCalisma+0x1764>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f083 0301 	eor.w	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <checkAktifCalisma+0x16ce>
 800555c:	4b2c      	ldr	r3, [pc, #176]	@ (8005610 <checkAktifCalisma+0x1768>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <checkAktifCalisma+0x16ce>

					hataVar=0;
 800556a:	4b23      	ldr	r3, [pc, #140]	@ (80055f8 <checkAktifCalisma+0x1750>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005570:	2007      	movs	r0, #7
 8005572:	f7fe fa93 	bl	8003a9c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005576:	4b20      	ldr	r3, [pc, #128]	@ (80055f8 <checkAktifCalisma+0x1750>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02a      	beq.n	80055d4 <checkAktifCalisma+0x172c>
 800557e:	4b1f      	ldr	r3, [pc, #124]	@ (80055fc <checkAktifCalisma+0x1754>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d023      	beq.n	80055d4 <checkAktifCalisma+0x172c>
 800558c:	4b1c      	ldr	r3, [pc, #112]	@ (8005600 <checkAktifCalisma+0x1758>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01f      	beq.n	80055d4 <checkAktifCalisma+0x172c>
 8005594:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <checkAktifCalisma+0x175c>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <checkAktifCalisma+0x172c>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80055a2:	4b19      	ldr	r3, [pc, #100]	@ (8005608 <checkAktifCalisma+0x1760>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <checkAktifCalisma+0x172c>
 80055b0:	4b16      	ldr	r3, [pc, #88]	@ (800560c <checkAktifCalisma+0x1764>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <checkAktifCalisma+0x172c>
 80055be:	4b14      	ldr	r3, [pc, #80]	@ (8005610 <checkAktifCalisma+0x1768>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <checkAktifCalisma+0x172c>
				{
					EmnCerHataMakYukariCalis=1;
 80055cc:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <checkAktifCalisma+0x176c>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80055d2:	e009      	b.n	80055e8 <checkAktifCalisma+0x1740>
				else if(emniyetCercevesihatasi==0)
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <checkAktifCalisma+0x1758>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f083 0301 	eor.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <checkAktifCalisma+0x1740>
					EmnCerHataMakYukariCalis=0;
 80055e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <checkAktifCalisma+0x176c>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2000110e 	.word	0x2000110e
 80055f0:	20001094 	.word	0x20001094
 80055f4:	200010a8 	.word	0x200010a8
 80055f8:	2000110d 	.word	0x2000110d
 80055fc:	20001108 	.word	0x20001108
 8005600:	20001109 	.word	0x20001109
 8005604:	20001116 	.word	0x20001116
 8005608:	20001117 	.word	0x20001117
 800560c:	20001118 	.word	0x20001118
 8005610:	20001107 	.word	0x20001107
 8005614:	2000111c 	.word	0x2000111c

08005618 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800561c:	4b66      	ldr	r3, [pc, #408]	@ (80057b8 <checkDemoModCalisma+0x1a0>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f041 8399 	bne.w	8006d58 <checkDemoModCalisma+0x1740>
 8005626:	4b65      	ldr	r3, [pc, #404]	@ (80057bc <checkDemoModCalisma+0x1a4>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f041 8394 	bne.w	8006d58 <checkDemoModCalisma+0x1740>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005630:	4b63      	ldr	r3, [pc, #396]	@ (80057c0 <checkDemoModCalisma+0x1a8>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11a      	bne.n	800566e <checkDemoModCalisma+0x56>
 8005638:	4b62      	ldr	r3, [pc, #392]	@ (80057c4 <checkDemoModCalisma+0x1ac>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <checkDemoModCalisma+0x56>
 8005640:	4b61      	ldr	r3, [pc, #388]	@ (80057c8 <checkDemoModCalisma+0x1b0>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <checkDemoModCalisma+0x46>
 8005648:	4b60      	ldr	r3, [pc, #384]	@ (80057cc <checkDemoModCalisma+0x1b4>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <checkDemoModCalisma+0x46>
 8005656:	4b5e      	ldr	r3, [pc, #376]	@ (80057d0 <checkDemoModCalisma+0x1b8>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d007      	beq.n	800566e <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800565e:	4b5d      	ldr	r3, [pc, #372]	@ (80057d4 <checkDemoModCalisma+0x1bc>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01c      	beq.n	80056a0 <checkDemoModCalisma+0x88>
 8005666:	4b5c      	ldr	r3, [pc, #368]	@ (80057d8 <checkDemoModCalisma+0x1c0>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d118      	bne.n	80056a0 <checkDemoModCalisma+0x88>
 800566e:	4b5b      	ldr	r3, [pc, #364]	@ (80057dc <checkDemoModCalisma+0x1c4>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <checkDemoModCalisma+0x66>
 8005676:	4b5a      	ldr	r3, [pc, #360]	@ (80057e0 <checkDemoModCalisma+0x1c8>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <checkDemoModCalisma+0x88>
 800567e:	4b59      	ldr	r3, [pc, #356]	@ (80057e4 <checkDemoModCalisma+0x1cc>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005686:	2201      	movs	r2, #1
 8005688:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800568c:	4856      	ldr	r0, [pc, #344]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 800568e:	f005 ff42 	bl	800b516 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005692:	4b56      	ldr	r3, [pc, #344]	@ (80057ec <checkDemoModCalisma+0x1d4>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005698:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <checkDemoModCalisma+0x1d8>)
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e008      	b.n	80056b2 <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056a6:	4850      	ldr	r0, [pc, #320]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 80056a8:	f005 ff35 	bl	800b516 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80056ac:	4b4f      	ldr	r3, [pc, #316]	@ (80057ec <checkDemoModCalisma+0x1d4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80056b2:	4b42      	ldr	r3, [pc, #264]	@ (80057bc <checkDemoModCalisma+0x1a4>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d164      	bne.n	8005784 <checkDemoModCalisma+0x16c>
 80056ba:	4b49      	ldr	r3, [pc, #292]	@ (80057e0 <checkDemoModCalisma+0x1c8>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <checkDemoModCalisma+0xb2>
 80056c2:	4b46      	ldr	r3, [pc, #280]	@ (80057dc <checkDemoModCalisma+0x1c4>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d05c      	beq.n	8005784 <checkDemoModCalisma+0x16c>
 80056ca:	4b46      	ldr	r3, [pc, #280]	@ (80057e4 <checkDemoModCalisma+0x1cc>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d058      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80056d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056d6:	4844      	ldr	r0, [pc, #272]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 80056d8:	f005 ff06 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <checkDemoModCalisma+0xd2>
 80056e2:	4b44      	ldr	r3, [pc, #272]	@ (80057f4 <checkDemoModCalisma+0x1dc>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04c      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056ea:	2102      	movs	r1, #2
 80056ec:	4842      	ldr	r0, [pc, #264]	@ (80057f8 <checkDemoModCalisma+0x1e0>)
 80056ee:	f005 fefb 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d145      	bne.n	8005784 <checkDemoModCalisma+0x16c>
							&& (basincVar)
 80056f8:	4b40      	ldr	r3, [pc, #256]	@ (80057fc <checkDemoModCalisma+0x1e4>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d041      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005704:	4838      	ldr	r0, [pc, #224]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 8005706:	f005 feef 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10e      	bne.n	800572e <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005714:	4834      	ldr	r0, [pc, #208]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 8005716:	f005 fee7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d106      	bne.n	800572e <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005720:	2140      	movs	r1, #64	@ 0x40
 8005722:	4835      	ldr	r0, [pc, #212]	@ (80057f8 <checkDemoModCalisma+0x1e0>)
 8005724:	f005 fee0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d003      	beq.n	8005736 <checkDemoModCalisma+0x11e>
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <checkDemoModCalisma+0x1a8>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d026      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8005736:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <checkDemoModCalisma+0x1b0>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f083 0301 	eor.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01f      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8005744:	4b1f      	ldr	r3, [pc, #124]	@ (80057c4 <checkDemoModCalisma+0x1ac>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f083 0301 	eor.w	r3, r3, #1
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8005752:	4b20      	ldr	r3, [pc, #128]	@ (80057d4 <checkDemoModCalisma+0x1bc>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d011      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8005760:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <checkDemoModCalisma+0x1e8>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800576e:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <checkDemoModCalisma+0x1ec>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800577c:	4b10      	ldr	r3, [pc, #64]	@ (80057c0 <checkDemoModCalisma+0x1a8>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e002      	b.n	800578a <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <checkDemoModCalisma+0x1a8>)
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <checkDemoModCalisma+0x1a8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d03c      	beq.n	800580c <checkDemoModCalisma+0x1f4>
 8005792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005796:	4818      	ldr	r0, [pc, #96]	@ (80057f8 <checkDemoModCalisma+0x1e0>)
 8005798:	f005 fea6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d134      	bne.n	800580c <checkDemoModCalisma+0x1f4>
 80057a2:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <checkDemoModCalisma+0x1f0>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d030      	beq.n	800580c <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80057aa:	2201      	movs	r2, #1
 80057ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057b0:	480d      	ldr	r0, [pc, #52]	@ (80057e8 <checkDemoModCalisma+0x1d0>)
 80057b2:	f005 feb0 	bl	800b516 <HAL_GPIO_WritePin>
 80057b6:	e02f      	b.n	8005818 <checkDemoModCalisma+0x200>
 80057b8:	200010d6 	.word	0x200010d6
 80057bc:	200010d5 	.word	0x200010d5
 80057c0:	200010ed 	.word	0x200010ed
 80057c4:	200010ee 	.word	0x200010ee
 80057c8:	200010f0 	.word	0x200010f0
 80057cc:	200010e8 	.word	0x200010e8
 80057d0:	200010cb 	.word	0x200010cb
 80057d4:	200010ef 	.word	0x200010ef
 80057d8:	200010ca 	.word	0x200010ca
 80057dc:	2000110a 	.word	0x2000110a
 80057e0:	2000111d 	.word	0x2000111d
 80057e4:	2000110b 	.word	0x2000110b
 80057e8:	40010c00 	.word	0x40010c00
 80057ec:	2000110c 	.word	0x2000110c
 80057f0:	200010f7 	.word	0x200010f7
 80057f4:	200010f4 	.word	0x200010f4
 80057f8:	40011000 	.word	0x40011000
 80057fc:	200010bb 	.word	0x200010bb
 8005800:	200010f2 	.word	0x200010f2
 8005804:	200010f3 	.word	0x200010f3
 8005808:	200010c6 	.word	0x200010c6
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005812:	4865      	ldr	r0, [pc, #404]	@ (80059a8 <checkDemoModCalisma+0x390>)
 8005814:	f005 fe7f 	bl	800b516 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005818:	4b64      	ldr	r3, [pc, #400]	@ (80059ac <checkDemoModCalisma+0x394>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <checkDemoModCalisma+0x230>
 8005820:	4b63      	ldr	r3, [pc, #396]	@ (80059b0 <checkDemoModCalisma+0x398>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d007      	beq.n	8005838 <checkDemoModCalisma+0x220>
 8005828:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <checkDemoModCalisma+0x398>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d003      	beq.n	8005838 <checkDemoModCalisma+0x220>
 8005830:	4b60      	ldr	r3, [pc, #384]	@ (80059b4 <checkDemoModCalisma+0x39c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005838:	2201      	movs	r2, #1
 800583a:	2104      	movs	r1, #4
 800583c:	485a      	ldr	r0, [pc, #360]	@ (80059a8 <checkDemoModCalisma+0x390>)
 800583e:	f005 fe6a 	bl	800b516 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005842:	4b5d      	ldr	r3, [pc, #372]	@ (80059b8 <checkDemoModCalisma+0x3a0>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005848:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <checkDemoModCalisma+0x3a0>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d033      	beq.n	80058b8 <checkDemoModCalisma+0x2a0>
 8005850:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005854:	4854      	ldr	r0, [pc, #336]	@ (80059a8 <checkDemoModCalisma+0x390>)
 8005856:	f005 fe47 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <checkDemoModCalisma+0x256>
 8005860:	4b56      	ldr	r3, [pc, #344]	@ (80059bc <checkDemoModCalisma+0x3a4>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f083 0301 	eor.w	r3, r3, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <checkDemoModCalisma+0x264>
 800586e:	2102      	movs	r1, #2
 8005870:	4853      	ldr	r0, [pc, #332]	@ (80059c0 <checkDemoModCalisma+0x3a8>)
 8005872:	f005 fe39 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005876:	4603      	mov	r3, r0
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11d      	bne.n	80058b8 <checkDemoModCalisma+0x2a0>
 800587c:	4b51      	ldr	r3, [pc, #324]	@ (80059c4 <checkDemoModCalisma+0x3ac>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <checkDemoModCalisma+0x274>
 8005884:	4b50      	ldr	r3, [pc, #320]	@ (80059c8 <checkDemoModCalisma+0x3b0>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <checkDemoModCalisma+0x2a0>
 800588c:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <checkDemoModCalisma+0x3b4>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d011      	beq.n	80058b8 <checkDemoModCalisma+0x2a0>
 8005894:	4b4e      	ldr	r3, [pc, #312]	@ (80059d0 <checkDemoModCalisma+0x3b8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <checkDemoModCalisma+0x2a0>
 800589c:	4b4d      	ldr	r3, [pc, #308]	@ (80059d4 <checkDemoModCalisma+0x3bc>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <checkDemoModCalisma+0x2a0>
					timer2=millis;
 80058aa:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <checkDemoModCalisma+0x3c0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4b      	ldr	r2, [pc, #300]	@ (80059dc <checkDemoModCalisma+0x3c4>)
 80058b0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80058b2:	4b48      	ldr	r3, [pc, #288]	@ (80059d4 <checkDemoModCalisma+0x3bc>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80058b8:	4b47      	ldr	r3, [pc, #284]	@ (80059d8 <checkDemoModCalisma+0x3c0>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b47      	ldr	r3, [pc, #284]	@ (80059dc <checkDemoModCalisma+0x3c4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a47      	ldr	r2, [pc, #284]	@ (80059e0 <checkDemoModCalisma+0x3c8>)
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d303      	bcc.n	80058d2 <checkDemoModCalisma+0x2ba>
 80058ca:	4b42      	ldr	r3, [pc, #264]	@ (80059d4 <checkDemoModCalisma+0x3bc>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <checkDemoModCalisma+0x2ec>
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <checkDemoModCalisma+0x3ac>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f083 0301 	eor.w	r3, r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <checkDemoModCalisma+0x2d6>
 80058e0:	4b39      	ldr	r3, [pc, #228]	@ (80059c8 <checkDemoModCalisma+0x3b0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f083 0301 	eor.w	r3, r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <checkDemoModCalisma+0x2ec>
 80058ee:	4b37      	ldr	r3, [pc, #220]	@ (80059cc <checkDemoModCalisma+0x3b4>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f083 0301 	eor.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <checkDemoModCalisma+0x2ec>
 80058fc:	4b34      	ldr	r3, [pc, #208]	@ (80059d0 <checkDemoModCalisma+0x3b8>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005904:	2200      	movs	r2, #0
 8005906:	2104      	movs	r1, #4
 8005908:	4827      	ldr	r0, [pc, #156]	@ (80059a8 <checkDemoModCalisma+0x390>)
 800590a:	f005 fe04 	bl	800b516 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800590e:	4b2a      	ldr	r3, [pc, #168]	@ (80059b8 <checkDemoModCalisma+0x3a0>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8005914:	4b2f      	ldr	r3, [pc, #188]	@ (80059d4 <checkDemoModCalisma+0x3bc>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800591a:	4b32      	ldr	r3, [pc, #200]	@ (80059e4 <checkDemoModCalisma+0x3cc>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <checkDemoModCalisma+0x310>
					cerceveVar=1;
 8005922:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <checkDemoModCalisma+0x3d0>)
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <checkDemoModCalisma+0x3cc>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d116      	bne.n	800595e <checkDemoModCalisma+0x346>
 8005930:	4b2e      	ldr	r3, [pc, #184]	@ (80059ec <checkDemoModCalisma+0x3d4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d112      	bne.n	800595e <checkDemoModCalisma+0x346>
 8005938:	2101      	movs	r1, #1
 800593a:	4821      	ldr	r0, [pc, #132]	@ (80059c0 <checkDemoModCalisma+0x3a8>)
 800593c:	f005 fdd4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <checkDemoModCalisma+0x346>
 8005946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800594a:	4817      	ldr	r0, [pc, #92]	@ (80059a8 <checkDemoModCalisma+0x390>)
 800594c:	f005 fdcc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <checkDemoModCalisma+0x346>
					cerceveVar=1;
 8005956:	4b24      	ldr	r3, [pc, #144]	@ (80059e8 <checkDemoModCalisma+0x3d0>)
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e011      	b.n	8005982 <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800595e:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <checkDemoModCalisma+0x3cc>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d10d      	bne.n	8005982 <checkDemoModCalisma+0x36a>
 8005966:	2101      	movs	r1, #1
 8005968:	4815      	ldr	r0, [pc, #84]	@ (80059c0 <checkDemoModCalisma+0x3a8>)
 800596a:	f005 fdbd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <checkDemoModCalisma+0x36a>
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <checkDemoModCalisma+0x3d4>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <checkDemoModCalisma+0x3d0>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <checkDemoModCalisma+0x3cc>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d135      	bne.n	80059f6 <checkDemoModCalisma+0x3de>
 800598a:	4b18      	ldr	r3, [pc, #96]	@ (80059ec <checkDemoModCalisma+0x3d4>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d131      	bne.n	80059f6 <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005992:	2101      	movs	r1, #1
 8005994:	480a      	ldr	r0, [pc, #40]	@ (80059c0 <checkDemoModCalisma+0x3a8>)
 8005996:	f005 fda7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d127      	bne.n	80059f0 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 80059a0:	4b11      	ldr	r3, [pc, #68]	@ (80059e8 <checkDemoModCalisma+0x3d0>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e026      	b.n	80059f6 <checkDemoModCalisma+0x3de>
 80059a8:	40010c00 	.word	0x40010c00
 80059ac:	200010ed 	.word	0x200010ed
 80059b0:	200010c7 	.word	0x200010c7
 80059b4:	200010cb 	.word	0x200010cb
 80059b8:	200010f1 	.word	0x200010f1
 80059bc:	200010f4 	.word	0x200010f4
 80059c0:	40011000 	.word	0x40011000
 80059c4:	2000110a 	.word	0x2000110a
 80059c8:	2000111d 	.word	0x2000111d
 80059cc:	2000110b 	.word	0x2000110b
 80059d0:	200010bb 	.word	0x200010bb
 80059d4:	200010e9 	.word	0x200010e9
 80059d8:	20001094 	.word	0x20001094
 80059dc:	200010a0 	.word	0x200010a0
 80059e0:	200010cc 	.word	0x200010cc
 80059e4:	200010bc 	.word	0x200010bc
 80059e8:	2000110f 	.word	0x2000110f
 80059ec:	200010b9 	.word	0x200010b9
					} else {
						cerceveVar=0;
 80059f0:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf0 <checkDemoModCalisma+0x5d8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80059f6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf4 <checkDemoModCalisma+0x5dc>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d17c      	bne.n	8005af8 <checkDemoModCalisma+0x4e0>
 80059fe:	4b7e      	ldr	r3, [pc, #504]	@ (8005bf8 <checkDemoModCalisma+0x5e0>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d078      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
 8005a06:	4b7d      	ldr	r3, [pc, #500]	@ (8005bfc <checkDemoModCalisma+0x5e4>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d074      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a12:	487b      	ldr	r0, [pc, #492]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005a14:	f005 fd68 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <checkDemoModCalisma+0x40e>
 8005a1e:	4b79      	ldr	r3, [pc, #484]	@ (8005c04 <checkDemoModCalisma+0x5ec>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d068      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005a26:	4b72      	ldr	r3, [pc, #456]	@ (8005bf0 <checkDemoModCalisma+0x5d8>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d064      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
 8005a2e:	4b76      	ldr	r3, [pc, #472]	@ (8005c08 <checkDemoModCalisma+0x5f0>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f083 0301 	eor.w	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05d      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4873      	ldr	r0, [pc, #460]	@ (8005c0c <checkDemoModCalisma+0x5f4>)
 8005a40:	f005 fd52 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <checkDemoModCalisma+0x43a>
 8005a4a:	4b71      	ldr	r3, [pc, #452]	@ (8005c10 <checkDemoModCalisma+0x5f8>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d152      	bne.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a56:	486a      	ldr	r0, [pc, #424]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005a58:	f005 fd46 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10e      	bne.n	8005a80 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a66:	4866      	ldr	r0, [pc, #408]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005a68:	f005 fd3e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d106      	bne.n	8005a80 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005a72:	2140      	movs	r1, #64	@ 0x40
 8005a74:	4865      	ldr	r0, [pc, #404]	@ (8005c0c <checkDemoModCalisma+0x5f4>)
 8005a76:	f005 fd37 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d003      	beq.n	8005a88 <checkDemoModCalisma+0x470>
 8005a80:	4b64      	ldr	r3, [pc, #400]	@ (8005c14 <checkDemoModCalisma+0x5fc>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d037      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8005a88:	4b63      	ldr	r3, [pc, #396]	@ (8005c18 <checkDemoModCalisma+0x600>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d030      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8005a96:	4b61      	ldr	r3, [pc, #388]	@ (8005c1c <checkDemoModCalisma+0x604>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f083 0301 	eor.w	r3, r3, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d029      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8005c20 <checkDemoModCalisma+0x608>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f083 0301 	eor.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d022      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8005c24 <checkDemoModCalisma+0x60c>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f083 0301 	eor.w	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005ac0:	4b59      	ldr	r3, [pc, #356]	@ (8005c28 <checkDemoModCalisma+0x610>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f083 0301 	eor.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d014      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8005ace:	4b57      	ldr	r3, [pc, #348]	@ (8005c2c <checkDemoModCalisma+0x614>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005adc:	2201      	movs	r2, #1
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4847      	ldr	r0, [pc, #284]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005ae2:	f005 fd18 	bl	800b516 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8005ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c14 <checkDemoModCalisma+0x5fc>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005aec:	4b50      	ldr	r3, [pc, #320]	@ (8005c30 <checkDemoModCalisma+0x618>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8005af2:	4b50      	ldr	r3, [pc, #320]	@ (8005c34 <checkDemoModCalisma+0x61c>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005af8:	4b46      	ldr	r3, [pc, #280]	@ (8005c14 <checkDemoModCalisma+0x5fc>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d033      	beq.n	8005b68 <checkDemoModCalisma+0x550>
 8005b00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005b04:	483e      	ldr	r0, [pc, #248]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005b06:	f005 fcef 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <checkDemoModCalisma+0x506>
 8005b10:	4b3c      	ldr	r3, [pc, #240]	@ (8005c04 <checkDemoModCalisma+0x5ec>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f083 0301 	eor.w	r3, r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <checkDemoModCalisma+0x51c>
 8005b1e:	2104      	movs	r1, #4
 8005b20:	483a      	ldr	r0, [pc, #232]	@ (8005c0c <checkDemoModCalisma+0x5f4>)
 8005b22:	f005 fce1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d11d      	bne.n	8005b68 <checkDemoModCalisma+0x550>
 8005b2c:	4b38      	ldr	r3, [pc, #224]	@ (8005c10 <checkDemoModCalisma+0x5f8>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d019      	beq.n	8005b68 <checkDemoModCalisma+0x550>
 8005b34:	4b30      	ldr	r3, [pc, #192]	@ (8005bf8 <checkDemoModCalisma+0x5e0>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <checkDemoModCalisma+0x550>
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bfc <checkDemoModCalisma+0x5e4>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d011      	beq.n	8005b68 <checkDemoModCalisma+0x550>
 8005b44:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf0 <checkDemoModCalisma+0x5d8>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <checkDemoModCalisma+0x550>
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c38 <checkDemoModCalisma+0x620>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f083 0301 	eor.w	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <checkDemoModCalisma+0x550>
					timer2=millis;
 8005b5a:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <checkDemoModCalisma+0x624>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a38      	ldr	r2, [pc, #224]	@ (8005c40 <checkDemoModCalisma+0x628>)
 8005b60:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005b62:	4b35      	ldr	r3, [pc, #212]	@ (8005c38 <checkDemoModCalisma+0x620>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005b68:	4b34      	ldr	r3, [pc, #208]	@ (8005c3c <checkDemoModCalisma+0x624>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b34      	ldr	r3, [pc, #208]	@ (8005c40 <checkDemoModCalisma+0x628>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a34      	ldr	r2, [pc, #208]	@ (8005c44 <checkDemoModCalisma+0x62c>)
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d303      	bcc.n	8005b82 <checkDemoModCalisma+0x56a>
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c38 <checkDemoModCalisma+0x620>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d114      	bne.n	8005bac <checkDemoModCalisma+0x594>
 8005b82:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <checkDemoModCalisma+0x5e0>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f083 0301 	eor.w	r3, r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <checkDemoModCalisma+0x594>
 8005b90:	4b1a      	ldr	r3, [pc, #104]	@ (8005bfc <checkDemoModCalisma+0x5e4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f083 0301 	eor.w	r3, r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <checkDemoModCalisma+0x594>
 8005b9e:	4b14      	ldr	r3, [pc, #80]	@ (8005bf0 <checkDemoModCalisma+0x5d8>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f083 0301 	eor.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4813      	ldr	r0, [pc, #76]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005bb2:	f005 fcb0 	bl	800b516 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005bb6:	4b17      	ldr	r3, [pc, #92]	@ (8005c14 <checkDemoModCalisma+0x5fc>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <checkDemoModCalisma+0x620>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <checkDemoModCalisma+0x5fc>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d040      	beq.n	8005c4c <checkDemoModCalisma+0x634>
 8005bca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005bce:	480f      	ldr	r0, [pc, #60]	@ (8005c0c <checkDemoModCalisma+0x5f4>)
 8005bd0:	f005 fc8a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d138      	bne.n	8005c4c <checkDemoModCalisma+0x634>
 8005bda:	4b1b      	ldr	r3, [pc, #108]	@ (8005c48 <checkDemoModCalisma+0x630>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d034      	beq.n	8005c4c <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005be2:	2201      	movs	r2, #1
 8005be4:	2101      	movs	r1, #1
 8005be6:	4806      	ldr	r0, [pc, #24]	@ (8005c00 <checkDemoModCalisma+0x5e8>)
 8005be8:	f005 fc95 	bl	800b516 <HAL_GPIO_WritePin>
 8005bec:	e033      	b.n	8005c56 <checkDemoModCalisma+0x63e>
 8005bee:	bf00      	nop
 8005bf0:	2000110f 	.word	0x2000110f
 8005bf4:	200010d5 	.word	0x200010d5
 8005bf8:	2000110a 	.word	0x2000110a
 8005bfc:	2000110b 	.word	0x2000110b
 8005c00:	40010c00 	.word	0x40010c00
 8005c04:	200010f5 	.word	0x200010f5
 8005c08:	20001109 	.word	0x20001109
 8005c0c:	40011000 	.word	0x40011000
 8005c10:	200010be 	.word	0x200010be
 8005c14:	200010f0 	.word	0x200010f0
 8005c18:	200010ed 	.word	0x200010ed
 8005c1c:	200010f1 	.word	0x200010f1
 8005c20:	200010ee 	.word	0x200010ee
 8005c24:	200010ef 	.word	0x200010ef
 8005c28:	200010f2 	.word	0x200010f2
 8005c2c:	200010f3 	.word	0x200010f3
 8005c30:	200010f8 	.word	0x200010f8
 8005c34:	20001119 	.word	0x20001119
 8005c38:	200010e8 	.word	0x200010e8
 8005c3c:	20001094 	.word	0x20001094
 8005c40:	200010a0 	.word	0x200010a0
 8005c44:	200010cd 	.word	0x200010cd
 8005c48:	200010bd 	.word	0x200010bd
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4836      	ldr	r0, [pc, #216]	@ (8005d2c <checkDemoModCalisma+0x714>)
 8005c52:	f005 fc60 	bl	800b516 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005c56:	4b36      	ldr	r3, [pc, #216]	@ (8005d30 <checkDemoModCalisma+0x718>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8080 	bne.w	8005d60 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c60:	4b34      	ldr	r3, [pc, #208]	@ (8005d34 <checkDemoModCalisma+0x71c>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d003      	beq.n	8005c70 <checkDemoModCalisma+0x658>
 8005c68:	4b32      	ldr	r3, [pc, #200]	@ (8005d34 <checkDemoModCalisma+0x71c>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d177      	bne.n	8005d60 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005c70:	4b31      	ldr	r3, [pc, #196]	@ (8005d38 <checkDemoModCalisma+0x720>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d073      	beq.n	8005d60 <checkDemoModCalisma+0x748>
 8005c78:	4b30      	ldr	r3, [pc, #192]	@ (8005d3c <checkDemoModCalisma+0x724>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d06f      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c84:	4829      	ldr	r0, [pc, #164]	@ (8005d2c <checkDemoModCalisma+0x714>)
 8005c86:	f005 fc2f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d167      	bne.n	8005d60 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c94:	482a      	ldr	r0, [pc, #168]	@ (8005d40 <checkDemoModCalisma+0x728>)
 8005c96:	f005 fc27 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <checkDemoModCalisma+0x690>
 8005ca0:	4b28      	ldr	r3, [pc, #160]	@ (8005d44 <checkDemoModCalisma+0x72c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d15b      	bne.n	8005d60 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005ca8:	2140      	movs	r1, #64	@ 0x40
 8005caa:	4825      	ldr	r0, [pc, #148]	@ (8005d40 <checkDemoModCalisma+0x728>)
 8005cac:	f005 fc1c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10f      	bne.n	8005cd6 <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cba:	481c      	ldr	r0, [pc, #112]	@ (8005d2c <checkDemoModCalisma+0x714>)
 8005cbc:	f005 fc14 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005cc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005cca:	4818      	ldr	r0, [pc, #96]	@ (8005d2c <checkDemoModCalisma+0x714>)
 8005ccc:	f005 fc0c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d003      	beq.n	8005cde <checkDemoModCalisma+0x6c6>
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d48 <checkDemoModCalisma+0x730>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d040      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005cde:	4b1b      	ldr	r3, [pc, #108]	@ (8005d4c <checkDemoModCalisma+0x734>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d039      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005cec:	4b18      	ldr	r3, [pc, #96]	@ (8005d50 <checkDemoModCalisma+0x738>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d032      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8005cfa:	4b16      	ldr	r3, [pc, #88]	@ (8005d54 <checkDemoModCalisma+0x73c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02b      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8005d08:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <checkDemoModCalisma+0x740>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d024      	beq.n	8005d60 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8005d16:	4b11      	ldr	r3, [pc, #68]	@ (8005d5c <checkDemoModCalisma+0x744>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f083 0301 	eor.w	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01d      	beq.n	8005d60 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005d24:	4b08      	ldr	r3, [pc, #32]	@ (8005d48 <checkDemoModCalisma+0x730>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e01c      	b.n	8005d66 <checkDemoModCalisma+0x74e>
 8005d2c:	40010c00 	.word	0x40010c00
 8005d30:	200010d5 	.word	0x200010d5
 8005d34:	200010c7 	.word	0x200010c7
 8005d38:	2000110a 	.word	0x2000110a
 8005d3c:	2000110b 	.word	0x2000110b
 8005d40:	40011000 	.word	0x40011000
 8005d44:	200010c8 	.word	0x200010c8
 8005d48:	200010ee 	.word	0x200010ee
 8005d4c:	200010ed 	.word	0x200010ed
 8005d50:	200010f1 	.word	0x200010f1
 8005d54:	200010f0 	.word	0x200010f0
 8005d58:	200010ef 	.word	0x200010ef
 8005d5c:	200010f3 	.word	0x200010f3
				} else {
					devmotoryukaricalisiyor=0;
 8005d60:	4b64      	ldr	r3, [pc, #400]	@ (8005ef4 <checkDemoModCalisma+0x8dc>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005d66:	4b63      	ldr	r3, [pc, #396]	@ (8005ef4 <checkDemoModCalisma+0x8dc>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2120      	movs	r1, #32
 8005d72:	4861      	ldr	r0, [pc, #388]	@ (8005ef8 <checkDemoModCalisma+0x8e0>)
 8005d74:	f005 fbcf 	bl	800b516 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005d78:	4b60      	ldr	r3, [pc, #384]	@ (8005efc <checkDemoModCalisma+0x8e4>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005efc <checkDemoModCalisma+0x8e4>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d025      	beq.n	8005dd2 <checkDemoModCalisma+0x7ba>
 8005d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d8a:	485d      	ldr	r0, [pc, #372]	@ (8005f00 <checkDemoModCalisma+0x8e8>)
 8005d8c:	f005 fbac 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d007      	beq.n	8005da6 <checkDemoModCalisma+0x78e>
 8005d96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d9a:	4857      	ldr	r0, [pc, #348]	@ (8005ef8 <checkDemoModCalisma+0x8e0>)
 8005d9c:	f005 fba4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d115      	bne.n	8005dd2 <checkDemoModCalisma+0x7ba>
 8005da6:	4b57      	ldr	r3, [pc, #348]	@ (8005f04 <checkDemoModCalisma+0x8ec>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d011      	beq.n	8005dd2 <checkDemoModCalisma+0x7ba>
 8005dae:	4b56      	ldr	r3, [pc, #344]	@ (8005f08 <checkDemoModCalisma+0x8f0>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <checkDemoModCalisma+0x7ba>
 8005db6:	4b55      	ldr	r3, [pc, #340]	@ (8005f0c <checkDemoModCalisma+0x8f4>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005dc4:	4b52      	ldr	r3, [pc, #328]	@ (8005f10 <checkDemoModCalisma+0x8f8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a52      	ldr	r2, [pc, #328]	@ (8005f14 <checkDemoModCalisma+0x8fc>)
 8005dca:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8005f0c <checkDemoModCalisma+0x8f4>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f10 <checkDemoModCalisma+0x8f8>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <checkDemoModCalisma+0x8fc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	4a4e      	ldr	r2, [pc, #312]	@ (8005f18 <checkDemoModCalisma+0x900>)
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d303      	bcc.n	8005dec <checkDemoModCalisma+0x7d4>
 8005de4:	4b49      	ldr	r3, [pc, #292]	@ (8005f0c <checkDemoModCalisma+0x8f4>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <checkDemoModCalisma+0x7f0>
 8005dec:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <checkDemoModCalisma+0x8ec>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <checkDemoModCalisma+0x7f0>
 8005dfa:	4b43      	ldr	r3, [pc, #268]	@ (8005f08 <checkDemoModCalisma+0x8f0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f083 0301 	eor.w	r3, r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	483a      	ldr	r0, [pc, #232]	@ (8005ef8 <checkDemoModCalisma+0x8e0>)
 8005e0e:	f005 fb82 	bl	800b516 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005e12:	4b3a      	ldr	r3, [pc, #232]	@ (8005efc <checkDemoModCalisma+0x8e4>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005e18:	4b3c      	ldr	r3, [pc, #240]	@ (8005f0c <checkDemoModCalisma+0x8f4>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f1c <checkDemoModCalisma+0x904>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 8088 	bne.w	8005f38 <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005e28:	4b3d      	ldr	r3, [pc, #244]	@ (8005f20 <checkDemoModCalisma+0x908>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <checkDemoModCalisma+0x820>
 8005e30:	4b3b      	ldr	r3, [pc, #236]	@ (8005f20 <checkDemoModCalisma+0x908>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d17f      	bne.n	8005f38 <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8005e38:	4b32      	ldr	r3, [pc, #200]	@ (8005f04 <checkDemoModCalisma+0x8ec>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d07b      	beq.n	8005f38 <checkDemoModCalisma+0x920>
 8005e40:	4b31      	ldr	r3, [pc, #196]	@ (8005f08 <checkDemoModCalisma+0x8f0>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d077      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005e48:	2140      	movs	r1, #64	@ 0x40
 8005e4a:	482b      	ldr	r0, [pc, #172]	@ (8005ef8 <checkDemoModCalisma+0x8e0>)
 8005e4c:	f005 fb4c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d170      	bne.n	8005f38 <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005e56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e5a:	4827      	ldr	r0, [pc, #156]	@ (8005ef8 <checkDemoModCalisma+0x8e0>)
 8005e5c:	f005 fb44 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <checkDemoModCalisma+0x856>
 8005e66:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <checkDemoModCalisma+0x90c>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d164      	bne.n	8005f38 <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005e6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e72:	4823      	ldr	r0, [pc, #140]	@ (8005f00 <checkDemoModCalisma+0x8e8>)
 8005e74:	f005 fb38 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d10f      	bne.n	8005e9e <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005e7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e82:	481f      	ldr	r0, [pc, #124]	@ (8005f00 <checkDemoModCalisma+0x8e8>)
 8005e84:	f005 fb30 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005e92:	481b      	ldr	r0, [pc, #108]	@ (8005f00 <checkDemoModCalisma+0x8e8>)
 8005e94:	f005 fb28 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d003      	beq.n	8005ea6 <checkDemoModCalisma+0x88e>
 8005e9e:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <checkDemoModCalisma+0x910>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d048      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8005ea6:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <checkDemoModCalisma+0x914>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f083 0301 	eor.w	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d041      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8005f30 <checkDemoModCalisma+0x918>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f083 0301 	eor.w	r3, r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d03a      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <checkDemoModCalisma+0x91c>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f083 0301 	eor.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d033      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <checkDemoModCalisma+0x8e4>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02c      	beq.n	8005f38 <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005ede:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <checkDemoModCalisma+0x8dc>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f083 0301 	eor.w	r3, r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d025      	beq.n	8005f38 <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <checkDemoModCalisma+0x910>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e024      	b.n	8005f3e <checkDemoModCalisma+0x926>
 8005ef4:	200010ee 	.word	0x200010ee
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	200010f2 	.word	0x200010f2
 8005f00:	40010c00 	.word	0x40010c00
 8005f04:	2000110a 	.word	0x2000110a
 8005f08:	2000110b 	.word	0x2000110b
 8005f0c:	200010ea 	.word	0x200010ea
 8005f10:	20001094 	.word	0x20001094
 8005f14:	200010a0 	.word	0x200010a0
 8005f18:	200010ce 	.word	0x200010ce
 8005f1c:	200010d5 	.word	0x200010d5
 8005f20:	200010c7 	.word	0x200010c7
 8005f24:	200010c9 	.word	0x200010c9
 8005f28:	200010ef 	.word	0x200010ef
 8005f2c:	200010ed 	.word	0x200010ed
 8005f30:	200010f1 	.word	0x200010f1
 8005f34:	200010f0 	.word	0x200010f0
				} else {
					devmotorasagicalisiyor=0;
 8005f38:	4b96      	ldr	r3, [pc, #600]	@ (8006194 <checkDemoModCalisma+0xb7c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005f3e:	4b95      	ldr	r3, [pc, #596]	@ (8006194 <checkDemoModCalisma+0xb7c>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005f46:	2201      	movs	r2, #1
 8005f48:	2110      	movs	r1, #16
 8005f4a:	4893      	ldr	r0, [pc, #588]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8005f4c:	f005 fae3 	bl	800b516 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005f50:	4b92      	ldr	r3, [pc, #584]	@ (800619c <checkDemoModCalisma+0xb84>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005f56:	4b91      	ldr	r3, [pc, #580]	@ (800619c <checkDemoModCalisma+0xb84>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d024      	beq.n	8005fa8 <checkDemoModCalisma+0x990>
 8005f5e:	2140      	movs	r1, #64	@ 0x40
 8005f60:	488d      	ldr	r0, [pc, #564]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8005f62:	f005 fac1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d007      	beq.n	8005f7c <checkDemoModCalisma+0x964>
 8005f6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f70:	4889      	ldr	r0, [pc, #548]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8005f72:	f005 fab9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d115      	bne.n	8005fa8 <checkDemoModCalisma+0x990>
 8005f7c:	4b88      	ldr	r3, [pc, #544]	@ (80061a0 <checkDemoModCalisma+0xb88>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <checkDemoModCalisma+0x990>
 8005f84:	4b87      	ldr	r3, [pc, #540]	@ (80061a4 <checkDemoModCalisma+0xb8c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <checkDemoModCalisma+0x990>
 8005f8c:	4b86      	ldr	r3, [pc, #536]	@ (80061a8 <checkDemoModCalisma+0xb90>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f083 0301 	eor.w	r3, r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <checkDemoModCalisma+0x990>
					timer2=millis;
 8005f9a:	4b84      	ldr	r3, [pc, #528]	@ (80061ac <checkDemoModCalisma+0xb94>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a84      	ldr	r2, [pc, #528]	@ (80061b0 <checkDemoModCalisma+0xb98>)
 8005fa0:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005fa2:	4b81      	ldr	r3, [pc, #516]	@ (80061a8 <checkDemoModCalisma+0xb90>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005fa8:	4b80      	ldr	r3, [pc, #512]	@ (80061ac <checkDemoModCalisma+0xb94>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b80      	ldr	r3, [pc, #512]	@ (80061b0 <checkDemoModCalisma+0xb98>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	4a80      	ldr	r2, [pc, #512]	@ (80061b4 <checkDemoModCalisma+0xb9c>)
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d303      	bcc.n	8005fc2 <checkDemoModCalisma+0x9aa>
 8005fba:	4b7b      	ldr	r3, [pc, #492]	@ (80061a8 <checkDemoModCalisma+0xb90>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10d      	bne.n	8005fde <checkDemoModCalisma+0x9c6>
 8005fc2:	4b77      	ldr	r3, [pc, #476]	@ (80061a0 <checkDemoModCalisma+0xb88>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <checkDemoModCalisma+0x9c6>
 8005fd0:	4b74      	ldr	r3, [pc, #464]	@ (80061a4 <checkDemoModCalisma+0xb8c>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f083 0301 	eor.w	r3, r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2110      	movs	r1, #16
 8005fe2:	486d      	ldr	r0, [pc, #436]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8005fe4:	f005 fa97 	bl	800b516 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800619c <checkDemoModCalisma+0xb84>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005fee:	4b6e      	ldr	r3, [pc, #440]	@ (80061a8 <checkDemoModCalisma+0xb90>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ff8:	486f      	ldr	r0, [pc, #444]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8005ffa:	f005 fa75 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d120      	bne.n	8006046 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006004:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006008:	486b      	ldr	r0, [pc, #428]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 800600a:	f005 fa6d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d118      	bne.n	8006046 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006014:	2104      	movs	r1, #4
 8006016:	4868      	ldr	r0, [pc, #416]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8006018:	f005 fa66 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d111      	bne.n	8006046 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006022:	2102      	movs	r1, #2
 8006024:	4864      	ldr	r0, [pc, #400]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8006026:	f005 fa5f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006030:	2101      	movs	r1, #1
 8006032:	4861      	ldr	r0, [pc, #388]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8006034:	f005 fa58 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <checkDemoModCalisma+0xa2e>
					makineStop=1;
 800603e:	4b5f      	ldr	r3, [pc, #380]	@ (80061bc <checkDemoModCalisma+0xba4>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e002      	b.n	800604c <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 8006046:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <checkDemoModCalisma+0xba4>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800604c:	4b5c      	ldr	r3, [pc, #368]	@ (80061c0 <checkDemoModCalisma+0xba8>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d144      	bne.n	80060de <checkDemoModCalisma+0xac6>
 8006054:	4b5b      	ldr	r3, [pc, #364]	@ (80061c4 <checkDemoModCalisma+0xbac>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d003      	beq.n	8006064 <checkDemoModCalisma+0xa4c>
 800605c:	4b59      	ldr	r3, [pc, #356]	@ (80061c4 <checkDemoModCalisma+0xbac>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d13c      	bne.n	80060de <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	484c      	ldr	r0, [pc, #304]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8006068:	f005 fa3e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <checkDemoModCalisma+0xa62>
 8006072:	4b55      	ldr	r3, [pc, #340]	@ (80061c8 <checkDemoModCalisma+0xbb0>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <checkDemoModCalisma+0xa7a>
 800607a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800607e:	484e      	ldr	r0, [pc, #312]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8006080:	f005 fa32 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d129      	bne.n	80060de <checkDemoModCalisma+0xac6>
 800608a:	4b4f      	ldr	r3, [pc, #316]	@ (80061c8 <checkDemoModCalisma+0xbb0>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d125      	bne.n	80060de <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006092:	2104      	movs	r1, #4
 8006094:	4840      	ldr	r0, [pc, #256]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8006096:	f005 fa27 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800609a:	4603      	mov	r3, r0
 800609c:	2b01      	cmp	r3, #1
 800609e:	d003      	beq.n	80060a8 <checkDemoModCalisma+0xa90>
 80060a0:	4b4a      	ldr	r3, [pc, #296]	@ (80061cc <checkDemoModCalisma+0xbb4>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11a      	bne.n	80060de <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060a8:	2102      	movs	r1, #2
 80060aa:	483b      	ldr	r0, [pc, #236]	@ (8006198 <checkDemoModCalisma+0xb80>)
 80060ac:	f005 fa1c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d113      	bne.n	80060de <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 80060b6:	4b46      	ldr	r3, [pc, #280]	@ (80061d0 <checkDemoModCalisma+0xbb8>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f083 0301 	eor.w	r3, r3, #1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 80060c4:	4b3d      	ldr	r3, [pc, #244]	@ (80061bc <checkDemoModCalisma+0xba4>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 80060cc:	4b41      	ldr	r3, [pc, #260]	@ (80061d4 <checkDemoModCalisma+0xbbc>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80060d2:	4b36      	ldr	r3, [pc, #216]	@ (80061ac <checkDemoModCalisma+0xb94>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a40      	ldr	r2, [pc, #256]	@ (80061d8 <checkDemoModCalisma+0xbc0>)
 80060d8:	6013      	str	r3, [r2, #0]
					bekle();
 80060da:	f7fd fd49 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80060de:	4b33      	ldr	r3, [pc, #204]	@ (80061ac <checkDemoModCalisma+0xb94>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b3d      	ldr	r3, [pc, #244]	@ (80061d8 <checkDemoModCalisma+0xbc0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	4a3c      	ldr	r2, [pc, #240]	@ (80061dc <checkDemoModCalisma+0xbc4>)
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d211      	bcs.n	8006114 <checkDemoModCalisma+0xafc>
 80060f0:	2104      	movs	r1, #4
 80060f2:	4829      	ldr	r0, [pc, #164]	@ (8006198 <checkDemoModCalisma+0xb80>)
 80060f4:	f005 f9f8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <checkDemoModCalisma+0xafc>
 80060fe:	4b33      	ldr	r3, [pc, #204]	@ (80061cc <checkDemoModCalisma+0xbb4>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <checkDemoModCalisma+0xafc>
 8006106:	4b2d      	ldr	r3, [pc, #180]	@ (80061bc <checkDemoModCalisma+0xba4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f083 0301 	eor.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 8006114:	4b2f      	ldr	r3, [pc, #188]	@ (80061d4 <checkDemoModCalisma+0xbbc>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800611a:	4b29      	ldr	r3, [pc, #164]	@ (80061c0 <checkDemoModCalisma+0xba8>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d160      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>
 8006122:	4b28      	ldr	r3, [pc, #160]	@ (80061c4 <checkDemoModCalisma+0xbac>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d003      	beq.n	8006132 <checkDemoModCalisma+0xb1a>
 800612a:	4b26      	ldr	r3, [pc, #152]	@ (80061c4 <checkDemoModCalisma+0xbac>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d158      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006132:	2104      	movs	r1, #4
 8006134:	4818      	ldr	r0, [pc, #96]	@ (8006198 <checkDemoModCalisma+0xb80>)
 8006136:	f005 f9d7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d003      	beq.n	8006148 <checkDemoModCalisma+0xb30>
 8006140:	4b22      	ldr	r3, [pc, #136]	@ (80061cc <checkDemoModCalisma+0xbb4>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d14d      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006148:	2102      	movs	r1, #2
 800614a:	4813      	ldr	r0, [pc, #76]	@ (8006198 <checkDemoModCalisma+0xb80>)
 800614c:	f005 f9cc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d146      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006156:	2180      	movs	r1, #128	@ 0x80
 8006158:	480f      	ldr	r0, [pc, #60]	@ (8006198 <checkDemoModCalisma+0xb80>)
 800615a:	f005 f9c5 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <checkDemoModCalisma+0xb54>
 8006164:	4b18      	ldr	r3, [pc, #96]	@ (80061c8 <checkDemoModCalisma+0xbb0>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <checkDemoModCalisma+0xb6c>
 800616c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006170:	4811      	ldr	r0, [pc, #68]	@ (80061b8 <checkDemoModCalisma+0xba0>)
 8006172:	f005 f9b9 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d133      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>
 800617c:	4b12      	ldr	r3, [pc, #72]	@ (80061c8 <checkDemoModCalisma+0xbb0>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d12f      	bne.n	80061e4 <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 8006184:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <checkDemoModCalisma+0xba4>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02b      	beq.n	80061e4 <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 800618c:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <checkDemoModCalisma+0xbc8>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e02a      	b.n	80061ea <checkDemoModCalisma+0xbd2>
 8006194:	200010ef 	.word	0x200010ef
 8006198:	40011000 	.word	0x40011000
 800619c:	200010f3 	.word	0x200010f3
 80061a0:	2000110a 	.word	0x2000110a
 80061a4:	2000110b 	.word	0x2000110b
 80061a8:	200010eb 	.word	0x200010eb
 80061ac:	20001094 	.word	0x20001094
 80061b0:	200010a0 	.word	0x200010a0
 80061b4:	200010ce 	.word	0x200010ce
 80061b8:	40010c00 	.word	0x40010c00
 80061bc:	200010fa 	.word	0x200010fa
 80061c0:	200010c1 	.word	0x200010c1
 80061c4:	200010c0 	.word	0x200010c0
 80061c8:	200010c4 	.word	0x200010c4
 80061cc:	200010be 	.word	0x200010be
 80061d0:	200010e7 	.word	0x200010e7
 80061d4:	200010fb 	.word	0x200010fb
 80061d8:	20001098 	.word	0x20001098
 80061dc:	200010d1 	.word	0x200010d1
 80061e0:	200010fc 	.word	0x200010fc
				} else {
					kapi1butonkontrol=0;
 80061e4:	4b8b      	ldr	r3, [pc, #556]	@ (8006414 <checkDemoModCalisma+0xdfc>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061ea:	4b8b      	ldr	r3, [pc, #556]	@ (8006418 <checkDemoModCalisma+0xe00>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d121      	bne.n	8006236 <checkDemoModCalisma+0xc1e>
 80061f2:	4b8a      	ldr	r3, [pc, #552]	@ (800641c <checkDemoModCalisma+0xe04>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d003      	beq.n	8006202 <checkDemoModCalisma+0xbea>
 80061fa:	4b88      	ldr	r3, [pc, #544]	@ (800641c <checkDemoModCalisma+0xe04>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d119      	bne.n	8006236 <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006202:	2104      	movs	r1, #4
 8006204:	4886      	ldr	r0, [pc, #536]	@ (8006420 <checkDemoModCalisma+0xe08>)
 8006206:	f005 f96f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800620a:	4603      	mov	r3, r0
 800620c:	2b01      	cmp	r3, #1
 800620e:	d003      	beq.n	8006218 <checkDemoModCalisma+0xc00>
 8006210:	4b84      	ldr	r3, [pc, #528]	@ (8006424 <checkDemoModCalisma+0xe0c>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10e      	bne.n	8006236 <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006218:	2102      	movs	r1, #2
 800621a:	4881      	ldr	r0, [pc, #516]	@ (8006420 <checkDemoModCalisma+0xe08>)
 800621c:	f005 f964 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 8006226:	4b80      	ldr	r3, [pc, #512]	@ (8006428 <checkDemoModCalisma+0xe10>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 800622e:	4b7f      	ldr	r3, [pc, #508]	@ (800642c <checkDemoModCalisma+0xe14>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e002      	b.n	800623c <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8006236:	4b7d      	ldr	r3, [pc, #500]	@ (800642c <checkDemoModCalisma+0xe14>)
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800623c:	4b75      	ldr	r3, [pc, #468]	@ (8006414 <checkDemoModCalisma+0xdfc>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d107      	bne.n	8006254 <checkDemoModCalisma+0xc3c>
 8006244:	4b79      	ldr	r3, [pc, #484]	@ (800642c <checkDemoModCalisma+0xe14>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <checkDemoModCalisma+0xc3c>
 800624c:	4b78      	ldr	r3, [pc, #480]	@ (8006430 <checkDemoModCalisma+0xe18>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006254:	2201      	movs	r2, #1
 8006256:	2180      	movs	r1, #128	@ 0x80
 8006258:	4876      	ldr	r0, [pc, #472]	@ (8006434 <checkDemoModCalisma+0xe1c>)
 800625a:	f005 f95c 	bl	800b516 <HAL_GPIO_WritePin>
 800625e:	e004      	b.n	800626a <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	@ 0x80
 8006264:	4873      	ldr	r0, [pc, #460]	@ (8006434 <checkDemoModCalisma+0xe1c>)
 8006266:	f005 f956 	bl	800b516 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800626a:	4b73      	ldr	r3, [pc, #460]	@ (8006438 <checkDemoModCalisma+0xe20>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d141      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
 8006272:	4b6a      	ldr	r3, [pc, #424]	@ (800641c <checkDemoModCalisma+0xe04>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d003      	beq.n	8006282 <checkDemoModCalisma+0xc6a>
 800627a:	4b68      	ldr	r3, [pc, #416]	@ (800641c <checkDemoModCalisma+0xe04>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d139      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006282:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006286:	4866      	ldr	r0, [pc, #408]	@ (8006420 <checkDemoModCalisma+0xe08>)
 8006288:	f005 f92e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <checkDemoModCalisma+0xc82>
 8006292:	4b6a      	ldr	r3, [pc, #424]	@ (800643c <checkDemoModCalisma+0xe24>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <checkDemoModCalisma+0xc9a>
 800629a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800629e:	4868      	ldr	r0, [pc, #416]	@ (8006440 <checkDemoModCalisma+0xe28>)
 80062a0:	f005 f922 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d125      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
 80062aa:	4b64      	ldr	r3, [pc, #400]	@ (800643c <checkDemoModCalisma+0xe24>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d121      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062b2:	2102      	movs	r1, #2
 80062b4:	485a      	ldr	r0, [pc, #360]	@ (8006420 <checkDemoModCalisma+0xe08>)
 80062b6:	f005 f917 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11a      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80062c0:	2104      	movs	r1, #4
 80062c2:	4857      	ldr	r0, [pc, #348]	@ (8006420 <checkDemoModCalisma+0xe08>)
 80062c4:	f005 f910 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d113      	bne.n	80062f6 <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 80062ce:	4b56      	ldr	r3, [pc, #344]	@ (8006428 <checkDemoModCalisma+0xe10>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 80062d6:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <checkDemoModCalisma+0xe2c>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f083 0301 	eor.w	r3, r3, #1
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 80062e4:	4b58      	ldr	r3, [pc, #352]	@ (8006448 <checkDemoModCalisma+0xe30>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80062ea:	4b58      	ldr	r3, [pc, #352]	@ (800644c <checkDemoModCalisma+0xe34>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a58      	ldr	r2, [pc, #352]	@ (8006450 <checkDemoModCalisma+0xe38>)
 80062f0:	6013      	str	r3, [r2, #0]
					bekle();
 80062f2:	f7fd fc3d 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80062f6:	4b55      	ldr	r3, [pc, #340]	@ (800644c <checkDemoModCalisma+0xe34>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b55      	ldr	r3, [pc, #340]	@ (8006450 <checkDemoModCalisma+0xe38>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	4a54      	ldr	r2, [pc, #336]	@ (8006454 <checkDemoModCalisma+0xe3c>)
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	4293      	cmp	r3, r2
 8006306:	d20d      	bcs.n	8006324 <checkDemoModCalisma+0xd0c>
 8006308:	2102      	movs	r1, #2
 800630a:	4845      	ldr	r0, [pc, #276]	@ (8006420 <checkDemoModCalisma+0xe08>)
 800630c:	f005 f8ec 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <checkDemoModCalisma+0xd0c>
 8006316:	4b44      	ldr	r3, [pc, #272]	@ (8006428 <checkDemoModCalisma+0xe10>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f083 0301 	eor.w	r3, r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 8006324:	4b48      	ldr	r3, [pc, #288]	@ (8006448 <checkDemoModCalisma+0xe30>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800632a:	4b43      	ldr	r3, [pc, #268]	@ (8006438 <checkDemoModCalisma+0xe20>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d135      	bne.n	800639e <checkDemoModCalisma+0xd86>
 8006332:	4b3a      	ldr	r3, [pc, #232]	@ (800641c <checkDemoModCalisma+0xe04>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d003      	beq.n	8006342 <checkDemoModCalisma+0xd2a>
 800633a:	4b38      	ldr	r3, [pc, #224]	@ (800641c <checkDemoModCalisma+0xe04>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d12d      	bne.n	800639e <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006346:	4836      	ldr	r0, [pc, #216]	@ (8006420 <checkDemoModCalisma+0xe08>)
 8006348:	f005 f8ce 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <checkDemoModCalisma+0xd42>
 8006352:	4b3a      	ldr	r3, [pc, #232]	@ (800643c <checkDemoModCalisma+0xe24>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <checkDemoModCalisma+0xd5a>
 800635a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800635e:	4838      	ldr	r0, [pc, #224]	@ (8006440 <checkDemoModCalisma+0xe28>)
 8006360:	f005 f8c2 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <checkDemoModCalisma+0xd86>
 800636a:	4b34      	ldr	r3, [pc, #208]	@ (800643c <checkDemoModCalisma+0xe24>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d115      	bne.n	800639e <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006372:	2102      	movs	r1, #2
 8006374:	482a      	ldr	r0, [pc, #168]	@ (8006420 <checkDemoModCalisma+0xe08>)
 8006376:	f005 f8b7 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800637a:	4603      	mov	r3, r0
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10e      	bne.n	800639e <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006380:	2104      	movs	r1, #4
 8006382:	4827      	ldr	r0, [pc, #156]	@ (8006420 <checkDemoModCalisma+0xe08>)
 8006384:	f005 f8b0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 800638e:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <checkDemoModCalisma+0xe10>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 8006396:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <checkDemoModCalisma+0xe40>)
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e002      	b.n	80063a4 <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800639e:	4b2e      	ldr	r3, [pc, #184]	@ (8006458 <checkDemoModCalisma+0xe40>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80063a4:	4b24      	ldr	r3, [pc, #144]	@ (8006438 <checkDemoModCalisma+0xe20>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d11d      	bne.n	80063e8 <checkDemoModCalisma+0xdd0>
 80063ac:	4b1b      	ldr	r3, [pc, #108]	@ (800641c <checkDemoModCalisma+0xe04>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d003      	beq.n	80063bc <checkDemoModCalisma+0xda4>
 80063b4:	4b19      	ldr	r3, [pc, #100]	@ (800641c <checkDemoModCalisma+0xe04>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d115      	bne.n	80063e8 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063bc:	2102      	movs	r1, #2
 80063be:	4818      	ldr	r0, [pc, #96]	@ (8006420 <checkDemoModCalisma+0xe08>)
 80063c0:	f005 f892 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10e      	bne.n	80063e8 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063ca:	2104      	movs	r1, #4
 80063cc:	4814      	ldr	r0, [pc, #80]	@ (8006420 <checkDemoModCalisma+0xe08>)
 80063ce:	f005 f88b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 80063d8:	4b13      	ldr	r3, [pc, #76]	@ (8006428 <checkDemoModCalisma+0xe10>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 80063e0:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <checkDemoModCalisma+0xe44>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80063e8:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <checkDemoModCalisma+0xe44>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <checkDemoModCalisma+0xe40>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d107      	bne.n	8006406 <checkDemoModCalisma+0xdee>
 80063f6:	4b19      	ldr	r3, [pc, #100]	@ (800645c <checkDemoModCalisma+0xe44>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <checkDemoModCalisma+0xdee>
 80063fe:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <checkDemoModCalisma+0xe30>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02c      	beq.n	8006460 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	2140      	movs	r1, #64	@ 0x40
 800640a:	480a      	ldr	r0, [pc, #40]	@ (8006434 <checkDemoModCalisma+0xe1c>)
 800640c:	f005 f883 	bl	800b516 <HAL_GPIO_WritePin>
 8006410:	e02b      	b.n	800646a <checkDemoModCalisma+0xe52>
 8006412:	bf00      	nop
 8006414:	200010fc 	.word	0x200010fc
 8006418:	200010c1 	.word	0x200010c1
 800641c:	200010c0 	.word	0x200010c0
 8006420:	40011000 	.word	0x40011000
 8006424:	200010be 	.word	0x200010be
 8006428:	200010fa 	.word	0x200010fa
 800642c:	200010fd 	.word	0x200010fd
 8006430:	200010fb 	.word	0x200010fb
 8006434:	40010800 	.word	0x40010800
 8006438:	200010c2 	.word	0x200010c2
 800643c:	200010c4 	.word	0x200010c4
 8006440:	40010c00 	.word	0x40010c00
 8006444:	200010e7 	.word	0x200010e7
 8006448:	200010fe 	.word	0x200010fe
 800644c:	20001094 	.word	0x20001094
 8006450:	20001098 	.word	0x20001098
 8006454:	200010d2 	.word	0x200010d2
 8006458:	200010ff 	.word	0x200010ff
 800645c:	20001100 	.word	0x20001100
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006460:	2200      	movs	r2, #0
 8006462:	2140      	movs	r1, #64	@ 0x40
 8006464:	4835      	ldr	r0, [pc, #212]	@ (800653c <checkDemoModCalisma+0xf24>)
 8006466:	f005 f856 	bl	800b516 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800646a:	4b35      	ldr	r3, [pc, #212]	@ (8006540 <checkDemoModCalisma+0xf28>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <checkDemoModCalisma+0xe62>
 8006472:	4b33      	ldr	r3, [pc, #204]	@ (8006540 <checkDemoModCalisma+0xf28>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d115      	bne.n	80064a6 <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800647a:	2104      	movs	r1, #4
 800647c:	4831      	ldr	r0, [pc, #196]	@ (8006544 <checkDemoModCalisma+0xf2c>)
 800647e:	f005 f833 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d003      	beq.n	8006490 <checkDemoModCalisma+0xe78>
 8006488:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <checkDemoModCalisma+0xf30>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006490:	2102      	movs	r1, #2
 8006492:	482c      	ldr	r0, [pc, #176]	@ (8006544 <checkDemoModCalisma+0xf2c>)
 8006494:	f005 f828 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800649e:	4b2b      	ldr	r3, [pc, #172]	@ (800654c <checkDemoModCalisma+0xf34>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e002      	b.n	80064ac <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80064a6:	4b29      	ldr	r3, [pc, #164]	@ (800654c <checkDemoModCalisma+0xf34>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80064ac:	4b24      	ldr	r3, [pc, #144]	@ (8006540 <checkDemoModCalisma+0xf28>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d003      	beq.n	80064bc <checkDemoModCalisma+0xea4>
 80064b4:	4b22      	ldr	r3, [pc, #136]	@ (8006540 <checkDemoModCalisma+0xf28>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d111      	bne.n	80064e0 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064bc:	2102      	movs	r1, #2
 80064be:	4821      	ldr	r0, [pc, #132]	@ (8006544 <checkDemoModCalisma+0xf2c>)
 80064c0:	f005 f812 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10a      	bne.n	80064e0 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80064ca:	2104      	movs	r1, #4
 80064cc:	481d      	ldr	r0, [pc, #116]	@ (8006544 <checkDemoModCalisma+0xf2c>)
 80064ce:	f005 f80b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <checkDemoModCalisma+0xf38>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <checkDemoModCalisma+0xf38>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80064e6:	4b19      	ldr	r3, [pc, #100]	@ (800654c <checkDemoModCalisma+0xf34>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00f      	beq.n	800650e <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 80064ee:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <checkDemoModCalisma+0xf3c>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10b      	bne.n	800650e <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80064f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80064fa:	4817      	ldr	r0, [pc, #92]	@ (8006558 <checkDemoModCalisma+0xf40>)
 80064fc:	f004 fff4 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 8006506:	4b15      	ldr	r3, [pc, #84]	@ (800655c <checkDemoModCalisma+0xf44>)
 8006508:	2201      	movs	r2, #1
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e002      	b.n	8006514 <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800650e:	4b13      	ldr	r3, [pc, #76]	@ (800655c <checkDemoModCalisma+0xf44>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8006514:	4b0e      	ldr	r3, [pc, #56]	@ (8006550 <checkDemoModCalisma+0xf38>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d023      	beq.n	8006564 <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 800651c:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <checkDemoModCalisma+0xf3c>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d11f      	bne.n	8006564 <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006528:	480b      	ldr	r0, [pc, #44]	@ (8006558 <checkDemoModCalisma+0xf40>)
 800652a:	f004 ffdd 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d117      	bne.n	8006564 <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 8006534:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <checkDemoModCalisma+0xf48>)
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e016      	b.n	800656a <checkDemoModCalisma+0xf52>
 800653c:	40010800 	.word	0x40010800
 8006540:	200010c5 	.word	0x200010c5
 8006544:	40011000 	.word	0x40011000
 8006548:	200010be 	.word	0x200010be
 800654c:	20001104 	.word	0x20001104
 8006550:	20001105 	.word	0x20001105
 8006554:	200010c4 	.word	0x200010c4
 8006558:	40010c00 	.word	0x40010c00
 800655c:	20001114 	.word	0x20001114
 8006560:	20001115 	.word	0x20001115
				} else {
					kapiactablaesp2=0;
 8006564:	4b7e      	ldr	r3, [pc, #504]	@ (8006760 <checkDemoModCalisma+0x1148>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800656a:	4b7e      	ldr	r3, [pc, #504]	@ (8006764 <checkDemoModCalisma+0x114c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d154      	bne.n	800661c <checkDemoModCalisma+0x1004>
 8006572:	4b7d      	ldr	r3, [pc, #500]	@ (8006768 <checkDemoModCalisma+0x1150>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d003      	beq.n	8006582 <checkDemoModCalisma+0xf6a>
 800657a:	4b7b      	ldr	r3, [pc, #492]	@ (8006768 <checkDemoModCalisma+0x1150>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d14c      	bne.n	800661c <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006582:	4b7a      	ldr	r3, [pc, #488]	@ (800676c <checkDemoModCalisma+0x1154>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <checkDemoModCalisma+0xf7a>
 800658a:	4b79      	ldr	r3, [pc, #484]	@ (8006770 <checkDemoModCalisma+0x1158>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d044      	beq.n	800661c <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006596:	4877      	ldr	r0, [pc, #476]	@ (8006774 <checkDemoModCalisma+0x115c>)
 8006598:	f004 ffa6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01c      	beq.n	80065dc <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80065a2:	2180      	movs	r1, #128	@ 0x80
 80065a4:	4873      	ldr	r0, [pc, #460]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80065a6:	f004 ff9f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80065b0:	2104      	movs	r1, #4
 80065b2:	4870      	ldr	r0, [pc, #448]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80065b4:	f004 ff98 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00e      	beq.n	80065dc <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80065be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065c2:	486c      	ldr	r0, [pc, #432]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80065c4:	f004 ff90 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80065ce:	2102      	movs	r1, #2
 80065d0:	4868      	ldr	r0, [pc, #416]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80065d2:	f004 ff89 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d103      	bne.n	80065e4 <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80065dc:	4b66      	ldr	r3, [pc, #408]	@ (8006778 <checkDemoModCalisma+0x1160>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <checkDemoModCalisma+0xfdc>
 80065e4:	4b65      	ldr	r3, [pc, #404]	@ (800677c <checkDemoModCalisma+0x1164>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <checkDemoModCalisma+0xfdc>
 80065ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006760 <checkDemoModCalisma+0x1148>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 80065f4:	4b62      	ldr	r3, [pc, #392]	@ (8006780 <checkDemoModCalisma+0x1168>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 80065fc:	4b61      	ldr	r3, [pc, #388]	@ (8006784 <checkDemoModCalisma+0x116c>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 800660a:	4b5f      	ldr	r3, [pc, #380]	@ (8006788 <checkDemoModCalisma+0x1170>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006610:	4b5e      	ldr	r3, [pc, #376]	@ (800678c <checkDemoModCalisma+0x1174>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5e      	ldr	r2, [pc, #376]	@ (8006790 <checkDemoModCalisma+0x1178>)
 8006616:	6013      	str	r3, [r2, #0]
					bekle();
 8006618:	f7fd faaa 	bl	8003b70 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800661c:	4b5b      	ldr	r3, [pc, #364]	@ (800678c <checkDemoModCalisma+0x1174>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b5b      	ldr	r3, [pc, #364]	@ (8006790 <checkDemoModCalisma+0x1178>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	4a5b      	ldr	r2, [pc, #364]	@ (8006794 <checkDemoModCalisma+0x117c>)
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	4293      	cmp	r3, r2
 800662c:	d214      	bcs.n	8006658 <checkDemoModCalisma+0x1040>
 800662e:	4b4f      	ldr	r3, [pc, #316]	@ (800676c <checkDemoModCalisma+0x1154>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f083 0301 	eor.w	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <checkDemoModCalisma+0x1032>
 800663c:	4b4c      	ldr	r3, [pc, #304]	@ (8006770 <checkDemoModCalisma+0x1158>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f083 0301 	eor.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <checkDemoModCalisma+0x1040>
 800664a:	4b4d      	ldr	r3, [pc, #308]	@ (8006780 <checkDemoModCalisma+0x1168>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f083 0301 	eor.w	r3, r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 8006658:	4b4b      	ldr	r3, [pc, #300]	@ (8006788 <checkDemoModCalisma+0x1170>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800665e:	4b41      	ldr	r3, [pc, #260]	@ (8006764 <checkDemoModCalisma+0x114c>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d148      	bne.n	80066f8 <checkDemoModCalisma+0x10e0>
 8006666:	4b40      	ldr	r3, [pc, #256]	@ (8006768 <checkDemoModCalisma+0x1150>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d003      	beq.n	8006676 <checkDemoModCalisma+0x105e>
 800666e:	4b3e      	ldr	r3, [pc, #248]	@ (8006768 <checkDemoModCalisma+0x1150>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d140      	bne.n	80066f8 <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006676:	4b3d      	ldr	r3, [pc, #244]	@ (800676c <checkDemoModCalisma+0x1154>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d103      	bne.n	8006686 <checkDemoModCalisma+0x106e>
 800667e:	4b3c      	ldr	r3, [pc, #240]	@ (8006770 <checkDemoModCalisma+0x1158>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d038      	beq.n	80066f8 <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006686:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800668a:	483a      	ldr	r0, [pc, #232]	@ (8006774 <checkDemoModCalisma+0x115c>)
 800668c:	f004 ff2c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01c      	beq.n	80066d0 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006696:	2180      	movs	r1, #128	@ 0x80
 8006698:	4836      	ldr	r0, [pc, #216]	@ (8006774 <checkDemoModCalisma+0x115c>)
 800669a:	f004 ff25 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80066a4:	2104      	movs	r1, #4
 80066a6:	4833      	ldr	r0, [pc, #204]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80066a8:	f004 ff1e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d00e      	beq.n	80066d0 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80066b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066b6:	482f      	ldr	r0, [pc, #188]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80066b8:	f004 ff16 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80066c2:	2102      	movs	r1, #2
 80066c4:	482b      	ldr	r0, [pc, #172]	@ (8006774 <checkDemoModCalisma+0x115c>)
 80066c6:	f004 ff0f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d103      	bne.n	80066d8 <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80066d0:	4b29      	ldr	r3, [pc, #164]	@ (8006778 <checkDemoModCalisma+0x1160>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <checkDemoModCalisma+0x10d0>
 80066d8:	4b28      	ldr	r3, [pc, #160]	@ (800677c <checkDemoModCalisma+0x1164>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <checkDemoModCalisma+0x10d0>
 80066e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006760 <checkDemoModCalisma+0x1148>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 80066e8:	4b25      	ldr	r3, [pc, #148]	@ (8006780 <checkDemoModCalisma+0x1168>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 80066f0:	4b29      	ldr	r3, [pc, #164]	@ (8006798 <checkDemoModCalisma+0x1180>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e002      	b.n	80066fe <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 80066f8:	4b27      	ldr	r3, [pc, #156]	@ (8006798 <checkDemoModCalisma+0x1180>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80066fe:	4b19      	ldr	r3, [pc, #100]	@ (8006764 <checkDemoModCalisma+0x114c>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d117      	bne.n	8006736 <checkDemoModCalisma+0x111e>
 8006706:	4b18      	ldr	r3, [pc, #96]	@ (8006768 <checkDemoModCalisma+0x1150>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d003      	beq.n	8006716 <checkDemoModCalisma+0x10fe>
 800670e:	4b16      	ldr	r3, [pc, #88]	@ (8006768 <checkDemoModCalisma+0x1150>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d10f      	bne.n	8006736 <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006716:	4b15      	ldr	r3, [pc, #84]	@ (800676c <checkDemoModCalisma+0x1154>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <checkDemoModCalisma+0x110e>
 800671e:	4b14      	ldr	r3, [pc, #80]	@ (8006770 <checkDemoModCalisma+0x1158>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 8006726:	4b16      	ldr	r3, [pc, #88]	@ (8006780 <checkDemoModCalisma+0x1168>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 800672e:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <checkDemoModCalisma+0x1184>)
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e002      	b.n	800673c <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8006736:	4b19      	ldr	r3, [pc, #100]	@ (800679c <checkDemoModCalisma+0x1184>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800673c:	4b16      	ldr	r3, [pc, #88]	@ (8006798 <checkDemoModCalisma+0x1180>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <checkDemoModCalisma+0x113c>
 8006744:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <checkDemoModCalisma+0x1170>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <checkDemoModCalisma+0x113c>
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <checkDemoModCalisma+0x1184>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d027      	beq.n	80067a4 <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006754:	2201      	movs	r2, #1
 8006756:	2120      	movs	r1, #32
 8006758:	4811      	ldr	r0, [pc, #68]	@ (80067a0 <checkDemoModCalisma+0x1188>)
 800675a:	f004 fedc 	bl	800b516 <HAL_GPIO_WritePin>
 800675e:	e026      	b.n	80067ae <checkDemoModCalisma+0x1196>
 8006760:	20001115 	.word	0x20001115
 8006764:	200010c3 	.word	0x200010c3
 8006768:	200010c0 	.word	0x200010c0
 800676c:	20001104 	.word	0x20001104
 8006770:	20001105 	.word	0x20001105
 8006774:	40011000 	.word	0x40011000
 8006778:	200010c4 	.word	0x200010c4
 800677c:	20001114 	.word	0x20001114
 8006780:	200010fa 	.word	0x200010fa
 8006784:	200010e7 	.word	0x200010e7
 8006788:	20001101 	.word	0x20001101
 800678c:	20001094 	.word	0x20001094
 8006790:	20001098 	.word	0x20001098
 8006794:	200010d3 	.word	0x200010d3
 8006798:	20001102 	.word	0x20001102
 800679c:	20001103 	.word	0x20001103
 80067a0:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2120      	movs	r1, #32
 80067a8:	48a0      	ldr	r0, [pc, #640]	@ (8006a2c <checkDemoModCalisma+0x1414>)
 80067aa:	f004 feb4 	bl	800b516 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80067ae:	4ba0      	ldr	r3, [pc, #640]	@ (8006a30 <checkDemoModCalisma+0x1418>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <checkDemoModCalisma+0x11bc>
 80067b6:	2102      	movs	r1, #2
 80067b8:	489e      	ldr	r0, [pc, #632]	@ (8006a34 <checkDemoModCalisma+0x141c>)
 80067ba:	f004 fe95 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <checkDemoModCalisma+0x11bc>
 80067c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a38 <checkDemoModCalisma+0x1420>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <checkDemoModCalisma+0x11bc>
 80067cc:	4b9b      	ldr	r3, [pc, #620]	@ (8006a3c <checkDemoModCalisma+0x1424>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d112      	bne.n	80067fa <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80067d4:	4b9a      	ldr	r3, [pc, #616]	@ (8006a40 <checkDemoModCalisma+0x1428>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d021      	beq.n	8006820 <checkDemoModCalisma+0x1208>
 80067dc:	2104      	movs	r1, #4
 80067de:	4895      	ldr	r0, [pc, #596]	@ (8006a34 <checkDemoModCalisma+0x141c>)
 80067e0:	f004 fe82 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11a      	bne.n	8006820 <checkDemoModCalisma+0x1208>
 80067ea:	4b93      	ldr	r3, [pc, #588]	@ (8006a38 <checkDemoModCalisma+0x1420>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <checkDemoModCalisma+0x1208>
 80067f2:	4b92      	ldr	r3, [pc, #584]	@ (8006a3c <checkDemoModCalisma+0x1424>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d012      	beq.n	8006820 <checkDemoModCalisma+0x1208>


					calismaSayisiDemo++;
 80067fa:	4b92      	ldr	r3, [pc, #584]	@ (8006a44 <checkDemoModCalisma+0x142c>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b90      	ldr	r3, [pc, #576]	@ (8006a44 <checkDemoModCalisma+0x142c>)
 8006804:	701a      	strb	r2, [r3, #0]
					eepromData[28]=calismaSayisiDemo;
 8006806:	4b8f      	ldr	r3, [pc, #572]	@ (8006a44 <checkDemoModCalisma+0x142c>)
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	4b8f      	ldr	r3, [pc, #572]	@ (8006a48 <checkDemoModCalisma+0x1430>)
 800680c:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 800680e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a4c <checkDemoModCalisma+0x1434>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8006814:	4b86      	ldr	r3, [pc, #536]	@ (8006a30 <checkDemoModCalisma+0x1418>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800681a:	4b89      	ldr	r3, [pc, #548]	@ (8006a40 <checkDemoModCalisma+0x1428>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006824:	488a      	ldr	r0, [pc, #552]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 8006826:	f004 fe5f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <checkDemoModCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006834:	4886      	ldr	r0, [pc, #536]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 8006836:	f004 fe57 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <checkDemoModCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006844:	4882      	ldr	r0, [pc, #520]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 8006846:	f004 fe4f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <checkDemoModCalisma+0x1246>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006850:	2140      	movs	r1, #64	@ 0x40
 8006852:	4878      	ldr	r0, [pc, #480]	@ (8006a34 <checkDemoModCalisma+0x141c>)
 8006854:	f004 fe48 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <checkDemoModCalisma+0x124e>

					startBasili=1;
 800685e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a54 <checkDemoModCalisma+0x143c>)
 8006860:	2201      	movs	r2, #1
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e002      	b.n	800686c <checkDemoModCalisma+0x1254>
				} else {
					startBasili=0;
 8006866:	4b7b      	ldr	r3, [pc, #492]	@ (8006a54 <checkDemoModCalisma+0x143c>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800686c:	4b79      	ldr	r3, [pc, #484]	@ (8006a54 <checkDemoModCalisma+0x143c>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d014      	beq.n	800689e <checkDemoModCalisma+0x1286>
 8006874:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006878:	4875      	ldr	r0, [pc, #468]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 800687a:	f004 fe35 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800687e:	4603      	mov	r3, r0
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10c      	bne.n	800689e <checkDemoModCalisma+0x1286>

					hataVar=1;
 8006884:	4b74      	ldr	r3, [pc, #464]	@ (8006a58 <checkDemoModCalisma+0x1440>)
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800688a:	2001      	movs	r0, #1
 800688c:	f7fa f940 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006890:	2001      	movs	r0, #1
 8006892:	f7fa f8e5 	bl	8000a60 <hata2EEPROM>
					acilstophatasi=1;
 8006896:	4b71      	ldr	r3, [pc, #452]	@ (8006a5c <checkDemoModCalisma+0x1444>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e018      	b.n	80068d0 <checkDemoModCalisma+0x12b8>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800689e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a5c <checkDemoModCalisma+0x1444>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d014      	beq.n	80068d0 <checkDemoModCalisma+0x12b8>
 80068a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068aa:	4869      	ldr	r0, [pc, #420]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 80068ac:	f004 fe1c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10c      	bne.n	80068d0 <checkDemoModCalisma+0x12b8>
 80068b6:	4b67      	ldr	r3, [pc, #412]	@ (8006a54 <checkDemoModCalisma+0x143c>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f083 0301 	eor.w	r3, r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <checkDemoModCalisma+0x12b8>
					acilstophatasi=0;
 80068c4:	4b65      	ldr	r3, [pc, #404]	@ (8006a5c <checkDemoModCalisma+0x1444>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80068ca:	2001      	movs	r0, #1
 80068cc:	f7fd f8e6 	bl	8003a9c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80068d0:	4b63      	ldr	r3, [pc, #396]	@ (8006a60 <checkDemoModCalisma+0x1448>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f083 0301 	eor.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d023      	beq.n	8006926 <checkDemoModCalisma+0x130e>
 80068de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068e2:	485b      	ldr	r0, [pc, #364]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 80068e4:	f004 fe00 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <checkDemoModCalisma+0x12de>
 80068ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006a64 <checkDemoModCalisma+0x144c>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <checkDemoModCalisma+0x130e>
 80068f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a68 <checkDemoModCalisma+0x1450>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d113      	bne.n	8006926 <checkDemoModCalisma+0x130e>
 80068fe:	4b5b      	ldr	r3, [pc, #364]	@ (8006a6c <checkDemoModCalisma+0x1454>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f083 0301 	eor.w	r3, r3, #1
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <checkDemoModCalisma+0x130e>
					hataVar=1;
 800690c:	4b52      	ldr	r3, [pc, #328]	@ (8006a58 <checkDemoModCalisma+0x1440>)
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006912:	2002      	movs	r0, #2
 8006914:	f7fa f8fc 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8006918:	2002      	movs	r0, #2
 800691a:	f7fa f8a1 	bl	8000a60 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 800691e:	4b53      	ldr	r3, [pc, #332]	@ (8006a6c <checkDemoModCalisma+0x1454>)
 8006920:	2201      	movs	r2, #1
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e017      	b.n	8006956 <checkDemoModCalisma+0x133e>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006926:	4b51      	ldr	r3, [pc, #324]	@ (8006a6c <checkDemoModCalisma+0x1454>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d013      	beq.n	8006956 <checkDemoModCalisma+0x133e>
 800692e:	4b4c      	ldr	r3, [pc, #304]	@ (8006a60 <checkDemoModCalisma+0x1448>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <checkDemoModCalisma+0x133e>
 8006936:	4b4e      	ldr	r3, [pc, #312]	@ (8006a70 <checkDemoModCalisma+0x1458>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <checkDemoModCalisma+0x133e>
					emniyetCercevesihatasi=0;
 8006944:	4b49      	ldr	r3, [pc, #292]	@ (8006a6c <checkDemoModCalisma+0x1454>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800694a:	4b46      	ldr	r3, [pc, #280]	@ (8006a64 <checkDemoModCalisma+0x144c>)
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006950:	2002      	movs	r0, #2
 8006952:	f7fd f8a3 	bl	8003a9c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8006956:	4b47      	ldr	r3, [pc, #284]	@ (8006a74 <checkDemoModCalisma+0x145c>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d123      	bne.n	80069a6 <checkDemoModCalisma+0x138e>
 800695e:	4b46      	ldr	r3, [pc, #280]	@ (8006a78 <checkDemoModCalisma+0x1460>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d11f      	bne.n	80069a6 <checkDemoModCalisma+0x138e>
 8006966:	4b45      	ldr	r3, [pc, #276]	@ (8006a7c <checkDemoModCalisma+0x1464>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01b      	beq.n	80069a6 <checkDemoModCalisma+0x138e>
 800696e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006972:	4830      	ldr	r0, [pc, #192]	@ (8006a34 <checkDemoModCalisma+0x141c>)
 8006974:	f004 fdb8 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d113      	bne.n	80069a6 <checkDemoModCalisma+0x138e>
 800697e:	4b40      	ldr	r3, [pc, #256]	@ (8006a80 <checkDemoModCalisma+0x1468>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f083 0301 	eor.w	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <checkDemoModCalisma+0x138e>
					hataVar=1;
 800698c:	4b32      	ldr	r3, [pc, #200]	@ (8006a58 <checkDemoModCalisma+0x1440>)
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006992:	2003      	movs	r0, #3
 8006994:	f7fa f8bc 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006998:	2003      	movs	r0, #3
 800699a:	f7fa f861 	bl	8000a60 <hata2EEPROM>
					basinchatasi=1;
 800699e:	4b38      	ldr	r3, [pc, #224]	@ (8006a80 <checkDemoModCalisma+0x1468>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	e015      	b.n	80069d2 <checkDemoModCalisma+0x13ba>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80069a6:	4b36      	ldr	r3, [pc, #216]	@ (8006a80 <checkDemoModCalisma+0x1468>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d011      	beq.n	80069d2 <checkDemoModCalisma+0x13ba>
 80069ae:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <checkDemoModCalisma+0x145c>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10d      	bne.n	80069d2 <checkDemoModCalisma+0x13ba>
 80069b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069ba:	4825      	ldr	r0, [pc, #148]	@ (8006a50 <checkDemoModCalisma+0x1438>)
 80069bc:	f004 fd94 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d105      	bne.n	80069d2 <checkDemoModCalisma+0x13ba>
					basinchatasi=0;
 80069c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006a80 <checkDemoModCalisma+0x1468>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80069cc:	2003      	movs	r0, #3
 80069ce:	f7fd f865 	bl	8003a9c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80069d2:	4b20      	ldr	r3, [pc, #128]	@ (8006a54 <checkDemoModCalisma+0x143c>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <checkDemoModCalisma+0x13ca>
 80069da:	4b2a      	ldr	r3, [pc, #168]	@ (8006a84 <checkDemoModCalisma+0x146c>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d056      	beq.n	8006a90 <checkDemoModCalisma+0x1478>
 80069e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069e6:	4811      	ldr	r0, [pc, #68]	@ (8006a2c <checkDemoModCalisma+0x1414>)
 80069e8:	f004 fd7e 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d14e      	bne.n	8006a90 <checkDemoModCalisma+0x1478>
 80069f2:	4b25      	ldr	r3, [pc, #148]	@ (8006a88 <checkDemoModCalisma+0x1470>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d003      	beq.n	8006a02 <checkDemoModCalisma+0x13ea>
 80069fa:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <checkDemoModCalisma+0x1470>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d146      	bne.n	8006a90 <checkDemoModCalisma+0x1478>
 8006a02:	4b22      	ldr	r3, [pc, #136]	@ (8006a8c <checkDemoModCalisma+0x1474>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f083 0301 	eor.w	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d03f      	beq.n	8006a90 <checkDemoModCalisma+0x1478>
					hataVar=1;
 8006a10:	4b11      	ldr	r3, [pc, #68]	@ (8006a58 <checkDemoModCalisma+0x1440>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006a16:	2004      	movs	r0, #4
 8006a18:	f7fa f87a 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006a1c:	2004      	movs	r0, #4
 8006a1e:	f7fa f81f 	bl	8000a60 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006a22:	4b1a      	ldr	r3, [pc, #104]	@ (8006a8c <checkDemoModCalisma+0x1474>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e052      	b.n	8006ad0 <checkDemoModCalisma+0x14b8>
 8006a2a:	bf00      	nop
 8006a2c:	40010800 	.word	0x40010800
 8006a30:	200010f7 	.word	0x200010f7
 8006a34:	40011000 	.word	0x40011000
 8006a38:	200010be 	.word	0x200010be
 8006a3c:	200010fa 	.word	0x200010fa
 8006a40:	200010f8 	.word	0x200010f8
 8006a44:	200010b5 	.word	0x200010b5
 8006a48:	20000fec 	.word	0x20000fec
 8006a4c:	200010e4 	.word	0x200010e4
 8006a50:	40010c00 	.word	0x40010c00
 8006a54:	20001106 	.word	0x20001106
 8006a58:	2000110d 	.word	0x2000110d
 8006a5c:	20001108 	.word	0x20001108
 8006a60:	2000110f 	.word	0x2000110f
 8006a64:	20001119 	.word	0x20001119
 8006a68:	200010bc 	.word	0x200010bc
 8006a6c:	20001109 	.word	0x20001109
 8006a70:	200010f0 	.word	0x200010f0
 8006a74:	200010bb 	.word	0x200010bb
 8006a78:	200010bf 	.word	0x200010bf
 8006a7c:	2000110c 	.word	0x2000110c
 8006a80:	20001116 	.word	0x20001116
 8006a84:	2000111a 	.word	0x2000111a
 8006a88:	200010c0 	.word	0x200010c0
 8006a8c:	20001117 	.word	0x20001117
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006a90:	4b64      	ldr	r3, [pc, #400]	@ (8006c24 <checkDemoModCalisma+0x160c>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <checkDemoModCalisma+0x14b8>
 8006a98:	4b63      	ldr	r3, [pc, #396]	@ (8006c28 <checkDemoModCalisma+0x1610>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <checkDemoModCalisma+0x14b8>
 8006aa0:	4b62      	ldr	r3, [pc, #392]	@ (8006c2c <checkDemoModCalisma+0x1614>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f083 0301 	eor.w	r3, r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <checkDemoModCalisma+0x14b8>
 8006aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ab2:	485f      	ldr	r0, [pc, #380]	@ (8006c30 <checkDemoModCalisma+0x1618>)
 8006ab4:	f004 fd18 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d108      	bne.n	8006ad0 <checkDemoModCalisma+0x14b8>

					katkapisivicihatasi=0;
 8006abe:	4b59      	ldr	r3, [pc, #356]	@ (8006c24 <checkDemoModCalisma+0x160c>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c34 <checkDemoModCalisma+0x161c>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006aca:	2004      	movs	r0, #4
 8006acc:	f7fc ffe6 	bl	8003a9c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006ad0:	4b56      	ldr	r3, [pc, #344]	@ (8006c2c <checkDemoModCalisma+0x1614>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <checkDemoModCalisma+0x14c8>
 8006ad8:	4b57      	ldr	r3, [pc, #348]	@ (8006c38 <checkDemoModCalisma+0x1620>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d023      	beq.n	8006b28 <checkDemoModCalisma+0x1510>
 8006ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ae4:	4852      	ldr	r0, [pc, #328]	@ (8006c30 <checkDemoModCalisma+0x1618>)
 8006ae6:	f004 fcff 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11b      	bne.n	8006b28 <checkDemoModCalisma+0x1510>
 8006af0:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <checkDemoModCalisma+0x1624>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d003      	beq.n	8006b00 <checkDemoModCalisma+0x14e8>
 8006af8:	4b50      	ldr	r3, [pc, #320]	@ (8006c3c <checkDemoModCalisma+0x1624>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d113      	bne.n	8006b28 <checkDemoModCalisma+0x1510>
 8006b00:	4b4f      	ldr	r3, [pc, #316]	@ (8006c40 <checkDemoModCalisma+0x1628>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <checkDemoModCalisma+0x1510>

					hataVar=1;
 8006b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8006c44 <checkDemoModCalisma+0x162c>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006b14:	2005      	movs	r0, #5
 8006b16:	f7f9 fffb 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006b1a:	2005      	movs	r0, #5
 8006b1c:	f7f9 ffa0 	bl	8000a60 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006b20:	4b47      	ldr	r3, [pc, #284]	@ (8006c40 <checkDemoModCalisma+0x1628>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	e023      	b.n	8006b70 <checkDemoModCalisma+0x1558>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006b28:	4b45      	ldr	r3, [pc, #276]	@ (8006c40 <checkDemoModCalisma+0x1628>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01f      	beq.n	8006b70 <checkDemoModCalisma+0x1558>
 8006b30:	4b3d      	ldr	r3, [pc, #244]	@ (8006c28 <checkDemoModCalisma+0x1610>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <checkDemoModCalisma+0x1558>
 8006b38:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <checkDemoModCalisma+0x1614>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f083 0301 	eor.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d014      	beq.n	8006b70 <checkDemoModCalisma+0x1558>
 8006b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b4a:	4839      	ldr	r0, [pc, #228]	@ (8006c30 <checkDemoModCalisma+0x1618>)
 8006b4c:	f004 fccc 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <checkDemoModCalisma+0x1558>
 8006b56:	4b34      	ldr	r3, [pc, #208]	@ (8006c28 <checkDemoModCalisma+0x1610>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <checkDemoModCalisma+0x1558>
					tablakapisivicihatasi=0;
 8006b5e:	4b38      	ldr	r3, [pc, #224]	@ (8006c40 <checkDemoModCalisma+0x1628>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006b64:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <checkDemoModCalisma+0x1620>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006b6a:	2005      	movs	r0, #5
 8006b6c:	f7fc ff96 	bl	8003a9c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006b70:	4b35      	ldr	r3, [pc, #212]	@ (8006c48 <checkDemoModCalisma+0x1630>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <checkDemoModCalisma+0x1570>
 8006b78:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <checkDemoModCalisma+0x1634>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <checkDemoModCalisma+0x1570>
 8006b80:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <checkDemoModCalisma+0x1638>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01b      	beq.n	8006bc0 <checkDemoModCalisma+0x15a8>
 8006b88:	4b32      	ldr	r3, [pc, #200]	@ (8006c54 <checkDemoModCalisma+0x163c>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f083 0301 	eor.w	r3, r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d014      	beq.n	8006bc0 <checkDemoModCalisma+0x15a8>
				    if(millis-timer4>=makineCalismaTmr) {
 8006b96:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <checkDemoModCalisma+0x1640>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <checkDemoModCalisma+0x1644>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8006c60 <checkDemoModCalisma+0x1648>)
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d30b      	bcc.n	8006bc0 <checkDemoModCalisma+0x15a8>
					  	hataVar=1;
 8006ba8:	4b26      	ldr	r3, [pc, #152]	@ (8006c44 <checkDemoModCalisma+0x162c>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006bae:	2006      	movs	r0, #6
 8006bb0:	f7f9 ffae 	bl	8000b10 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006bb4:	2006      	movs	r0, #6
 8006bb6:	f7f9 ff53 	bl	8000a60 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006bba:	4b26      	ldr	r3, [pc, #152]	@ (8006c54 <checkDemoModCalisma+0x163c>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006bc0:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <checkDemoModCalisma+0x163c>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d013      	beq.n	8006bf0 <checkDemoModCalisma+0x15d8>
 8006bc8:	2108      	movs	r1, #8
 8006bca:	4819      	ldr	r0, [pc, #100]	@ (8006c30 <checkDemoModCalisma+0x1618>)
 8006bcc:	f004 fc8c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <checkDemoModCalisma+0x15d8>
 8006bd6:	4b15      	ldr	r3, [pc, #84]	@ (8006c2c <checkDemoModCalisma+0x1614>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f083 0301 	eor.w	r3, r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <checkDemoModCalisma+0x15d8>
					maksimumcalismahatasi=0;
 8006be4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c54 <checkDemoModCalisma+0x163c>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006bea:	2006      	movs	r0, #6
 8006bec:	f7fc ff56 	bl	8003a9c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c64 <checkDemoModCalisma+0x164c>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <checkDemoModCalisma+0x15f8>
 8006bf8:	4b14      	ldr	r3, [pc, #80]	@ (8006c4c <checkDemoModCalisma+0x1634>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d107      	bne.n	8006c10 <checkDemoModCalisma+0x15f8>
 8006c00:	4b19      	ldr	r3, [pc, #100]	@ (8006c68 <checkDemoModCalisma+0x1650>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <checkDemoModCalisma+0x15f8>
 8006c08:	4b11      	ldr	r3, [pc, #68]	@ (8006c50 <checkDemoModCalisma+0x1638>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02f      	beq.n	8006c70 <checkDemoModCalisma+0x1658>
					makineCalisiyor=0;
 8006c10:	4b16      	ldr	r3, [pc, #88]	@ (8006c6c <checkDemoModCalisma+0x1654>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006c16:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <checkDemoModCalisma+0x161c>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <checkDemoModCalisma+0x1620>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e02c      	b.n	8006c7e <checkDemoModCalisma+0x1666>
 8006c24:	20001117 	.word	0x20001117
 8006c28:	200010fa 	.word	0x200010fa
 8006c2c:	20001106 	.word	0x20001106
 8006c30:	40010800 	.word	0x40010800
 8006c34:	2000111a 	.word	0x2000111a
 8006c38:	2000111b 	.word	0x2000111b
 8006c3c:	200010c0 	.word	0x200010c0
 8006c40:	20001118 	.word	0x20001118
 8006c44:	2000110d 	.word	0x2000110d
 8006c48:	2000110c 	.word	0x2000110c
 8006c4c:	200010f0 	.word	0x200010f0
 8006c50:	200010ef 	.word	0x200010ef
 8006c54:	20001107 	.word	0x20001107
 8006c58:	20001094 	.word	0x20001094
 8006c5c:	200010a8 	.word	0x200010a8
 8006c60:	200010d0 	.word	0x200010d0
 8006c64:	200010ed 	.word	0x200010ed
 8006c68:	200010ee 	.word	0x200010ee
 8006c6c:	2000110e 	.word	0x2000110e
				} else {
					makineCalisiyor=1;
 8006c70:	4b90      	ldr	r3, [pc, #576]	@ (8006eb4 <checkDemoModCalisma+0x189c>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006c76:	4b90      	ldr	r3, [pc, #576]	@ (8006eb8 <checkDemoModCalisma+0x18a0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a90      	ldr	r2, [pc, #576]	@ (8006ebc <checkDemoModCalisma+0x18a4>)
 8006c7c:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006c7e:	4b90      	ldr	r3, [pc, #576]	@ (8006ec0 <checkDemoModCalisma+0x18a8>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02f      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
 8006c86:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec4 <checkDemoModCalisma+0x18ac>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d028      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
 8006c94:	4b8c      	ldr	r3, [pc, #560]	@ (8006ec8 <checkDemoModCalisma+0x18b0>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d021      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
 8006ca2:	4b8a      	ldr	r3, [pc, #552]	@ (8006ecc <checkDemoModCalisma+0x18b4>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f083 0301 	eor.w	r3, r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01a      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006cb0:	4b87      	ldr	r3, [pc, #540]	@ (8006ed0 <checkDemoModCalisma+0x18b8>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f083 0301 	eor.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d013      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
 8006cbe:	4b85      	ldr	r3, [pc, #532]	@ (8006ed4 <checkDemoModCalisma+0x18bc>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f083 0301 	eor.w	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>
 8006ccc:	4b82      	ldr	r3, [pc, #520]	@ (8006ed8 <checkDemoModCalisma+0x18c0>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f083 0301 	eor.w	r3, r3, #1
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <checkDemoModCalisma+0x16ce>

					hataVar=0;
 8006cda:	4b79      	ldr	r3, [pc, #484]	@ (8006ec0 <checkDemoModCalisma+0x18a8>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006ce0:	2007      	movs	r0, #7
 8006ce2:	f7fc fedb 	bl	8003a9c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006ce6:	4b76      	ldr	r3, [pc, #472]	@ (8006ec0 <checkDemoModCalisma+0x18a8>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d02a      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
 8006cee:	4b75      	ldr	r3, [pc, #468]	@ (8006ec4 <checkDemoModCalisma+0x18ac>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f083 0301 	eor.w	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d023      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
 8006cfc:	4b72      	ldr	r3, [pc, #456]	@ (8006ec8 <checkDemoModCalisma+0x18b0>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01f      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
 8006d04:	4b71      	ldr	r3, [pc, #452]	@ (8006ecc <checkDemoModCalisma+0x18b4>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	f083 0301 	eor.w	r3, r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006d12:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed0 <checkDemoModCalisma+0x18b8>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f083 0301 	eor.w	r3, r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
 8006d20:	4b6c      	ldr	r3, [pc, #432]	@ (8006ed4 <checkDemoModCalisma+0x18bc>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
 8006d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed8 <checkDemoModCalisma+0x18c0>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f083 0301 	eor.w	r3, r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <checkDemoModCalisma+0x172c>
				{
					EmnCerHataMakYukariCalis=1;
 8006d3c:	4b67      	ldr	r3, [pc, #412]	@ (8006edc <checkDemoModCalisma+0x18c4>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e009      	b.n	8006d58 <checkDemoModCalisma+0x1740>
				}
				else if(emniyetCercevesihatasi==0)
 8006d44:	4b60      	ldr	r3, [pc, #384]	@ (8006ec8 <checkDemoModCalisma+0x18b0>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f083 0301 	eor.w	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <checkDemoModCalisma+0x1740>
				{
					EmnCerHataMakYukariCalis=0;
 8006d52:	4b62      	ldr	r3, [pc, #392]	@ (8006edc <checkDemoModCalisma+0x18c4>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006d58:	4b61      	ldr	r3, [pc, #388]	@ (8006ee0 <checkDemoModCalisma+0x18c8>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 81c7 	bne.w	80070f0 <checkDemoModCalisma+0x1ad8>
 8006d62:	4b60      	ldr	r3, [pc, #384]	@ (8006ee4 <checkDemoModCalisma+0x18cc>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 81c2 	beq.w	80070f0 <checkDemoModCalisma+0x1ad8>
 8006d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ee8 <checkDemoModCalisma+0x18d0>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 81bd 	bne.w	80070f0 <checkDemoModCalisma+0x1ad8>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006d76:	2102      	movs	r1, #2
 8006d78:	485c      	ldr	r0, [pc, #368]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006d7a:	f004 fbb5 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11d      	bne.n	8006dc0 <checkDemoModCalisma+0x17a8>
						&& (demoAsagiCalis==0)
 8006d84:	4b5a      	ldr	r3, [pc, #360]	@ (8006ef0 <checkDemoModCalisma+0x18d8>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f083 0301 	eor.w	r3, r3, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <checkDemoModCalisma+0x17a8>
						&& (demoDevYukari==0)
 8006d92:	4b58      	ldr	r3, [pc, #352]	@ (8006ef4 <checkDemoModCalisma+0x18dc>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00f      	beq.n	8006dc0 <checkDemoModCalisma+0x17a8>
						&& (demoDevAsagi==0)) {
 8006da0:	4b55      	ldr	r3, [pc, #340]	@ (8006ef8 <checkDemoModCalisma+0x18e0>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <checkDemoModCalisma+0x17a8>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006dae:	2201      	movs	r2, #1
 8006db0:	2104      	movs	r1, #4
 8006db2:	4852      	ldr	r0, [pc, #328]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006db4:	f004 fbaf 	bl	800b516 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006db8:	4b51      	ldr	r3, [pc, #324]	@ (8006f00 <checkDemoModCalisma+0x18e8>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e00e      	b.n	8006dde <checkDemoModCalisma+0x17c6>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	484a      	ldr	r0, [pc, #296]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006dc4:	f004 fb90 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d107      	bne.n	8006dde <checkDemoModCalisma+0x17c6>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	484a      	ldr	r0, [pc, #296]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006dd4:	f004 fb9f 	bl	800b516 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006dd8:	4b49      	ldr	r3, [pc, #292]	@ (8006f00 <checkDemoModCalisma+0x18e8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006dde:	4b48      	ldr	r3, [pc, #288]	@ (8006f00 <checkDemoModCalisma+0x18e8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <checkDemoModCalisma+0x17e6>
 8006de6:	4b43      	ldr	r3, [pc, #268]	@ (8006ef4 <checkDemoModCalisma+0x18dc>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d107      	bne.n	8006dfe <checkDemoModCalisma+0x17e6>
 8006dee:	4b42      	ldr	r3, [pc, #264]	@ (8006ef8 <checkDemoModCalisma+0x18e0>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <checkDemoModCalisma+0x17e6>
 8006df6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef0 <checkDemoModCalisma+0x18d8>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <checkDemoModCalisma+0x1800>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e04:	483d      	ldr	r0, [pc, #244]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006e06:	f004 fb86 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e10:	483a      	ldr	r0, [pc, #232]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006e12:	f004 fb80 	bl	800b516 <HAL_GPIO_WritePin>
 8006e16:	e00b      	b.n	8006e30 <checkDemoModCalisma+0x1818>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e1e:	4837      	ldr	r0, [pc, #220]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006e20:	f004 fb79 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e24:	2200      	movs	r2, #0
 8006e26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e2a:	4834      	ldr	r0, [pc, #208]	@ (8006efc <checkDemoModCalisma+0x18e4>)
 8006e2c:	f004 fb73 	bl	800b516 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e30:	2102      	movs	r1, #2
 8006e32:	482e      	ldr	r0, [pc, #184]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006e34:	f004 fb58 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10d      	bne.n	8006e5a <checkDemoModCalisma+0x1842>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006e3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e42:	482a      	ldr	r0, [pc, #168]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006e44:	f004 fb50 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <checkDemoModCalisma+0x1842>
						&& (demoYukariCalis==0)
 8006e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f00 <checkDemoModCalisma+0x18e8>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f083 0301 	eor.w	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e5a:	2102      	movs	r1, #2
 8006e5c:	4823      	ldr	r0, [pc, #140]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006e5e:	f004 fb43 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d14d      	bne.n	8006f04 <checkDemoModCalisma+0x18ec>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006e68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e6c:	481f      	ldr	r0, [pc, #124]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006e6e:	f004 fb3b 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d145      	bne.n	8006f04 <checkDemoModCalisma+0x18ec>
						&&(demoYukariCalis==0)
 8006e78:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <checkDemoModCalisma+0x18e8>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f083 0301 	eor.w	r3, r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03e      	beq.n	8006f04 <checkDemoModCalisma+0x18ec>
						&&(demoAsagiCalis==0)
 8006e86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <checkDemoModCalisma+0x18d8>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f083 0301 	eor.w	r3, r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d037      	beq.n	8006f04 <checkDemoModCalisma+0x18ec>
						&& (demoDevAsagi==0)) {
 8006e94:	4b18      	ldr	r3, [pc, #96]	@ (8006ef8 <checkDemoModCalisma+0x18e0>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f083 0301 	eor.w	r3, r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d030      	beq.n	8006f04 <checkDemoModCalisma+0x18ec>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	2120      	movs	r1, #32
 8006ea6:	4811      	ldr	r0, [pc, #68]	@ (8006eec <checkDemoModCalisma+0x18d4>)
 8006ea8:	f004 fb35 	bl	800b516 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006eac:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <checkDemoModCalisma+0x18dc>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e02f      	b.n	8006f14 <checkDemoModCalisma+0x18fc>
 8006eb4:	2000110e 	.word	0x2000110e
 8006eb8:	20001094 	.word	0x20001094
 8006ebc:	200010a8 	.word	0x200010a8
 8006ec0:	2000110d 	.word	0x2000110d
 8006ec4:	20001108 	.word	0x20001108
 8006ec8:	20001109 	.word	0x20001109
 8006ecc:	20001116 	.word	0x20001116
 8006ed0:	20001117 	.word	0x20001117
 8006ed4:	20001118 	.word	0x20001118
 8006ed8:	20001107 	.word	0x20001107
 8006edc:	2000111c 	.word	0x2000111c
 8006ee0:	200010d6 	.word	0x200010d6
 8006ee4:	2000110a 	.word	0x2000110a
 8006ee8:	200010d5 	.word	0x200010d5
 8006eec:	40011000 	.word	0x40011000
 8006ef0:	20001111 	.word	0x20001111
 8006ef4:	20001112 	.word	0x20001112
 8006ef8:	20001113 	.word	0x20001113
 8006efc:	40010c00 	.word	0x40010c00
 8006f00:	20001110 	.word	0x20001110
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f04:	2200      	movs	r2, #0
 8006f06:	2120      	movs	r1, #32
 8006f08:	4899      	ldr	r0, [pc, #612]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f0a:	f004 fb04 	bl	800b516 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006f0e:	4b99      	ldr	r3, [pc, #612]	@ (8007174 <checkDemoModCalisma+0x1b5c>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006f14:	2102      	movs	r1, #2
 8006f16:	4896      	ldr	r0, [pc, #600]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f18:	f004 fae6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d125      	bne.n	8006f6e <checkDemoModCalisma+0x1956>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006f22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f26:	4892      	ldr	r0, [pc, #584]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f28:	f004 fade 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d11d      	bne.n	8006f6e <checkDemoModCalisma+0x1956>
						&&(demoYukariCalis==0)
 8006f32:	4b91      	ldr	r3, [pc, #580]	@ (8007178 <checkDemoModCalisma+0x1b60>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f083 0301 	eor.w	r3, r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <checkDemoModCalisma+0x1956>
						&&(demoDevYukari==0)
 8006f40:	4b8c      	ldr	r3, [pc, #560]	@ (8007174 <checkDemoModCalisma+0x1b5c>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00f      	beq.n	8006f6e <checkDemoModCalisma+0x1956>
						&& (demoAsagiCalis==0)) {
 8006f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800717c <checkDemoModCalisma+0x1b64>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f083 0301 	eor.w	r3, r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <checkDemoModCalisma+0x1956>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2110      	movs	r1, #16
 8006f60:	4883      	ldr	r0, [pc, #524]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f62:	f004 fad8 	bl	800b516 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006f66:	4b86      	ldr	r3, [pc, #536]	@ (8007180 <checkDemoModCalisma+0x1b68>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	e007      	b.n	8006f7e <checkDemoModCalisma+0x1966>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2110      	movs	r1, #16
 8006f72:	487f      	ldr	r0, [pc, #508]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f74:	f004 facf 	bl	800b516 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006f78:	4b81      	ldr	r3, [pc, #516]	@ (8007180 <checkDemoModCalisma+0x1b68>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006f7e:	2104      	movs	r1, #4
 8006f80:	487b      	ldr	r0, [pc, #492]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006f82:	f004 fab1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d125      	bne.n	8006fd8 <checkDemoModCalisma+0x19c0>
						&& (demoYukariCalis==0)
 8006f8c:	4b7a      	ldr	r3, [pc, #488]	@ (8007178 <checkDemoModCalisma+0x1b60>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f083 0301 	eor.w	r3, r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01e      	beq.n	8006fd8 <checkDemoModCalisma+0x19c0>
						&& (demoDevAsagi==0)
 8006f9a:	4b79      	ldr	r3, [pc, #484]	@ (8007180 <checkDemoModCalisma+0x1b68>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f083 0301 	eor.w	r3, r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <checkDemoModCalisma+0x19c0>
						&& (demoDevYukari==0)) {
 8006fa8:	4b72      	ldr	r3, [pc, #456]	@ (8007174 <checkDemoModCalisma+0x1b5c>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f083 0301 	eor.w	r3, r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d010      	beq.n	8006fd8 <checkDemoModCalisma+0x19c0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	2102      	movs	r1, #2
 8006fba:	4872      	ldr	r0, [pc, #456]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8006fbc:	f004 faab 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	486f      	ldr	r0, [pc, #444]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8006fc6:	f004 faa6 	bl	800b516 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006fca:	4b6c      	ldr	r3, [pc, #432]	@ (800717c <checkDemoModCalisma+0x1b64>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8007188 <checkDemoModCalisma+0x1b70>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e013      	b.n	8007000 <checkDemoModCalisma+0x19e8>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4865      	ldr	r0, [pc, #404]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8006fdc:	f004 fa84 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10c      	bne.n	8007000 <checkDemoModCalisma+0x19e8>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2102      	movs	r1, #2
 8006fea:	4866      	ldr	r0, [pc, #408]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8006fec:	f004 fa93 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4863      	ldr	r0, [pc, #396]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8006ff6:	f004 fa8e 	bl	800b516 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006ffa:	4b60      	ldr	r3, [pc, #384]	@ (800717c <checkDemoModCalisma+0x1b64>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007000:	2104      	movs	r1, #4
 8007002:	485b      	ldr	r0, [pc, #364]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8007004:	f004 fa70 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007008:	4603      	mov	r3, r0
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10d      	bne.n	800702a <checkDemoModCalisma+0x1a12>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800700e:	2201      	movs	r2, #1
 8007010:	2180      	movs	r1, #128	@ 0x80
 8007012:	485e      	ldr	r0, [pc, #376]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007014:	f004 fa7f 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007018:	2201      	movs	r2, #1
 800701a:	2120      	movs	r1, #32
 800701c:	485b      	ldr	r0, [pc, #364]	@ (800718c <checkDemoModCalisma+0x1b74>)
 800701e:	f004 fa7a 	bl	800b516 <HAL_GPIO_WritePin>
					timer3 = millis;
 8007022:	4b5b      	ldr	r3, [pc, #364]	@ (8007190 <checkDemoModCalisma+0x1b78>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a5b      	ldr	r2, [pc, #364]	@ (8007194 <checkDemoModCalisma+0x1b7c>)
 8007028:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800702a:	4b59      	ldr	r3, [pc, #356]	@ (8007190 <checkDemoModCalisma+0x1b78>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b59      	ldr	r3, [pc, #356]	@ (8007194 <checkDemoModCalisma+0x1b7c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b04      	cmp	r3, #4
 8007036:	d909      	bls.n	800704c <checkDemoModCalisma+0x1a34>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007038:	2200      	movs	r2, #0
 800703a:	2180      	movs	r1, #128	@ 0x80
 800703c:	4853      	ldr	r0, [pc, #332]	@ (800718c <checkDemoModCalisma+0x1b74>)
 800703e:	f004 fa6a 	bl	800b516 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007042:	2200      	movs	r2, #0
 8007044:	2120      	movs	r1, #32
 8007046:	4851      	ldr	r0, [pc, #324]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007048:	f004 fa65 	bl	800b516 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800704c:	2102      	movs	r1, #2
 800704e:	4848      	ldr	r0, [pc, #288]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8007050:	f004 fa4a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007054:	4603      	mov	r3, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	d108      	bne.n	800706c <checkDemoModCalisma+0x1a54>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800705a:	2201      	movs	r2, #1
 800705c:	2140      	movs	r1, #64	@ 0x40
 800705e:	484b      	ldr	r0, [pc, #300]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007060:	f004 fa59 	bl	800b516 <HAL_GPIO_WritePin>
					timer3 = millis;
 8007064:	4b4a      	ldr	r3, [pc, #296]	@ (8007190 <checkDemoModCalisma+0x1b78>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a4a      	ldr	r2, [pc, #296]	@ (8007194 <checkDemoModCalisma+0x1b7c>)
 800706a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800706c:	4b48      	ldr	r3, [pc, #288]	@ (8007190 <checkDemoModCalisma+0x1b78>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4b48      	ldr	r3, [pc, #288]	@ (8007194 <checkDemoModCalisma+0x1b7c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b04      	cmp	r3, #4
 8007078:	d904      	bls.n	8007084 <checkDemoModCalisma+0x1a6c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800707a:	2200      	movs	r2, #0
 800707c:	2140      	movs	r1, #64	@ 0x40
 800707e:	4843      	ldr	r0, [pc, #268]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007080:	f004 fa49 	bl	800b516 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007084:	4b3c      	ldr	r3, [pc, #240]	@ (8007178 <checkDemoModCalisma+0x1b60>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <checkDemoModCalisma+0x1a9c>
 800708c:	4b3e      	ldr	r3, [pc, #248]	@ (8007188 <checkDemoModCalisma+0x1b70>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00f      	beq.n	80070b4 <checkDemoModCalisma+0x1a9c>

					calismaSayisiDemo++;
 8007094:	4b40      	ldr	r3, [pc, #256]	@ (8007198 <checkDemoModCalisma+0x1b80>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	4b3e      	ldr	r3, [pc, #248]	@ (8007198 <checkDemoModCalisma+0x1b80>)
 800709e:	701a      	strb	r2, [r3, #0]
					eepromData[28]=calismaSayisiDemo;
 80070a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007198 <checkDemoModCalisma+0x1b80>)
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	4b3d      	ldr	r3, [pc, #244]	@ (800719c <checkDemoModCalisma+0x1b84>)
 80070a6:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 80070a8:	4b3d      	ldr	r3, [pc, #244]	@ (80071a0 <checkDemoModCalisma+0x1b88>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 80070ae:	4b36      	ldr	r3, [pc, #216]	@ (8007188 <checkDemoModCalisma+0x1b70>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 80070b4:	4b3b      	ldr	r3, [pc, #236]	@ (80071a4 <checkDemoModCalisma+0x1b8c>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d156      	bne.n	800716a <checkDemoModCalisma+0x1b52>
					lcd_print(2,1,"Cycle     ");
 80070bc:	4a3a      	ldr	r2, [pc, #232]	@ (80071a8 <checkDemoModCalisma+0x1b90>)
 80070be:	2101      	movs	r1, #1
 80070c0:	2002      	movs	r0, #2
 80070c2:	f002 fee7 	bl	8009e94 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 80070c6:	4a39      	ldr	r2, [pc, #228]	@ (80071ac <checkDemoModCalisma+0x1b94>)
 80070c8:	2101      	movs	r1, #1
 80070ca:	2001      	movs	r0, #1
 80070cc:	f002 fee2 	bl	8009e94 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 80070d0:	4b31      	ldr	r3, [pc, #196]	@ (8007198 <checkDemoModCalisma+0x1b80>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	220a      	movs	r2, #10
 80070d6:	4936      	ldr	r1, [pc, #216]	@ (80071b0 <checkDemoModCalisma+0x1b98>)
 80070d8:	4618      	mov	r0, r3
 80070da:	f007 fa31 	bl	800e540 <itoa>
					lcd_print(2,11,snum);
 80070de:	4a34      	ldr	r2, [pc, #208]	@ (80071b0 <checkDemoModCalisma+0x1b98>)
 80070e0:	210b      	movs	r1, #11
 80070e2:	2002      	movs	r0, #2
 80070e4:	f002 fed6 	bl	8009e94 <lcd_print>
					mesajYazildi=1;
 80070e8:	4b32      	ldr	r3, [pc, #200]	@ (80071b4 <checkDemoModCalisma+0x1b9c>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 80070ee:	e03c      	b.n	800716a <checkDemoModCalisma+0x1b52>
				}
			} else if(demoMode==1 || menuGiris==1) {
 80070f0:	4b31      	ldr	r3, [pc, #196]	@ (80071b8 <checkDemoModCalisma+0x1ba0>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d003      	beq.n	8007100 <checkDemoModCalisma+0x1ae8>
 80070f8:	4b2a      	ldr	r3, [pc, #168]	@ (80071a4 <checkDemoModCalisma+0x1b8c>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d134      	bne.n	800716a <checkDemoModCalisma+0x1b52>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007100:	2200      	movs	r2, #0
 8007102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007106:	481f      	ldr	r0, [pc, #124]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8007108:	f004 fa05 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800710c:	2200      	movs	r2, #0
 800710e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007112:	481c      	ldr	r0, [pc, #112]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8007114:	f004 f9ff 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007118:	2200      	movs	r2, #0
 800711a:	2104      	movs	r1, #4
 800711c:	4819      	ldr	r0, [pc, #100]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 800711e:	f004 f9fa 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007122:	2200      	movs	r2, #0
 8007124:	2102      	movs	r1, #2
 8007126:	4817      	ldr	r0, [pc, #92]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8007128:	f004 f9f5 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800712c:	2200      	movs	r2, #0
 800712e:	2101      	movs	r1, #1
 8007130:	4814      	ldr	r0, [pc, #80]	@ (8007184 <checkDemoModCalisma+0x1b6c>)
 8007132:	f004 f9f0 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007136:	2200      	movs	r2, #0
 8007138:	2120      	movs	r1, #32
 800713a:	480d      	ldr	r0, [pc, #52]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 800713c:	f004 f9eb 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007140:	2200      	movs	r2, #0
 8007142:	2110      	movs	r1, #16
 8007144:	480a      	ldr	r0, [pc, #40]	@ (8007170 <checkDemoModCalisma+0x1b58>)
 8007146:	f004 f9e6 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	@ 0x80
 800714e:	480f      	ldr	r0, [pc, #60]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007150:	f004 f9e1 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007154:	2200      	movs	r2, #0
 8007156:	2140      	movs	r1, #64	@ 0x40
 8007158:	480c      	ldr	r0, [pc, #48]	@ (800718c <checkDemoModCalisma+0x1b74>)
 800715a:	f004 f9dc 	bl	800b516 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800715e:	2200      	movs	r2, #0
 8007160:	2120      	movs	r1, #32
 8007162:	480a      	ldr	r0, [pc, #40]	@ (800718c <checkDemoModCalisma+0x1b74>)
 8007164:	f004 f9d7 	bl	800b516 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007168:	e7ff      	b.n	800716a <checkDemoModCalisma+0x1b52>
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40011000 	.word	0x40011000
 8007174:	20001112 	.word	0x20001112
 8007178:	20001110 	.word	0x20001110
 800717c:	20001111 	.word	0x20001111
 8007180:	20001113 	.word	0x20001113
 8007184:	40010c00 	.word	0x40010c00
 8007188:	200010f6 	.word	0x200010f6
 800718c:	40010800 	.word	0x40010800
 8007190:	20001094 	.word	0x20001094
 8007194:	200010a4 	.word	0x200010a4
 8007198:	200010b5 	.word	0x200010b5
 800719c:	20000fec 	.word	0x20000fec
 80071a0:	200010e4 	.word	0x200010e4
 80071a4:	200010d5 	.word	0x200010d5
 80071a8:	0800f354 	.word	0x0800f354
 80071ac:	0800f360 	.word	0x0800f360
 80071b0:	2000105c 	.word	0x2000105c
 80071b4:	200010ec 	.word	0x200010ec
 80071b8:	200010d6 	.word	0x200010d6

080071bc <mainLoop>:

void mainLoop() {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80071c2:	f7fc fcbf 	bl	8003b44 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80071c6:	2101      	movs	r1, #1
 80071c8:	489e      	ldr	r0, [pc, #632]	@ (8007444 <mainLoop+0x288>)
 80071ca:	f004 f98d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d136      	bne.n	8007242 <mainLoop+0x86>
 80071d4:	2108      	movs	r1, #8
 80071d6:	489c      	ldr	r0, [pc, #624]	@ (8007448 <mainLoop+0x28c>)
 80071d8:	f004 f986 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d12f      	bne.n	8007242 <mainLoop+0x86>
 80071e2:	2102      	movs	r1, #2
 80071e4:	4897      	ldr	r0, [pc, #604]	@ (8007444 <mainLoop+0x288>)
 80071e6:	f004 f97f 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d128      	bne.n	8007242 <mainLoop+0x86>
 80071f0:	2104      	movs	r1, #4
 80071f2:	4894      	ldr	r0, [pc, #592]	@ (8007444 <mainLoop+0x288>)
 80071f4:	f004 f978 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d121      	bne.n	8007242 <mainLoop+0x86>
 80071fe:	2108      	movs	r1, #8
 8007200:	4890      	ldr	r0, [pc, #576]	@ (8007444 <mainLoop+0x288>)
 8007202:	f004 f971 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11a      	bne.n	8007242 <mainLoop+0x86>
 800720c:	2180      	movs	r1, #128	@ 0x80
 800720e:	488e      	ldr	r0, [pc, #568]	@ (8007448 <mainLoop+0x28c>)
 8007210:	f004 f96a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007214:	4603      	mov	r3, r0
 8007216:	2b01      	cmp	r3, #1
 8007218:	d113      	bne.n	8007242 <mainLoop+0x86>
 800721a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800721e:	488a      	ldr	r0, [pc, #552]	@ (8007448 <mainLoop+0x28c>)
 8007220:	f004 f962 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007224:	4603      	mov	r3, r0
 8007226:	2b01      	cmp	r3, #1
 8007228:	d10b      	bne.n	8007242 <mainLoop+0x86>
 800722a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800722e:	4886      	ldr	r0, [pc, #536]	@ (8007448 <mainLoop+0x28c>)
 8007230:	f004 f95a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d103      	bne.n	8007242 <mainLoop+0x86>
			butonKontrol=0;
 800723a:	4b84      	ldr	r3, [pc, #528]	@ (800744c <mainLoop+0x290>)
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e003      	b.n	800724a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007242:	4b83      	ldr	r3, [pc, #524]	@ (8007450 <mainLoop+0x294>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a83      	ldr	r2, [pc, #524]	@ (8007454 <mainLoop+0x298>)
 8007248:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 800724a:	f7fc fd2d 	bl	8003ca8 <buttonCheck>
 800724e:	4603      	mov	r3, r0
 8007250:	2b01      	cmp	r3, #1
 8007252:	d103      	bne.n	800725c <mainLoop+0xa0>
			backLightTimer = millis;
 8007254:	4b7e      	ldr	r3, [pc, #504]	@ (8007450 <mainLoop+0x294>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7e      	ldr	r2, [pc, #504]	@ (8007454 <mainLoop+0x298>)
 800725a:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800725c:	4b7e      	ldr	r3, [pc, #504]	@ (8007458 <mainLoop+0x29c>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d02c      	beq.n	80072be <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007264:	bf00      	nop
 8007266:	487d      	ldr	r0, [pc, #500]	@ (800745c <mainLoop+0x2a0>)
 8007268:	f004 ff67 	bl	800c13a <HAL_I2C_GetError>
 800726c:	4603      	mov	r3, r0
 800726e:	2b04      	cmp	r3, #4
 8007270:	d0f9      	beq.n	8007266 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007272:	bf00      	nop
 8007274:	4879      	ldr	r0, [pc, #484]	@ (800745c <mainLoop+0x2a0>)
 8007276:	f004 ff53 	bl	800c120 <HAL_I2C_GetState>
 800727a:	4603      	mov	r3, r0
 800727c:	2b20      	cmp	r3, #32
 800727e:	d1f9      	bne.n	8007274 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007280:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	236e      	movs	r3, #110	@ 0x6e
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	4b75      	ldr	r3, [pc, #468]	@ (8007460 <mainLoop+0x2a4>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	236e      	movs	r3, #110	@ 0x6e
 8007290:	2200      	movs	r2, #0
 8007292:	21a0      	movs	r1, #160	@ 0xa0
 8007294:	4871      	ldr	r0, [pc, #452]	@ (800745c <mainLoop+0x2a0>)
 8007296:	f004 fbe1 	bl	800ba5c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 800729a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800729e:	f003 fb53 	bl	800a948 <HAL_Delay>

		  hafizaYaz=0;
 80072a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007458 <mainLoop+0x29c>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 80072a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007464 <mainLoop+0x2a8>)
 80072aa:	2101      	movs	r1, #1
 80072ac:	2002      	movs	r0, #2
 80072ae:	f002 fdf1 	bl	8009e94 <lcd_print>

		  HAL_Delay(1000);
 80072b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80072b6:	f003 fb47 	bl	800a948 <HAL_Delay>
		  lcd_clear();
 80072ba:	f002 fe17 	bl	8009eec <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80072be:	4b6a      	ldr	r3, [pc, #424]	@ (8007468 <mainLoop+0x2ac>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	f083 0301 	eor.w	r3, r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d043      	beq.n	8007354 <mainLoop+0x198>
 80072cc:	4863      	ldr	r0, [pc, #396]	@ (800745c <mainLoop+0x2a0>)
 80072ce:	f004 ff27 	bl	800c120 <HAL_I2C_GetState>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d13d      	bne.n	8007354 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 80072d8:	4b64      	ldr	r3, [pc, #400]	@ (800746c <mainLoop+0x2b0>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f083 0301 	eor.w	r3, r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d028      	beq.n	8007338 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 80072e6:	4a62      	ldr	r2, [pc, #392]	@ (8007470 <mainLoop+0x2b4>)
 80072e8:	2101      	movs	r1, #1
 80072ea:	2001      	movs	r0, #1
 80072ec:	f002 fdd2 	bl	8009e94 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80072f0:	4a60      	ldr	r2, [pc, #384]	@ (8007474 <mainLoop+0x2b8>)
 80072f2:	2101      	movs	r1, #1
 80072f4:	2002      	movs	r0, #2
 80072f6:	f002 fdcd 	bl	8009e94 <lcd_print>
			  HAL_Delay(1000);
 80072fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80072fe:	f003 fb23 	bl	800a948 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007302:	bf00      	nop
 8007304:	4855      	ldr	r0, [pc, #340]	@ (800745c <mainLoop+0x2a0>)
 8007306:	f004 ff18 	bl	800c13a <HAL_I2C_GetError>
 800730a:	4603      	mov	r3, r0
 800730c:	2b04      	cmp	r3, #4
 800730e:	d0f9      	beq.n	8007304 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007310:	e003      	b.n	800731a <mainLoop+0x15e>
				  HAL_Delay(1000);
 8007312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007316:	f003 fb17 	bl	800a948 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800731a:	4850      	ldr	r0, [pc, #320]	@ (800745c <mainLoop+0x2a0>)
 800731c:	f004 ff00 	bl	800c120 <HAL_I2C_GetState>
 8007320:	4603      	mov	r3, r0
 8007322:	2b20      	cmp	r3, #32
 8007324:	d1f5      	bne.n	8007312 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8007326:	4a54      	ldr	r2, [pc, #336]	@ (8007478 <mainLoop+0x2bc>)
 8007328:	2101      	movs	r1, #1
 800732a:	2002      	movs	r0, #2
 800732c:	f002 fdb2 	bl	8009e94 <lcd_print>

			  ilkOkuma=1;
 8007330:	4b4e      	ldr	r3, [pc, #312]	@ (800746c <mainLoop+0x2b0>)
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e006      	b.n	8007346 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007338:	4a50      	ldr	r2, [pc, #320]	@ (800747c <mainLoop+0x2c0>)
 800733a:	2101      	movs	r1, #1
 800733c:	2002      	movs	r0, #2
 800733e:	f002 fda9 	bl	8009e94 <lcd_print>
			  lcd_clear();
 8007342:	f002 fdd3 	bl	8009eec <lcd_clear>
		  }

		  lcd_clear();
 8007346:	f002 fdd1 	bl	8009eec <lcd_clear>

		  eepromKontrol();
 800734a:	f7f8 ff73 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800734e:	4b46      	ldr	r3, [pc, #280]	@ (8007468 <mainLoop+0x2ac>)
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007354:	4b4a      	ldr	r3, [pc, #296]	@ (8007480 <mainLoop+0x2c4>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d11c      	bne.n	8007396 <mainLoop+0x1da>
 800735c:	4b49      	ldr	r3, [pc, #292]	@ (8007484 <mainLoop+0x2c8>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	f083 0301 	eor.w	r3, r3, #1
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d015      	beq.n	8007396 <mainLoop+0x1da>
 800736a:	4b47      	ldr	r3, [pc, #284]	@ (8007488 <mainLoop+0x2cc>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d111      	bne.n	8007396 <mainLoop+0x1da>
			lcd_clear();
 8007372:	f002 fdbb 	bl	8009eec <lcd_clear>
			HAL_Delay(10);
 8007376:	200a      	movs	r0, #10
 8007378:	f003 fae6 	bl	800a948 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 800737c:	4a43      	ldr	r2, [pc, #268]	@ (800748c <mainLoop+0x2d0>)
 800737e:	2101      	movs	r1, #1
 8007380:	2001      	movs	r0, #1
 8007382:	f002 fd87 	bl	8009e94 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8007386:	4a42      	ldr	r2, [pc, #264]	@ (8007490 <mainLoop+0x2d4>)
 8007388:	2101      	movs	r1, #1
 800738a:	2002      	movs	r0, #2
 800738c:	f002 fd82 	bl	8009e94 <lcd_print>
			mesajYazildi=1;
 8007390:	4b3c      	ldr	r3, [pc, #240]	@ (8007484 <mainLoop+0x2c8>)
 8007392:	2201      	movs	r2, #1
 8007394:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007396:	4b3a      	ldr	r3, [pc, #232]	@ (8007480 <mainLoop+0x2c4>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d112      	bne.n	80073c4 <mainLoop+0x208>
 800739e:	2102      	movs	r1, #2
 80073a0:	4828      	ldr	r0, [pc, #160]	@ (8007444 <mainLoop+0x288>)
 80073a2:	f004 f8a1 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10b      	bne.n	80073c4 <mainLoop+0x208>
 80073ac:	2104      	movs	r1, #4
 80073ae:	4825      	ldr	r0, [pc, #148]	@ (8007444 <mainLoop+0x288>)
 80073b0:	f004 f89a 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d104      	bne.n	80073c4 <mainLoop+0x208>
			menuGiris=1;
 80073ba:	4b31      	ldr	r3, [pc, #196]	@ (8007480 <mainLoop+0x2c4>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80073c0:	f002 fd94 	bl	8009eec <lcd_clear>
		}

		if(menuGiris==1) {
 80073c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007480 <mainLoop+0x2c4>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <mainLoop+0x214>
			menu();
 80073cc:	f7f9 fec6 	bl	800115c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80073d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073d4:	481c      	ldr	r0, [pc, #112]	@ (8007448 <mainLoop+0x28c>)
 80073d6:	f004 f8b6 	bl	800b546 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80073da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073de:	482d      	ldr	r0, [pc, #180]	@ (8007494 <mainLoop+0x2d8>)
 80073e0:	f004 f882 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <mainLoop+0x244>
 80073ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007498 <mainLoop+0x2dc>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f083 0301 	eor.w	r3, r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <mainLoop+0x244>
			stopVar=1;
 80073f8:	4b28      	ldr	r3, [pc, #160]	@ (800749c <mainLoop+0x2e0>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <mainLoop+0x24a>
		} else {
			stopVar=0;
 8007400:	4b26      	ldr	r3, [pc, #152]	@ (800749c <mainLoop+0x2e0>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8007406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800740a:	4822      	ldr	r0, [pc, #136]	@ (8007494 <mainLoop+0x2d8>)
 800740c:	f004 f86c 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <mainLoop+0x26a>
 8007416:	4b22      	ldr	r3, [pc, #136]	@ (80074a0 <mainLoop+0x2e4>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <mainLoop+0x26a>
			EmnStopVar=1;
 800741e:	4b21      	ldr	r3, [pc, #132]	@ (80074a4 <mainLoop+0x2e8>)
 8007420:	2201      	movs	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e002      	b.n	800742c <mainLoop+0x270>
		} else {
			EmnStopVar=0;
 8007426:	4b1f      	ldr	r3, [pc, #124]	@ (80074a4 <mainLoop+0x2e8>)
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 800742c:	f7fc fc70 	bl	8003d10 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007430:	f7fc fca2 	bl	8003d78 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007434:	f7fc fce6 	bl	8003e04 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007438:	f7fc fd36 	bl	8003ea8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 800743c:	f7fe f8ec 	bl	8005618 <checkDemoModCalisma>
		checkLCDBacklight();
 8007440:	e6bf      	b.n	80071c2 <mainLoop+0x6>
 8007442:	bf00      	nop
 8007444:	40010800 	.word	0x40010800
 8007448:	40011000 	.word	0x40011000
 800744c:	200010e7 	.word	0x200010e7
 8007450:	20001094 	.word	0x20001094
 8007454:	200010b0 	.word	0x200010b0
 8007458:	200010e4 	.word	0x200010e4
 800745c:	20001938 	.word	0x20001938
 8007460:	20000fec 	.word	0x20000fec
 8007464:	2000185c 	.word	0x2000185c
 8007468:	200010e5 	.word	0x200010e5
 800746c:	200010e6 	.word	0x200010e6
 8007470:	20000178 	.word	0x20000178
 8007474:	20001870 	.word	0x20001870
 8007478:	20001884 	.word	0x20001884
 800747c:	20001898 	.word	0x20001898
 8007480:	200010d5 	.word	0x200010d5
 8007484:	200010ec 	.word	0x200010ec
 8007488:	200010d6 	.word	0x200010d6
 800748c:	200000c4 	.word	0x200000c4
 8007490:	200000d8 	.word	0x200000d8
 8007494:	40010c00 	.word	0x40010c00
 8007498:	2000110d 	.word	0x2000110d
 800749c:	2000110a 	.word	0x2000110a
 80074a0:	2000111c 	.word	0x2000111c
 80074a4:	2000111d 	.word	0x2000111d

080074a8 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 853d 	bne.w	8007f34 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 80074ba:	4ac7      	ldr	r2, [pc, #796]	@ (80077d8 <loadMenuTexts+0x330>)
 80074bc:	4bc7      	ldr	r3, [pc, #796]	@ (80077dc <loadMenuTexts+0x334>)
 80074be:	4614      	mov	r4, r2
 80074c0:	461d      	mov	r5, r3
 80074c2:	6828      	ldr	r0, [r5, #0]
 80074c4:	6869      	ldr	r1, [r5, #4]
 80074c6:	68aa      	ldr	r2, [r5, #8]
 80074c8:	68eb      	ldr	r3, [r5, #12]
 80074ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074cc:	7c2b      	ldrb	r3, [r5, #16]
 80074ce:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 80074d0:	4ac3      	ldr	r2, [pc, #780]	@ (80077e0 <loadMenuTexts+0x338>)
 80074d2:	4bc4      	ldr	r3, [pc, #784]	@ (80077e4 <loadMenuTexts+0x33c>)
 80074d4:	4614      	mov	r4, r2
 80074d6:	461d      	mov	r5, r3
 80074d8:	6828      	ldr	r0, [r5, #0]
 80074da:	6869      	ldr	r1, [r5, #4]
 80074dc:	68aa      	ldr	r2, [r5, #8]
 80074de:	68eb      	ldr	r3, [r5, #12]
 80074e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074e2:	7c2b      	ldrb	r3, [r5, #16]
 80074e4:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 80074e6:	4ac0      	ldr	r2, [pc, #768]	@ (80077e8 <loadMenuTexts+0x340>)
 80074e8:	4bc0      	ldr	r3, [pc, #768]	@ (80077ec <loadMenuTexts+0x344>)
 80074ea:	4614      	mov	r4, r2
 80074ec:	461d      	mov	r5, r3
 80074ee:	6828      	ldr	r0, [r5, #0]
 80074f0:	6869      	ldr	r1, [r5, #4]
 80074f2:	68aa      	ldr	r2, [r5, #8]
 80074f4:	68eb      	ldr	r3, [r5, #12]
 80074f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f8:	7c2b      	ldrb	r3, [r5, #16]
 80074fa:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80074fc:	4abc      	ldr	r2, [pc, #752]	@ (80077f0 <loadMenuTexts+0x348>)
 80074fe:	4bbd      	ldr	r3, [pc, #756]	@ (80077f4 <loadMenuTexts+0x34c>)
 8007500:	4614      	mov	r4, r2
 8007502:	461d      	mov	r5, r3
 8007504:	6828      	ldr	r0, [r5, #0]
 8007506:	6869      	ldr	r1, [r5, #4]
 8007508:	68aa      	ldr	r2, [r5, #8]
 800750a:	68eb      	ldr	r3, [r5, #12]
 800750c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750e:	7c2b      	ldrb	r3, [r5, #16]
 8007510:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8007512:	4ab9      	ldr	r2, [pc, #740]	@ (80077f8 <loadMenuTexts+0x350>)
 8007514:	4bb9      	ldr	r3, [pc, #740]	@ (80077fc <loadMenuTexts+0x354>)
 8007516:	4614      	mov	r4, r2
 8007518:	461d      	mov	r5, r3
 800751a:	6828      	ldr	r0, [r5, #0]
 800751c:	6869      	ldr	r1, [r5, #4]
 800751e:	68aa      	ldr	r2, [r5, #8]
 8007520:	68eb      	ldr	r3, [r5, #12]
 8007522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007524:	7c2b      	ldrb	r3, [r5, #16]
 8007526:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8007528:	4ab5      	ldr	r2, [pc, #724]	@ (8007800 <loadMenuTexts+0x358>)
 800752a:	4bb6      	ldr	r3, [pc, #728]	@ (8007804 <loadMenuTexts+0x35c>)
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	6828      	ldr	r0, [r5, #0]
 8007532:	6869      	ldr	r1, [r5, #4]
 8007534:	68aa      	ldr	r2, [r5, #8]
 8007536:	68eb      	ldr	r3, [r5, #12]
 8007538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753a:	7c2b      	ldrb	r3, [r5, #16]
 800753c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800753e:	4ab2      	ldr	r2, [pc, #712]	@ (8007808 <loadMenuTexts+0x360>)
 8007540:	4bb2      	ldr	r3, [pc, #712]	@ (800780c <loadMenuTexts+0x364>)
 8007542:	4614      	mov	r4, r2
 8007544:	461d      	mov	r5, r3
 8007546:	6828      	ldr	r0, [r5, #0]
 8007548:	6869      	ldr	r1, [r5, #4]
 800754a:	68aa      	ldr	r2, [r5, #8]
 800754c:	68eb      	ldr	r3, [r5, #12]
 800754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007550:	7c2b      	ldrb	r3, [r5, #16]
 8007552:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007554:	4aae      	ldr	r2, [pc, #696]	@ (8007810 <loadMenuTexts+0x368>)
 8007556:	4baf      	ldr	r3, [pc, #700]	@ (8007814 <loadMenuTexts+0x36c>)
 8007558:	4614      	mov	r4, r2
 800755a:	461d      	mov	r5, r3
 800755c:	6828      	ldr	r0, [r5, #0]
 800755e:	6869      	ldr	r1, [r5, #4]
 8007560:	68aa      	ldr	r2, [r5, #8]
 8007562:	68eb      	ldr	r3, [r5, #12]
 8007564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007566:	7c2b      	ldrb	r3, [r5, #16]
 8007568:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 800756a:	4aab      	ldr	r2, [pc, #684]	@ (8007818 <loadMenuTexts+0x370>)
 800756c:	4bab      	ldr	r3, [pc, #684]	@ (800781c <loadMenuTexts+0x374>)
 800756e:	4614      	mov	r4, r2
 8007570:	461d      	mov	r5, r3
 8007572:	6828      	ldr	r0, [r5, #0]
 8007574:	6869      	ldr	r1, [r5, #4]
 8007576:	68aa      	ldr	r2, [r5, #8]
 8007578:	68eb      	ldr	r3, [r5, #12]
 800757a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757c:	7c2b      	ldrb	r3, [r5, #16]
 800757e:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007580:	4aa7      	ldr	r2, [pc, #668]	@ (8007820 <loadMenuTexts+0x378>)
 8007582:	4ba8      	ldr	r3, [pc, #672]	@ (8007824 <loadMenuTexts+0x37c>)
 8007584:	4614      	mov	r4, r2
 8007586:	461d      	mov	r5, r3
 8007588:	6828      	ldr	r0, [r5, #0]
 800758a:	6869      	ldr	r1, [r5, #4]
 800758c:	68aa      	ldr	r2, [r5, #8]
 800758e:	68eb      	ldr	r3, [r5, #12]
 8007590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007592:	7c2b      	ldrb	r3, [r5, #16]
 8007594:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007596:	4aa4      	ldr	r2, [pc, #656]	@ (8007828 <loadMenuTexts+0x380>)
 8007598:	4ba4      	ldr	r3, [pc, #656]	@ (800782c <loadMenuTexts+0x384>)
 800759a:	4614      	mov	r4, r2
 800759c:	461d      	mov	r5, r3
 800759e:	6828      	ldr	r0, [r5, #0]
 80075a0:	6869      	ldr	r1, [r5, #4]
 80075a2:	68aa      	ldr	r2, [r5, #8]
 80075a4:	68eb      	ldr	r3, [r5, #12]
 80075a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a8:	7c2b      	ldrb	r3, [r5, #16]
 80075aa:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 80075ac:	4aa0      	ldr	r2, [pc, #640]	@ (8007830 <loadMenuTexts+0x388>)
 80075ae:	4ba1      	ldr	r3, [pc, #644]	@ (8007834 <loadMenuTexts+0x38c>)
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	6828      	ldr	r0, [r5, #0]
 80075b6:	6869      	ldr	r1, [r5, #4]
 80075b8:	68aa      	ldr	r2, [r5, #8]
 80075ba:	68eb      	ldr	r3, [r5, #12]
 80075bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075be:	7c2b      	ldrb	r3, [r5, #16]
 80075c0:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 80075c2:	4a9d      	ldr	r2, [pc, #628]	@ (8007838 <loadMenuTexts+0x390>)
 80075c4:	4b9d      	ldr	r3, [pc, #628]	@ (800783c <loadMenuTexts+0x394>)
 80075c6:	4614      	mov	r4, r2
 80075c8:	461d      	mov	r5, r3
 80075ca:	6828      	ldr	r0, [r5, #0]
 80075cc:	6869      	ldr	r1, [r5, #4]
 80075ce:	68aa      	ldr	r2, [r5, #8]
 80075d0:	68eb      	ldr	r3, [r5, #12]
 80075d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d4:	7c2b      	ldrb	r3, [r5, #16]
 80075d6:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80075d8:	4a99      	ldr	r2, [pc, #612]	@ (8007840 <loadMenuTexts+0x398>)
 80075da:	4b9a      	ldr	r3, [pc, #616]	@ (8007844 <loadMenuTexts+0x39c>)
 80075dc:	4614      	mov	r4, r2
 80075de:	461d      	mov	r5, r3
 80075e0:	6828      	ldr	r0, [r5, #0]
 80075e2:	6869      	ldr	r1, [r5, #4]
 80075e4:	68aa      	ldr	r2, [r5, #8]
 80075e6:	68eb      	ldr	r3, [r5, #12]
 80075e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ea:	7c2b      	ldrb	r3, [r5, #16]
 80075ec:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80075ee:	4a96      	ldr	r2, [pc, #600]	@ (8007848 <loadMenuTexts+0x3a0>)
 80075f0:	4b96      	ldr	r3, [pc, #600]	@ (800784c <loadMenuTexts+0x3a4>)
 80075f2:	4614      	mov	r4, r2
 80075f4:	461d      	mov	r5, r3
 80075f6:	6828      	ldr	r0, [r5, #0]
 80075f8:	6869      	ldr	r1, [r5, #4]
 80075fa:	68aa      	ldr	r2, [r5, #8]
 80075fc:	68eb      	ldr	r3, [r5, #12]
 80075fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007600:	7c2b      	ldrb	r3, [r5, #16]
 8007602:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8007604:	4a92      	ldr	r2, [pc, #584]	@ (8007850 <loadMenuTexts+0x3a8>)
 8007606:	4b93      	ldr	r3, [pc, #588]	@ (8007854 <loadMenuTexts+0x3ac>)
 8007608:	4614      	mov	r4, r2
 800760a:	461d      	mov	r5, r3
 800760c:	6828      	ldr	r0, [r5, #0]
 800760e:	6869      	ldr	r1, [r5, #4]
 8007610:	68aa      	ldr	r2, [r5, #8]
 8007612:	68eb      	ldr	r3, [r5, #12]
 8007614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007616:	7c2b      	ldrb	r3, [r5, #16]
 8007618:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800761a:	4a8f      	ldr	r2, [pc, #572]	@ (8007858 <loadMenuTexts+0x3b0>)
 800761c:	4b8f      	ldr	r3, [pc, #572]	@ (800785c <loadMenuTexts+0x3b4>)
 800761e:	4614      	mov	r4, r2
 8007620:	461d      	mov	r5, r3
 8007622:	6828      	ldr	r0, [r5, #0]
 8007624:	6869      	ldr	r1, [r5, #4]
 8007626:	68aa      	ldr	r2, [r5, #8]
 8007628:	68eb      	ldr	r3, [r5, #12]
 800762a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762c:	7c2b      	ldrb	r3, [r5, #16]
 800762e:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8007630:	4a8b      	ldr	r2, [pc, #556]	@ (8007860 <loadMenuTexts+0x3b8>)
 8007632:	4b8c      	ldr	r3, [pc, #560]	@ (8007864 <loadMenuTexts+0x3bc>)
 8007634:	4614      	mov	r4, r2
 8007636:	461d      	mov	r5, r3
 8007638:	6828      	ldr	r0, [r5, #0]
 800763a:	6869      	ldr	r1, [r5, #4]
 800763c:	68aa      	ldr	r2, [r5, #8]
 800763e:	68eb      	ldr	r3, [r5, #12]
 8007640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007642:	7c2b      	ldrb	r3, [r5, #16]
 8007644:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8007646:	4a88      	ldr	r2, [pc, #544]	@ (8007868 <loadMenuTexts+0x3c0>)
 8007648:	4b88      	ldr	r3, [pc, #544]	@ (800786c <loadMenuTexts+0x3c4>)
 800764a:	4614      	mov	r4, r2
 800764c:	461d      	mov	r5, r3
 800764e:	6828      	ldr	r0, [r5, #0]
 8007650:	6869      	ldr	r1, [r5, #4]
 8007652:	68aa      	ldr	r2, [r5, #8]
 8007654:	68eb      	ldr	r3, [r5, #12]
 8007656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007658:	7c2b      	ldrb	r3, [r5, #16]
 800765a:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 800765c:	4a84      	ldr	r2, [pc, #528]	@ (8007870 <loadMenuTexts+0x3c8>)
 800765e:	4b85      	ldr	r3, [pc, #532]	@ (8007874 <loadMenuTexts+0x3cc>)
 8007660:	4614      	mov	r4, r2
 8007662:	461d      	mov	r5, r3
 8007664:	6828      	ldr	r0, [r5, #0]
 8007666:	6869      	ldr	r1, [r5, #4]
 8007668:	68aa      	ldr	r2, [r5, #8]
 800766a:	68eb      	ldr	r3, [r5, #12]
 800766c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800766e:	7c2b      	ldrb	r3, [r5, #16]
 8007670:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8007672:	4a81      	ldr	r2, [pc, #516]	@ (8007878 <loadMenuTexts+0x3d0>)
 8007674:	4b81      	ldr	r3, [pc, #516]	@ (800787c <loadMenuTexts+0x3d4>)
 8007676:	4614      	mov	r4, r2
 8007678:	461d      	mov	r5, r3
 800767a:	6828      	ldr	r0, [r5, #0]
 800767c:	6869      	ldr	r1, [r5, #4]
 800767e:	68aa      	ldr	r2, [r5, #8]
 8007680:	68eb      	ldr	r3, [r5, #12]
 8007682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007684:	7c2b      	ldrb	r3, [r5, #16]
 8007686:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8007688:	4a7d      	ldr	r2, [pc, #500]	@ (8007880 <loadMenuTexts+0x3d8>)
 800768a:	4b7e      	ldr	r3, [pc, #504]	@ (8007884 <loadMenuTexts+0x3dc>)
 800768c:	4614      	mov	r4, r2
 800768e:	461d      	mov	r5, r3
 8007690:	6828      	ldr	r0, [r5, #0]
 8007692:	6869      	ldr	r1, [r5, #4]
 8007694:	68aa      	ldr	r2, [r5, #8]
 8007696:	68eb      	ldr	r3, [r5, #12]
 8007698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800769a:	7c2b      	ldrb	r3, [r5, #16]
 800769c:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800769e:	4a7a      	ldr	r2, [pc, #488]	@ (8007888 <loadMenuTexts+0x3e0>)
 80076a0:	4b7a      	ldr	r3, [pc, #488]	@ (800788c <loadMenuTexts+0x3e4>)
 80076a2:	4614      	mov	r4, r2
 80076a4:	461d      	mov	r5, r3
 80076a6:	6828      	ldr	r0, [r5, #0]
 80076a8:	6869      	ldr	r1, [r5, #4]
 80076aa:	68aa      	ldr	r2, [r5, #8]
 80076ac:	68eb      	ldr	r3, [r5, #12]
 80076ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b0:	7c2b      	ldrb	r3, [r5, #16]
 80076b2:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80076b4:	4a76      	ldr	r2, [pc, #472]	@ (8007890 <loadMenuTexts+0x3e8>)
 80076b6:	4b77      	ldr	r3, [pc, #476]	@ (8007894 <loadMenuTexts+0x3ec>)
 80076b8:	4614      	mov	r4, r2
 80076ba:	461d      	mov	r5, r3
 80076bc:	6828      	ldr	r0, [r5, #0]
 80076be:	6869      	ldr	r1, [r5, #4]
 80076c0:	68aa      	ldr	r2, [r5, #8]
 80076c2:	68eb      	ldr	r3, [r5, #12]
 80076c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c6:	7c2b      	ldrb	r3, [r5, #16]
 80076c8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80076ca:	4a73      	ldr	r2, [pc, #460]	@ (8007898 <loadMenuTexts+0x3f0>)
 80076cc:	4b73      	ldr	r3, [pc, #460]	@ (800789c <loadMenuTexts+0x3f4>)
 80076ce:	4614      	mov	r4, r2
 80076d0:	461d      	mov	r5, r3
 80076d2:	6828      	ldr	r0, [r5, #0]
 80076d4:	6869      	ldr	r1, [r5, #4]
 80076d6:	68aa      	ldr	r2, [r5, #8]
 80076d8:	68eb      	ldr	r3, [r5, #12]
 80076da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076dc:	7c2b      	ldrb	r3, [r5, #16]
 80076de:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80076e0:	4a6f      	ldr	r2, [pc, #444]	@ (80078a0 <loadMenuTexts+0x3f8>)
 80076e2:	4b70      	ldr	r3, [pc, #448]	@ (80078a4 <loadMenuTexts+0x3fc>)
 80076e4:	4614      	mov	r4, r2
 80076e6:	461d      	mov	r5, r3
 80076e8:	6828      	ldr	r0, [r5, #0]
 80076ea:	6869      	ldr	r1, [r5, #4]
 80076ec:	68aa      	ldr	r2, [r5, #8]
 80076ee:	68eb      	ldr	r3, [r5, #12]
 80076f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f2:	7c2b      	ldrb	r3, [r5, #16]
 80076f4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80076f6:	4a6c      	ldr	r2, [pc, #432]	@ (80078a8 <loadMenuTexts+0x400>)
 80076f8:	4b6c      	ldr	r3, [pc, #432]	@ (80078ac <loadMenuTexts+0x404>)
 80076fa:	4614      	mov	r4, r2
 80076fc:	461d      	mov	r5, r3
 80076fe:	6828      	ldr	r0, [r5, #0]
 8007700:	6869      	ldr	r1, [r5, #4]
 8007702:	68aa      	ldr	r2, [r5, #8]
 8007704:	68eb      	ldr	r3, [r5, #12]
 8007706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007708:	7c2b      	ldrb	r3, [r5, #16]
 800770a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800770c:	4a68      	ldr	r2, [pc, #416]	@ (80078b0 <loadMenuTexts+0x408>)
 800770e:	4b69      	ldr	r3, [pc, #420]	@ (80078b4 <loadMenuTexts+0x40c>)
 8007710:	4614      	mov	r4, r2
 8007712:	461d      	mov	r5, r3
 8007714:	6828      	ldr	r0, [r5, #0]
 8007716:	6869      	ldr	r1, [r5, #4]
 8007718:	68aa      	ldr	r2, [r5, #8]
 800771a:	68eb      	ldr	r3, [r5, #12]
 800771c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771e:	7c2b      	ldrb	r3, [r5, #16]
 8007720:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8007722:	4a65      	ldr	r2, [pc, #404]	@ (80078b8 <loadMenuTexts+0x410>)
 8007724:	4b65      	ldr	r3, [pc, #404]	@ (80078bc <loadMenuTexts+0x414>)
 8007726:	4614      	mov	r4, r2
 8007728:	461d      	mov	r5, r3
 800772a:	6828      	ldr	r0, [r5, #0]
 800772c:	6869      	ldr	r1, [r5, #4]
 800772e:	68aa      	ldr	r2, [r5, #8]
 8007730:	68eb      	ldr	r3, [r5, #12]
 8007732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007734:	7c2b      	ldrb	r3, [r5, #16]
 8007736:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8007738:	4a61      	ldr	r2, [pc, #388]	@ (80078c0 <loadMenuTexts+0x418>)
 800773a:	4b62      	ldr	r3, [pc, #392]	@ (80078c4 <loadMenuTexts+0x41c>)
 800773c:	4614      	mov	r4, r2
 800773e:	461d      	mov	r5, r3
 8007740:	6828      	ldr	r0, [r5, #0]
 8007742:	6869      	ldr	r1, [r5, #4]
 8007744:	68aa      	ldr	r2, [r5, #8]
 8007746:	68eb      	ldr	r3, [r5, #12]
 8007748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800774a:	7c2b      	ldrb	r3, [r5, #16]
 800774c:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800774e:	4a5e      	ldr	r2, [pc, #376]	@ (80078c8 <loadMenuTexts+0x420>)
 8007750:	4b5e      	ldr	r3, [pc, #376]	@ (80078cc <loadMenuTexts+0x424>)
 8007752:	4614      	mov	r4, r2
 8007754:	461d      	mov	r5, r3
 8007756:	6828      	ldr	r0, [r5, #0]
 8007758:	6869      	ldr	r1, [r5, #4]
 800775a:	68aa      	ldr	r2, [r5, #8]
 800775c:	68eb      	ldr	r3, [r5, #12]
 800775e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007760:	7c2b      	ldrb	r3, [r5, #16]
 8007762:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007764:	4a5a      	ldr	r2, [pc, #360]	@ (80078d0 <loadMenuTexts+0x428>)
 8007766:	4b5b      	ldr	r3, [pc, #364]	@ (80078d4 <loadMenuTexts+0x42c>)
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	6828      	ldr	r0, [r5, #0]
 800776e:	6869      	ldr	r1, [r5, #4]
 8007770:	68aa      	ldr	r2, [r5, #8]
 8007772:	68eb      	ldr	r3, [r5, #12]
 8007774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007776:	7c2b      	ldrb	r3, [r5, #16]
 8007778:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800777a:	4a57      	ldr	r2, [pc, #348]	@ (80078d8 <loadMenuTexts+0x430>)
 800777c:	4b57      	ldr	r3, [pc, #348]	@ (80078dc <loadMenuTexts+0x434>)
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	6828      	ldr	r0, [r5, #0]
 8007784:	6869      	ldr	r1, [r5, #4]
 8007786:	68aa      	ldr	r2, [r5, #8]
 8007788:	68eb      	ldr	r3, [r5, #12]
 800778a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778c:	7c2b      	ldrb	r3, [r5, #16]
 800778e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8007790:	4a53      	ldr	r2, [pc, #332]	@ (80078e0 <loadMenuTexts+0x438>)
 8007792:	4b54      	ldr	r3, [pc, #336]	@ (80078e4 <loadMenuTexts+0x43c>)
 8007794:	4614      	mov	r4, r2
 8007796:	461d      	mov	r5, r3
 8007798:	6828      	ldr	r0, [r5, #0]
 800779a:	6869      	ldr	r1, [r5, #4]
 800779c:	68aa      	ldr	r2, [r5, #8]
 800779e:	68eb      	ldr	r3, [r5, #12]
 80077a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a2:	7c2b      	ldrb	r3, [r5, #16]
 80077a4:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80077a6:	4a50      	ldr	r2, [pc, #320]	@ (80078e8 <loadMenuTexts+0x440>)
 80077a8:	4b50      	ldr	r3, [pc, #320]	@ (80078ec <loadMenuTexts+0x444>)
 80077aa:	4614      	mov	r4, r2
 80077ac:	461d      	mov	r5, r3
 80077ae:	6828      	ldr	r0, [r5, #0]
 80077b0:	6869      	ldr	r1, [r5, #4]
 80077b2:	68aa      	ldr	r2, [r5, #8]
 80077b4:	68eb      	ldr	r3, [r5, #12]
 80077b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077b8:	7c2b      	ldrb	r3, [r5, #16]
 80077ba:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80077bc:	4a4c      	ldr	r2, [pc, #304]	@ (80078f0 <loadMenuTexts+0x448>)
 80077be:	4b4d      	ldr	r3, [pc, #308]	@ (80078f4 <loadMenuTexts+0x44c>)
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	6828      	ldr	r0, [r5, #0]
 80077c6:	6869      	ldr	r1, [r5, #4]
 80077c8:	68aa      	ldr	r2, [r5, #8]
 80077ca:	68eb      	ldr	r3, [r5, #12]
 80077cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ce:	7c2b      	ldrb	r3, [r5, #16]
 80077d0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80077d2:	4a49      	ldr	r2, [pc, #292]	@ (80078f8 <loadMenuTexts+0x450>)
 80077d4:	e092      	b.n	80078fc <loadMenuTexts+0x454>
 80077d6:	bf00      	nop
 80077d8:	2000121c 	.word	0x2000121c
 80077dc:	2000018c 	.word	0x2000018c
 80077e0:	20001230 	.word	0x20001230
 80077e4:	200001a0 	.word	0x200001a0
 80077e8:	20001244 	.word	0x20001244
 80077ec:	200001b4 	.word	0x200001b4
 80077f0:	20001258 	.word	0x20001258
 80077f4:	200001c8 	.word	0x200001c8
 80077f8:	2000126c 	.word	0x2000126c
 80077fc:	200001dc 	.word	0x200001dc
 8007800:	20001280 	.word	0x20001280
 8007804:	200001f0 	.word	0x200001f0
 8007808:	20001294 	.word	0x20001294
 800780c:	20000204 	.word	0x20000204
 8007810:	200012a8 	.word	0x200012a8
 8007814:	20000218 	.word	0x20000218
 8007818:	200012bc 	.word	0x200012bc
 800781c:	2000022c 	.word	0x2000022c
 8007820:	200012d0 	.word	0x200012d0
 8007824:	20000240 	.word	0x20000240
 8007828:	200012e4 	.word	0x200012e4
 800782c:	20000254 	.word	0x20000254
 8007830:	200012f8 	.word	0x200012f8
 8007834:	20000268 	.word	0x20000268
 8007838:	2000130c 	.word	0x2000130c
 800783c:	2000027c 	.word	0x2000027c
 8007840:	20001320 	.word	0x20001320
 8007844:	20000290 	.word	0x20000290
 8007848:	20001334 	.word	0x20001334
 800784c:	200002a4 	.word	0x200002a4
 8007850:	20001348 	.word	0x20001348
 8007854:	200002b8 	.word	0x200002b8
 8007858:	2000135c 	.word	0x2000135c
 800785c:	200002cc 	.word	0x200002cc
 8007860:	20001370 	.word	0x20001370
 8007864:	200002e0 	.word	0x200002e0
 8007868:	20001384 	.word	0x20001384
 800786c:	200002f4 	.word	0x200002f4
 8007870:	20001398 	.word	0x20001398
 8007874:	20000308 	.word	0x20000308
 8007878:	200013ac 	.word	0x200013ac
 800787c:	2000031c 	.word	0x2000031c
 8007880:	200013c0 	.word	0x200013c0
 8007884:	20000330 	.word	0x20000330
 8007888:	200013d4 	.word	0x200013d4
 800788c:	20000344 	.word	0x20000344
 8007890:	200013e8 	.word	0x200013e8
 8007894:	20000358 	.word	0x20000358
 8007898:	200013fc 	.word	0x200013fc
 800789c:	2000036c 	.word	0x2000036c
 80078a0:	20001410 	.word	0x20001410
 80078a4:	20000380 	.word	0x20000380
 80078a8:	20001424 	.word	0x20001424
 80078ac:	20000394 	.word	0x20000394
 80078b0:	20001438 	.word	0x20001438
 80078b4:	200003a8 	.word	0x200003a8
 80078b8:	2000144c 	.word	0x2000144c
 80078bc:	200003bc 	.word	0x200003bc
 80078c0:	20001460 	.word	0x20001460
 80078c4:	200003d0 	.word	0x200003d0
 80078c8:	20001474 	.word	0x20001474
 80078cc:	200003e4 	.word	0x200003e4
 80078d0:	20001488 	.word	0x20001488
 80078d4:	200003f8 	.word	0x200003f8
 80078d8:	2000149c 	.word	0x2000149c
 80078dc:	2000040c 	.word	0x2000040c
 80078e0:	200014b0 	.word	0x200014b0
 80078e4:	20000420 	.word	0x20000420
 80078e8:	200014c4 	.word	0x200014c4
 80078ec:	20000434 	.word	0x20000434
 80078f0:	200014d8 	.word	0x200014d8
 80078f4:	20000448 	.word	0x20000448
 80078f8:	200014ec 	.word	0x200014ec
 80078fc:	4bc7      	ldr	r3, [pc, #796]	@ (8007c1c <loadMenuTexts+0x774>)
 80078fe:	4614      	mov	r4, r2
 8007900:	461d      	mov	r5, r3
 8007902:	6828      	ldr	r0, [r5, #0]
 8007904:	6869      	ldr	r1, [r5, #4]
 8007906:	68aa      	ldr	r2, [r5, #8]
 8007908:	68eb      	ldr	r3, [r5, #12]
 800790a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800790c:	7c2b      	ldrb	r3, [r5, #16]
 800790e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8007910:	4ac3      	ldr	r2, [pc, #780]	@ (8007c20 <loadMenuTexts+0x778>)
 8007912:	4bc4      	ldr	r3, [pc, #784]	@ (8007c24 <loadMenuTexts+0x77c>)
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	6828      	ldr	r0, [r5, #0]
 800791a:	6869      	ldr	r1, [r5, #4]
 800791c:	68aa      	ldr	r2, [r5, #8]
 800791e:	68eb      	ldr	r3, [r5, #12]
 8007920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007922:	7c2b      	ldrb	r3, [r5, #16]
 8007924:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8007926:	4ac0      	ldr	r2, [pc, #768]	@ (8007c28 <loadMenuTexts+0x780>)
 8007928:	4bc0      	ldr	r3, [pc, #768]	@ (8007c2c <loadMenuTexts+0x784>)
 800792a:	4614      	mov	r4, r2
 800792c:	461d      	mov	r5, r3
 800792e:	6828      	ldr	r0, [r5, #0]
 8007930:	6869      	ldr	r1, [r5, #4]
 8007932:	68aa      	ldr	r2, [r5, #8]
 8007934:	68eb      	ldr	r3, [r5, #12]
 8007936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007938:	7c2b      	ldrb	r3, [r5, #16]
 800793a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800793c:	4abc      	ldr	r2, [pc, #752]	@ (8007c30 <loadMenuTexts+0x788>)
 800793e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c34 <loadMenuTexts+0x78c>)
 8007940:	4614      	mov	r4, r2
 8007942:	461d      	mov	r5, r3
 8007944:	6828      	ldr	r0, [r5, #0]
 8007946:	6869      	ldr	r1, [r5, #4]
 8007948:	68aa      	ldr	r2, [r5, #8]
 800794a:	68eb      	ldr	r3, [r5, #12]
 800794c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794e:	7c2b      	ldrb	r3, [r5, #16]
 8007950:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8007952:	4ab9      	ldr	r2, [pc, #740]	@ (8007c38 <loadMenuTexts+0x790>)
 8007954:	4bb9      	ldr	r3, [pc, #740]	@ (8007c3c <loadMenuTexts+0x794>)
 8007956:	4614      	mov	r4, r2
 8007958:	461d      	mov	r5, r3
 800795a:	6828      	ldr	r0, [r5, #0]
 800795c:	6869      	ldr	r1, [r5, #4]
 800795e:	68aa      	ldr	r2, [r5, #8]
 8007960:	68eb      	ldr	r3, [r5, #12]
 8007962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007964:	7c2b      	ldrb	r3, [r5, #16]
 8007966:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007968:	4ab5      	ldr	r2, [pc, #724]	@ (8007c40 <loadMenuTexts+0x798>)
 800796a:	4bb6      	ldr	r3, [pc, #728]	@ (8007c44 <loadMenuTexts+0x79c>)
 800796c:	4614      	mov	r4, r2
 800796e:	461d      	mov	r5, r3
 8007970:	6828      	ldr	r0, [r5, #0]
 8007972:	6869      	ldr	r1, [r5, #4]
 8007974:	68aa      	ldr	r2, [r5, #8]
 8007976:	68eb      	ldr	r3, [r5, #12]
 8007978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800797a:	7c2b      	ldrb	r3, [r5, #16]
 800797c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800797e:	4ab2      	ldr	r2, [pc, #712]	@ (8007c48 <loadMenuTexts+0x7a0>)
 8007980:	4bb2      	ldr	r3, [pc, #712]	@ (8007c4c <loadMenuTexts+0x7a4>)
 8007982:	4614      	mov	r4, r2
 8007984:	461d      	mov	r5, r3
 8007986:	6828      	ldr	r0, [r5, #0]
 8007988:	6869      	ldr	r1, [r5, #4]
 800798a:	68aa      	ldr	r2, [r5, #8]
 800798c:	68eb      	ldr	r3, [r5, #12]
 800798e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007990:	7c2b      	ldrb	r3, [r5, #16]
 8007992:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007994:	4aae      	ldr	r2, [pc, #696]	@ (8007c50 <loadMenuTexts+0x7a8>)
 8007996:	4baf      	ldr	r3, [pc, #700]	@ (8007c54 <loadMenuTexts+0x7ac>)
 8007998:	4614      	mov	r4, r2
 800799a:	461d      	mov	r5, r3
 800799c:	6828      	ldr	r0, [r5, #0]
 800799e:	6869      	ldr	r1, [r5, #4]
 80079a0:	68aa      	ldr	r2, [r5, #8]
 80079a2:	68eb      	ldr	r3, [r5, #12]
 80079a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a6:	7c2b      	ldrb	r3, [r5, #16]
 80079a8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80079aa:	4aab      	ldr	r2, [pc, #684]	@ (8007c58 <loadMenuTexts+0x7b0>)
 80079ac:	4bab      	ldr	r3, [pc, #684]	@ (8007c5c <loadMenuTexts+0x7b4>)
 80079ae:	4614      	mov	r4, r2
 80079b0:	461d      	mov	r5, r3
 80079b2:	6828      	ldr	r0, [r5, #0]
 80079b4:	6869      	ldr	r1, [r5, #4]
 80079b6:	68aa      	ldr	r2, [r5, #8]
 80079b8:	68eb      	ldr	r3, [r5, #12]
 80079ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079bc:	7c2b      	ldrb	r3, [r5, #16]
 80079be:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80079c0:	4aa7      	ldr	r2, [pc, #668]	@ (8007c60 <loadMenuTexts+0x7b8>)
 80079c2:	4ba8      	ldr	r3, [pc, #672]	@ (8007c64 <loadMenuTexts+0x7bc>)
 80079c4:	4614      	mov	r4, r2
 80079c6:	461d      	mov	r5, r3
 80079c8:	6828      	ldr	r0, [r5, #0]
 80079ca:	6869      	ldr	r1, [r5, #4]
 80079cc:	68aa      	ldr	r2, [r5, #8]
 80079ce:	68eb      	ldr	r3, [r5, #12]
 80079d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d2:	7c2b      	ldrb	r3, [r5, #16]
 80079d4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80079d6:	4aa4      	ldr	r2, [pc, #656]	@ (8007c68 <loadMenuTexts+0x7c0>)
 80079d8:	4ba4      	ldr	r3, [pc, #656]	@ (8007c6c <loadMenuTexts+0x7c4>)
 80079da:	4614      	mov	r4, r2
 80079dc:	461d      	mov	r5, r3
 80079de:	6828      	ldr	r0, [r5, #0]
 80079e0:	6869      	ldr	r1, [r5, #4]
 80079e2:	68aa      	ldr	r2, [r5, #8]
 80079e4:	68eb      	ldr	r3, [r5, #12]
 80079e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e8:	7c2b      	ldrb	r3, [r5, #16]
 80079ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80079ec:	4aa0      	ldr	r2, [pc, #640]	@ (8007c70 <loadMenuTexts+0x7c8>)
 80079ee:	4ba1      	ldr	r3, [pc, #644]	@ (8007c74 <loadMenuTexts+0x7cc>)
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	6828      	ldr	r0, [r5, #0]
 80079f6:	6869      	ldr	r1, [r5, #4]
 80079f8:	68aa      	ldr	r2, [r5, #8]
 80079fa:	68eb      	ldr	r3, [r5, #12]
 80079fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fe:	7c2b      	ldrb	r3, [r5, #16]
 8007a00:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8007a02:	4a9d      	ldr	r2, [pc, #628]	@ (8007c78 <loadMenuTexts+0x7d0>)
 8007a04:	4b9d      	ldr	r3, [pc, #628]	@ (8007c7c <loadMenuTexts+0x7d4>)
 8007a06:	4614      	mov	r4, r2
 8007a08:	461d      	mov	r5, r3
 8007a0a:	6828      	ldr	r0, [r5, #0]
 8007a0c:	6869      	ldr	r1, [r5, #4]
 8007a0e:	68aa      	ldr	r2, [r5, #8]
 8007a10:	68eb      	ldr	r3, [r5, #12]
 8007a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a14:	7c2b      	ldrb	r3, [r5, #16]
 8007a16:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8007a18:	4a99      	ldr	r2, [pc, #612]	@ (8007c80 <loadMenuTexts+0x7d8>)
 8007a1a:	4b9a      	ldr	r3, [pc, #616]	@ (8007c84 <loadMenuTexts+0x7dc>)
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	461d      	mov	r5, r3
 8007a20:	6828      	ldr	r0, [r5, #0]
 8007a22:	6869      	ldr	r1, [r5, #4]
 8007a24:	68aa      	ldr	r2, [r5, #8]
 8007a26:	68eb      	ldr	r3, [r5, #12]
 8007a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a2a:	7c2b      	ldrb	r3, [r5, #16]
 8007a2c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8007a2e:	4a96      	ldr	r2, [pc, #600]	@ (8007c88 <loadMenuTexts+0x7e0>)
 8007a30:	4b96      	ldr	r3, [pc, #600]	@ (8007c8c <loadMenuTexts+0x7e4>)
 8007a32:	4614      	mov	r4, r2
 8007a34:	461d      	mov	r5, r3
 8007a36:	6828      	ldr	r0, [r5, #0]
 8007a38:	6869      	ldr	r1, [r5, #4]
 8007a3a:	68aa      	ldr	r2, [r5, #8]
 8007a3c:	68eb      	ldr	r3, [r5, #12]
 8007a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a40:	7c2b      	ldrb	r3, [r5, #16]
 8007a42:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007a44:	4a92      	ldr	r2, [pc, #584]	@ (8007c90 <loadMenuTexts+0x7e8>)
 8007a46:	4b93      	ldr	r3, [pc, #588]	@ (8007c94 <loadMenuTexts+0x7ec>)
 8007a48:	4614      	mov	r4, r2
 8007a4a:	461d      	mov	r5, r3
 8007a4c:	6828      	ldr	r0, [r5, #0]
 8007a4e:	6869      	ldr	r1, [r5, #4]
 8007a50:	68aa      	ldr	r2, [r5, #8]
 8007a52:	68eb      	ldr	r3, [r5, #12]
 8007a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a56:	7c2b      	ldrb	r3, [r5, #16]
 8007a58:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007a5a:	4a8f      	ldr	r2, [pc, #572]	@ (8007c98 <loadMenuTexts+0x7f0>)
 8007a5c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c9c <loadMenuTexts+0x7f4>)
 8007a5e:	4614      	mov	r4, r2
 8007a60:	461d      	mov	r5, r3
 8007a62:	6828      	ldr	r0, [r5, #0]
 8007a64:	6869      	ldr	r1, [r5, #4]
 8007a66:	68aa      	ldr	r2, [r5, #8]
 8007a68:	68eb      	ldr	r3, [r5, #12]
 8007a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a6c:	7c2b      	ldrb	r3, [r5, #16]
 8007a6e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007a70:	4a8b      	ldr	r2, [pc, #556]	@ (8007ca0 <loadMenuTexts+0x7f8>)
 8007a72:	4b8c      	ldr	r3, [pc, #560]	@ (8007ca4 <loadMenuTexts+0x7fc>)
 8007a74:	4614      	mov	r4, r2
 8007a76:	461d      	mov	r5, r3
 8007a78:	6828      	ldr	r0, [r5, #0]
 8007a7a:	6869      	ldr	r1, [r5, #4]
 8007a7c:	68aa      	ldr	r2, [r5, #8]
 8007a7e:	68eb      	ldr	r3, [r5, #12]
 8007a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a82:	7c2b      	ldrb	r3, [r5, #16]
 8007a84:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007a86:	4a88      	ldr	r2, [pc, #544]	@ (8007ca8 <loadMenuTexts+0x800>)
 8007a88:	4b88      	ldr	r3, [pc, #544]	@ (8007cac <loadMenuTexts+0x804>)
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	461d      	mov	r5, r3
 8007a8e:	6828      	ldr	r0, [r5, #0]
 8007a90:	6869      	ldr	r1, [r5, #4]
 8007a92:	68aa      	ldr	r2, [r5, #8]
 8007a94:	68eb      	ldr	r3, [r5, #12]
 8007a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a98:	7c2b      	ldrb	r3, [r5, #16]
 8007a9a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007a9c:	4a84      	ldr	r2, [pc, #528]	@ (8007cb0 <loadMenuTexts+0x808>)
 8007a9e:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <loadMenuTexts+0x80c>)
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	461d      	mov	r5, r3
 8007aa4:	6828      	ldr	r0, [r5, #0]
 8007aa6:	6869      	ldr	r1, [r5, #4]
 8007aa8:	68aa      	ldr	r2, [r5, #8]
 8007aaa:	68eb      	ldr	r3, [r5, #12]
 8007aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aae:	7c2b      	ldrb	r3, [r5, #16]
 8007ab0:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8007ab2:	4a81      	ldr	r2, [pc, #516]	@ (8007cb8 <loadMenuTexts+0x810>)
 8007ab4:	4b81      	ldr	r3, [pc, #516]	@ (8007cbc <loadMenuTexts+0x814>)
 8007ab6:	4614      	mov	r4, r2
 8007ab8:	461d      	mov	r5, r3
 8007aba:	6828      	ldr	r0, [r5, #0]
 8007abc:	6869      	ldr	r1, [r5, #4]
 8007abe:	68aa      	ldr	r2, [r5, #8]
 8007ac0:	68eb      	ldr	r3, [r5, #12]
 8007ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac4:	7c2b      	ldrb	r3, [r5, #16]
 8007ac6:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8007ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8007cc0 <loadMenuTexts+0x818>)
 8007aca:	4b7e      	ldr	r3, [pc, #504]	@ (8007cc4 <loadMenuTexts+0x81c>)
 8007acc:	4614      	mov	r4, r2
 8007ace:	461d      	mov	r5, r3
 8007ad0:	6828      	ldr	r0, [r5, #0]
 8007ad2:	6869      	ldr	r1, [r5, #4]
 8007ad4:	68aa      	ldr	r2, [r5, #8]
 8007ad6:	68eb      	ldr	r3, [r5, #12]
 8007ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ada:	7c2b      	ldrb	r3, [r5, #16]
 8007adc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8007ade:	4a7a      	ldr	r2, [pc, #488]	@ (8007cc8 <loadMenuTexts+0x820>)
 8007ae0:	4b7a      	ldr	r3, [pc, #488]	@ (8007ccc <loadMenuTexts+0x824>)
 8007ae2:	4614      	mov	r4, r2
 8007ae4:	461d      	mov	r5, r3
 8007ae6:	6828      	ldr	r0, [r5, #0]
 8007ae8:	6869      	ldr	r1, [r5, #4]
 8007aea:	68aa      	ldr	r2, [r5, #8]
 8007aec:	68eb      	ldr	r3, [r5, #12]
 8007aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af0:	7c2b      	ldrb	r3, [r5, #16]
 8007af2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8007af4:	4a76      	ldr	r2, [pc, #472]	@ (8007cd0 <loadMenuTexts+0x828>)
 8007af6:	4b77      	ldr	r3, [pc, #476]	@ (8007cd4 <loadMenuTexts+0x82c>)
 8007af8:	4614      	mov	r4, r2
 8007afa:	461d      	mov	r5, r3
 8007afc:	6828      	ldr	r0, [r5, #0]
 8007afe:	6869      	ldr	r1, [r5, #4]
 8007b00:	68aa      	ldr	r2, [r5, #8]
 8007b02:	68eb      	ldr	r3, [r5, #12]
 8007b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b06:	7c2b      	ldrb	r3, [r5, #16]
 8007b08:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8007b0a:	4a73      	ldr	r2, [pc, #460]	@ (8007cd8 <loadMenuTexts+0x830>)
 8007b0c:	4b73      	ldr	r3, [pc, #460]	@ (8007cdc <loadMenuTexts+0x834>)
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461d      	mov	r5, r3
 8007b12:	6828      	ldr	r0, [r5, #0]
 8007b14:	6869      	ldr	r1, [r5, #4]
 8007b16:	68aa      	ldr	r2, [r5, #8]
 8007b18:	68eb      	ldr	r3, [r5, #12]
 8007b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b1c:	7c2b      	ldrb	r3, [r5, #16]
 8007b1e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8007b20:	4a6f      	ldr	r2, [pc, #444]	@ (8007ce0 <loadMenuTexts+0x838>)
 8007b22:	4b70      	ldr	r3, [pc, #448]	@ (8007ce4 <loadMenuTexts+0x83c>)
 8007b24:	4614      	mov	r4, r2
 8007b26:	461d      	mov	r5, r3
 8007b28:	6828      	ldr	r0, [r5, #0]
 8007b2a:	6869      	ldr	r1, [r5, #4]
 8007b2c:	68aa      	ldr	r2, [r5, #8]
 8007b2e:	68eb      	ldr	r3, [r5, #12]
 8007b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b32:	7c2b      	ldrb	r3, [r5, #16]
 8007b34:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8007b36:	4a6c      	ldr	r2, [pc, #432]	@ (8007ce8 <loadMenuTexts+0x840>)
 8007b38:	4b6c      	ldr	r3, [pc, #432]	@ (8007cec <loadMenuTexts+0x844>)
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	461d      	mov	r5, r3
 8007b3e:	6828      	ldr	r0, [r5, #0]
 8007b40:	6869      	ldr	r1, [r5, #4]
 8007b42:	68aa      	ldr	r2, [r5, #8]
 8007b44:	68eb      	ldr	r3, [r5, #12]
 8007b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b48:	7c2b      	ldrb	r3, [r5, #16]
 8007b4a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007b4c:	4a68      	ldr	r2, [pc, #416]	@ (8007cf0 <loadMenuTexts+0x848>)
 8007b4e:	4b69      	ldr	r3, [pc, #420]	@ (8007cf4 <loadMenuTexts+0x84c>)
 8007b50:	4614      	mov	r4, r2
 8007b52:	461d      	mov	r5, r3
 8007b54:	6828      	ldr	r0, [r5, #0]
 8007b56:	6869      	ldr	r1, [r5, #4]
 8007b58:	68aa      	ldr	r2, [r5, #8]
 8007b5a:	68eb      	ldr	r3, [r5, #12]
 8007b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b5e:	7c2b      	ldrb	r3, [r5, #16]
 8007b60:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8007b62:	4a65      	ldr	r2, [pc, #404]	@ (8007cf8 <loadMenuTexts+0x850>)
 8007b64:	4b65      	ldr	r3, [pc, #404]	@ (8007cfc <loadMenuTexts+0x854>)
 8007b66:	4614      	mov	r4, r2
 8007b68:	461d      	mov	r5, r3
 8007b6a:	6828      	ldr	r0, [r5, #0]
 8007b6c:	6869      	ldr	r1, [r5, #4]
 8007b6e:	68aa      	ldr	r2, [r5, #8]
 8007b70:	68eb      	ldr	r3, [r5, #12]
 8007b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b74:	7c2b      	ldrb	r3, [r5, #16]
 8007b76:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007b78:	4a61      	ldr	r2, [pc, #388]	@ (8007d00 <loadMenuTexts+0x858>)
 8007b7a:	4b62      	ldr	r3, [pc, #392]	@ (8007d04 <loadMenuTexts+0x85c>)
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	461d      	mov	r5, r3
 8007b80:	6828      	ldr	r0, [r5, #0]
 8007b82:	6869      	ldr	r1, [r5, #4]
 8007b84:	68aa      	ldr	r2, [r5, #8]
 8007b86:	68eb      	ldr	r3, [r5, #12]
 8007b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b8a:	7c2b      	ldrb	r3, [r5, #16]
 8007b8c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007d08 <loadMenuTexts+0x860>)
 8007b90:	4b5e      	ldr	r3, [pc, #376]	@ (8007d0c <loadMenuTexts+0x864>)
 8007b92:	4614      	mov	r4, r2
 8007b94:	461d      	mov	r5, r3
 8007b96:	6828      	ldr	r0, [r5, #0]
 8007b98:	6869      	ldr	r1, [r5, #4]
 8007b9a:	68aa      	ldr	r2, [r5, #8]
 8007b9c:	68eb      	ldr	r3, [r5, #12]
 8007b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba0:	7c2b      	ldrb	r3, [r5, #16]
 8007ba2:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8007d10 <loadMenuTexts+0x868>)
 8007ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d14 <loadMenuTexts+0x86c>)
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	6828      	ldr	r0, [r5, #0]
 8007bae:	6869      	ldr	r1, [r5, #4]
 8007bb0:	68aa      	ldr	r2, [r5, #8]
 8007bb2:	68eb      	ldr	r3, [r5, #12]
 8007bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb6:	7c2b      	ldrb	r3, [r5, #16]
 8007bb8:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007bba:	4a57      	ldr	r2, [pc, #348]	@ (8007d18 <loadMenuTexts+0x870>)
 8007bbc:	4b57      	ldr	r3, [pc, #348]	@ (8007d1c <loadMenuTexts+0x874>)
 8007bbe:	4614      	mov	r4, r2
 8007bc0:	461d      	mov	r5, r3
 8007bc2:	6828      	ldr	r0, [r5, #0]
 8007bc4:	6869      	ldr	r1, [r5, #4]
 8007bc6:	68aa      	ldr	r2, [r5, #8]
 8007bc8:	68eb      	ldr	r3, [r5, #12]
 8007bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bcc:	7c2b      	ldrb	r3, [r5, #16]
 8007bce:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007bd0:	4a53      	ldr	r2, [pc, #332]	@ (8007d20 <loadMenuTexts+0x878>)
 8007bd2:	4b54      	ldr	r3, [pc, #336]	@ (8007d24 <loadMenuTexts+0x87c>)
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	6828      	ldr	r0, [r5, #0]
 8007bda:	6869      	ldr	r1, [r5, #4]
 8007bdc:	68aa      	ldr	r2, [r5, #8]
 8007bde:	68eb      	ldr	r3, [r5, #12]
 8007be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007be2:	7c2b      	ldrb	r3, [r5, #16]
 8007be4:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8007be6:	4a50      	ldr	r2, [pc, #320]	@ (8007d28 <loadMenuTexts+0x880>)
 8007be8:	4b50      	ldr	r3, [pc, #320]	@ (8007d2c <loadMenuTexts+0x884>)
 8007bea:	4614      	mov	r4, r2
 8007bec:	461d      	mov	r5, r3
 8007bee:	6828      	ldr	r0, [r5, #0]
 8007bf0:	6869      	ldr	r1, [r5, #4]
 8007bf2:	68aa      	ldr	r2, [r5, #8]
 8007bf4:	68eb      	ldr	r3, [r5, #12]
 8007bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf8:	7c2b      	ldrb	r3, [r5, #16]
 8007bfa:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8007bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8007d30 <loadMenuTexts+0x888>)
 8007bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8007d34 <loadMenuTexts+0x88c>)
 8007c00:	4614      	mov	r4, r2
 8007c02:	461d      	mov	r5, r3
 8007c04:	6828      	ldr	r0, [r5, #0]
 8007c06:	6869      	ldr	r1, [r5, #4]
 8007c08:	68aa      	ldr	r2, [r5, #8]
 8007c0a:	68eb      	ldr	r3, [r5, #12]
 8007c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0e:	7c2b      	ldrb	r3, [r5, #16]
 8007c10:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8007c12:	4a49      	ldr	r2, [pc, #292]	@ (8007d38 <loadMenuTexts+0x890>)
 8007c14:	4b49      	ldr	r3, [pc, #292]	@ (8007d3c <loadMenuTexts+0x894>)
 8007c16:	4614      	mov	r4, r2
 8007c18:	461d      	mov	r5, r3
 8007c1a:	e091      	b.n	8007d40 <loadMenuTexts+0x898>
 8007c1c:	2000045c 	.word	0x2000045c
 8007c20:	20001500 	.word	0x20001500
 8007c24:	20000470 	.word	0x20000470
 8007c28:	20001514 	.word	0x20001514
 8007c2c:	20000484 	.word	0x20000484
 8007c30:	20001528 	.word	0x20001528
 8007c34:	20000498 	.word	0x20000498
 8007c38:	2000153c 	.word	0x2000153c
 8007c3c:	200004ac 	.word	0x200004ac
 8007c40:	20001550 	.word	0x20001550
 8007c44:	200004c0 	.word	0x200004c0
 8007c48:	20001564 	.word	0x20001564
 8007c4c:	200004d4 	.word	0x200004d4
 8007c50:	20001578 	.word	0x20001578
 8007c54:	200004e8 	.word	0x200004e8
 8007c58:	2000158c 	.word	0x2000158c
 8007c5c:	200004fc 	.word	0x200004fc
 8007c60:	200015a0 	.word	0x200015a0
 8007c64:	20000510 	.word	0x20000510
 8007c68:	200015b4 	.word	0x200015b4
 8007c6c:	20000524 	.word	0x20000524
 8007c70:	200015c8 	.word	0x200015c8
 8007c74:	20000538 	.word	0x20000538
 8007c78:	200015dc 	.word	0x200015dc
 8007c7c:	2000054c 	.word	0x2000054c
 8007c80:	200015f0 	.word	0x200015f0
 8007c84:	20000560 	.word	0x20000560
 8007c88:	20001604 	.word	0x20001604
 8007c8c:	20000574 	.word	0x20000574
 8007c90:	20001618 	.word	0x20001618
 8007c94:	20000588 	.word	0x20000588
 8007c98:	2000162c 	.word	0x2000162c
 8007c9c:	2000059c 	.word	0x2000059c
 8007ca0:	20001640 	.word	0x20001640
 8007ca4:	200005b0 	.word	0x200005b0
 8007ca8:	20001654 	.word	0x20001654
 8007cac:	200005c4 	.word	0x200005c4
 8007cb0:	20001668 	.word	0x20001668
 8007cb4:	200005d8 	.word	0x200005d8
 8007cb8:	2000167c 	.word	0x2000167c
 8007cbc:	200005ec 	.word	0x200005ec
 8007cc0:	20001690 	.word	0x20001690
 8007cc4:	20000600 	.word	0x20000600
 8007cc8:	200016a4 	.word	0x200016a4
 8007ccc:	20000614 	.word	0x20000614
 8007cd0:	200016b8 	.word	0x200016b8
 8007cd4:	20000628 	.word	0x20000628
 8007cd8:	200016cc 	.word	0x200016cc
 8007cdc:	2000063c 	.word	0x2000063c
 8007ce0:	200016e0 	.word	0x200016e0
 8007ce4:	20000650 	.word	0x20000650
 8007ce8:	200016f4 	.word	0x200016f4
 8007cec:	20000664 	.word	0x20000664
 8007cf0:	20001708 	.word	0x20001708
 8007cf4:	20000678 	.word	0x20000678
 8007cf8:	2000171c 	.word	0x2000171c
 8007cfc:	2000068c 	.word	0x2000068c
 8007d00:	20001730 	.word	0x20001730
 8007d04:	200006a0 	.word	0x200006a0
 8007d08:	20001744 	.word	0x20001744
 8007d0c:	200006b4 	.word	0x200006b4
 8007d10:	20001758 	.word	0x20001758
 8007d14:	200006c8 	.word	0x200006c8
 8007d18:	2000176c 	.word	0x2000176c
 8007d1c:	200006dc 	.word	0x200006dc
 8007d20:	20001780 	.word	0x20001780
 8007d24:	200006f0 	.word	0x200006f0
 8007d28:	20001794 	.word	0x20001794
 8007d2c:	20000c7c 	.word	0x20000c7c
 8007d30:	200017a8 	.word	0x200017a8
 8007d34:	20000c90 	.word	0x20000c90
 8007d38:	200017bc 	.word	0x200017bc
 8007d3c:	20000ca4 	.word	0x20000ca4
 8007d40:	6828      	ldr	r0, [r5, #0]
 8007d42:	6869      	ldr	r1, [r5, #4]
 8007d44:	68aa      	ldr	r2, [r5, #8]
 8007d46:	68eb      	ldr	r3, [r5, #12]
 8007d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d4a:	7c2b      	ldrb	r3, [r5, #16]
 8007d4c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8007d4e:	4a59      	ldr	r2, [pc, #356]	@ (8007eb4 <loadMenuTexts+0xa0c>)
 8007d50:	4b59      	ldr	r3, [pc, #356]	@ (8007eb8 <loadMenuTexts+0xa10>)
 8007d52:	4614      	mov	r4, r2
 8007d54:	461d      	mov	r5, r3
 8007d56:	6828      	ldr	r0, [r5, #0]
 8007d58:	6869      	ldr	r1, [r5, #4]
 8007d5a:	68aa      	ldr	r2, [r5, #8]
 8007d5c:	68eb      	ldr	r3, [r5, #12]
 8007d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d60:	7c2b      	ldrb	r3, [r5, #16]
 8007d62:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8007d64:	4a55      	ldr	r2, [pc, #340]	@ (8007ebc <loadMenuTexts+0xa14>)
 8007d66:	4b56      	ldr	r3, [pc, #344]	@ (8007ec0 <loadMenuTexts+0xa18>)
 8007d68:	4614      	mov	r4, r2
 8007d6a:	461d      	mov	r5, r3
 8007d6c:	6828      	ldr	r0, [r5, #0]
 8007d6e:	6869      	ldr	r1, [r5, #4]
 8007d70:	68aa      	ldr	r2, [r5, #8]
 8007d72:	68eb      	ldr	r3, [r5, #12]
 8007d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d76:	7c2b      	ldrb	r3, [r5, #16]
 8007d78:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8007d7a:	4a52      	ldr	r2, [pc, #328]	@ (8007ec4 <loadMenuTexts+0xa1c>)
 8007d7c:	4b52      	ldr	r3, [pc, #328]	@ (8007ec8 <loadMenuTexts+0xa20>)
 8007d7e:	4614      	mov	r4, r2
 8007d80:	461d      	mov	r5, r3
 8007d82:	6828      	ldr	r0, [r5, #0]
 8007d84:	6869      	ldr	r1, [r5, #4]
 8007d86:	68aa      	ldr	r2, [r5, #8]
 8007d88:	68eb      	ldr	r3, [r5, #12]
 8007d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d8c:	7c2b      	ldrb	r3, [r5, #16]
 8007d8e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8007d90:	4a4e      	ldr	r2, [pc, #312]	@ (8007ecc <loadMenuTexts+0xa24>)
 8007d92:	4b4f      	ldr	r3, [pc, #316]	@ (8007ed0 <loadMenuTexts+0xa28>)
 8007d94:	4614      	mov	r4, r2
 8007d96:	461d      	mov	r5, r3
 8007d98:	6828      	ldr	r0, [r5, #0]
 8007d9a:	6869      	ldr	r1, [r5, #4]
 8007d9c:	68aa      	ldr	r2, [r5, #8]
 8007d9e:	68eb      	ldr	r3, [r5, #12]
 8007da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007da2:	7c2b      	ldrb	r3, [r5, #16]
 8007da4:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8007da6:	4a4b      	ldr	r2, [pc, #300]	@ (8007ed4 <loadMenuTexts+0xa2c>)
 8007da8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed8 <loadMenuTexts+0xa30>)
 8007daa:	4614      	mov	r4, r2
 8007dac:	461d      	mov	r5, r3
 8007dae:	6828      	ldr	r0, [r5, #0]
 8007db0:	6869      	ldr	r1, [r5, #4]
 8007db2:	68aa      	ldr	r2, [r5, #8]
 8007db4:	68eb      	ldr	r3, [r5, #12]
 8007db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007db8:	7c2b      	ldrb	r3, [r5, #16]
 8007dba:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8007dbc:	4a47      	ldr	r2, [pc, #284]	@ (8007edc <loadMenuTexts+0xa34>)
 8007dbe:	4b48      	ldr	r3, [pc, #288]	@ (8007ee0 <loadMenuTexts+0xa38>)
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	6828      	ldr	r0, [r5, #0]
 8007dc6:	6869      	ldr	r1, [r5, #4]
 8007dc8:	68aa      	ldr	r2, [r5, #8]
 8007dca:	68eb      	ldr	r3, [r5, #12]
 8007dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dce:	7c2b      	ldrb	r3, [r5, #16]
 8007dd0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8007dd2:	4a44      	ldr	r2, [pc, #272]	@ (8007ee4 <loadMenuTexts+0xa3c>)
 8007dd4:	4b44      	ldr	r3, [pc, #272]	@ (8007ee8 <loadMenuTexts+0xa40>)
 8007dd6:	4614      	mov	r4, r2
 8007dd8:	461d      	mov	r5, r3
 8007dda:	6828      	ldr	r0, [r5, #0]
 8007ddc:	6869      	ldr	r1, [r5, #4]
 8007dde:	68aa      	ldr	r2, [r5, #8]
 8007de0:	68eb      	ldr	r3, [r5, #12]
 8007de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007de4:	7c2b      	ldrb	r3, [r5, #16]
 8007de6:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8007de8:	4a40      	ldr	r2, [pc, #256]	@ (8007eec <loadMenuTexts+0xa44>)
 8007dea:	4b41      	ldr	r3, [pc, #260]	@ (8007ef0 <loadMenuTexts+0xa48>)
 8007dec:	4614      	mov	r4, r2
 8007dee:	461d      	mov	r5, r3
 8007df0:	6828      	ldr	r0, [r5, #0]
 8007df2:	6869      	ldr	r1, [r5, #4]
 8007df4:	68aa      	ldr	r2, [r5, #8]
 8007df6:	68eb      	ldr	r3, [r5, #12]
 8007df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dfa:	7c2b      	ldrb	r3, [r5, #16]
 8007dfc:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8007ef4 <loadMenuTexts+0xa4c>)
 8007e00:	4b3d      	ldr	r3, [pc, #244]	@ (8007ef8 <loadMenuTexts+0xa50>)
 8007e02:	4614      	mov	r4, r2
 8007e04:	461d      	mov	r5, r3
 8007e06:	6828      	ldr	r0, [r5, #0]
 8007e08:	6869      	ldr	r1, [r5, #4]
 8007e0a:	68aa      	ldr	r2, [r5, #8]
 8007e0c:	68eb      	ldr	r3, [r5, #12]
 8007e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e10:	7c2b      	ldrb	r3, [r5, #16]
 8007e12:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8007e14:	4a39      	ldr	r2, [pc, #228]	@ (8007efc <loadMenuTexts+0xa54>)
 8007e16:	4b3a      	ldr	r3, [pc, #232]	@ (8007f00 <loadMenuTexts+0xa58>)
 8007e18:	4614      	mov	r4, r2
 8007e1a:	461d      	mov	r5, r3
 8007e1c:	6828      	ldr	r0, [r5, #0]
 8007e1e:	6869      	ldr	r1, [r5, #4]
 8007e20:	68aa      	ldr	r2, [r5, #8]
 8007e22:	68eb      	ldr	r3, [r5, #12]
 8007e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e26:	7c2b      	ldrb	r3, [r5, #16]
 8007e28:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8007e2a:	4a36      	ldr	r2, [pc, #216]	@ (8007f04 <loadMenuTexts+0xa5c>)
 8007e2c:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <loadMenuTexts+0xa60>)
 8007e2e:	4614      	mov	r4, r2
 8007e30:	461d      	mov	r5, r3
 8007e32:	6828      	ldr	r0, [r5, #0]
 8007e34:	6869      	ldr	r1, [r5, #4]
 8007e36:	68aa      	ldr	r2, [r5, #8]
 8007e38:	68eb      	ldr	r3, [r5, #12]
 8007e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e3c:	7c2b      	ldrb	r3, [r5, #16]
 8007e3e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007e40:	4a32      	ldr	r2, [pc, #200]	@ (8007f0c <loadMenuTexts+0xa64>)
 8007e42:	4b33      	ldr	r3, [pc, #204]	@ (8007f10 <loadMenuTexts+0xa68>)
 8007e44:	4614      	mov	r4, r2
 8007e46:	461d      	mov	r5, r3
 8007e48:	6828      	ldr	r0, [r5, #0]
 8007e4a:	6869      	ldr	r1, [r5, #4]
 8007e4c:	68aa      	ldr	r2, [r5, #8]
 8007e4e:	68eb      	ldr	r3, [r5, #12]
 8007e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e52:	7c2b      	ldrb	r3, [r5, #16]
 8007e54:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8007e56:	4a2f      	ldr	r2, [pc, #188]	@ (8007f14 <loadMenuTexts+0xa6c>)
 8007e58:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <loadMenuTexts+0xa70>)
 8007e5a:	4614      	mov	r4, r2
 8007e5c:	461d      	mov	r5, r3
 8007e5e:	6828      	ldr	r0, [r5, #0]
 8007e60:	6869      	ldr	r1, [r5, #4]
 8007e62:	68aa      	ldr	r2, [r5, #8]
 8007e64:	68eb      	ldr	r3, [r5, #12]
 8007e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e68:	7c2b      	ldrb	r3, [r5, #16]
 8007e6a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007f1c <loadMenuTexts+0xa74>)
 8007e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007f20 <loadMenuTexts+0xa78>)
 8007e70:	4614      	mov	r4, r2
 8007e72:	461d      	mov	r5, r3
 8007e74:	6828      	ldr	r0, [r5, #0]
 8007e76:	6869      	ldr	r1, [r5, #4]
 8007e78:	68aa      	ldr	r2, [r5, #8]
 8007e7a:	68eb      	ldr	r3, [r5, #12]
 8007e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7e:	7c2b      	ldrb	r3, [r5, #16]
 8007e80:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8007e82:	4a28      	ldr	r2, [pc, #160]	@ (8007f24 <loadMenuTexts+0xa7c>)
 8007e84:	4b28      	ldr	r3, [pc, #160]	@ (8007f28 <loadMenuTexts+0xa80>)
 8007e86:	4614      	mov	r4, r2
 8007e88:	461d      	mov	r5, r3
 8007e8a:	6828      	ldr	r0, [r5, #0]
 8007e8c:	6869      	ldr	r1, [r5, #4]
 8007e8e:	68aa      	ldr	r2, [r5, #8]
 8007e90:	68eb      	ldr	r3, [r5, #12]
 8007e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e94:	7c2b      	ldrb	r3, [r5, #16]
 8007e96:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8007e98:	4a24      	ldr	r2, [pc, #144]	@ (8007f2c <loadMenuTexts+0xa84>)
 8007e9a:	4b25      	ldr	r3, [pc, #148]	@ (8007f30 <loadMenuTexts+0xa88>)
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	6828      	ldr	r0, [r5, #0]
 8007ea2:	6869      	ldr	r1, [r5, #4]
 8007ea4:	68aa      	ldr	r2, [r5, #8]
 8007ea6:	68eb      	ldr	r3, [r5, #12]
 8007ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eaa:	7c2b      	ldrb	r3, [r5, #16]
 8007eac:	7023      	strb	r3, [r4, #0]
 8007eae:	f000 bd3a 	b.w	8008926 <loadMenuTexts+0x147e>
 8007eb2:	bf00      	nop
 8007eb4:	200017d0 	.word	0x200017d0
 8007eb8:	20000cb8 	.word	0x20000cb8
 8007ebc:	200017e4 	.word	0x200017e4
 8007ec0:	20000d1c 	.word	0x20000d1c
 8007ec4:	200017f8 	.word	0x200017f8
 8007ec8:	20000d30 	.word	0x20000d30
 8007ecc:	2000180c 	.word	0x2000180c
 8007ed0:	20000d6c 	.word	0x20000d6c
 8007ed4:	20001820 	.word	0x20001820
 8007ed8:	20000d80 	.word	0x20000d80
 8007edc:	20001834 	.word	0x20001834
 8007ee0:	20000dbc 	.word	0x20000dbc
 8007ee4:	20001848 	.word	0x20001848
 8007ee8:	20000dd0 	.word	0x20000dd0
 8007eec:	2000185c 	.word	0x2000185c
 8007ef0:	20000e0c 	.word	0x20000e0c
 8007ef4:	20001870 	.word	0x20001870
 8007ef8:	20000e34 	.word	0x20000e34
 8007efc:	20001884 	.word	0x20001884
 8007f00:	20000e5c 	.word	0x20000e5c
 8007f04:	20001898 	.word	0x20001898
 8007f08:	20000e84 	.word	0x20000e84
 8007f0c:	200018ac 	.word	0x200018ac
 8007f10:	20000eac 	.word	0x20000eac
 8007f14:	200018c0 	.word	0x200018c0
 8007f18:	20000ed4 	.word	0x20000ed4
 8007f1c:	200018d4 	.word	0x200018d4
 8007f20:	20000efc 	.word	0x20000efc
 8007f24:	200018e8 	.word	0x200018e8
 8007f28:	20000f24 	.word	0x20000f24
 8007f2c:	200018fc 	.word	0x200018fc
 8007f30:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007f34:	4ac6      	ldr	r2, [pc, #792]	@ (8008250 <loadMenuTexts+0xda8>)
 8007f36:	4bc7      	ldr	r3, [pc, #796]	@ (8008254 <loadMenuTexts+0xdac>)
 8007f38:	4614      	mov	r4, r2
 8007f3a:	461d      	mov	r5, r3
 8007f3c:	6828      	ldr	r0, [r5, #0]
 8007f3e:	6869      	ldr	r1, [r5, #4]
 8007f40:	68aa      	ldr	r2, [r5, #8]
 8007f42:	68eb      	ldr	r3, [r5, #12]
 8007f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f46:	7c2b      	ldrb	r3, [r5, #16]
 8007f48:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007f4a:	4ac3      	ldr	r2, [pc, #780]	@ (8008258 <loadMenuTexts+0xdb0>)
 8007f4c:	4bc3      	ldr	r3, [pc, #780]	@ (800825c <loadMenuTexts+0xdb4>)
 8007f4e:	4614      	mov	r4, r2
 8007f50:	461d      	mov	r5, r3
 8007f52:	6828      	ldr	r0, [r5, #0]
 8007f54:	6869      	ldr	r1, [r5, #4]
 8007f56:	68aa      	ldr	r2, [r5, #8]
 8007f58:	68eb      	ldr	r3, [r5, #12]
 8007f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f5c:	7c2b      	ldrb	r3, [r5, #16]
 8007f5e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007f60:	4abf      	ldr	r2, [pc, #764]	@ (8008260 <loadMenuTexts+0xdb8>)
 8007f62:	4bc0      	ldr	r3, [pc, #768]	@ (8008264 <loadMenuTexts+0xdbc>)
 8007f64:	4614      	mov	r4, r2
 8007f66:	461d      	mov	r5, r3
 8007f68:	6828      	ldr	r0, [r5, #0]
 8007f6a:	6869      	ldr	r1, [r5, #4]
 8007f6c:	68aa      	ldr	r2, [r5, #8]
 8007f6e:	68eb      	ldr	r3, [r5, #12]
 8007f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f72:	7c2b      	ldrb	r3, [r5, #16]
 8007f74:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8007f76:	4abc      	ldr	r2, [pc, #752]	@ (8008268 <loadMenuTexts+0xdc0>)
 8007f78:	4bbc      	ldr	r3, [pc, #752]	@ (800826c <loadMenuTexts+0xdc4>)
 8007f7a:	4614      	mov	r4, r2
 8007f7c:	461d      	mov	r5, r3
 8007f7e:	6828      	ldr	r0, [r5, #0]
 8007f80:	6869      	ldr	r1, [r5, #4]
 8007f82:	68aa      	ldr	r2, [r5, #8]
 8007f84:	68eb      	ldr	r3, [r5, #12]
 8007f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f88:	7c2b      	ldrb	r3, [r5, #16]
 8007f8a:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8007f8c:	4ab8      	ldr	r2, [pc, #736]	@ (8008270 <loadMenuTexts+0xdc8>)
 8007f8e:	4bb9      	ldr	r3, [pc, #740]	@ (8008274 <loadMenuTexts+0xdcc>)
 8007f90:	4614      	mov	r4, r2
 8007f92:	461d      	mov	r5, r3
 8007f94:	6828      	ldr	r0, [r5, #0]
 8007f96:	6869      	ldr	r1, [r5, #4]
 8007f98:	68aa      	ldr	r2, [r5, #8]
 8007f9a:	68eb      	ldr	r3, [r5, #12]
 8007f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9e:	7c2b      	ldrb	r3, [r5, #16]
 8007fa0:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8007fa2:	4ab5      	ldr	r2, [pc, #724]	@ (8008278 <loadMenuTexts+0xdd0>)
 8007fa4:	4bb5      	ldr	r3, [pc, #724]	@ (800827c <loadMenuTexts+0xdd4>)
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	461d      	mov	r5, r3
 8007faa:	6828      	ldr	r0, [r5, #0]
 8007fac:	6869      	ldr	r1, [r5, #4]
 8007fae:	68aa      	ldr	r2, [r5, #8]
 8007fb0:	68eb      	ldr	r3, [r5, #12]
 8007fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fb4:	7c2b      	ldrb	r3, [r5, #16]
 8007fb6:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8007fb8:	4ab1      	ldr	r2, [pc, #708]	@ (8008280 <loadMenuTexts+0xdd8>)
 8007fba:	4bb2      	ldr	r3, [pc, #712]	@ (8008284 <loadMenuTexts+0xddc>)
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	6828      	ldr	r0, [r5, #0]
 8007fc2:	6869      	ldr	r1, [r5, #4]
 8007fc4:	68aa      	ldr	r2, [r5, #8]
 8007fc6:	68eb      	ldr	r3, [r5, #12]
 8007fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fca:	7c2b      	ldrb	r3, [r5, #16]
 8007fcc:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8007fce:	4aae      	ldr	r2, [pc, #696]	@ (8008288 <loadMenuTexts+0xde0>)
 8007fd0:	4bae      	ldr	r3, [pc, #696]	@ (800828c <loadMenuTexts+0xde4>)
 8007fd2:	4614      	mov	r4, r2
 8007fd4:	461d      	mov	r5, r3
 8007fd6:	6828      	ldr	r0, [r5, #0]
 8007fd8:	6869      	ldr	r1, [r5, #4]
 8007fda:	68aa      	ldr	r2, [r5, #8]
 8007fdc:	68eb      	ldr	r3, [r5, #12]
 8007fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fe0:	7c2b      	ldrb	r3, [r5, #16]
 8007fe2:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8007fe4:	4aaa      	ldr	r2, [pc, #680]	@ (8008290 <loadMenuTexts+0xde8>)
 8007fe6:	4bab      	ldr	r3, [pc, #684]	@ (8008294 <loadMenuTexts+0xdec>)
 8007fe8:	4614      	mov	r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	6828      	ldr	r0, [r5, #0]
 8007fee:	6869      	ldr	r1, [r5, #4]
 8007ff0:	68aa      	ldr	r2, [r5, #8]
 8007ff2:	68eb      	ldr	r3, [r5, #12]
 8007ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff6:	7c2b      	ldrb	r3, [r5, #16]
 8007ff8:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007ffa:	4aa7      	ldr	r2, [pc, #668]	@ (8008298 <loadMenuTexts+0xdf0>)
 8007ffc:	4ba7      	ldr	r3, [pc, #668]	@ (800829c <loadMenuTexts+0xdf4>)
 8007ffe:	4614      	mov	r4, r2
 8008000:	461d      	mov	r5, r3
 8008002:	6828      	ldr	r0, [r5, #0]
 8008004:	6869      	ldr	r1, [r5, #4]
 8008006:	68aa      	ldr	r2, [r5, #8]
 8008008:	68eb      	ldr	r3, [r5, #12]
 800800a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800800c:	7c2b      	ldrb	r3, [r5, #16]
 800800e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8008010:	4aa3      	ldr	r2, [pc, #652]	@ (80082a0 <loadMenuTexts+0xdf8>)
 8008012:	4ba4      	ldr	r3, [pc, #656]	@ (80082a4 <loadMenuTexts+0xdfc>)
 8008014:	4614      	mov	r4, r2
 8008016:	461d      	mov	r5, r3
 8008018:	6828      	ldr	r0, [r5, #0]
 800801a:	6869      	ldr	r1, [r5, #4]
 800801c:	68aa      	ldr	r2, [r5, #8]
 800801e:	68eb      	ldr	r3, [r5, #12]
 8008020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008022:	7c2b      	ldrb	r3, [r5, #16]
 8008024:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8008026:	4aa0      	ldr	r2, [pc, #640]	@ (80082a8 <loadMenuTexts+0xe00>)
 8008028:	4ba0      	ldr	r3, [pc, #640]	@ (80082ac <loadMenuTexts+0xe04>)
 800802a:	4614      	mov	r4, r2
 800802c:	461d      	mov	r5, r3
 800802e:	6828      	ldr	r0, [r5, #0]
 8008030:	6869      	ldr	r1, [r5, #4]
 8008032:	68aa      	ldr	r2, [r5, #8]
 8008034:	68eb      	ldr	r3, [r5, #12]
 8008036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008038:	7c2b      	ldrb	r3, [r5, #16]
 800803a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 800803c:	4a9c      	ldr	r2, [pc, #624]	@ (80082b0 <loadMenuTexts+0xe08>)
 800803e:	4b9d      	ldr	r3, [pc, #628]	@ (80082b4 <loadMenuTexts+0xe0c>)
 8008040:	4614      	mov	r4, r2
 8008042:	461d      	mov	r5, r3
 8008044:	6828      	ldr	r0, [r5, #0]
 8008046:	6869      	ldr	r1, [r5, #4]
 8008048:	68aa      	ldr	r2, [r5, #8]
 800804a:	68eb      	ldr	r3, [r5, #12]
 800804c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804e:	7c2b      	ldrb	r3, [r5, #16]
 8008050:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8008052:	4a99      	ldr	r2, [pc, #612]	@ (80082b8 <loadMenuTexts+0xe10>)
 8008054:	4b99      	ldr	r3, [pc, #612]	@ (80082bc <loadMenuTexts+0xe14>)
 8008056:	4614      	mov	r4, r2
 8008058:	461d      	mov	r5, r3
 800805a:	6828      	ldr	r0, [r5, #0]
 800805c:	6869      	ldr	r1, [r5, #4]
 800805e:	68aa      	ldr	r2, [r5, #8]
 8008060:	68eb      	ldr	r3, [r5, #12]
 8008062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008064:	7c2b      	ldrb	r3, [r5, #16]
 8008066:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8008068:	4a95      	ldr	r2, [pc, #596]	@ (80082c0 <loadMenuTexts+0xe18>)
 800806a:	4b96      	ldr	r3, [pc, #600]	@ (80082c4 <loadMenuTexts+0xe1c>)
 800806c:	4614      	mov	r4, r2
 800806e:	461d      	mov	r5, r3
 8008070:	6828      	ldr	r0, [r5, #0]
 8008072:	6869      	ldr	r1, [r5, #4]
 8008074:	68aa      	ldr	r2, [r5, #8]
 8008076:	68eb      	ldr	r3, [r5, #12]
 8008078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800807a:	7c2b      	ldrb	r3, [r5, #16]
 800807c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 800807e:	4a92      	ldr	r2, [pc, #584]	@ (80082c8 <loadMenuTexts+0xe20>)
 8008080:	4b92      	ldr	r3, [pc, #584]	@ (80082cc <loadMenuTexts+0xe24>)
 8008082:	4614      	mov	r4, r2
 8008084:	461d      	mov	r5, r3
 8008086:	6828      	ldr	r0, [r5, #0]
 8008088:	6869      	ldr	r1, [r5, #4]
 800808a:	68aa      	ldr	r2, [r5, #8]
 800808c:	68eb      	ldr	r3, [r5, #12]
 800808e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008090:	7c2b      	ldrb	r3, [r5, #16]
 8008092:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8008094:	4a8e      	ldr	r2, [pc, #568]	@ (80082d0 <loadMenuTexts+0xe28>)
 8008096:	4b8f      	ldr	r3, [pc, #572]	@ (80082d4 <loadMenuTexts+0xe2c>)
 8008098:	4614      	mov	r4, r2
 800809a:	461d      	mov	r5, r3
 800809c:	6828      	ldr	r0, [r5, #0]
 800809e:	6869      	ldr	r1, [r5, #4]
 80080a0:	68aa      	ldr	r2, [r5, #8]
 80080a2:	68eb      	ldr	r3, [r5, #12]
 80080a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a6:	7c2b      	ldrb	r3, [r5, #16]
 80080a8:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 80080aa:	4a8b      	ldr	r2, [pc, #556]	@ (80082d8 <loadMenuTexts+0xe30>)
 80080ac:	4b8b      	ldr	r3, [pc, #556]	@ (80082dc <loadMenuTexts+0xe34>)
 80080ae:	4614      	mov	r4, r2
 80080b0:	461d      	mov	r5, r3
 80080b2:	6828      	ldr	r0, [r5, #0]
 80080b4:	6869      	ldr	r1, [r5, #4]
 80080b6:	68aa      	ldr	r2, [r5, #8]
 80080b8:	68eb      	ldr	r3, [r5, #12]
 80080ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080bc:	7c2b      	ldrb	r3, [r5, #16]
 80080be:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80080c0:	4a87      	ldr	r2, [pc, #540]	@ (80082e0 <loadMenuTexts+0xe38>)
 80080c2:	4b88      	ldr	r3, [pc, #544]	@ (80082e4 <loadMenuTexts+0xe3c>)
 80080c4:	4614      	mov	r4, r2
 80080c6:	461d      	mov	r5, r3
 80080c8:	6828      	ldr	r0, [r5, #0]
 80080ca:	6869      	ldr	r1, [r5, #4]
 80080cc:	68aa      	ldr	r2, [r5, #8]
 80080ce:	68eb      	ldr	r3, [r5, #12]
 80080d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d2:	7c2b      	ldrb	r3, [r5, #16]
 80080d4:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80080d6:	4a84      	ldr	r2, [pc, #528]	@ (80082e8 <loadMenuTexts+0xe40>)
 80080d8:	4b84      	ldr	r3, [pc, #528]	@ (80082ec <loadMenuTexts+0xe44>)
 80080da:	4614      	mov	r4, r2
 80080dc:	461d      	mov	r5, r3
 80080de:	6828      	ldr	r0, [r5, #0]
 80080e0:	6869      	ldr	r1, [r5, #4]
 80080e2:	68aa      	ldr	r2, [r5, #8]
 80080e4:	68eb      	ldr	r3, [r5, #12]
 80080e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e8:	7c2b      	ldrb	r3, [r5, #16]
 80080ea:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 80080ec:	4a80      	ldr	r2, [pc, #512]	@ (80082f0 <loadMenuTexts+0xe48>)
 80080ee:	4b81      	ldr	r3, [pc, #516]	@ (80082f4 <loadMenuTexts+0xe4c>)
 80080f0:	4614      	mov	r4, r2
 80080f2:	461d      	mov	r5, r3
 80080f4:	6828      	ldr	r0, [r5, #0]
 80080f6:	6869      	ldr	r1, [r5, #4]
 80080f8:	68aa      	ldr	r2, [r5, #8]
 80080fa:	68eb      	ldr	r3, [r5, #12]
 80080fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080fe:	7c2b      	ldrb	r3, [r5, #16]
 8008100:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8008102:	4a7d      	ldr	r2, [pc, #500]	@ (80082f8 <loadMenuTexts+0xe50>)
 8008104:	4b7d      	ldr	r3, [pc, #500]	@ (80082fc <loadMenuTexts+0xe54>)
 8008106:	4614      	mov	r4, r2
 8008108:	461d      	mov	r5, r3
 800810a:	6828      	ldr	r0, [r5, #0]
 800810c:	6869      	ldr	r1, [r5, #4]
 800810e:	68aa      	ldr	r2, [r5, #8]
 8008110:	68eb      	ldr	r3, [r5, #12]
 8008112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008114:	7c2b      	ldrb	r3, [r5, #16]
 8008116:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8008118:	4a79      	ldr	r2, [pc, #484]	@ (8008300 <loadMenuTexts+0xe58>)
 800811a:	4b7a      	ldr	r3, [pc, #488]	@ (8008304 <loadMenuTexts+0xe5c>)
 800811c:	4614      	mov	r4, r2
 800811e:	461d      	mov	r5, r3
 8008120:	6828      	ldr	r0, [r5, #0]
 8008122:	6869      	ldr	r1, [r5, #4]
 8008124:	68aa      	ldr	r2, [r5, #8]
 8008126:	68eb      	ldr	r3, [r5, #12]
 8008128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800812a:	7c2b      	ldrb	r3, [r5, #16]
 800812c:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 800812e:	4a76      	ldr	r2, [pc, #472]	@ (8008308 <loadMenuTexts+0xe60>)
 8008130:	4b76      	ldr	r3, [pc, #472]	@ (800830c <loadMenuTexts+0xe64>)
 8008132:	4614      	mov	r4, r2
 8008134:	461d      	mov	r5, r3
 8008136:	6828      	ldr	r0, [r5, #0]
 8008138:	6869      	ldr	r1, [r5, #4]
 800813a:	68aa      	ldr	r2, [r5, #8]
 800813c:	68eb      	ldr	r3, [r5, #12]
 800813e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008140:	7c2b      	ldrb	r3, [r5, #16]
 8008142:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008144:	4a72      	ldr	r2, [pc, #456]	@ (8008310 <loadMenuTexts+0xe68>)
 8008146:	4b73      	ldr	r3, [pc, #460]	@ (8008314 <loadMenuTexts+0xe6c>)
 8008148:	4614      	mov	r4, r2
 800814a:	461d      	mov	r5, r3
 800814c:	6828      	ldr	r0, [r5, #0]
 800814e:	6869      	ldr	r1, [r5, #4]
 8008150:	68aa      	ldr	r2, [r5, #8]
 8008152:	68eb      	ldr	r3, [r5, #12]
 8008154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008156:	7c2b      	ldrb	r3, [r5, #16]
 8008158:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800815a:	4a6f      	ldr	r2, [pc, #444]	@ (8008318 <loadMenuTexts+0xe70>)
 800815c:	4b6f      	ldr	r3, [pc, #444]	@ (800831c <loadMenuTexts+0xe74>)
 800815e:	4614      	mov	r4, r2
 8008160:	461d      	mov	r5, r3
 8008162:	6828      	ldr	r0, [r5, #0]
 8008164:	6869      	ldr	r1, [r5, #4]
 8008166:	68aa      	ldr	r2, [r5, #8]
 8008168:	68eb      	ldr	r3, [r5, #12]
 800816a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800816c:	7c2b      	ldrb	r3, [r5, #16]
 800816e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8008170:	4a6b      	ldr	r2, [pc, #428]	@ (8008320 <loadMenuTexts+0xe78>)
 8008172:	4b6c      	ldr	r3, [pc, #432]	@ (8008324 <loadMenuTexts+0xe7c>)
 8008174:	4614      	mov	r4, r2
 8008176:	461d      	mov	r5, r3
 8008178:	6828      	ldr	r0, [r5, #0]
 800817a:	6869      	ldr	r1, [r5, #4]
 800817c:	68aa      	ldr	r2, [r5, #8]
 800817e:	68eb      	ldr	r3, [r5, #12]
 8008180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008182:	7c2b      	ldrb	r3, [r5, #16]
 8008184:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8008186:	4a68      	ldr	r2, [pc, #416]	@ (8008328 <loadMenuTexts+0xe80>)
 8008188:	4b68      	ldr	r3, [pc, #416]	@ (800832c <loadMenuTexts+0xe84>)
 800818a:	4614      	mov	r4, r2
 800818c:	461d      	mov	r5, r3
 800818e:	6828      	ldr	r0, [r5, #0]
 8008190:	6869      	ldr	r1, [r5, #4]
 8008192:	68aa      	ldr	r2, [r5, #8]
 8008194:	68eb      	ldr	r3, [r5, #12]
 8008196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008198:	7c2b      	ldrb	r3, [r5, #16]
 800819a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 800819c:	4a64      	ldr	r2, [pc, #400]	@ (8008330 <loadMenuTexts+0xe88>)
 800819e:	4b65      	ldr	r3, [pc, #404]	@ (8008334 <loadMenuTexts+0xe8c>)
 80081a0:	4614      	mov	r4, r2
 80081a2:	461d      	mov	r5, r3
 80081a4:	6828      	ldr	r0, [r5, #0]
 80081a6:	6869      	ldr	r1, [r5, #4]
 80081a8:	68aa      	ldr	r2, [r5, #8]
 80081aa:	68eb      	ldr	r3, [r5, #12]
 80081ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ae:	7c2b      	ldrb	r3, [r5, #16]
 80081b0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80081b2:	4a61      	ldr	r2, [pc, #388]	@ (8008338 <loadMenuTexts+0xe90>)
 80081b4:	4b61      	ldr	r3, [pc, #388]	@ (800833c <loadMenuTexts+0xe94>)
 80081b6:	4614      	mov	r4, r2
 80081b8:	461d      	mov	r5, r3
 80081ba:	6828      	ldr	r0, [r5, #0]
 80081bc:	6869      	ldr	r1, [r5, #4]
 80081be:	68aa      	ldr	r2, [r5, #8]
 80081c0:	68eb      	ldr	r3, [r5, #12]
 80081c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081c4:	7c2b      	ldrb	r3, [r5, #16]
 80081c6:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80081c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008340 <loadMenuTexts+0xe98>)
 80081ca:	4b5e      	ldr	r3, [pc, #376]	@ (8008344 <loadMenuTexts+0xe9c>)
 80081cc:	4614      	mov	r4, r2
 80081ce:	461d      	mov	r5, r3
 80081d0:	6828      	ldr	r0, [r5, #0]
 80081d2:	6869      	ldr	r1, [r5, #4]
 80081d4:	68aa      	ldr	r2, [r5, #8]
 80081d6:	68eb      	ldr	r3, [r5, #12]
 80081d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081da:	7c2b      	ldrb	r3, [r5, #16]
 80081dc:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80081de:	4a5a      	ldr	r2, [pc, #360]	@ (8008348 <loadMenuTexts+0xea0>)
 80081e0:	4b5a      	ldr	r3, [pc, #360]	@ (800834c <loadMenuTexts+0xea4>)
 80081e2:	4614      	mov	r4, r2
 80081e4:	461d      	mov	r5, r3
 80081e6:	6828      	ldr	r0, [r5, #0]
 80081e8:	6869      	ldr	r1, [r5, #4]
 80081ea:	68aa      	ldr	r2, [r5, #8]
 80081ec:	68eb      	ldr	r3, [r5, #12]
 80081ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f0:	7c2b      	ldrb	r3, [r5, #16]
 80081f2:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80081f4:	4a56      	ldr	r2, [pc, #344]	@ (8008350 <loadMenuTexts+0xea8>)
 80081f6:	4b57      	ldr	r3, [pc, #348]	@ (8008354 <loadMenuTexts+0xeac>)
 80081f8:	4614      	mov	r4, r2
 80081fa:	461d      	mov	r5, r3
 80081fc:	6828      	ldr	r0, [r5, #0]
 80081fe:	6869      	ldr	r1, [r5, #4]
 8008200:	68aa      	ldr	r2, [r5, #8]
 8008202:	68eb      	ldr	r3, [r5, #12]
 8008204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008206:	7c2b      	ldrb	r3, [r5, #16]
 8008208:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 800820a:	4a53      	ldr	r2, [pc, #332]	@ (8008358 <loadMenuTexts+0xeb0>)
 800820c:	4b53      	ldr	r3, [pc, #332]	@ (800835c <loadMenuTexts+0xeb4>)
 800820e:	4614      	mov	r4, r2
 8008210:	461d      	mov	r5, r3
 8008212:	6828      	ldr	r0, [r5, #0]
 8008214:	6869      	ldr	r1, [r5, #4]
 8008216:	68aa      	ldr	r2, [r5, #8]
 8008218:	68eb      	ldr	r3, [r5, #12]
 800821a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800821c:	7c2b      	ldrb	r3, [r5, #16]
 800821e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8008220:	4a4f      	ldr	r2, [pc, #316]	@ (8008360 <loadMenuTexts+0xeb8>)
 8008222:	4b50      	ldr	r3, [pc, #320]	@ (8008364 <loadMenuTexts+0xebc>)
 8008224:	4614      	mov	r4, r2
 8008226:	461d      	mov	r5, r3
 8008228:	6828      	ldr	r0, [r5, #0]
 800822a:	6869      	ldr	r1, [r5, #4]
 800822c:	68aa      	ldr	r2, [r5, #8]
 800822e:	68eb      	ldr	r3, [r5, #12]
 8008230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008232:	7c2b      	ldrb	r3, [r5, #16]
 8008234:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8008236:	4a4c      	ldr	r2, [pc, #304]	@ (8008368 <loadMenuTexts+0xec0>)
 8008238:	4b4c      	ldr	r3, [pc, #304]	@ (800836c <loadMenuTexts+0xec4>)
 800823a:	4614      	mov	r4, r2
 800823c:	461d      	mov	r5, r3
 800823e:	6828      	ldr	r0, [r5, #0]
 8008240:	6869      	ldr	r1, [r5, #4]
 8008242:	68aa      	ldr	r2, [r5, #8]
 8008244:	68eb      	ldr	r3, [r5, #12]
 8008246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008248:	7c2b      	ldrb	r3, [r5, #16]
 800824a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 800824c:	4a48      	ldr	r2, [pc, #288]	@ (8008370 <loadMenuTexts+0xec8>)
 800824e:	e091      	b.n	8008374 <loadMenuTexts+0xecc>
 8008250:	2000121c 	.word	0x2000121c
 8008254:	20000704 	.word	0x20000704
 8008258:	20001230 	.word	0x20001230
 800825c:	20000718 	.word	0x20000718
 8008260:	20001244 	.word	0x20001244
 8008264:	2000072c 	.word	0x2000072c
 8008268:	20001258 	.word	0x20001258
 800826c:	20000740 	.word	0x20000740
 8008270:	2000126c 	.word	0x2000126c
 8008274:	20000754 	.word	0x20000754
 8008278:	20001280 	.word	0x20001280
 800827c:	20000768 	.word	0x20000768
 8008280:	20001294 	.word	0x20001294
 8008284:	2000077c 	.word	0x2000077c
 8008288:	200012a8 	.word	0x200012a8
 800828c:	20000790 	.word	0x20000790
 8008290:	200012bc 	.word	0x200012bc
 8008294:	200007a4 	.word	0x200007a4
 8008298:	200012d0 	.word	0x200012d0
 800829c:	200007b8 	.word	0x200007b8
 80082a0:	200012e4 	.word	0x200012e4
 80082a4:	200007cc 	.word	0x200007cc
 80082a8:	200012f8 	.word	0x200012f8
 80082ac:	200007e0 	.word	0x200007e0
 80082b0:	2000130c 	.word	0x2000130c
 80082b4:	200007f4 	.word	0x200007f4
 80082b8:	20001320 	.word	0x20001320
 80082bc:	20000808 	.word	0x20000808
 80082c0:	20001334 	.word	0x20001334
 80082c4:	2000081c 	.word	0x2000081c
 80082c8:	20001348 	.word	0x20001348
 80082cc:	20000830 	.word	0x20000830
 80082d0:	2000135c 	.word	0x2000135c
 80082d4:	20000844 	.word	0x20000844
 80082d8:	20001370 	.word	0x20001370
 80082dc:	20000858 	.word	0x20000858
 80082e0:	20001384 	.word	0x20001384
 80082e4:	2000086c 	.word	0x2000086c
 80082e8:	20001398 	.word	0x20001398
 80082ec:	20000880 	.word	0x20000880
 80082f0:	200013ac 	.word	0x200013ac
 80082f4:	20000894 	.word	0x20000894
 80082f8:	200013c0 	.word	0x200013c0
 80082fc:	200008a8 	.word	0x200008a8
 8008300:	200013d4 	.word	0x200013d4
 8008304:	200008bc 	.word	0x200008bc
 8008308:	200013e8 	.word	0x200013e8
 800830c:	200008d0 	.word	0x200008d0
 8008310:	200013fc 	.word	0x200013fc
 8008314:	200008e4 	.word	0x200008e4
 8008318:	20001410 	.word	0x20001410
 800831c:	200008f8 	.word	0x200008f8
 8008320:	20001424 	.word	0x20001424
 8008324:	2000090c 	.word	0x2000090c
 8008328:	20001438 	.word	0x20001438
 800832c:	20000920 	.word	0x20000920
 8008330:	2000144c 	.word	0x2000144c
 8008334:	20000934 	.word	0x20000934
 8008338:	20001460 	.word	0x20001460
 800833c:	20000948 	.word	0x20000948
 8008340:	20001474 	.word	0x20001474
 8008344:	2000095c 	.word	0x2000095c
 8008348:	20001488 	.word	0x20001488
 800834c:	20000970 	.word	0x20000970
 8008350:	2000149c 	.word	0x2000149c
 8008354:	20000984 	.word	0x20000984
 8008358:	200014b0 	.word	0x200014b0
 800835c:	20000998 	.word	0x20000998
 8008360:	200014c4 	.word	0x200014c4
 8008364:	200009ac 	.word	0x200009ac
 8008368:	200014d8 	.word	0x200014d8
 800836c:	200009c0 	.word	0x200009c0
 8008370:	200014ec 	.word	0x200014ec
 8008374:	4bc7      	ldr	r3, [pc, #796]	@ (8008694 <loadMenuTexts+0x11ec>)
 8008376:	4614      	mov	r4, r2
 8008378:	461d      	mov	r5, r3
 800837a:	6828      	ldr	r0, [r5, #0]
 800837c:	6869      	ldr	r1, [r5, #4]
 800837e:	68aa      	ldr	r2, [r5, #8]
 8008380:	68eb      	ldr	r3, [r5, #12]
 8008382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008384:	7c2b      	ldrb	r3, [r5, #16]
 8008386:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008388:	4ac3      	ldr	r2, [pc, #780]	@ (8008698 <loadMenuTexts+0x11f0>)
 800838a:	4bc4      	ldr	r3, [pc, #784]	@ (800869c <loadMenuTexts+0x11f4>)
 800838c:	4614      	mov	r4, r2
 800838e:	461d      	mov	r5, r3
 8008390:	6828      	ldr	r0, [r5, #0]
 8008392:	6869      	ldr	r1, [r5, #4]
 8008394:	68aa      	ldr	r2, [r5, #8]
 8008396:	68eb      	ldr	r3, [r5, #12]
 8008398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800839a:	7c2b      	ldrb	r3, [r5, #16]
 800839c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800839e:	4ac0      	ldr	r2, [pc, #768]	@ (80086a0 <loadMenuTexts+0x11f8>)
 80083a0:	4bc0      	ldr	r3, [pc, #768]	@ (80086a4 <loadMenuTexts+0x11fc>)
 80083a2:	4614      	mov	r4, r2
 80083a4:	461d      	mov	r5, r3
 80083a6:	6828      	ldr	r0, [r5, #0]
 80083a8:	6869      	ldr	r1, [r5, #4]
 80083aa:	68aa      	ldr	r2, [r5, #8]
 80083ac:	68eb      	ldr	r3, [r5, #12]
 80083ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083b0:	7c2b      	ldrb	r3, [r5, #16]
 80083b2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 80083b4:	4abc      	ldr	r2, [pc, #752]	@ (80086a8 <loadMenuTexts+0x1200>)
 80083b6:	4bbd      	ldr	r3, [pc, #756]	@ (80086ac <loadMenuTexts+0x1204>)
 80083b8:	4614      	mov	r4, r2
 80083ba:	461d      	mov	r5, r3
 80083bc:	6828      	ldr	r0, [r5, #0]
 80083be:	6869      	ldr	r1, [r5, #4]
 80083c0:	68aa      	ldr	r2, [r5, #8]
 80083c2:	68eb      	ldr	r3, [r5, #12]
 80083c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c6:	7c2b      	ldrb	r3, [r5, #16]
 80083c8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 80083ca:	4ab9      	ldr	r2, [pc, #740]	@ (80086b0 <loadMenuTexts+0x1208>)
 80083cc:	4bb9      	ldr	r3, [pc, #740]	@ (80086b4 <loadMenuTexts+0x120c>)
 80083ce:	4614      	mov	r4, r2
 80083d0:	461d      	mov	r5, r3
 80083d2:	6828      	ldr	r0, [r5, #0]
 80083d4:	6869      	ldr	r1, [r5, #4]
 80083d6:	68aa      	ldr	r2, [r5, #8]
 80083d8:	68eb      	ldr	r3, [r5, #12]
 80083da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083dc:	7c2b      	ldrb	r3, [r5, #16]
 80083de:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80083e0:	4ab5      	ldr	r2, [pc, #724]	@ (80086b8 <loadMenuTexts+0x1210>)
 80083e2:	4bb6      	ldr	r3, [pc, #728]	@ (80086bc <loadMenuTexts+0x1214>)
 80083e4:	4614      	mov	r4, r2
 80083e6:	461d      	mov	r5, r3
 80083e8:	6828      	ldr	r0, [r5, #0]
 80083ea:	6869      	ldr	r1, [r5, #4]
 80083ec:	68aa      	ldr	r2, [r5, #8]
 80083ee:	68eb      	ldr	r3, [r5, #12]
 80083f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083f2:	7c2b      	ldrb	r3, [r5, #16]
 80083f4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80083f6:	4ab2      	ldr	r2, [pc, #712]	@ (80086c0 <loadMenuTexts+0x1218>)
 80083f8:	4bb2      	ldr	r3, [pc, #712]	@ (80086c4 <loadMenuTexts+0x121c>)
 80083fa:	4614      	mov	r4, r2
 80083fc:	461d      	mov	r5, r3
 80083fe:	6828      	ldr	r0, [r5, #0]
 8008400:	6869      	ldr	r1, [r5, #4]
 8008402:	68aa      	ldr	r2, [r5, #8]
 8008404:	68eb      	ldr	r3, [r5, #12]
 8008406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008408:	7c2b      	ldrb	r3, [r5, #16]
 800840a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 800840c:	4aae      	ldr	r2, [pc, #696]	@ (80086c8 <loadMenuTexts+0x1220>)
 800840e:	4baf      	ldr	r3, [pc, #700]	@ (80086cc <loadMenuTexts+0x1224>)
 8008410:	4614      	mov	r4, r2
 8008412:	461d      	mov	r5, r3
 8008414:	6828      	ldr	r0, [r5, #0]
 8008416:	6869      	ldr	r1, [r5, #4]
 8008418:	68aa      	ldr	r2, [r5, #8]
 800841a:	68eb      	ldr	r3, [r5, #12]
 800841c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841e:	7c2b      	ldrb	r3, [r5, #16]
 8008420:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8008422:	4aab      	ldr	r2, [pc, #684]	@ (80086d0 <loadMenuTexts+0x1228>)
 8008424:	4bab      	ldr	r3, [pc, #684]	@ (80086d4 <loadMenuTexts+0x122c>)
 8008426:	4614      	mov	r4, r2
 8008428:	461d      	mov	r5, r3
 800842a:	6828      	ldr	r0, [r5, #0]
 800842c:	6869      	ldr	r1, [r5, #4]
 800842e:	68aa      	ldr	r2, [r5, #8]
 8008430:	68eb      	ldr	r3, [r5, #12]
 8008432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008434:	7c2b      	ldrb	r3, [r5, #16]
 8008436:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8008438:	4aa7      	ldr	r2, [pc, #668]	@ (80086d8 <loadMenuTexts+0x1230>)
 800843a:	4ba8      	ldr	r3, [pc, #672]	@ (80086dc <loadMenuTexts+0x1234>)
 800843c:	4614      	mov	r4, r2
 800843e:	461d      	mov	r5, r3
 8008440:	6828      	ldr	r0, [r5, #0]
 8008442:	6869      	ldr	r1, [r5, #4]
 8008444:	68aa      	ldr	r2, [r5, #8]
 8008446:	68eb      	ldr	r3, [r5, #12]
 8008448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800844a:	7c2b      	ldrb	r3, [r5, #16]
 800844c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 800844e:	4aa4      	ldr	r2, [pc, #656]	@ (80086e0 <loadMenuTexts+0x1238>)
 8008450:	4ba4      	ldr	r3, [pc, #656]	@ (80086e4 <loadMenuTexts+0x123c>)
 8008452:	4614      	mov	r4, r2
 8008454:	461d      	mov	r5, r3
 8008456:	6828      	ldr	r0, [r5, #0]
 8008458:	6869      	ldr	r1, [r5, #4]
 800845a:	68aa      	ldr	r2, [r5, #8]
 800845c:	68eb      	ldr	r3, [r5, #12]
 800845e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008460:	7c2b      	ldrb	r3, [r5, #16]
 8008462:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008464:	4aa0      	ldr	r2, [pc, #640]	@ (80086e8 <loadMenuTexts+0x1240>)
 8008466:	4ba1      	ldr	r3, [pc, #644]	@ (80086ec <loadMenuTexts+0x1244>)
 8008468:	4614      	mov	r4, r2
 800846a:	461d      	mov	r5, r3
 800846c:	6828      	ldr	r0, [r5, #0]
 800846e:	6869      	ldr	r1, [r5, #4]
 8008470:	68aa      	ldr	r2, [r5, #8]
 8008472:	68eb      	ldr	r3, [r5, #12]
 8008474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008476:	7c2b      	ldrb	r3, [r5, #16]
 8008478:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 800847a:	4a9d      	ldr	r2, [pc, #628]	@ (80086f0 <loadMenuTexts+0x1248>)
 800847c:	4b9d      	ldr	r3, [pc, #628]	@ (80086f4 <loadMenuTexts+0x124c>)
 800847e:	4614      	mov	r4, r2
 8008480:	461d      	mov	r5, r3
 8008482:	6828      	ldr	r0, [r5, #0]
 8008484:	6869      	ldr	r1, [r5, #4]
 8008486:	68aa      	ldr	r2, [r5, #8]
 8008488:	68eb      	ldr	r3, [r5, #12]
 800848a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800848c:	7c2b      	ldrb	r3, [r5, #16]
 800848e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008490:	4a99      	ldr	r2, [pc, #612]	@ (80086f8 <loadMenuTexts+0x1250>)
 8008492:	4b9a      	ldr	r3, [pc, #616]	@ (80086fc <loadMenuTexts+0x1254>)
 8008494:	4614      	mov	r4, r2
 8008496:	461d      	mov	r5, r3
 8008498:	6828      	ldr	r0, [r5, #0]
 800849a:	6869      	ldr	r1, [r5, #4]
 800849c:	68aa      	ldr	r2, [r5, #8]
 800849e:	68eb      	ldr	r3, [r5, #12]
 80084a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084a2:	7c2b      	ldrb	r3, [r5, #16]
 80084a4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 80084a6:	4a96      	ldr	r2, [pc, #600]	@ (8008700 <loadMenuTexts+0x1258>)
 80084a8:	4b96      	ldr	r3, [pc, #600]	@ (8008704 <loadMenuTexts+0x125c>)
 80084aa:	4614      	mov	r4, r2
 80084ac:	461d      	mov	r5, r3
 80084ae:	6828      	ldr	r0, [r5, #0]
 80084b0:	6869      	ldr	r1, [r5, #4]
 80084b2:	68aa      	ldr	r2, [r5, #8]
 80084b4:	68eb      	ldr	r3, [r5, #12]
 80084b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b8:	7c2b      	ldrb	r3, [r5, #16]
 80084ba:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 80084bc:	4a92      	ldr	r2, [pc, #584]	@ (8008708 <loadMenuTexts+0x1260>)
 80084be:	4b93      	ldr	r3, [pc, #588]	@ (800870c <loadMenuTexts+0x1264>)
 80084c0:	4614      	mov	r4, r2
 80084c2:	461d      	mov	r5, r3
 80084c4:	6828      	ldr	r0, [r5, #0]
 80084c6:	6869      	ldr	r1, [r5, #4]
 80084c8:	68aa      	ldr	r2, [r5, #8]
 80084ca:	68eb      	ldr	r3, [r5, #12]
 80084cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ce:	7c2b      	ldrb	r3, [r5, #16]
 80084d0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 80084d2:	4a8f      	ldr	r2, [pc, #572]	@ (8008710 <loadMenuTexts+0x1268>)
 80084d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008714 <loadMenuTexts+0x126c>)
 80084d6:	4614      	mov	r4, r2
 80084d8:	461d      	mov	r5, r3
 80084da:	6828      	ldr	r0, [r5, #0]
 80084dc:	6869      	ldr	r1, [r5, #4]
 80084de:	68aa      	ldr	r2, [r5, #8]
 80084e0:	68eb      	ldr	r3, [r5, #12]
 80084e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084e4:	7c2b      	ldrb	r3, [r5, #16]
 80084e6:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 80084e8:	4a8b      	ldr	r2, [pc, #556]	@ (8008718 <loadMenuTexts+0x1270>)
 80084ea:	4b8c      	ldr	r3, [pc, #560]	@ (800871c <loadMenuTexts+0x1274>)
 80084ec:	4614      	mov	r4, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	6828      	ldr	r0, [r5, #0]
 80084f2:	6869      	ldr	r1, [r5, #4]
 80084f4:	68aa      	ldr	r2, [r5, #8]
 80084f6:	68eb      	ldr	r3, [r5, #12]
 80084f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fa:	7c2b      	ldrb	r3, [r5, #16]
 80084fc:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80084fe:	4a88      	ldr	r2, [pc, #544]	@ (8008720 <loadMenuTexts+0x1278>)
 8008500:	4b88      	ldr	r3, [pc, #544]	@ (8008724 <loadMenuTexts+0x127c>)
 8008502:	4614      	mov	r4, r2
 8008504:	461d      	mov	r5, r3
 8008506:	6828      	ldr	r0, [r5, #0]
 8008508:	6869      	ldr	r1, [r5, #4]
 800850a:	68aa      	ldr	r2, [r5, #8]
 800850c:	68eb      	ldr	r3, [r5, #12]
 800850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008510:	7c2b      	ldrb	r3, [r5, #16]
 8008512:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8008514:	4a84      	ldr	r2, [pc, #528]	@ (8008728 <loadMenuTexts+0x1280>)
 8008516:	4b85      	ldr	r3, [pc, #532]	@ (800872c <loadMenuTexts+0x1284>)
 8008518:	4614      	mov	r4, r2
 800851a:	461d      	mov	r5, r3
 800851c:	6828      	ldr	r0, [r5, #0]
 800851e:	6869      	ldr	r1, [r5, #4]
 8008520:	68aa      	ldr	r2, [r5, #8]
 8008522:	68eb      	ldr	r3, [r5, #12]
 8008524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008526:	7c2b      	ldrb	r3, [r5, #16]
 8008528:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 800852a:	4a81      	ldr	r2, [pc, #516]	@ (8008730 <loadMenuTexts+0x1288>)
 800852c:	4b81      	ldr	r3, [pc, #516]	@ (8008734 <loadMenuTexts+0x128c>)
 800852e:	4614      	mov	r4, r2
 8008530:	461d      	mov	r5, r3
 8008532:	6828      	ldr	r0, [r5, #0]
 8008534:	6869      	ldr	r1, [r5, #4]
 8008536:	68aa      	ldr	r2, [r5, #8]
 8008538:	68eb      	ldr	r3, [r5, #12]
 800853a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800853c:	7c2b      	ldrb	r3, [r5, #16]
 800853e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008540:	4a7d      	ldr	r2, [pc, #500]	@ (8008738 <loadMenuTexts+0x1290>)
 8008542:	4b7e      	ldr	r3, [pc, #504]	@ (800873c <loadMenuTexts+0x1294>)
 8008544:	4614      	mov	r4, r2
 8008546:	461d      	mov	r5, r3
 8008548:	6828      	ldr	r0, [r5, #0]
 800854a:	6869      	ldr	r1, [r5, #4]
 800854c:	68aa      	ldr	r2, [r5, #8]
 800854e:	68eb      	ldr	r3, [r5, #12]
 8008550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008552:	7c2b      	ldrb	r3, [r5, #16]
 8008554:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008556:	4a7a      	ldr	r2, [pc, #488]	@ (8008740 <loadMenuTexts+0x1298>)
 8008558:	4b7a      	ldr	r3, [pc, #488]	@ (8008744 <loadMenuTexts+0x129c>)
 800855a:	4614      	mov	r4, r2
 800855c:	461d      	mov	r5, r3
 800855e:	6828      	ldr	r0, [r5, #0]
 8008560:	6869      	ldr	r1, [r5, #4]
 8008562:	68aa      	ldr	r2, [r5, #8]
 8008564:	68eb      	ldr	r3, [r5, #12]
 8008566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008568:	7c2b      	ldrb	r3, [r5, #16]
 800856a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 800856c:	4a76      	ldr	r2, [pc, #472]	@ (8008748 <loadMenuTexts+0x12a0>)
 800856e:	4b77      	ldr	r3, [pc, #476]	@ (800874c <loadMenuTexts+0x12a4>)
 8008570:	4614      	mov	r4, r2
 8008572:	461d      	mov	r5, r3
 8008574:	6828      	ldr	r0, [r5, #0]
 8008576:	6869      	ldr	r1, [r5, #4]
 8008578:	68aa      	ldr	r2, [r5, #8]
 800857a:	68eb      	ldr	r3, [r5, #12]
 800857c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857e:	7c2b      	ldrb	r3, [r5, #16]
 8008580:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008582:	4a73      	ldr	r2, [pc, #460]	@ (8008750 <loadMenuTexts+0x12a8>)
 8008584:	4b73      	ldr	r3, [pc, #460]	@ (8008754 <loadMenuTexts+0x12ac>)
 8008586:	4614      	mov	r4, r2
 8008588:	461d      	mov	r5, r3
 800858a:	6828      	ldr	r0, [r5, #0]
 800858c:	6869      	ldr	r1, [r5, #4]
 800858e:	68aa      	ldr	r2, [r5, #8]
 8008590:	68eb      	ldr	r3, [r5, #12]
 8008592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008594:	7c2b      	ldrb	r3, [r5, #16]
 8008596:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008598:	4a6f      	ldr	r2, [pc, #444]	@ (8008758 <loadMenuTexts+0x12b0>)
 800859a:	4b70      	ldr	r3, [pc, #448]	@ (800875c <loadMenuTexts+0x12b4>)
 800859c:	4614      	mov	r4, r2
 800859e:	461d      	mov	r5, r3
 80085a0:	6828      	ldr	r0, [r5, #0]
 80085a2:	6869      	ldr	r1, [r5, #4]
 80085a4:	68aa      	ldr	r2, [r5, #8]
 80085a6:	68eb      	ldr	r3, [r5, #12]
 80085a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085aa:	7c2b      	ldrb	r3, [r5, #16]
 80085ac:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 80085ae:	4a6c      	ldr	r2, [pc, #432]	@ (8008760 <loadMenuTexts+0x12b8>)
 80085b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008764 <loadMenuTexts+0x12bc>)
 80085b2:	4614      	mov	r4, r2
 80085b4:	461d      	mov	r5, r3
 80085b6:	6828      	ldr	r0, [r5, #0]
 80085b8:	6869      	ldr	r1, [r5, #4]
 80085ba:	68aa      	ldr	r2, [r5, #8]
 80085bc:	68eb      	ldr	r3, [r5, #12]
 80085be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085c0:	7c2b      	ldrb	r3, [r5, #16]
 80085c2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 80085c4:	4a68      	ldr	r2, [pc, #416]	@ (8008768 <loadMenuTexts+0x12c0>)
 80085c6:	4b69      	ldr	r3, [pc, #420]	@ (800876c <loadMenuTexts+0x12c4>)
 80085c8:	4614      	mov	r4, r2
 80085ca:	461d      	mov	r5, r3
 80085cc:	6828      	ldr	r0, [r5, #0]
 80085ce:	6869      	ldr	r1, [r5, #4]
 80085d0:	68aa      	ldr	r2, [r5, #8]
 80085d2:	68eb      	ldr	r3, [r5, #12]
 80085d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085d6:	7c2b      	ldrb	r3, [r5, #16]
 80085d8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80085da:	4a65      	ldr	r2, [pc, #404]	@ (8008770 <loadMenuTexts+0x12c8>)
 80085dc:	4b65      	ldr	r3, [pc, #404]	@ (8008774 <loadMenuTexts+0x12cc>)
 80085de:	4614      	mov	r4, r2
 80085e0:	461d      	mov	r5, r3
 80085e2:	6828      	ldr	r0, [r5, #0]
 80085e4:	6869      	ldr	r1, [r5, #4]
 80085e6:	68aa      	ldr	r2, [r5, #8]
 80085e8:	68eb      	ldr	r3, [r5, #12]
 80085ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085ec:	7c2b      	ldrb	r3, [r5, #16]
 80085ee:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80085f0:	4a61      	ldr	r2, [pc, #388]	@ (8008778 <loadMenuTexts+0x12d0>)
 80085f2:	4b62      	ldr	r3, [pc, #392]	@ (800877c <loadMenuTexts+0x12d4>)
 80085f4:	4614      	mov	r4, r2
 80085f6:	461d      	mov	r5, r3
 80085f8:	6828      	ldr	r0, [r5, #0]
 80085fa:	6869      	ldr	r1, [r5, #4]
 80085fc:	68aa      	ldr	r2, [r5, #8]
 80085fe:	68eb      	ldr	r3, [r5, #12]
 8008600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008602:	7c2b      	ldrb	r3, [r5, #16]
 8008604:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8008606:	4a5e      	ldr	r2, [pc, #376]	@ (8008780 <loadMenuTexts+0x12d8>)
 8008608:	4b5e      	ldr	r3, [pc, #376]	@ (8008784 <loadMenuTexts+0x12dc>)
 800860a:	4614      	mov	r4, r2
 800860c:	461d      	mov	r5, r3
 800860e:	6828      	ldr	r0, [r5, #0]
 8008610:	6869      	ldr	r1, [r5, #4]
 8008612:	68aa      	ldr	r2, [r5, #8]
 8008614:	68eb      	ldr	r3, [r5, #12]
 8008616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008618:	7c2b      	ldrb	r3, [r5, #16]
 800861a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800861c:	4a5a      	ldr	r2, [pc, #360]	@ (8008788 <loadMenuTexts+0x12e0>)
 800861e:	4b5b      	ldr	r3, [pc, #364]	@ (800878c <loadMenuTexts+0x12e4>)
 8008620:	4614      	mov	r4, r2
 8008622:	461d      	mov	r5, r3
 8008624:	6828      	ldr	r0, [r5, #0]
 8008626:	6869      	ldr	r1, [r5, #4]
 8008628:	68aa      	ldr	r2, [r5, #8]
 800862a:	68eb      	ldr	r3, [r5, #12]
 800862c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800862e:	7c2b      	ldrb	r3, [r5, #16]
 8008630:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8008632:	4a57      	ldr	r2, [pc, #348]	@ (8008790 <loadMenuTexts+0x12e8>)
 8008634:	4b57      	ldr	r3, [pc, #348]	@ (8008794 <loadMenuTexts+0x12ec>)
 8008636:	4614      	mov	r4, r2
 8008638:	461d      	mov	r5, r3
 800863a:	6828      	ldr	r0, [r5, #0]
 800863c:	6869      	ldr	r1, [r5, #4]
 800863e:	68aa      	ldr	r2, [r5, #8]
 8008640:	68eb      	ldr	r3, [r5, #12]
 8008642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008644:	7c2b      	ldrb	r3, [r5, #16]
 8008646:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008648:	4a53      	ldr	r2, [pc, #332]	@ (8008798 <loadMenuTexts+0x12f0>)
 800864a:	4b54      	ldr	r3, [pc, #336]	@ (800879c <loadMenuTexts+0x12f4>)
 800864c:	4614      	mov	r4, r2
 800864e:	461d      	mov	r5, r3
 8008650:	6828      	ldr	r0, [r5, #0]
 8008652:	6869      	ldr	r1, [r5, #4]
 8008654:	68aa      	ldr	r2, [r5, #8]
 8008656:	68eb      	ldr	r3, [r5, #12]
 8008658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800865a:	7c2b      	ldrb	r3, [r5, #16]
 800865c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800865e:	4a50      	ldr	r2, [pc, #320]	@ (80087a0 <loadMenuTexts+0x12f8>)
 8008660:	4b50      	ldr	r3, [pc, #320]	@ (80087a4 <loadMenuTexts+0x12fc>)
 8008662:	4614      	mov	r4, r2
 8008664:	461d      	mov	r5, r3
 8008666:	6828      	ldr	r0, [r5, #0]
 8008668:	6869      	ldr	r1, [r5, #4]
 800866a:	68aa      	ldr	r2, [r5, #8]
 800866c:	68eb      	ldr	r3, [r5, #12]
 800866e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008670:	7c2b      	ldrb	r3, [r5, #16]
 8008672:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8008674:	4a4c      	ldr	r2, [pc, #304]	@ (80087a8 <loadMenuTexts+0x1300>)
 8008676:	4b4d      	ldr	r3, [pc, #308]	@ (80087ac <loadMenuTexts+0x1304>)
 8008678:	4614      	mov	r4, r2
 800867a:	461d      	mov	r5, r3
 800867c:	6828      	ldr	r0, [r5, #0]
 800867e:	6869      	ldr	r1, [r5, #4]
 8008680:	68aa      	ldr	r2, [r5, #8]
 8008682:	68eb      	ldr	r3, [r5, #12]
 8008684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008686:	7c2b      	ldrb	r3, [r5, #16]
 8008688:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800868a:	4a49      	ldr	r2, [pc, #292]	@ (80087b0 <loadMenuTexts+0x1308>)
 800868c:	4b49      	ldr	r3, [pc, #292]	@ (80087b4 <loadMenuTexts+0x130c>)
 800868e:	4614      	mov	r4, r2
 8008690:	461d      	mov	r5, r3
 8008692:	e091      	b.n	80087b8 <loadMenuTexts+0x1310>
 8008694:	200009d4 	.word	0x200009d4
 8008698:	20001500 	.word	0x20001500
 800869c:	200009e8 	.word	0x200009e8
 80086a0:	20001514 	.word	0x20001514
 80086a4:	200009fc 	.word	0x200009fc
 80086a8:	20001528 	.word	0x20001528
 80086ac:	20000a10 	.word	0x20000a10
 80086b0:	2000153c 	.word	0x2000153c
 80086b4:	20000a24 	.word	0x20000a24
 80086b8:	20001550 	.word	0x20001550
 80086bc:	20000a38 	.word	0x20000a38
 80086c0:	20001564 	.word	0x20001564
 80086c4:	20000a4c 	.word	0x20000a4c
 80086c8:	20001578 	.word	0x20001578
 80086cc:	20000a60 	.word	0x20000a60
 80086d0:	2000158c 	.word	0x2000158c
 80086d4:	20000a74 	.word	0x20000a74
 80086d8:	200015a0 	.word	0x200015a0
 80086dc:	20000a88 	.word	0x20000a88
 80086e0:	200015b4 	.word	0x200015b4
 80086e4:	20000a9c 	.word	0x20000a9c
 80086e8:	200015c8 	.word	0x200015c8
 80086ec:	20000ab0 	.word	0x20000ab0
 80086f0:	200015dc 	.word	0x200015dc
 80086f4:	20000ac4 	.word	0x20000ac4
 80086f8:	200015f0 	.word	0x200015f0
 80086fc:	20000ad8 	.word	0x20000ad8
 8008700:	20001604 	.word	0x20001604
 8008704:	20000aec 	.word	0x20000aec
 8008708:	20001618 	.word	0x20001618
 800870c:	20000b00 	.word	0x20000b00
 8008710:	2000162c 	.word	0x2000162c
 8008714:	20000b14 	.word	0x20000b14
 8008718:	20001640 	.word	0x20001640
 800871c:	20000b28 	.word	0x20000b28
 8008720:	20001654 	.word	0x20001654
 8008724:	20000b3c 	.word	0x20000b3c
 8008728:	20001668 	.word	0x20001668
 800872c:	20000b50 	.word	0x20000b50
 8008730:	2000167c 	.word	0x2000167c
 8008734:	20000b64 	.word	0x20000b64
 8008738:	20001690 	.word	0x20001690
 800873c:	20000b78 	.word	0x20000b78
 8008740:	200016a4 	.word	0x200016a4
 8008744:	20000b8c 	.word	0x20000b8c
 8008748:	200016b8 	.word	0x200016b8
 800874c:	20000ba0 	.word	0x20000ba0
 8008750:	200016cc 	.word	0x200016cc
 8008754:	20000bb4 	.word	0x20000bb4
 8008758:	200016e0 	.word	0x200016e0
 800875c:	20000bc8 	.word	0x20000bc8
 8008760:	200016f4 	.word	0x200016f4
 8008764:	20000bdc 	.word	0x20000bdc
 8008768:	20001708 	.word	0x20001708
 800876c:	20000bf0 	.word	0x20000bf0
 8008770:	2000171c 	.word	0x2000171c
 8008774:	20000c04 	.word	0x20000c04
 8008778:	20001730 	.word	0x20001730
 800877c:	20000c18 	.word	0x20000c18
 8008780:	20001744 	.word	0x20001744
 8008784:	20000c2c 	.word	0x20000c2c
 8008788:	20001758 	.word	0x20001758
 800878c:	20000c40 	.word	0x20000c40
 8008790:	2000176c 	.word	0x2000176c
 8008794:	20000c54 	.word	0x20000c54
 8008798:	20001780 	.word	0x20001780
 800879c:	20000c68 	.word	0x20000c68
 80087a0:	20001794 	.word	0x20001794
 80087a4:	20000cf4 	.word	0x20000cf4
 80087a8:	200017a8 	.word	0x200017a8
 80087ac:	20000d08 	.word	0x20000d08
 80087b0:	200017bc 	.word	0x200017bc
 80087b4:	20000ccc 	.word	0x20000ccc
 80087b8:	6828      	ldr	r0, [r5, #0]
 80087ba:	6869      	ldr	r1, [r5, #4]
 80087bc:	68aa      	ldr	r2, [r5, #8]
 80087be:	68eb      	ldr	r3, [r5, #12]
 80087c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c2:	7c2b      	ldrb	r3, [r5, #16]
 80087c4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80087c6:	4a5b      	ldr	r2, [pc, #364]	@ (8008934 <loadMenuTexts+0x148c>)
 80087c8:	4b5b      	ldr	r3, [pc, #364]	@ (8008938 <loadMenuTexts+0x1490>)
 80087ca:	4614      	mov	r4, r2
 80087cc:	461d      	mov	r5, r3
 80087ce:	6828      	ldr	r0, [r5, #0]
 80087d0:	6869      	ldr	r1, [r5, #4]
 80087d2:	68aa      	ldr	r2, [r5, #8]
 80087d4:	68eb      	ldr	r3, [r5, #12]
 80087d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d8:	7c2b      	ldrb	r3, [r5, #16]
 80087da:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80087dc:	4a57      	ldr	r2, [pc, #348]	@ (800893c <loadMenuTexts+0x1494>)
 80087de:	4b58      	ldr	r3, [pc, #352]	@ (8008940 <loadMenuTexts+0x1498>)
 80087e0:	4614      	mov	r4, r2
 80087e2:	461d      	mov	r5, r3
 80087e4:	6828      	ldr	r0, [r5, #0]
 80087e6:	6869      	ldr	r1, [r5, #4]
 80087e8:	68aa      	ldr	r2, [r5, #8]
 80087ea:	68eb      	ldr	r3, [r5, #12]
 80087ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ee:	7c2b      	ldrb	r3, [r5, #16]
 80087f0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80087f2:	4a54      	ldr	r2, [pc, #336]	@ (8008944 <loadMenuTexts+0x149c>)
 80087f4:	4b54      	ldr	r3, [pc, #336]	@ (8008948 <loadMenuTexts+0x14a0>)
 80087f6:	4614      	mov	r4, r2
 80087f8:	461d      	mov	r5, r3
 80087fa:	6828      	ldr	r0, [r5, #0]
 80087fc:	6869      	ldr	r1, [r5, #4]
 80087fe:	68aa      	ldr	r2, [r5, #8]
 8008800:	68eb      	ldr	r3, [r5, #12]
 8008802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008804:	7c2b      	ldrb	r3, [r5, #16]
 8008806:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8008808:	4a50      	ldr	r2, [pc, #320]	@ (800894c <loadMenuTexts+0x14a4>)
 800880a:	4b51      	ldr	r3, [pc, #324]	@ (8008950 <loadMenuTexts+0x14a8>)
 800880c:	4614      	mov	r4, r2
 800880e:	461d      	mov	r5, r3
 8008810:	6828      	ldr	r0, [r5, #0]
 8008812:	6869      	ldr	r1, [r5, #4]
 8008814:	68aa      	ldr	r2, [r5, #8]
 8008816:	68eb      	ldr	r3, [r5, #12]
 8008818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800881a:	7c2b      	ldrb	r3, [r5, #16]
 800881c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800881e:	4a4d      	ldr	r2, [pc, #308]	@ (8008954 <loadMenuTexts+0x14ac>)
 8008820:	4b4d      	ldr	r3, [pc, #308]	@ (8008958 <loadMenuTexts+0x14b0>)
 8008822:	4614      	mov	r4, r2
 8008824:	461d      	mov	r5, r3
 8008826:	6828      	ldr	r0, [r5, #0]
 8008828:	6869      	ldr	r1, [r5, #4]
 800882a:	68aa      	ldr	r2, [r5, #8]
 800882c:	68eb      	ldr	r3, [r5, #12]
 800882e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008830:	7c2b      	ldrb	r3, [r5, #16]
 8008832:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8008834:	4a49      	ldr	r2, [pc, #292]	@ (800895c <loadMenuTexts+0x14b4>)
 8008836:	4b4a      	ldr	r3, [pc, #296]	@ (8008960 <loadMenuTexts+0x14b8>)
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	6828      	ldr	r0, [r5, #0]
 800883e:	6869      	ldr	r1, [r5, #4]
 8008840:	68aa      	ldr	r2, [r5, #8]
 8008842:	68eb      	ldr	r3, [r5, #12]
 8008844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008846:	7c2b      	ldrb	r3, [r5, #16]
 8008848:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800884a:	4a46      	ldr	r2, [pc, #280]	@ (8008964 <loadMenuTexts+0x14bc>)
 800884c:	4b46      	ldr	r3, [pc, #280]	@ (8008968 <loadMenuTexts+0x14c0>)
 800884e:	4614      	mov	r4, r2
 8008850:	461d      	mov	r5, r3
 8008852:	6828      	ldr	r0, [r5, #0]
 8008854:	6869      	ldr	r1, [r5, #4]
 8008856:	68aa      	ldr	r2, [r5, #8]
 8008858:	68eb      	ldr	r3, [r5, #12]
 800885a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800885c:	7c2b      	ldrb	r3, [r5, #16]
 800885e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008860:	4a42      	ldr	r2, [pc, #264]	@ (800896c <loadMenuTexts+0x14c4>)
 8008862:	4b43      	ldr	r3, [pc, #268]	@ (8008970 <loadMenuTexts+0x14c8>)
 8008864:	4614      	mov	r4, r2
 8008866:	461d      	mov	r5, r3
 8008868:	6828      	ldr	r0, [r5, #0]
 800886a:	6869      	ldr	r1, [r5, #4]
 800886c:	68aa      	ldr	r2, [r5, #8]
 800886e:	68eb      	ldr	r3, [r5, #12]
 8008870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008872:	7c2b      	ldrb	r3, [r5, #16]
 8008874:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008876:	4a3f      	ldr	r2, [pc, #252]	@ (8008974 <loadMenuTexts+0x14cc>)
 8008878:	4b3f      	ldr	r3, [pc, #252]	@ (8008978 <loadMenuTexts+0x14d0>)
 800887a:	4614      	mov	r4, r2
 800887c:	461d      	mov	r5, r3
 800887e:	6828      	ldr	r0, [r5, #0]
 8008880:	6869      	ldr	r1, [r5, #4]
 8008882:	68aa      	ldr	r2, [r5, #8]
 8008884:	68eb      	ldr	r3, [r5, #12]
 8008886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008888:	7c2b      	ldrb	r3, [r5, #16]
 800888a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 800888c:	4a3b      	ldr	r2, [pc, #236]	@ (800897c <loadMenuTexts+0x14d4>)
 800888e:	4b3c      	ldr	r3, [pc, #240]	@ (8008980 <loadMenuTexts+0x14d8>)
 8008890:	4614      	mov	r4, r2
 8008892:	461d      	mov	r5, r3
 8008894:	6828      	ldr	r0, [r5, #0]
 8008896:	6869      	ldr	r1, [r5, #4]
 8008898:	68aa      	ldr	r2, [r5, #8]
 800889a:	68eb      	ldr	r3, [r5, #12]
 800889c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889e:	7c2b      	ldrb	r3, [r5, #16]
 80088a0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80088a2:	4a38      	ldr	r2, [pc, #224]	@ (8008984 <loadMenuTexts+0x14dc>)
 80088a4:	4b38      	ldr	r3, [pc, #224]	@ (8008988 <loadMenuTexts+0x14e0>)
 80088a6:	4614      	mov	r4, r2
 80088a8:	461d      	mov	r5, r3
 80088aa:	6828      	ldr	r0, [r5, #0]
 80088ac:	6869      	ldr	r1, [r5, #4]
 80088ae:	68aa      	ldr	r2, [r5, #8]
 80088b0:	68eb      	ldr	r3, [r5, #12]
 80088b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b4:	7c2b      	ldrb	r3, [r5, #16]
 80088b6:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80088b8:	4a34      	ldr	r2, [pc, #208]	@ (800898c <loadMenuTexts+0x14e4>)
 80088ba:	4b35      	ldr	r3, [pc, #212]	@ (8008990 <loadMenuTexts+0x14e8>)
 80088bc:	4614      	mov	r4, r2
 80088be:	461d      	mov	r5, r3
 80088c0:	6828      	ldr	r0, [r5, #0]
 80088c2:	6869      	ldr	r1, [r5, #4]
 80088c4:	68aa      	ldr	r2, [r5, #8]
 80088c6:	68eb      	ldr	r3, [r5, #12]
 80088c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ca:	7c2b      	ldrb	r3, [r5, #16]
 80088cc:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80088ce:	4a31      	ldr	r2, [pc, #196]	@ (8008994 <loadMenuTexts+0x14ec>)
 80088d0:	4b31      	ldr	r3, [pc, #196]	@ (8008998 <loadMenuTexts+0x14f0>)
 80088d2:	4614      	mov	r4, r2
 80088d4:	461d      	mov	r5, r3
 80088d6:	6828      	ldr	r0, [r5, #0]
 80088d8:	6869      	ldr	r1, [r5, #4]
 80088da:	68aa      	ldr	r2, [r5, #8]
 80088dc:	68eb      	ldr	r3, [r5, #12]
 80088de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e0:	7c2b      	ldrb	r3, [r5, #16]
 80088e2:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80088e4:	4a2d      	ldr	r2, [pc, #180]	@ (800899c <loadMenuTexts+0x14f4>)
 80088e6:	4b2e      	ldr	r3, [pc, #184]	@ (80089a0 <loadMenuTexts+0x14f8>)
 80088e8:	4614      	mov	r4, r2
 80088ea:	461d      	mov	r5, r3
 80088ec:	6828      	ldr	r0, [r5, #0]
 80088ee:	6869      	ldr	r1, [r5, #4]
 80088f0:	68aa      	ldr	r2, [r5, #8]
 80088f2:	68eb      	ldr	r3, [r5, #12]
 80088f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f6:	7c2b      	ldrb	r3, [r5, #16]
 80088f8:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80088fa:	4a2a      	ldr	r2, [pc, #168]	@ (80089a4 <loadMenuTexts+0x14fc>)
 80088fc:	4b2a      	ldr	r3, [pc, #168]	@ (80089a8 <loadMenuTexts+0x1500>)
 80088fe:	4614      	mov	r4, r2
 8008900:	461d      	mov	r5, r3
 8008902:	6828      	ldr	r0, [r5, #0]
 8008904:	6869      	ldr	r1, [r5, #4]
 8008906:	68aa      	ldr	r2, [r5, #8]
 8008908:	68eb      	ldr	r3, [r5, #12]
 800890a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800890c:	7c2b      	ldrb	r3, [r5, #16]
 800890e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8008910:	4a26      	ldr	r2, [pc, #152]	@ (80089ac <loadMenuTexts+0x1504>)
 8008912:	4b27      	ldr	r3, [pc, #156]	@ (80089b0 <loadMenuTexts+0x1508>)
 8008914:	4614      	mov	r4, r2
 8008916:	461d      	mov	r5, r3
 8008918:	6828      	ldr	r0, [r5, #0]
 800891a:	6869      	ldr	r1, [r5, #4]
 800891c:	68aa      	ldr	r2, [r5, #8]
 800891e:	68eb      	ldr	r3, [r5, #12]
 8008920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008922:	7c2b      	ldrb	r3, [r5, #16]
 8008924:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8008926:	f000 f845 	bl	80089b4 <menuVariableFinisher>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bdb0      	pop	{r4, r5, r7, pc}
 8008932:	bf00      	nop
 8008934:	200017d0 	.word	0x200017d0
 8008938:	20000ce0 	.word	0x20000ce0
 800893c:	200017e4 	.word	0x200017e4
 8008940:	20000d44 	.word	0x20000d44
 8008944:	200017f8 	.word	0x200017f8
 8008948:	20000d58 	.word	0x20000d58
 800894c:	2000180c 	.word	0x2000180c
 8008950:	20000d94 	.word	0x20000d94
 8008954:	20001820 	.word	0x20001820
 8008958:	20000da8 	.word	0x20000da8
 800895c:	20001834 	.word	0x20001834
 8008960:	20000de4 	.word	0x20000de4
 8008964:	20001848 	.word	0x20001848
 8008968:	20000df8 	.word	0x20000df8
 800896c:	2000185c 	.word	0x2000185c
 8008970:	20000e20 	.word	0x20000e20
 8008974:	20001870 	.word	0x20001870
 8008978:	20000e48 	.word	0x20000e48
 800897c:	20001884 	.word	0x20001884
 8008980:	20000e70 	.word	0x20000e70
 8008984:	20001898 	.word	0x20001898
 8008988:	20000e98 	.word	0x20000e98
 800898c:	200018ac 	.word	0x200018ac
 8008990:	20000ec0 	.word	0x20000ec0
 8008994:	200018c0 	.word	0x200018c0
 8008998:	20000ee8 	.word	0x20000ee8
 800899c:	200018d4 	.word	0x200018d4
 80089a0:	20000f10 	.word	0x20000f10
 80089a4:	200018e8 	.word	0x200018e8
 80089a8:	20000f38 	.word	0x20000f38
 80089ac:	200018fc 	.word	0x200018fc
 80089b0:	20000f60 	.word	0x20000f60

080089b4 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80089b8:	4b99      	ldr	r3, [pc, #612]	@ (8008c20 <menuVariableFinisher+0x26c>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80089be:	4b99      	ldr	r3, [pc, #612]	@ (8008c24 <menuVariableFinisher+0x270>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80089c4:	4b98      	ldr	r3, [pc, #608]	@ (8008c28 <menuVariableFinisher+0x274>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80089ca:	4b98      	ldr	r3, [pc, #608]	@ (8008c2c <menuVariableFinisher+0x278>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80089d0:	4b97      	ldr	r3, [pc, #604]	@ (8008c30 <menuVariableFinisher+0x27c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80089d6:	4b97      	ldr	r3, [pc, #604]	@ (8008c34 <menuVariableFinisher+0x280>)
 80089d8:	2200      	movs	r2, #0
 80089da:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80089dc:	4b96      	ldr	r3, [pc, #600]	@ (8008c38 <menuVariableFinisher+0x284>)
 80089de:	2200      	movs	r2, #0
 80089e0:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80089e2:	4b96      	ldr	r3, [pc, #600]	@ (8008c3c <menuVariableFinisher+0x288>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80089e8:	4b95      	ldr	r3, [pc, #596]	@ (8008c40 <menuVariableFinisher+0x28c>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80089ee:	4b95      	ldr	r3, [pc, #596]	@ (8008c44 <menuVariableFinisher+0x290>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80089f4:	4b94      	ldr	r3, [pc, #592]	@ (8008c48 <menuVariableFinisher+0x294>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80089fa:	4b94      	ldr	r3, [pc, #592]	@ (8008c4c <menuVariableFinisher+0x298>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8008a00:	4b93      	ldr	r3, [pc, #588]	@ (8008c50 <menuVariableFinisher+0x29c>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8008a06:	4b93      	ldr	r3, [pc, #588]	@ (8008c54 <menuVariableFinisher+0x2a0>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8008a0c:	4b92      	ldr	r3, [pc, #584]	@ (8008c58 <menuVariableFinisher+0x2a4>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8008a12:	4b92      	ldr	r3, [pc, #584]	@ (8008c5c <menuVariableFinisher+0x2a8>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8008a18:	4b91      	ldr	r3, [pc, #580]	@ (8008c60 <menuVariableFinisher+0x2ac>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8008a1e:	4b91      	ldr	r3, [pc, #580]	@ (8008c64 <menuVariableFinisher+0x2b0>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8008a24:	4b90      	ldr	r3, [pc, #576]	@ (8008c68 <menuVariableFinisher+0x2b4>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8008a2a:	4b90      	ldr	r3, [pc, #576]	@ (8008c6c <menuVariableFinisher+0x2b8>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8008a30:	4b8f      	ldr	r3, [pc, #572]	@ (8008c70 <menuVariableFinisher+0x2bc>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8008a36:	4b8f      	ldr	r3, [pc, #572]	@ (8008c74 <menuVariableFinisher+0x2c0>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8008c78 <menuVariableFinisher+0x2c4>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8008a42:	4b8e      	ldr	r3, [pc, #568]	@ (8008c7c <menuVariableFinisher+0x2c8>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8008a48:	4b8d      	ldr	r3, [pc, #564]	@ (8008c80 <menuVariableFinisher+0x2cc>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8008a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c84 <menuVariableFinisher+0x2d0>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008a54:	4b8c      	ldr	r3, [pc, #560]	@ (8008c88 <menuVariableFinisher+0x2d4>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8008a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8008c8c <menuVariableFinisher+0x2d8>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8008a60:	4b8b      	ldr	r3, [pc, #556]	@ (8008c90 <menuVariableFinisher+0x2dc>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8008a66:	4b8b      	ldr	r3, [pc, #556]	@ (8008c94 <menuVariableFinisher+0x2e0>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8008c98 <menuVariableFinisher+0x2e4>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8008a72:	4b8a      	ldr	r3, [pc, #552]	@ (8008c9c <menuVariableFinisher+0x2e8>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8008a78:	4b89      	ldr	r3, [pc, #548]	@ (8008ca0 <menuVariableFinisher+0x2ec>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8008a7e:	4b89      	ldr	r3, [pc, #548]	@ (8008ca4 <menuVariableFinisher+0x2f0>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008a84:	4b88      	ldr	r3, [pc, #544]	@ (8008ca8 <menuVariableFinisher+0x2f4>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8008a8a:	4b88      	ldr	r3, [pc, #544]	@ (8008cac <menuVariableFinisher+0x2f8>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008a90:	4b87      	ldr	r3, [pc, #540]	@ (8008cb0 <menuVariableFinisher+0x2fc>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8008a96:	4b87      	ldr	r3, [pc, #540]	@ (8008cb4 <menuVariableFinisher+0x300>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008a9c:	4b86      	ldr	r3, [pc, #536]	@ (8008cb8 <menuVariableFinisher+0x304>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8008aa2:	4b86      	ldr	r3, [pc, #536]	@ (8008cbc <menuVariableFinisher+0x308>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8008aa8:	4b85      	ldr	r3, [pc, #532]	@ (8008cc0 <menuVariableFinisher+0x30c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8008aae:	4b85      	ldr	r3, [pc, #532]	@ (8008cc4 <menuVariableFinisher+0x310>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8008ab4:	4b84      	ldr	r3, [pc, #528]	@ (8008cc8 <menuVariableFinisher+0x314>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8008aba:	4b84      	ldr	r3, [pc, #528]	@ (8008ccc <menuVariableFinisher+0x318>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8008ac0:	4b83      	ldr	r3, [pc, #524]	@ (8008cd0 <menuVariableFinisher+0x31c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8008ac6:	4b83      	ldr	r3, [pc, #524]	@ (8008cd4 <menuVariableFinisher+0x320>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8008acc:	4b82      	ldr	r3, [pc, #520]	@ (8008cd8 <menuVariableFinisher+0x324>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8008ad2:	4b82      	ldr	r3, [pc, #520]	@ (8008cdc <menuVariableFinisher+0x328>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8008ad8:	4b81      	ldr	r3, [pc, #516]	@ (8008ce0 <menuVariableFinisher+0x32c>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8008ade:	4b81      	ldr	r3, [pc, #516]	@ (8008ce4 <menuVariableFinisher+0x330>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8008ae4:	4b80      	ldr	r3, [pc, #512]	@ (8008ce8 <menuVariableFinisher+0x334>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8008aea:	4b80      	ldr	r3, [pc, #512]	@ (8008cec <menuVariableFinisher+0x338>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8008af0:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf0 <menuVariableFinisher+0x33c>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8008af6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf4 <menuVariableFinisher+0x340>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8008afc:	4b7e      	ldr	r3, [pc, #504]	@ (8008cf8 <menuVariableFinisher+0x344>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8008b02:	4b7e      	ldr	r3, [pc, #504]	@ (8008cfc <menuVariableFinisher+0x348>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8008b08:	4b7d      	ldr	r3, [pc, #500]	@ (8008d00 <menuVariableFinisher+0x34c>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8008b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8008d04 <menuVariableFinisher+0x350>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8008b14:	4b7c      	ldr	r3, [pc, #496]	@ (8008d08 <menuVariableFinisher+0x354>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8008b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8008d0c <menuVariableFinisher+0x358>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8008b20:	4b7b      	ldr	r3, [pc, #492]	@ (8008d10 <menuVariableFinisher+0x35c>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8008b26:	4b7b      	ldr	r3, [pc, #492]	@ (8008d14 <menuVariableFinisher+0x360>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8008b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8008d18 <menuVariableFinisher+0x364>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8008b32:	4b7a      	ldr	r3, [pc, #488]	@ (8008d1c <menuVariableFinisher+0x368>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8008b38:	4b79      	ldr	r3, [pc, #484]	@ (8008d20 <menuVariableFinisher+0x36c>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8008b3e:	4b79      	ldr	r3, [pc, #484]	@ (8008d24 <menuVariableFinisher+0x370>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8008b44:	4b78      	ldr	r3, [pc, #480]	@ (8008d28 <menuVariableFinisher+0x374>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8008b4a:	4b78      	ldr	r3, [pc, #480]	@ (8008d2c <menuVariableFinisher+0x378>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008b50:	4b77      	ldr	r3, [pc, #476]	@ (8008d30 <menuVariableFinisher+0x37c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8008b56:	4b77      	ldr	r3, [pc, #476]	@ (8008d34 <menuVariableFinisher+0x380>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008b5c:	4b76      	ldr	r3, [pc, #472]	@ (8008d38 <menuVariableFinisher+0x384>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008b62:	4b76      	ldr	r3, [pc, #472]	@ (8008d3c <menuVariableFinisher+0x388>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8008b68:	4b75      	ldr	r3, [pc, #468]	@ (8008d40 <menuVariableFinisher+0x38c>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008b6e:	4b75      	ldr	r3, [pc, #468]	@ (8008d44 <menuVariableFinisher+0x390>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008b74:	4b74      	ldr	r3, [pc, #464]	@ (8008d48 <menuVariableFinisher+0x394>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8008b7a:	4b74      	ldr	r3, [pc, #464]	@ (8008d4c <menuVariableFinisher+0x398>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008b80:	4b73      	ldr	r3, [pc, #460]	@ (8008d50 <menuVariableFinisher+0x39c>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8008b86:	4b73      	ldr	r3, [pc, #460]	@ (8008d54 <menuVariableFinisher+0x3a0>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008b8c:	4b72      	ldr	r3, [pc, #456]	@ (8008d58 <menuVariableFinisher+0x3a4>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008b92:	4b72      	ldr	r3, [pc, #456]	@ (8008d5c <menuVariableFinisher+0x3a8>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8008b98:	4b71      	ldr	r3, [pc, #452]	@ (8008d60 <menuVariableFinisher+0x3ac>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008b9e:	4b71      	ldr	r3, [pc, #452]	@ (8008d64 <menuVariableFinisher+0x3b0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8008ba4:	4b70      	ldr	r3, [pc, #448]	@ (8008d68 <menuVariableFinisher+0x3b4>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8008baa:	4b70      	ldr	r3, [pc, #448]	@ (8008d6c <menuVariableFinisher+0x3b8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8008bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8008d70 <menuVariableFinisher+0x3bc>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8008bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8008d74 <menuVariableFinisher+0x3c0>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8008bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8008d78 <menuVariableFinisher+0x3c4>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8008bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8008d7c <menuVariableFinisher+0x3c8>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8008bc8:	4b6d      	ldr	r3, [pc, #436]	@ (8008d80 <menuVariableFinisher+0x3cc>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8008bce:	4b6d      	ldr	r3, [pc, #436]	@ (8008d84 <menuVariableFinisher+0x3d0>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8008bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8008d88 <menuVariableFinisher+0x3d4>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8008bda:	4b6c      	ldr	r3, [pc, #432]	@ (8008d8c <menuVariableFinisher+0x3d8>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008be0:	4b6b      	ldr	r3, [pc, #428]	@ (8008d90 <menuVariableFinisher+0x3dc>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8008be6:	4b6b      	ldr	r3, [pc, #428]	@ (8008d94 <menuVariableFinisher+0x3e0>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008bec:	4b6a      	ldr	r3, [pc, #424]	@ (8008d98 <menuVariableFinisher+0x3e4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8008d9c <menuVariableFinisher+0x3e8>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008bf8:	4b69      	ldr	r3, [pc, #420]	@ (8008da0 <menuVariableFinisher+0x3ec>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8008bfe:	4b69      	ldr	r3, [pc, #420]	@ (8008da4 <menuVariableFinisher+0x3f0>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8008c04:	4b68      	ldr	r3, [pc, #416]	@ (8008da8 <menuVariableFinisher+0x3f4>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8008c0a:	4b68      	ldr	r3, [pc, #416]	@ (8008dac <menuVariableFinisher+0x3f8>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8008c10:	4b67      	ldr	r3, [pc, #412]	@ (8008db0 <menuVariableFinisher+0x3fc>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	741a      	strb	r2, [r3, #16]
}
 8008c16:	bf00      	nop
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	2000009c 	.word	0x2000009c
 8008c24:	200000b0 	.word	0x200000b0
 8008c28:	200000c4 	.word	0x200000c4
 8008c2c:	200000d8 	.word	0x200000d8
 8008c30:	200000ec 	.word	0x200000ec
 8008c34:	20000100 	.word	0x20000100
 8008c38:	20000114 	.word	0x20000114
 8008c3c:	20000128 	.word	0x20000128
 8008c40:	2000013c 	.word	0x2000013c
 8008c44:	20000150 	.word	0x20000150
 8008c48:	20000164 	.word	0x20000164
 8008c4c:	20000178 	.word	0x20000178
 8008c50:	2000121c 	.word	0x2000121c
 8008c54:	20001230 	.word	0x20001230
 8008c58:	20001244 	.word	0x20001244
 8008c5c:	20001258 	.word	0x20001258
 8008c60:	2000126c 	.word	0x2000126c
 8008c64:	20001280 	.word	0x20001280
 8008c68:	20001294 	.word	0x20001294
 8008c6c:	200012a8 	.word	0x200012a8
 8008c70:	200012bc 	.word	0x200012bc
 8008c74:	200012d0 	.word	0x200012d0
 8008c78:	200012e4 	.word	0x200012e4
 8008c7c:	200012f8 	.word	0x200012f8
 8008c80:	2000130c 	.word	0x2000130c
 8008c84:	20001320 	.word	0x20001320
 8008c88:	20001334 	.word	0x20001334
 8008c8c:	20001348 	.word	0x20001348
 8008c90:	2000135c 	.word	0x2000135c
 8008c94:	20001370 	.word	0x20001370
 8008c98:	20001384 	.word	0x20001384
 8008c9c:	20001398 	.word	0x20001398
 8008ca0:	200013ac 	.word	0x200013ac
 8008ca4:	200013c0 	.word	0x200013c0
 8008ca8:	200013d4 	.word	0x200013d4
 8008cac:	200013e8 	.word	0x200013e8
 8008cb0:	200013fc 	.word	0x200013fc
 8008cb4:	20001410 	.word	0x20001410
 8008cb8:	20001424 	.word	0x20001424
 8008cbc:	20001438 	.word	0x20001438
 8008cc0:	2000144c 	.word	0x2000144c
 8008cc4:	20001460 	.word	0x20001460
 8008cc8:	20001474 	.word	0x20001474
 8008ccc:	20001488 	.word	0x20001488
 8008cd0:	2000149c 	.word	0x2000149c
 8008cd4:	200014b0 	.word	0x200014b0
 8008cd8:	200014c4 	.word	0x200014c4
 8008cdc:	200014d8 	.word	0x200014d8
 8008ce0:	200014ec 	.word	0x200014ec
 8008ce4:	20001500 	.word	0x20001500
 8008ce8:	20001514 	.word	0x20001514
 8008cec:	20001528 	.word	0x20001528
 8008cf0:	2000153c 	.word	0x2000153c
 8008cf4:	20001550 	.word	0x20001550
 8008cf8:	20001564 	.word	0x20001564
 8008cfc:	20001578 	.word	0x20001578
 8008d00:	2000158c 	.word	0x2000158c
 8008d04:	200015a0 	.word	0x200015a0
 8008d08:	200015b4 	.word	0x200015b4
 8008d0c:	200015c8 	.word	0x200015c8
 8008d10:	200015dc 	.word	0x200015dc
 8008d14:	200015f0 	.word	0x200015f0
 8008d18:	20001604 	.word	0x20001604
 8008d1c:	20001618 	.word	0x20001618
 8008d20:	2000162c 	.word	0x2000162c
 8008d24:	20001640 	.word	0x20001640
 8008d28:	20001654 	.word	0x20001654
 8008d2c:	20001668 	.word	0x20001668
 8008d30:	2000167c 	.word	0x2000167c
 8008d34:	20001690 	.word	0x20001690
 8008d38:	200016a4 	.word	0x200016a4
 8008d3c:	200016b8 	.word	0x200016b8
 8008d40:	200016cc 	.word	0x200016cc
 8008d44:	200016e0 	.word	0x200016e0
 8008d48:	200016f4 	.word	0x200016f4
 8008d4c:	20001708 	.word	0x20001708
 8008d50:	2000171c 	.word	0x2000171c
 8008d54:	20001730 	.word	0x20001730
 8008d58:	20001744 	.word	0x20001744
 8008d5c:	20001758 	.word	0x20001758
 8008d60:	2000176c 	.word	0x2000176c
 8008d64:	20001780 	.word	0x20001780
 8008d68:	20001794 	.word	0x20001794
 8008d6c:	200017a8 	.word	0x200017a8
 8008d70:	200017bc 	.word	0x200017bc
 8008d74:	200017d0 	.word	0x200017d0
 8008d78:	200017e4 	.word	0x200017e4
 8008d7c:	200017f8 	.word	0x200017f8
 8008d80:	2000180c 	.word	0x2000180c
 8008d84:	20001820 	.word	0x20001820
 8008d88:	20001834 	.word	0x20001834
 8008d8c:	20001848 	.word	0x20001848
 8008d90:	2000185c 	.word	0x2000185c
 8008d94:	20001870 	.word	0x20001870
 8008d98:	20001884 	.word	0x20001884
 8008d9c:	20001898 	.word	0x20001898
 8008da0:	200018ac 	.word	0x200018ac
 8008da4:	200018c0 	.word	0x200018c0
 8008da8:	200018d4 	.word	0x200018d4
 8008dac:	200018e8 	.word	0x200018e8
 8008db0:	200018fc 	.word	0x200018fc

08008db4 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008dba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008dbe:	f001 fdc3 	bl	800a948 <HAL_Delay>
	int confirmationVal = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008dc6:	e012      	b.n	8008dee <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008dc8:	4a12      	ldr	r2, [pc, #72]	@ (8008e14 <takeMachineIDWithConfirmation+0x60>)
 8008dca:	2101      	movs	r1, #1
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f001 f861 	bl	8009e94 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008dd2:	4a11      	ldr	r2, [pc, #68]	@ (8008e18 <takeMachineIDWithConfirmation+0x64>)
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	2002      	movs	r0, #2
 8008dd8:	f001 f85c 	bl	8009e94 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008ddc:	2102      	movs	r1, #2
 8008dde:	480f      	ldr	r0, [pc, #60]	@ (8008e1c <takeMachineIDWithConfirmation+0x68>)
 8008de0:	f002 fb82 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0e9      	beq.n	8008dc8 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008df4:	f000 f814 	bl	8008e20 <takeMachineID>

	convertArrays(1);
 8008df8:	2001      	movs	r0, #1
 8008dfa:	f7f7 fc65 	bl	80006c8 <convertArrays>
	HAL_Delay(50);
 8008dfe:	2032      	movs	r0, #50	@ 0x32
 8008e00:	f001 fda2 	bl	800a948 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008e04:	2001      	movs	r0, #1
 8008e06:	f7f8 f94d 	bl	80010a4 <printCredentials>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200018d4 	.word	0x200018d4
 8008e18:	200018e8 	.word	0x200018e8
 8008e1c:	40010800 	.word	0x40010800

08008e20 <takeMachineID>:

void takeMachineID() {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8008e26:	2001      	movs	r0, #1
 8008e28:	f001 f892 	bl	8009f50 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008e2c:	220c      	movs	r2, #12
 8008e2e:	2100      	movs	r1, #0
 8008e30:	48a2      	ldr	r0, [pc, #648]	@ (80090bc <takeMachineID+0x29c>)
 8008e32:	f005 fc9f 	bl	800e774 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8008e36:	2305      	movs	r3, #5
 8008e38:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008e42:	4b9f      	ldr	r3, [pc, #636]	@ (80090c0 <takeMachineID+0x2a0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f7f7 ffba 	bl	8000dc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008e50:	2108      	movs	r1, #8
 8008e52:	489c      	ldr	r0, [pc, #624]	@ (80090c4 <takeMachineID+0x2a4>)
 8008e54:	f002 fb48 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d128      	bne.n	8008eb0 <takeMachineID+0x90>
        	lcd_cursor(0);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f001 f876 	bl	8009f50 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008e64:	f000 fe58 	bl	8009b18 <checkEEPROM4ID>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d00e      	beq.n	8008e8c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008e6e:	4a96      	ldr	r2, [pc, #600]	@ (80090c8 <takeMachineID+0x2a8>)
 8008e70:	2101      	movs	r1, #1
 8008e72:	2001      	movs	r0, #1
 8008e74:	f001 f80e 	bl	8009e94 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008e78:	4a94      	ldr	r2, [pc, #592]	@ (80090cc <takeMachineID+0x2ac>)
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	2002      	movs	r0, #2
 8008e7e:	f001 f809 	bl	8009e94 <lcd_print>
        		HAL_Delay(1250);
 8008e82:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008e86:	f001 fd5f 	bl	800a948 <HAL_Delay>

        		goto mainSection;
 8008e8a:	e7cc      	b.n	8008e26 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008e8c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008e90:	9302      	str	r3, [sp, #8]
 8008e92:	236e      	movs	r3, #110	@ 0x6e
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	4b8e      	ldr	r3, [pc, #568]	@ (80090d0 <takeMachineID+0x2b0>)
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	236e      	movs	r3, #110	@ 0x6e
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	21a0      	movs	r1, #160	@ 0xa0
 8008ea0:	488c      	ldr	r0, [pc, #560]	@ (80090d4 <takeMachineID+0x2b4>)
 8008ea2:	f002 fddb 	bl	800ba5c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8008ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008eaa:	f001 fd4d 	bl	800a948 <HAL_Delay>

            	break;
 8008eae:	e132      	b.n	8009116 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	4884      	ldr	r0, [pc, #528]	@ (80090c4 <takeMachineID+0x2a4>)
 8008eb4:	f002 fb18 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d111      	bne.n	8008ee2 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d102      	bne.n	8008eca <takeMachineID+0xaa>
        		cursorPosition = 10;
 8008ec4:	230a      	movs	r3, #10
 8008ec6:	60bb      	str	r3, [r7, #8]
 8008ec8:	e008      	b.n	8008edc <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b0e      	cmp	r3, #14
 8008ece:	d102      	bne.n	8008ed6 <takeMachineID+0xb6>
                cursorPosition = 3;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	60bb      	str	r3, [r7, #8]
 8008ed4:	e002      	b.n	8008edc <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008edc:	2096      	movs	r0, #150	@ 0x96
 8008ede:	f001 fd33 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008ee2:	2108      	movs	r1, #8
 8008ee4:	487c      	ldr	r0, [pc, #496]	@ (80090d8 <takeMachineID+0x2b8>)
 8008ee6:	f002 faff 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d111      	bne.n	8008f14 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d102      	bne.n	8008efc <takeMachineID+0xdc>
                cursorPosition = 14;
 8008ef6:	230e      	movs	r3, #14
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	e008      	b.n	8008f0e <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b0a      	cmp	r3, #10
 8008f00:	d102      	bne.n	8008f08 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8008f02:	2307      	movs	r3, #7
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	e002      	b.n	8008f0e <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8008f0e:	20fa      	movs	r0, #250	@ 0xfa
 8008f10:	f001 fd1a 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008f14:	2102      	movs	r1, #2
 8008f16:	486b      	ldr	r0, [pc, #428]	@ (80090c4 <takeMachineID+0x2a4>)
 8008f18:	f002 fae6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	f040 80a1 	bne.w	8009066 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d10a      	bne.n	8008f40 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8008f2a:	4a64      	ldr	r2, [pc, #400]	@ (80090bc <takeMachineID+0x29c>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	2230      	movs	r2, #48	@ 0x30
 8008f32:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008f34:	4a66      	ldr	r2, [pc, #408]	@ (80090d0 <takeMachineID+0x2b0>)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	4413      	add	r3, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	e07c      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d10a      	bne.n	8008f5c <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8008f46:	4a5d      	ldr	r2, [pc, #372]	@ (80090bc <takeMachineID+0x29c>)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	2231      	movs	r2, #49	@ 0x31
 8008f4e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008f50:	4a5f      	ldr	r2, [pc, #380]	@ (80090d0 <takeMachineID+0x2b0>)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e06e      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d10a      	bne.n	8008f78 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8008f62:	4a56      	ldr	r2, [pc, #344]	@ (80090bc <takeMachineID+0x29c>)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	2232      	movs	r2, #50	@ 0x32
 8008f6a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008f6c:	4a58      	ldr	r2, [pc, #352]	@ (80090d0 <takeMachineID+0x2b0>)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	2202      	movs	r2, #2
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	e060      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b06      	cmp	r3, #6
 8008f7c:	d10a      	bne.n	8008f94 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8008f7e:	4a4f      	ldr	r2, [pc, #316]	@ (80090bc <takeMachineID+0x29c>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	2233      	movs	r2, #51	@ 0x33
 8008f86:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008f88:	4a51      	ldr	r2, [pc, #324]	@ (80090d0 <takeMachineID+0x2b0>)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	2203      	movs	r2, #3
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	e052      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b07      	cmp	r3, #7
 8008f98:	d10a      	bne.n	8008fb0 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8008f9a:	4a48      	ldr	r2, [pc, #288]	@ (80090bc <takeMachineID+0x29c>)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	2234      	movs	r2, #52	@ 0x34
 8008fa2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80090d0 <takeMachineID+0x2b0>)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2204      	movs	r2, #4
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	e044      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b0a      	cmp	r3, #10
 8008fb4:	d10a      	bne.n	8008fcc <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8008fb6:	4a41      	ldr	r2, [pc, #260]	@ (80090bc <takeMachineID+0x29c>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	2235      	movs	r2, #53	@ 0x35
 8008fbe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008fc0:	4a43      	ldr	r2, [pc, #268]	@ (80090d0 <takeMachineID+0x2b0>)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2205      	movs	r2, #5
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	e036      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b0b      	cmp	r3, #11
 8008fd0:	d10a      	bne.n	8008fe8 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8008fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80090bc <takeMachineID+0x29c>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	2236      	movs	r2, #54	@ 0x36
 8008fda:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80090d0 <takeMachineID+0x2b0>)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e028      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b0c      	cmp	r3, #12
 8008fec:	d10a      	bne.n	8009004 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8008fee:	4a33      	ldr	r2, [pc, #204]	@ (80090bc <takeMachineID+0x29c>)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	2237      	movs	r2, #55	@ 0x37
 8008ff6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008ff8:	4a35      	ldr	r2, [pc, #212]	@ (80090d0 <takeMachineID+0x2b0>)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	2207      	movs	r2, #7
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e01a      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b0d      	cmp	r3, #13
 8009008:	d10a      	bne.n	8009020 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 800900a:	4a2c      	ldr	r2, [pc, #176]	@ (80090bc <takeMachineID+0x29c>)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	2238      	movs	r2, #56	@ 0x38
 8009012:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8009014:	4a2e      	ldr	r2, [pc, #184]	@ (80090d0 <takeMachineID+0x2b0>)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	4413      	add	r3, r2
 800901a:	2208      	movs	r2, #8
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e00c      	b.n	800903a <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b0e      	cmp	r3, #14
 8009024:	d109      	bne.n	800903a <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8009026:	4a25      	ldr	r2, [pc, #148]	@ (80090bc <takeMachineID+0x29c>)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4413      	add	r3, r2
 800902c:	2239      	movs	r2, #57	@ 0x39
 800902e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8009030:	4a27      	ldr	r2, [pc, #156]	@ (80090d0 <takeMachineID+0x2b0>)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	4413      	add	r3, r2
 8009036:	2209      	movs	r2, #9
 8009038:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	b2d9      	uxtb	r1, r3
 800903e:	4a1f      	ldr	r2, [pc, #124]	@ (80090bc <takeMachineID+0x29c>)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	2001      	movs	r0, #1
 800904a:	f000 ff38 	bl	8009ebe <lcd_print_char>

        	writeLoc++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3301      	adds	r3, #1
 8009058:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	3301      	adds	r3, #1
 800905e:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8009060:	2096      	movs	r0, #150	@ 0x96
 8009062:	f001 fc71 	bl	800a948 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009066:	2104      	movs	r1, #4
 8009068:	4816      	ldr	r0, [pc, #88]	@ (80090c4 <takeMachineID+0x2a4>)
 800906a:	f002 fa3d 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800906e:	4603      	mov	r3, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	d149      	bne.n	8009108 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8009074:	4b11      	ldr	r3, [pc, #68]	@ (80090bc <takeMachineID+0x29c>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d042      	beq.n	8009102 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 800907c:	4a0f      	ldr	r2, [pc, #60]	@ (80090bc <takeMachineID+0x29c>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8009086:	4a12      	ldr	r2, [pc, #72]	@ (80090d0 <takeMachineID+0x2b0>)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	4413      	add	r3, r2
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b05      	cmp	r3, #5
 8009094:	dd03      	ble.n	800909e <takeMachineID+0x27e>
                	writeLoc--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3b01      	subs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	e004      	b.n	80090a8 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	dc01      	bgt.n	80090a8 <takeMachineID+0x288>
                	writeLoc = 5;
 80090a4:	2305      	movs	r3, #5
 80090a6:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd16      	ble.n	80090dc <takeMachineID+0x2bc>
                	arrayPos--;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	e017      	b.n	80090ec <takeMachineID+0x2cc>
 80090bc:	20001064 	.word	0x20001064
 80090c0:	20000000 	.word	0x20000000
 80090c4:	40010800 	.word	0x40010800
 80090c8:	200017e4 	.word	0x200017e4
 80090cc:	200017f8 	.word	0x200017f8
 80090d0:	20000fec 	.word	0x20000fec
 80090d4:	20001938 	.word	0x20001938
 80090d8:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da04      	bge.n	80090ec <takeMachineID+0x2cc>
                	arrayPos = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80090e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009120 <takeMachineID+0x300>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	3305      	adds	r3, #5
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	2001      	movs	r0, #1
 80090f8:	f000 ff02 	bl	8009f00 <lcd_delete_char>
                HAL_Delay(50);
 80090fc:	2032      	movs	r0, #50	@ 0x32
 80090fe:	f001 fc23 	bl	800a948 <HAL_Delay>
            }

            HAL_Delay(150);
 8009102:	2096      	movs	r0, #150	@ 0x96
 8009104:	f001 fc20 	bl	800a948 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	2002      	movs	r0, #2
 8009110:	f000 fea1 	bl	8009e56 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009114:	e69c      	b.n	8008e50 <takeMachineID+0x30>
    }
}
 8009116:	bf00      	nop
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000000 	.word	0x20000000

08009124 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800912a:	2301      	movs	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800912e:	4a25      	ldr	r2, [pc, #148]	@ (80091c4 <ssidConfirmation+0xa0>)
 8009130:	2101      	movs	r1, #1
 8009132:	2001      	movs	r0, #1
 8009134:	f000 feae 	bl	8009e94 <lcd_print>

	while(loopVal == 1) {
 8009138:	e012      	b.n	8009160 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800913a:	4a23      	ldr	r2, [pc, #140]	@ (80091c8 <ssidConfirmation+0xa4>)
 800913c:	2101      	movs	r1, #1
 800913e:	2002      	movs	r0, #2
 8009140:	f000 fea8 	bl	8009e94 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009144:	2102      	movs	r1, #2
 8009146:	4821      	ldr	r0, [pc, #132]	@ (80091cc <ssidConfirmation+0xa8>)
 8009148:	f002 f9ce 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800914c:	4603      	mov	r3, r0
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <ssidConfirmation+0x32>
			loopVal = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8009156:	4a1e      	ldr	r2, [pc, #120]	@ (80091d0 <ssidConfirmation+0xac>)
 8009158:	2101      	movs	r1, #1
 800915a:	2001      	movs	r0, #1
 800915c:	f000 fe9a 	bl	8009e94 <lcd_print>
	while(loopVal == 1) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d0e9      	beq.n	800913a <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8009166:	2000      	movs	r0, #0
 8009168:	f000 fef2 	bl	8009f50 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 800916c:	4818      	ldr	r0, [pc, #96]	@ (80091d0 <ssidConfirmation+0xac>)
 800916e:	f7f7 f859 	bl	8000224 <strlen>
 8009172:	4603      	mov	r3, r0
 8009174:	2b14      	cmp	r3, #20
 8009176:	d90f      	bls.n	8009198 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8009178:	4a16      	ldr	r2, [pc, #88]	@ (80091d4 <ssidConfirmation+0xb0>)
 800917a:	2101      	movs	r1, #1
 800917c:	2001      	movs	r0, #1
 800917e:	f000 fe89 	bl	8009e94 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8009182:	4a15      	ldr	r2, [pc, #84]	@ (80091d8 <ssidConfirmation+0xb4>)
 8009184:	2101      	movs	r1, #1
 8009186:	2002      	movs	r0, #2
 8009188:	f000 fe84 	bl	8009e94 <lcd_print>
        HAL_Delay(1250);
 800918c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8009190:	f001 fbda 	bl	800a948 <HAL_Delay>

        return 0;
 8009194:	2300      	movs	r3, #0
 8009196:	e011      	b.n	80091bc <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009198:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	236e      	movs	r3, #110	@ 0x6e
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	4b0e      	ldr	r3, [pc, #56]	@ (80091dc <ssidConfirmation+0xb8>)
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	236e      	movs	r3, #110	@ 0x6e
 80091a8:	2200      	movs	r2, #0
 80091aa:	21a0      	movs	r1, #160	@ 0xa0
 80091ac:	480c      	ldr	r0, [pc, #48]	@ (80091e0 <ssidConfirmation+0xbc>)
 80091ae:	f002 fc55 	bl	800ba5c <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80091b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80091b6:	f001 fbc7 	bl	800a948 <HAL_Delay>

    	return 1;
 80091ba:	2301      	movs	r3, #1
    }
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	0800f374 	.word	0x0800f374
 80091c8:	200018fc 	.word	0x200018fc
 80091cc:	40010800 	.word	0x40010800
 80091d0:	20001070 	.word	0x20001070
 80091d4:	2000180c 	.word	0x2000180c
 80091d8:	20001820 	.word	0x20001820
 80091dc:	20000fec 	.word	0x20000fec
 80091e0:	20001938 	.word	0x20001938

080091e4 <takeWifiSSID>:

void takeWifiSSID() {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80091ea:	2001      	movs	r0, #1
 80091ec:	f000 feb0 	bl	8009f50 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80091f0:	2210      	movs	r2, #16
 80091f2:	2100      	movs	r1, #0
 80091f4:	48a4      	ldr	r0, [pc, #656]	@ (8009488 <takeWifiSSID+0x2a4>)
 80091f6:	f005 fabd 	bl	800e774 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80091fa:	2301      	movs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80091fe:	2307      	movs	r3, #7
 8009200:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8009202:	2301      	movs	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800920a:	4ba0      	ldr	r3, [pc, #640]	@ (800948c <takeWifiSSID+0x2a8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8009210:	2101      	movs	r1, #1
 8009212:	2002      	movs	r0, #2
 8009214:	f7f7 fdd6 	bl	8000dc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009218:	2108      	movs	r1, #8
 800921a:	489d      	ldr	r0, [pc, #628]	@ (8009490 <takeWifiSSID+0x2ac>)
 800921c:	f002 f964 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8009220:	4603      	mov	r3, r0
 8009222:	2b01      	cmp	r3, #1
 8009224:	d106      	bne.n	8009234 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8009226:	f7ff ff7d 	bl	8009124 <ssidConfirmation>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8126 	bne.w	800947e <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8009232:	e7da      	b.n	80091ea <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009234:	2101      	movs	r1, #1
 8009236:	4896      	ldr	r0, [pc, #600]	@ (8009490 <takeWifiSSID+0x2ac>)
 8009238:	f002 f956 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d14d      	bne.n	80092de <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b50      	cmp	r3, #80	@ 0x50
 8009246:	dd01      	ble.n	800924c <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8009248:	2301      	movs	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b10      	cmp	r3, #16
 8009250:	d13f      	bne.n	80092d2 <takeWifiSSID+0xee>
            	if(page == 1) {
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d109      	bne.n	800926c <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8009258:	2301      	movs	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
            		page++;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3301      	adds	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8009262:	2102      	movs	r1, #2
 8009264:	2002      	movs	r0, #2
 8009266:	f7f7 fdad 	bl	8000dc4 <printTemplate>
 800926a:	e035      	b.n	80092d8 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d109      	bne.n	8009286 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
            		page++;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	3301      	adds	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800927c:	2103      	movs	r1, #3
 800927e:	2002      	movs	r0, #2
 8009280:	f7f7 fda0 	bl	8000dc4 <printTemplate>
 8009284:	e028      	b.n	80092d8 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d109      	bne.n	80092a0 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 800928c:	2301      	movs	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
            		page++;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3301      	adds	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009296:	2104      	movs	r1, #4
 8009298:	2002      	movs	r0, #2
 800929a:	f7f7 fd93 	bl	8000dc4 <printTemplate>
 800929e:	e01b      	b.n	80092d8 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d109      	bne.n	80092ba <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
            		page++;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	3301      	adds	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80092b0:	2105      	movs	r1, #5
 80092b2:	2002      	movs	r0, #2
 80092b4:	f7f7 fd86 	bl	8000dc4 <printTemplate>
 80092b8:	e00e      	b.n	80092d8 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d10b      	bne.n	80092d8 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80092c0:	2301      	movs	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80092c4:	2301      	movs	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80092c8:	2101      	movs	r1, #1
 80092ca:	2002      	movs	r0, #2
 80092cc:	f7f7 fd7a 	bl	8000dc4 <printTemplate>
 80092d0:	e002      	b.n	80092d8 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80092d8:	2096      	movs	r0, #150	@ 0x96
 80092da:	f001 fb35 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80092de:	2108      	movs	r1, #8
 80092e0:	486c      	ldr	r0, [pc, #432]	@ (8009494 <takeWifiSSID+0x2b0>)
 80092e2:	f002 f901 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d149      	bne.n	8009380 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dc01      	bgt.n	80092f6 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80092f2:	2350      	movs	r3, #80	@ 0x50
 80092f4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d13b      	bne.n	8009374 <takeWifiSSID+0x190>
            	if(page == 1) {
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d108      	bne.n	8009314 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8009302:	2310      	movs	r3, #16
 8009304:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009306:	2305      	movs	r3, #5
 8009308:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800930a:	2105      	movs	r1, #5
 800930c:	2002      	movs	r0, #2
 800930e:	f7f7 fd59 	bl	8000dc4 <printTemplate>
 8009312:	e032      	b.n	800937a <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d108      	bne.n	800932c <takeWifiSSID+0x148>
            		cursorPosition = 16;
 800931a:	2310      	movs	r3, #16
 800931c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8009322:	2101      	movs	r1, #1
 8009324:	2002      	movs	r0, #2
 8009326:	f7f7 fd4d 	bl	8000dc4 <printTemplate>
 800932a:	e026      	b.n	800937a <takeWifiSSID+0x196>
            	} else if(page == 3) {
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b03      	cmp	r3, #3
 8009330:	d108      	bne.n	8009344 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8009332:	2310      	movs	r3, #16
 8009334:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009336:	2302      	movs	r3, #2
 8009338:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800933a:	2102      	movs	r1, #2
 800933c:	2002      	movs	r0, #2
 800933e:	f7f7 fd41 	bl	8000dc4 <printTemplate>
 8009342:	e01a      	b.n	800937a <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b04      	cmp	r3, #4
 8009348:	d108      	bne.n	800935c <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800934a:	2310      	movs	r3, #16
 800934c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800934e:	2303      	movs	r3, #3
 8009350:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009352:	2103      	movs	r1, #3
 8009354:	2002      	movs	r0, #2
 8009356:	f7f7 fd35 	bl	8000dc4 <printTemplate>
 800935a:	e00e      	b.n	800937a <takeWifiSSID+0x196>
            	} else if(page == 5) {
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2b05      	cmp	r3, #5
 8009360:	d10b      	bne.n	800937a <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8009362:	2310      	movs	r3, #16
 8009364:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8009366:	2304      	movs	r3, #4
 8009368:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800936a:	2104      	movs	r1, #4
 800936c:	2002      	movs	r0, #2
 800936e:	f7f7 fd29 	bl	8000dc4 <printTemplate>
 8009372:	e002      	b.n	800937a <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3b01      	subs	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800937a:	2096      	movs	r0, #150	@ 0x96
 800937c:	f001 fae4 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009380:	2102      	movs	r1, #2
 8009382:	4843      	ldr	r0, [pc, #268]	@ (8009490 <takeWifiSSID+0x2ac>)
 8009384:	f002 f8b0 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8009388:	4603      	mov	r3, r0
 800938a:	2b01      	cmp	r3, #1
 800938c:	d12f      	bne.n	80093ee <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	b2d9      	uxtb	r1, r3
 8009392:	4a41      	ldr	r2, [pc, #260]	@ (8009498 <takeWifiSSID+0x2b4>)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4413      	add	r3, r2
 8009398:	460a      	mov	r2, r1
 800939a:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 800939c:	4a3f      	ldr	r2, [pc, #252]	@ (800949c <takeWifiSSID+0x2b8>)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	7819      	ldrb	r1, [r3, #0]
 80093a4:	4a38      	ldr	r2, [pc, #224]	@ (8009488 <takeWifiSSID+0x2a4>)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	460a      	mov	r2, r1
 80093ac:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	b2d9      	uxtb	r1, r3
 80093b2:	4a3a      	ldr	r2, [pc, #232]	@ (800949c <takeWifiSSID+0x2b8>)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4413      	add	r3, r2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	2001      	movs	r0, #1
 80093be:	f000 fd7e 	bl	8009ebe <lcd_print_char>

            writeLoc++;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	3301      	adds	r3, #1
 80093c6:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	3301      	adds	r3, #1
 80093cc:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3301      	adds	r3, #1
 80093d2:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80093d4:	4a30      	ldr	r2, [pc, #192]	@ (8009498 <takeWifiSSID+0x2b4>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80093de:	4a2a      	ldr	r2, [pc, #168]	@ (8009488 <takeWifiSSID+0x2a4>)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4413      	add	r3, r2
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80093e8:	2096      	movs	r0, #150	@ 0x96
 80093ea:	f001 faad 	bl	800a948 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80093ee:	2104      	movs	r1, #4
 80093f0:	4827      	ldr	r0, [pc, #156]	@ (8009490 <takeWifiSSID+0x2ac>)
 80093f2:	f002 f879 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d139      	bne.n	8009470 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80093fc:	4b22      	ldr	r3, [pc, #136]	@ (8009488 <takeWifiSSID+0x2a4>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d032      	beq.n	800946a <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8009404:	4a24      	ldr	r2, [pc, #144]	@ (8009498 <takeWifiSSID+0x2b4>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 800940e:	4a1e      	ldr	r2, [pc, #120]	@ (8009488 <takeWifiSSID+0x2a4>)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4413      	add	r3, r2
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b07      	cmp	r3, #7
 800941c:	dd03      	ble.n	8009426 <takeWifiSSID+0x242>
        			writeLoc--;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3b01      	subs	r3, #1
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	e004      	b.n	8009430 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b06      	cmp	r3, #6
 800942a:	dc01      	bgt.n	8009430 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 800942c:	2307      	movs	r3, #7
 800942e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dd06      	ble.n	8009444 <takeWifiSSID+0x260>
        			arrayPosition--;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	3b01      	subs	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3b01      	subs	r3, #1
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	e007      	b.n	8009454 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da04      	bge.n	8009454 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800944e:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <takeWifiSSID+0x2a8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	3307      	adds	r3, #7
 800945a:	b2db      	uxtb	r3, r3
 800945c:	4619      	mov	r1, r3
 800945e:	2001      	movs	r0, #1
 8009460:	f000 fd4e 	bl	8009f00 <lcd_delete_char>
        		HAL_Delay(50);
 8009464:	2032      	movs	r0, #50	@ 0x32
 8009466:	f001 fa6f 	bl	800a948 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800946a:	2096      	movs	r0, #150	@ 0x96
 800946c:	f001 fa6c 	bl	800a948 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	4619      	mov	r1, r3
 8009476:	2002      	movs	r0, #2
 8009478:	f000 fced 	bl	8009e56 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800947c:	e6cc      	b.n	8009218 <takeWifiSSID+0x34>
        		break;
 800947e:	bf00      	nop
    }
}
 8009480:	bf00      	nop
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20001070 	.word	0x20001070
 800948c:	20000004 	.word	0x20000004
 8009490:	40010800 	.word	0x40010800
 8009494:	40011000 	.word	0x40011000
 8009498:	20000fec 	.word	0x20000fec
 800949c:	20000018 	.word	0x20000018

080094a0 <passConfirmation>:

uint8_t passConfirmation() {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af04      	add	r7, sp, #16
	int loopVal = 1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80094aa:	4a25      	ldr	r2, [pc, #148]	@ (8009540 <passConfirmation+0xa0>)
 80094ac:	2101      	movs	r1, #1
 80094ae:	2001      	movs	r0, #1
 80094b0:	f000 fcf0 	bl	8009e94 <lcd_print>

	while(loopVal == 1) {
 80094b4:	e012      	b.n	80094dc <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80094b6:	4a23      	ldr	r2, [pc, #140]	@ (8009544 <passConfirmation+0xa4>)
 80094b8:	2101      	movs	r1, #1
 80094ba:	2002      	movs	r0, #2
 80094bc:	f000 fcea 	bl	8009e94 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80094c0:	2102      	movs	r1, #2
 80094c2:	4821      	ldr	r0, [pc, #132]	@ (8009548 <passConfirmation+0xa8>)
 80094c4:	f002 f810 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <passConfirmation+0x32>
			loopVal = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80094d2:	4a1e      	ldr	r2, [pc, #120]	@ (800954c <passConfirmation+0xac>)
 80094d4:	2101      	movs	r1, #1
 80094d6:	2001      	movs	r0, #1
 80094d8:	f000 fcdc 	bl	8009e94 <lcd_print>
	while(loopVal == 1) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d0e9      	beq.n	80094b6 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80094e2:	2000      	movs	r0, #0
 80094e4:	f000 fd34 	bl	8009f50 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80094e8:	4818      	ldr	r0, [pc, #96]	@ (800954c <passConfirmation+0xac>)
 80094ea:	f7f6 fe9b 	bl	8000224 <strlen>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b14      	cmp	r3, #20
 80094f2:	d90f      	bls.n	8009514 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80094f4:	4a16      	ldr	r2, [pc, #88]	@ (8009550 <passConfirmation+0xb0>)
 80094f6:	2101      	movs	r1, #1
 80094f8:	2001      	movs	r0, #1
 80094fa:	f000 fccb 	bl	8009e94 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80094fe:	4a15      	ldr	r2, [pc, #84]	@ (8009554 <passConfirmation+0xb4>)
 8009500:	2101      	movs	r1, #1
 8009502:	2002      	movs	r0, #2
 8009504:	f000 fcc6 	bl	8009e94 <lcd_print>
        HAL_Delay(1250);
 8009508:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800950c:	f001 fa1c 	bl	800a948 <HAL_Delay>

        return 0;
 8009510:	2300      	movs	r3, #0
 8009512:	e011      	b.n	8009538 <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009514:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	236e      	movs	r3, #110	@ 0x6e
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <passConfirmation+0xb8>)
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	236e      	movs	r3, #110	@ 0x6e
 8009524:	2200      	movs	r2, #0
 8009526:	21a0      	movs	r1, #160	@ 0xa0
 8009528:	480c      	ldr	r0, [pc, #48]	@ (800955c <passConfirmation+0xbc>)
 800952a:	f002 fa97 	bl	800ba5c <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 800952e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009532:	f001 fa09 	bl	800a948 <HAL_Delay>

    	return 1;
 8009536:	2301      	movs	r3, #1
    }
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	0800f374 	.word	0x0800f374
 8009544:	200018fc 	.word	0x200018fc
 8009548:	40010800 	.word	0x40010800
 800954c:	20001080 	.word	0x20001080
 8009550:	20001834 	.word	0x20001834
 8009554:	20001848 	.word	0x20001848
 8009558:	20000fec 	.word	0x20000fec
 800955c:	20001938 	.word	0x20001938

08009560 <takeWifiPass>:

void takeWifiPass() {
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8009566:	2001      	movs	r0, #1
 8009568:	f000 fcf2 	bl	8009f50 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800956c:	2210      	movs	r2, #16
 800956e:	2100      	movs	r1, #0
 8009570:	48a4      	ldr	r0, [pc, #656]	@ (8009804 <takeWifiPass+0x2a4>)
 8009572:	f005 f8ff 	bl	800e774 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8009576:	2301      	movs	r3, #1
 8009578:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800957a:	2307      	movs	r3, #7
 800957c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800957e:	2301      	movs	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8009586:	4ba0      	ldr	r3, [pc, #640]	@ (8009808 <takeWifiPass+0x2a8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800958c:	2101      	movs	r1, #1
 800958e:	2003      	movs	r0, #3
 8009590:	f7f7 fc18 	bl	8000dc4 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009594:	2108      	movs	r1, #8
 8009596:	489d      	ldr	r0, [pc, #628]	@ (800980c <takeWifiPass+0x2ac>)
 8009598:	f001 ffa6 	bl	800b4e8 <HAL_GPIO_ReadPin>
 800959c:	4603      	mov	r3, r0
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d106      	bne.n	80095b0 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 80095a2:	f7ff ff7d 	bl	80094a0 <passConfirmation>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 8126 	bne.w	80097fa <takeWifiPass+0x29a>
    	        goto mainPassSection;
 80095ae:	e7da      	b.n	8009566 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80095b0:	2101      	movs	r1, #1
 80095b2:	4896      	ldr	r0, [pc, #600]	@ (800980c <takeWifiPass+0x2ac>)
 80095b4:	f001 ff98 	bl	800b4e8 <HAL_GPIO_ReadPin>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d14d      	bne.n	800965a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b50      	cmp	r3, #80	@ 0x50
 80095c2:	dd01      	ble.n	80095c8 <takeWifiPass+0x68>
        		cursorPosition = 1;
 80095c4:	2301      	movs	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b10      	cmp	r3, #16
 80095cc:	d13f      	bne.n	800964e <takeWifiPass+0xee>
            	if(page == 1) {
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d109      	bne.n	80095e8 <takeWifiPass+0x88>
            		cursorPosition = 1;
 80095d4:	2301      	movs	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
            		page++;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	3301      	adds	r3, #1
 80095dc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80095de:	2102      	movs	r1, #2
 80095e0:	2003      	movs	r0, #3
 80095e2:	f7f7 fbef 	bl	8000dc4 <printTemplate>
 80095e6:	e035      	b.n	8009654 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d109      	bne.n	8009602 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80095ee:	2301      	movs	r3, #1
 80095f0:	60fb      	str	r3, [r7, #12]
            		page++;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	3301      	adds	r3, #1
 80095f6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80095f8:	2103      	movs	r1, #3
 80095fa:	2003      	movs	r0, #3
 80095fc:	f7f7 fbe2 	bl	8000dc4 <printTemplate>
 8009600:	e028      	b.n	8009654 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d109      	bne.n	800961c <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8009608:	2301      	movs	r3, #1
 800960a:	60fb      	str	r3, [r7, #12]
            		page++;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3301      	adds	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8009612:	2104      	movs	r1, #4
 8009614:	2003      	movs	r0, #3
 8009616:	f7f7 fbd5 	bl	8000dc4 <printTemplate>
 800961a:	e01b      	b.n	8009654 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b04      	cmp	r3, #4
 8009620:	d109      	bne.n	8009636 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8009622:	2301      	movs	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
            		page++;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	3301      	adds	r3, #1
 800962a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800962c:	2105      	movs	r1, #5
 800962e:	2003      	movs	r0, #3
 8009630:	f7f7 fbc8 	bl	8000dc4 <printTemplate>
 8009634:	e00e      	b.n	8009654 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b05      	cmp	r3, #5
 800963a:	d10b      	bne.n	8009654 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009640:	2301      	movs	r3, #1
 8009642:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009644:	2101      	movs	r1, #1
 8009646:	2003      	movs	r0, #3
 8009648:	f7f7 fbbc 	bl	8000dc4 <printTemplate>
 800964c:	e002      	b.n	8009654 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3301      	adds	r3, #1
 8009652:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009654:	2096      	movs	r0, #150	@ 0x96
 8009656:	f001 f977 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800965a:	2108      	movs	r1, #8
 800965c:	486c      	ldr	r0, [pc, #432]	@ (8009810 <takeWifiPass+0x2b0>)
 800965e:	f001 ff43 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8009662:	4603      	mov	r3, r0
 8009664:	2b01      	cmp	r3, #1
 8009666:	d149      	bne.n	80096fc <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	dc01      	bgt.n	8009672 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800966e:	2350      	movs	r3, #80	@ 0x50
 8009670:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d13b      	bne.n	80096f0 <takeWifiPass+0x190>
            	if(page == 1) {
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d108      	bne.n	8009690 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800967e:	2310      	movs	r3, #16
 8009680:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009682:	2305      	movs	r3, #5
 8009684:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009686:	2105      	movs	r1, #5
 8009688:	2003      	movs	r0, #3
 800968a:	f7f7 fb9b 	bl	8000dc4 <printTemplate>
 800968e:	e032      	b.n	80096f6 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b02      	cmp	r3, #2
 8009694:	d108      	bne.n	80096a8 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8009696:	2310      	movs	r3, #16
 8009698:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800969a:	2301      	movs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800969e:	2101      	movs	r1, #1
 80096a0:	2003      	movs	r0, #3
 80096a2:	f7f7 fb8f 	bl	8000dc4 <printTemplate>
 80096a6:	e026      	b.n	80096f6 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d108      	bne.n	80096c0 <takeWifiPass+0x160>
            		cursorPosition = 16;
 80096ae:	2310      	movs	r3, #16
 80096b0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80096b2:	2302      	movs	r3, #2
 80096b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80096b6:	2102      	movs	r1, #2
 80096b8:	2003      	movs	r0, #3
 80096ba:	f7f7 fb83 	bl	8000dc4 <printTemplate>
 80096be:	e01a      	b.n	80096f6 <takeWifiPass+0x196>
            	} else if(page == 4) {
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d108      	bne.n	80096d8 <takeWifiPass+0x178>
            		cursorPosition = 16;
 80096c6:	2310      	movs	r3, #16
 80096c8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80096ca:	2303      	movs	r3, #3
 80096cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80096ce:	2103      	movs	r1, #3
 80096d0:	2003      	movs	r0, #3
 80096d2:	f7f7 fb77 	bl	8000dc4 <printTemplate>
 80096d6:	e00e      	b.n	80096f6 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b05      	cmp	r3, #5
 80096dc:	d10b      	bne.n	80096f6 <takeWifiPass+0x196>
            		cursorPosition = 16;
 80096de:	2310      	movs	r3, #16
 80096e0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80096e2:	2304      	movs	r3, #4
 80096e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80096e6:	2104      	movs	r1, #4
 80096e8:	2003      	movs	r0, #3
 80096ea:	f7f7 fb6b 	bl	8000dc4 <printTemplate>
 80096ee:	e002      	b.n	80096f6 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80096f6:	2096      	movs	r0, #150	@ 0x96
 80096f8:	f001 f926 	bl	800a948 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80096fc:	2102      	movs	r1, #2
 80096fe:	4843      	ldr	r0, [pc, #268]	@ (800980c <takeWifiPass+0x2ac>)
 8009700:	f001 fef2 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8009704:	4603      	mov	r3, r0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d12f      	bne.n	800976a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	b2d9      	uxtb	r1, r3
 800970e:	4a41      	ldr	r2, [pc, #260]	@ (8009814 <takeWifiPass+0x2b4>)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4413      	add	r3, r2
 8009714:	460a      	mov	r2, r1
 8009716:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8009718:	4a3f      	ldr	r2, [pc, #252]	@ (8009818 <takeWifiPass+0x2b8>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	7819      	ldrb	r1, [r3, #0]
 8009720:	4a38      	ldr	r2, [pc, #224]	@ (8009804 <takeWifiPass+0x2a4>)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	4413      	add	r3, r2
 8009726:	460a      	mov	r2, r1
 8009728:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	b2d9      	uxtb	r1, r3
 800972e:	4a3a      	ldr	r2, [pc, #232]	@ (8009818 <takeWifiPass+0x2b8>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	2001      	movs	r0, #1
 800973a:	f000 fbc0 	bl	8009ebe <lcd_print_char>

            writeLoc++;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3301      	adds	r3, #1
 8009742:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3301      	adds	r3, #1
 8009748:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3301      	adds	r3, #1
 800974e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8009750:	4a30      	ldr	r2, [pc, #192]	@ (8009814 <takeWifiPass+0x2b4>)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800975a:	4a2a      	ldr	r2, [pc, #168]	@ (8009804 <takeWifiPass+0x2a4>)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4413      	add	r3, r2
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009764:	2096      	movs	r0, #150	@ 0x96
 8009766:	f001 f8ef 	bl	800a948 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800976a:	2104      	movs	r1, #4
 800976c:	4827      	ldr	r0, [pc, #156]	@ (800980c <takeWifiPass+0x2ac>)
 800976e:	f001 febb 	bl	800b4e8 <HAL_GPIO_ReadPin>
 8009772:	4603      	mov	r3, r0
 8009774:	2b01      	cmp	r3, #1
 8009776:	d139      	bne.n	80097ec <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8009778:	4b22      	ldr	r3, [pc, #136]	@ (8009804 <takeWifiPass+0x2a4>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d032      	beq.n	80097e6 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8009780:	4a24      	ldr	r2, [pc, #144]	@ (8009814 <takeWifiPass+0x2b4>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800978a:	4a1e      	ldr	r2, [pc, #120]	@ (8009804 <takeWifiPass+0x2a4>)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4413      	add	r3, r2
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2b07      	cmp	r3, #7
 8009798:	dd03      	ble.n	80097a2 <takeWifiPass+0x242>
        			writeLoc--;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	3b01      	subs	r3, #1
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	e004      	b.n	80097ac <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b06      	cmp	r3, #6
 80097a6:	dc01      	bgt.n	80097ac <takeWifiPass+0x24c>
        			writeLoc = 7;
 80097a8:	2307      	movs	r3, #7
 80097aa:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	dd06      	ble.n	80097c0 <takeWifiPass+0x260>
        			arrayPosition--;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	607b      	str	r3, [r7, #4]
 80097be:	e007      	b.n	80097d0 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da04      	bge.n	80097d0 <takeWifiPass+0x270>
        			arrayPosition = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80097ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009808 <takeWifiPass+0x2a8>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	3307      	adds	r3, #7
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	4619      	mov	r1, r3
 80097da:	2001      	movs	r0, #1
 80097dc:	f000 fb90 	bl	8009f00 <lcd_delete_char>
        		HAL_Delay(50);
 80097e0:	2032      	movs	r0, #50	@ 0x32
 80097e2:	f001 f8b1 	bl	800a948 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80097e6:	2096      	movs	r0, #150	@ 0x96
 80097e8:	f001 f8ae 	bl	800a948 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	4619      	mov	r1, r3
 80097f2:	2002      	movs	r0, #2
 80097f4:	f000 fb2f 	bl	8009e56 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80097f8:	e6cc      	b.n	8009594 <takeWifiPass+0x34>
    	        break;
 80097fa:	bf00      	nop
    }
}
 80097fc:	bf00      	nop
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20001080 	.word	0x20001080
 8009808:	20000008 	.word	0x20000008
 800980c:	40010800 	.word	0x40010800
 8009810:	40011000 	.word	0x40011000
 8009814:	20000fec 	.word	0x20000fec
 8009818:	20000018 	.word	0x20000018

0800981c <mergeData>:

char* mergeData() {
 800981c:	b580      	push	{r7, lr}
 800981e:	b09c      	sub	sp, #112	@ 0x70
 8009820:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8009822:	2300      	movs	r3, #0
 8009824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009826:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800982a:	2229      	movs	r2, #41	@ 0x29
 800982c:	2100      	movs	r1, #0
 800982e:	4618      	mov	r0, r3
 8009830:	f004 ffa0 	bl	800e774 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8009834:	4b5f      	ldr	r3, [pc, #380]	@ (80099b4 <mergeData+0x198>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	703b      	strb	r3, [r7, #0]
 800983a:	4b5f      	ldr	r3, [pc, #380]	@ (80099b8 <mergeData+0x19c>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	707b      	strb	r3, [r7, #1]
 8009840:	4b5e      	ldr	r3, [pc, #376]	@ (80099bc <mergeData+0x1a0>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	70bb      	strb	r3, [r7, #2]
 8009846:	4b5e      	ldr	r3, [pc, #376]	@ (80099c0 <mergeData+0x1a4>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	70fb      	strb	r3, [r7, #3]
 800984c:	4b5d      	ldr	r3, [pc, #372]	@ (80099c4 <mergeData+0x1a8>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	713b      	strb	r3, [r7, #4]
 8009852:	4b5d      	ldr	r3, [pc, #372]	@ (80099c8 <mergeData+0x1ac>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	717b      	strb	r3, [r7, #5]
 8009858:	4b5c      	ldr	r3, [pc, #368]	@ (80099cc <mergeData+0x1b0>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	71bb      	strb	r3, [r7, #6]
 800985e:	4b5c      	ldr	r3, [pc, #368]	@ (80099d0 <mergeData+0x1b4>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
 8009864:	4b5b      	ldr	r3, [pc, #364]	@ (80099d4 <mergeData+0x1b8>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	723b      	strb	r3, [r7, #8]
 800986a:	4b5b      	ldr	r3, [pc, #364]	@ (80099d8 <mergeData+0x1bc>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	727b      	strb	r3, [r7, #9]
 8009870:	4b5a      	ldr	r3, [pc, #360]	@ (80099dc <mergeData+0x1c0>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	72bb      	strb	r3, [r7, #10]
 8009876:	4b5a      	ldr	r3, [pc, #360]	@ (80099e0 <mergeData+0x1c4>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	72fb      	strb	r3, [r7, #11]
 800987c:	4b59      	ldr	r3, [pc, #356]	@ (80099e4 <mergeData+0x1c8>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	733b      	strb	r3, [r7, #12]
 8009882:	4b59      	ldr	r3, [pc, #356]	@ (80099e8 <mergeData+0x1cc>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	737b      	strb	r3, [r7, #13]
 8009888:	4b58      	ldr	r3, [pc, #352]	@ (80099ec <mergeData+0x1d0>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	73bb      	strb	r3, [r7, #14]
 800988e:	4b58      	ldr	r3, [pc, #352]	@ (80099f0 <mergeData+0x1d4>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	73fb      	strb	r3, [r7, #15]
 8009894:	4b57      	ldr	r3, [pc, #348]	@ (80099f4 <mergeData+0x1d8>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	743b      	strb	r3, [r7, #16]
 800989a:	4b57      	ldr	r3, [pc, #348]	@ (80099f8 <mergeData+0x1dc>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	747b      	strb	r3, [r7, #17]
 80098a0:	4b56      	ldr	r3, [pc, #344]	@ (80099fc <mergeData+0x1e0>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	74bb      	strb	r3, [r7, #18]
 80098a6:	4b56      	ldr	r3, [pc, #344]	@ (8009a00 <mergeData+0x1e4>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	74fb      	strb	r3, [r7, #19]
 80098ac:	4b55      	ldr	r3, [pc, #340]	@ (8009a04 <mergeData+0x1e8>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	753b      	strb	r3, [r7, #20]
 80098b2:	4b55      	ldr	r3, [pc, #340]	@ (8009a08 <mergeData+0x1ec>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	757b      	strb	r3, [r7, #21]
 80098b8:	4b54      	ldr	r3, [pc, #336]	@ (8009a0c <mergeData+0x1f0>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	75bb      	strb	r3, [r7, #22]
 80098be:	4b54      	ldr	r3, [pc, #336]	@ (8009a10 <mergeData+0x1f4>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	75fb      	strb	r3, [r7, #23]
 80098c4:	4b53      	ldr	r3, [pc, #332]	@ (8009a14 <mergeData+0x1f8>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	763b      	strb	r3, [r7, #24]
 80098ca:	4b53      	ldr	r3, [pc, #332]	@ (8009a18 <mergeData+0x1fc>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	767b      	strb	r3, [r7, #25]
 80098d0:	4b52      	ldr	r3, [pc, #328]	@ (8009a1c <mergeData+0x200>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	76bb      	strb	r3, [r7, #26]
 80098d6:	4b52      	ldr	r3, [pc, #328]	@ (8009a20 <mergeData+0x204>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	76fb      	strb	r3, [r7, #27]
 80098dc:	4b51      	ldr	r3, [pc, #324]	@ (8009a24 <mergeData+0x208>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	773b      	strb	r3, [r7, #28]
 80098e2:	4b51      	ldr	r3, [pc, #324]	@ (8009a28 <mergeData+0x20c>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 80098e8:	4b50      	ldr	r3, [pc, #320]	@ (8009a2c <mergeData+0x210>)
 80098ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80098ee:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 80098f0:	4b4e      	ldr	r3, [pc, #312]	@ (8009a2c <mergeData+0x210>)
 80098f2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80098f6:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 80098f8:	4b4c      	ldr	r3, [pc, #304]	@ (8009a2c <mergeData+0x210>)
 80098fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80098fe:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8009902:	4b4a      	ldr	r3, [pc, #296]	@ (8009a2c <mergeData+0x210>)
 8009904:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8009908:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 800990c:	4b47      	ldr	r3, [pc, #284]	@ (8009a2c <mergeData+0x210>)
 800990e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8009912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8009916:	4b45      	ldr	r3, [pc, #276]	@ (8009a2c <mergeData+0x210>)
 8009918:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 800991c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8009920:	4b42      	ldr	r3, [pc, #264]	@ (8009a2c <mergeData+0x210>)
 8009922:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8009926:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 800992a:	4b40      	ldr	r3, [pc, #256]	@ (8009a2c <mergeData+0x210>)
 800992c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8009930:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8009934:	4b3d      	ldr	r3, [pc, #244]	@ (8009a2c <mergeData+0x210>)
 8009936:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 800993a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 800993e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a2c <mergeData+0x210>)
 8009940:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8009944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009948:	2306      	movs	r3, #6
 800994a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800994e:	2300      	movs	r3, #0
 8009950:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009952:	e015      	b.n	8009980 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8009954:	463a      	mov	r2, r7
 8009956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009958:	4413      	add	r3, r2
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009962:	4933      	ldr	r1, [pc, #204]	@ (8009a30 <mergeData+0x214>)
 8009964:	4618      	mov	r0, r3
 8009966:	f004 fee5 	bl	800e734 <siprintf>
	    strcat(combinedString, temp);
 800996a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800996e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f004 ff05 	bl	800e784 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800997a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800997c:	3301      	adds	r3, #1
 800997e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009982:	2b28      	cmp	r3, #40	@ 0x28
 8009984:	d9e6      	bls.n	8009954 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8009986:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800998a:	4618      	mov	r0, r3
 800998c:	f7f6 fc4a 	bl	8000224 <strlen>
 8009990:	4603      	mov	r3, r0
 8009992:	3301      	adds	r3, #1
 8009994:	4618      	mov	r0, r3
 8009996:	f004 fdd5 	bl	800e544 <malloc>
 800999a:	4603      	mov	r3, r0
 800999c:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 800999e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80099a2:	4619      	mov	r1, r3
 80099a4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80099a6:	f004 ff4b 	bl	800e840 <strcpy>
	return result;
 80099aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3770      	adds	r7, #112	@ 0x70
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200010c7 	.word	0x200010c7
 80099b8:	200010b9 	.word	0x200010b9
 80099bc:	200010bc 	.word	0x200010bc
 80099c0:	200010bd 	.word	0x200010bd
 80099c4:	200010be 	.word	0x200010be
 80099c8:	200010c5 	.word	0x200010c5
 80099cc:	200010bf 	.word	0x200010bf
 80099d0:	200010c0 	.word	0x200010c0
 80099d4:	200010c4 	.word	0x200010c4
 80099d8:	200010c1 	.word	0x200010c1
 80099dc:	200010d1 	.word	0x200010d1
 80099e0:	200010c2 	.word	0x200010c2
 80099e4:	200010d2 	.word	0x200010d2
 80099e8:	200010c3 	.word	0x200010c3
 80099ec:	200010d3 	.word	0x200010d3
 80099f0:	200010c6 	.word	0x200010c6
 80099f4:	200010c8 	.word	0x200010c8
 80099f8:	200010c9 	.word	0x200010c9
 80099fc:	200010ca 	.word	0x200010ca
 8009a00:	200010cb 	.word	0x200010cb
 8009a04:	200010cc 	.word	0x200010cc
 8009a08:	200010cd 	.word	0x200010cd
 8009a0c:	200010ce 	.word	0x200010ce
 8009a10:	200010cf 	.word	0x200010cf
 8009a14:	200010d0 	.word	0x200010d0
 8009a18:	200010d4 	.word	0x200010d4
 8009a1c:	200010d6 	.word	0x200010d6
 8009a20:	200010b4 	.word	0x200010b4
 8009a24:	200010b5 	.word	0x200010b5
 8009a28:	200010d9 	.word	0x200010d9
 8009a2c:	20000fec 	.word	0x20000fec
 8009a30:	0800f388 	.word	0x0800f388

08009a34 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8009a3a:	4a13      	ldr	r2, [pc, #76]	@ (8009a88 <convertAndSendData+0x54>)
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f000 fa28 	bl	8009e94 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8009a44:	4a11      	ldr	r2, [pc, #68]	@ (8009a8c <convertAndSendData+0x58>)
 8009a46:	2101      	movs	r1, #1
 8009a48:	2002      	movs	r0, #2
 8009a4a:	f000 fa23 	bl	8009e94 <lcd_print>

	for(int i=0; i<2; i++) {
 8009a4e:	2300      	movs	r3, #0
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e00c      	b.n	8009a6e <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8009a54:	f7ff fee2 	bl	800981c <mergeData>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a90 <convertAndSendData+0x5c>)
 8009a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009a94 <convertAndSendData+0x60>)
 8009a60:	490d      	ldr	r1, [pc, #52]	@ (8009a98 <convertAndSendData+0x64>)
 8009a62:	480e      	ldr	r0, [pc, #56]	@ (8009a9c <convertAndSendData+0x68>)
 8009a64:	f7f6 ff5c 	bl	8000920 <sendMachineData>
	for(int i=0; i<2; i++) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	ddef      	ble.n	8009a54 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8009a74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009a78:	f000 ff66 	bl	800a948 <HAL_Delay>
	lcd_clear();
 8009a7c:	f000 fa36 	bl	8009eec <lcd_clear>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20001794 	.word	0x20001794
 8009a8c:	200017a8 	.word	0x200017a8
 8009a90:	20001080 	.word	0x20001080
 8009a94:	20001070 	.word	0x20001070
 8009a98:	20001064 	.word	0x20001064
 8009a9c:	200019d4 	.word	0x200019d4

08009aa0 <iotSetup>:

void iotSetup() {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8009aa4:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <iotSetup+0x5c>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d025      	beq.n	8009af8 <iotSetup+0x58>
		if(setupCompleted != 1) {
 8009aac:	4b14      	ldr	r3, [pc, #80]	@ (8009b00 <iotSetup+0x60>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d121      	bne.n	8009af8 <iotSetup+0x58>
				takeMachineID();
				HAL_Delay(200);
				goto takeIDSection;
			}*/
		} else {
			if(checkEEPROM4ID() != 1) {
 8009ab4:	f000 f830 	bl	8009b18 <checkEEPROM4ID>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d001      	beq.n	8009ac2 <iotSetup+0x22>
				takeMachineID();
 8009abe:	f7ff f9af 	bl	8008e20 <takeMachineID>
			}

			if(!(strlen(wifiSSID) >= 2)) {
 8009ac2:	4810      	ldr	r0, [pc, #64]	@ (8009b04 <iotSetup+0x64>)
 8009ac4:	f7f6 fbae 	bl	8000224 <strlen>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d801      	bhi.n	8009ad2 <iotSetup+0x32>
				takeWifiSSID();
 8009ace:	f7ff fb89 	bl	80091e4 <takeWifiSSID>
			}

			if(!(strlen(wifiPass) >= 2)) {
 8009ad2:	480d      	ldr	r0, [pc, #52]	@ (8009b08 <iotSetup+0x68>)
 8009ad4:	f7f6 fba6 	bl	8000224 <strlen>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d801      	bhi.n	8009ae2 <iotSetup+0x42>
				takeWifiPass();
 8009ade:	f7ff fd3f 	bl	8009560 <takeWifiPass>
			}

			ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8009ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8009b0c <iotSetup+0x6c>)
 8009ae4:	490a      	ldr	r1, [pc, #40]	@ (8009b10 <iotSetup+0x70>)
 8009ae6:	480b      	ldr	r0, [pc, #44]	@ (8009b14 <iotSetup+0x74>)
 8009ae8:	f7f6 fe70 	bl	80007cc <ESP8266_Init>
			HAL_Delay(500);
 8009aec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009af0:	f000 ff2a 	bl	800a948 <HAL_Delay>
			convertAndSendData();
 8009af4:	f7ff ff9e 	bl	8009a34 <convertAndSendData>
		}
	}
}
 8009af8:	bf00      	nop
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200010d7 	.word	0x200010d7
 8009b00:	20001090 	.word	0x20001090
 8009b04:	20001070 	.word	0x20001070
 8009b08:	20001080 	.word	0x20001080
 8009b0c:	0800f38c 	.word	0x0800f38c
 8009b10:	0800f3a4 	.word	0x0800f3a4
 8009b14:	200019d4 	.word	0x200019d4

08009b18 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b5c <checkEEPROM4ID+0x44>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8009b24:	2301      	movs	r3, #1
 8009b26:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009b28:	2300      	movs	r3, #0
 8009b2a:	607b      	str	r3, [r7, #4]
 8009b2c:	e00d      	b.n	8009b4a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8009b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8009b60 <checkEEPROM4ID+0x48>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <checkEEPROM4ID+0x26>
			returnVal = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b0b      	cmp	r3, #11
 8009b4e:	ddee      	ble.n	8009b2e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8009b50:	68bb      	ldr	r3, [r7, #8]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr
 8009b5c:	20000000 	.word	0x20000000
 8009b60:	20000fec 	.word	0x20000fec

08009b64 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	f023 030f 	bic.w	r3, r3, #15
 8009b74:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8009b7c:	7b7b      	ldrb	r3, [r7, #13]
 8009b7e:	f043 030c 	orr.w	r3, r3, #12
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8009b86:	7b7b      	ldrb	r3, [r7, #13]
 8009b88:	f043 0308 	orr.w	r3, r3, #8
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009b90:	7b3b      	ldrb	r3, [r7, #12]
 8009b92:	f043 030c 	orr.w	r3, r3, #12
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8009b9a:	7b3b      	ldrb	r3, [r7, #12]
 8009b9c:	f043 0308 	orr.w	r3, r3, #8
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009ba4:	bf00      	nop
 8009ba6:	4825      	ldr	r0, [pc, #148]	@ (8009c3c <lcd_send_cmd+0xd8>)
 8009ba8:	f002 fac7 	bl	800c13a <HAL_I2C_GetError>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d0f9      	beq.n	8009ba6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009bb2:	bf00      	nop
 8009bb4:	4821      	ldr	r0, [pc, #132]	@ (8009c3c <lcd_send_cmd+0xd8>)
 8009bb6:	f002 fab3 	bl	800c120 <HAL_I2C_GetState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d1f9      	bne.n	8009bb4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8009c40 <lcd_send_cmd+0xdc>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d116      	bne.n	8009bf6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
 8009bcc:	e00f      	b.n	8009bee <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	3310      	adds	r3, #16
 8009bd2:	443b      	add	r3, r7
 8009bd4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	f022 0208 	bic.w	r2, r2, #8
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	3310      	adds	r3, #16
 8009be2:	443b      	add	r3, r7
 8009be4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	3301      	adds	r3, #1
 8009bec:	73fb      	strb	r3, [r7, #15]
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d9ec      	bls.n	8009bce <lcd_send_cmd+0x6a>
 8009bf4:	e015      	b.n	8009c22 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73bb      	strb	r3, [r7, #14]
 8009bfa:	e00f      	b.n	8009c1c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	3310      	adds	r3, #16
 8009c00:	443b      	add	r3, r7
 8009c02:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	3310      	adds	r3, #16
 8009c10:	443b      	add	r3, r7
 8009c12:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	73bb      	strb	r3, [r7, #14]
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d9ec      	bls.n	8009bfc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009c22:	f107 0208 	add.w	r2, r7, #8
 8009c26:	2364      	movs	r3, #100	@ 0x64
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	2304      	movs	r3, #4
 8009c2c:	214e      	movs	r1, #78	@ 0x4e
 8009c2e:	4803      	ldr	r0, [pc, #12]	@ (8009c3c <lcd_send_cmd+0xd8>)
 8009c30:	f001 fe16 	bl	800b860 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009c34:	bf00      	nop
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20001938 	.word	0x20001938
 8009c40:	2000190d 	.word	0x2000190d

08009c44 <lcd_send_data>:

void lcd_send_data (char data) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	f023 030f 	bic.w	r3, r3, #15
 8009c54:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009c5c:	7b7b      	ldrb	r3, [r7, #13]
 8009c5e:	f043 030d 	orr.w	r3, r3, #13
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8009c66:	7b7b      	ldrb	r3, [r7, #13]
 8009c68:	f043 0309 	orr.w	r3, r3, #9
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009c70:	7b3b      	ldrb	r3, [r7, #12]
 8009c72:	f043 030d 	orr.w	r3, r3, #13
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8009c7a:	7b3b      	ldrb	r3, [r7, #12]
 8009c7c:	f043 0309 	orr.w	r3, r3, #9
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009c84:	bf00      	nop
 8009c86:	4825      	ldr	r0, [pc, #148]	@ (8009d1c <lcd_send_data+0xd8>)
 8009c88:	f002 fa57 	bl	800c13a <HAL_I2C_GetError>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d0f9      	beq.n	8009c86 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009c92:	bf00      	nop
 8009c94:	4821      	ldr	r0, [pc, #132]	@ (8009d1c <lcd_send_data+0xd8>)
 8009c96:	f002 fa43 	bl	800c120 <HAL_I2C_GetState>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d1f9      	bne.n	8009c94 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8009d20 <lcd_send_data+0xdc>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d116      	bne.n	8009cd6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
 8009cac:	e00f      	b.n	8009cce <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	3310      	adds	r3, #16
 8009cb2:	443b      	add	r3, r7
 8009cb4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	f022 0208 	bic.w	r2, r2, #8
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	3310      	adds	r3, #16
 8009cc2:	443b      	add	r3, r7
 8009cc4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d9ec      	bls.n	8009cae <lcd_send_data+0x6a>
 8009cd4:	e015      	b.n	8009d02 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73bb      	strb	r3, [r7, #14]
 8009cda:	e00f      	b.n	8009cfc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	3310      	adds	r3, #16
 8009ce0:	443b      	add	r3, r7
 8009ce2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	f042 0208 	orr.w	r2, r2, #8
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	3310      	adds	r3, #16
 8009cf0:	443b      	add	r3, r7
 8009cf2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	73bb      	strb	r3, [r7, #14]
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d9ec      	bls.n	8009cdc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009d02:	f107 0208 	add.w	r2, r7, #8
 8009d06:	2364      	movs	r3, #100	@ 0x64
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	214e      	movs	r1, #78	@ 0x4e
 8009d0e:	4803      	ldr	r0, [pc, #12]	@ (8009d1c <lcd_send_data+0xd8>)
 8009d10:	f001 fda6 	bl	800b860 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009d14:	bf00      	nop
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20001938 	.word	0x20001938
 8009d20:	2000190d 	.word	0x2000190d

08009d24 <lcd_send_string>:

void lcd_send_string (char *str) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8009d2c:	e006      	b.n	8009d3c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff ff84 	bl	8009c44 <lcd_send_data>
	while (*str) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1f4      	bne.n	8009d2e <lcd_send_string+0xa>
	}
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <lcd_send_char>:

void lcd_send_char(char ch) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	4603      	mov	r3, r0
 8009d58:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	f023 030f 	bic.w	r3, r3, #15
 8009d60:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009d68:	7b7b      	ldrb	r3, [r7, #13]
 8009d6a:	f043 030d 	orr.w	r3, r3, #13
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8009d72:	7b7b      	ldrb	r3, [r7, #13]
 8009d74:	f043 0309 	orr.w	r3, r3, #9
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009d7c:	7b3b      	ldrb	r3, [r7, #12]
 8009d7e:	f043 030d 	orr.w	r3, r3, #13
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009d86:	7b3b      	ldrb	r3, [r7, #12]
 8009d88:	f043 0309 	orr.w	r3, r3, #9
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009d90:	bf00      	nop
 8009d92:	4825      	ldr	r0, [pc, #148]	@ (8009e28 <lcd_send_char+0xd8>)
 8009d94:	f002 f9d1 	bl	800c13a <HAL_I2C_GetError>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d0f9      	beq.n	8009d92 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009d9e:	bf00      	nop
 8009da0:	4821      	ldr	r0, [pc, #132]	@ (8009e28 <lcd_send_char+0xd8>)
 8009da2:	f002 f9bd 	bl	800c120 <HAL_I2C_GetState>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d1f9      	bne.n	8009da0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009dac:	4b1f      	ldr	r3, [pc, #124]	@ (8009e2c <lcd_send_char+0xdc>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d116      	bne.n	8009de2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
 8009db8:	e00f      	b.n	8009dda <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	3310      	adds	r3, #16
 8009dbe:	443b      	add	r3, r7
 8009dc0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	f022 0208 	bic.w	r2, r2, #8
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	3310      	adds	r3, #16
 8009dce:	443b      	add	r3, r7
 8009dd0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	73fb      	strb	r3, [r7, #15]
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d9ec      	bls.n	8009dba <lcd_send_char+0x6a>
 8009de0:	e015      	b.n	8009e0e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8009de2:	2300      	movs	r3, #0
 8009de4:	73bb      	strb	r3, [r7, #14]
 8009de6:	e00f      	b.n	8009e08 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	3310      	adds	r3, #16
 8009dec:	443b      	add	r3, r7
 8009dee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	f042 0208 	orr.w	r2, r2, #8
 8009df8:	b2d2      	uxtb	r2, r2
 8009dfa:	3310      	adds	r3, #16
 8009dfc:	443b      	add	r3, r7
 8009dfe:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	3301      	adds	r3, #1
 8009e06:	73bb      	strb	r3, [r7, #14]
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d9ec      	bls.n	8009de8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8009e0e:	f107 0208 	add.w	r2, r7, #8
 8009e12:	2364      	movs	r3, #100	@ 0x64
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	2304      	movs	r3, #4
 8009e18:	214e      	movs	r1, #78	@ 0x4e
 8009e1a:	4803      	ldr	r0, [pc, #12]	@ (8009e28 <lcd_send_char+0xd8>)
 8009e1c:	f001 fd20 	bl	800b860 <HAL_I2C_Master_Transmit>
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20001938 	.word	0x20001938
 8009e2c:	2000190d 	.word	0x2000190d

08009e30 <lcd_init>:

void lcd_init (void) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009e34:	2002      	movs	r0, #2
 8009e36:	f7ff fe95 	bl	8009b64 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009e3a:	2028      	movs	r0, #40	@ 0x28
 8009e3c:	f7ff fe92 	bl	8009b64 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009e40:	200c      	movs	r0, #12
 8009e42:	f7ff fe8f 	bl	8009b64 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009e46:	2080      	movs	r0, #128	@ 0x80
 8009e48:	f7ff fe8c 	bl	8009b64 <lcd_send_cmd>
	lcd_backlight(1);
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	f000 f86d 	bl	8009f2c <lcd_backlight>
}
 8009e52:	bf00      	nop
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	460a      	mov	r2, r1
 8009e60:	71fb      	strb	r3, [r7, #7]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d106      	bne.n	8009e7a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009e6c:	79bb      	ldrb	r3, [r7, #6]
 8009e6e:	337f      	adds	r3, #127	@ 0x7f
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fe76 	bl	8009b64 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009e78:	e008      	b.n	8009e8c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d105      	bne.n	8009e8c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009e80:	79bb      	ldrb	r3, [r7, #6]
 8009e82:	3b41      	subs	r3, #65	@ 0x41
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff fe6c 	bl	8009b64 <lcd_send_cmd>
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	603a      	str	r2, [r7, #0]
 8009e9e:	71fb      	strb	r3, [r7, #7]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009ea4:	79ba      	ldrb	r2, [r7, #6]
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff ffd3 	bl	8009e56 <lcd_gotoxy>
	lcd_send_string(str);
 8009eb0:	6838      	ldr	r0, [r7, #0]
 8009eb2:	f7ff ff37 	bl	8009d24 <lcd_send_string>
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	71fb      	strb	r3, [r7, #7]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	71bb      	strb	r3, [r7, #6]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009ed0:	79ba      	ldrb	r2, [r7, #6]
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff ffbd 	bl	8009e56 <lcd_gotoxy>
    lcd_send_char(ch);
 8009edc:	797b      	ldrb	r3, [r7, #5]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff ff36 	bl	8009d50 <lcd_send_char>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <lcd_clear>:

void lcd_clear(void) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f7ff fe37 	bl	8009b64 <lcd_send_cmd>
    HAL_Delay(2);
 8009ef6:	2002      	movs	r0, #2
 8009ef8:	f000 fd26 	bl	800a948 <HAL_Delay>
}
 8009efc:	bf00      	nop
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	460a      	mov	r2, r1
 8009f0a:	71fb      	strb	r3, [r7, #7]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009f10:	79ba      	ldrb	r2, [r7, #6]
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff ff9d 	bl	8009e56 <lcd_gotoxy>

    lcd_send_char(' ');
 8009f1c:	2020      	movs	r0, #32
 8009f1e:	f7ff ff17 	bl	8009d50 <lcd_send_char>
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009f36:	4a05      	ldr	r2, [pc, #20]	@ (8009f4c <lcd_backlight+0x20>)
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f7ff fe11 	bl	8009b64 <lcd_send_cmd>
}
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	2000190d 	.word	0x2000190d

08009f50 <lcd_cursor>:

void lcd_cursor(int state) {
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d106      	bne.n	8009f6c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009f5e:	200e      	movs	r0, #14
 8009f60:	f7ff fe00 	bl	8009b64 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009f64:	200f      	movs	r0, #15
 8009f66:	f7ff fdfd 	bl	8009b64 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009f6a:	e002      	b.n	8009f72 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009f6c:	200c      	movs	r0, #12
 8009f6e:	f7ff fdf9 	bl	8009b64 <lcd_send_cmd>
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009f84:	4b04      	ldr	r3, [pc, #16]	@ (8009f98 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	4a03      	ldr	r2, [pc, #12]	@ (8009f98 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009f8c:	6013      	str	r3, [r2, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr
 8009f98:	20001094 	.word	0x20001094

08009f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009fa0:	f000 fc70 	bl	800a884 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009fa4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009fa8:	f000 fcce 	bl	800a948 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009fac:	f000 f89c 	bl	800a0e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009fb0:	f000 f9be 	bl	800a330 <MX_GPIO_Init>
  MX_CAN_Init();
 8009fb4:	f000 f8de 	bl	800a174 <MX_CAN_Init>
  MX_I2C1_Init();
 8009fb8:	f000 f910 	bl	800a1dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8009fbc:	f000 f93c 	bl	800a238 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009fc0:	f000 f98c 	bl	800a2dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	2140      	movs	r1, #64	@ 0x40
 8009fc8:	483e      	ldr	r0, [pc, #248]	@ (800a0c4 <main+0x128>)
 8009fca:	f001 faa4 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009fce:	2201      	movs	r2, #1
 8009fd0:	2180      	movs	r1, #128	@ 0x80
 8009fd2:	483c      	ldr	r0, [pc, #240]	@ (800a0c4 <main+0x128>)
 8009fd4:	f001 fa9f 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009fd8:	200a      	movs	r0, #10
 8009fda:	f000 fcb5 	bl	800a948 <HAL_Delay>
  lcd_init();
 8009fde:	f7ff ff27 	bl	8009e30 <lcd_init>
  HAL_Delay(10);
 8009fe2:	200a      	movs	r0, #10
 8009fe4:	f000 fcb0 	bl	800a948 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009fe8:	4837      	ldr	r0, [pc, #220]	@ (800a0c8 <main+0x12c>)
 8009fea:	f003 f947 	bl	800d27c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009fee:	bf00      	nop
 8009ff0:	4836      	ldr	r0, [pc, #216]	@ (800a0cc <main+0x130>)
 8009ff2:	f002 f8a2 	bl	800c13a <HAL_I2C_GetError>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d0f9      	beq.n	8009ff0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009ffc:	bf00      	nop
 8009ffe:	4833      	ldr	r0, [pc, #204]	@ (800a0cc <main+0x130>)
 800a000:	f002 f88e 	bl	800c120 <HAL_I2C_GetState>
 800a004:	4603      	mov	r3, r0
 800a006:	2b20      	cmp	r3, #32
 800a008:	d1f9      	bne.n	8009ffe <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800a00a:	2200      	movs	r2, #0
 800a00c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a010:	482c      	ldr	r0, [pc, #176]	@ (800a0c4 <main+0x128>)
 800a012:	f001 fa80 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800a016:	2200      	movs	r2, #0
 800a018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a01c:	4829      	ldr	r0, [pc, #164]	@ (800a0c4 <main+0x128>)
 800a01e:	f001 fa7a 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800a022:	2200      	movs	r2, #0
 800a024:	2104      	movs	r1, #4
 800a026:	4827      	ldr	r0, [pc, #156]	@ (800a0c4 <main+0x128>)
 800a028:	f001 fa75 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800a02c:	2200      	movs	r2, #0
 800a02e:	2102      	movs	r1, #2
 800a030:	4824      	ldr	r0, [pc, #144]	@ (800a0c4 <main+0x128>)
 800a032:	f001 fa70 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800a036:	2200      	movs	r2, #0
 800a038:	2101      	movs	r1, #1
 800a03a:	4822      	ldr	r0, [pc, #136]	@ (800a0c4 <main+0x128>)
 800a03c:	f001 fa6b 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800a040:	2200      	movs	r2, #0
 800a042:	2120      	movs	r1, #32
 800a044:	4822      	ldr	r0, [pc, #136]	@ (800a0d0 <main+0x134>)
 800a046:	f001 fa66 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2110      	movs	r1, #16
 800a04e:	4820      	ldr	r0, [pc, #128]	@ (800a0d0 <main+0x134>)
 800a050:	f001 fa61 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800a054:	2200      	movs	r2, #0
 800a056:	2180      	movs	r1, #128	@ 0x80
 800a058:	481e      	ldr	r0, [pc, #120]	@ (800a0d4 <main+0x138>)
 800a05a:	f001 fa5c 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800a05e:	2200      	movs	r2, #0
 800a060:	2140      	movs	r1, #64	@ 0x40
 800a062:	481c      	ldr	r0, [pc, #112]	@ (800a0d4 <main+0x138>)
 800a064:	f001 fa57 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800a068:	2200      	movs	r2, #0
 800a06a:	2120      	movs	r1, #32
 800a06c:	4819      	ldr	r0, [pc, #100]	@ (800a0d4 <main+0x138>)
 800a06e:	f001 fa52 	bl	800b516 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800a072:	2200      	movs	r2, #0
 800a074:	2110      	movs	r1, #16
 800a076:	4817      	ldr	r0, [pc, #92]	@ (800a0d4 <main+0x138>)
 800a078:	f001 fa4d 	bl	800b516 <HAL_GPIO_WritePin>

  i2cTest();
 800a07c:	f7f6 fdf4 	bl	8000c68 <i2cTest>
  HAL_Delay(100);
 800a080:	2064      	movs	r0, #100	@ 0x64
 800a082:	f000 fc61 	bl	800a948 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800a086:	4a14      	ldr	r2, [pc, #80]	@ (800a0d8 <main+0x13c>)
 800a088:	2101      	movs	r1, #1
 800a08a:	2001      	movs	r0, #1
 800a08c:	f7ff ff02 	bl	8009e94 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 800a090:	4a12      	ldr	r2, [pc, #72]	@ (800a0dc <main+0x140>)
 800a092:	2101      	movs	r1, #1
 800a094:	2002      	movs	r0, #2
 800a096:	f7ff fefd 	bl	8009e94 <lcd_print>
  HAL_Delay(1000);
 800a09a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a09e:	f000 fc53 	bl	800a948 <HAL_Delay>
  lcd_clear();
 800a0a2:	f7ff ff23 	bl	8009eec <lcd_clear>

  eepromKontrol();
 800a0a6:	f7f6 f8c5 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800a0aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a0ae:	f000 fc4b 	bl	800a948 <HAL_Delay>

  backLightTimer = millis;
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e0 <main+0x144>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a0b      	ldr	r2, [pc, #44]	@ (800a0e4 <main+0x148>)
 800a0b8:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800a0ba:	f7ff fcf1 	bl	8009aa0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800a0be:	f7fd f87d 	bl	80071bc <mainLoop>
 800a0c2:	e7fc      	b.n	800a0be <main+0x122>
 800a0c4:	40010c00 	.word	0x40010c00
 800a0c8:	2000198c 	.word	0x2000198c
 800a0cc:	20001938 	.word	0x20001938
 800a0d0:	40011000 	.word	0x40011000
 800a0d4:	40010800 	.word	0x40010800
 800a0d8:	2000009c 	.word	0x2000009c
 800a0dc:	200000b0 	.word	0x200000b0
 800a0e0:	20001094 	.word	0x20001094
 800a0e4:	200010b0 	.word	0x200010b0

0800a0e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b090      	sub	sp, #64	@ 0x40
 800a0ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0ee:	f107 0318 	add.w	r3, r7, #24
 800a0f2:	2228      	movs	r2, #40	@ 0x28
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f004 fb3c 	bl	800e774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0fc:	1d3b      	adds	r3, r7, #4
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	605a      	str	r2, [r3, #4]
 800a104:	609a      	str	r2, [r3, #8]
 800a106:	60da      	str	r2, [r3, #12]
 800a108:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a10a:	2301      	movs	r3, #1
 800a10c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a10e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800a114:	2300      	movs	r3, #0
 800a116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a118:	2301      	movs	r3, #1
 800a11a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a11c:	2302      	movs	r3, #2
 800a11e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a120:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a124:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a126:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a12c:	f107 0318 	add.w	r3, r7, #24
 800a130:	4618      	mov	r0, r3
 800a132:	f002 fc43 	bl	800c9bc <HAL_RCC_OscConfig>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800a13c:	f000 f9a2 	bl	800a484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a140:	230f      	movs	r3, #15
 800a142:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a144:	2302      	movs	r3, #2
 800a146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a14c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a156:	1d3b      	adds	r3, r7, #4
 800a158:	2102      	movs	r1, #2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 feb0 	bl	800cec0 <HAL_RCC_ClockConfig>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <SystemClock_Config+0x82>
  {
    Error_Handler();
 800a166:	f000 f98d 	bl	800a484 <Error_Handler>
  }
}
 800a16a:	bf00      	nop
 800a16c:	3740      	adds	r7, #64	@ 0x40
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800a178:	4b16      	ldr	r3, [pc, #88]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a17a:	4a17      	ldr	r2, [pc, #92]	@ (800a1d8 <MX_CAN_Init+0x64>)
 800a17c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800a17e:	4b15      	ldr	r3, [pc, #84]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a180:	2210      	movs	r2, #16
 800a182:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800a184:	4b13      	ldr	r3, [pc, #76]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a186:	2200      	movs	r2, #0
 800a188:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a18a:	4b12      	ldr	r3, [pc, #72]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a190:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a192:	2200      	movs	r2, #0
 800a194:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a196:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a198:	2200      	movs	r2, #0
 800a19a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800a19c:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800a1ae:	4b09      	ldr	r3, [pc, #36]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800a1b4:	4b07      	ldr	r3, [pc, #28]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800a1ba:	4b06      	ldr	r3, [pc, #24]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800a1c0:	4804      	ldr	r0, [pc, #16]	@ (800a1d4 <MX_CAN_Init+0x60>)
 800a1c2:	f000 fbe5 	bl	800a990 <HAL_CAN_Init>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800a1cc:	f000 f95a 	bl	800a484 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800a1d0:	bf00      	nop
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20001910 	.word	0x20001910
 800a1d8:	40006400 	.word	0x40006400

0800a1dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a1e0:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a1e2:	4a13      	ldr	r2, [pc, #76]	@ (800a230 <MX_I2C1_Init+0x54>)
 800a1e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a1e6:	4b11      	ldr	r3, [pc, #68]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a1e8:	4a12      	ldr	r2, [pc, #72]	@ (800a234 <MX_I2C1_Init+0x58>)
 800a1ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a1fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a1fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a200:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a202:	2200      	movs	r2, #0
 800a204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a206:	4b09      	ldr	r3, [pc, #36]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a208:	2200      	movs	r2, #0
 800a20a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a20c:	4b07      	ldr	r3, [pc, #28]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a20e:	2200      	movs	r2, #0
 800a210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a212:	4b06      	ldr	r3, [pc, #24]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a214:	2200      	movs	r2, #0
 800a216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a218:	4804      	ldr	r0, [pc, #16]	@ (800a22c <MX_I2C1_Init+0x50>)
 800a21a:	f001 f9ad 	bl	800b578 <HAL_I2C_Init>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a224:	f000 f92e 	bl	800a484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800a228:	bf00      	nop
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20001938 	.word	0x20001938
 800a230:	40005400 	.word	0x40005400
 800a234:	00061a80 	.word	0x00061a80

0800a238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a23e:	f107 0308 	add.w	r3, r7, #8
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	605a      	str	r2, [r3, #4]
 800a248:	609a      	str	r2, [r3, #8]
 800a24a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a24c:	463b      	mov	r3, r7
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a254:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a256:	4a20      	ldr	r2, [pc, #128]	@ (800a2d8 <MX_TIM1_Init+0xa0>)
 800a258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800a25a:	4b1e      	ldr	r3, [pc, #120]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a25c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800a260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a262:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a264:	2200      	movs	r2, #0
 800a266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800a268:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a26a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800a26e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a270:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a276:	4b17      	ldr	r3, [pc, #92]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a278:	2200      	movs	r2, #0
 800a27a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a27c:	4b15      	ldr	r3, [pc, #84]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a27e:	2200      	movs	r2, #0
 800a280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a282:	4814      	ldr	r0, [pc, #80]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a284:	f002 ffaa 	bl	800d1dc <HAL_TIM_Base_Init>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a28e:	f000 f8f9 	bl	800a484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a296:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a298:	f107 0308 	add.w	r3, r7, #8
 800a29c:	4619      	mov	r1, r3
 800a29e:	480d      	ldr	r0, [pc, #52]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a2a0:	f003 f954 	bl	800d54c <HAL_TIM_ConfigClockSource>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a2aa:	f000 f8eb 	bl	800a484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4806      	ldr	r0, [pc, #24]	@ (800a2d4 <MX_TIM1_Init+0x9c>)
 800a2bc:	f003 fb42 	bl	800d944 <HAL_TIMEx_MasterConfigSynchronization>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a2c6:	f000 f8dd 	bl	800a484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a2ca:	bf00      	nop
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	2000198c 	.word	0x2000198c
 800a2d8:	40012c00 	.word	0x40012c00

0800a2dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a2e0:	4b11      	ldr	r3, [pc, #68]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a2e2:	4a12      	ldr	r2, [pc, #72]	@ (800a32c <MX_USART1_UART_Init+0x50>)
 800a2e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a2e6:	4b10      	ldr	r3, [pc, #64]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a2e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a2ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a300:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a302:	220c      	movs	r2, #12
 800a304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a306:	4b08      	ldr	r3, [pc, #32]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a308:	2200      	movs	r2, #0
 800a30a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a30c:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a312:	4805      	ldr	r0, [pc, #20]	@ (800a328 <MX_USART1_UART_Init+0x4c>)
 800a314:	f003 fb94 	bl	800da40 <HAL_UART_Init>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a31e:	f000 f8b1 	bl	800a484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200019d4 	.word	0x200019d4
 800a32c:	40013800 	.word	0x40013800

0800a330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a336:	f107 0310 	add.w	r3, r7, #16
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	609a      	str	r2, [r3, #8]
 800a342:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a344:	4b4b      	ldr	r3, [pc, #300]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	4a4a      	ldr	r2, [pc, #296]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a34a:	f043 0310 	orr.w	r3, r3, #16
 800a34e:	6193      	str	r3, [r2, #24]
 800a350:	4b48      	ldr	r3, [pc, #288]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a35c:	4b45      	ldr	r3, [pc, #276]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	4a44      	ldr	r2, [pc, #272]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a362:	f043 0320 	orr.w	r3, r3, #32
 800a366:	6193      	str	r3, [r2, #24]
 800a368:	4b42      	ldr	r3, [pc, #264]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a374:	4b3f      	ldr	r3, [pc, #252]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	4a3e      	ldr	r2, [pc, #248]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a37a:	f043 0304 	orr.w	r3, r3, #4
 800a37e:	6193      	str	r3, [r2, #24]
 800a380:	4b3c      	ldr	r3, [pc, #240]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	607b      	str	r3, [r7, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a38c:	4b39      	ldr	r3, [pc, #228]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	4a38      	ldr	r2, [pc, #224]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a392:	f043 0308 	orr.w	r3, r3, #8
 800a396:	6193      	str	r3, [r2, #24]
 800a398:	4b36      	ldr	r3, [pc, #216]	@ (800a474 <MX_GPIO_Init+0x144>)
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	f003 0308 	and.w	r3, r3, #8
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	21f0      	movs	r1, #240	@ 0xf0
 800a3a8:	4833      	ldr	r0, [pc, #204]	@ (800a478 <MX_GPIO_Init+0x148>)
 800a3aa:	f001 f8b4 	bl	800b516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f241 0130 	movw	r1, #4144	@ 0x1030
 800a3b4:	4831      	ldr	r0, [pc, #196]	@ (800a47c <MX_GPIO_Init+0x14c>)
 800a3b6:	f001 f8ae 	bl	800b516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f640 4107 	movw	r1, #3079	@ 0xc07
 800a3c0:	482f      	ldr	r0, [pc, #188]	@ (800a480 <MX_GPIO_Init+0x150>)
 800a3c2:	f001 f8a8 	bl	800b516 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800a3c6:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800a3ca:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3d4:	f107 0310 	add.w	r3, r7, #16
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4828      	ldr	r0, [pc, #160]	@ (800a47c <MX_GPIO_Init+0x14c>)
 800a3dc:	f000 fe24 	bl	800b028 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800a3e0:	f248 130f 	movw	r3, #33039	@ 0x810f
 800a3e4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3ee:	f107 0310 	add.w	r3, r7, #16
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4820      	ldr	r0, [pc, #128]	@ (800a478 <MX_GPIO_Init+0x148>)
 800a3f6:	f000 fe17 	bl	800b028 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800a3fa:	23f0      	movs	r3, #240	@ 0xf0
 800a3fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3fe:	2301      	movs	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a402:	2300      	movs	r3, #0
 800a404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a406:	2302      	movs	r3, #2
 800a408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a40a:	f107 0310 	add.w	r3, r7, #16
 800a40e:	4619      	mov	r1, r3
 800a410:	4819      	ldr	r0, [pc, #100]	@ (800a478 <MX_GPIO_Init+0x148>)
 800a412:	f000 fe09 	bl	800b028 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800a416:	f241 0330 	movw	r3, #4144	@ 0x1030
 800a41a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a41c:	2301      	movs	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a420:	2300      	movs	r3, #0
 800a422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a424:	2302      	movs	r3, #2
 800a426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a428:	f107 0310 	add.w	r3, r7, #16
 800a42c:	4619      	mov	r1, r3
 800a42e:	4813      	ldr	r0, [pc, #76]	@ (800a47c <MX_GPIO_Init+0x14c>)
 800a430:	f000 fdfa 	bl	800b028 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a434:	f640 4307 	movw	r3, #3079	@ 0xc07
 800a438:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a43a:	2301      	movs	r3, #1
 800a43c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a442:	2302      	movs	r3, #2
 800a444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a446:	f107 0310 	add.w	r3, r7, #16
 800a44a:	4619      	mov	r1, r3
 800a44c:	480c      	ldr	r0, [pc, #48]	@ (800a480 <MX_GPIO_Init+0x150>)
 800a44e:	f000 fdeb 	bl	800b028 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800a452:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a460:	f107 0310 	add.w	r3, r7, #16
 800a464:	4619      	mov	r1, r3
 800a466:	4806      	ldr	r0, [pc, #24]	@ (800a480 <MX_GPIO_Init+0x150>)
 800a468:	f000 fdde 	bl	800b028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a46c:	bf00      	nop
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40021000 	.word	0x40021000
 800a478:	40010800 	.word	0x40010800
 800a47c:	40011000 	.word	0x40011000
 800a480:	40010c00 	.word	0x40010c00

0800a484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a484:	b480      	push	{r7}
 800a486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800a488:	bf00      	nop
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a496:	4b15      	ldr	r3, [pc, #84]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	4a14      	ldr	r2, [pc, #80]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	6193      	str	r3, [r2, #24]
 800a4a2:	4b12      	ldr	r3, [pc, #72]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	60bb      	str	r3, [r7, #8]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a4b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4b8:	61d3      	str	r3, [r2, #28]
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a4ec <HAL_MspInit+0x5c>)
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4c2:	607b      	str	r3, [r7, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f0 <HAL_MspInit+0x60>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	4a04      	ldr	r2, [pc, #16]	@ (800a4f0 <HAL_MspInit+0x60>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bc80      	pop	{r7}
 800a4ea:	4770      	bx	lr
 800a4ec:	40021000 	.word	0x40021000
 800a4f0:	40010000 	.word	0x40010000

0800a4f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4fc:	f107 0310 	add.w	r3, r7, #16
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	605a      	str	r2, [r3, #4]
 800a506:	609a      	str	r2, [r3, #8]
 800a508:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a1c      	ldr	r2, [pc, #112]	@ (800a580 <HAL_CAN_MspInit+0x8c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d131      	bne.n	800a578 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a514:	4b1b      	ldr	r3, [pc, #108]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	4a1a      	ldr	r2, [pc, #104]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a51a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a51e:	61d3      	str	r3, [r2, #28]
 800a520:	4b18      	ldr	r3, [pc, #96]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a52c:	4b15      	ldr	r3, [pc, #84]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	4a14      	ldr	r2, [pc, #80]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a532:	f043 0304 	orr.w	r3, r3, #4
 800a536:	6193      	str	r3, [r2, #24]
 800a538:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <HAL_CAN_MspInit+0x90>)
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	60bb      	str	r3, [r7, #8]
 800a542:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a544:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a54a:	2300      	movs	r3, #0
 800a54c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a552:	f107 0310 	add.w	r3, r7, #16
 800a556:	4619      	mov	r1, r3
 800a558:	480b      	ldr	r0, [pc, #44]	@ (800a588 <HAL_CAN_MspInit+0x94>)
 800a55a:	f000 fd65 	bl	800b028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a55e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a564:	2302      	movs	r3, #2
 800a566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a568:	2303      	movs	r3, #3
 800a56a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a56c:	f107 0310 	add.w	r3, r7, #16
 800a570:	4619      	mov	r1, r3
 800a572:	4805      	ldr	r0, [pc, #20]	@ (800a588 <HAL_CAN_MspInit+0x94>)
 800a574:	f000 fd58 	bl	800b028 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a578:	bf00      	nop
 800a57a:	3720      	adds	r7, #32
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	40006400 	.word	0x40006400
 800a584:	40021000 	.word	0x40021000
 800a588:	40010800 	.word	0x40010800

0800a58c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a594:	f107 0310 	add.w	r3, r7, #16
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	605a      	str	r2, [r3, #4]
 800a59e:	609a      	str	r2, [r3, #8]
 800a5a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a15      	ldr	r2, [pc, #84]	@ (800a5fc <HAL_I2C_MspInit+0x70>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d123      	bne.n	800a5f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ac:	4b14      	ldr	r3, [pc, #80]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	4a13      	ldr	r2, [pc, #76]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5b2:	f043 0308 	orr.w	r3, r3, #8
 800a5b6:	6193      	str	r3, [r2, #24]
 800a5b8:	4b11      	ldr	r3, [pc, #68]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a5c4:	23c0      	movs	r3, #192	@ 0xc0
 800a5c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a5c8:	2312      	movs	r3, #18
 800a5ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5d0:	f107 0310 	add.w	r3, r7, #16
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	480b      	ldr	r0, [pc, #44]	@ (800a604 <HAL_I2C_MspInit+0x78>)
 800a5d8:	f000 fd26 	bl	800b028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a5dc:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	4a07      	ldr	r2, [pc, #28]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5e6:	61d3      	str	r3, [r2, #28]
 800a5e8:	4b05      	ldr	r3, [pc, #20]	@ (800a600 <HAL_I2C_MspInit+0x74>)
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5f0:	60bb      	str	r3, [r7, #8]
 800a5f2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a5f4:	bf00      	nop
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	40005400 	.word	0x40005400
 800a600:	40021000 	.word	0x40021000
 800a604:	40010c00 	.word	0x40010c00

0800a608 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a0a      	ldr	r2, [pc, #40]	@ (800a640 <HAL_I2C_MspDeInit+0x38>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d10d      	bne.n	800a636 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a61a:	4b0a      	ldr	r3, [pc, #40]	@ (800a644 <HAL_I2C_MspDeInit+0x3c>)
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	4a09      	ldr	r2, [pc, #36]	@ (800a644 <HAL_I2C_MspDeInit+0x3c>)
 800a620:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a624:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a626:	2140      	movs	r1, #64	@ 0x40
 800a628:	4807      	ldr	r0, [pc, #28]	@ (800a648 <HAL_I2C_MspDeInit+0x40>)
 800a62a:	f000 fe91 	bl	800b350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a62e:	2180      	movs	r1, #128	@ 0x80
 800a630:	4805      	ldr	r0, [pc, #20]	@ (800a648 <HAL_I2C_MspDeInit+0x40>)
 800a632:	f000 fe8d 	bl	800b350 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a636:	bf00      	nop
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40005400 	.word	0x40005400
 800a644:	40021000 	.word	0x40021000
 800a648:	40010c00 	.word	0x40010c00

0800a64c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a0d      	ldr	r2, [pc, #52]	@ (800a690 <HAL_TIM_Base_MspInit+0x44>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d113      	bne.n	800a686 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a65e:	4b0d      	ldr	r3, [pc, #52]	@ (800a694 <HAL_TIM_Base_MspInit+0x48>)
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	4a0c      	ldr	r2, [pc, #48]	@ (800a694 <HAL_TIM_Base_MspInit+0x48>)
 800a664:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a668:	6193      	str	r3, [r2, #24]
 800a66a:	4b0a      	ldr	r3, [pc, #40]	@ (800a694 <HAL_TIM_Base_MspInit+0x48>)
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	2019      	movs	r0, #25
 800a67c:	f000 fb5b 	bl	800ad36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a680:	2019      	movs	r0, #25
 800a682:	f000 fb74 	bl	800ad6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	40012c00 	.word	0x40012c00
 800a694:	40021000 	.word	0x40021000

0800a698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a0:	f107 0310 	add.w	r3, r7, #16
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	605a      	str	r2, [r3, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
 800a6ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a20      	ldr	r2, [pc, #128]	@ (800a734 <HAL_UART_MspInit+0x9c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d139      	bne.n	800a72c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a6b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a6c2:	6193      	str	r3, [r2, #24]
 800a6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6d0:	4b19      	ldr	r3, [pc, #100]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	4a18      	ldr	r2, [pc, #96]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6d6:	f043 0304 	orr.w	r3, r3, #4
 800a6da:	6193      	str	r3, [r2, #24]
 800a6dc:	4b16      	ldr	r3, [pc, #88]	@ (800a738 <HAL_UART_MspInit+0xa0>)
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	60bb      	str	r3, [r7, #8]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a6e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6f6:	f107 0310 	add.w	r3, r7, #16
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	480f      	ldr	r0, [pc, #60]	@ (800a73c <HAL_UART_MspInit+0xa4>)
 800a6fe:	f000 fc93 	bl	800b028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a710:	f107 0310 	add.w	r3, r7, #16
 800a714:	4619      	mov	r1, r3
 800a716:	4809      	ldr	r0, [pc, #36]	@ (800a73c <HAL_UART_MspInit+0xa4>)
 800a718:	f000 fc86 	bl	800b028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a71c:	2200      	movs	r2, #0
 800a71e:	2100      	movs	r1, #0
 800a720:	2025      	movs	r0, #37	@ 0x25
 800a722:	f000 fb08 	bl	800ad36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a726:	2025      	movs	r0, #37	@ 0x25
 800a728:	f000 fb21 	bl	800ad6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a72c:	bf00      	nop
 800a72e:	3720      	adds	r7, #32
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	40013800 	.word	0x40013800
 800a738:	40021000 	.word	0x40021000
 800a73c:	40010800 	.word	0x40010800

0800a740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <NMI_Handler+0x4>

0800a748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a74c:	bf00      	nop
 800a74e:	e7fd      	b.n	800a74c <HardFault_Handler+0x4>

0800a750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a754:	bf00      	nop
 800a756:	e7fd      	b.n	800a754 <MemManage_Handler+0x4>

0800a758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a75c:	bf00      	nop
 800a75e:	e7fd      	b.n	800a75c <BusFault_Handler+0x4>

0800a760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <UsageFault_Handler+0x4>

0800a768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a76c:	bf00      	nop
 800a76e:	46bd      	mov	sp, r7
 800a770:	bc80      	pop	{r7}
 800a772:	4770      	bx	lr

0800a774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a778:	bf00      	nop
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	bc80      	pop	{r7}
 800a78a:	4770      	bx	lr

0800a78c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a790:	f000 f8be 	bl	800a910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a794:	bf00      	nop
 800a796:	bd80      	pop	{r7, pc}

0800a798 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a79c:	4802      	ldr	r0, [pc, #8]	@ (800a7a8 <TIM1_UP_IRQHandler+0x10>)
 800a79e:	f002 fdcd 	bl	800d33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000198c 	.word	0x2000198c

0800a7ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a7b0:	4802      	ldr	r0, [pc, #8]	@ (800a7bc <USART1_IRQHandler+0x10>)
 800a7b2:	f003 f9cb 	bl	800db4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200019d4 	.word	0x200019d4

0800a7c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a7c8:	4a14      	ldr	r2, [pc, #80]	@ (800a81c <_sbrk+0x5c>)
 800a7ca:	4b15      	ldr	r3, [pc, #84]	@ (800a820 <_sbrk+0x60>)
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a7d4:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <_sbrk+0x64>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a7dc:	4b11      	ldr	r3, [pc, #68]	@ (800a824 <_sbrk+0x64>)
 800a7de:	4a12      	ldr	r2, [pc, #72]	@ (800a828 <_sbrk+0x68>)
 800a7e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a7e2:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <_sbrk+0x64>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d207      	bcs.n	800a800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a7f0:	f003 fffa 	bl	800e7e8 <__errno>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	220c      	movs	r2, #12
 800a7f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fe:	e009      	b.n	800a814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a800:	4b08      	ldr	r3, [pc, #32]	@ (800a824 <_sbrk+0x64>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a806:	4b07      	ldr	r3, [pc, #28]	@ (800a824 <_sbrk+0x64>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	4a05      	ldr	r2, [pc, #20]	@ (800a824 <_sbrk+0x64>)
 800a810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a812:	68fb      	ldr	r3, [r7, #12]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	2000c000 	.word	0x2000c000
 800a820:	00000400 	.word	0x00000400
 800a824:	20001a1c 	.word	0x20001a1c
 800a828:	20001b70 	.word	0x20001b70

0800a82c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	bc80      	pop	{r7}
 800a836:	4770      	bx	lr

0800a838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a838:	480c      	ldr	r0, [pc, #48]	@ (800a86c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a83a:	490d      	ldr	r1, [pc, #52]	@ (800a870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a83c:	4a0d      	ldr	r2, [pc, #52]	@ (800a874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a83e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a840:	e002      	b.n	800a848 <LoopCopyDataInit>

0800a842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a846:	3304      	adds	r3, #4

0800a848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a84a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a84c:	d3f9      	bcc.n	800a842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a84e:	4a0a      	ldr	r2, [pc, #40]	@ (800a878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a850:	4c0a      	ldr	r4, [pc, #40]	@ (800a87c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a852:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a854:	e001      	b.n	800a85a <LoopFillZerobss>

0800a856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a858:	3204      	adds	r2, #4

0800a85a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a85a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a85c:	d3fb      	bcc.n	800a856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a85e:	f7ff ffe5 	bl	800a82c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a862:	f003 ffc7 	bl	800e7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a866:	f7ff fb99 	bl	8009f9c <main>
  bx lr
 800a86a:	4770      	bx	lr
  ldr r0, =_sdata
 800a86c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a870:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 800a874:	0800f440 	.word	0x0800f440
  ldr r2, =_sbss
 800a878:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 800a87c:	20001b6c 	.word	0x20001b6c

0800a880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a880:	e7fe      	b.n	800a880 <ADC1_2_IRQHandler>
	...

0800a884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a888:	4b08      	ldr	r3, [pc, #32]	@ (800a8ac <HAL_Init+0x28>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a07      	ldr	r2, [pc, #28]	@ (800a8ac <HAL_Init+0x28>)
 800a88e:	f043 0310 	orr.w	r3, r3, #16
 800a892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a894:	2003      	movs	r0, #3
 800a896:	f000 fa43 	bl	800ad20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a89a:	200f      	movs	r0, #15
 800a89c:	f000 f808 	bl	800a8b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a8a0:	f7ff fdf6 	bl	800a490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	40022000 	.word	0x40022000

0800a8b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a8b8:	4b12      	ldr	r3, [pc, #72]	@ (800a904 <HAL_InitTick+0x54>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b12      	ldr	r3, [pc, #72]	@ (800a908 <HAL_InitTick+0x58>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a8c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fa5b 	bl	800ad8a <HAL_SYSTICK_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e00e      	b.n	800a8fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b0f      	cmp	r3, #15
 800a8e2:	d80a      	bhi.n	800a8fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	f000 fa23 	bl	800ad36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a8f0:	4a06      	ldr	r2, [pc, #24]	@ (800a90c <HAL_InitTick+0x5c>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e000      	b.n	800a8fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000f74 	.word	0x20000f74
 800a908:	20000f7c 	.word	0x20000f7c
 800a90c:	20000f78 	.word	0x20000f78

0800a910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a914:	4b05      	ldr	r3, [pc, #20]	@ (800a92c <HAL_IncTick+0x1c>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	461a      	mov	r2, r3
 800a91a:	4b05      	ldr	r3, [pc, #20]	@ (800a930 <HAL_IncTick+0x20>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4413      	add	r3, r2
 800a920:	4a03      	ldr	r2, [pc, #12]	@ (800a930 <HAL_IncTick+0x20>)
 800a922:	6013      	str	r3, [r2, #0]
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr
 800a92c:	20000f7c 	.word	0x20000f7c
 800a930:	20001a20 	.word	0x20001a20

0800a934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  return uwTick;
 800a938:	4b02      	ldr	r3, [pc, #8]	@ (800a944 <HAL_GetTick+0x10>)
 800a93a:	681b      	ldr	r3, [r3, #0]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	46bd      	mov	sp, r7
 800a940:	bc80      	pop	{r7}
 800a942:	4770      	bx	lr
 800a944:	20001a20 	.word	0x20001a20

0800a948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a950:	f7ff fff0 	bl	800a934 <HAL_GetTick>
 800a954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a960:	d005      	beq.n	800a96e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <HAL_Delay+0x44>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a96e:	bf00      	nop
 800a970:	f7ff ffe0 	bl	800a934 <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d8f7      	bhi.n	800a970 <HAL_Delay+0x28>
  {
  }
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20000f7c 	.word	0x20000f7c

0800a990 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e0ed      	b.n	800ab7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff fda0 	bl	800a4f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0201 	orr.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a9c4:	f7ff ffb6 	bl	800a934 <HAL_GetTick>
 800a9c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a9ca:	e012      	b.n	800a9f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a9cc:	f7ff ffb2 	bl	800a934 <HAL_GetTick>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b0a      	cmp	r3, #10
 800a9d8:	d90b      	bls.n	800a9f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e0c5      	b.n	800ab7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0e5      	beq.n	800a9cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0202 	bic.w	r2, r2, #2
 800aa0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa10:	f7ff ff90 	bl	800a934 <HAL_GetTick>
 800aa14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aa16:	e012      	b.n	800aa3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aa18:	f7ff ff8c 	bl	800a934 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b0a      	cmp	r3, #10
 800aa24:	d90b      	bls.n	800aa3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2205      	movs	r2, #5
 800aa36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e09f      	b.n	800ab7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e5      	bne.n	800aa18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	7e1b      	ldrb	r3, [r3, #24]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d108      	bne.n	800aa66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e007      	b.n	800aa76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7e5b      	ldrb	r3, [r3, #25]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d108      	bne.n	800aa90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e007      	b.n	800aaa0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7e9b      	ldrb	r3, [r3, #26]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d108      	bne.n	800aaba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0220 	orr.w	r2, r2, #32
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	e007      	b.n	800aaca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0220 	bic.w	r2, r2, #32
 800aac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	7edb      	ldrb	r3, [r3, #27]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d108      	bne.n	800aae4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0210 	bic.w	r2, r2, #16
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e007      	b.n	800aaf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0210 	orr.w	r2, r2, #16
 800aaf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	7f1b      	ldrb	r3, [r3, #28]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d108      	bne.n	800ab0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0208 	orr.w	r2, r2, #8
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	e007      	b.n	800ab1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f022 0208 	bic.w	r2, r2, #8
 800ab1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7f5b      	ldrb	r3, [r3, #29]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d108      	bne.n	800ab38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0204 	orr.w	r2, r2, #4
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e007      	b.n	800ab48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0204 	bic.w	r2, r2, #4
 800ab46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689a      	ldr	r2, [r3, #8]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	ea42 0103 	orr.w	r1, r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <__NVIC_SetPriorityGrouping>:
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab98:	4b0c      	ldr	r3, [pc, #48]	@ (800abcc <__NVIC_SetPriorityGrouping+0x44>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aba4:	4013      	ands	r3, r2
 800aba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800abb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800abb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800abba:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <__NVIC_SetPriorityGrouping+0x44>)
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	60d3      	str	r3, [r2, #12]
}
 800abc0:	bf00      	nop
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	e000ed00 	.word	0xe000ed00

0800abd0 <__NVIC_GetPriorityGrouping>:
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abd4:	4b04      	ldr	r3, [pc, #16]	@ (800abe8 <__NVIC_GetPriorityGrouping+0x18>)
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	0a1b      	lsrs	r3, r3, #8
 800abda:	f003 0307 	and.w	r3, r3, #7
}
 800abde:	4618      	mov	r0, r3
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	e000ed00 	.word	0xe000ed00

0800abec <__NVIC_EnableIRQ>:
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	db0b      	blt.n	800ac16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	f003 021f 	and.w	r2, r3, #31
 800ac04:	4906      	ldr	r1, [pc, #24]	@ (800ac20 <__NVIC_EnableIRQ+0x34>)
 800ac06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	fa00 f202 	lsl.w	r2, r0, r2
 800ac12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr
 800ac20:	e000e100 	.word	0xe000e100

0800ac24 <__NVIC_SetPriority>:
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db0a      	blt.n	800ac4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	490c      	ldr	r1, [pc, #48]	@ (800ac70 <__NVIC_SetPriority+0x4c>)
 800ac3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac42:	0112      	lsls	r2, r2, #4
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	440b      	add	r3, r1
 800ac48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ac4c:	e00a      	b.n	800ac64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	4908      	ldr	r1, [pc, #32]	@ (800ac74 <__NVIC_SetPriority+0x50>)
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	3b04      	subs	r3, #4
 800ac5c:	0112      	lsls	r2, r2, #4
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	440b      	add	r3, r1
 800ac62:	761a      	strb	r2, [r3, #24]
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	e000e100 	.word	0xe000e100
 800ac74:	e000ed00 	.word	0xe000ed00

0800ac78 <NVIC_EncodePriority>:
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b089      	sub	sp, #36	@ 0x24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	f1c3 0307 	rsb	r3, r3, #7
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	bf28      	it	cs
 800ac96:	2304      	movcs	r3, #4
 800ac98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	d902      	bls.n	800aca8 <NVIC_EncodePriority+0x30>
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	3b03      	subs	r3, #3
 800aca6:	e000      	b.n	800acaa <NVIC_EncodePriority+0x32>
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acac:	f04f 32ff 	mov.w	r2, #4294967295
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	fa02 f303 	lsl.w	r3, r2, r3
 800acb6:	43da      	mvns	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	401a      	ands	r2, r3
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acc0:	f04f 31ff 	mov.w	r1, #4294967295
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	fa01 f303 	lsl.w	r3, r1, r3
 800acca:	43d9      	mvns	r1, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acd0:	4313      	orrs	r3, r2
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3724      	adds	r7, #36	@ 0x24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr

0800acdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acec:	d301      	bcc.n	800acf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800acee:	2301      	movs	r3, #1
 800acf0:	e00f      	b.n	800ad12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800acf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ad1c <SysTick_Config+0x40>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800acfa:	210f      	movs	r1, #15
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	f7ff ff90 	bl	800ac24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <SysTick_Config+0x40>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad0a:	4b04      	ldr	r3, [pc, #16]	@ (800ad1c <SysTick_Config+0x40>)
 800ad0c:	2207      	movs	r2, #7
 800ad0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	e000e010 	.word	0xe000e010

0800ad20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff2d 	bl	800ab88 <__NVIC_SetPriorityGrouping>
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b086      	sub	sp, #24
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
 800ad42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ad48:	f7ff ff42 	bl	800abd0 <__NVIC_GetPriorityGrouping>
 800ad4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	6978      	ldr	r0, [r7, #20]
 800ad54:	f7ff ff90 	bl	800ac78 <NVIC_EncodePriority>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff ff5f 	bl	800ac24 <__NVIC_SetPriority>
}
 800ad66:	bf00      	nop
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	4603      	mov	r3, r0
 800ad76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff ff35 	bl	800abec <__NVIC_EnableIRQ>
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff ffa2 	bl	800acdc <SysTick_Config>
 800ad98:	4603      	mov	r3, r0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d008      	beq.n	800adcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2204      	movs	r2, #4
 800adbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e020      	b.n	800ae0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 020e 	bic.w	r2, r2, #14
 800adda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf4:	2101      	movs	r1, #1
 800adf6:	fa01 f202 	lsl.w	r2, r1, r2
 800adfa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bc80      	pop	{r7}
 800ae16:	4770      	bx	lr

0800ae18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d005      	beq.n	800ae3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2204      	movs	r2, #4
 800ae34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
 800ae3a:	e0d6      	b.n	800afea <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 020e 	bic.w	r2, r2, #14
 800ae4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0201 	bic.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	4b64      	ldr	r3, [pc, #400]	@ (800aff4 <HAL_DMA_Abort_IT+0x1dc>)
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d958      	bls.n	800af1a <HAL_DMA_Abort_IT+0x102>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a62      	ldr	r2, [pc, #392]	@ (800aff8 <HAL_DMA_Abort_IT+0x1e0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d04f      	beq.n	800af12 <HAL_DMA_Abort_IT+0xfa>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a61      	ldr	r2, [pc, #388]	@ (800affc <HAL_DMA_Abort_IT+0x1e4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d048      	beq.n	800af0e <HAL_DMA_Abort_IT+0xf6>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a5f      	ldr	r2, [pc, #380]	@ (800b000 <HAL_DMA_Abort_IT+0x1e8>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d040      	beq.n	800af08 <HAL_DMA_Abort_IT+0xf0>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a5e      	ldr	r2, [pc, #376]	@ (800b004 <HAL_DMA_Abort_IT+0x1ec>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d038      	beq.n	800af02 <HAL_DMA_Abort_IT+0xea>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a5c      	ldr	r2, [pc, #368]	@ (800b008 <HAL_DMA_Abort_IT+0x1f0>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d030      	beq.n	800aefc <HAL_DMA_Abort_IT+0xe4>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a5b      	ldr	r2, [pc, #364]	@ (800b00c <HAL_DMA_Abort_IT+0x1f4>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d028      	beq.n	800aef6 <HAL_DMA_Abort_IT+0xde>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a52      	ldr	r2, [pc, #328]	@ (800aff4 <HAL_DMA_Abort_IT+0x1dc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d020      	beq.n	800aef0 <HAL_DMA_Abort_IT+0xd8>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a57      	ldr	r2, [pc, #348]	@ (800b010 <HAL_DMA_Abort_IT+0x1f8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d019      	beq.n	800aeec <HAL_DMA_Abort_IT+0xd4>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a55      	ldr	r2, [pc, #340]	@ (800b014 <HAL_DMA_Abort_IT+0x1fc>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d012      	beq.n	800aee8 <HAL_DMA_Abort_IT+0xd0>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a54      	ldr	r2, [pc, #336]	@ (800b018 <HAL_DMA_Abort_IT+0x200>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00a      	beq.n	800aee2 <HAL_DMA_Abort_IT+0xca>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a52      	ldr	r2, [pc, #328]	@ (800b01c <HAL_DMA_Abort_IT+0x204>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d102      	bne.n	800aedc <HAL_DMA_Abort_IT+0xc4>
 800aed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeda:	e01b      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aedc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aee0:	e018      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aee6:	e015      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aee8:	2310      	movs	r3, #16
 800aeea:	e013      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e011      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aef4:	e00e      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aef6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aefa:	e00b      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800aefc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800af00:	e008      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800af02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af06:	e005      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800af08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af0c:	e002      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800af0e:	2310      	movs	r3, #16
 800af10:	e000      	b.n	800af14 <HAL_DMA_Abort_IT+0xfc>
 800af12:	2301      	movs	r3, #1
 800af14:	4a42      	ldr	r2, [pc, #264]	@ (800b020 <HAL_DMA_Abort_IT+0x208>)
 800af16:	6053      	str	r3, [r2, #4]
 800af18:	e057      	b.n	800afca <HAL_DMA_Abort_IT+0x1b2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a36      	ldr	r2, [pc, #216]	@ (800aff8 <HAL_DMA_Abort_IT+0x1e0>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d04f      	beq.n	800afc4 <HAL_DMA_Abort_IT+0x1ac>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a34      	ldr	r2, [pc, #208]	@ (800affc <HAL_DMA_Abort_IT+0x1e4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d048      	beq.n	800afc0 <HAL_DMA_Abort_IT+0x1a8>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a33      	ldr	r2, [pc, #204]	@ (800b000 <HAL_DMA_Abort_IT+0x1e8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d040      	beq.n	800afba <HAL_DMA_Abort_IT+0x1a2>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a31      	ldr	r2, [pc, #196]	@ (800b004 <HAL_DMA_Abort_IT+0x1ec>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d038      	beq.n	800afb4 <HAL_DMA_Abort_IT+0x19c>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a30      	ldr	r2, [pc, #192]	@ (800b008 <HAL_DMA_Abort_IT+0x1f0>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d030      	beq.n	800afae <HAL_DMA_Abort_IT+0x196>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a2e      	ldr	r2, [pc, #184]	@ (800b00c <HAL_DMA_Abort_IT+0x1f4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d028      	beq.n	800afa8 <HAL_DMA_Abort_IT+0x190>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a26      	ldr	r2, [pc, #152]	@ (800aff4 <HAL_DMA_Abort_IT+0x1dc>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d020      	beq.n	800afa2 <HAL_DMA_Abort_IT+0x18a>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a2a      	ldr	r2, [pc, #168]	@ (800b010 <HAL_DMA_Abort_IT+0x1f8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d019      	beq.n	800af9e <HAL_DMA_Abort_IT+0x186>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a29      	ldr	r2, [pc, #164]	@ (800b014 <HAL_DMA_Abort_IT+0x1fc>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d012      	beq.n	800af9a <HAL_DMA_Abort_IT+0x182>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a27      	ldr	r2, [pc, #156]	@ (800b018 <HAL_DMA_Abort_IT+0x200>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00a      	beq.n	800af94 <HAL_DMA_Abort_IT+0x17c>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a26      	ldr	r2, [pc, #152]	@ (800b01c <HAL_DMA_Abort_IT+0x204>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d102      	bne.n	800af8e <HAL_DMA_Abort_IT+0x176>
 800af88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af8c:	e01b      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800af8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800af92:	e018      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800af94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af98:	e015      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800af9a:	2310      	movs	r3, #16
 800af9c:	e013      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e011      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afa6:	e00e      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800afac:	e00b      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800afb2:	e008      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afb8:	e005      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afbe:	e002      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afc0:	2310      	movs	r3, #16
 800afc2:	e000      	b.n	800afc6 <HAL_DMA_Abort_IT+0x1ae>
 800afc4:	2301      	movs	r3, #1
 800afc6:	4a17      	ldr	r2, [pc, #92]	@ (800b024 <HAL_DMA_Abort_IT+0x20c>)
 800afc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	4798      	blx	r3
    } 
  }
  return status;
 800afea:	7bfb      	ldrb	r3, [r7, #15]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	40020080 	.word	0x40020080
 800aff8:	40020008 	.word	0x40020008
 800affc:	4002001c 	.word	0x4002001c
 800b000:	40020030 	.word	0x40020030
 800b004:	40020044 	.word	0x40020044
 800b008:	40020058 	.word	0x40020058
 800b00c:	4002006c 	.word	0x4002006c
 800b010:	40020408 	.word	0x40020408
 800b014:	4002041c 	.word	0x4002041c
 800b018:	40020430 	.word	0x40020430
 800b01c:	40020444 	.word	0x40020444
 800b020:	40020400 	.word	0x40020400
 800b024:	40020000 	.word	0x40020000

0800b028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b028:	b480      	push	{r7}
 800b02a:	b08b      	sub	sp, #44	@ 0x2c
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b032:	2300      	movs	r3, #0
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b036:	2300      	movs	r3, #0
 800b038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b03a:	e179      	b.n	800b330 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b03c:	2201      	movs	r2, #1
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	fa02 f303 	lsl.w	r3, r2, r3
 800b044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	4013      	ands	r3, r2
 800b04e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	429a      	cmp	r2, r3
 800b056:	f040 8168 	bne.w	800b32a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	4a96      	ldr	r2, [pc, #600]	@ (800b2b8 <HAL_GPIO_Init+0x290>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d05e      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
 800b064:	4a94      	ldr	r2, [pc, #592]	@ (800b2b8 <HAL_GPIO_Init+0x290>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d875      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b06a:	4a94      	ldr	r2, [pc, #592]	@ (800b2bc <HAL_GPIO_Init+0x294>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d058      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
 800b070:	4a92      	ldr	r2, [pc, #584]	@ (800b2bc <HAL_GPIO_Init+0x294>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d86f      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b076:	4a92      	ldr	r2, [pc, #584]	@ (800b2c0 <HAL_GPIO_Init+0x298>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d052      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
 800b07c:	4a90      	ldr	r2, [pc, #576]	@ (800b2c0 <HAL_GPIO_Init+0x298>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d869      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b082:	4a90      	ldr	r2, [pc, #576]	@ (800b2c4 <HAL_GPIO_Init+0x29c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d04c      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
 800b088:	4a8e      	ldr	r2, [pc, #568]	@ (800b2c4 <HAL_GPIO_Init+0x29c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d863      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b08e:	4a8e      	ldr	r2, [pc, #568]	@ (800b2c8 <HAL_GPIO_Init+0x2a0>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d046      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
 800b094:	4a8c      	ldr	r2, [pc, #560]	@ (800b2c8 <HAL_GPIO_Init+0x2a0>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d85d      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b09a:	2b12      	cmp	r3, #18
 800b09c:	d82a      	bhi.n	800b0f4 <HAL_GPIO_Init+0xcc>
 800b09e:	2b12      	cmp	r3, #18
 800b0a0:	d859      	bhi.n	800b156 <HAL_GPIO_Init+0x12e>
 800b0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a8 <HAL_GPIO_Init+0x80>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b123 	.word	0x0800b123
 800b0ac:	0800b0fd 	.word	0x0800b0fd
 800b0b0:	0800b10f 	.word	0x0800b10f
 800b0b4:	0800b151 	.word	0x0800b151
 800b0b8:	0800b157 	.word	0x0800b157
 800b0bc:	0800b157 	.word	0x0800b157
 800b0c0:	0800b157 	.word	0x0800b157
 800b0c4:	0800b157 	.word	0x0800b157
 800b0c8:	0800b157 	.word	0x0800b157
 800b0cc:	0800b157 	.word	0x0800b157
 800b0d0:	0800b157 	.word	0x0800b157
 800b0d4:	0800b157 	.word	0x0800b157
 800b0d8:	0800b157 	.word	0x0800b157
 800b0dc:	0800b157 	.word	0x0800b157
 800b0e0:	0800b157 	.word	0x0800b157
 800b0e4:	0800b157 	.word	0x0800b157
 800b0e8:	0800b157 	.word	0x0800b157
 800b0ec:	0800b105 	.word	0x0800b105
 800b0f0:	0800b119 	.word	0x0800b119
 800b0f4:	4a75      	ldr	r2, [pc, #468]	@ (800b2cc <HAL_GPIO_Init+0x2a4>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d013      	beq.n	800b122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b0fa:	e02c      	b.n	800b156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	623b      	str	r3, [r7, #32]
          break;
 800b102:	e029      	b.n	800b158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	3304      	adds	r3, #4
 800b10a:	623b      	str	r3, [r7, #32]
          break;
 800b10c:	e024      	b.n	800b158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	3308      	adds	r3, #8
 800b114:	623b      	str	r3, [r7, #32]
          break;
 800b116:	e01f      	b.n	800b158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	330c      	adds	r3, #12
 800b11e:	623b      	str	r3, [r7, #32]
          break;
 800b120:	e01a      	b.n	800b158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b12a:	2304      	movs	r3, #4
 800b12c:	623b      	str	r3, [r7, #32]
          break;
 800b12e:	e013      	b.n	800b158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d105      	bne.n	800b144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b138:	2308      	movs	r3, #8
 800b13a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	611a      	str	r2, [r3, #16]
          break;
 800b142:	e009      	b.n	800b158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b144:	2308      	movs	r3, #8
 800b146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	615a      	str	r2, [r3, #20]
          break;
 800b14e:	e003      	b.n	800b158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b150:	2300      	movs	r3, #0
 800b152:	623b      	str	r3, [r7, #32]
          break;
 800b154:	e000      	b.n	800b158 <HAL_GPIO_Init+0x130>
          break;
 800b156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	2bff      	cmp	r3, #255	@ 0xff
 800b15c:	d801      	bhi.n	800b162 <HAL_GPIO_Init+0x13a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	e001      	b.n	800b166 <HAL_GPIO_Init+0x13e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3304      	adds	r3, #4
 800b166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	2bff      	cmp	r3, #255	@ 0xff
 800b16c:	d802      	bhi.n	800b174 <HAL_GPIO_Init+0x14c>
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	e002      	b.n	800b17a <HAL_GPIO_Init+0x152>
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	3b08      	subs	r3, #8
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	210f      	movs	r1, #15
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	43db      	mvns	r3, r3
 800b18a:	401a      	ands	r2, r3
 800b18c:	6a39      	ldr	r1, [r7, #32]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	fa01 f303 	lsl.w	r3, r1, r3
 800b194:	431a      	orrs	r2, r3
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80c1 	beq.w	800b32a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b1a8:	4b49      	ldr	r3, [pc, #292]	@ (800b2d0 <HAL_GPIO_Init+0x2a8>)
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	4a48      	ldr	r2, [pc, #288]	@ (800b2d0 <HAL_GPIO_Init+0x2a8>)
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	6193      	str	r3, [r2, #24]
 800b1b4:	4b46      	ldr	r3, [pc, #280]	@ (800b2d0 <HAL_GPIO_Init+0x2a8>)
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	60bb      	str	r3, [r7, #8]
 800b1be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b1c0:	4a44      	ldr	r2, [pc, #272]	@ (800b2d4 <HAL_GPIO_Init+0x2ac>)
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	089b      	lsrs	r3, r3, #2
 800b1c6:	3302      	adds	r3, #2
 800b1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	220f      	movs	r2, #15
 800b1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1dc:	43db      	mvns	r3, r3
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a3c      	ldr	r2, [pc, #240]	@ (800b2d8 <HAL_GPIO_Init+0x2b0>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d01f      	beq.n	800b22c <HAL_GPIO_Init+0x204>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a3b      	ldr	r2, [pc, #236]	@ (800b2dc <HAL_GPIO_Init+0x2b4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d019      	beq.n	800b228 <HAL_GPIO_Init+0x200>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a3a      	ldr	r2, [pc, #232]	@ (800b2e0 <HAL_GPIO_Init+0x2b8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d013      	beq.n	800b224 <HAL_GPIO_Init+0x1fc>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a39      	ldr	r2, [pc, #228]	@ (800b2e4 <HAL_GPIO_Init+0x2bc>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00d      	beq.n	800b220 <HAL_GPIO_Init+0x1f8>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a38      	ldr	r2, [pc, #224]	@ (800b2e8 <HAL_GPIO_Init+0x2c0>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <HAL_GPIO_Init+0x1f4>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a37      	ldr	r2, [pc, #220]	@ (800b2ec <HAL_GPIO_Init+0x2c4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d101      	bne.n	800b218 <HAL_GPIO_Init+0x1f0>
 800b214:	2305      	movs	r3, #5
 800b216:	e00a      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b218:	2306      	movs	r3, #6
 800b21a:	e008      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b21c:	2304      	movs	r3, #4
 800b21e:	e006      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b220:	2303      	movs	r3, #3
 800b222:	e004      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b224:	2302      	movs	r3, #2
 800b226:	e002      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <HAL_GPIO_Init+0x206>
 800b22c:	2300      	movs	r3, #0
 800b22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b230:	f002 0203 	and.w	r2, r2, #3
 800b234:	0092      	lsls	r2, r2, #2
 800b236:	4093      	lsls	r3, r2
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b23e:	4925      	ldr	r1, [pc, #148]	@ (800b2d4 <HAL_GPIO_Init+0x2ac>)
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	089b      	lsrs	r3, r3, #2
 800b244:	3302      	adds	r3, #2
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b258:	4b25      	ldr	r3, [pc, #148]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	4924      	ldr	r1, [pc, #144]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	4313      	orrs	r3, r2
 800b262:	608b      	str	r3, [r1, #8]
 800b264:	e006      	b.n	800b274 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b266:	4b22      	ldr	r3, [pc, #136]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	43db      	mvns	r3, r3
 800b26e:	4920      	ldr	r1, [pc, #128]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b270:	4013      	ands	r3, r2
 800b272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b280:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b282:	68da      	ldr	r2, [r3, #12]
 800b284:	491a      	ldr	r1, [pc, #104]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60cb      	str	r3, [r1, #12]
 800b28c:	e006      	b.n	800b29c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b28e:	4b18      	ldr	r3, [pc, #96]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b290:	68da      	ldr	r2, [r3, #12]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	43db      	mvns	r3, r3
 800b296:	4916      	ldr	r1, [pc, #88]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b298:	4013      	ands	r3, r2
 800b29a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d025      	beq.n	800b2f4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b2a8:	4b11      	ldr	r3, [pc, #68]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	4910      	ldr	r1, [pc, #64]	@ (800b2f0 <HAL_GPIO_Init+0x2c8>)
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	604b      	str	r3, [r1, #4]
 800b2b4:	e025      	b.n	800b302 <HAL_GPIO_Init+0x2da>
 800b2b6:	bf00      	nop
 800b2b8:	10320000 	.word	0x10320000
 800b2bc:	10310000 	.word	0x10310000
 800b2c0:	10220000 	.word	0x10220000
 800b2c4:	10210000 	.word	0x10210000
 800b2c8:	10120000 	.word	0x10120000
 800b2cc:	10110000 	.word	0x10110000
 800b2d0:	40021000 	.word	0x40021000
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40010800 	.word	0x40010800
 800b2dc:	40010c00 	.word	0x40010c00
 800b2e0:	40011000 	.word	0x40011000
 800b2e4:	40011400 	.word	0x40011400
 800b2e8:	40011800 	.word	0x40011800
 800b2ec:	40011c00 	.word	0x40011c00
 800b2f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b2f4:	4b15      	ldr	r3, [pc, #84]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	4913      	ldr	r1, [pc, #76]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b2fe:	4013      	ands	r3, r2
 800b300:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b30e:	4b0f      	ldr	r3, [pc, #60]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	490e      	ldr	r1, [pc, #56]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	4313      	orrs	r3, r2
 800b318:	600b      	str	r3, [r1, #0]
 800b31a:	e006      	b.n	800b32a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b31c:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	43db      	mvns	r3, r3
 800b324:	4909      	ldr	r1, [pc, #36]	@ (800b34c <HAL_GPIO_Init+0x324>)
 800b326:	4013      	ands	r3, r2
 800b328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	3301      	adds	r3, #1
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f47f ae7e 	bne.w	800b03c <HAL_GPIO_Init+0x14>
  }
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	372c      	adds	r7, #44	@ 0x2c
 800b346:	46bd      	mov	sp, r7
 800b348:	bc80      	pop	{r7}
 800b34a:	4770      	bx	lr
 800b34c:	40010400 	.word	0x40010400

0800b350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b350:	b480      	push	{r7}
 800b352:	b089      	sub	sp, #36	@ 0x24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800b35e:	e0a6      	b.n	800b4ae <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b360:	2201      	movs	r2, #1
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	fa02 f303 	lsl.w	r3, r2, r3
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	4013      	ands	r3, r2
 800b36c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 8099 	beq.w	800b4a8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800b376:	4a54      	ldr	r2, [pc, #336]	@ (800b4c8 <HAL_GPIO_DeInit+0x178>)
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	089b      	lsrs	r3, r3, #2
 800b37c:	3302      	adds	r3, #2
 800b37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b382:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	f003 0303 	and.w	r3, r3, #3
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	220f      	movs	r2, #15
 800b38e:	fa02 f303 	lsl.w	r3, r2, r3
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4013      	ands	r3, r2
 800b396:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a4c      	ldr	r2, [pc, #304]	@ (800b4cc <HAL_GPIO_DeInit+0x17c>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d01f      	beq.n	800b3e0 <HAL_GPIO_DeInit+0x90>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a4b      	ldr	r2, [pc, #300]	@ (800b4d0 <HAL_GPIO_DeInit+0x180>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d019      	beq.n	800b3dc <HAL_GPIO_DeInit+0x8c>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a4a      	ldr	r2, [pc, #296]	@ (800b4d4 <HAL_GPIO_DeInit+0x184>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d013      	beq.n	800b3d8 <HAL_GPIO_DeInit+0x88>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a49      	ldr	r2, [pc, #292]	@ (800b4d8 <HAL_GPIO_DeInit+0x188>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00d      	beq.n	800b3d4 <HAL_GPIO_DeInit+0x84>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a48      	ldr	r2, [pc, #288]	@ (800b4dc <HAL_GPIO_DeInit+0x18c>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d007      	beq.n	800b3d0 <HAL_GPIO_DeInit+0x80>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a47      	ldr	r2, [pc, #284]	@ (800b4e0 <HAL_GPIO_DeInit+0x190>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d101      	bne.n	800b3cc <HAL_GPIO_DeInit+0x7c>
 800b3c8:	2305      	movs	r3, #5
 800b3ca:	e00a      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3cc:	2306      	movs	r3, #6
 800b3ce:	e008      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	e006      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e004      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3d8:	2302      	movs	r3, #2
 800b3da:	e002      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e000      	b.n	800b3e2 <HAL_GPIO_DeInit+0x92>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	69fa      	ldr	r2, [r7, #28]
 800b3e4:	f002 0203 	and.w	r2, r2, #3
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	4093      	lsls	r3, r2
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d132      	bne.n	800b458 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b3f2:	4b3c      	ldr	r3, [pc, #240]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	43db      	mvns	r3, r3
 800b3fa:	493a      	ldr	r1, [pc, #232]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b400:	4b38      	ldr	r3, [pc, #224]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	43db      	mvns	r3, r3
 800b408:	4936      	ldr	r1, [pc, #216]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b40a:	4013      	ands	r3, r2
 800b40c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b40e:	4b35      	ldr	r3, [pc, #212]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b410:	68da      	ldr	r2, [r3, #12]
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	43db      	mvns	r3, r3
 800b416:	4933      	ldr	r1, [pc, #204]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b418:	4013      	ands	r3, r2
 800b41a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b41c:	4b31      	ldr	r3, [pc, #196]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b41e:	689a      	ldr	r2, [r3, #8]
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	43db      	mvns	r3, r3
 800b424:	492f      	ldr	r1, [pc, #188]	@ (800b4e4 <HAL_GPIO_DeInit+0x194>)
 800b426:	4013      	ands	r3, r2
 800b428:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	f003 0303 	and.w	r3, r3, #3
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	220f      	movs	r2, #15
 800b434:	fa02 f303 	lsl.w	r3, r2, r3
 800b438:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800b43a:	4a23      	ldr	r2, [pc, #140]	@ (800b4c8 <HAL_GPIO_DeInit+0x178>)
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	089b      	lsrs	r3, r3, #2
 800b440:	3302      	adds	r3, #2
 800b442:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	43da      	mvns	r2, r3
 800b44a:	481f      	ldr	r0, [pc, #124]	@ (800b4c8 <HAL_GPIO_DeInit+0x178>)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	089b      	lsrs	r3, r3, #2
 800b450:	400a      	ands	r2, r1
 800b452:	3302      	adds	r3, #2
 800b454:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	2bff      	cmp	r3, #255	@ 0xff
 800b45c:	d801      	bhi.n	800b462 <HAL_GPIO_DeInit+0x112>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	e001      	b.n	800b466 <HAL_GPIO_DeInit+0x116>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3304      	adds	r3, #4
 800b466:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2bff      	cmp	r3, #255	@ 0xff
 800b46c:	d802      	bhi.n	800b474 <HAL_GPIO_DeInit+0x124>
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	e002      	b.n	800b47a <HAL_GPIO_DeInit+0x12a>
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	3b08      	subs	r3, #8
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	210f      	movs	r1, #15
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	fa01 f303 	lsl.w	r3, r1, r3
 800b488:	43db      	mvns	r3, r3
 800b48a:	401a      	ands	r2, r3
 800b48c:	2104      	movs	r1, #4
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	fa01 f303 	lsl.w	r3, r1, r3
 800b494:	431a      	orrs	r2, r3
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	43db      	mvns	r3, r3
 800b4a2:	401a      	ands	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f47f af52 	bne.w	800b360 <HAL_GPIO_DeInit+0x10>
  }
}
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	3724      	adds	r7, #36	@ 0x24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bc80      	pop	{r7}
 800b4c6:	4770      	bx	lr
 800b4c8:	40010000 	.word	0x40010000
 800b4cc:	40010800 	.word	0x40010800
 800b4d0:	40010c00 	.word	0x40010c00
 800b4d4:	40011000 	.word	0x40011000
 800b4d8:	40011400 	.word	0x40011400
 800b4dc:	40011800 	.word	0x40011800
 800b4e0:	40011c00 	.word	0x40011c00
 800b4e4:	40010400 	.word	0x40010400

0800b4e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	887b      	ldrh	r3, [r7, #2]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b500:	2301      	movs	r3, #1
 800b502:	73fb      	strb	r3, [r7, #15]
 800b504:	e001      	b.n	800b50a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr

0800b516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	807b      	strh	r3, [r7, #2]
 800b522:	4613      	mov	r3, r2
 800b524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b526:	787b      	ldrb	r3, [r7, #1]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b52c:	887a      	ldrh	r2, [r7, #2]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b532:	e003      	b.n	800b53c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b534:	887b      	ldrh	r3, [r7, #2]
 800b536:	041a      	lsls	r2, r3, #16
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	611a      	str	r2, [r3, #16]
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr

0800b546 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b558:	887a      	ldrh	r2, [r7, #2]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	4013      	ands	r3, r2
 800b55e:	041a      	lsls	r2, r3, #16
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	43d9      	mvns	r1, r3
 800b564:	887b      	ldrh	r3, [r7, #2]
 800b566:	400b      	ands	r3, r1
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	611a      	str	r2, [r3, #16]
}
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	bc80      	pop	{r7}
 800b576:	4770      	bx	lr

0800b578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e12b      	b.n	800b7e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7fe fff4 	bl	800a58c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2224      	movs	r2, #36	@ 0x24
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0201 	bic.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b5ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b5da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b5dc:	f001 fdb8 	bl	800d150 <HAL_RCC_GetPCLK1Freq>
 800b5e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	4a81      	ldr	r2, [pc, #516]	@ (800b7ec <HAL_I2C_Init+0x274>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d807      	bhi.n	800b5fc <HAL_I2C_Init+0x84>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4a80      	ldr	r2, [pc, #512]	@ (800b7f0 <HAL_I2C_Init+0x278>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	bf94      	ite	ls
 800b5f4:	2301      	movls	r3, #1
 800b5f6:	2300      	movhi	r3, #0
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	e006      	b.n	800b60a <HAL_I2C_Init+0x92>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4a7d      	ldr	r2, [pc, #500]	@ (800b7f4 <HAL_I2C_Init+0x27c>)
 800b600:	4293      	cmp	r3, r2
 800b602:	bf94      	ite	ls
 800b604:	2301      	movls	r3, #1
 800b606:	2300      	movhi	r3, #0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e0e7      	b.n	800b7e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4a78      	ldr	r2, [pc, #480]	@ (800b7f8 <HAL_I2C_Init+0x280>)
 800b616:	fba2 2303 	umull	r2, r3, r2, r3
 800b61a:	0c9b      	lsrs	r3, r3, #18
 800b61c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	430a      	orrs	r2, r1
 800b630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4a6a      	ldr	r2, [pc, #424]	@ (800b7ec <HAL_I2C_Init+0x274>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d802      	bhi.n	800b64c <HAL_I2C_Init+0xd4>
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	3301      	adds	r3, #1
 800b64a:	e009      	b.n	800b660 <HAL_I2C_Init+0xe8>
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	4a69      	ldr	r2, [pc, #420]	@ (800b7fc <HAL_I2C_Init+0x284>)
 800b658:	fba2 2303 	umull	r2, r3, r2, r3
 800b65c:	099b      	lsrs	r3, r3, #6
 800b65e:	3301      	adds	r3, #1
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	430b      	orrs	r3, r1
 800b666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b672:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	495c      	ldr	r1, [pc, #368]	@ (800b7ec <HAL_I2C_Init+0x274>)
 800b67c:	428b      	cmp	r3, r1
 800b67e:	d819      	bhi.n	800b6b4 <HAL_I2C_Init+0x13c>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	1e59      	subs	r1, r3, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b68e:	1c59      	adds	r1, r3, #1
 800b690:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b694:	400b      	ands	r3, r1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <HAL_I2C_Init+0x138>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	1e59      	subs	r1, r3, #1
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6ae:	e051      	b.n	800b754 <HAL_I2C_Init+0x1dc>
 800b6b0:	2304      	movs	r3, #4
 800b6b2:	e04f      	b.n	800b754 <HAL_I2C_Init+0x1dc>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d111      	bne.n	800b6e0 <HAL_I2C_Init+0x168>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	1e58      	subs	r0, r3, #1
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6859      	ldr	r1, [r3, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	440b      	add	r3, r1
 800b6ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf0c      	ite	eq
 800b6d8:	2301      	moveq	r3, #1
 800b6da:	2300      	movne	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	e012      	b.n	800b706 <HAL_I2C_Init+0x18e>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	1e58      	subs	r0, r3, #1
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6859      	ldr	r1, [r3, #4]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	440b      	add	r3, r1
 800b6ee:	0099      	lsls	r1, r3, #2
 800b6f0:	440b      	add	r3, r1
 800b6f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_I2C_Init+0x196>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e022      	b.n	800b754 <HAL_I2C_Init+0x1dc>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10e      	bne.n	800b734 <HAL_I2C_Init+0x1bc>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	1e58      	subs	r0, r3, #1
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6859      	ldr	r1, [r3, #4]
 800b71e:	460b      	mov	r3, r1
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	440b      	add	r3, r1
 800b724:	fbb0 f3f3 	udiv	r3, r0, r3
 800b728:	3301      	adds	r3, #1
 800b72a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b72e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b732:	e00f      	b.n	800b754 <HAL_I2C_Init+0x1dc>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	1e58      	subs	r0, r3, #1
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6859      	ldr	r1, [r3, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	440b      	add	r3, r1
 800b742:	0099      	lsls	r1, r3, #2
 800b744:	440b      	add	r3, r1
 800b746:	fbb0 f3f3 	udiv	r3, r0, r3
 800b74a:	3301      	adds	r3, #1
 800b74c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	6809      	ldr	r1, [r1, #0]
 800b758:	4313      	orrs	r3, r2
 800b75a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	69da      	ldr	r2, [r3, #28]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	6911      	ldr	r1, [r2, #16]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	68d2      	ldr	r2, [r2, #12]
 800b78e:	4311      	orrs	r1, r2
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6812      	ldr	r2, [r2, #0]
 800b794:	430b      	orrs	r3, r1
 800b796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	695a      	ldr	r2, [r3, #20]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f042 0201 	orr.w	r2, r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	000186a0 	.word	0x000186a0
 800b7f0:	001e847f 	.word	0x001e847f
 800b7f4:	003d08ff 	.word	0x003d08ff
 800b7f8:	431bde83 	.word	0x431bde83
 800b7fc:	10624dd3 	.word	0x10624dd3

0800b800 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e021      	b.n	800b856 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2224      	movs	r2, #36	@ 0x24
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0201 	bic.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7fe feec 	bl	800a608 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
	...

0800b860 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af02      	add	r7, sp, #8
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	607a      	str	r2, [r7, #4]
 800b86a:	461a      	mov	r2, r3
 800b86c:	460b      	mov	r3, r1
 800b86e:	817b      	strh	r3, [r7, #10]
 800b870:	4613      	mov	r3, r2
 800b872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b874:	f7ff f85e 	bl	800a934 <HAL_GetTick>
 800b878:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b20      	cmp	r3, #32
 800b884:	f040 80e0 	bne.w	800ba48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2319      	movs	r3, #25
 800b88e:	2201      	movs	r2, #1
 800b890:	4970      	ldr	r1, [pc, #448]	@ (800ba54 <HAL_I2C_Master_Transmit+0x1f4>)
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 fe5c 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b89e:	2302      	movs	r3, #2
 800b8a0:	e0d3      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d101      	bne.n	800b8b0 <HAL_I2C_Master_Transmit+0x50>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	e0cc      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d007      	beq.n	800b8d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f042 0201 	orr.w	r2, r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b8e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2221      	movs	r2, #33	@ 0x21
 800b8ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2210      	movs	r2, #16
 800b8f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	893a      	ldrh	r2, [r7, #8]
 800b906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4a50      	ldr	r2, [pc, #320]	@ (800ba58 <HAL_I2C_Master_Transmit+0x1f8>)
 800b916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b918:	8979      	ldrh	r1, [r7, #10]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f000 fc16 	bl	800c150 <I2C_MasterRequestWrite>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e08d      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b92e:	2300      	movs	r3, #0
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	613b      	str	r3, [r7, #16]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	613b      	str	r3, [r7, #16]
 800b942:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b944:	e066      	b.n	800ba14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	6a39      	ldr	r1, [r7, #32]
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 ff1a 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b95a:	2b04      	cmp	r3, #4
 800b95c:	d107      	bne.n	800b96e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b96c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e06b      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b976:	781a      	ldrb	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b99a:	3b01      	subs	r3, #1
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d11b      	bne.n	800b9e8 <HAL_I2C_Master_Transmit+0x188>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d017      	beq.n	800b9e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9bc:	781a      	ldrb	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	6a39      	ldr	r1, [r7, #32]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 ff11 	bl	800c814 <I2C_WaitOnBTFFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00d      	beq.n	800ba14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	d107      	bne.n	800ba10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e01a      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d194      	bne.n	800b946 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e000      	b.n	800ba4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ba48:	2302      	movs	r3, #2
  }
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	00100002 	.word	0x00100002
 800ba58:	ffff0000 	.word	0xffff0000

0800ba5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	4608      	mov	r0, r1
 800ba66:	4611      	mov	r1, r2
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	817b      	strh	r3, [r7, #10]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	813b      	strh	r3, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba76:	f7fe ff5d 	bl	800a934 <HAL_GetTick>
 800ba7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b20      	cmp	r3, #32
 800ba86:	f040 80d9 	bne.w	800bc3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2319      	movs	r3, #25
 800ba90:	2201      	movs	r2, #1
 800ba92:	496d      	ldr	r1, [pc, #436]	@ (800bc48 <HAL_I2C_Mem_Write+0x1ec>)
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fd5b 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800baa0:	2302      	movs	r3, #2
 800baa2:	e0cc      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <HAL_I2C_Mem_Write+0x56>
 800baae:	2302      	movs	r3, #2
 800bab0:	e0c5      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d007      	beq.n	800bad8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f042 0201 	orr.w	r2, r2, #1
 800bad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2221      	movs	r2, #33	@ 0x21
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2240      	movs	r2, #64	@ 0x40
 800baf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a3a      	ldr	r2, [r7, #32]
 800bb02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bb08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4a4d      	ldr	r2, [pc, #308]	@ (800bc4c <HAL_I2C_Mem_Write+0x1f0>)
 800bb18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb1a:	88f8      	ldrh	r0, [r7, #6]
 800bb1c:	893a      	ldrh	r2, [r7, #8]
 800bb1e:	8979      	ldrh	r1, [r7, #10]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4603      	mov	r3, r0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 fb92 	bl	800c254 <I2C_RequestMemoryWrite>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d052      	beq.n	800bbdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e081      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fe20 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00d      	beq.n	800bb66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d107      	bne.n	800bb62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e06b      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6a:	781a      	ldrb	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d11b      	bne.n	800bbdc <HAL_I2C_Mem_Write+0x180>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d017      	beq.n	800bbdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1aa      	bne.n	800bb3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 fe13 	bl	800c814 <I2C_WaitOnBTFFlagUntilTimeout>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00d      	beq.n	800bc10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf8:	2b04      	cmp	r3, #4
 800bbfa:	d107      	bne.n	800bc0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e016      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e000      	b.n	800bc3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bc3c:	2302      	movs	r3, #2
  }
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	00100002 	.word	0x00100002
 800bc4c:	ffff0000 	.word	0xffff0000

0800bc50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08c      	sub	sp, #48	@ 0x30
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	4608      	mov	r0, r1
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4603      	mov	r3, r0
 800bc60:	817b      	strh	r3, [r7, #10]
 800bc62:	460b      	mov	r3, r1
 800bc64:	813b      	strh	r3, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bc6e:	f7fe fe61 	bl	800a934 <HAL_GetTick>
 800bc72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b20      	cmp	r3, #32
 800bc7e:	f040 8244 	bne.w	800c10a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	2319      	movs	r3, #25
 800bc88:	2201      	movs	r2, #1
 800bc8a:	4982      	ldr	r1, [pc, #520]	@ (800be94 <HAL_I2C_Mem_Read+0x244>)
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 fc5f 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	e237      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_I2C_Mem_Read+0x5a>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e230      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d007      	beq.n	800bcd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0201 	orr.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bcde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2222      	movs	r2, #34	@ 0x22
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2240      	movs	r2, #64	@ 0x40
 800bcec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800bd00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4a62      	ldr	r2, [pc, #392]	@ (800be98 <HAL_I2C_Mem_Read+0x248>)
 800bd10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd12:	88f8      	ldrh	r0, [r7, #6]
 800bd14:	893a      	ldrh	r2, [r7, #8]
 800bd16:	8979      	ldrh	r1, [r7, #10]
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	4603      	mov	r3, r0
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fb2c 	bl	800c380 <I2C_RequestMemoryRead>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e1ec      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d113      	bne.n	800bd62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	61fb      	str	r3, [r7, #28]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	e1c0      	b.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d11e      	bne.n	800bda8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd7a:	b672      	cpsid	i
}
 800bd7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	61bb      	str	r3, [r7, #24]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	61bb      	str	r3, [r7, #24]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	61bb      	str	r3, [r7, #24]
 800bd92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bda2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800bda4:	b662      	cpsie	i
}
 800bda6:	e035      	b.n	800be14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d11e      	bne.n	800bdee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdc0:	b672      	cpsid	i
}
 800bdc2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bde8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800bdea:	b662      	cpsie	i
}
 800bdec:	e012      	b.n	800be14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bdfc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	613b      	str	r3, [r7, #16]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	613b      	str	r3, [r7, #16]
 800be12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800be14:	e166      	b.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	f200 811f 	bhi.w	800c05e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be24:	2b01      	cmp	r3, #1
 800be26:	d123      	bne.n	800be70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 fd39 	bl	800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e167      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	691a      	ldr	r2, [r3, #16]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be58:	3b01      	subs	r3, #1
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be64:	b29b      	uxth	r3, r3
 800be66:	3b01      	subs	r3, #1
 800be68:	b29a      	uxth	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800be6e:	e139      	b.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be74:	2b02      	cmp	r3, #2
 800be76:	d152      	bne.n	800bf1e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7e:	2200      	movs	r2, #0
 800be80:	4906      	ldr	r1, [pc, #24]	@ (800be9c <HAL_I2C_Mem_Read+0x24c>)
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f000 fb64 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d008      	beq.n	800bea0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e13c      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
 800be92:	bf00      	nop
 800be94:	00100002 	.word	0x00100002
 800be98:	ffff0000 	.word	0xffff0000
 800be9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800bea0:	b672      	cpsid	i
}
 800bea2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800beb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	691a      	ldr	r2, [r3, #16]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bedc:	b29b      	uxth	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bee6:	b662      	cpsie	i
}
 800bee8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	691a      	ldr	r2, [r3, #16]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef4:	b2d2      	uxtb	r2, r2
 800bef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf06:	3b01      	subs	r3, #1
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bf1c:	e0e2      	b.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf24:	2200      	movs	r2, #0
 800bf26:	497b      	ldr	r1, [pc, #492]	@ (800c114 <HAL_I2C_Mem_Read+0x4c4>)
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 fb11 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e0e9      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf48:	b672      	cpsid	i
}
 800bf4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf56:	b2d2      	uxtb	r2, r2
 800bf58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bf7e:	4b66      	ldr	r3, [pc, #408]	@ (800c118 <HAL_I2C_Mem_Read+0x4c8>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	08db      	lsrs	r3, r3, #3
 800bf84:	4a65      	ldr	r2, [pc, #404]	@ (800c11c <HAL_I2C_Mem_Read+0x4cc>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	0a1a      	lsrs	r2, r3, #8
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	00da      	lsls	r2, r3, #3
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d118      	bne.n	800bfd6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2220      	movs	r2, #32
 800bfae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	f043 0220 	orr.w	r2, r3, #32
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800bfc6:	b662      	cpsie	i
}
 800bfc8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e09a      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d1d9      	bne.n	800bf98 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c010:	3b01      	subs	r3, #1
 800c012:	b29a      	uxth	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c026:	b662      	cpsie	i
}
 800c028:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c034:	b2d2      	uxtb	r2, r2
 800c036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c046:	3b01      	subs	r3, #1
 800c048:	b29a      	uxth	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c05c:	e042      	b.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f000 fc1e 	bl	800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e04c      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	691a      	ldr	r2, [r3, #16]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b01      	subs	r3, #1
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d118      	bne.n	800c0e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f47f ae94 	bne.w	800be16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	e000      	b.n	800c10c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800c10a:	2302      	movs	r3, #2
  }
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3728      	adds	r7, #40	@ 0x28
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	00010004 	.word	0x00010004
 800c118:	20000f74 	.word	0x20000f74
 800c11c:	14f8b589 	.word	0x14f8b589

0800c120 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c12e:	b2db      	uxtb	r3, r3
}
 800c130:	4618      	mov	r0, r3
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	bc80      	pop	{r7}
 800c138:	4770      	bx	lr

0800c13a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c146:	4618      	mov	r0, r3
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bc80      	pop	{r7}
 800c14e:	4770      	bx	lr

0800c150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	607a      	str	r2, [r7, #4]
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	460b      	mov	r3, r1
 800c15e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b08      	cmp	r3, #8
 800c16a:	d006      	beq.n	800c17a <I2C_MasterRequestWrite+0x2a>
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d003      	beq.n	800c17a <I2C_MasterRequestWrite+0x2a>
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c178:	d108      	bne.n	800c18c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	e00b      	b.n	800c1a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c190:	2b12      	cmp	r3, #18
 800c192:	d107      	bne.n	800c1a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 f9cd 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00d      	beq.n	800c1d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1ca:	d103      	bne.n	800c1d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e035      	b.n	800c244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1e0:	d108      	bne.n	800c1f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c1e2:	897b      	ldrh	r3, [r7, #10]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c1f0:	611a      	str	r2, [r3, #16]
 800c1f2:	e01b      	b.n	800c22c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c1f4:	897b      	ldrh	r3, [r7, #10]
 800c1f6:	11db      	asrs	r3, r3, #7
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	f003 0306 	and.w	r3, r3, #6
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f063 030f 	orn	r3, r3, #15
 800c204:	b2da      	uxtb	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	490e      	ldr	r1, [pc, #56]	@ (800c24c <I2C_MasterRequestWrite+0xfc>)
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fa16 	bl	800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e010      	b.n	800c244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c222:	897b      	ldrh	r3, [r7, #10]
 800c224:	b2da      	uxtb	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	4907      	ldr	r1, [pc, #28]	@ (800c250 <I2C_MasterRequestWrite+0x100>)
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 fa06 	bl	800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	00010008 	.word	0x00010008
 800c250:	00010002 	.word	0x00010002

0800c254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	461a      	mov	r2, r3
 800c262:	4603      	mov	r3, r0
 800c264:	817b      	strh	r3, [r7, #10]
 800c266:	460b      	mov	r3, r1
 800c268:	813b      	strh	r3, [r7, #8]
 800c26a:	4613      	mov	r3, r2
 800c26c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c27c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	2200      	movs	r2, #0
 800c286:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f000 f960 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00d      	beq.n	800c2b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2a4:	d103      	bne.n	800c2ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e05f      	b.n	800c372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c2b2:	897b      	ldrh	r3, [r7, #10]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c2c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c4:	6a3a      	ldr	r2, [r7, #32]
 800c2c6:	492d      	ldr	r1, [pc, #180]	@ (800c37c <I2C_RequestMemoryWrite+0x128>)
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 f9bb 	bl	800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e04c      	b.n	800c372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f0:	6a39      	ldr	r1, [r7, #32]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fa46 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00d      	beq.n	800c31a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c302:	2b04      	cmp	r3, #4
 800c304:	d107      	bne.n	800c316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e02b      	b.n	800c372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d105      	bne.n	800c32c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c320:	893b      	ldrh	r3, [r7, #8]
 800c322:	b2da      	uxtb	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	611a      	str	r2, [r3, #16]
 800c32a:	e021      	b.n	800c370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c32c:	893b      	ldrh	r3, [r7, #8]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b29b      	uxth	r3, r3
 800c332:	b2da      	uxtb	r2, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c33c:	6a39      	ldr	r1, [r7, #32]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fa20 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00d      	beq.n	800c366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d107      	bne.n	800c362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e005      	b.n	800c372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c366:	893b      	ldrh	r3, [r7, #8]
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	00010002 	.word	0x00010002

0800c380 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	4608      	mov	r0, r1
 800c38a:	4611      	mov	r1, r2
 800c38c:	461a      	mov	r2, r3
 800c38e:	4603      	mov	r3, r0
 800c390:	817b      	strh	r3, [r7, #10]
 800c392:	460b      	mov	r3, r1
 800c394:	813b      	strh	r3, [r7, #8]
 800c396:	4613      	mov	r3, r2
 800c398:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c3a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 f8c2 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00d      	beq.n	800c3ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e0:	d103      	bne.n	800c3ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e0aa      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c3ee:	897b      	ldrh	r3, [r7, #10]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c3fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	6a3a      	ldr	r2, [r7, #32]
 800c402:	4952      	ldr	r1, [pc, #328]	@ (800c54c <I2C_RequestMemoryRead+0x1cc>)
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f000 f91d 	bl	800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e097      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c414:	2300      	movs	r3, #0
 800c416:	617b      	str	r3, [r7, #20]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	617b      	str	r3, [r7, #20]
 800c428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c42a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42c:	6a39      	ldr	r1, [r7, #32]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 f9a8 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00d      	beq.n	800c456 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d107      	bne.n	800c452 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e076      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d105      	bne.n	800c468 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c45c:	893b      	ldrh	r3, [r7, #8]
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	611a      	str	r2, [r3, #16]
 800c466:	e021      	b.n	800c4ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c468:	893b      	ldrh	r3, [r7, #8]
 800c46a:	0a1b      	lsrs	r3, r3, #8
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c478:	6a39      	ldr	r1, [r7, #32]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 f982 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00d      	beq.n	800c4a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48a:	2b04      	cmp	r3, #4
 800c48c:	d107      	bne.n	800c49e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c49c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e050      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c4a2:	893b      	ldrh	r3, [r7, #8]
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ae:	6a39      	ldr	r1, [r7, #32]
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 f967 	bl	800c784 <I2C_WaitOnTXEFlagUntilTimeout>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00d      	beq.n	800c4d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d107      	bne.n	800c4d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e035      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f82b 	bl	800c550 <I2C_WaitOnFlagUntilTimeout>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00d      	beq.n	800c51c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c50e:	d103      	bne.n	800c518 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c516:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e013      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c51c:	897b      	ldrh	r3, [r7, #10]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f043 0301 	orr.w	r3, r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	6a3a      	ldr	r2, [r7, #32]
 800c530:	4906      	ldr	r1, [pc, #24]	@ (800c54c <I2C_RequestMemoryRead+0x1cc>)
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 f886 	bl	800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	00010002 	.word	0x00010002

0800c550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	4613      	mov	r3, r2
 800c55e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c560:	e048      	b.n	800c5f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d044      	beq.n	800c5f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c56a:	f7fe f9e3 	bl	800a934 <HAL_GetTick>
 800c56e:	4602      	mov	r2, r0
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	429a      	cmp	r2, r3
 800c578:	d302      	bcc.n	800c580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d139      	bne.n	800c5f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	0c1b      	lsrs	r3, r3, #16
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b01      	cmp	r3, #1
 800c588:	d10d      	bne.n	800c5a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	43da      	mvns	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	4013      	ands	r3, r2
 800c596:	b29b      	uxth	r3, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bf0c      	ite	eq
 800c59c:	2301      	moveq	r3, #1
 800c59e:	2300      	movne	r3, #0
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	e00c      	b.n	800c5c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	43da      	mvns	r2, r3
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	bf0c      	ite	eq
 800c5b8:	2301      	moveq	r3, #1
 800c5ba:	2300      	movne	r3, #0
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d116      	bne.n	800c5f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e0:	f043 0220 	orr.w	r2, r3, #32
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e023      	b.n	800c63c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	0c1b      	lsrs	r3, r3, #16
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d10d      	bne.n	800c61a <I2C_WaitOnFlagUntilTimeout+0xca>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	43da      	mvns	r2, r3
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	4013      	ands	r3, r2
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bf0c      	ite	eq
 800c610:	2301      	moveq	r3, #1
 800c612:	2300      	movne	r3, #0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	461a      	mov	r2, r3
 800c618:	e00c      	b.n	800c634 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	43da      	mvns	r2, r3
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	4013      	ands	r3, r2
 800c626:	b29b      	uxth	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bf0c      	ite	eq
 800c62c:	2301      	moveq	r3, #1
 800c62e:	2300      	movne	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	461a      	mov	r2, r3
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	429a      	cmp	r2, r3
 800c638:	d093      	beq.n	800c562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c652:	e071      	b.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c65e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c662:	d123      	bne.n	800c6ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c672:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c67c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2220      	movs	r2, #32
 800c688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c698:	f043 0204 	orr.w	r2, r3, #4
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e067      	b.n	800c77c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d041      	beq.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6b4:	f7fe f93e 	bl	800a934 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d302      	bcc.n	800c6ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d136      	bne.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	0c1b      	lsrs	r3, r3, #16
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d10c      	bne.n	800c6ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	43da      	mvns	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	4013      	ands	r3, r2
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bf14      	ite	ne
 800c6e6:	2301      	movne	r3, #1
 800c6e8:	2300      	moveq	r3, #0
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	e00b      	b.n	800c706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	43da      	mvns	r2, r3
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bf14      	ite	ne
 800c700:	2301      	movne	r3, #1
 800c702:	2300      	moveq	r3, #0
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d016      	beq.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2220      	movs	r2, #32
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c724:	f043 0220 	orr.w	r2, r3, #32
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e021      	b.n	800c77c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	0c1b      	lsrs	r3, r3, #16
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d10c      	bne.n	800c75c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	43da      	mvns	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	4013      	ands	r3, r2
 800c74e:	b29b      	uxth	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	e00b      	b.n	800c774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	43da      	mvns	r2, r3
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	4013      	ands	r3, r2
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bf14      	ite	ne
 800c76e:	2301      	movne	r3, #1
 800c770:	2300      	moveq	r3, #0
 800c772:	b2db      	uxtb	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	f47f af6d 	bne.w	800c654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c790:	e034      	b.n	800c7fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f000 f8e3 	bl	800c95e <I2C_IsAcknowledgeFailed>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e034      	b.n	800c80c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a8:	d028      	beq.n	800c7fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7aa:	f7fe f8c3 	bl	800a934 <HAL_GetTick>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d302      	bcc.n	800c7c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d11d      	bne.n	800c7fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ca:	2b80      	cmp	r3, #128	@ 0x80
 800c7cc:	d016      	beq.n	800c7fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e8:	f043 0220 	orr.w	r2, r3, #32
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e007      	b.n	800c80c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c806:	2b80      	cmp	r3, #128	@ 0x80
 800c808:	d1c3      	bne.n	800c792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c820:	e034      	b.n	800c88c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f000 f89b 	bl	800c95e <I2C_IsAcknowledgeFailed>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e034      	b.n	800c89c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d028      	beq.n	800c88c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c83a:	f7fe f87b 	bl	800a934 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	429a      	cmp	r2, r3
 800c848:	d302      	bcc.n	800c850 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d11d      	bne.n	800c88c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	f003 0304 	and.w	r3, r3, #4
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d016      	beq.n	800c88c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2220      	movs	r2, #32
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c878:	f043 0220 	orr.w	r2, r3, #32
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	e007      	b.n	800c89c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	2b04      	cmp	r3, #4
 800c898:	d1c3      	bne.n	800c822 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c8b0:	e049      	b.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b10      	cmp	r3, #16
 800c8be:	d119      	bne.n	800c8f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f06f 0210 	mvn.w	r2, #16
 800c8c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e030      	b.n	800c956 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8f4:	f7fe f81e 	bl	800a934 <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	429a      	cmp	r2, r3
 800c902:	d302      	bcc.n	800c90a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d11d      	bne.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c914:	2b40      	cmp	r3, #64	@ 0x40
 800c916:	d016      	beq.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2220      	movs	r2, #32
 800c922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c932:	f043 0220 	orr.w	r2, r3, #32
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e007      	b.n	800c956 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c950:	2b40      	cmp	r3, #64	@ 0x40
 800c952:	d1ae      	bne.n	800c8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c95e:	b480      	push	{r7}
 800c960:	b083      	sub	sp, #12
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c974:	d11b      	bne.n	800c9ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c97e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c99a:	f043 0204 	orr.w	r2, r3, #4
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bc80      	pop	{r7}
 800c9b8:	4770      	bx	lr
	...

0800c9bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e272      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 8087 	beq.w	800caea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c9dc:	4b92      	ldr	r3, [pc, #584]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f003 030c 	and.w	r3, r3, #12
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d00c      	beq.n	800ca02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c9e8:	4b8f      	ldr	r3, [pc, #572]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	f003 030c 	and.w	r3, r3, #12
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d112      	bne.n	800ca1a <HAL_RCC_OscConfig+0x5e>
 800c9f4:	4b8c      	ldr	r3, [pc, #560]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca00:	d10b      	bne.n	800ca1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca02:	4b89      	ldr	r3, [pc, #548]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d06c      	beq.n	800cae8 <HAL_RCC_OscConfig+0x12c>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d168      	bne.n	800cae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e24c      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca22:	d106      	bne.n	800ca32 <HAL_RCC_OscConfig+0x76>
 800ca24:	4b80      	ldr	r3, [pc, #512]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a7f      	ldr	r2, [pc, #508]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	e02e      	b.n	800ca90 <HAL_RCC_OscConfig+0xd4>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10c      	bne.n	800ca54 <HAL_RCC_OscConfig+0x98>
 800ca3a:	4b7b      	ldr	r3, [pc, #492]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a7a      	ldr	r2, [pc, #488]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	4b78      	ldr	r3, [pc, #480]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a77      	ldr	r2, [pc, #476]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	e01d      	b.n	800ca90 <HAL_RCC_OscConfig+0xd4>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca5c:	d10c      	bne.n	800ca78 <HAL_RCC_OscConfig+0xbc>
 800ca5e:	4b72      	ldr	r3, [pc, #456]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a71      	ldr	r2, [pc, #452]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	4b6f      	ldr	r3, [pc, #444]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a6e      	ldr	r2, [pc, #440]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e00b      	b.n	800ca90 <HAL_RCC_OscConfig+0xd4>
 800ca78:	4b6b      	ldr	r3, [pc, #428]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a6a      	ldr	r2, [pc, #424]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	4b68      	ldr	r3, [pc, #416]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a67      	ldr	r2, [pc, #412]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800ca8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d013      	beq.n	800cac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca98:	f7fd ff4c 	bl	800a934 <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800caa0:	f7fd ff48 	bl	800a934 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b64      	cmp	r3, #100	@ 0x64
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e200      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cab2:	4b5d      	ldr	r3, [pc, #372]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0f0      	beq.n	800caa0 <HAL_RCC_OscConfig+0xe4>
 800cabe:	e014      	b.n	800caea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cac0:	f7fd ff38 	bl	800a934 <HAL_GetTick>
 800cac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cac6:	e008      	b.n	800cada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cac8:	f7fd ff34 	bl	800a934 <HAL_GetTick>
 800cacc:	4602      	mov	r2, r0
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b64      	cmp	r3, #100	@ 0x64
 800cad4:	d901      	bls.n	800cada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e1ec      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cada:	4b53      	ldr	r3, [pc, #332]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f0      	bne.n	800cac8 <HAL_RCC_OscConfig+0x10c>
 800cae6:	e000      	b.n	800caea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d063      	beq.n	800cbbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800caf6:	4b4c      	ldr	r3, [pc, #304]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f003 030c 	and.w	r3, r3, #12
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800cb02:	4b49      	ldr	r3, [pc, #292]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f003 030c 	and.w	r3, r3, #12
 800cb0a:	2b08      	cmp	r3, #8
 800cb0c:	d11c      	bne.n	800cb48 <HAL_RCC_OscConfig+0x18c>
 800cb0e:	4b46      	ldr	r3, [pc, #280]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d116      	bne.n	800cb48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb1a:	4b43      	ldr	r3, [pc, #268]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 0302 	and.w	r3, r3, #2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <HAL_RCC_OscConfig+0x176>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d001      	beq.n	800cb32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e1c0      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb32:	4b3d      	ldr	r3, [pc, #244]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	695b      	ldr	r3, [r3, #20]
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4939      	ldr	r1, [pc, #228]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb46:	e03a      	b.n	800cbbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d020      	beq.n	800cb92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb50:	4b36      	ldr	r3, [pc, #216]	@ (800cc2c <HAL_RCC_OscConfig+0x270>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb56:	f7fd feed 	bl	800a934 <HAL_GetTick>
 800cb5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb5c:	e008      	b.n	800cb70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb5e:	f7fd fee9 	bl	800a934 <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d901      	bls.n	800cb70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e1a1      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb70:	4b2d      	ldr	r3, [pc, #180]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0f0      	beq.n	800cb5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb7c:	4b2a      	ldr	r3, [pc, #168]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4927      	ldr	r1, [pc, #156]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]
 800cb90:	e015      	b.n	800cbbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb92:	4b26      	ldr	r3, [pc, #152]	@ (800cc2c <HAL_RCC_OscConfig+0x270>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb98:	f7fd fecc 	bl	800a934 <HAL_GetTick>
 800cb9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb9e:	e008      	b.n	800cbb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cba0:	f7fd fec8 	bl	800a934 <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e180      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbb2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1f0      	bne.n	800cba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d03a      	beq.n	800cc40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d019      	beq.n	800cc06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbd2:	4b17      	ldr	r3, [pc, #92]	@ (800cc30 <HAL_RCC_OscConfig+0x274>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cbd8:	f7fd feac 	bl	800a934 <HAL_GetTick>
 800cbdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbde:	e008      	b.n	800cbf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbe0:	f7fd fea8 	bl	800a934 <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d901      	bls.n	800cbf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e160      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbf2:	4b0d      	ldr	r3, [pc, #52]	@ (800cc28 <HAL_RCC_OscConfig+0x26c>)
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0f0      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800cbfe:	2001      	movs	r0, #1
 800cc00:	f000 face 	bl	800d1a0 <RCC_Delay>
 800cc04:	e01c      	b.n	800cc40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc06:	4b0a      	ldr	r3, [pc, #40]	@ (800cc30 <HAL_RCC_OscConfig+0x274>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc0c:	f7fd fe92 	bl	800a934 <HAL_GetTick>
 800cc10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc12:	e00f      	b.n	800cc34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc14:	f7fd fe8e 	bl	800a934 <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d908      	bls.n	800cc34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e146      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
 800cc26:	bf00      	nop
 800cc28:	40021000 	.word	0x40021000
 800cc2c:	42420000 	.word	0x42420000
 800cc30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc34:	4b92      	ldr	r3, [pc, #584]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc38:	f003 0302 	and.w	r3, r3, #2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1e9      	bne.n	800cc14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f000 80a6 	beq.w	800cd9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc52:	4b8b      	ldr	r3, [pc, #556]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10d      	bne.n	800cc7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc5e:	4b88      	ldr	r3, [pc, #544]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	4a87      	ldr	r2, [pc, #540]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cc64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc68:	61d3      	str	r3, [r2, #28]
 800cc6a:	4b85      	ldr	r3, [pc, #532]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc72:	60bb      	str	r3, [r7, #8]
 800cc74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc76:	2301      	movs	r3, #1
 800cc78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc7a:	4b82      	ldr	r3, [pc, #520]	@ (800ce84 <HAL_RCC_OscConfig+0x4c8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d118      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc86:	4b7f      	ldr	r3, [pc, #508]	@ (800ce84 <HAL_RCC_OscConfig+0x4c8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a7e      	ldr	r2, [pc, #504]	@ (800ce84 <HAL_RCC_OscConfig+0x4c8>)
 800cc8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc92:	f7fd fe4f 	bl	800a934 <HAL_GetTick>
 800cc96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc98:	e008      	b.n	800ccac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc9a:	f7fd fe4b 	bl	800a934 <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b64      	cmp	r3, #100	@ 0x64
 800cca6:	d901      	bls.n	800ccac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e103      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccac:	4b75      	ldr	r3, [pc, #468]	@ (800ce84 <HAL_RCC_OscConfig+0x4c8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d0f0      	beq.n	800cc9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d106      	bne.n	800ccce <HAL_RCC_OscConfig+0x312>
 800ccc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	4a6e      	ldr	r2, [pc, #440]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	6213      	str	r3, [r2, #32]
 800cccc:	e02d      	b.n	800cd2a <HAL_RCC_OscConfig+0x36e>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10c      	bne.n	800ccf0 <HAL_RCC_OscConfig+0x334>
 800ccd6:	4b6a      	ldr	r3, [pc, #424]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	4a69      	ldr	r2, [pc, #420]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccdc:	f023 0301 	bic.w	r3, r3, #1
 800cce0:	6213      	str	r3, [r2, #32]
 800cce2:	4b67      	ldr	r3, [pc, #412]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cce4:	6a1b      	ldr	r3, [r3, #32]
 800cce6:	4a66      	ldr	r2, [pc, #408]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cce8:	f023 0304 	bic.w	r3, r3, #4
 800ccec:	6213      	str	r3, [r2, #32]
 800ccee:	e01c      	b.n	800cd2a <HAL_RCC_OscConfig+0x36e>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	2b05      	cmp	r3, #5
 800ccf6:	d10c      	bne.n	800cd12 <HAL_RCC_OscConfig+0x356>
 800ccf8:	4b61      	ldr	r3, [pc, #388]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccfa:	6a1b      	ldr	r3, [r3, #32]
 800ccfc:	4a60      	ldr	r2, [pc, #384]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ccfe:	f043 0304 	orr.w	r3, r3, #4
 800cd02:	6213      	str	r3, [r2, #32]
 800cd04:	4b5e      	ldr	r3, [pc, #376]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	4a5d      	ldr	r2, [pc, #372]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd0a:	f043 0301 	orr.w	r3, r3, #1
 800cd0e:	6213      	str	r3, [r2, #32]
 800cd10:	e00b      	b.n	800cd2a <HAL_RCC_OscConfig+0x36e>
 800cd12:	4b5b      	ldr	r3, [pc, #364]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	4a5a      	ldr	r2, [pc, #360]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd18:	f023 0301 	bic.w	r3, r3, #1
 800cd1c:	6213      	str	r3, [r2, #32]
 800cd1e:	4b58      	ldr	r3, [pc, #352]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	4a57      	ldr	r2, [pc, #348]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd24:	f023 0304 	bic.w	r3, r3, #4
 800cd28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d015      	beq.n	800cd5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd32:	f7fd fdff 	bl	800a934 <HAL_GetTick>
 800cd36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd38:	e00a      	b.n	800cd50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd3a:	f7fd fdfb 	bl	800a934 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d901      	bls.n	800cd50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e0b1      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd50:	4b4b      	ldr	r3, [pc, #300]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ee      	beq.n	800cd3a <HAL_RCC_OscConfig+0x37e>
 800cd5c:	e014      	b.n	800cd88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd5e:	f7fd fde9 	bl	800a934 <HAL_GetTick>
 800cd62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd64:	e00a      	b.n	800cd7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd66:	f7fd fde5 	bl	800a934 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d901      	bls.n	800cd7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e09b      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd7c:	4b40      	ldr	r3, [pc, #256]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1ee      	bne.n	800cd66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800cd88:	7dfb      	ldrb	r3, [r7, #23]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d105      	bne.n	800cd9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd8e:	4b3c      	ldr	r3, [pc, #240]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	4a3b      	ldr	r2, [pc, #236]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cd94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8087 	beq.w	800ceb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cda4:	4b36      	ldr	r3, [pc, #216]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	f003 030c 	and.w	r3, r3, #12
 800cdac:	2b08      	cmp	r3, #8
 800cdae:	d061      	beq.n	800ce74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d146      	bne.n	800ce46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdb8:	4b33      	ldr	r3, [pc, #204]	@ (800ce88 <HAL_RCC_OscConfig+0x4cc>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdbe:	f7fd fdb9 	bl	800a934 <HAL_GetTick>
 800cdc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cdc4:	e008      	b.n	800cdd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdc6:	f7fd fdb5 	bl	800a934 <HAL_GetTick>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d901      	bls.n	800cdd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	e06d      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cdd8:	4b29      	ldr	r3, [pc, #164]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1f0      	bne.n	800cdc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdec:	d108      	bne.n	800ce00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800cdee:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	4921      	ldr	r1, [pc, #132]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce00:	4b1f      	ldr	r3, [pc, #124]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a19      	ldr	r1, [r3, #32]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce10:	430b      	orrs	r3, r1
 800ce12:	491b      	ldr	r1, [pc, #108]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ce14:	4313      	orrs	r3, r2
 800ce16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce18:	4b1b      	ldr	r3, [pc, #108]	@ (800ce88 <HAL_RCC_OscConfig+0x4cc>)
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce1e:	f7fd fd89 	bl	800a934 <HAL_GetTick>
 800ce22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ce24:	e008      	b.n	800ce38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce26:	f7fd fd85 	bl	800a934 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d901      	bls.n	800ce38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e03d      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ce38:	4b11      	ldr	r3, [pc, #68]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0f0      	beq.n	800ce26 <HAL_RCC_OscConfig+0x46a>
 800ce44:	e035      	b.n	800ceb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce46:	4b10      	ldr	r3, [pc, #64]	@ (800ce88 <HAL_RCC_OscConfig+0x4cc>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce4c:	f7fd fd72 	bl	800a934 <HAL_GetTick>
 800ce50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce52:	e008      	b.n	800ce66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce54:	f7fd fd6e 	bl	800a934 <HAL_GetTick>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d901      	bls.n	800ce66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e026      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce66:	4b06      	ldr	r3, [pc, #24]	@ (800ce80 <HAL_RCC_OscConfig+0x4c4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1f0      	bne.n	800ce54 <HAL_RCC_OscConfig+0x498>
 800ce72:	e01e      	b.n	800ceb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d107      	bne.n	800ce8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e019      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
 800ce80:	40021000 	.word	0x40021000
 800ce84:	40007000 	.word	0x40007000
 800ce88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ce8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cebc <HAL_RCC_OscConfig+0x500>)
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d106      	bne.n	800ceae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d001      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e000      	b.n	800ceb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	40021000 	.word	0x40021000

0800cec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	e0d0      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ced4:	4b6a      	ldr	r3, [pc, #424]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0307 	and.w	r3, r3, #7
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d910      	bls.n	800cf04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cee2:	4b67      	ldr	r3, [pc, #412]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f023 0207 	bic.w	r2, r3, #7
 800ceea:	4965      	ldr	r1, [pc, #404]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cef2:	4b63      	ldr	r3, [pc, #396]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d001      	beq.n	800cf04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e0b8      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d020      	beq.n	800cf52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0304 	and.w	r3, r3, #4
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d005      	beq.n	800cf28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf1c:	4b59      	ldr	r3, [pc, #356]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	4a58      	ldr	r2, [pc, #352]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cf26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0308 	and.w	r3, r3, #8
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d005      	beq.n	800cf40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cf34:	4b53      	ldr	r3, [pc, #332]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	4a52      	ldr	r2, [pc, #328]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800cf3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf40:	4b50      	ldr	r3, [pc, #320]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	494d      	ldr	r1, [pc, #308]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d040      	beq.n	800cfe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d107      	bne.n	800cf76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf66:	4b47      	ldr	r3, [pc, #284]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d115      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e07f      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d107      	bne.n	800cf8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf7e:	4b41      	ldr	r3, [pc, #260]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d109      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e073      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf8e:	4b3d      	ldr	r3, [pc, #244]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e06b      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cf9e:	4b39      	ldr	r3, [pc, #228]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f023 0203 	bic.w	r2, r3, #3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	4936      	ldr	r1, [pc, #216]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cfb0:	f7fd fcc0 	bl	800a934 <HAL_GetTick>
 800cfb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfb6:	e00a      	b.n	800cfce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfb8:	f7fd fcbc 	bl	800a934 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e053      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfce:	4b2d      	ldr	r3, [pc, #180]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	f003 020c 	and.w	r2, r3, #12
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d1eb      	bne.n	800cfb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfe0:	4b27      	ldr	r3, [pc, #156]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 0307 	and.w	r3, r3, #7
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d210      	bcs.n	800d010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfee:	4b24      	ldr	r3, [pc, #144]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f023 0207 	bic.w	r2, r3, #7
 800cff6:	4922      	ldr	r1, [pc, #136]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cffe:	4b20      	ldr	r3, [pc, #128]	@ (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d001      	beq.n	800d010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e032      	b.n	800d076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d008      	beq.n	800d02e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d01c:	4b19      	ldr	r3, [pc, #100]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	4916      	ldr	r1, [pc, #88]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0308 	and.w	r3, r3, #8
 800d036:	2b00      	cmp	r3, #0
 800d038:	d009      	beq.n	800d04e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d03a:	4b12      	ldr	r3, [pc, #72]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	490e      	ldr	r1, [pc, #56]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d04a:	4313      	orrs	r3, r2
 800d04c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d04e:	f000 f821 	bl	800d094 <HAL_RCC_GetSysClockFreq>
 800d052:	4602      	mov	r2, r0
 800d054:	4b0b      	ldr	r3, [pc, #44]	@ (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	091b      	lsrs	r3, r3, #4
 800d05a:	f003 030f 	and.w	r3, r3, #15
 800d05e:	490a      	ldr	r1, [pc, #40]	@ (800d088 <HAL_RCC_ClockConfig+0x1c8>)
 800d060:	5ccb      	ldrb	r3, [r1, r3]
 800d062:	fa22 f303 	lsr.w	r3, r2, r3
 800d066:	4a09      	ldr	r2, [pc, #36]	@ (800d08c <HAL_RCC_ClockConfig+0x1cc>)
 800d068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d06a:	4b09      	ldr	r3, [pc, #36]	@ (800d090 <HAL_RCC_ClockConfig+0x1d0>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd fc1e 	bl	800a8b0 <HAL_InitTick>

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	40022000 	.word	0x40022000
 800d084:	40021000 	.word	0x40021000
 800d088:	0800f3ac 	.word	0x0800f3ac
 800d08c:	20000f74 	.word	0x20000f74
 800d090:	20000f78 	.word	0x20000f78

0800d094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d094:	b480      	push	{r7}
 800d096:	b087      	sub	sp, #28
 800d098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60bb      	str	r3, [r7, #8]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d128 <HAL_RCC_GetSysClockFreq+0x94>)
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f003 030c 	and.w	r3, r3, #12
 800d0ba:	2b04      	cmp	r3, #4
 800d0bc:	d002      	beq.n	800d0c4 <HAL_RCC_GetSysClockFreq+0x30>
 800d0be:	2b08      	cmp	r3, #8
 800d0c0:	d003      	beq.n	800d0ca <HAL_RCC_GetSysClockFreq+0x36>
 800d0c2:	e027      	b.n	800d114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d0c4:	4b19      	ldr	r3, [pc, #100]	@ (800d12c <HAL_RCC_GetSysClockFreq+0x98>)
 800d0c6:	613b      	str	r3, [r7, #16]
      break;
 800d0c8:	e027      	b.n	800d11a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	0c9b      	lsrs	r3, r3, #18
 800d0ce:	f003 030f 	and.w	r3, r3, #15
 800d0d2:	4a17      	ldr	r2, [pc, #92]	@ (800d130 <HAL_RCC_GetSysClockFreq+0x9c>)
 800d0d4:	5cd3      	ldrb	r3, [r2, r3]
 800d0d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d010      	beq.n	800d104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d0e2:	4b11      	ldr	r3, [pc, #68]	@ (800d128 <HAL_RCC_GetSysClockFreq+0x94>)
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	0c5b      	lsrs	r3, r3, #17
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	4a11      	ldr	r2, [pc, #68]	@ (800d134 <HAL_RCC_GetSysClockFreq+0xa0>)
 800d0ee:	5cd3      	ldrb	r3, [r2, r3]
 800d0f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a0d      	ldr	r2, [pc, #52]	@ (800d12c <HAL_RCC_GetSysClockFreq+0x98>)
 800d0f6:	fb03 f202 	mul.w	r2, r3, r2
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d100:	617b      	str	r3, [r7, #20]
 800d102:	e004      	b.n	800d10e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a0c      	ldr	r2, [pc, #48]	@ (800d138 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d108:	fb02 f303 	mul.w	r3, r2, r3
 800d10c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	613b      	str	r3, [r7, #16]
      break;
 800d112:	e002      	b.n	800d11a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d114:	4b05      	ldr	r3, [pc, #20]	@ (800d12c <HAL_RCC_GetSysClockFreq+0x98>)
 800d116:	613b      	str	r3, [r7, #16]
      break;
 800d118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d11a:	693b      	ldr	r3, [r7, #16]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	371c      	adds	r7, #28
 800d120:	46bd      	mov	sp, r7
 800d122:	bc80      	pop	{r7}
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	40021000 	.word	0x40021000
 800d12c:	007a1200 	.word	0x007a1200
 800d130:	0800f3c4 	.word	0x0800f3c4
 800d134:	0800f3d4 	.word	0x0800f3d4
 800d138:	003d0900 	.word	0x003d0900

0800d13c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d140:	4b02      	ldr	r3, [pc, #8]	@ (800d14c <HAL_RCC_GetHCLKFreq+0x10>)
 800d142:	681b      	ldr	r3, [r3, #0]
}
 800d144:	4618      	mov	r0, r3
 800d146:	46bd      	mov	sp, r7
 800d148:	bc80      	pop	{r7}
 800d14a:	4770      	bx	lr
 800d14c:	20000f74 	.word	0x20000f74

0800d150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d154:	f7ff fff2 	bl	800d13c <HAL_RCC_GetHCLKFreq>
 800d158:	4602      	mov	r2, r0
 800d15a:	4b05      	ldr	r3, [pc, #20]	@ (800d170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	f003 0307 	and.w	r3, r3, #7
 800d164:	4903      	ldr	r1, [pc, #12]	@ (800d174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d166:	5ccb      	ldrb	r3, [r1, r3]
 800d168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	40021000 	.word	0x40021000
 800d174:	0800f3bc 	.word	0x0800f3bc

0800d178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d17c:	f7ff ffde 	bl	800d13c <HAL_RCC_GetHCLKFreq>
 800d180:	4602      	mov	r2, r0
 800d182:	4b05      	ldr	r3, [pc, #20]	@ (800d198 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	0adb      	lsrs	r3, r3, #11
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	4903      	ldr	r1, [pc, #12]	@ (800d19c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d18e:	5ccb      	ldrb	r3, [r1, r3]
 800d190:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d194:	4618      	mov	r0, r3
 800d196:	bd80      	pop	{r7, pc}
 800d198:	40021000 	.word	0x40021000
 800d19c:	0800f3bc 	.word	0x0800f3bc

0800d1a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d1d4 <RCC_Delay+0x34>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d1d8 <RCC_Delay+0x38>)
 800d1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b2:	0a5b      	lsrs	r3, r3, #9
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d1bc:	bf00      	nop
  }
  while (Delay --);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	1e5a      	subs	r2, r3, #1
 800d1c2:	60fa      	str	r2, [r7, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1f9      	bne.n	800d1bc <RCC_Delay+0x1c>
}
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bc80      	pop	{r7}
 800d1d2:	4770      	bx	lr
 800d1d4:	20000f74 	.word	0x20000f74
 800d1d8:	10624dd3 	.word	0x10624dd3

0800d1dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e041      	b.n	800d272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7fd fa22 	bl	800a64c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3304      	adds	r3, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	4610      	mov	r0, r2
 800d21c:	f000 fa82 	bl	800d724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d001      	beq.n	800d294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	e044      	b.n	800d31e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2202      	movs	r2, #2
 800d298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68da      	ldr	r2, [r3, #12]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f042 0201 	orr.w	r2, r2, #1
 800d2aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d328 <HAL_TIM_Base_Start_IT+0xac>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d018      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x6c>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d32c <HAL_TIM_Base_Start_IT+0xb0>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d013      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x6c>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2c8:	d00e      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x6c>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a18      	ldr	r2, [pc, #96]	@ (800d330 <HAL_TIM_Base_Start_IT+0xb4>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d009      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x6c>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a16      	ldr	r2, [pc, #88]	@ (800d334 <HAL_TIM_Base_Start_IT+0xb8>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d004      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x6c>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a15      	ldr	r2, [pc, #84]	@ (800d338 <HAL_TIM_Base_Start_IT+0xbc>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d111      	bne.n	800d30c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f003 0307 	and.w	r3, r3, #7
 800d2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b06      	cmp	r3, #6
 800d2f8:	d010      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f042 0201 	orr.w	r2, r2, #1
 800d308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d30a:	e007      	b.n	800d31c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0201 	orr.w	r2, r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	bc80      	pop	{r7}
 800d326:	4770      	bx	lr
 800d328:	40012c00 	.word	0x40012c00
 800d32c:	40013400 	.word	0x40013400
 800d330:	40000400 	.word	0x40000400
 800d334:	40000800 	.word	0x40000800
 800d338:	40000c00 	.word	0x40000c00

0800d33c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d122      	bne.n	800d398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	f003 0302 	and.w	r3, r3, #2
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d11b      	bne.n	800d398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f06f 0202 	mvn.w	r2, #2
 800d368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2201      	movs	r2, #1
 800d36e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f9b4 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d384:	e005      	b.n	800d392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f9a7 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f9b6 	bl	800d6fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	f003 0304 	and.w	r3, r3, #4
 800d3a2:	2b04      	cmp	r3, #4
 800d3a4:	d122      	bne.n	800d3ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f003 0304 	and.w	r3, r3, #4
 800d3b0:	2b04      	cmp	r3, #4
 800d3b2:	d11b      	bne.n	800d3ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f06f 0204 	mvn.w	r2, #4
 800d3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f98a 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d3d8:	e005      	b.n	800d3e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 f97d 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f98c 	bl	800d6fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	f003 0308 	and.w	r3, r3, #8
 800d3f6:	2b08      	cmp	r3, #8
 800d3f8:	d122      	bne.n	800d440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	f003 0308 	and.w	r3, r3, #8
 800d404:	2b08      	cmp	r3, #8
 800d406:	d11b      	bne.n	800d440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f06f 0208 	mvn.w	r2, #8
 800d410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2204      	movs	r2, #4
 800d416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	69db      	ldr	r3, [r3, #28]
 800d41e:	f003 0303 	and.w	r3, r3, #3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f960 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d42c:	e005      	b.n	800d43a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f953 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f962 	bl	800d6fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 0310 	and.w	r3, r3, #16
 800d44a:	2b10      	cmp	r3, #16
 800d44c:	d122      	bne.n	800d494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f003 0310 	and.w	r3, r3, #16
 800d458:	2b10      	cmp	r3, #16
 800d45a:	d11b      	bne.n	800d494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f06f 0210 	mvn.w	r2, #16
 800d464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2208      	movs	r2, #8
 800d46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	69db      	ldr	r3, [r3, #28]
 800d472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f936 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d480:	e005      	b.n	800d48e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f929 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f938 	bl	800d6fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d10e      	bne.n	800d4c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d107      	bne.n	800d4c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f06f 0201 	mvn.w	r2, #1
 800d4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7fc fd5e 	bl	8009f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ca:	2b80      	cmp	r3, #128	@ 0x80
 800d4cc:	d10e      	bne.n	800d4ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4d8:	2b80      	cmp	r3, #128	@ 0x80
 800d4da:	d107      	bne.n	800d4ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 faa1 	bl	800da2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4f6:	2b40      	cmp	r3, #64	@ 0x40
 800d4f8:	d10e      	bne.n	800d518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d504:	2b40      	cmp	r3, #64	@ 0x40
 800d506:	d107      	bne.n	800d518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f8fc 	bl	800d710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	f003 0320 	and.w	r3, r3, #32
 800d522:	2b20      	cmp	r3, #32
 800d524:	d10e      	bne.n	800d544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b20      	cmp	r3, #32
 800d532:	d107      	bne.n	800d544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f06f 0220 	mvn.w	r2, #32
 800d53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fa6c 	bl	800da1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d544:	bf00      	nop
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d560:	2b01      	cmp	r3, #1
 800d562:	d101      	bne.n	800d568 <HAL_TIM_ConfigClockSource+0x1c>
 800d564:	2302      	movs	r3, #2
 800d566:	e0b4      	b.n	800d6d2 <HAL_TIM_ConfigClockSource+0x186>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d58e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5a0:	d03e      	beq.n	800d620 <HAL_TIM_ConfigClockSource+0xd4>
 800d5a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5a6:	f200 8087 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ae:	f000 8086 	beq.w	800d6be <HAL_TIM_ConfigClockSource+0x172>
 800d5b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5b6:	d87f      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5b8:	2b70      	cmp	r3, #112	@ 0x70
 800d5ba:	d01a      	beq.n	800d5f2 <HAL_TIM_ConfigClockSource+0xa6>
 800d5bc:	2b70      	cmp	r3, #112	@ 0x70
 800d5be:	d87b      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c0:	2b60      	cmp	r3, #96	@ 0x60
 800d5c2:	d050      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x11a>
 800d5c4:	2b60      	cmp	r3, #96	@ 0x60
 800d5c6:	d877      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c8:	2b50      	cmp	r3, #80	@ 0x50
 800d5ca:	d03c      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0xfa>
 800d5cc:	2b50      	cmp	r3, #80	@ 0x50
 800d5ce:	d873      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d0:	2b40      	cmp	r3, #64	@ 0x40
 800d5d2:	d058      	beq.n	800d686 <HAL_TIM_ConfigClockSource+0x13a>
 800d5d4:	2b40      	cmp	r3, #64	@ 0x40
 800d5d6:	d86f      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d8:	2b30      	cmp	r3, #48	@ 0x30
 800d5da:	d064      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x15a>
 800d5dc:	2b30      	cmp	r3, #48	@ 0x30
 800d5de:	d86b      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5e0:	2b20      	cmp	r3, #32
 800d5e2:	d060      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x15a>
 800d5e4:	2b20      	cmp	r3, #32
 800d5e6:	d867      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d05c      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x15a>
 800d5ec:	2b10      	cmp	r3, #16
 800d5ee:	d05a      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x15a>
 800d5f0:	e062      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d602:	f000 f980 	bl	800d906 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	609a      	str	r2, [r3, #8]
      break;
 800d61e:	e04f      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d630:	f000 f969 	bl	800d906 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d642:	609a      	str	r2, [r3, #8]
      break;
 800d644:	e03c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d652:	461a      	mov	r2, r3
 800d654:	f000 f8e0 	bl	800d818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2150      	movs	r1, #80	@ 0x50
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 f937 	bl	800d8d2 <TIM_ITRx_SetConfig>
      break;
 800d664:	e02c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d672:	461a      	mov	r2, r3
 800d674:	f000 f8fe 	bl	800d874 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2160      	movs	r1, #96	@ 0x60
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 f927 	bl	800d8d2 <TIM_ITRx_SetConfig>
      break;
 800d684:	e01c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d692:	461a      	mov	r2, r3
 800d694:	f000 f8c0 	bl	800d818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2140      	movs	r1, #64	@ 0x40
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f917 	bl	800d8d2 <TIM_ITRx_SetConfig>
      break;
 800d6a4:	e00c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	f000 f90e 	bl	800d8d2 <TIM_ITRx_SetConfig>
      break;
 800d6b6:	e003      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d6bc:	e000      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d6be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d6e2:	bf00      	nop
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bc80      	pop	{r7}
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bc80      	pop	{r7}
 800d6fc:	4770      	bx	lr

0800d6fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b083      	sub	sp, #12
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bc80      	pop	{r7}
 800d70e:	4770      	bx	lr

0800d710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bc80      	pop	{r7}
 800d720:	4770      	bx	lr
	...

0800d724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a33      	ldr	r2, [pc, #204]	@ (800d804 <TIM_Base_SetConfig+0xe0>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d013      	beq.n	800d764 <TIM_Base_SetConfig+0x40>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a32      	ldr	r2, [pc, #200]	@ (800d808 <TIM_Base_SetConfig+0xe4>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d00f      	beq.n	800d764 <TIM_Base_SetConfig+0x40>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d74a:	d00b      	beq.n	800d764 <TIM_Base_SetConfig+0x40>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a2f      	ldr	r2, [pc, #188]	@ (800d80c <TIM_Base_SetConfig+0xe8>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d007      	beq.n	800d764 <TIM_Base_SetConfig+0x40>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a2e      	ldr	r2, [pc, #184]	@ (800d810 <TIM_Base_SetConfig+0xec>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d003      	beq.n	800d764 <TIM_Base_SetConfig+0x40>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a2d      	ldr	r2, [pc, #180]	@ (800d814 <TIM_Base_SetConfig+0xf0>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d108      	bne.n	800d776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d76a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4313      	orrs	r3, r2
 800d774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a22      	ldr	r2, [pc, #136]	@ (800d804 <TIM_Base_SetConfig+0xe0>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d013      	beq.n	800d7a6 <TIM_Base_SetConfig+0x82>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a21      	ldr	r2, [pc, #132]	@ (800d808 <TIM_Base_SetConfig+0xe4>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d00f      	beq.n	800d7a6 <TIM_Base_SetConfig+0x82>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d78c:	d00b      	beq.n	800d7a6 <TIM_Base_SetConfig+0x82>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a1e      	ldr	r2, [pc, #120]	@ (800d80c <TIM_Base_SetConfig+0xe8>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d007      	beq.n	800d7a6 <TIM_Base_SetConfig+0x82>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a1d      	ldr	r2, [pc, #116]	@ (800d810 <TIM_Base_SetConfig+0xec>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d003      	beq.n	800d7a6 <TIM_Base_SetConfig+0x82>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a1c      	ldr	r2, [pc, #112]	@ (800d814 <TIM_Base_SetConfig+0xf0>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d108      	bne.n	800d7b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d7ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	689a      	ldr	r2, [r3, #8]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a09      	ldr	r2, [pc, #36]	@ (800d804 <TIM_Base_SetConfig+0xe0>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d003      	beq.n	800d7ec <TIM_Base_SetConfig+0xc8>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a08      	ldr	r2, [pc, #32]	@ (800d808 <TIM_Base_SetConfig+0xe4>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d103      	bne.n	800d7f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	691a      	ldr	r2, [r3, #16]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	615a      	str	r2, [r3, #20]
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bc80      	pop	{r7}
 800d802:	4770      	bx	lr
 800d804:	40012c00 	.word	0x40012c00
 800d808:	40013400 	.word	0x40013400
 800d80c:	40000400 	.word	0x40000400
 800d810:	40000800 	.word	0x40000800
 800d814:	40000c00 	.word	0x40000c00

0800d818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d818:	b480      	push	{r7}
 800d81a:	b087      	sub	sp, #28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	f023 0201 	bic.w	r2, r3, #1
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	011b      	lsls	r3, r3, #4
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f023 030a 	bic.w	r3, r3, #10
 800d854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	621a      	str	r2, [r3, #32]
}
 800d86a:	bf00      	nop
 800d86c:	371c      	adds	r7, #28
 800d86e:	46bd      	mov	sp, r7
 800d870:	bc80      	pop	{r7}
 800d872:	4770      	bx	lr

0800d874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6a1b      	ldr	r3, [r3, #32]
 800d884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	f023 0210 	bic.w	r2, r3, #16
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d89e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	031b      	lsls	r3, r3, #12
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d8b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	621a      	str	r2, [r3, #32]
}
 800d8c8:	bf00      	nop
 800d8ca:	371c      	adds	r7, #28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bc80      	pop	{r7}
 800d8d0:	4770      	bx	lr

0800d8d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	f043 0307 	orr.w	r3, r3, #7
 800d8f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	609a      	str	r2, [r3, #8]
}
 800d8fc:	bf00      	nop
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	bc80      	pop	{r7}
 800d904:	4770      	bx	lr

0800d906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d906:	b480      	push	{r7}
 800d908:	b087      	sub	sp, #28
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
 800d912:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d920:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	021a      	lsls	r2, r3, #8
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	431a      	orrs	r2, r3
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	4313      	orrs	r3, r2
 800d932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	609a      	str	r2, [r3, #8]
}
 800d93a:	bf00      	nop
 800d93c:	371c      	adds	r7, #28
 800d93e:	46bd      	mov	sp, r7
 800d940:	bc80      	pop	{r7}
 800d942:	4770      	bx	lr

0800d944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d954:	2b01      	cmp	r3, #1
 800d956:	d101      	bne.n	800d95c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d958:	2302      	movs	r3, #2
 800d95a:	e050      	b.n	800d9fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a1b      	ldr	r2, [pc, #108]	@ (800da08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d018      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a19      	ldr	r2, [pc, #100]	@ (800da0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d013      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a15      	ldr	r2, [pc, #84]	@ (800da10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d009      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a14      	ldr	r2, [pc, #80]	@ (800da14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d004      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a12      	ldr	r2, [pc, #72]	@ (800da18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d10c      	bne.n	800d9ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	bc80      	pop	{r7}
 800da06:	4770      	bx	lr
 800da08:	40012c00 	.word	0x40012c00
 800da0c:	40013400 	.word	0x40013400
 800da10:	40000400 	.word	0x40000400
 800da14:	40000800 	.word	0x40000800
 800da18:	40000c00 	.word	0x40000c00

0800da1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	bc80      	pop	{r7}
 800da2c:	4770      	bx	lr

0800da2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da36:	bf00      	nop
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bc80      	pop	{r7}
 800da3e:	4770      	bx	lr

0800da40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e042      	b.n	800dad8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7fc fe16 	bl	800a698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2224      	movs	r2, #36	@ 0x24
 800da70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800da82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fcb5 	bl	800e3f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	691a      	ldr	r2, [r3, #16]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800da98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	695a      	ldr	r2, [r3, #20]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800daa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	68da      	ldr	r2, [r3, #12]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2220      	movs	r2, #32
 800dacc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d121      	bne.n	800db3e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <HAL_UART_Transmit_IT+0x26>
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e01a      	b.n	800db40 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	88fa      	ldrh	r2, [r7, #6]
 800db14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	88fa      	ldrh	r2, [r7, #6]
 800db1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2221      	movs	r2, #33	@ 0x21
 800db26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800db38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e000      	b.n	800db40 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800db3e:	2302      	movs	r3, #2
  }
}
 800db40:	4618      	mov	r0, r3
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	bc80      	pop	{r7}
 800db48:	4770      	bx	lr
	...

0800db4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b0ba      	sub	sp, #232	@ 0xe8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800db72:	2300      	movs	r3, #0
 800db74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800db78:	2300      	movs	r3, #0
 800db7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800db7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db82:	f003 030f 	and.w	r3, r3, #15
 800db86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800db8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10f      	bne.n	800dbb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db96:	f003 0320 	and.w	r3, r3, #32
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d009      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x66>
 800db9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fb63 	bl	800e276 <UART_Receive_IT>
      return;
 800dbb0:	e25b      	b.n	800e06a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dbb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80de 	beq.w	800dd78 <HAL_UART_IRQHandler+0x22c>
 800dbbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d106      	bne.n	800dbd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dbc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80d1 	beq.w	800dd78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dbd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00b      	beq.n	800dbfa <HAL_UART_IRQHandler+0xae>
 800dbe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbf2:	f043 0201 	orr.w	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbfe:	f003 0304 	and.w	r3, r3, #4
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00b      	beq.n	800dc1e <HAL_UART_IRQHandler+0xd2>
 800dc06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc16:	f043 0202 	orr.w	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc22:	f003 0302 	and.w	r3, r3, #2
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00b      	beq.n	800dc42 <HAL_UART_IRQHandler+0xf6>
 800dc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc3a:	f043 0204 	orr.w	r2, r3, #4
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc46:	f003 0308 	and.w	r3, r3, #8
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d011      	beq.n	800dc72 <HAL_UART_IRQHandler+0x126>
 800dc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc52:	f003 0320 	and.w	r3, r3, #32
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dc5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc6a:	f043 0208 	orr.w	r2, r3, #8
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 81f2 	beq.w	800e060 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc80:	f003 0320 	and.w	r3, r3, #32
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d008      	beq.n	800dc9a <HAL_UART_IRQHandler+0x14e>
 800dc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 faee 	bl	800e276 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bf14      	ite	ne
 800dca8:	2301      	movne	r3, #1
 800dcaa:	2300      	moveq	r3, #0
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb6:	f003 0308 	and.w	r3, r3, #8
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <HAL_UART_IRQHandler+0x17a>
 800dcbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d04f      	beq.n	800dd66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 f9f8 	bl	800e0bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d041      	beq.n	800dd5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3314      	adds	r3, #20
 800dce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dcf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dcf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3314      	adds	r3, #20
 800dd02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dd06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dd0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dd12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dd16:	e841 2300 	strex	r3, r2, [r1]
 800dd1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dd1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1d9      	bne.n	800dcda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d013      	beq.n	800dd56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd32:	4a7e      	ldr	r2, [pc, #504]	@ (800df2c <HAL_UART_IRQHandler+0x3e0>)
 800dd34:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fd f86c 	bl	800ae18 <HAL_DMA_Abort_IT>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d016      	beq.n	800dd74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd54:	e00e      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f99c 	bl	800e094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd5c:	e00a      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f998 	bl	800e094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd64:	e006      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f994 	bl	800e094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800dd72:	e175      	b.n	800e060 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd74:	bf00      	nop
    return;
 800dd76:	e173      	b.n	800e060 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	f040 814f 	bne.w	800e020 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd86:	f003 0310 	and.w	r3, r3, #16
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 8148 	beq.w	800e020 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd94:	f003 0310 	and.w	r3, r3, #16
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 8141 	beq.w	800e020 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60bb      	str	r3, [r7, #8]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60bb      	str	r3, [r7, #8]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	60bb      	str	r3, [r7, #8]
 800ddb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 80b6 	beq.w	800df30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ddd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 8145 	beq.w	800e064 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ddde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dde2:	429a      	cmp	r2, r3
 800dde4:	f080 813e 	bcs.w	800e064 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ddee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	2b20      	cmp	r3, #32
 800ddf8:	f000 8088 	beq.w	800df0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	330c      	adds	r3, #12
 800de02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de0a:	e853 3f00 	ldrex	r3, [r3]
 800de0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800de12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800de16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	330c      	adds	r3, #12
 800de24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800de28:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800de2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800de34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800de38:	e841 2300 	strex	r3, r2, [r1]
 800de3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800de40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1d9      	bne.n	800ddfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3314      	adds	r3, #20
 800de4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de52:	e853 3f00 	ldrex	r3, [r3]
 800de56:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de5a:	f023 0301 	bic.w	r3, r3, #1
 800de5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3314      	adds	r3, #20
 800de68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800de6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800de70:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de78:	e841 2300 	strex	r3, r2, [r1]
 800de7c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1e1      	bne.n	800de48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3314      	adds	r3, #20
 800de8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3314      	adds	r3, #20
 800dea4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dea8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800deaa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800deae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800deb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e3      	bne.n	800de84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2220      	movs	r2, #32
 800dec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	330c      	adds	r3, #12
 800ded0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded4:	e853 3f00 	ldrex	r3, [r3]
 800ded8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800deda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dedc:	f023 0310 	bic.w	r3, r3, #16
 800dee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	330c      	adds	r3, #12
 800deea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800deee:	65ba      	str	r2, [r7, #88]	@ 0x58
 800def0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800def4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800def6:	e841 2300 	strex	r3, r2, [r1]
 800defa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800defc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e3      	bne.n	800deca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df06:	4618      	mov	r0, r3
 800df08:	f7fc ff4b 	bl	800ada2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2202      	movs	r2, #2
 800df10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	b29b      	uxth	r3, r3
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f8bf 	bl	800e0a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800df28:	e09c      	b.n	800e064 <HAL_UART_IRQHandler+0x518>
 800df2a:	bf00      	nop
 800df2c:	0800e181 	.word	0x0800e181
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df38:	b29b      	uxth	r3, r3
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df44:	b29b      	uxth	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	f000 808e 	beq.w	800e068 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800df4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 8089 	beq.w	800e068 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	330c      	adds	r3, #12
 800df5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df60:	e853 3f00 	ldrex	r3, [r3]
 800df64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	330c      	adds	r3, #12
 800df76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800df7a:	647a      	str	r2, [r7, #68]	@ 0x44
 800df7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df82:	e841 2300 	strex	r3, r2, [r1]
 800df86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1e3      	bne.n	800df56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3314      	adds	r3, #20
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	e853 3f00 	ldrex	r3, [r3]
 800df9c:	623b      	str	r3, [r7, #32]
   return(result);
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	f023 0301 	bic.w	r3, r3, #1
 800dfa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3314      	adds	r3, #20
 800dfae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dfb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dfb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfba:	e841 2300 	strex	r3, r2, [r1]
 800dfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e3      	bne.n	800df8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2220      	movs	r2, #32
 800dfca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	330c      	adds	r3, #12
 800dfda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	e853 3f00 	ldrex	r3, [r3]
 800dfe2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f023 0310 	bic.w	r3, r3, #16
 800dfea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	330c      	adds	r3, #12
 800dff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dff8:	61fa      	str	r2, [r7, #28]
 800dffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	69b9      	ldr	r1, [r7, #24]
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	617b      	str	r3, [r7, #20]
   return(result);
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e3      	bne.n	800dfd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2202      	movs	r2, #2
 800e010:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f844 	bl	800e0a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e01e:	e023      	b.n	800e068 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d009      	beq.n	800e040 <HAL_UART_IRQHandler+0x4f4>
 800e02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e034:	2b00      	cmp	r3, #0
 800e036:	d003      	beq.n	800e040 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f8b5 	bl	800e1a8 <UART_Transmit_IT>
    return;
 800e03e:	e014      	b.n	800e06a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00e      	beq.n	800e06a <HAL_UART_IRQHandler+0x51e>
 800e04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e054:	2b00      	cmp	r3, #0
 800e056:	d008      	beq.n	800e06a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f8f4 	bl	800e246 <UART_EndTransmit_IT>
    return;
 800e05e:	e004      	b.n	800e06a <HAL_UART_IRQHandler+0x51e>
    return;
 800e060:	bf00      	nop
 800e062:	e002      	b.n	800e06a <HAL_UART_IRQHandler+0x51e>
      return;
 800e064:	bf00      	nop
 800e066:	e000      	b.n	800e06a <HAL_UART_IRQHandler+0x51e>
      return;
 800e068:	bf00      	nop
  }
}
 800e06a:	37e8      	adds	r7, #232	@ 0xe8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e078:	bf00      	nop
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bc80      	pop	{r7}
 800e080:	4770      	bx	lr

0800e082 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e082:	b480      	push	{r7}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e08a:	bf00      	nop
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	bc80      	pop	{r7}
 800e092:	4770      	bx	lr

0800e094 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e09c:	bf00      	nop
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bc80      	pop	{r7}
 800e0a4:	4770      	bx	lr

0800e0a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0b2:	bf00      	nop
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bc80      	pop	{r7}
 800e0ba:	4770      	bx	lr

0800e0bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b095      	sub	sp, #84	@ 0x54
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	330c      	adds	r3, #12
 800e0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ce:	e853 3f00 	ldrex	r3, [r3]
 800e0d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e0da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	330c      	adds	r3, #12
 800e0e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800e0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e0ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e0ec:	e841 2300 	strex	r3, r2, [r1]
 800e0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1e5      	bne.n	800e0c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	3314      	adds	r3, #20
 800e0fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	e853 3f00 	ldrex	r3, [r3]
 800e106:	61fb      	str	r3, [r7, #28]
   return(result);
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	f023 0301 	bic.w	r3, r3, #1
 800e10e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3314      	adds	r3, #20
 800e116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e120:	e841 2300 	strex	r3, r2, [r1]
 800e124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e5      	bne.n	800e0f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e130:	2b01      	cmp	r3, #1
 800e132:	d119      	bne.n	800e168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	330c      	adds	r3, #12
 800e13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	e853 3f00 	ldrex	r3, [r3]
 800e142:	60bb      	str	r3, [r7, #8]
   return(result);
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	f023 0310 	bic.w	r3, r3, #16
 800e14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	330c      	adds	r3, #12
 800e152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e154:	61ba      	str	r2, [r7, #24]
 800e156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e158:	6979      	ldr	r1, [r7, #20]
 800e15a:	69ba      	ldr	r2, [r7, #24]
 800e15c:	e841 2300 	strex	r3, r2, [r1]
 800e160:	613b      	str	r3, [r7, #16]
   return(result);
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1e5      	bne.n	800e134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2220      	movs	r2, #32
 800e16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e176:	bf00      	nop
 800e178:	3754      	adds	r7, #84	@ 0x54
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bc80      	pop	{r7}
 800e17e:	4770      	bx	lr

0800e180 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e18c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7ff ff7a 	bl	800e094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1a0:	bf00      	nop
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b21      	cmp	r3, #33	@ 0x21
 800e1ba:	d13e      	bne.n	800e23a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1c4:	d114      	bne.n	800e1f0 <UART_Transmit_IT+0x48>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d110      	bne.n	800e1f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a1b      	ldr	r3, [r3, #32]
 800e1d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a1b      	ldr	r3, [r3, #32]
 800e1e8:	1c9a      	adds	r2, r3, #2
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	621a      	str	r2, [r3, #32]
 800e1ee:	e008      	b.n	800e202 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a1b      	ldr	r3, [r3, #32]
 800e1f4:	1c59      	adds	r1, r3, #1
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6211      	str	r1, [r2, #32]
 800e1fa:	781a      	ldrb	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e206:	b29b      	uxth	r3, r3
 800e208:	3b01      	subs	r3, #1
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	4619      	mov	r1, r3
 800e210:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10f      	bne.n	800e236 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68da      	ldr	r2, [r3, #12]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	68da      	ldr	r2, [r3, #12]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	e000      	b.n	800e23c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e23a:	2302      	movs	r3, #2
  }
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3714      	adds	r7, #20
 800e240:	46bd      	mov	sp, r7
 800e242:	bc80      	pop	{r7}
 800e244:	4770      	bx	lr

0800e246 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68da      	ldr	r2, [r3, #12]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e25c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2220      	movs	r2, #32
 800e262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7ff ff02 	bl	800e070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b08c      	sub	sp, #48	@ 0x30
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b22      	cmp	r3, #34	@ 0x22
 800e288:	f040 80ae 	bne.w	800e3e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e294:	d117      	bne.n	800e2c6 <UART_Receive_IT+0x50>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d113      	bne.n	800e2c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2be:	1c9a      	adds	r2, r3, #2
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	629a      	str	r2, [r3, #40]	@ 0x28
 800e2c4:	e026      	b.n	800e314 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2d8:	d007      	beq.n	800e2ea <UART_Receive_IT+0x74>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10a      	bne.n	800e2f8 <UART_Receive_IT+0x82>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d106      	bne.n	800e2f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	701a      	strb	r2, [r3, #0]
 800e2f6:	e008      	b.n	800e30a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e304:	b2da      	uxtb	r2, r3
 800e306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e308:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e318:	b29b      	uxth	r3, r3
 800e31a:	3b01      	subs	r3, #1
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4619      	mov	r1, r3
 800e322:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e324:	2b00      	cmp	r3, #0
 800e326:	d15d      	bne.n	800e3e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68da      	ldr	r2, [r3, #12]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f022 0220 	bic.w	r2, r2, #32
 800e336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68da      	ldr	r2, [r3, #12]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	695a      	ldr	r2, [r3, #20]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f022 0201 	bic.w	r2, r2, #1
 800e356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2220      	movs	r2, #32
 800e35c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d135      	bne.n	800e3da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	330c      	adds	r3, #12
 800e37a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	e853 3f00 	ldrex	r3, [r3]
 800e382:	613b      	str	r3, [r7, #16]
   return(result);
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	f023 0310 	bic.w	r3, r3, #16
 800e38a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	330c      	adds	r3, #12
 800e392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e394:	623a      	str	r2, [r7, #32]
 800e396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	69f9      	ldr	r1, [r7, #28]
 800e39a:	6a3a      	ldr	r2, [r7, #32]
 800e39c:	e841 2300 	strex	r3, r2, [r1]
 800e3a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1e5      	bne.n	800e374 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 0310 	and.w	r3, r3, #16
 800e3b2:	2b10      	cmp	r3, #16
 800e3b4:	d10a      	bne.n	800e3cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7ff fe67 	bl	800e0a6 <HAL_UARTEx_RxEventCallback>
 800e3d8:	e002      	b.n	800e3e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fe51 	bl	800e082 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e002      	b.n	800e3ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e000      	b.n	800e3ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e3e8:	2302      	movs	r3, #2
  }
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3730      	adds	r7, #48	@ 0x30
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	68da      	ldr	r2, [r3, #12]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	430a      	orrs	r2, r1
 800e410:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	689a      	ldr	r2, [r3, #8]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	431a      	orrs	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	4313      	orrs	r3, r2
 800e422:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800e42e:	f023 030c 	bic.w	r3, r3, #12
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	6812      	ldr	r2, [r2, #0]
 800e436:	68b9      	ldr	r1, [r7, #8]
 800e438:	430b      	orrs	r3, r1
 800e43a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	430a      	orrs	r2, r1
 800e450:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a2c      	ldr	r2, [pc, #176]	@ (800e508 <UART_SetConfig+0x114>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d103      	bne.n	800e464 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e45c:	f7fe fe8c 	bl	800d178 <HAL_RCC_GetPCLK2Freq>
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	e002      	b.n	800e46a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e464:	f7fe fe74 	bl	800d150 <HAL_RCC_GetPCLK1Freq>
 800e468:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009a      	lsls	r2, r3, #2
 800e474:	441a      	add	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e480:	4a22      	ldr	r2, [pc, #136]	@ (800e50c <UART_SetConfig+0x118>)
 800e482:	fba2 2303 	umull	r2, r3, r2, r3
 800e486:	095b      	lsrs	r3, r3, #5
 800e488:	0119      	lsls	r1, r3, #4
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009a      	lsls	r2, r3, #2
 800e494:	441a      	add	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800e50c <UART_SetConfig+0x118>)
 800e4a2:	fba3 0302 	umull	r0, r3, r3, r2
 800e4a6:	095b      	lsrs	r3, r3, #5
 800e4a8:	2064      	movs	r0, #100	@ 0x64
 800e4aa:	fb00 f303 	mul.w	r3, r0, r3
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	011b      	lsls	r3, r3, #4
 800e4b2:	3332      	adds	r3, #50	@ 0x32
 800e4b4:	4a15      	ldr	r2, [pc, #84]	@ (800e50c <UART_SetConfig+0x118>)
 800e4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ba:	095b      	lsrs	r3, r3, #5
 800e4bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e4c0:	4419      	add	r1, r3
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	4413      	add	r3, r2
 800e4ca:	009a      	lsls	r2, r3, #2
 800e4cc:	441a      	add	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e4d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e50c <UART_SetConfig+0x118>)
 800e4da:	fba3 0302 	umull	r0, r3, r3, r2
 800e4de:	095b      	lsrs	r3, r3, #5
 800e4e0:	2064      	movs	r0, #100	@ 0x64
 800e4e2:	fb00 f303 	mul.w	r3, r0, r3
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	011b      	lsls	r3, r3, #4
 800e4ea:	3332      	adds	r3, #50	@ 0x32
 800e4ec:	4a07      	ldr	r2, [pc, #28]	@ (800e50c <UART_SetConfig+0x118>)
 800e4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f2:	095b      	lsrs	r3, r3, #5
 800e4f4:	f003 020f 	and.w	r2, r3, #15
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	440a      	add	r2, r1
 800e4fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e500:	bf00      	nop
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	40013800 	.word	0x40013800
 800e50c:	51eb851f 	.word	0x51eb851f

0800e510 <__itoa>:
 800e510:	1e93      	subs	r3, r2, #2
 800e512:	2b22      	cmp	r3, #34	@ 0x22
 800e514:	b510      	push	{r4, lr}
 800e516:	460c      	mov	r4, r1
 800e518:	d904      	bls.n	800e524 <__itoa+0x14>
 800e51a:	2300      	movs	r3, #0
 800e51c:	461c      	mov	r4, r3
 800e51e:	700b      	strb	r3, [r1, #0]
 800e520:	4620      	mov	r0, r4
 800e522:	bd10      	pop	{r4, pc}
 800e524:	2a0a      	cmp	r2, #10
 800e526:	d109      	bne.n	800e53c <__itoa+0x2c>
 800e528:	2800      	cmp	r0, #0
 800e52a:	da07      	bge.n	800e53c <__itoa+0x2c>
 800e52c:	232d      	movs	r3, #45	@ 0x2d
 800e52e:	700b      	strb	r3, [r1, #0]
 800e530:	2101      	movs	r1, #1
 800e532:	4240      	negs	r0, r0
 800e534:	4421      	add	r1, r4
 800e536:	f000 f8bb 	bl	800e6b0 <__utoa>
 800e53a:	e7f1      	b.n	800e520 <__itoa+0x10>
 800e53c:	2100      	movs	r1, #0
 800e53e:	e7f9      	b.n	800e534 <__itoa+0x24>

0800e540 <itoa>:
 800e540:	f7ff bfe6 	b.w	800e510 <__itoa>

0800e544 <malloc>:
 800e544:	4b02      	ldr	r3, [pc, #8]	@ (800e550 <malloc+0xc>)
 800e546:	4601      	mov	r1, r0
 800e548:	6818      	ldr	r0, [r3, #0]
 800e54a:	f000 b825 	b.w	800e598 <_malloc_r>
 800e54e:	bf00      	nop
 800e550:	20000f80 	.word	0x20000f80

0800e554 <sbrk_aligned>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	4e0f      	ldr	r6, [pc, #60]	@ (800e594 <sbrk_aligned+0x40>)
 800e558:	460c      	mov	r4, r1
 800e55a:	6831      	ldr	r1, [r6, #0]
 800e55c:	4605      	mov	r5, r0
 800e55e:	b911      	cbnz	r1, 800e566 <sbrk_aligned+0x12>
 800e560:	f000 f932 	bl	800e7c8 <_sbrk_r>
 800e564:	6030      	str	r0, [r6, #0]
 800e566:	4621      	mov	r1, r4
 800e568:	4628      	mov	r0, r5
 800e56a:	f000 f92d 	bl	800e7c8 <_sbrk_r>
 800e56e:	1c43      	adds	r3, r0, #1
 800e570:	d103      	bne.n	800e57a <sbrk_aligned+0x26>
 800e572:	f04f 34ff 	mov.w	r4, #4294967295
 800e576:	4620      	mov	r0, r4
 800e578:	bd70      	pop	{r4, r5, r6, pc}
 800e57a:	1cc4      	adds	r4, r0, #3
 800e57c:	f024 0403 	bic.w	r4, r4, #3
 800e580:	42a0      	cmp	r0, r4
 800e582:	d0f8      	beq.n	800e576 <sbrk_aligned+0x22>
 800e584:	1a21      	subs	r1, r4, r0
 800e586:	4628      	mov	r0, r5
 800e588:	f000 f91e 	bl	800e7c8 <_sbrk_r>
 800e58c:	3001      	adds	r0, #1
 800e58e:	d1f2      	bne.n	800e576 <sbrk_aligned+0x22>
 800e590:	e7ef      	b.n	800e572 <sbrk_aligned+0x1e>
 800e592:	bf00      	nop
 800e594:	20001a24 	.word	0x20001a24

0800e598 <_malloc_r>:
 800e598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	1ccd      	adds	r5, r1, #3
 800e59e:	f025 0503 	bic.w	r5, r5, #3
 800e5a2:	3508      	adds	r5, #8
 800e5a4:	2d0c      	cmp	r5, #12
 800e5a6:	bf38      	it	cc
 800e5a8:	250c      	movcc	r5, #12
 800e5aa:	2d00      	cmp	r5, #0
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	db01      	blt.n	800e5b4 <_malloc_r+0x1c>
 800e5b0:	42a9      	cmp	r1, r5
 800e5b2:	d904      	bls.n	800e5be <_malloc_r+0x26>
 800e5b4:	230c      	movs	r3, #12
 800e5b6:	6033      	str	r3, [r6, #0]
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e694 <_malloc_r+0xfc>
 800e5c2:	f000 f869 	bl	800e698 <__malloc_lock>
 800e5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	bb44      	cbnz	r4, 800e620 <_malloc_r+0x88>
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7ff ffbf 	bl	800e554 <sbrk_aligned>
 800e5d6:	1c43      	adds	r3, r0, #1
 800e5d8:	4604      	mov	r4, r0
 800e5da:	d158      	bne.n	800e68e <_malloc_r+0xf6>
 800e5dc:	f8d8 4000 	ldr.w	r4, [r8]
 800e5e0:	4627      	mov	r7, r4
 800e5e2:	2f00      	cmp	r7, #0
 800e5e4:	d143      	bne.n	800e66e <_malloc_r+0xd6>
 800e5e6:	2c00      	cmp	r4, #0
 800e5e8:	d04b      	beq.n	800e682 <_malloc_r+0xea>
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	4639      	mov	r1, r7
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	eb04 0903 	add.w	r9, r4, r3
 800e5f4:	f000 f8e8 	bl	800e7c8 <_sbrk_r>
 800e5f8:	4581      	cmp	r9, r0
 800e5fa:	d142      	bne.n	800e682 <_malloc_r+0xea>
 800e5fc:	6821      	ldr	r1, [r4, #0]
 800e5fe:	4630      	mov	r0, r6
 800e600:	1a6d      	subs	r5, r5, r1
 800e602:	4629      	mov	r1, r5
 800e604:	f7ff ffa6 	bl	800e554 <sbrk_aligned>
 800e608:	3001      	adds	r0, #1
 800e60a:	d03a      	beq.n	800e682 <_malloc_r+0xea>
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	442b      	add	r3, r5
 800e610:	6023      	str	r3, [r4, #0]
 800e612:	f8d8 3000 	ldr.w	r3, [r8]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	bb62      	cbnz	r2, 800e674 <_malloc_r+0xdc>
 800e61a:	f8c8 7000 	str.w	r7, [r8]
 800e61e:	e00f      	b.n	800e640 <_malloc_r+0xa8>
 800e620:	6822      	ldr	r2, [r4, #0]
 800e622:	1b52      	subs	r2, r2, r5
 800e624:	d420      	bmi.n	800e668 <_malloc_r+0xd0>
 800e626:	2a0b      	cmp	r2, #11
 800e628:	d917      	bls.n	800e65a <_malloc_r+0xc2>
 800e62a:	1961      	adds	r1, r4, r5
 800e62c:	42a3      	cmp	r3, r4
 800e62e:	6025      	str	r5, [r4, #0]
 800e630:	bf18      	it	ne
 800e632:	6059      	strne	r1, [r3, #4]
 800e634:	6863      	ldr	r3, [r4, #4]
 800e636:	bf08      	it	eq
 800e638:	f8c8 1000 	streq.w	r1, [r8]
 800e63c:	5162      	str	r2, [r4, r5]
 800e63e:	604b      	str	r3, [r1, #4]
 800e640:	4630      	mov	r0, r6
 800e642:	f000 f82f 	bl	800e6a4 <__malloc_unlock>
 800e646:	f104 000b 	add.w	r0, r4, #11
 800e64a:	1d23      	adds	r3, r4, #4
 800e64c:	f020 0007 	bic.w	r0, r0, #7
 800e650:	1ac2      	subs	r2, r0, r3
 800e652:	bf1c      	itt	ne
 800e654:	1a1b      	subne	r3, r3, r0
 800e656:	50a3      	strne	r3, [r4, r2]
 800e658:	e7af      	b.n	800e5ba <_malloc_r+0x22>
 800e65a:	6862      	ldr	r2, [r4, #4]
 800e65c:	42a3      	cmp	r3, r4
 800e65e:	bf0c      	ite	eq
 800e660:	f8c8 2000 	streq.w	r2, [r8]
 800e664:	605a      	strne	r2, [r3, #4]
 800e666:	e7eb      	b.n	800e640 <_malloc_r+0xa8>
 800e668:	4623      	mov	r3, r4
 800e66a:	6864      	ldr	r4, [r4, #4]
 800e66c:	e7ae      	b.n	800e5cc <_malloc_r+0x34>
 800e66e:	463c      	mov	r4, r7
 800e670:	687f      	ldr	r7, [r7, #4]
 800e672:	e7b6      	b.n	800e5e2 <_malloc_r+0x4a>
 800e674:	461a      	mov	r2, r3
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	42a3      	cmp	r3, r4
 800e67a:	d1fb      	bne.n	800e674 <_malloc_r+0xdc>
 800e67c:	2300      	movs	r3, #0
 800e67e:	6053      	str	r3, [r2, #4]
 800e680:	e7de      	b.n	800e640 <_malloc_r+0xa8>
 800e682:	230c      	movs	r3, #12
 800e684:	4630      	mov	r0, r6
 800e686:	6033      	str	r3, [r6, #0]
 800e688:	f000 f80c 	bl	800e6a4 <__malloc_unlock>
 800e68c:	e794      	b.n	800e5b8 <_malloc_r+0x20>
 800e68e:	6005      	str	r5, [r0, #0]
 800e690:	e7d6      	b.n	800e640 <_malloc_r+0xa8>
 800e692:	bf00      	nop
 800e694:	20001a28 	.word	0x20001a28

0800e698 <__malloc_lock>:
 800e698:	4801      	ldr	r0, [pc, #4]	@ (800e6a0 <__malloc_lock+0x8>)
 800e69a:	f000 b8cf 	b.w	800e83c <__retarget_lock_acquire_recursive>
 800e69e:	bf00      	nop
 800e6a0:	20001b68 	.word	0x20001b68

0800e6a4 <__malloc_unlock>:
 800e6a4:	4801      	ldr	r0, [pc, #4]	@ (800e6ac <__malloc_unlock+0x8>)
 800e6a6:	f000 b8ca 	b.w	800e83e <__retarget_lock_release_recursive>
 800e6aa:	bf00      	nop
 800e6ac:	20001b68 	.word	0x20001b68

0800e6b0 <__utoa>:
 800e6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6b2:	b08b      	sub	sp, #44	@ 0x2c
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	466e      	mov	r6, sp
 800e6ba:	4c1d      	ldr	r4, [pc, #116]	@ (800e730 <__utoa+0x80>)
 800e6bc:	f104 0c20 	add.w	ip, r4, #32
 800e6c0:	4637      	mov	r7, r6
 800e6c2:	6820      	ldr	r0, [r4, #0]
 800e6c4:	6861      	ldr	r1, [r4, #4]
 800e6c6:	3408      	adds	r4, #8
 800e6c8:	c703      	stmia	r7!, {r0, r1}
 800e6ca:	4564      	cmp	r4, ip
 800e6cc:	463e      	mov	r6, r7
 800e6ce:	d1f7      	bne.n	800e6c0 <__utoa+0x10>
 800e6d0:	7921      	ldrb	r1, [r4, #4]
 800e6d2:	6820      	ldr	r0, [r4, #0]
 800e6d4:	7139      	strb	r1, [r7, #4]
 800e6d6:	1e91      	subs	r1, r2, #2
 800e6d8:	2922      	cmp	r1, #34	@ 0x22
 800e6da:	6038      	str	r0, [r7, #0]
 800e6dc:	f04f 0100 	mov.w	r1, #0
 800e6e0:	d904      	bls.n	800e6ec <__utoa+0x3c>
 800e6e2:	7019      	strb	r1, [r3, #0]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	b00b      	add	sp, #44	@ 0x2c
 800e6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ec:	1e58      	subs	r0, r3, #1
 800e6ee:	4684      	mov	ip, r0
 800e6f0:	fbb5 f7f2 	udiv	r7, r5, r2
 800e6f4:	fb02 5617 	mls	r6, r2, r7, r5
 800e6f8:	3628      	adds	r6, #40	@ 0x28
 800e6fa:	446e      	add	r6, sp
 800e6fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e700:	460c      	mov	r4, r1
 800e702:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e706:	462e      	mov	r6, r5
 800e708:	42b2      	cmp	r2, r6
 800e70a:	463d      	mov	r5, r7
 800e70c:	f101 0101 	add.w	r1, r1, #1
 800e710:	d9ee      	bls.n	800e6f0 <__utoa+0x40>
 800e712:	2200      	movs	r2, #0
 800e714:	545a      	strb	r2, [r3, r1]
 800e716:	1919      	adds	r1, r3, r4
 800e718:	1aa5      	subs	r5, r4, r2
 800e71a:	42aa      	cmp	r2, r5
 800e71c:	dae3      	bge.n	800e6e6 <__utoa+0x36>
 800e71e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e722:	780e      	ldrb	r6, [r1, #0]
 800e724:	3201      	adds	r2, #1
 800e726:	7006      	strb	r6, [r0, #0]
 800e728:	f801 5901 	strb.w	r5, [r1], #-1
 800e72c:	e7f4      	b.n	800e718 <__utoa+0x68>
 800e72e:	bf00      	nop
 800e730:	0800f3d6 	.word	0x0800f3d6

0800e734 <siprintf>:
 800e734:	b40e      	push	{r1, r2, r3}
 800e736:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e73a:	b500      	push	{lr}
 800e73c:	b09c      	sub	sp, #112	@ 0x70
 800e73e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e740:	9002      	str	r0, [sp, #8]
 800e742:	9006      	str	r0, [sp, #24]
 800e744:	9107      	str	r1, [sp, #28]
 800e746:	9104      	str	r1, [sp, #16]
 800e748:	4808      	ldr	r0, [pc, #32]	@ (800e76c <siprintf+0x38>)
 800e74a:	4909      	ldr	r1, [pc, #36]	@ (800e770 <siprintf+0x3c>)
 800e74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e750:	9105      	str	r1, [sp, #20]
 800e752:	6800      	ldr	r0, [r0, #0]
 800e754:	a902      	add	r1, sp, #8
 800e756:	9301      	str	r3, [sp, #4]
 800e758:	f000 f91e 	bl	800e998 <_svfiprintf_r>
 800e75c:	2200      	movs	r2, #0
 800e75e:	9b02      	ldr	r3, [sp, #8]
 800e760:	701a      	strb	r2, [r3, #0]
 800e762:	b01c      	add	sp, #112	@ 0x70
 800e764:	f85d eb04 	ldr.w	lr, [sp], #4
 800e768:	b003      	add	sp, #12
 800e76a:	4770      	bx	lr
 800e76c:	20000f80 	.word	0x20000f80
 800e770:	ffff0208 	.word	0xffff0208

0800e774 <memset>:
 800e774:	4603      	mov	r3, r0
 800e776:	4402      	add	r2, r0
 800e778:	4293      	cmp	r3, r2
 800e77a:	d100      	bne.n	800e77e <memset+0xa>
 800e77c:	4770      	bx	lr
 800e77e:	f803 1b01 	strb.w	r1, [r3], #1
 800e782:	e7f9      	b.n	800e778 <memset+0x4>

0800e784 <strcat>:
 800e784:	4602      	mov	r2, r0
 800e786:	b510      	push	{r4, lr}
 800e788:	7814      	ldrb	r4, [r2, #0]
 800e78a:	4613      	mov	r3, r2
 800e78c:	3201      	adds	r2, #1
 800e78e:	2c00      	cmp	r4, #0
 800e790:	d1fa      	bne.n	800e788 <strcat+0x4>
 800e792:	3b01      	subs	r3, #1
 800e794:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e798:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d1f9      	bne.n	800e794 <strcat+0x10>
 800e7a0:	bd10      	pop	{r4, pc}

0800e7a2 <strncpy>:
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	3901      	subs	r1, #1
 800e7a8:	b132      	cbz	r2, 800e7b8 <strncpy+0x16>
 800e7aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e7ae:	3a01      	subs	r2, #1
 800e7b0:	f803 4b01 	strb.w	r4, [r3], #1
 800e7b4:	2c00      	cmp	r4, #0
 800e7b6:	d1f7      	bne.n	800e7a8 <strncpy+0x6>
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	441a      	add	r2, r3
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d100      	bne.n	800e7c2 <strncpy+0x20>
 800e7c0:	bd10      	pop	{r4, pc}
 800e7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c6:	e7f9      	b.n	800e7bc <strncpy+0x1a>

0800e7c8 <_sbrk_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	4d05      	ldr	r5, [pc, #20]	@ (800e7e4 <_sbrk_r+0x1c>)
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	602b      	str	r3, [r5, #0]
 800e7d4:	f7fb fff4 	bl	800a7c0 <_sbrk>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d102      	bne.n	800e7e2 <_sbrk_r+0x1a>
 800e7dc:	682b      	ldr	r3, [r5, #0]
 800e7de:	b103      	cbz	r3, 800e7e2 <_sbrk_r+0x1a>
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}
 800e7e4:	20001b64 	.word	0x20001b64

0800e7e8 <__errno>:
 800e7e8:	4b01      	ldr	r3, [pc, #4]	@ (800e7f0 <__errno+0x8>)
 800e7ea:	6818      	ldr	r0, [r3, #0]
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	20000f80 	.word	0x20000f80

0800e7f4 <__libc_init_array>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	2600      	movs	r6, #0
 800e7f8:	4d0c      	ldr	r5, [pc, #48]	@ (800e82c <__libc_init_array+0x38>)
 800e7fa:	4c0d      	ldr	r4, [pc, #52]	@ (800e830 <__libc_init_array+0x3c>)
 800e7fc:	1b64      	subs	r4, r4, r5
 800e7fe:	10a4      	asrs	r4, r4, #2
 800e800:	42a6      	cmp	r6, r4
 800e802:	d109      	bne.n	800e818 <__libc_init_array+0x24>
 800e804:	f000 fbc2 	bl	800ef8c <_init>
 800e808:	2600      	movs	r6, #0
 800e80a:	4d0a      	ldr	r5, [pc, #40]	@ (800e834 <__libc_init_array+0x40>)
 800e80c:	4c0a      	ldr	r4, [pc, #40]	@ (800e838 <__libc_init_array+0x44>)
 800e80e:	1b64      	subs	r4, r4, r5
 800e810:	10a4      	asrs	r4, r4, #2
 800e812:	42a6      	cmp	r6, r4
 800e814:	d105      	bne.n	800e822 <__libc_init_array+0x2e>
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	f855 3b04 	ldr.w	r3, [r5], #4
 800e81c:	4798      	blx	r3
 800e81e:	3601      	adds	r6, #1
 800e820:	e7ee      	b.n	800e800 <__libc_init_array+0xc>
 800e822:	f855 3b04 	ldr.w	r3, [r5], #4
 800e826:	4798      	blx	r3
 800e828:	3601      	adds	r6, #1
 800e82a:	e7f2      	b.n	800e812 <__libc_init_array+0x1e>
 800e82c:	0800f438 	.word	0x0800f438
 800e830:	0800f438 	.word	0x0800f438
 800e834:	0800f438 	.word	0x0800f438
 800e838:	0800f43c 	.word	0x0800f43c

0800e83c <__retarget_lock_acquire_recursive>:
 800e83c:	4770      	bx	lr

0800e83e <__retarget_lock_release_recursive>:
 800e83e:	4770      	bx	lr

0800e840 <strcpy>:
 800e840:	4603      	mov	r3, r0
 800e842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e846:	f803 2b01 	strb.w	r2, [r3], #1
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	d1f9      	bne.n	800e842 <strcpy+0x2>
 800e84e:	4770      	bx	lr

0800e850 <_free_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4605      	mov	r5, r0
 800e854:	2900      	cmp	r1, #0
 800e856:	d040      	beq.n	800e8da <_free_r+0x8a>
 800e858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85c:	1f0c      	subs	r4, r1, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bfb8      	it	lt
 800e862:	18e4      	addlt	r4, r4, r3
 800e864:	f7ff ff18 	bl	800e698 <__malloc_lock>
 800e868:	4a1c      	ldr	r2, [pc, #112]	@ (800e8dc <_free_r+0x8c>)
 800e86a:	6813      	ldr	r3, [r2, #0]
 800e86c:	b933      	cbnz	r3, 800e87c <_free_r+0x2c>
 800e86e:	6063      	str	r3, [r4, #4]
 800e870:	6014      	str	r4, [r2, #0]
 800e872:	4628      	mov	r0, r5
 800e874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e878:	f7ff bf14 	b.w	800e6a4 <__malloc_unlock>
 800e87c:	42a3      	cmp	r3, r4
 800e87e:	d908      	bls.n	800e892 <_free_r+0x42>
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	1821      	adds	r1, r4, r0
 800e884:	428b      	cmp	r3, r1
 800e886:	bf01      	itttt	eq
 800e888:	6819      	ldreq	r1, [r3, #0]
 800e88a:	685b      	ldreq	r3, [r3, #4]
 800e88c:	1809      	addeq	r1, r1, r0
 800e88e:	6021      	streq	r1, [r4, #0]
 800e890:	e7ed      	b.n	800e86e <_free_r+0x1e>
 800e892:	461a      	mov	r2, r3
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	b10b      	cbz	r3, 800e89c <_free_r+0x4c>
 800e898:	42a3      	cmp	r3, r4
 800e89a:	d9fa      	bls.n	800e892 <_free_r+0x42>
 800e89c:	6811      	ldr	r1, [r2, #0]
 800e89e:	1850      	adds	r0, r2, r1
 800e8a0:	42a0      	cmp	r0, r4
 800e8a2:	d10b      	bne.n	800e8bc <_free_r+0x6c>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	4401      	add	r1, r0
 800e8a8:	1850      	adds	r0, r2, r1
 800e8aa:	4283      	cmp	r3, r0
 800e8ac:	6011      	str	r1, [r2, #0]
 800e8ae:	d1e0      	bne.n	800e872 <_free_r+0x22>
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	4408      	add	r0, r1
 800e8b6:	6010      	str	r0, [r2, #0]
 800e8b8:	6053      	str	r3, [r2, #4]
 800e8ba:	e7da      	b.n	800e872 <_free_r+0x22>
 800e8bc:	d902      	bls.n	800e8c4 <_free_r+0x74>
 800e8be:	230c      	movs	r3, #12
 800e8c0:	602b      	str	r3, [r5, #0]
 800e8c2:	e7d6      	b.n	800e872 <_free_r+0x22>
 800e8c4:	6820      	ldr	r0, [r4, #0]
 800e8c6:	1821      	adds	r1, r4, r0
 800e8c8:	428b      	cmp	r3, r1
 800e8ca:	bf01      	itttt	eq
 800e8cc:	6819      	ldreq	r1, [r3, #0]
 800e8ce:	685b      	ldreq	r3, [r3, #4]
 800e8d0:	1809      	addeq	r1, r1, r0
 800e8d2:	6021      	streq	r1, [r4, #0]
 800e8d4:	6063      	str	r3, [r4, #4]
 800e8d6:	6054      	str	r4, [r2, #4]
 800e8d8:	e7cb      	b.n	800e872 <_free_r+0x22>
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	20001a28 	.word	0x20001a28

0800e8e0 <__ssputs_r>:
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e4:	461f      	mov	r7, r3
 800e8e6:	688e      	ldr	r6, [r1, #8]
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	42be      	cmp	r6, r7
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	4690      	mov	r8, r2
 800e8f0:	680b      	ldr	r3, [r1, #0]
 800e8f2:	d82d      	bhi.n	800e950 <__ssputs_r+0x70>
 800e8f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8fc:	d026      	beq.n	800e94c <__ssputs_r+0x6c>
 800e8fe:	6965      	ldr	r5, [r4, #20]
 800e900:	6909      	ldr	r1, [r1, #16]
 800e902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e906:	eba3 0901 	sub.w	r9, r3, r1
 800e90a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e90e:	1c7b      	adds	r3, r7, #1
 800e910:	444b      	add	r3, r9
 800e912:	106d      	asrs	r5, r5, #1
 800e914:	429d      	cmp	r5, r3
 800e916:	bf38      	it	cc
 800e918:	461d      	movcc	r5, r3
 800e91a:	0553      	lsls	r3, r2, #21
 800e91c:	d527      	bpl.n	800e96e <__ssputs_r+0x8e>
 800e91e:	4629      	mov	r1, r5
 800e920:	f7ff fe3a 	bl	800e598 <_malloc_r>
 800e924:	4606      	mov	r6, r0
 800e926:	b360      	cbz	r0, 800e982 <__ssputs_r+0xa2>
 800e928:	464a      	mov	r2, r9
 800e92a:	6921      	ldr	r1, [r4, #16]
 800e92c:	f000 faea 	bl	800ef04 <memcpy>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	6126      	str	r6, [r4, #16]
 800e93e:	444e      	add	r6, r9
 800e940:	6026      	str	r6, [r4, #0]
 800e942:	463e      	mov	r6, r7
 800e944:	6165      	str	r5, [r4, #20]
 800e946:	eba5 0509 	sub.w	r5, r5, r9
 800e94a:	60a5      	str	r5, [r4, #8]
 800e94c:	42be      	cmp	r6, r7
 800e94e:	d900      	bls.n	800e952 <__ssputs_r+0x72>
 800e950:	463e      	mov	r6, r7
 800e952:	4632      	mov	r2, r6
 800e954:	4641      	mov	r1, r8
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	f000 faac 	bl	800eeb4 <memmove>
 800e95c:	2000      	movs	r0, #0
 800e95e:	68a3      	ldr	r3, [r4, #8]
 800e960:	1b9b      	subs	r3, r3, r6
 800e962:	60a3      	str	r3, [r4, #8]
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	4433      	add	r3, r6
 800e968:	6023      	str	r3, [r4, #0]
 800e96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96e:	462a      	mov	r2, r5
 800e970:	f000 fad6 	bl	800ef20 <_realloc_r>
 800e974:	4606      	mov	r6, r0
 800e976:	2800      	cmp	r0, #0
 800e978:	d1e0      	bne.n	800e93c <__ssputs_r+0x5c>
 800e97a:	4650      	mov	r0, sl
 800e97c:	6921      	ldr	r1, [r4, #16]
 800e97e:	f7ff ff67 	bl	800e850 <_free_r>
 800e982:	230c      	movs	r3, #12
 800e984:	f8ca 3000 	str.w	r3, [sl]
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	f04f 30ff 	mov.w	r0, #4294967295
 800e98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e992:	81a3      	strh	r3, [r4, #12]
 800e994:	e7e9      	b.n	800e96a <__ssputs_r+0x8a>
	...

0800e998 <_svfiprintf_r>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	4698      	mov	r8, r3
 800e99e:	898b      	ldrh	r3, [r1, #12]
 800e9a0:	4607      	mov	r7, r0
 800e9a2:	061b      	lsls	r3, r3, #24
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	4614      	mov	r4, r2
 800e9a8:	b09d      	sub	sp, #116	@ 0x74
 800e9aa:	d510      	bpl.n	800e9ce <_svfiprintf_r+0x36>
 800e9ac:	690b      	ldr	r3, [r1, #16]
 800e9ae:	b973      	cbnz	r3, 800e9ce <_svfiprintf_r+0x36>
 800e9b0:	2140      	movs	r1, #64	@ 0x40
 800e9b2:	f7ff fdf1 	bl	800e598 <_malloc_r>
 800e9b6:	6028      	str	r0, [r5, #0]
 800e9b8:	6128      	str	r0, [r5, #16]
 800e9ba:	b930      	cbnz	r0, 800e9ca <_svfiprintf_r+0x32>
 800e9bc:	230c      	movs	r3, #12
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c4:	b01d      	add	sp, #116	@ 0x74
 800e9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ca:	2340      	movs	r3, #64	@ 0x40
 800e9cc:	616b      	str	r3, [r5, #20]
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d2:	2320      	movs	r3, #32
 800e9d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9d8:	2330      	movs	r3, #48	@ 0x30
 800e9da:	f04f 0901 	mov.w	r9, #1
 800e9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800eb7c <_svfiprintf_r+0x1e4>
 800e9e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9ea:	4623      	mov	r3, r4
 800e9ec:	469a      	mov	sl, r3
 800e9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9f2:	b10a      	cbz	r2, 800e9f8 <_svfiprintf_r+0x60>
 800e9f4:	2a25      	cmp	r2, #37	@ 0x25
 800e9f6:	d1f9      	bne.n	800e9ec <_svfiprintf_r+0x54>
 800e9f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e9fc:	d00b      	beq.n	800ea16 <_svfiprintf_r+0x7e>
 800e9fe:	465b      	mov	r3, fp
 800ea00:	4622      	mov	r2, r4
 800ea02:	4629      	mov	r1, r5
 800ea04:	4638      	mov	r0, r7
 800ea06:	f7ff ff6b 	bl	800e8e0 <__ssputs_r>
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	f000 80a7 	beq.w	800eb5e <_svfiprintf_r+0x1c6>
 800ea10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea12:	445a      	add	r2, fp
 800ea14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea16:	f89a 3000 	ldrb.w	r3, [sl]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 809f 	beq.w	800eb5e <_svfiprintf_r+0x1c6>
 800ea20:	2300      	movs	r3, #0
 800ea22:	f04f 32ff 	mov.w	r2, #4294967295
 800ea26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea2a:	f10a 0a01 	add.w	sl, sl, #1
 800ea2e:	9304      	str	r3, [sp, #16]
 800ea30:	9307      	str	r3, [sp, #28]
 800ea32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea36:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea38:	4654      	mov	r4, sl
 800ea3a:	2205      	movs	r2, #5
 800ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea40:	484e      	ldr	r0, [pc, #312]	@ (800eb7c <_svfiprintf_r+0x1e4>)
 800ea42:	f000 fa51 	bl	800eee8 <memchr>
 800ea46:	9a04      	ldr	r2, [sp, #16]
 800ea48:	b9d8      	cbnz	r0, 800ea82 <_svfiprintf_r+0xea>
 800ea4a:	06d0      	lsls	r0, r2, #27
 800ea4c:	bf44      	itt	mi
 800ea4e:	2320      	movmi	r3, #32
 800ea50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea54:	0711      	lsls	r1, r2, #28
 800ea56:	bf44      	itt	mi
 800ea58:	232b      	movmi	r3, #43	@ 0x2b
 800ea5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea64:	d015      	beq.n	800ea92 <_svfiprintf_r+0xfa>
 800ea66:	4654      	mov	r4, sl
 800ea68:	2000      	movs	r0, #0
 800ea6a:	f04f 0c0a 	mov.w	ip, #10
 800ea6e:	9a07      	ldr	r2, [sp, #28]
 800ea70:	4621      	mov	r1, r4
 800ea72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea76:	3b30      	subs	r3, #48	@ 0x30
 800ea78:	2b09      	cmp	r3, #9
 800ea7a:	d94b      	bls.n	800eb14 <_svfiprintf_r+0x17c>
 800ea7c:	b1b0      	cbz	r0, 800eaac <_svfiprintf_r+0x114>
 800ea7e:	9207      	str	r2, [sp, #28]
 800ea80:	e014      	b.n	800eaac <_svfiprintf_r+0x114>
 800ea82:	eba0 0308 	sub.w	r3, r0, r8
 800ea86:	fa09 f303 	lsl.w	r3, r9, r3
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	46a2      	mov	sl, r4
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	e7d2      	b.n	800ea38 <_svfiprintf_r+0xa0>
 800ea92:	9b03      	ldr	r3, [sp, #12]
 800ea94:	1d19      	adds	r1, r3, #4
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	9103      	str	r1, [sp, #12]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	bfbb      	ittet	lt
 800ea9e:	425b      	neglt	r3, r3
 800eaa0:	f042 0202 	orrlt.w	r2, r2, #2
 800eaa4:	9307      	strge	r3, [sp, #28]
 800eaa6:	9307      	strlt	r3, [sp, #28]
 800eaa8:	bfb8      	it	lt
 800eaaa:	9204      	strlt	r2, [sp, #16]
 800eaac:	7823      	ldrb	r3, [r4, #0]
 800eaae:	2b2e      	cmp	r3, #46	@ 0x2e
 800eab0:	d10a      	bne.n	800eac8 <_svfiprintf_r+0x130>
 800eab2:	7863      	ldrb	r3, [r4, #1]
 800eab4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eab6:	d132      	bne.n	800eb1e <_svfiprintf_r+0x186>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	3402      	adds	r4, #2
 800eabc:	1d1a      	adds	r2, r3, #4
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	9203      	str	r2, [sp, #12]
 800eac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800eb80 <_svfiprintf_r+0x1e8>
 800eacc:	2203      	movs	r2, #3
 800eace:	4650      	mov	r0, sl
 800ead0:	7821      	ldrb	r1, [r4, #0]
 800ead2:	f000 fa09 	bl	800eee8 <memchr>
 800ead6:	b138      	cbz	r0, 800eae8 <_svfiprintf_r+0x150>
 800ead8:	2240      	movs	r2, #64	@ 0x40
 800eada:	9b04      	ldr	r3, [sp, #16]
 800eadc:	eba0 000a 	sub.w	r0, r0, sl
 800eae0:	4082      	lsls	r2, r0
 800eae2:	4313      	orrs	r3, r2
 800eae4:	3401      	adds	r4, #1
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaec:	2206      	movs	r2, #6
 800eaee:	4825      	ldr	r0, [pc, #148]	@ (800eb84 <_svfiprintf_r+0x1ec>)
 800eaf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eaf4:	f000 f9f8 	bl	800eee8 <memchr>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d036      	beq.n	800eb6a <_svfiprintf_r+0x1d2>
 800eafc:	4b22      	ldr	r3, [pc, #136]	@ (800eb88 <_svfiprintf_r+0x1f0>)
 800eafe:	bb1b      	cbnz	r3, 800eb48 <_svfiprintf_r+0x1b0>
 800eb00:	9b03      	ldr	r3, [sp, #12]
 800eb02:	3307      	adds	r3, #7
 800eb04:	f023 0307 	bic.w	r3, r3, #7
 800eb08:	3308      	adds	r3, #8
 800eb0a:	9303      	str	r3, [sp, #12]
 800eb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb0e:	4433      	add	r3, r6
 800eb10:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb12:	e76a      	b.n	800e9ea <_svfiprintf_r+0x52>
 800eb14:	460c      	mov	r4, r1
 800eb16:	2001      	movs	r0, #1
 800eb18:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb1c:	e7a8      	b.n	800ea70 <_svfiprintf_r+0xd8>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f04f 0c0a 	mov.w	ip, #10
 800eb24:	4619      	mov	r1, r3
 800eb26:	3401      	adds	r4, #1
 800eb28:	9305      	str	r3, [sp, #20]
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb30:	3a30      	subs	r2, #48	@ 0x30
 800eb32:	2a09      	cmp	r2, #9
 800eb34:	d903      	bls.n	800eb3e <_svfiprintf_r+0x1a6>
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0c6      	beq.n	800eac8 <_svfiprintf_r+0x130>
 800eb3a:	9105      	str	r1, [sp, #20]
 800eb3c:	e7c4      	b.n	800eac8 <_svfiprintf_r+0x130>
 800eb3e:	4604      	mov	r4, r0
 800eb40:	2301      	movs	r3, #1
 800eb42:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb46:	e7f0      	b.n	800eb2a <_svfiprintf_r+0x192>
 800eb48:	ab03      	add	r3, sp, #12
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4638      	mov	r0, r7
 800eb50:	4b0e      	ldr	r3, [pc, #56]	@ (800eb8c <_svfiprintf_r+0x1f4>)
 800eb52:	a904      	add	r1, sp, #16
 800eb54:	f3af 8000 	nop.w
 800eb58:	1c42      	adds	r2, r0, #1
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	d1d6      	bne.n	800eb0c <_svfiprintf_r+0x174>
 800eb5e:	89ab      	ldrh	r3, [r5, #12]
 800eb60:	065b      	lsls	r3, r3, #25
 800eb62:	f53f af2d 	bmi.w	800e9c0 <_svfiprintf_r+0x28>
 800eb66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb68:	e72c      	b.n	800e9c4 <_svfiprintf_r+0x2c>
 800eb6a:	ab03      	add	r3, sp, #12
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	462a      	mov	r2, r5
 800eb70:	4638      	mov	r0, r7
 800eb72:	4b06      	ldr	r3, [pc, #24]	@ (800eb8c <_svfiprintf_r+0x1f4>)
 800eb74:	a904      	add	r1, sp, #16
 800eb76:	f000 f87d 	bl	800ec74 <_printf_i>
 800eb7a:	e7ed      	b.n	800eb58 <_svfiprintf_r+0x1c0>
 800eb7c:	0800f3fb 	.word	0x0800f3fb
 800eb80:	0800f401 	.word	0x0800f401
 800eb84:	0800f405 	.word	0x0800f405
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	0800e8e1 	.word	0x0800e8e1

0800eb90 <_printf_common>:
 800eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb94:	4616      	mov	r6, r2
 800eb96:	4698      	mov	r8, r3
 800eb98:	688a      	ldr	r2, [r1, #8]
 800eb9a:	690b      	ldr	r3, [r1, #16]
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	bfb8      	it	lt
 800eba2:	4613      	movlt	r3, r2
 800eba4:	6033      	str	r3, [r6, #0]
 800eba6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebaa:	460c      	mov	r4, r1
 800ebac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebb0:	b10a      	cbz	r2, 800ebb6 <_printf_common+0x26>
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	6033      	str	r3, [r6, #0]
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	0699      	lsls	r1, r3, #26
 800ebba:	bf42      	ittt	mi
 800ebbc:	6833      	ldrmi	r3, [r6, #0]
 800ebbe:	3302      	addmi	r3, #2
 800ebc0:	6033      	strmi	r3, [r6, #0]
 800ebc2:	6825      	ldr	r5, [r4, #0]
 800ebc4:	f015 0506 	ands.w	r5, r5, #6
 800ebc8:	d106      	bne.n	800ebd8 <_printf_common+0x48>
 800ebca:	f104 0a19 	add.w	sl, r4, #25
 800ebce:	68e3      	ldr	r3, [r4, #12]
 800ebd0:	6832      	ldr	r2, [r6, #0]
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	42ab      	cmp	r3, r5
 800ebd6:	dc2b      	bgt.n	800ec30 <_printf_common+0xa0>
 800ebd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ebdc:	6822      	ldr	r2, [r4, #0]
 800ebde:	3b00      	subs	r3, #0
 800ebe0:	bf18      	it	ne
 800ebe2:	2301      	movne	r3, #1
 800ebe4:	0692      	lsls	r2, r2, #26
 800ebe6:	d430      	bmi.n	800ec4a <_printf_common+0xba>
 800ebe8:	4641      	mov	r1, r8
 800ebea:	4638      	mov	r0, r7
 800ebec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ebf0:	47c8      	blx	r9
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	d023      	beq.n	800ec3e <_printf_common+0xae>
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	6922      	ldr	r2, [r4, #16]
 800ebfa:	f003 0306 	and.w	r3, r3, #6
 800ebfe:	2b04      	cmp	r3, #4
 800ec00:	bf14      	ite	ne
 800ec02:	2500      	movne	r5, #0
 800ec04:	6833      	ldreq	r3, [r6, #0]
 800ec06:	f04f 0600 	mov.w	r6, #0
 800ec0a:	bf08      	it	eq
 800ec0c:	68e5      	ldreq	r5, [r4, #12]
 800ec0e:	f104 041a 	add.w	r4, r4, #26
 800ec12:	bf08      	it	eq
 800ec14:	1aed      	subeq	r5, r5, r3
 800ec16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ec1a:	bf08      	it	eq
 800ec1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec20:	4293      	cmp	r3, r2
 800ec22:	bfc4      	itt	gt
 800ec24:	1a9b      	subgt	r3, r3, r2
 800ec26:	18ed      	addgt	r5, r5, r3
 800ec28:	42b5      	cmp	r5, r6
 800ec2a:	d11a      	bne.n	800ec62 <_printf_common+0xd2>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	e008      	b.n	800ec42 <_printf_common+0xb2>
 800ec30:	2301      	movs	r3, #1
 800ec32:	4652      	mov	r2, sl
 800ec34:	4641      	mov	r1, r8
 800ec36:	4638      	mov	r0, r7
 800ec38:	47c8      	blx	r9
 800ec3a:	3001      	adds	r0, #1
 800ec3c:	d103      	bne.n	800ec46 <_printf_common+0xb6>
 800ec3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec46:	3501      	adds	r5, #1
 800ec48:	e7c1      	b.n	800ebce <_printf_common+0x3e>
 800ec4a:	2030      	movs	r0, #48	@ 0x30
 800ec4c:	18e1      	adds	r1, r4, r3
 800ec4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec58:	4422      	add	r2, r4
 800ec5a:	3302      	adds	r3, #2
 800ec5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec60:	e7c2      	b.n	800ebe8 <_printf_common+0x58>
 800ec62:	2301      	movs	r3, #1
 800ec64:	4622      	mov	r2, r4
 800ec66:	4641      	mov	r1, r8
 800ec68:	4638      	mov	r0, r7
 800ec6a:	47c8      	blx	r9
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d0e6      	beq.n	800ec3e <_printf_common+0xae>
 800ec70:	3601      	adds	r6, #1
 800ec72:	e7d9      	b.n	800ec28 <_printf_common+0x98>

0800ec74 <_printf_i>:
 800ec74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec78:	7e0f      	ldrb	r7, [r1, #24]
 800ec7a:	4691      	mov	r9, r2
 800ec7c:	2f78      	cmp	r7, #120	@ 0x78
 800ec7e:	4680      	mov	r8, r0
 800ec80:	460c      	mov	r4, r1
 800ec82:	469a      	mov	sl, r3
 800ec84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec8a:	d807      	bhi.n	800ec9c <_printf_i+0x28>
 800ec8c:	2f62      	cmp	r7, #98	@ 0x62
 800ec8e:	d80a      	bhi.n	800eca6 <_printf_i+0x32>
 800ec90:	2f00      	cmp	r7, #0
 800ec92:	f000 80d3 	beq.w	800ee3c <_printf_i+0x1c8>
 800ec96:	2f58      	cmp	r7, #88	@ 0x58
 800ec98:	f000 80ba 	beq.w	800ee10 <_printf_i+0x19c>
 800ec9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eca4:	e03a      	b.n	800ed1c <_printf_i+0xa8>
 800eca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ecaa:	2b15      	cmp	r3, #21
 800ecac:	d8f6      	bhi.n	800ec9c <_printf_i+0x28>
 800ecae:	a101      	add	r1, pc, #4	@ (adr r1, 800ecb4 <_printf_i+0x40>)
 800ecb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecb4:	0800ed0d 	.word	0x0800ed0d
 800ecb8:	0800ed21 	.word	0x0800ed21
 800ecbc:	0800ec9d 	.word	0x0800ec9d
 800ecc0:	0800ec9d 	.word	0x0800ec9d
 800ecc4:	0800ec9d 	.word	0x0800ec9d
 800ecc8:	0800ec9d 	.word	0x0800ec9d
 800eccc:	0800ed21 	.word	0x0800ed21
 800ecd0:	0800ec9d 	.word	0x0800ec9d
 800ecd4:	0800ec9d 	.word	0x0800ec9d
 800ecd8:	0800ec9d 	.word	0x0800ec9d
 800ecdc:	0800ec9d 	.word	0x0800ec9d
 800ece0:	0800ee23 	.word	0x0800ee23
 800ece4:	0800ed4b 	.word	0x0800ed4b
 800ece8:	0800eddd 	.word	0x0800eddd
 800ecec:	0800ec9d 	.word	0x0800ec9d
 800ecf0:	0800ec9d 	.word	0x0800ec9d
 800ecf4:	0800ee45 	.word	0x0800ee45
 800ecf8:	0800ec9d 	.word	0x0800ec9d
 800ecfc:	0800ed4b 	.word	0x0800ed4b
 800ed00:	0800ec9d 	.word	0x0800ec9d
 800ed04:	0800ec9d 	.word	0x0800ec9d
 800ed08:	0800ede5 	.word	0x0800ede5
 800ed0c:	6833      	ldr	r3, [r6, #0]
 800ed0e:	1d1a      	adds	r2, r3, #4
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6032      	str	r2, [r6, #0]
 800ed14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e09e      	b.n	800ee5e <_printf_i+0x1ea>
 800ed20:	6833      	ldr	r3, [r6, #0]
 800ed22:	6820      	ldr	r0, [r4, #0]
 800ed24:	1d19      	adds	r1, r3, #4
 800ed26:	6031      	str	r1, [r6, #0]
 800ed28:	0606      	lsls	r6, r0, #24
 800ed2a:	d501      	bpl.n	800ed30 <_printf_i+0xbc>
 800ed2c:	681d      	ldr	r5, [r3, #0]
 800ed2e:	e003      	b.n	800ed38 <_printf_i+0xc4>
 800ed30:	0645      	lsls	r5, r0, #25
 800ed32:	d5fb      	bpl.n	800ed2c <_printf_i+0xb8>
 800ed34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	da03      	bge.n	800ed44 <_printf_i+0xd0>
 800ed3c:	232d      	movs	r3, #45	@ 0x2d
 800ed3e:	426d      	negs	r5, r5
 800ed40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed44:	230a      	movs	r3, #10
 800ed46:	4859      	ldr	r0, [pc, #356]	@ (800eeac <_printf_i+0x238>)
 800ed48:	e011      	b.n	800ed6e <_printf_i+0xfa>
 800ed4a:	6821      	ldr	r1, [r4, #0]
 800ed4c:	6833      	ldr	r3, [r6, #0]
 800ed4e:	0608      	lsls	r0, r1, #24
 800ed50:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed54:	d402      	bmi.n	800ed5c <_printf_i+0xe8>
 800ed56:	0649      	lsls	r1, r1, #25
 800ed58:	bf48      	it	mi
 800ed5a:	b2ad      	uxthmi	r5, r5
 800ed5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed5e:	6033      	str	r3, [r6, #0]
 800ed60:	bf14      	ite	ne
 800ed62:	230a      	movne	r3, #10
 800ed64:	2308      	moveq	r3, #8
 800ed66:	4851      	ldr	r0, [pc, #324]	@ (800eeac <_printf_i+0x238>)
 800ed68:	2100      	movs	r1, #0
 800ed6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed6e:	6866      	ldr	r6, [r4, #4]
 800ed70:	2e00      	cmp	r6, #0
 800ed72:	bfa8      	it	ge
 800ed74:	6821      	ldrge	r1, [r4, #0]
 800ed76:	60a6      	str	r6, [r4, #8]
 800ed78:	bfa4      	itt	ge
 800ed7a:	f021 0104 	bicge.w	r1, r1, #4
 800ed7e:	6021      	strge	r1, [r4, #0]
 800ed80:	b90d      	cbnz	r5, 800ed86 <_printf_i+0x112>
 800ed82:	2e00      	cmp	r6, #0
 800ed84:	d04b      	beq.n	800ee1e <_printf_i+0x1aa>
 800ed86:	4616      	mov	r6, r2
 800ed88:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed8c:	fb03 5711 	mls	r7, r3, r1, r5
 800ed90:	5dc7      	ldrb	r7, [r0, r7]
 800ed92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed96:	462f      	mov	r7, r5
 800ed98:	42bb      	cmp	r3, r7
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	d9f4      	bls.n	800ed88 <_printf_i+0x114>
 800ed9e:	2b08      	cmp	r3, #8
 800eda0:	d10b      	bne.n	800edba <_printf_i+0x146>
 800eda2:	6823      	ldr	r3, [r4, #0]
 800eda4:	07df      	lsls	r7, r3, #31
 800eda6:	d508      	bpl.n	800edba <_printf_i+0x146>
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	6861      	ldr	r1, [r4, #4]
 800edac:	4299      	cmp	r1, r3
 800edae:	bfde      	ittt	le
 800edb0:	2330      	movle	r3, #48	@ 0x30
 800edb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800edba:	1b92      	subs	r2, r2, r6
 800edbc:	6122      	str	r2, [r4, #16]
 800edbe:	464b      	mov	r3, r9
 800edc0:	4621      	mov	r1, r4
 800edc2:	4640      	mov	r0, r8
 800edc4:	f8cd a000 	str.w	sl, [sp]
 800edc8:	aa03      	add	r2, sp, #12
 800edca:	f7ff fee1 	bl	800eb90 <_printf_common>
 800edce:	3001      	adds	r0, #1
 800edd0:	d14a      	bne.n	800ee68 <_printf_i+0x1f4>
 800edd2:	f04f 30ff 	mov.w	r0, #4294967295
 800edd6:	b004      	add	sp, #16
 800edd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	f043 0320 	orr.w	r3, r3, #32
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	2778      	movs	r7, #120	@ 0x78
 800ede6:	4832      	ldr	r0, [pc, #200]	@ (800eeb0 <_printf_i+0x23c>)
 800ede8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800edec:	6823      	ldr	r3, [r4, #0]
 800edee:	6831      	ldr	r1, [r6, #0]
 800edf0:	061f      	lsls	r7, r3, #24
 800edf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800edf6:	d402      	bmi.n	800edfe <_printf_i+0x18a>
 800edf8:	065f      	lsls	r7, r3, #25
 800edfa:	bf48      	it	mi
 800edfc:	b2ad      	uxthmi	r5, r5
 800edfe:	6031      	str	r1, [r6, #0]
 800ee00:	07d9      	lsls	r1, r3, #31
 800ee02:	bf44      	itt	mi
 800ee04:	f043 0320 	orrmi.w	r3, r3, #32
 800ee08:	6023      	strmi	r3, [r4, #0]
 800ee0a:	b11d      	cbz	r5, 800ee14 <_printf_i+0x1a0>
 800ee0c:	2310      	movs	r3, #16
 800ee0e:	e7ab      	b.n	800ed68 <_printf_i+0xf4>
 800ee10:	4826      	ldr	r0, [pc, #152]	@ (800eeac <_printf_i+0x238>)
 800ee12:	e7e9      	b.n	800ede8 <_printf_i+0x174>
 800ee14:	6823      	ldr	r3, [r4, #0]
 800ee16:	f023 0320 	bic.w	r3, r3, #32
 800ee1a:	6023      	str	r3, [r4, #0]
 800ee1c:	e7f6      	b.n	800ee0c <_printf_i+0x198>
 800ee1e:	4616      	mov	r6, r2
 800ee20:	e7bd      	b.n	800ed9e <_printf_i+0x12a>
 800ee22:	6833      	ldr	r3, [r6, #0]
 800ee24:	6825      	ldr	r5, [r4, #0]
 800ee26:	1d18      	adds	r0, r3, #4
 800ee28:	6961      	ldr	r1, [r4, #20]
 800ee2a:	6030      	str	r0, [r6, #0]
 800ee2c:	062e      	lsls	r6, r5, #24
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	d501      	bpl.n	800ee36 <_printf_i+0x1c2>
 800ee32:	6019      	str	r1, [r3, #0]
 800ee34:	e002      	b.n	800ee3c <_printf_i+0x1c8>
 800ee36:	0668      	lsls	r0, r5, #25
 800ee38:	d5fb      	bpl.n	800ee32 <_printf_i+0x1be>
 800ee3a:	8019      	strh	r1, [r3, #0]
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	4616      	mov	r6, r2
 800ee40:	6123      	str	r3, [r4, #16]
 800ee42:	e7bc      	b.n	800edbe <_printf_i+0x14a>
 800ee44:	6833      	ldr	r3, [r6, #0]
 800ee46:	2100      	movs	r1, #0
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	6032      	str	r2, [r6, #0]
 800ee4c:	681e      	ldr	r6, [r3, #0]
 800ee4e:	6862      	ldr	r2, [r4, #4]
 800ee50:	4630      	mov	r0, r6
 800ee52:	f000 f849 	bl	800eee8 <memchr>
 800ee56:	b108      	cbz	r0, 800ee5c <_printf_i+0x1e8>
 800ee58:	1b80      	subs	r0, r0, r6
 800ee5a:	6060      	str	r0, [r4, #4]
 800ee5c:	6863      	ldr	r3, [r4, #4]
 800ee5e:	6123      	str	r3, [r4, #16]
 800ee60:	2300      	movs	r3, #0
 800ee62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee66:	e7aa      	b.n	800edbe <_printf_i+0x14a>
 800ee68:	4632      	mov	r2, r6
 800ee6a:	4649      	mov	r1, r9
 800ee6c:	4640      	mov	r0, r8
 800ee6e:	6923      	ldr	r3, [r4, #16]
 800ee70:	47d0      	blx	sl
 800ee72:	3001      	adds	r0, #1
 800ee74:	d0ad      	beq.n	800edd2 <_printf_i+0x15e>
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	079b      	lsls	r3, r3, #30
 800ee7a:	d413      	bmi.n	800eea4 <_printf_i+0x230>
 800ee7c:	68e0      	ldr	r0, [r4, #12]
 800ee7e:	9b03      	ldr	r3, [sp, #12]
 800ee80:	4298      	cmp	r0, r3
 800ee82:	bfb8      	it	lt
 800ee84:	4618      	movlt	r0, r3
 800ee86:	e7a6      	b.n	800edd6 <_printf_i+0x162>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	4632      	mov	r2, r6
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	4640      	mov	r0, r8
 800ee90:	47d0      	blx	sl
 800ee92:	3001      	adds	r0, #1
 800ee94:	d09d      	beq.n	800edd2 <_printf_i+0x15e>
 800ee96:	3501      	adds	r5, #1
 800ee98:	68e3      	ldr	r3, [r4, #12]
 800ee9a:	9903      	ldr	r1, [sp, #12]
 800ee9c:	1a5b      	subs	r3, r3, r1
 800ee9e:	42ab      	cmp	r3, r5
 800eea0:	dcf2      	bgt.n	800ee88 <_printf_i+0x214>
 800eea2:	e7eb      	b.n	800ee7c <_printf_i+0x208>
 800eea4:	2500      	movs	r5, #0
 800eea6:	f104 0619 	add.w	r6, r4, #25
 800eeaa:	e7f5      	b.n	800ee98 <_printf_i+0x224>
 800eeac:	0800f40c 	.word	0x0800f40c
 800eeb0:	0800f41d 	.word	0x0800f41d

0800eeb4 <memmove>:
 800eeb4:	4288      	cmp	r0, r1
 800eeb6:	b510      	push	{r4, lr}
 800eeb8:	eb01 0402 	add.w	r4, r1, r2
 800eebc:	d902      	bls.n	800eec4 <memmove+0x10>
 800eebe:	4284      	cmp	r4, r0
 800eec0:	4623      	mov	r3, r4
 800eec2:	d807      	bhi.n	800eed4 <memmove+0x20>
 800eec4:	1e43      	subs	r3, r0, #1
 800eec6:	42a1      	cmp	r1, r4
 800eec8:	d008      	beq.n	800eedc <memmove+0x28>
 800eeca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eece:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eed2:	e7f8      	b.n	800eec6 <memmove+0x12>
 800eed4:	4601      	mov	r1, r0
 800eed6:	4402      	add	r2, r0
 800eed8:	428a      	cmp	r2, r1
 800eeda:	d100      	bne.n	800eede <memmove+0x2a>
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eee6:	e7f7      	b.n	800eed8 <memmove+0x24>

0800eee8 <memchr>:
 800eee8:	4603      	mov	r3, r0
 800eeea:	b510      	push	{r4, lr}
 800eeec:	b2c9      	uxtb	r1, r1
 800eeee:	4402      	add	r2, r0
 800eef0:	4293      	cmp	r3, r2
 800eef2:	4618      	mov	r0, r3
 800eef4:	d101      	bne.n	800eefa <memchr+0x12>
 800eef6:	2000      	movs	r0, #0
 800eef8:	e003      	b.n	800ef02 <memchr+0x1a>
 800eefa:	7804      	ldrb	r4, [r0, #0]
 800eefc:	3301      	adds	r3, #1
 800eefe:	428c      	cmp	r4, r1
 800ef00:	d1f6      	bne.n	800eef0 <memchr+0x8>
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <memcpy>:
 800ef04:	440a      	add	r2, r1
 800ef06:	4291      	cmp	r1, r2
 800ef08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef0c:	d100      	bne.n	800ef10 <memcpy+0xc>
 800ef0e:	4770      	bx	lr
 800ef10:	b510      	push	{r4, lr}
 800ef12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef16:	4291      	cmp	r1, r2
 800ef18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1c:	d1f9      	bne.n	800ef12 <memcpy+0xe>
 800ef1e:	bd10      	pop	{r4, pc}

0800ef20 <_realloc_r>:
 800ef20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef24:	4680      	mov	r8, r0
 800ef26:	4615      	mov	r5, r2
 800ef28:	460c      	mov	r4, r1
 800ef2a:	b921      	cbnz	r1, 800ef36 <_realloc_r+0x16>
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef32:	f7ff bb31 	b.w	800e598 <_malloc_r>
 800ef36:	b92a      	cbnz	r2, 800ef44 <_realloc_r+0x24>
 800ef38:	f7ff fc8a 	bl	800e850 <_free_r>
 800ef3c:	2400      	movs	r4, #0
 800ef3e:	4620      	mov	r0, r4
 800ef40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef44:	f000 f81a 	bl	800ef7c <_malloc_usable_size_r>
 800ef48:	4285      	cmp	r5, r0
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	d802      	bhi.n	800ef54 <_realloc_r+0x34>
 800ef4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ef52:	d8f4      	bhi.n	800ef3e <_realloc_r+0x1e>
 800ef54:	4629      	mov	r1, r5
 800ef56:	4640      	mov	r0, r8
 800ef58:	f7ff fb1e 	bl	800e598 <_malloc_r>
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d0ec      	beq.n	800ef3c <_realloc_r+0x1c>
 800ef62:	42b5      	cmp	r5, r6
 800ef64:	462a      	mov	r2, r5
 800ef66:	4621      	mov	r1, r4
 800ef68:	bf28      	it	cs
 800ef6a:	4632      	movcs	r2, r6
 800ef6c:	f7ff ffca 	bl	800ef04 <memcpy>
 800ef70:	4621      	mov	r1, r4
 800ef72:	4640      	mov	r0, r8
 800ef74:	f7ff fc6c 	bl	800e850 <_free_r>
 800ef78:	463c      	mov	r4, r7
 800ef7a:	e7e0      	b.n	800ef3e <_realloc_r+0x1e>

0800ef7c <_malloc_usable_size_r>:
 800ef7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef80:	1f18      	subs	r0, r3, #4
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	bfbc      	itt	lt
 800ef86:	580b      	ldrlt	r3, [r1, r0]
 800ef88:	18c0      	addlt	r0, r0, r3
 800ef8a:	4770      	bx	lr

0800ef8c <_init>:
 800ef8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8e:	bf00      	nop
 800ef90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef92:	bc08      	pop	{r3}
 800ef94:	469e      	mov	lr, r3
 800ef96:	4770      	bx	lr

0800ef98 <_fini>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	bf00      	nop
 800ef9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9e:	bc08      	pop	{r3}
 800efa0:	469e      	mov	lr, r3
 800efa2:	4770      	bx	lr
