
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e884  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800ea68  0800ea68  0000fa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f860  0800f860  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f860  0800f860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f868  0800f868  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f868  0800f868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f86c  0800f86c  0001086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f870  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  20000fd0  08010840  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002174  08010840  00012174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b2  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aec  00000000  00000000  0002c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00030098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd7  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd89  00000000  00000000  000324ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc30  00000000  00000000  0004f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1143  00000000  00000000  0006ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  0010e040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00113ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ea50 	.word	0x0800ea50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800ea50 	.word	0x0800ea50

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200016eb 	.word	0x200016eb
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200016c1 	.word	0x200016c1
 80004bc:	200016c4 	.word	0x200016c4
 80004c0:	200016c5 	.word	0x200016c5
 80004c4:	200016c6 	.word	0x200016c6
 80004c8:	200016c7 	.word	0x200016c7
 80004cc:	200016c8 	.word	0x200016c8
 80004d0:	200016c9 	.word	0x200016c9
 80004d4:	200016d9 	.word	0x200016d9
 80004d8:	200016ca 	.word	0x200016ca
 80004dc:	200016da 	.word	0x200016da
 80004e0:	200016cb 	.word	0x200016cb
 80004e4:	200016db 	.word	0x200016db
 80004e8:	200016ce 	.word	0x200016ce
 80004ec:	200016cf 	.word	0x200016cf
 80004f0:	200016d0 	.word	0x200016d0
 80004f4:	200016d1 	.word	0x200016d1
 80004f8:	200016d2 	.word	0x200016d2
 80004fc:	200016d3 	.word	0x200016d3
 8000500:	200016d4 	.word	0x200016d4
 8000504:	200016d5 	.word	0x200016d5
 8000508:	200016d6 	.word	0x200016d6
 800050c:	200016d7 	.word	0x200016d7
 8000510:	200016d8 	.word	0x200016d8
 8000514:	200016dc 	.word	0x200016dc
 8000518:	200016de 	.word	0x200016de
 800051c:	200016b8 	.word	0x200016b8
 8000520:	200016b9 	.word	0x200016b9
 8000524:	200016ba 	.word	0x200016ba
 8000528:	200016bb 	.word	0x200016bb
 800052c:	200016e0 	.word	0x200016e0
 8000530:	200016cd 	.word	0x200016cd
 8000534:	200016df 	.word	0x200016df
 8000538:	200016cc 	.word	0x200016cc
 800053c:	200016e1 	.word	0x200016e1
 8000540:	200016e2 	.word	0x200016e2
 8000544:	200016e3 	.word	0x200016e3
 8000548:	200016e4 	.word	0x200016e4
 800054c:	200016e5 	.word	0x200016e5
 8000550:	200016e6 	.word	0x200016e6
 8000554:	200016e7 	.word	0x200016e7
 8000558:	200016e8 	.word	0x200016e8
 800055c:	200016e9 	.word	0x200016e9
 8000560:	200016ea 	.word	0x200016ea
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fb77 	bl	8009d30 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fb71 	bl	8009d30 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fb6b 	bl	8009d30 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fcb8 	bl	8005fd4 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200016cf 	.word	0x200016cf
 800066c:	200016d0 	.word	0x200016d0
 8000670:	200016d1 	.word	0x200016d1
 8000674:	200016d2 	.word	0x200016d2
 8000678:	200016d3 	.word	0x200016d3
 800067c:	200016d4 	.word	0x200016d4
 8000680:	200016d5 	.word	0x200016d5
 8000684:	200016d6 	.word	0x200016d6
 8000688:	200016d7 	.word	0x200016d7
 800068c:	200016d8 	.word	0x200016d8
 8000690:	200016dc 	.word	0x200016dc
 8000694:	200016de 	.word	0x200016de
 8000698:	200016df 	.word	0x200016df
 800069c:	200016e0 	.word	0x200016e0
 80006a0:	200016eb 	.word	0x200016eb

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fdbc 	bl	8009240 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fb30 	bl	8009d30 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fde2 	bl	8009298 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	20001e64 	.word	0x20001e64

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fb73 	bl	800ae5c <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fd5b 	bl	8009240 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 fac2 	bl	8009d30 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001f40 	.word	0x20001f40
 80007c4:	0800ea68 	.word	0x0800ea68

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fbfb 	bl	800b050 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fce9 	bl	8009240 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001f40 	.word	0x20001f40
 80008a4:	0800ea7c 	.word	0x0800ea7c

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <Wifi_SendString>:
void Wifi_RxClear(void) {
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
    Wifi_RxBufferIndex = 0;  // Ayrıca buffer indexi sıfırlayın
}

int Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY) == HAL_OK ? 1 : 0;
 80009b6:	6838      	ldr	r0, [r7, #0]
 80009b8:	f7ff fc34 	bl	8000224 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f00c fa8a 	bl	800cee0 <HAL_UART_Transmit>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Wifi_WaitForString>:

int Wifi_WaitForString(UART_HandleTypeDef *huart, uint32_t TimeOut_ms, uint8_t *result, uint8_t CountOfParameter, ...) {
 80009e0:	b408      	push	{r3}
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b089      	sub	sp, #36	@ 0x24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80009ee:	f009 f995 	bl	8009d1c <HAL_GetTick>
 80009f2:	6178      	str	r0, [r7, #20]
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
 80009f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f8:	2100      	movs	r1, #0
 80009fa:	482b      	ldr	r0, [pc, #172]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 80009fc:	f00d fc3e 	bl	800e27c <memset>
    int index = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    va_list args;
    va_start(args, CountOfParameter);
 8000a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a08:	613b      	str	r3, [r7, #16]

    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000a0a:	e03a      	b.n	8000a82 <Wifi_WaitForString+0xa2>
        if (HAL_UART_Receive(huart, (uint8_t *)&esp8266_rx_buffer[index], 1, 100) == HAL_OK) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	4a26      	ldr	r2, [pc, #152]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a10:	1899      	adds	r1, r3, r2
 8000a12:	2364      	movs	r3, #100	@ 0x64
 8000a14:	2201      	movs	r2, #1
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f00c fae5 	bl	800cfe6 <HAL_UART_Receive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d124      	bne.n	8000a6c <Wifi_WaitForString+0x8c>
            if (esp8266_rx_buffer[index] == '\n') {
 8000a22:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b0a      	cmp	r3, #10
 8000a2c:	d11a      	bne.n	8000a64 <Wifi_WaitForString+0x84>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	76fb      	strb	r3, [r7, #27]
 8000a32:	e012      	b.n	8000a5a <Wifi_WaitForString+0x7a>
                    if (strstr(esp8266_rx_buffer, va_arg(args, char *)) != NULL) {
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1d1a      	adds	r2, r3, #4
 8000a38:	613a      	str	r2, [r7, #16]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a40:	f00d fc06 	bl	800e250 <strstr>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <Wifi_WaitForString+0x74>
                        *result = i;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7efa      	ldrb	r2, [r7, #27]
 8000a4e:	701a      	strb	r2, [r3, #0]
                        va_end(args);
                        return 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e022      	b.n	8000a9a <Wifi_WaitForString+0xba>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000a54:	7efb      	ldrb	r3, [r7, #27]
 8000a56:	3301      	adds	r3, #1
 8000a58:	76fb      	strb	r3, [r7, #27]
 8000a5a:	7efa      	ldrb	r2, [r7, #27]
 8000a5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3e7      	bcc.n	8000a34 <Wifi_WaitForString+0x54>
                    }
                }
            }
            index++;
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	3301      	adds	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e00a      	b.n	8000a82 <Wifi_WaitForString+0xa2>
        } else {
            HAL_UART_AbortReceive(huart);  // Hatalı durumu temizle
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f00c fba6 	bl	800d1be <HAL_UART_AbortReceive>
            HAL_UART_Receive_IT(huart, (uint8_t *)&esp8266_rx_buffer[index], 1); // Tekrar başlat
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a76:	4413      	add	r3, r2
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f00c fb79 	bl	800d174 <HAL_UART_Receive_IT>
    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000a82:	f009 f94b 	bl	8009d1c <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d8bc      	bhi.n	8000a0c <Wifi_WaitForString+0x2c>
        }
    }
    *result = 0xFF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	22ff      	movs	r2, #255	@ 0xff
 8000a96:	701a      	strb	r2, [r3, #0]
    va_end(args);
    return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa4:	b001      	add	sp, #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20001094 	.word	0x20001094

08000aac <Wifi_RxCallBack>:

void Wifi_RxCallBack(UART_HandleTypeDef *huart) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    uint8_t receivedByte;

    if (HAL_UART_Receive_IT(huart, &receivedByte, 1) == HAL_OK) {
 8000ab4:	f107 030f 	add.w	r3, r7, #15
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f00c fb59 	bl	800d174 <HAL_UART_Receive_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d126      	bne.n	8000b16 <Wifi_RxCallBack+0x6a>
        if (Wifi_RxBufferIndex >= WIFI_RX_BUFFER_SIZE) {
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ad0:	d302      	bcc.n	8000ad8 <Wifi_RxCallBack+0x2c>
            Wifi_RxBufferIndex = 0;  // Bu aşamada veriyi yeniden başlatmak yerine işleyin
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
        }

        Wifi_RxBuffer[Wifi_RxBufferIndex++] = receivedByte;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	b291      	uxth	r1, r2
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ae2:	8011      	strh	r1, [r2, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	7bf9      	ldrb	r1, [r7, #15]
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000aea:	5499      	strb	r1, [r3, r2]

        if (receivedByte == '\n' || receivedByte == '\r') {
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d002      	beq.n	8000af8 <Wifi_RxCallBack+0x4c>
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d10e      	bne.n	8000b16 <Wifi_RxCallBack+0x6a>
            Wifi_ProcessReceivedData(Wifi_RxBuffer, Wifi_RxBufferIndex);
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000b00:	f000 f812 	bl	8000b28 <Wifi_ProcessReceivedData>
            Wifi_RxBufferIndex = 0;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	801a      	strh	r2, [r3, #0]
            memset(Wifi_RxBuffer, 0, WIFI_RX_BUFFER_SIZE);
 8000b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000b12:	f00d fbb3 	bl	800e27c <memset>
        }
    }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20001694 	.word	0x20001694
 8000b24:	20001494 	.word	0x20001494

08000b28 <Wifi_ProcessReceivedData>:

void Wifi_ProcessReceivedData(uint8_t* buffer, uint16_t length) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
    memcpy(esp8266_rx_buffer, buffer, length);
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	461a      	mov	r2, r3
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <Wifi_ProcessReceivedData+0x28>)
 8000b3c:	f00d fbe2 	bl	800e304 <memcpy>

    if (strstr((char*)buffer, "OK") != NULL) {
 8000b40:	4904      	ldr	r1, [pc, #16]	@ (8000b54 <Wifi_ProcessReceivedData+0x2c>)
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f00d fb84 	bl	800e250 <strstr>
        // "OK" yanıtı bulundu, diğer işlemler yapılabilir
    }
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20001094 	.word	0x20001094
 8000b54:	0800ea90 	.word	0x0800ea90

08000b58 <Wifi_Init>:

int Wifi_Init(UART_HandleTypeDef *huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
    if (!Wifi_SendString(huart, AT_CMD)) {
 8000b60:	4911      	ldr	r1, [pc, #68]	@ (8000ba8 <Wifi_Init+0x50>)
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff22 	bl	80009ac <Wifi_SendString>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <Wifi_Init+0x1a>
        return 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e016      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    uint8_t result;
    if (!Wifi_WaitForString(huart, 2000, &result, 2, "OK", "ERROR")) {
 8000b72:	f107 020f 	add.w	r2, r7, #15
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <Wifi_Init+0x54>)
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <Wifi_Init+0x58>)
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff2b 	bl	80009e0 <Wifi_WaitForString>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <Wifi_Init+0x3c>
        return 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e005      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    if (result == 1) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <Wifi_Init+0x46>
        return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800ea94 	.word	0x0800ea94
 8000bac:	0800ea9c 	.word	0x0800ea9c
 8000bb0:	0800ea90 	.word	0x0800ea90

08000bb4 <Wifi_Restart>:

void Wifi_Disable(void) {
    // Wifi kapama işlemleri buraya eklenecek
}

int Wifi_Restart(UART_HandleTypeDef *huart) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, AT_RST_CMD) &&
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <Wifi_Restart+0x3c>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fef4 	bl	80009ac <Wifi_SendString>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00d      	beq.n	8000be6 <Wifi_Restart+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <Wifi_Restart+0x40>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff02 	bl	80009e0 <Wifi_WaitForString>
 8000bdc:	4603      	mov	r3, r0
    return Wifi_SendString(huart, AT_RST_CMD) &&
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <Wifi_Restart+0x32>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <Wifi_Restart+0x34>
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800eaa4 	.word	0x0800eaa4
 8000bf4:	0800ea90 	.word	0x0800ea90

08000bf8 <Wifi_FactoryReset>:
    sprintf(cmd, AT_GSLP_CMD, DelayMs);
    return Wifi_SendString(huart, cmd) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_FactoryReset(UART_HandleTypeDef *huart) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, AT_RESTORE_CMD) &&
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <Wifi_FactoryReset+0x3c>)
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fed2 	bl	80009ac <Wifi_SendString>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00d      	beq.n	8000c2a <Wifi_FactoryReset+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <Wifi_FactoryReset+0x40>)
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	2200      	movs	r2, #0
 8000c16:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fee0 	bl	80009e0 <Wifi_WaitForString>
 8000c20:	4603      	mov	r3, r0
    return Wifi_SendString(huart, AT_RESTORE_CMD) &&
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <Wifi_FactoryReset+0x32>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <Wifi_FactoryReset+0x34>
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	0800eac0 	.word	0x0800eac0
 8000c38:	0800ea90 	.word	0x0800ea90

08000c3c <Wifi_SetMode>:
    sprintf(cmd, AT_RFPOWER_CMD, Power_0_to_82);
    return Wifi_SendString(huart, cmd) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_SetMode(UART_HandleTypeDef *huart, WifiMode_t WifiMode_) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
    char cmd[32];
    sprintf(cmd, AT_CWMODE_CMD, WifiMode_);
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4910      	ldr	r1, [pc, #64]	@ (8000c90 <Wifi_SetMode+0x54>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00d fa79 	bl	800e148 <siprintf>
    return Wifi_SendString(huart, cmd) &&
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fea5 	bl	80009ac <Wifi_SendString>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00d      	beq.n	8000c84 <Wifi_SetMode+0x48>
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <Wifi_SetMode+0x58>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feb3 	bl	80009e0 <Wifi_WaitForString>
 8000c7a:	4603      	mov	r3, r0
    return Wifi_SendString(huart, cmd) &&
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <Wifi_SetMode+0x48>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <Wifi_SetMode+0x4a>
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800eaf0 	.word	0x0800eaf0
 8000c94:	0800ea90 	.word	0x0800ea90

08000c98 <Wifi_Station_ConnectToAp>:
int Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, AT_CIFSR_CMD) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass, char *MAC) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b0c9      	sub	sp, #292	@ 0x124
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000ca2:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000ca6:	6020      	str	r0, [r4, #0]
 8000ca8:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8000cac:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000cb0:	6001      	str	r1, [r0, #0]
 8000cb2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000cb6:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000cba:	600a      	str	r2, [r1, #0]
 8000cbc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000cc0:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000cc4:	6013      	str	r3, [r2, #0]
    char cmd[256];
    sprintf(cmd, AT_CWJAP_CMD, SSID, Pass);
 8000cc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cce:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000cd2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000cd6:	f107 0018 	add.w	r0, r7, #24
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	491b      	ldr	r1, [pc, #108]	@ (8000d4c <Wifi_Station_ConnectToAp+0xb4>)
 8000ce0:	f00d fa32 	bl	800e148 <siprintf>

    if (Wifi_SendString(huart, cmd)) {
 8000ce4:	f107 0218 	add.w	r2, r7, #24
 8000ce8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	f7ff fe5a 	bl	80009ac <Wifi_SendString>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d01f      	beq.n	8000d3e <Wifi_Station_ConnectToAp+0xa6>
        uint8_t result;
        if (Wifi_WaitForString(huart, 20000, &result, 2, "OK", "FAIL")) {
 8000cfe:	f107 0217 	add.w	r2, r7, #23
 8000d02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d06:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <Wifi_Station_ConnectToAp+0xb8>)
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <Wifi_Station_ConnectToAp+0xbc>)
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000d18:	6800      	ldr	r0, [r0, #0]
 8000d1a:	f7ff fe61 	bl	80009e0 <Wifi_WaitForString>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <Wifi_Station_ConnectToAp+0xa2>
            if (result == 0) {
 8000d24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d28:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <Wifi_Station_ConnectToAp+0x9e>
                return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e004      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
            } else {
                return 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e002      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
            }
        } else {
            return 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
        }
    }

    return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800eb1c 	.word	0x0800eb1c
 8000d50:	0800eb34 	.word	0x0800eb34
 8000d54:	0800ea90 	.word	0x0800ea90

08000d58 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a24      	ldr	r2, [pc, #144]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000d76:	f000 f8d1 	bl	8000f1c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000d7a:	e000      	b.n	8000d7e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000d7c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e012      	b.n	8000daa <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d107      	bne.n	8000da4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4918      	ldr	r1, [pc, #96]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	54ca      	strb	r2, [r1, r3]
					break;
 8000da2:	e007      	b.n	8000db4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbe7      	blt.n	8000d84 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b299      	uxth	r1, r3
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000dd2:	9402      	str	r4, [sp, #8]
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	21a0      	movs	r1, #160	@ 0xa0
 8000dde:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <hata2EEPROM+0xac>)
 8000de0:	f00a f83c 	bl	800ae5c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000de4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de8:	f008 ffa2 	bl	8009d30 <HAL_Delay>
	eepromKontrol();
 8000dec:	f7ff fa22 	bl	8000234 <eepromKontrol>
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000094 	.word	0x20000094
 8000dfc:	20000098 	.word	0x20000098
 8000e00:	20000fec 	.word	0x20000fec
 8000e04:	20001f40 	.word	0x20001f40

08000e08 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10f      	bne.n	8000e38 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000e18:	4a38      	ldr	r2, [pc, #224]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f008 fa0f 	bl	8009240 <lcd_print>
		lcd_print(2, 1, "1");
 8000e22:	4a37      	ldr	r2, [pc, #220]	@ (8000f00 <hataKoduLcdGoster+0xf8>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f008 fa0a 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a35      	ldr	r2, [pc, #212]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f008 fa05 	bl	8009240 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000e36:	e05d      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d10f      	bne.n	8000e5e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f008 f9fc 	bl	8009240 <lcd_print>
		lcd_print(2, 2, "2");
 8000e48:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <hataKoduLcdGoster+0x100>)
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f008 f9f7 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e52:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e54:	2107      	movs	r1, #7
 8000e56:	2002      	movs	r0, #2
 8000e58:	f008 f9f2 	bl	8009240 <lcd_print>
}
 8000e5c:	e04a      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d10f      	bne.n	8000e84 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000e64:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f008 f9e9 	bl	8009240 <lcd_print>
		lcd_print(2, 3, "3");
 8000e6e:	4a27      	ldr	r2, [pc, #156]	@ (8000f0c <hataKoduLcdGoster+0x104>)
 8000e70:	2103      	movs	r1, #3
 8000e72:	2002      	movs	r0, #2
 8000e74:	f008 f9e4 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e78:	4a22      	ldr	r2, [pc, #136]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f008 f9df 	bl	8009240 <lcd_print>
}
 8000e82:	e037      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d10f      	bne.n	8000eaa <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f008 f9d6 	bl	8009240 <lcd_print>
		lcd_print(2, 4, "4");
 8000e94:	4a1e      	ldr	r2, [pc, #120]	@ (8000f10 <hataKoduLcdGoster+0x108>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f008 f9d1 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e9e:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f008 f9cc 	bl	8009240 <lcd_print>
}
 8000ea8:	e024      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d10f      	bne.n	8000ed0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000eb0:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f008 f9c3 	bl	8009240 <lcd_print>
		lcd_print(2, 5, "5");
 8000eba:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <hataKoduLcdGoster+0x10c>)
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f008 f9be 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f008 f9b9 	bl	8009240 <lcd_print>
}
 8000ece:	e011      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d10e      	bne.n	8000ef4 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000ed6:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2001      	movs	r0, #1
 8000edc:	f008 f9b0 	bl	8009240 <lcd_print>
		lcd_print(2, 6, "6");
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <hataKoduLcdGoster+0x110>)
 8000ee2:	2106      	movs	r1, #6
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f008 f9ab 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "          ");
 8000eea:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000eec:	2107      	movs	r1, #7
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f008 f9a6 	bl	8009240 <lcd_print>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20001eb4 	.word	0x20001eb4
 8000f00:	0800eca8 	.word	0x0800eca8
 8000f04:	0800ecac 	.word	0x0800ecac
 8000f08:	0800ecb8 	.word	0x0800ecb8
 8000f0c:	0800ecbc 	.word	0x0800ecbc
 8000f10:	0800ecc0 	.word	0x0800ecc0
 8000f14:	0800ecc4 	.word	0x0800ecc4
 8000f18:	0800ecc8 	.word	0x0800ecc8

08000f1c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e009      	b.n	8000f3c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <eepromDataFillWithEmpty+0x38>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <eepromDataFillWithEmpty+0x3c>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <eepromDataFillWithEmpty+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf0      	blt.n	8000f28 <eepromDataFillWithEmpty+0xc>
	}
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000006c 	.word	0x2000006c
 8000f58:	20000fec 	.word	0x20000fec
 8000f5c:	20000094 	.word	0x20000094

08000f60 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000f72:	4b50      	ldr	r3, [pc, #320]	@ (80010b4 <i2cTest+0x154>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b4e      	ldr	r3, [pc, #312]	@ (80010b4 <i2cTest+0x154>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f82:	484c      	ldr	r0, [pc, #304]	@ (80010b4 <i2cTest+0x154>)
 8000f84:	f009 fe3c 	bl	800ac00 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f88:	23c0      	movs	r3, #192	@ 0xc0
 8000f8a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f8c:	2311      	movs	r3, #17
 8000f8e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4846      	ldr	r0, [pc, #280]	@ (80010b8 <i2cTest+0x158>)
 8000f9e:	f009 fa43 	bl	800a428 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	@ 0x40
 8000fa6:	4844      	ldr	r0, [pc, #272]	@ (80010b8 <i2cTest+0x158>)
 8000fa8:	f009 fcb5 	bl	800a916 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	4841      	ldr	r0, [pc, #260]	@ (80010b8 <i2cTest+0x158>)
 8000fb2:	f009 fcb0 	bl	800a916 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f008 feba 	bl	8009d30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fbc:	bf00      	nop
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	483d      	ldr	r0, [pc, #244]	@ (80010b8 <i2cTest+0x158>)
 8000fc2:	f009 fc91 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d006      	beq.n	8000fda <i2cTest+0x7a>
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	483a      	ldr	r0, [pc, #232]	@ (80010b8 <i2cTest+0x158>)
 8000fd0:	f009 fc8a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f1      	bne.n	8000fbe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	4836      	ldr	r0, [pc, #216]	@ (80010b8 <i2cTest+0x158>)
 8000fe0:	f009 fc99 	bl	800a916 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f008 fea3 	bl	8009d30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000fea:	bf00      	nop
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	4832      	ldr	r0, [pc, #200]	@ (80010b8 <i2cTest+0x158>)
 8000ff0:	f009 fc7a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d0f8      	beq.n	8000fec <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <i2cTest+0x158>)
 8001000:	f009 fc89 	bl	800a916 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f008 fe93 	bl	8009d30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800100a:	bf00      	nop
 800100c:	2140      	movs	r1, #64	@ 0x40
 800100e:	482a      	ldr	r0, [pc, #168]	@ (80010b8 <i2cTest+0x158>)
 8001010:	f009 fc6a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d0f8      	beq.n	800100c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	@ 0x40
 800101e:	4826      	ldr	r0, [pc, #152]	@ (80010b8 <i2cTest+0x158>)
 8001020:	f009 fc79 	bl	800a916 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001024:	200a      	movs	r0, #10
 8001026:	f008 fe83 	bl	8009d30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800102a:	bf00      	nop
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	4822      	ldr	r0, [pc, #136]	@ (80010b8 <i2cTest+0x158>)
 8001030:	f009 fc5a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d1f8      	bne.n	800102c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <i2cTest+0x158>)
 8001040:	f009 fc69 	bl	800a916 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001044:	200a      	movs	r0, #10
 8001046:	f008 fe73 	bl	8009d30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800104a:	bf00      	nop
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	481a      	ldr	r0, [pc, #104]	@ (80010b8 <i2cTest+0x158>)
 8001050:	f009 fc4a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1f8      	bne.n	800104c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <i2cTest+0x158>)
 8001070:	f009 f9da 	bl	800a428 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <i2cTest+0x154>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <i2cTest+0x154>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001082:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <i2cTest+0x154>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <i2cTest+0x154>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001092:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001094:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <i2cTest+0x154>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <i2cTest+0x154>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <i2cTest+0x154>)
 80010a6:	f009 fc67 	bl	800a978 <HAL_I2C_Init>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20001f40 	.word	0x20001f40
 80010b8:	40010c00 	.word	0x40010c00

080010bc <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80010c6:	20c8      	movs	r0, #200	@ 0xc8
 80010c8:	f008 fe32 	bl	8009d30 <HAL_Delay>
	lcd_clear();
 80010cc:	f008 f8e4 	bl	8009298 <lcd_clear>
	if(type == 1 && page == 0) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d13e      	bne.n	8001154 <printTemplate+0x98>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d13b      	bne.n	8001154 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 80010dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001348 <printTemplate+0x28c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2001      	movs	r0, #1
 80010e2:	f008 f8ad 	bl	8009240 <lcd_print>
		lcd_print(2, 3, "0");
 80010e6:	4a99      	ldr	r2, [pc, #612]	@ (800134c <printTemplate+0x290>)
 80010e8:	2103      	movs	r1, #3
 80010ea:	2002      	movs	r0, #2
 80010ec:	f008 f8a8 	bl	8009240 <lcd_print>
		lcd_print(2, 4, "1");
 80010f0:	4a97      	ldr	r2, [pc, #604]	@ (8001350 <printTemplate+0x294>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	2002      	movs	r0, #2
 80010f6:	f008 f8a3 	bl	8009240 <lcd_print>
		lcd_print(2, 5, "2");
 80010fa:	4a96      	ldr	r2, [pc, #600]	@ (8001354 <printTemplate+0x298>)
 80010fc:	2105      	movs	r1, #5
 80010fe:	2002      	movs	r0, #2
 8001100:	f008 f89e 	bl	8009240 <lcd_print>
		lcd_print(2, 6, "3");
 8001104:	4a94      	ldr	r2, [pc, #592]	@ (8001358 <printTemplate+0x29c>)
 8001106:	2106      	movs	r1, #6
 8001108:	2002      	movs	r0, #2
 800110a:	f008 f899 	bl	8009240 <lcd_print>
		lcd_print(2, 7, "4");
 800110e:	4a93      	ldr	r2, [pc, #588]	@ (800135c <printTemplate+0x2a0>)
 8001110:	2107      	movs	r1, #7
 8001112:	2002      	movs	r0, #2
 8001114:	f008 f894 	bl	8009240 <lcd_print>
		lcd_print(2, 10, "5");
 8001118:	4a91      	ldr	r2, [pc, #580]	@ (8001360 <printTemplate+0x2a4>)
 800111a:	210a      	movs	r1, #10
 800111c:	2002      	movs	r0, #2
 800111e:	f008 f88f 	bl	8009240 <lcd_print>
		lcd_print(2, 11, "6");
 8001122:	4a90      	ldr	r2, [pc, #576]	@ (8001364 <printTemplate+0x2a8>)
 8001124:	210b      	movs	r1, #11
 8001126:	2002      	movs	r0, #2
 8001128:	f008 f88a 	bl	8009240 <lcd_print>
		lcd_print(2, 12, "7");
 800112c:	4a8e      	ldr	r2, [pc, #568]	@ (8001368 <printTemplate+0x2ac>)
 800112e:	210c      	movs	r1, #12
 8001130:	2002      	movs	r0, #2
 8001132:	f008 f885 	bl	8009240 <lcd_print>
		lcd_print(2, 13, "8");
 8001136:	4a8d      	ldr	r2, [pc, #564]	@ (800136c <printTemplate+0x2b0>)
 8001138:	210d      	movs	r1, #13
 800113a:	2002      	movs	r0, #2
 800113c:	f008 f880 	bl	8009240 <lcd_print>
		lcd_print(2, 14, "9");
 8001140:	4a8b      	ldr	r2, [pc, #556]	@ (8001370 <printTemplate+0x2b4>)
 8001142:	210e      	movs	r1, #14
 8001144:	2002      	movs	r0, #2
 8001146:	f008 f87b 	bl	8009240 <lcd_print>
		lcd_gotoxy(2, 3);
 800114a:	2103      	movs	r1, #3
 800114c:	2002      	movs	r0, #2
 800114e:	f008 f858 	bl	8009202 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8001152:	e0f5      	b.n	8001340 <printTemplate+0x284>
	} else if(type == 2) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d178      	bne.n	800124c <printTemplate+0x190>
		if(page == 1) {
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d114      	bne.n	800118a <printTemplate+0xce>
			lcd_clear();
 8001160:	f008 f89a 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	@ 0x64
 8001166:	f008 fde3 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800116a:	4a82      	ldr	r2, [pc, #520]	@ (8001374 <printTemplate+0x2b8>)
 800116c:	2101      	movs	r1, #1
 800116e:	2001      	movs	r0, #1
 8001170:	f008 f866 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001174:	4a80      	ldr	r2, [pc, #512]	@ (8001378 <printTemplate+0x2bc>)
 8001176:	2107      	movs	r1, #7
 8001178:	2001      	movs	r0, #1
 800117a:	f008 f861 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800117e:	4a7f      	ldr	r2, [pc, #508]	@ (800137c <printTemplate+0x2c0>)
 8001180:	2101      	movs	r1, #1
 8001182:	2002      	movs	r0, #2
 8001184:	f008 f85c 	bl	8009240 <lcd_print>
}
 8001188:	e0da      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 2) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d114      	bne.n	80011ba <printTemplate+0xfe>
			lcd_clear();
 8001190:	f008 f882 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	@ 0x64
 8001196:	f008 fdcb 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800119a:	4a79      	ldr	r2, [pc, #484]	@ (8001380 <printTemplate+0x2c4>)
 800119c:	2101      	movs	r1, #1
 800119e:	2001      	movs	r0, #1
 80011a0:	f008 f84e 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80011a4:	4a74      	ldr	r2, [pc, #464]	@ (8001378 <printTemplate+0x2bc>)
 80011a6:	2107      	movs	r1, #7
 80011a8:	2001      	movs	r0, #1
 80011aa:	f008 f849 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ae:	4a75      	ldr	r2, [pc, #468]	@ (8001384 <printTemplate+0x2c8>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	2002      	movs	r0, #2
 80011b4:	f008 f844 	bl	8009240 <lcd_print>
}
 80011b8:	e0c2      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 3) {
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d114      	bne.n	80011ea <printTemplate+0x12e>
			lcd_clear();
 80011c0:	f008 f86a 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 80011c4:	2064      	movs	r0, #100	@ 0x64
 80011c6:	f008 fdb3 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80011ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001374 <printTemplate+0x2b8>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	2001      	movs	r0, #1
 80011d0:	f008 f836 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80011d4:	4a68      	ldr	r2, [pc, #416]	@ (8001378 <printTemplate+0x2bc>)
 80011d6:	2107      	movs	r1, #7
 80011d8:	2001      	movs	r0, #1
 80011da:	f008 f831 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80011de:	4a6a      	ldr	r2, [pc, #424]	@ (8001388 <printTemplate+0x2cc>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2002      	movs	r0, #2
 80011e4:	f008 f82c 	bl	8009240 <lcd_print>
}
 80011e8:	e0aa      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 4) {
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d114      	bne.n	800121a <printTemplate+0x15e>
			lcd_clear();
 80011f0:	f008 f852 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f008 fd9b 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80011fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001374 <printTemplate+0x2b8>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	2001      	movs	r0, #1
 8001200:	f008 f81e 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001204:	4a5c      	ldr	r2, [pc, #368]	@ (8001378 <printTemplate+0x2bc>)
 8001206:	2107      	movs	r1, #7
 8001208:	2001      	movs	r0, #1
 800120a:	f008 f819 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800120e:	4a5f      	ldr	r2, [pc, #380]	@ (800138c <printTemplate+0x2d0>)
 8001210:	2101      	movs	r1, #1
 8001212:	2002      	movs	r0, #2
 8001214:	f008 f814 	bl	8009240 <lcd_print>
}
 8001218:	e092      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 5) {
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b05      	cmp	r3, #5
 800121e:	f040 808f 	bne.w	8001340 <printTemplate+0x284>
			lcd_clear();
 8001222:	f008 f839 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	@ 0x64
 8001228:	f008 fd82 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800122c:	4a51      	ldr	r2, [pc, #324]	@ (8001374 <printTemplate+0x2b8>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f008 f805 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001236:	4a50      	ldr	r2, [pc, #320]	@ (8001378 <printTemplate+0x2bc>)
 8001238:	2107      	movs	r1, #7
 800123a:	2001      	movs	r0, #1
 800123c:	f008 f800 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001240:	4a53      	ldr	r2, [pc, #332]	@ (8001390 <printTemplate+0x2d4>)
 8001242:	2101      	movs	r1, #1
 8001244:	2002      	movs	r0, #2
 8001246:	f007 fffb 	bl	8009240 <lcd_print>
}
 800124a:	e079      	b.n	8001340 <printTemplate+0x284>
	} else if(type == 3) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d176      	bne.n	8001340 <printTemplate+0x284>
		if(page == 1) {
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d114      	bne.n	8001282 <printTemplate+0x1c6>
			lcd_clear();
 8001258:	f008 f81e 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f008 fd67 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001262:	4a4c      	ldr	r2, [pc, #304]	@ (8001394 <printTemplate+0x2d8>)
 8001264:	2101      	movs	r1, #1
 8001266:	2001      	movs	r0, #1
 8001268:	f007 ffea 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800126c:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <printTemplate+0x2dc>)
 800126e:	2107      	movs	r1, #7
 8001270:	2001      	movs	r0, #1
 8001272:	f007 ffe5 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001276:	4a41      	ldr	r2, [pc, #260]	@ (800137c <printTemplate+0x2c0>)
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f007 ffe0 	bl	8009240 <lcd_print>
}
 8001280:	e05e      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 2) {
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d114      	bne.n	80012b2 <printTemplate+0x1f6>
			lcd_clear();
 8001288:	f008 f806 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f008 fd4f 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001292:	4a40      	ldr	r2, [pc, #256]	@ (8001394 <printTemplate+0x2d8>)
 8001294:	2101      	movs	r1, #1
 8001296:	2001      	movs	r0, #1
 8001298:	f007 ffd2 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800129c:	4a3e      	ldr	r2, [pc, #248]	@ (8001398 <printTemplate+0x2dc>)
 800129e:	2107      	movs	r1, #7
 80012a0:	2001      	movs	r0, #1
 80012a2:	f007 ffcd 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80012a6:	4a37      	ldr	r2, [pc, #220]	@ (8001384 <printTemplate+0x2c8>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	2002      	movs	r0, #2
 80012ac:	f007 ffc8 	bl	8009240 <lcd_print>
}
 80012b0:	e046      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 3) {
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d114      	bne.n	80012e2 <printTemplate+0x226>
			lcd_clear();
 80012b8:	f007 ffee 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	@ 0x64
 80012be:	f008 fd37 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80012c2:	4a34      	ldr	r2, [pc, #208]	@ (8001394 <printTemplate+0x2d8>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f007 ffba 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <printTemplate+0x2dc>)
 80012ce:	2107      	movs	r1, #7
 80012d0:	2001      	movs	r0, #1
 80012d2:	f007 ffb5 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80012d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <printTemplate+0x2cc>)
 80012d8:	2101      	movs	r1, #1
 80012da:	2002      	movs	r0, #2
 80012dc:	f007 ffb0 	bl	8009240 <lcd_print>
}
 80012e0:	e02e      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 4) {
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d114      	bne.n	8001312 <printTemplate+0x256>
			lcd_clear();
 80012e8:	f007 ffd6 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f008 fd1f 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <printTemplate+0x2d8>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	2001      	movs	r0, #1
 80012f8:	f007 ffa2 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012fc:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <printTemplate+0x2dc>)
 80012fe:	2107      	movs	r1, #7
 8001300:	2001      	movs	r0, #1
 8001302:	f007 ff9d 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001306:	4a21      	ldr	r2, [pc, #132]	@ (800138c <printTemplate+0x2d0>)
 8001308:	2101      	movs	r1, #1
 800130a:	2002      	movs	r0, #2
 800130c:	f007 ff98 	bl	8009240 <lcd_print>
}
 8001310:	e016      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 5) {
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d113      	bne.n	8001340 <printTemplate+0x284>
			lcd_clear();
 8001318:	f007 ffbe 	bl	8009298 <lcd_clear>
			HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	@ 0x64
 800131e:	f008 fd07 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <printTemplate+0x2d8>)
 8001324:	2101      	movs	r1, #1
 8001326:	2001      	movs	r0, #1
 8001328:	f007 ff8a 	bl	8009240 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800132c:	4a1a      	ldr	r2, [pc, #104]	@ (8001398 <printTemplate+0x2dc>)
 800132e:	2107      	movs	r1, #7
 8001330:	2001      	movs	r0, #1
 8001332:	f007 ff85 	bl	8009240 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <printTemplate+0x2d4>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f007 ff80 	bl	8009240 <lcd_print>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800eccc 	.word	0x0800eccc
 800134c:	0800ecd4 	.word	0x0800ecd4
 8001350:	0800ecd8 	.word	0x0800ecd8
 8001354:	0800ecdc 	.word	0x0800ecdc
 8001358:	0800ece0 	.word	0x0800ece0
 800135c:	0800ece4 	.word	0x0800ece4
 8001360:	0800ece8 	.word	0x0800ece8
 8001364:	0800ecec 	.word	0x0800ecec
 8001368:	0800ecf0 	.word	0x0800ecf0
 800136c:	0800ecf4 	.word	0x0800ecf4
 8001370:	0800ecf8 	.word	0x0800ecf8
 8001374:	0800ecfc 	.word	0x0800ecfc
 8001378:	20001070 	.word	0x20001070
 800137c:	0800ed10 	.word	0x0800ed10
 8001380:	0800ed24 	.word	0x0800ed24
 8001384:	0800ed2c 	.word	0x0800ed2c
 8001388:	0800ed40 	.word	0x0800ed40
 800138c:	0800ed54 	.word	0x0800ed54
 8001390:	0800ed68 	.word	0x0800ed68
 8001394:	0800ed7c 	.word	0x0800ed7c
 8001398:	20001080 	.word	0x20001080

0800139c <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10a      	bne.n	80013c0 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80013aa:	4a18      	ldr	r2, [pc, #96]	@ (800140c <printCredentials+0x70>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	2002      	movs	r0, #2
 80013b0:	f007 ff46 	bl	8009240 <lcd_print>
		lcd_print(2, 13, "    ");
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <printCredentials+0x74>)
 80013b6:	210d      	movs	r1, #13
 80013b8:	2002      	movs	r0, #2
 80013ba:	f007 ff41 	bl	8009240 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80013be:	e021      	b.n	8001404 <printCredentials+0x68>
	} else if(type == 2) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10f      	bne.n	80013e6 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <printCredentials+0x78>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	2001      	movs	r0, #1
 80013cc:	f007 ff38 	bl	8009240 <lcd_print>
		lcd_print(2, 1, "                ");
 80013d0:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <printCredentials+0x7c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2002      	movs	r0, #2
 80013d6:	f007 ff33 	bl	8009240 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <printCredentials+0x80>)
 80013dc:	2101      	movs	r1, #1
 80013de:	2002      	movs	r0, #2
 80013e0:	f007 ff2e 	bl	8009240 <lcd_print>
}
 80013e4:	e00e      	b.n	8001404 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <printCredentials+0x84>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f007 ff28 	bl	8009240 <lcd_print>
		lcd_print(2, 1, "                ");
 80013f0:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <printCredentials+0x7c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	2002      	movs	r0, #2
 80013f6:	f007 ff23 	bl	8009240 <lcd_print>
		lcd_print(2, 1, wifiPass);
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <printCredentials+0x88>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2002      	movs	r0, #2
 8001400:	f007 ff1e 	bl	8009240 <lcd_print>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20001064 	.word	0x20001064
 8001410:	0800ed90 	.word	0x0800ed90
 8001414:	0800ed98 	.word	0x0800ed98
 8001418:	0800edac 	.word	0x0800edac
 800141c:	20001070 	.word	0x20001070
 8001420:	0800edc0 	.word	0x0800edc0
 8001424:	20001080 	.word	0x20001080

08001428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <__NVIC_SystemReset+0x24>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800143a:	4904      	ldr	r1, [pc, #16]	@ (800144c <__NVIC_SystemReset+0x24>)
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <__NVIC_SystemReset+0x28>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <__NVIC_SystemReset+0x20>
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0004 	.word	0x05fa0004

08001454 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800145a:	2101      	movs	r1, #1
 800145c:	488e      	ldr	r0, [pc, #568]	@ (8001698 <menu+0x244>)
 800145e:	f009 fa43 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8099 	bne.w	800159c <menu+0x148>
 800146a:	4b8c      	ldr	r3, [pc, #560]	@ (800169c <menu+0x248>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8091 	beq.w	800159c <menu+0x148>
		menuSayac = menuSayac+1;
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b87      	ldr	r3, [pc, #540]	@ (80016a0 <menu+0x24c>)
 8001484:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001486:	4b86      	ldr	r3, [pc, #536]	@ (80016a0 <menu+0x24c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b24      	cmp	r3, #36	@ 0x24
 800148c:	d102      	bne.n	8001494 <menu+0x40>
			menuSayac = 1;
 800148e:	4b84      	ldr	r3, [pc, #528]	@ (80016a0 <menu+0x24c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001494:	4b82      	ldr	r3, [pc, #520]	@ (80016a0 <menu+0x24c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d106      	bne.n	80014aa <menu+0x56>
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <menu+0x250>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <menu+0x56>
			menuSayac = 21;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	@ (80016a0 <menu+0x24c>)
 80014a6:	2215      	movs	r2, #21
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d106      	bne.n	80014c0 <menu+0x6c>
 80014b2:	4b7d      	ldr	r3, [pc, #500]	@ (80016a8 <menu+0x254>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <menu+0x6c>
			menuSayac = 16;
 80014ba:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <menu+0x24c>)
 80014bc:	2210      	movs	r2, #16
 80014be:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014c0:	4b77      	ldr	r3, [pc, #476]	@ (80016a0 <menu+0x24c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b0d      	cmp	r3, #13
 80014c6:	d106      	bne.n	80014d6 <menu+0x82>
 80014c8:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <menu+0x254>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <menu+0x82>
			menuSayac = 16;
 80014d0:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <menu+0x24c>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014d6:	4b72      	ldr	r3, [pc, #456]	@ (80016a0 <menu+0x24c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d106      	bne.n	80014ec <menu+0x98>
 80014de:	4b72      	ldr	r3, [pc, #456]	@ (80016a8 <menu+0x254>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d102      	bne.n	80014ec <menu+0x98>
			menuSayac = 13;
 80014e6:	4b6e      	ldr	r3, [pc, #440]	@ (80016a0 <menu+0x24c>)
 80014e8:	220d      	movs	r2, #13
 80014ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014ec:	4b6c      	ldr	r3, [pc, #432]	@ (80016a0 <menu+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d10a      	bne.n	800150a <menu+0xb6>
 80014f4:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <menu+0x258>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d003      	beq.n	8001504 <menu+0xb0>
 80014fc:	4b6b      	ldr	r3, [pc, #428]	@ (80016ac <menu+0x258>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <menu+0xb6>
			menuSayac = 11;
 8001504:	4b66      	ldr	r3, [pc, #408]	@ (80016a0 <menu+0x24c>)
 8001506:	220b      	movs	r2, #11
 8001508:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <menu+0x24c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d10e      	bne.n	8001530 <menu+0xdc>
 8001512:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <menu+0x25c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d003      	beq.n	8001522 <menu+0xce>
 800151a:	4b65      	ldr	r3, [pc, #404]	@ (80016b0 <menu+0x25c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d106      	bne.n	8001530 <menu+0xdc>
 8001522:	4b61      	ldr	r3, [pc, #388]	@ (80016a8 <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <menu+0xdc>
			menuSayac = 16;
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <menu+0x24c>)
 800152c:	2210      	movs	r2, #16
 800152e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001530:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <menu+0x24c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d10e      	bne.n	8001556 <menu+0x102>
 8001538:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <menu+0x25c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <menu+0xf4>
 8001540:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <menu+0x25c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d106      	bne.n	8001556 <menu+0x102>
 8001548:	4b57      	ldr	r3, [pc, #348]	@ (80016a8 <menu+0x254>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d102      	bne.n	8001556 <menu+0x102>
			menuSayac = 13;
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <menu+0x24c>)
 8001552:	220d      	movs	r2, #13
 8001554:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001556:	4b52      	ldr	r3, [pc, #328]	@ (80016a0 <menu+0x24c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d106      	bne.n	800156c <menu+0x118>
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <menu+0x260>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <menu+0x118>
			menuSayac = 16;
 8001566:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <menu+0x24c>)
 8001568:	2210      	movs	r2, #16
 800156a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <menu+0x24c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b18      	cmp	r3, #24
 8001572:	d106      	bne.n	8001582 <menu+0x12e>
 8001574:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <menu+0x250>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <menu+0x12e>
			menuSayac = 26;
 800157c:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <menu+0x24c>)
 800157e:	221a      	movs	r2, #26
 8001580:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <menu+0x24c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b21      	cmp	r3, #33	@ 0x21
 8001588:	d106      	bne.n	8001598 <menu+0x144>
 800158a:	4b4b      	ldr	r3, [pc, #300]	@ (80016b8 <menu+0x264>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <menu+0x144>
			menuSayac = 35;
 8001592:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <menu+0x24c>)
 8001594:	2223      	movs	r2, #35	@ 0x23
 8001596:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001598:	f002 fca2 	bl	8003ee0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800159c:	2108      	movs	r1, #8
 800159e:	4847      	ldr	r0, [pc, #284]	@ (80016bc <menu+0x268>)
 80015a0:	f009 f9a2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	f040 8097 	bne.w	80016da <menu+0x286>
 80015ac:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <menu+0x248>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 808f 	beq.w	80016da <menu+0x286>
		if (menuSayac <= 1) {
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <menu+0x24c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d802      	bhi.n	80015ca <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <menu+0x24c>)
 80015c6:	2224      	movs	r2, #36	@ 0x24
 80015c8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015ca:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <menu+0x24c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b33      	ldr	r3, [pc, #204]	@ (80016a0 <menu+0x24c>)
 80015d4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <menu+0x24c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b14      	cmp	r3, #20
 80015dc:	d106      	bne.n	80015ec <menu+0x198>
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <menu+0x250>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <menu+0x198>
			menuSayac = 17;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <menu+0x24c>)
 80015e8:	2211      	movs	r2, #17
 80015ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <menu+0x24c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d106      	bne.n	8001602 <menu+0x1ae>
 80015f4:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <menu+0x254>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <menu+0x1ae>
			menuSayac = 7;
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <menu+0x24c>)
 80015fe:	2207      	movs	r2, #7
 8001600:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <menu+0x24c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d106      	bne.n	8001618 <menu+0x1c4>
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <menu+0x254>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <menu+0x1c4>
			menuSayac = 12;
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <menu+0x24c>)
 8001614:	220c      	movs	r2, #12
 8001616:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <menu+0x24c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d106      	bne.n	800162e <menu+0x1da>
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <menu+0x254>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <menu+0x1da>
			menuSayac = 8;
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <menu+0x24c>)
 800162a:	2208      	movs	r2, #8
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <menu+0x24c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d10a      	bne.n	800164c <menu+0x1f8>
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <menu+0x258>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <menu+0x1f2>
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <menu+0x258>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d102      	bne.n	800164c <menu+0x1f8>
			menuSayac = 9;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <menu+0x24c>)
 8001648:	2209      	movs	r2, #9
 800164a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <menu+0x24c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d10a      	bne.n	800166a <menu+0x216>
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <menu+0x25c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <menu+0x210>
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <menu+0x25c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <menu+0x216>
			menuSayac = 11;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <menu+0x24c>)
 8001666:	220b      	movs	r2, #11
 8001668:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <menu+0x24c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d106      	bne.n	8001680 <menu+0x22c>
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <menu+0x260>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <menu+0x22c>
			menuSayac = 14;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <menu+0x24c>)
 800167c:	220e      	movs	r2, #14
 800167e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <menu+0x24c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b19      	cmp	r3, #25
 8001686:	d11b      	bne.n	80016c0 <menu+0x26c>
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <menu+0x250>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d117      	bne.n	80016c0 <menu+0x26c>
			menuSayac = 23;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <menu+0x24c>)
 8001692:	2217      	movs	r2, #23
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e013      	b.n	80016c0 <menu+0x26c>
 8001698:	40010800 	.word	0x40010800
 800169c:	200016ef 	.word	0x200016ef
 80016a0:	200016c0 	.word	0x200016c0
 80016a4:	200016cf 	.word	0x200016cf
 80016a8:	200016c8 	.word	0x200016c8
 80016ac:	200016c9 	.word	0x200016c9
 80016b0:	200016ca 	.word	0x200016ca
 80016b4:	200016cb 	.word	0x200016cb
 80016b8:	200016eb 	.word	0x200016eb
 80016bc:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80016c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001984 <menu+0x530>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b22      	cmp	r3, #34	@ 0x22
 80016c6:	d106      	bne.n	80016d6 <menu+0x282>
 80016c8:	4baf      	ldr	r3, [pc, #700]	@ (8001988 <menu+0x534>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <menu+0x282>
			menuSayac = 32;
 80016d0:	4bac      	ldr	r3, [pc, #688]	@ (8001984 <menu+0x530>)
 80016d2:	2220      	movs	r2, #32
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016d6:	f002 fc03 	bl	8003ee0 <bekle>
	}

	if (menuSayac == 0) {
 80016da:	4baa      	ldr	r3, [pc, #680]	@ (8001984 <menu+0x530>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80016e2:	4aaa      	ldr	r2, [pc, #680]	@ (800198c <menu+0x538>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2001      	movs	r0, #1
 80016e8:	f007 fdaa 	bl	8009240 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80016ec:	4aa8      	ldr	r2, [pc, #672]	@ (8001990 <menu+0x53c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f007 fda5 	bl	8009240 <lcd_print>
	}

	if (menuSayac == 1) {
 80016f6:	4ba3      	ldr	r3, [pc, #652]	@ (8001984 <menu+0x530>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 81f4 	bne.w	8001ae8 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001700:	4aa4      	ldr	r2, [pc, #656]	@ (8001994 <menu+0x540>)
 8001702:	2101      	movs	r1, #1
 8001704:	2001      	movs	r0, #1
 8001706:	f007 fd9b 	bl	8009240 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800170a:	4ba3      	ldr	r3, [pc, #652]	@ (8001998 <menu+0x544>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001712:	4aa2      	ldr	r2, [pc, #648]	@ (800199c <menu+0x548>)
 8001714:	2101      	movs	r1, #1
 8001716:	2002      	movs	r0, #2
 8001718:	f007 fd92 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "   ");
 800171c:	4aa0      	ldr	r2, [pc, #640]	@ (80019a0 <menu+0x54c>)
 800171e:	210f      	movs	r1, #15
 8001720:	2002      	movs	r0, #2
 8001722:	f007 fd8d 	bl	8009240 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001726:	4b9f      	ldr	r3, [pc, #636]	@ (80019a4 <menu+0x550>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	220a      	movs	r2, #10
 800172c:	499e      	ldr	r1, [pc, #632]	@ (80019a8 <menu+0x554>)
 800172e:	4618      	mov	r0, r3
 8001730:	f00c fc52 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 8001734:	4a9c      	ldr	r2, [pc, #624]	@ (80019a8 <menu+0x554>)
 8001736:	210e      	movs	r1, #14
 8001738:	2002      	movs	r0, #2
 800173a:	f007 fd81 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800173e:	4b96      	ldr	r3, [pc, #600]	@ (8001998 <menu+0x544>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d115      	bne.n	8001772 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001746:	4a99      	ldr	r2, [pc, #612]	@ (80019ac <menu+0x558>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f007 fd78 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 8001750:	4a97      	ldr	r2, [pc, #604]	@ (80019b0 <menu+0x55c>)
 8001752:	210f      	movs	r1, #15
 8001754:	2002      	movs	r0, #2
 8001756:	f007 fd73 	bl	8009240 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800175a:	4b96      	ldr	r3, [pc, #600]	@ (80019b4 <menu+0x560>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	220a      	movs	r2, #10
 8001760:	4991      	ldr	r1, [pc, #580]	@ (80019a8 <menu+0x554>)
 8001762:	4618      	mov	r0, r3
 8001764:	f00c fc38 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 8001768:	4a8f      	ldr	r2, [pc, #572]	@ (80019a8 <menu+0x554>)
 800176a:	210e      	movs	r1, #14
 800176c:	2002      	movs	r0, #2
 800176e:	f007 fd67 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001772:	4b89      	ldr	r3, [pc, #548]	@ (8001998 <menu+0x544>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d115      	bne.n	80017a6 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 800177a:	4a8f      	ldr	r2, [pc, #572]	@ (80019b8 <menu+0x564>)
 800177c:	2101      	movs	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f007 fd5e 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 8001784:	4a8a      	ldr	r2, [pc, #552]	@ (80019b0 <menu+0x55c>)
 8001786:	210f      	movs	r1, #15
 8001788:	2002      	movs	r0, #2
 800178a:	f007 fd59 	bl	8009240 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800178e:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <menu+0x568>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	220a      	movs	r2, #10
 8001794:	4984      	ldr	r1, [pc, #528]	@ (80019a8 <menu+0x554>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00c fc1e 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 800179c:	4a82      	ldr	r2, [pc, #520]	@ (80019a8 <menu+0x554>)
 800179e:	210e      	movs	r1, #14
 80017a0:	2002      	movs	r0, #2
 80017a2:	f007 fd4d 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80017a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <menu+0x544>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d115      	bne.n	80017da <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80017ae:	4a84      	ldr	r2, [pc, #528]	@ (80019c0 <menu+0x56c>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	2002      	movs	r0, #2
 80017b4:	f007 fd44 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 80017b8:	4a7d      	ldr	r2, [pc, #500]	@ (80019b0 <menu+0x55c>)
 80017ba:	210f      	movs	r1, #15
 80017bc:	2002      	movs	r0, #2
 80017be:	f007 fd3f 	bl	8009240 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017c2:	4b80      	ldr	r3, [pc, #512]	@ (80019c4 <menu+0x570>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	220a      	movs	r2, #10
 80017c8:	4977      	ldr	r1, [pc, #476]	@ (80019a8 <menu+0x554>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00c fc04 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 80017d0:	4a75      	ldr	r2, [pc, #468]	@ (80019a8 <menu+0x554>)
 80017d2:	210e      	movs	r1, #14
 80017d4:	2002      	movs	r0, #2
 80017d6:	f007 fd33 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017da:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <menu+0x544>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d115      	bne.n	800180e <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80017e2:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <menu+0x574>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2002      	movs	r0, #2
 80017e8:	f007 fd2a 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 80017ec:	4a70      	ldr	r2, [pc, #448]	@ (80019b0 <menu+0x55c>)
 80017ee:	210f      	movs	r1, #15
 80017f0:	2002      	movs	r0, #2
 80017f2:	f007 fd25 	bl	8009240 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f6:	4b75      	ldr	r3, [pc, #468]	@ (80019cc <menu+0x578>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	220a      	movs	r2, #10
 80017fc:	496a      	ldr	r1, [pc, #424]	@ (80019a8 <menu+0x554>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f00c fbea 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 8001804:	4a68      	ldr	r2, [pc, #416]	@ (80019a8 <menu+0x554>)
 8001806:	210e      	movs	r1, #14
 8001808:	2002      	movs	r0, #2
 800180a:	f007 fd19 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800180e:	4b62      	ldr	r3, [pc, #392]	@ (8001998 <menu+0x544>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d115      	bne.n	8001842 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <menu+0x57c>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f007 fd10 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 8001820:	4a63      	ldr	r2, [pc, #396]	@ (80019b0 <menu+0x55c>)
 8001822:	210f      	movs	r1, #15
 8001824:	2002      	movs	r0, #2
 8001826:	f007 fd0b 	bl	8009240 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800182a:	4b6a      	ldr	r3, [pc, #424]	@ (80019d4 <menu+0x580>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	220a      	movs	r2, #10
 8001830:	495d      	ldr	r1, [pc, #372]	@ (80019a8 <menu+0x554>)
 8001832:	4618      	mov	r0, r3
 8001834:	f00c fbd0 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 8001838:	4a5b      	ldr	r2, [pc, #364]	@ (80019a8 <menu+0x554>)
 800183a:	210e      	movs	r1, #14
 800183c:	2002      	movs	r0, #2
 800183e:	f007 fcff 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001842:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <menu+0x544>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b06      	cmp	r3, #6
 8001848:	d115      	bne.n	8001876 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800184a:	4a63      	ldr	r2, [pc, #396]	@ (80019d8 <menu+0x584>)
 800184c:	2101      	movs	r1, #1
 800184e:	2002      	movs	r0, #2
 8001850:	f007 fcf6 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 8001854:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <menu+0x55c>)
 8001856:	210f      	movs	r1, #15
 8001858:	2002      	movs	r0, #2
 800185a:	f007 fcf1 	bl	8009240 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800185e:	4b5f      	ldr	r3, [pc, #380]	@ (80019dc <menu+0x588>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	220a      	movs	r2, #10
 8001864:	4950      	ldr	r1, [pc, #320]	@ (80019a8 <menu+0x554>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00c fbb6 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <menu+0x554>)
 800186e:	210e      	movs	r1, #14
 8001870:	2002      	movs	r0, #2
 8001872:	f007 fce5 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001876:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <menu+0x544>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b07      	cmp	r3, #7
 800187c:	d115      	bne.n	80018aa <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 800187e:	4a58      	ldr	r2, [pc, #352]	@ (80019e0 <menu+0x58c>)
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f007 fcdc 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 8001888:	4a49      	ldr	r2, [pc, #292]	@ (80019b0 <menu+0x55c>)
 800188a:	210f      	movs	r1, #15
 800188c:	2002      	movs	r0, #2
 800188e:	f007 fcd7 	bl	8009240 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001892:	4b54      	ldr	r3, [pc, #336]	@ (80019e4 <menu+0x590>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220a      	movs	r2, #10
 8001898:	4943      	ldr	r1, [pc, #268]	@ (80019a8 <menu+0x554>)
 800189a:	4618      	mov	r0, r3
 800189c:	f00c fb9c 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 80018a0:	4a41      	ldr	r2, [pc, #260]	@ (80019a8 <menu+0x554>)
 80018a2:	210e      	movs	r1, #14
 80018a4:	2002      	movs	r0, #2
 80018a6:	f007 fccb 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <menu+0x544>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d115      	bne.n	80018de <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <menu+0x594>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	2002      	movs	r0, #2
 80018b8:	f007 fcc2 	bl	8009240 <lcd_print>
			lcd_print(2, 15, "  ");
 80018bc:	4a3c      	ldr	r2, [pc, #240]	@ (80019b0 <menu+0x55c>)
 80018be:	210f      	movs	r1, #15
 80018c0:	2002      	movs	r0, #2
 80018c2:	f007 fcbd 	bl	8009240 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80018c6:	4b49      	ldr	r3, [pc, #292]	@ (80019ec <menu+0x598>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	220a      	movs	r2, #10
 80018cc:	4936      	ldr	r1, [pc, #216]	@ (80019a8 <menu+0x554>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c fb82 	bl	800dfd8 <itoa>
			lcd_print(2, 14, snum);
 80018d4:	4a34      	ldr	r2, [pc, #208]	@ (80019a8 <menu+0x554>)
 80018d6:	210e      	movs	r1, #14
 80018d8:	2002      	movs	r0, #2
 80018da:	f007 fcb1 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <menu+0x544>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d115      	bne.n	8001912 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80018e6:	4a42      	ldr	r2, [pc, #264]	@ (80019f0 <menu+0x59c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f007 fca8 	bl	8009240 <lcd_print>
			lcd_print(2, 16, " ");
 80018f0:	4a40      	ldr	r2, [pc, #256]	@ (80019f4 <menu+0x5a0>)
 80018f2:	2110      	movs	r1, #16
 80018f4:	2002      	movs	r0, #2
 80018f6:	f007 fca3 	bl	8009240 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <menu+0x5a4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	220a      	movs	r2, #10
 8001900:	4929      	ldr	r1, [pc, #164]	@ (80019a8 <menu+0x554>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00c fb68 	bl	800dfd8 <itoa>
			lcd_print(2, 15, snum);
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <menu+0x554>)
 800190a:	210f      	movs	r1, #15
 800190c:	2002      	movs	r0, #2
 800190e:	f007 fc97 	bl	8009240 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <menu+0x544>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d104      	bne.n	8001924 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800191a:	4a38      	ldr	r2, [pc, #224]	@ (80019fc <menu+0x5a8>)
 800191c:	2101      	movs	r1, #1
 800191e:	2002      	movs	r0, #2
 8001920:	f007 fc8e 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001924:	2102      	movs	r1, #2
 8001926:	4836      	ldr	r0, [pc, #216]	@ (8001a00 <menu+0x5ac>)
 8001928:	f008 ffde 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d119      	bne.n	8001966 <menu+0x512>
 8001932:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <menu+0x5b0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <menu+0x512>
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <menu+0x5b4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10e      	bne.n	8001966 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <menu+0x544>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <menu+0x544>)
 8001952:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <menu+0x544>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b0a      	cmp	r3, #10
 800195a:	d902      	bls.n	8001962 <menu+0x50e>
				hataGostermeSirasi = 0;
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <menu+0x544>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001962:	f002 fabd 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001966:	2104      	movs	r1, #4
 8001968:	4825      	ldr	r0, [pc, #148]	@ (8001a00 <menu+0x5ac>)
 800196a:	f008 ffbd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b01      	cmp	r3, #1
 8001972:	d15e      	bne.n	8001a32 <menu+0x5de>
 8001974:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <menu+0x5b0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d057      	beq.n	8001a32 <menu+0x5de>
 8001982:	e043      	b.n	8001a0c <menu+0x5b8>
 8001984:	200016c0 	.word	0x200016c0
 8001988:	200016eb 	.word	0x200016eb
 800198c:	20001824 	.word	0x20001824
 8001990:	20001838 	.word	0x20001838
 8001994:	2000184c 	.word	0x2000184c
 8001998:	200016c2 	.word	0x200016c2
 800199c:	20001860 	.word	0x20001860
 80019a0:	0800edd4 	.word	0x0800edd4
 80019a4:	200016e1 	.word	0x200016e1
 80019a8:	2000105c 	.word	0x2000105c
 80019ac:	20001874 	.word	0x20001874
 80019b0:	0800edd8 	.word	0x0800edd8
 80019b4:	200016e2 	.word	0x200016e2
 80019b8:	20001888 	.word	0x20001888
 80019bc:	200016e3 	.word	0x200016e3
 80019c0:	2000189c 	.word	0x2000189c
 80019c4:	200016e4 	.word	0x200016e4
 80019c8:	200018b0 	.word	0x200018b0
 80019cc:	200016e5 	.word	0x200016e5
 80019d0:	200018c4 	.word	0x200018c4
 80019d4:	200016e6 	.word	0x200016e6
 80019d8:	200018d8 	.word	0x200018d8
 80019dc:	200016e7 	.word	0x200016e7
 80019e0:	200018ec 	.word	0x200018ec
 80019e4:	200016e8 	.word	0x200016e8
 80019e8:	20001900 	.word	0x20001900
 80019ec:	200016e9 	.word	0x200016e9
 80019f0:	20001914 	.word	0x20001914
 80019f4:	0800eddc 	.word	0x0800eddc
 80019f8:	200016ea 	.word	0x200016ea
 80019fc:	20001928 	.word	0x20001928
 8001a00:	40010800 	.word	0x40010800
 8001a04:	200016ef 	.word	0x200016ef
 8001a08:	200016cf 	.word	0x200016cf
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c38 <menu+0x7e4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10e      	bne.n	8001a32 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a14:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <menu+0x7e8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b87      	ldr	r3, [pc, #540]	@ (8001c3c <menu+0x7e8>)
 8001a1e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a20:	4b86      	ldr	r3, [pc, #536]	@ (8001c3c <menu+0x7e8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b0b      	cmp	r3, #11
 8001a26:	d902      	bls.n	8001a2e <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001a28:	4b84      	ldr	r3, [pc, #528]	@ (8001c3c <menu+0x7e8>)
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a2e:	f002 fa57 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a32:	2108      	movs	r1, #8
 8001a34:	4882      	ldr	r0, [pc, #520]	@ (8001c40 <menu+0x7ec>)
 8001a36:	f008 ff57 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d153      	bne.n	8001ae8 <menu+0x694>
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <menu+0x7f0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f083 0301 	eor.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04c      	beq.n	8001ae8 <menu+0x694>
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c3c <menu+0x7e8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	d148      	bne.n	8001ae8 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <menu+0x7f4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c4c <menu+0x7f8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a64:	4b7a      	ldr	r3, [pc, #488]	@ (8001c50 <menu+0x7fc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <menu+0x7f8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a72:	4b78      	ldr	r3, [pc, #480]	@ (8001c54 <menu+0x800>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <menu+0x7f8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <menu+0x804>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <menu+0x7f8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <menu+0x808>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <menu+0x7f8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a9c:	4b70      	ldr	r3, [pc, #448]	@ (8001c60 <menu+0x80c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <menu+0x7f8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8001c64 <menu+0x810>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <menu+0x7f8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c68 <menu+0x814>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <menu+0x7f8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001ac6:	4b69      	ldr	r3, [pc, #420]	@ (8001c6c <menu+0x818>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <menu+0x7f8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001ad4:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <menu+0x81c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	4b5c      	ldr	r3, [pc, #368]	@ (8001c4c <menu+0x7f8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001ae2:	4b64      	ldr	r3, [pc, #400]	@ (8001c74 <menu+0x820>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ae8:	4b63      	ldr	r3, [pc, #396]	@ (8001c78 <menu+0x824>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	f040 808e 	bne.w	8001c0e <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001af2:	4a62      	ldr	r2, [pc, #392]	@ (8001c7c <menu+0x828>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	2001      	movs	r0, #1
 8001af8:	f007 fba2 	bl	8009240 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001afc:	4b4e      	ldr	r3, [pc, #312]	@ (8001c38 <menu+0x7e4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d003      	beq.n	8001b0c <menu+0x6b8>
 8001b04:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <menu+0x7e4>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d104      	bne.n	8001b16 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <menu+0x82c>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f007 fb95 	bl	8009240 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b16:	4b5b      	ldr	r3, [pc, #364]	@ (8001c84 <menu+0x830>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <menu+0x6dc>
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <menu+0x7e4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001b26:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <menu+0x834>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f007 fb88 	bl	8009240 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <menu+0x830>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <menu+0x6f6>
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <menu+0x7e4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <menu+0x838>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f007 fb7b 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	483c      	ldr	r0, [pc, #240]	@ (8001c40 <menu+0x7ec>)
 8001b4e:	f008 fecb 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d119      	bne.n	8001b8c <menu+0x738>
 8001b58:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <menu+0x7f0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <menu+0x738>
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <menu+0x7e4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001b6e:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <menu+0x830>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <menu+0x830>)
 8001b78:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b7a:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <menu+0x830>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d902      	bls.n	8001b88 <menu+0x734>
				calismaSekli = 0;
 8001b82:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <menu+0x830>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b88:	f002 f9aa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	482c      	ldr	r0, [pc, #176]	@ (8001c40 <menu+0x7ec>)
 8001b90:	f008 feaa 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d119      	bne.n	8001bce <menu+0x77a>
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <menu+0x7f0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <menu+0x77a>
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <menu+0x7e4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10e      	bne.n	8001bce <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <menu+0x830>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <menu+0x830>)
 8001bba:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <menu+0x830>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <menu+0x776>
	    		calismaSekli = 1;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <menu+0x830>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bca:	f002 f989 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bce:	2108      	movs	r1, #8
 8001bd0:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <menu+0x7ec>)
 8001bd2:	f008 fe89 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d118      	bne.n	8001c0e <menu+0x7ba>
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <menu+0x7f0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001bea:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <menu+0x830>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <menu+0x7f8>)
 8001bf0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <menu+0x830>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d106      	bne.n	8001c08 <menu+0x7b4>
				altLimit = 1;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <menu+0x83c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c00:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <menu+0x83c>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <menu+0x7f8>)
 8001c06:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <menu+0x820>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <menu+0x824>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	f040 809c 	bne.w	8001d50 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <menu+0x840>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f007 fb0f 	bl	8009240 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <menu+0x844>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d13a      	bne.n	8001ca0 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <menu+0x848>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f007 fb06 	bl	8009240 <lcd_print>
 8001c34:	e03d      	b.n	8001cb2 <menu+0x85e>
 8001c36:	bf00      	nop
 8001c38:	200016cf 	.word	0x200016cf
 8001c3c:	200016c2 	.word	0x200016c2
 8001c40:	40010800 	.word	0x40010800
 8001c44:	200016ef 	.word	0x200016ef
 8001c48:	200016e1 	.word	0x200016e1
 8001c4c:	20000fec 	.word	0x20000fec
 8001c50:	200016e2 	.word	0x200016e2
 8001c54:	200016e3 	.word	0x200016e3
 8001c58:	200016e4 	.word	0x200016e4
 8001c5c:	200016e5 	.word	0x200016e5
 8001c60:	200016e6 	.word	0x200016e6
 8001c64:	200016e7 	.word	0x200016e7
 8001c68:	200016e8 	.word	0x200016e8
 8001c6c:	200016e9 	.word	0x200016e9
 8001c70:	200016ea 	.word	0x200016ea
 8001c74:	200016ec 	.word	0x200016ec
 8001c78:	200016c0 	.word	0x200016c0
 8001c7c:	2000193c 	.word	0x2000193c
 8001c80:	20001950 	.word	0x20001950
 8001c84:	200016c1 	.word	0x200016c1
 8001c88:	20001964 	.word	0x20001964
 8001c8c:	20001978 	.word	0x20001978
 8001c90:	200016c6 	.word	0x200016c6
 8001c94:	2000198c 	.word	0x2000198c
 8001c98:	200016c4 	.word	0x200016c4
 8001c9c:	200019a0 	.word	0x200019a0
		} else if(emniyetCercevesi == 1) {
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e50 <menu+0x9fc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d104      	bne.n	8001cb2 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <menu+0xa00>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	2002      	movs	r0, #2
 8001cae:	f007 fac7 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4868      	ldr	r0, [pc, #416]	@ (8001e58 <menu+0xa04>)
 8001cb6:	f008 fe17 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d115      	bne.n	8001cec <menu+0x898>
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <menu+0xa08>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00e      	beq.n	8001cec <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001cce:	4b60      	ldr	r3, [pc, #384]	@ (8001e50 <menu+0x9fc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e50 <menu+0x9fc>)
 8001cd8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cda:	4b5d      	ldr	r3, [pc, #372]	@ (8001e50 <menu+0x9fc>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d902      	bls.n	8001ce8 <menu+0x894>
				emniyetCercevesi = 0;
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <menu+0x9fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ce8:	f002 f8fa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cec:	2104      	movs	r1, #4
 8001cee:	485a      	ldr	r0, [pc, #360]	@ (8001e58 <menu+0xa04>)
 8001cf0:	f008 fdfa 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d115      	bne.n	8001d26 <menu+0x8d2>
 8001cfa:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <menu+0xa08>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d08:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <menu+0x9fc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <menu+0x9fc>)
 8001d12:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d14:	4b4e      	ldr	r3, [pc, #312]	@ (8001e50 <menu+0x9fc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <menu+0x9fc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d22:	f002 f8dd 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d26:	2108      	movs	r1, #8
 8001d28:	484b      	ldr	r0, [pc, #300]	@ (8001e58 <menu+0xa04>)
 8001d2a:	f008 fddd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <menu+0x8fc>
 8001d34:	4b49      	ldr	r3, [pc, #292]	@ (8001e5c <menu+0xa08>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	f083 0301 	eor.w	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <menu+0x9fc>)
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <menu+0xa0c>)
 8001d48:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <menu+0xa10>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d50:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <menu+0xa14>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d166      	bne.n	8001e26 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001d58:	4a44      	ldr	r2, [pc, #272]	@ (8001e6c <menu+0xa18>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f007 fa6f 	bl	8009240 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <menu+0xa1c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001d6a:	4a42      	ldr	r2, [pc, #264]	@ (8001e74 <menu+0xa20>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f007 fa66 	bl	8009240 <lcd_print>
 8001d74:	e008      	b.n	8001d88 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001d76:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <menu+0xa1c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d104      	bne.n	8001d88 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <menu+0xa24>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f007 fa5c 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4833      	ldr	r0, [pc, #204]	@ (8001e58 <menu+0xa04>)
 8001d8c:	f008 fdac 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d115      	bne.n	8001dc2 <menu+0x96e>
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <menu+0xa08>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f083 0301 	eor.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00e      	beq.n	8001dc2 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001da4:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <menu+0xa1c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <menu+0xa1c>)
 8001dae:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001db0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <menu+0xa1c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d902      	bls.n	8001dbe <menu+0x96a>
				yavaslamaLimit = 0;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <menu+0xa1c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dbe:	f002 f88f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4824      	ldr	r0, [pc, #144]	@ (8001e58 <menu+0xa04>)
 8001dc6:	f008 fd8f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d115      	bne.n	8001dfc <menu+0x9a8>
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <menu+0xa08>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <menu+0xa1c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <menu+0xa1c>)
 8001de8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <menu+0xa1c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <menu+0xa1c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001df8:	f002 f872 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dfc:	2108      	movs	r1, #8
 8001dfe:	4816      	ldr	r0, [pc, #88]	@ (8001e58 <menu+0xa04>)
 8001e00:	f008 fd72 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10d      	bne.n	8001e26 <menu+0x9d2>
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <menu+0xa08>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <menu+0xa1c>)
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <menu+0xa0c>)
 8001e1e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <menu+0xa10>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <menu+0xa14>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	f040 80aa 	bne.w	8001f84 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <menu+0xa28>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2001      	movs	r0, #1
 8001e36:	f007 fa03 	bl	8009240 <lcd_print>

		if(altLimit == 0) {
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <menu+0xa2c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d120      	bne.n	8001e84 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001e42:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <menu+0xa20>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2002      	movs	r0, #2
 8001e48:	f007 f9fa 	bl	8009240 <lcd_print>
 8001e4c:	e023      	b.n	8001e96 <menu+0xa42>
 8001e4e:	bf00      	nop
 8001e50:	200016c4 	.word	0x200016c4
 8001e54:	200000ec 	.word	0x200000ec
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	200016ef 	.word	0x200016ef
 8001e60:	20000fec 	.word	0x20000fec
 8001e64:	200016ec 	.word	0x200016ec
 8001e68:	200016c0 	.word	0x200016c0
 8001e6c:	200019c8 	.word	0x200019c8
 8001e70:	200016c5 	.word	0x200016c5
 8001e74:	200019a0 	.word	0x200019a0
 8001e78:	200019b4 	.word	0x200019b4
 8001e7c:	200019dc 	.word	0x200019dc
 8001e80:	200016c6 	.word	0x200016c6
		} else if(altLimit == 1) {
 8001e84:	4b89      	ldr	r3, [pc, #548]	@ (80020ac <menu+0xc58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001e8c:	4a88      	ldr	r2, [pc, #544]	@ (80020b0 <menu+0xc5c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f007 f9d5 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e96:	2102      	movs	r1, #2
 8001e98:	4886      	ldr	r0, [pc, #536]	@ (80020b4 <menu+0xc60>)
 8001e9a:	f008 fd25 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d119      	bne.n	8001ed8 <menu+0xa84>
 8001ea4:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <menu+0xc64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <menu+0xa84>
 8001eb2:	4b82      	ldr	r3, [pc, #520]	@ (80020bc <menu+0xc68>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <menu+0xa84>
			altLimit = altLimit + 1;
 8001eba:	4b7c      	ldr	r3, [pc, #496]	@ (80020ac <menu+0xc58>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80020ac <menu+0xc58>)
 8001ec4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ec6:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <menu+0xc58>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d902      	bls.n	8001ed4 <menu+0xa80>
				altLimit = 0;
 8001ece:	4b77      	ldr	r3, [pc, #476]	@ (80020ac <menu+0xc58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ed4:	f002 f804 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4876      	ldr	r0, [pc, #472]	@ (80020b4 <menu+0xc60>)
 8001edc:	f008 fd04 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d119      	bne.n	8001f1a <menu+0xac6>
 8001ee6:	4b74      	ldr	r3, [pc, #464]	@ (80020b8 <menu+0xc64>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <menu+0xac6>
 8001ef4:	4b71      	ldr	r3, [pc, #452]	@ (80020bc <menu+0xc68>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10e      	bne.n	8001f1a <menu+0xac6>
			altLimit = altLimit - 1;
 8001efc:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <menu+0xc58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b69      	ldr	r3, [pc, #420]	@ (80020ac <menu+0xc58>)
 8001f06:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f08:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <menu+0xc58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <menu+0xac2>
		   		altLimit = 1;
 8001f10:	4b66      	ldr	r3, [pc, #408]	@ (80020ac <menu+0xc58>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f16:	f001 ffe3 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	4865      	ldr	r0, [pc, #404]	@ (80020b4 <menu+0xc60>)
 8001f1e:	f008 fce3 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d12d      	bne.n	8001f84 <menu+0xb30>
 8001f28:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <menu+0xc64>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d026      	beq.n	8001f84 <menu+0xb30>
			eepromData[5] = altLimit;
 8001f36:	4b5d      	ldr	r3, [pc, #372]	@ (80020ac <menu+0xc58>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <menu+0xc6c>)
 8001f3c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <menu+0xc58>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d110      	bne.n	8001f68 <menu+0xb14>
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <menu+0xc70>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <menu+0xb02>
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <menu+0xc70>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d108      	bne.n	8001f68 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001f56:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <menu+0xc70>)
 8001f58:	2203      	movs	r2, #3
 8001f5a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f5c:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <menu+0xc70>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <menu+0xc6c>)
 8001f62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001f66:	e00a      	b.n	8001f7e <menu+0xb2a>
			} else if(altLimit == 0) {
 8001f68:	4b50      	ldr	r3, [pc, #320]	@ (80020ac <menu+0xc58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <menu+0xb2a>
				platformSilindirTipi = 0;
 8001f70:	4b55      	ldr	r3, [pc, #340]	@ (80020c8 <menu+0xc74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <menu+0xc74>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <menu+0xc6c>)
 8001f7c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <menu+0xc78>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f84:	4b52      	ldr	r3, [pc, #328]	@ (80020d0 <menu+0xc7c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d166      	bne.n	800205a <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001f8c:	4a51      	ldr	r2, [pc, #324]	@ (80020d4 <menu+0xc80>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2001      	movs	r0, #1
 8001f92:	f007 f955 	bl	8009240 <lcd_print>

		if(basincSalteri == 0) {
 8001f96:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <menu+0xc84>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001f9e:	4a4f      	ldr	r2, [pc, #316]	@ (80020dc <menu+0xc88>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f007 f94c 	bl	8009240 <lcd_print>
 8001fa8:	e008      	b.n	8001fbc <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001faa:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <menu+0xc84>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d104      	bne.n	8001fbc <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80020b0 <menu+0xc5c>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f007 f942 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	483d      	ldr	r0, [pc, #244]	@ (80020b4 <menu+0xc60>)
 8001fc0:	f008 fc92 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d115      	bne.n	8001ff6 <menu+0xba2>
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <menu+0xc64>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00e      	beq.n	8001ff6 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <menu+0xc84>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <menu+0xc84>)
 8001fe2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <menu+0xc84>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d902      	bls.n	8001ff2 <menu+0xb9e>
				basincSalteri = 0;
 8001fec:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <menu+0xc84>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ff2:	f001 ff75 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	482e      	ldr	r0, [pc, #184]	@ (80020b4 <menu+0xc60>)
 8001ffa:	f008 fc75 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d115      	bne.n	8002030 <menu+0xbdc>
 8002004:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <menu+0xc64>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <menu+0xc84>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3b01      	subs	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <menu+0xc84>)
 800201c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800201e:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <menu+0xc84>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <menu+0xbd8>
		   		basincSalteri = 1;
 8002026:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <menu+0xc84>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800202c:	f001 ff58 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002030:	2108      	movs	r1, #8
 8002032:	4820      	ldr	r0, [pc, #128]	@ (80020b4 <menu+0xc60>)
 8002034:	f008 fc58 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10d      	bne.n	800205a <menu+0xc06>
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <menu+0xc64>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <menu+0xc06>
			eepromData[6] = basincSalteri;
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <menu+0xc84>)
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <menu+0xc6c>)
 8002052:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <menu+0xc78>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <menu+0xc7c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b07      	cmp	r3, #7
 8002060:	f040 80a9 	bne.w	80021b6 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <menu+0xc8c>)
 8002066:	2101      	movs	r1, #1
 8002068:	2001      	movs	r0, #1
 800206a:	f007 f8e9 	bl	8009240 <lcd_print>

		if(kapiSecimleri == 0) {
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <menu+0xc90>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8002076:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <menu+0xc88>)
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f007 f8e0 	bl	8009240 <lcd_print>
 8002080:	e03f      	b.n	8002102 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <menu+0xc90>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 800208a:	4a17      	ldr	r2, [pc, #92]	@ (80020e8 <menu+0xc94>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f007 f8d6 	bl	8009240 <lcd_print>
 8002094:	e035      	b.n	8002102 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8002096:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <menu+0xc90>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d128      	bne.n	80020f0 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 800209e:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <menu+0xc98>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2002      	movs	r0, #2
 80020a4:	f007 f8cc 	bl	8009240 <lcd_print>
 80020a8:	e02b      	b.n	8002102 <menu+0xcae>
 80020aa:	bf00      	nop
 80020ac:	200016c6 	.word	0x200016c6
 80020b0:	200019b4 	.word	0x200019b4
 80020b4:	40010800 	.word	0x40010800
 80020b8:	200016ef 	.word	0x200016ef
 80020bc:	200016c1 	.word	0x200016c1
 80020c0:	20000fec 	.word	0x20000fec
 80020c4:	200016cd 	.word	0x200016cd
 80020c8:	200016d3 	.word	0x200016d3
 80020cc:	200016ec 	.word	0x200016ec
 80020d0:	200016c0 	.word	0x200016c0
 80020d4:	200019f0 	.word	0x200019f0
 80020d8:	200016c7 	.word	0x200016c7
 80020dc:	200019a0 	.word	0x200019a0
 80020e0:	20001a04 	.word	0x20001a04
 80020e4:	200016c8 	.word	0x200016c8
 80020e8:	20001a18 	.word	0x20001a18
 80020ec:	20001a2c 	.word	0x20001a2c
		} else if(kapiSecimleri == 3) {
 80020f0:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <menu+0xe78>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d104      	bne.n	8002102 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 80020f8:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <menu+0xe7c>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2002      	movs	r0, #2
 80020fe:	f007 f89f 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002102:	2102      	movs	r1, #2
 8002104:	4873      	ldr	r0, [pc, #460]	@ (80022d4 <menu+0xe80>)
 8002106:	f008 fbef 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d115      	bne.n	800213c <menu+0xce8>
 8002110:	4b71      	ldr	r3, [pc, #452]	@ (80022d8 <menu+0xe84>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00e      	beq.n	800213c <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 800211e:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <menu+0xe78>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b69      	ldr	r3, [pc, #420]	@ (80022cc <menu+0xe78>)
 8002128:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800212a:	4b68      	ldr	r3, [pc, #416]	@ (80022cc <menu+0xe78>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d902      	bls.n	8002138 <menu+0xce4>
				kapiSecimleri = 0;
 8002132:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <menu+0xe78>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002138:	f001 fed2 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800213c:	2104      	movs	r1, #4
 800213e:	4865      	ldr	r0, [pc, #404]	@ (80022d4 <menu+0xe80>)
 8002140:	f008 fbd2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d115      	bne.n	8002176 <menu+0xd22>
 800214a:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <menu+0xe84>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002158:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <menu+0xe78>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <menu+0xe78>)
 8002162:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002164:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <menu+0xe78>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d902      	bls.n	8002172 <menu+0xd1e>
		   		kapiSecimleri = 3;
 800216c:	4b57      	ldr	r3, [pc, #348]	@ (80022cc <menu+0xe78>)
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002172:	f001 feb5 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002176:	2108      	movs	r1, #8
 8002178:	4856      	ldr	r0, [pc, #344]	@ (80022d4 <menu+0xe80>)
 800217a:	f008 fbb5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d118      	bne.n	80021b6 <menu+0xd62>
 8002184:	4b54      	ldr	r3, [pc, #336]	@ (80022d8 <menu+0xe84>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8002192:	4b4e      	ldr	r3, [pc, #312]	@ (80022cc <menu+0xe78>)
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	4b51      	ldr	r3, [pc, #324]	@ (80022dc <menu+0xe88>)
 8002198:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800219a:	4b4c      	ldr	r3, [pc, #304]	@ (80022cc <menu+0xe78>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <menu+0xd5c>
				altLimit = 1;
 80021a2:	4b4f      	ldr	r3, [pc, #316]	@ (80022e0 <menu+0xe8c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80021a8:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <menu+0xe8c>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <menu+0xe88>)
 80021ae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80021b0:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <menu+0xe90>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80021b6:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <menu+0xe94>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d167      	bne.n	800228e <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80021be:	4a4b      	ldr	r2, [pc, #300]	@ (80022ec <menu+0xe98>)
 80021c0:	2101      	movs	r1, #1
 80021c2:	2001      	movs	r0, #1
 80021c4:	f007 f83c 	bl	8009240 <lcd_print>

		if(kapiAcTipi == 0) {
 80021c8:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <menu+0xe9c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <menu+0xea0>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	2002      	movs	r0, #2
 80021d6:	f007 f833 	bl	8009240 <lcd_print>
 80021da:	e008      	b.n	80021ee <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80021dc:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <menu+0xe9c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80021e4:	4a44      	ldr	r2, [pc, #272]	@ (80022f8 <menu+0xea4>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2002      	movs	r0, #2
 80021ea:	f007 f829 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ee:	2102      	movs	r1, #2
 80021f0:	4838      	ldr	r0, [pc, #224]	@ (80022d4 <menu+0xe80>)
 80021f2:	f008 fb79 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d115      	bne.n	8002228 <menu+0xdd4>
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <menu+0xe84>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00e      	beq.n	8002228 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <menu+0xe9c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <menu+0xe9c>)
 8002214:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002216:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <menu+0xe9c>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d902      	bls.n	8002224 <menu+0xdd0>
				kapiAcTipi = 0;
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <menu+0xe9c>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002224:	f001 fe5c 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002228:	2104      	movs	r1, #4
 800222a:	482a      	ldr	r0, [pc, #168]	@ (80022d4 <menu+0xe80>)
 800222c:	f008 fb5c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d115      	bne.n	8002262 <menu+0xe0e>
 8002236:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <menu+0xe84>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002244:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <menu+0xe9c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <menu+0xe9c>)
 800224e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <menu+0xe9c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <menu+0xe9c>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800225e:	f001 fe3f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2108      	movs	r1, #8
 8002264:	481b      	ldr	r0, [pc, #108]	@ (80022d4 <menu+0xe80>)
 8002266:	f008 fb3f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10e      	bne.n	800228e <menu+0xe3a>
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <menu+0xe84>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 800227e:	4b1c      	ldr	r3, [pc, #112]	@ (80022f0 <menu+0xe9c>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <menu+0xe88>)
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <menu+0xe90>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <menu+0xe94>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b09      	cmp	r3, #9
 8002294:	f040 8092 	bne.w	80023bc <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <menu+0xea8>)
 800229a:	2101      	movs	r1, #1
 800229c:	2001      	movs	r0, #1
 800229e:	f006 ffcf 	bl	8009240 <lcd_print>

		if(kapi1Tip == 0) {
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <menu+0xeac>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80022aa:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <menu+0xeb0>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f006 ffc6 	bl	8009240 <lcd_print>
 80022b4:	e033      	b.n	800231e <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <menu+0xeac>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d126      	bne.n	800230c <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <menu+0xeb4>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2002      	movs	r0, #2
 80022c4:	f006 ffbc 	bl	8009240 <lcd_print>
 80022c8:	e029      	b.n	800231e <menu+0xeca>
 80022ca:	bf00      	nop
 80022cc:	200016c8 	.word	0x200016c8
 80022d0:	20001a40 	.word	0x20001a40
 80022d4:	40010800 	.word	0x40010800
 80022d8:	200016ef 	.word	0x200016ef
 80022dc:	20000fec 	.word	0x20000fec
 80022e0:	200016c6 	.word	0x200016c6
 80022e4:	200016ec 	.word	0x200016ec
 80022e8:	200016c0 	.word	0x200016c0
 80022ec:	20001a54 	.word	0x20001a54
 80022f0:	200016cc 	.word	0x200016cc
 80022f4:	20001a68 	.word	0x20001a68
 80022f8:	20001a7c 	.word	0x20001a7c
 80022fc:	20001a90 	.word	0x20001a90
 8002300:	200016c9 	.word	0x200016c9
 8002304:	20000100 	.word	0x20000100
 8002308:	20001aa4 	.word	0x20001aa4
		} else if(kapi1Tip == 2) {
 800230c:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <menu+0x1088>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d104      	bne.n	800231e <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002314:	4a72      	ldr	r2, [pc, #456]	@ (80024e0 <menu+0x108c>)
 8002316:	2101      	movs	r1, #1
 8002318:	2002      	movs	r0, #2
 800231a:	f006 ff91 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800231e:	2102      	movs	r1, #2
 8002320:	4870      	ldr	r0, [pc, #448]	@ (80024e4 <menu+0x1090>)
 8002322:	f008 fae1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	d115      	bne.n	8002358 <menu+0xf04>
 800232c:	4b6e      	ldr	r3, [pc, #440]	@ (80024e8 <menu+0x1094>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800233a:	4b68      	ldr	r3, [pc, #416]	@ (80024dc <menu+0x1088>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b66      	ldr	r3, [pc, #408]	@ (80024dc <menu+0x1088>)
 8002344:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002346:	4b65      	ldr	r3, [pc, #404]	@ (80024dc <menu+0x1088>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <menu+0xf00>
				kapi1Tip = 0;
 800234e:	4b63      	ldr	r3, [pc, #396]	@ (80024dc <menu+0x1088>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002354:	f001 fdc4 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002358:	2104      	movs	r1, #4
 800235a:	4862      	ldr	r0, [pc, #392]	@ (80024e4 <menu+0x1090>)
 800235c:	f008 fac4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d115      	bne.n	8002392 <menu+0xf3e>
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <menu+0x1094>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <menu+0x1088>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3b01      	subs	r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <menu+0x1088>)
 800237e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002380:	4b56      	ldr	r3, [pc, #344]	@ (80024dc <menu+0x1088>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d902      	bls.n	800238e <menu+0xf3a>
		   		kapi1Tip = 2;
 8002388:	4b54      	ldr	r3, [pc, #336]	@ (80024dc <menu+0x1088>)
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800238e:	f001 fda7 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002392:	2108      	movs	r1, #8
 8002394:	4853      	ldr	r0, [pc, #332]	@ (80024e4 <menu+0x1090>)
 8002396:	f008 faa7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <menu+0xf68>
 80023a0:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <menu+0x1094>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80023ae:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <menu+0x1088>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b4e      	ldr	r3, [pc, #312]	@ (80024ec <menu+0x1098>)
 80023b4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <menu+0x109c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80023bc:	4b4d      	ldr	r3, [pc, #308]	@ (80024f4 <menu+0x10a0>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d16c      	bne.n	800249e <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80023c4:	4a4c      	ldr	r2, [pc, #304]	@ (80024f8 <menu+0x10a4>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	2001      	movs	r0, #1
 80023ca:	f006 ff39 	bl	8009240 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80023ce:	4a4b      	ldr	r2, [pc, #300]	@ (80024fc <menu+0x10a8>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f006 ff34 	bl	8009240 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80023d8:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <menu+0x10ac>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	220a      	movs	r2, #10
 80023de:	4949      	ldr	r1, [pc, #292]	@ (8002504 <menu+0x10b0>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00b fdf9 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 80023e6:	4a47      	ldr	r2, [pc, #284]	@ (8002504 <menu+0x10b0>)
 80023e8:	2110      	movs	r1, #16
 80023ea:	2002      	movs	r0, #2
 80023ec:	f006 ff28 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80023f0:	2102      	movs	r1, #2
 80023f2:	483c      	ldr	r0, [pc, #240]	@ (80024e4 <menu+0x1090>)
 80023f4:	f008 fa78 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d119      	bne.n	8002432 <menu+0xfde>
 80023fe:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <menu+0x1094>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <menu+0xfde>
 800240c:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <menu+0x1088>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002414:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <menu+0x10ac>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <menu+0x10ac>)
 800241e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002420:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <menu+0x10ac>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d902      	bls.n	800242e <menu+0xfda>
				kapi1AcSure = 0;
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <menu+0x10ac>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800242e:	f001 fd57 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002432:	2104      	movs	r1, #4
 8002434:	482b      	ldr	r0, [pc, #172]	@ (80024e4 <menu+0x1090>)
 8002436:	f008 fa57 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d119      	bne.n	8002474 <menu+0x1020>
 8002440:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <menu+0x1094>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <menu+0x1020>
 800244e:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <menu+0x1088>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8002456:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <menu+0x10ac>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <menu+0x10ac>)
 8002460:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002462:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <menu+0x10ac>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <menu+0x101c>
		   		kapi1AcSure = 5;
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <menu+0x10ac>)
 800246c:	2205      	movs	r2, #5
 800246e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002470:	f001 fd36 	bl	8003ee0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002474:	2108      	movs	r1, #8
 8002476:	481b      	ldr	r0, [pc, #108]	@ (80024e4 <menu+0x1090>)
 8002478:	f008 fa36 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <menu+0x104a>
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <menu+0x1094>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <menu+0x10ac>)
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <menu+0x1098>)
 8002496:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002498:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <menu+0x109c>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <menu+0x10a0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b0b      	cmp	r3, #11
 80024a4:	f040 8090 	bne.w	80025c8 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80024a8:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <menu+0x10b4>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f006 fec7 	bl	8009240 <lcd_print>

		if(kapi2Tip == 0) {
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <menu+0x10b8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80024ba:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <menu+0x10bc>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f006 febe 	bl	8009240 <lcd_print>
 80024c4:	e031      	b.n	800252a <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <menu+0x10b8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d124      	bne.n	8002518 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <menu+0x10c0>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	2002      	movs	r0, #2
 80024d4:	f006 feb4 	bl	8009240 <lcd_print>
 80024d8:	e027      	b.n	800252a <menu+0x10d6>
 80024da:	bf00      	nop
 80024dc:	200016c9 	.word	0x200016c9
 80024e0:	20000114 	.word	0x20000114
 80024e4:	40010800 	.word	0x40010800
 80024e8:	200016ef 	.word	0x200016ef
 80024ec:	20000fec 	.word	0x20000fec
 80024f0:	200016ec 	.word	0x200016ec
 80024f4:	200016c0 	.word	0x200016c0
 80024f8:	20001ab8 	.word	0x20001ab8
 80024fc:	20001acc 	.word	0x20001acc
 8002500:	200016d9 	.word	0x200016d9
 8002504:	2000105c 	.word	0x2000105c
 8002508:	20001ae0 	.word	0x20001ae0
 800250c:	200016ca 	.word	0x200016ca
 8002510:	20000100 	.word	0x20000100
 8002514:	20001aa4 	.word	0x20001aa4
		} else if(kapi2Tip == 2) {
 8002518:	4b73      	ldr	r3, [pc, #460]	@ (80026e8 <menu+0x1294>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002520:	4a72      	ldr	r2, [pc, #456]	@ (80026ec <menu+0x1298>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f006 fe8b 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	4870      	ldr	r0, [pc, #448]	@ (80026f0 <menu+0x129c>)
 800252e:	f008 f9db 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0x1110>
 8002538:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <menu+0x12a0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002546:	4b68      	ldr	r3, [pc, #416]	@ (80026e8 <menu+0x1294>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b66      	ldr	r3, [pc, #408]	@ (80026e8 <menu+0x1294>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002552:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <menu+0x1294>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <menu+0x110c>
				kapi2Tip = 0;
 800255a:	4b63      	ldr	r3, [pc, #396]	@ (80026e8 <menu+0x1294>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f001 fcbe 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4862      	ldr	r0, [pc, #392]	@ (80026f0 <menu+0x129c>)
 8002568:	f008 f9be 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0x114a>
 8002572:	4b60      	ldr	r3, [pc, #384]	@ (80026f4 <menu+0x12a0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <menu+0x1294>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <menu+0x1294>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <menu+0x1294>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d902      	bls.n	800259a <menu+0x1146>
		   		kapi2Tip = 2;
 8002594:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <menu+0x1294>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f001 fca1 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	4853      	ldr	r0, [pc, #332]	@ (80026f0 <menu+0x129c>)
 80025a2:	f008 f9a1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0x1174>
 80025ac:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <menu+0x12a0>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <menu+0x1294>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <menu+0x12a4>)
 80025c0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80025c2:	4b4e      	ldr	r3, [pc, #312]	@ (80026fc <menu+0x12a8>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <menu+0x12ac>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d16c      	bne.n	80026aa <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <menu+0x12b0>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f006 fe33 	bl	8009240 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80025da:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <menu+0x12b4>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f006 fe2e 	bl	8009240 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80025e4:	4b49      	ldr	r3, [pc, #292]	@ (800270c <menu+0x12b8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	220a      	movs	r2, #10
 80025ea:	4949      	ldr	r1, [pc, #292]	@ (8002710 <menu+0x12bc>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00b fcf3 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 80025f2:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <menu+0x12bc>)
 80025f4:	2110      	movs	r1, #16
 80025f6:	2002      	movs	r0, #2
 80025f8:	f006 fe22 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80025fc:	2102      	movs	r1, #2
 80025fe:	483c      	ldr	r0, [pc, #240]	@ (80026f0 <menu+0x129c>)
 8002600:	f008 f972 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d119      	bne.n	800263e <menu+0x11ea>
 800260a:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <menu+0x12a0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <menu+0x11ea>
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <menu+0x1294>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10e      	bne.n	800263e <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <menu+0x12b8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b38      	ldr	r3, [pc, #224]	@ (800270c <menu+0x12b8>)
 800262a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <menu+0x12b8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d902      	bls.n	800263a <menu+0x11e6>
				kapi2AcSure = 0;
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <menu+0x12b8>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800263a:	f001 fc51 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800263e:	2104      	movs	r1, #4
 8002640:	482b      	ldr	r0, [pc, #172]	@ (80026f0 <menu+0x129c>)
 8002642:	f008 f951 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <menu+0x122c>
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <menu+0x12a0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <menu+0x122c>
 800265a:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <menu+0x1294>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <menu+0x12b8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <menu+0x12b8>)
 800266c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <menu+0x12b8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <menu+0x1228>
		   		kapi2AcSure = 5;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <menu+0x12b8>)
 8002678:	2205      	movs	r2, #5
 800267a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800267c:	f001 fc30 	bl	8003ee0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002680:	2108      	movs	r1, #8
 8002682:	481b      	ldr	r0, [pc, #108]	@ (80026f0 <menu+0x129c>)
 8002684:	f008 f930 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10d      	bne.n	80026aa <menu+0x1256>
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <menu+0x12a0>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <menu+0x12b8>)
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <menu+0x12a4>)
 80026a2:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <menu+0x12a8>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <menu+0x12ac>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b0d      	cmp	r3, #13
 80026b0:	f040 8090 	bne.w	80027d4 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <menu+0x12c0>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	2001      	movs	r0, #1
 80026ba:	f006 fdc1 	bl	8009240 <lcd_print>

		if(kapitablaTip == 0) {
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <menu+0x12c4>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <menu+0x12c8>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2002      	movs	r0, #2
 80026cc:	f006 fdb8 	bl	8009240 <lcd_print>
 80026d0:	e031      	b.n	8002736 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <menu+0x12c4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d124      	bne.n	8002724 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80026da:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <menu+0x12cc>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2002      	movs	r0, #2
 80026e0:	f006 fdae 	bl	8009240 <lcd_print>
 80026e4:	e027      	b.n	8002736 <menu+0x12e2>
 80026e6:	bf00      	nop
 80026e8:	200016ca 	.word	0x200016ca
 80026ec:	20000114 	.word	0x20000114
 80026f0:	40010800 	.word	0x40010800
 80026f4:	200016ef 	.word	0x200016ef
 80026f8:	20000fec 	.word	0x20000fec
 80026fc:	200016ec 	.word	0x200016ec
 8002700:	200016c0 	.word	0x200016c0
 8002704:	20001af4 	.word	0x20001af4
 8002708:	20001acc 	.word	0x20001acc
 800270c:	200016da 	.word	0x200016da
 8002710:	2000105c 	.word	0x2000105c
 8002714:	20001b08 	.word	0x20001b08
 8002718:	200016cb 	.word	0x200016cb
 800271c:	20000100 	.word	0x20000100
 8002720:	20001aa4 	.word	0x20001aa4
		} else if(kapitablaTip == 2) {
 8002724:	4b3f      	ldr	r3, [pc, #252]	@ (8002824 <menu+0x13d0>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d104      	bne.n	8002736 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 800272c:	4a3e      	ldr	r2, [pc, #248]	@ (8002828 <menu+0x13d4>)
 800272e:	2101      	movs	r1, #1
 8002730:	2002      	movs	r0, #2
 8002732:	f006 fd85 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002736:	2102      	movs	r1, #2
 8002738:	483c      	ldr	r0, [pc, #240]	@ (800282c <menu+0x13d8>)
 800273a:	f008 f8d5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d115      	bne.n	8002770 <menu+0x131c>
 8002744:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <menu+0x13dc>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	f083 0301 	eor.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00e      	beq.n	8002770 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002752:	4b34      	ldr	r3, [pc, #208]	@ (8002824 <menu+0x13d0>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <menu+0x13d0>)
 800275c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <menu+0x13d0>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <menu+0x1318>
				kapitablaTip = 0;
 8002766:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <menu+0x13d0>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800276c:	f001 fbb8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002770:	2104      	movs	r1, #4
 8002772:	482e      	ldr	r0, [pc, #184]	@ (800282c <menu+0x13d8>)
 8002774:	f008 f8b8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d115      	bne.n	80027aa <menu+0x1356>
 800277e:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <menu+0x13dc>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <menu+0x13d0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <menu+0x13d0>)
 8002796:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <menu+0x13d0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d902      	bls.n	80027a6 <menu+0x1352>
		   		kapitablaTip = 2;
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <menu+0x13d0>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a6:	f001 fb9b 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027aa:	2108      	movs	r1, #8
 80027ac:	481f      	ldr	r0, [pc, #124]	@ (800282c <menu+0x13d8>)
 80027ae:	f008 f89b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10d      	bne.n	80027d4 <menu+0x1380>
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <menu+0x13dc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <menu+0x13d0>)
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <menu+0x13e0>)
 80027cc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <menu+0x13e4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <menu+0x13e8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b0e      	cmp	r3, #14
 80027da:	f040 80a3 	bne.w	8002924 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80027de:	4a18      	ldr	r2, [pc, #96]	@ (8002840 <menu+0x13ec>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	2001      	movs	r0, #1
 80027e4:	f006 fd2c 	bl	8009240 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <menu+0x13f0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <menu+0x13f4>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2002      	movs	r0, #2
 80027f6:	f006 fd23 	bl	8009240 <lcd_print>
 80027fa:	e034      	b.n	8002866 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <menu+0x13f0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <menu+0x13f8>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f006 fd19 	bl	8009240 <lcd_print>
 800280e:	e02a      	b.n	8002866 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <menu+0x13f0>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d11d      	bne.n	8002854 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <menu+0x13fc>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f006 fd0f 	bl	8009240 <lcd_print>
 8002822:	e020      	b.n	8002866 <menu+0x1412>
 8002824:	200016cb 	.word	0x200016cb
 8002828:	20000114 	.word	0x20000114
 800282c:	40010800 	.word	0x40010800
 8002830:	200016ef 	.word	0x200016ef
 8002834:	20000fec 	.word	0x20000fec
 8002838:	200016ec 	.word	0x200016ec
 800283c:	200016c0 	.word	0x200016c0
 8002840:	20001b1c 	.word	0x20001b1c
 8002844:	200016cd 	.word	0x200016cd
 8002848:	20001b30 	.word	0x20001b30
 800284c:	20001b44 	.word	0x20001b44
 8002850:	20001b58 	.word	0x20001b58
		} else if(kapiTablaAcKonum == 3) {
 8002854:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <menu+0x15dc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d104      	bne.n	8002866 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 800285c:	4a75      	ldr	r2, [pc, #468]	@ (8002a34 <menu+0x15e0>)
 800285e:	2101      	movs	r1, #1
 8002860:	2002      	movs	r0, #2
 8002862:	f006 fced 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002866:	2102      	movs	r1, #2
 8002868:	4873      	ldr	r0, [pc, #460]	@ (8002a38 <menu+0x15e4>)
 800286a:	f008 f83d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d115      	bne.n	80028a0 <menu+0x144c>
 8002874:	4b71      	ldr	r3, [pc, #452]	@ (8002a3c <menu+0x15e8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f083 0301 	eor.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002882:	4b6b      	ldr	r3, [pc, #428]	@ (8002a30 <menu+0x15dc>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b69      	ldr	r3, [pc, #420]	@ (8002a30 <menu+0x15dc>)
 800288c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800288e:	4b68      	ldr	r3, [pc, #416]	@ (8002a30 <menu+0x15dc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <menu+0x15dc>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800289c:	f001 fb20 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a0:	2104      	movs	r1, #4
 80028a2:	4865      	ldr	r0, [pc, #404]	@ (8002a38 <menu+0x15e4>)
 80028a4:	f008 f820 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d115      	bne.n	80028da <menu+0x1486>
 80028ae:	4b63      	ldr	r3, [pc, #396]	@ (8002a3c <menu+0x15e8>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80028bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a30 <menu+0x15dc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a30 <menu+0x15dc>)
 80028c6:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80028c8:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <menu+0x15dc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d902      	bls.n	80028d6 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80028d0:	4b57      	ldr	r3, [pc, #348]	@ (8002a30 <menu+0x15dc>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028d6:	f001 fb03 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028da:	2108      	movs	r1, #8
 80028dc:	4856      	ldr	r0, [pc, #344]	@ (8002a38 <menu+0x15e4>)
 80028de:	f008 f803 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11d      	bne.n	8002924 <menu+0x14d0>
 80028e8:	4b54      	ldr	r3, [pc, #336]	@ (8002a3c <menu+0x15e8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80028f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a30 <menu+0x15dc>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <menu+0x15ec>)
 80028fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002900:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <menu+0x15dc>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <menu+0x14bc>
 8002908:	4b49      	ldr	r3, [pc, #292]	@ (8002a30 <menu+0x15dc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d106      	bne.n	800291e <menu+0x14ca>
				altLimit = 1;
 8002910:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <menu+0x15f0>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002916:	4b4b      	ldr	r3, [pc, #300]	@ (8002a44 <menu+0x15f0>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <menu+0x15ec>)
 800291c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800291e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a48 <menu+0x15f4>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <menu+0x15f8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d16c      	bne.n	8002a06 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 800292c:	4a48      	ldr	r2, [pc, #288]	@ (8002a50 <menu+0x15fc>)
 800292e:	2101      	movs	r1, #1
 8002930:	2001      	movs	r0, #1
 8002932:	f006 fc85 	bl	8009240 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002936:	4a47      	ldr	r2, [pc, #284]	@ (8002a54 <menu+0x1600>)
 8002938:	2101      	movs	r1, #1
 800293a:	2002      	movs	r0, #2
 800293c:	f006 fc80 	bl	8009240 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002940:	4b45      	ldr	r3, [pc, #276]	@ (8002a58 <menu+0x1604>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	220a      	movs	r2, #10
 8002946:	4945      	ldr	r1, [pc, #276]	@ (8002a5c <menu+0x1608>)
 8002948:	4618      	mov	r0, r3
 800294a:	f00b fb45 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 800294e:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <menu+0x1608>)
 8002950:	2110      	movs	r1, #16
 8002952:	2002      	movs	r0, #2
 8002954:	f006 fc74 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002958:	2102      	movs	r1, #2
 800295a:	4837      	ldr	r0, [pc, #220]	@ (8002a38 <menu+0x15e4>)
 800295c:	f007 ffc4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d119      	bne.n	800299a <menu+0x1546>
 8002966:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <menu+0x15e8>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <menu+0x1546>
 8002974:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <menu+0x160c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <menu+0x1604>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <menu+0x1604>)
 8002986:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002988:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <menu+0x1604>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d902      	bls.n	8002996 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002990:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <menu+0x1604>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002996:	f001 faa3 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800299a:	2104      	movs	r1, #4
 800299c:	4826      	ldr	r0, [pc, #152]	@ (8002a38 <menu+0x15e4>)
 800299e:	f007 ffa3 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d119      	bne.n	80029dc <menu+0x1588>
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <menu+0x15e8>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <menu+0x1588>
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <menu+0x160c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80029be:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <menu+0x1604>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <menu+0x1604>)
 80029c8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80029ca:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <menu+0x1604>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80029d2:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <menu+0x1604>)
 80029d4:	2205      	movs	r2, #5
 80029d6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80029d8:	f001 fa82 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029dc:	2108      	movs	r1, #8
 80029de:	4816      	ldr	r0, [pc, #88]	@ (8002a38 <menu+0x15e4>)
 80029e0:	f007 ff82 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10d      	bne.n	8002a06 <menu+0x15b2>
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <menu+0x15e8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <menu+0x1604>)
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <menu+0x15ec>)
 80029fe:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <menu+0x15f4>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <menu+0x15f8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	f040 8086 	bne.w	8002b1c <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <menu+0x1610>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	2001      	movs	r0, #1
 8002a16:	f006 fc13 	bl	8009240 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <menu+0x1614>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d124      	bne.n	8002a6c <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <menu+0x15e0>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2002      	movs	r0, #2
 8002a28:	f006 fc0a 	bl	8009240 <lcd_print>
 8002a2c:	e027      	b.n	8002a7e <menu+0x162a>
 8002a2e:	bf00      	nop
 8002a30:	200016cd 	.word	0x200016cd
 8002a34:	200019a0 	.word	0x200019a0
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	200016ef 	.word	0x200016ef
 8002a40:	20000fec 	.word	0x20000fec
 8002a44:	200016c6 	.word	0x200016c6
 8002a48:	200016ec 	.word	0x200016ec
 8002a4c:	200016c0 	.word	0x200016c0
 8002a50:	20001b6c 	.word	0x20001b6c
 8002a54:	20001acc 	.word	0x20001acc
 8002a58:	200016db 	.word	0x200016db
 8002a5c:	2000105c 	.word	0x2000105c
 8002a60:	200016cb 	.word	0x200016cb
 8002a64:	20001b80 	.word	0x20001b80
 8002a68:	200016ce 	.word	0x200016ce
		} else if(yukariYavasLimit == 1) {
 8002a6c:	4b84      	ldr	r3, [pc, #528]	@ (8002c80 <menu+0x182c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d104      	bne.n	8002a7e <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002a74:	4a83      	ldr	r2, [pc, #524]	@ (8002c84 <menu+0x1830>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f006 fbe1 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4881      	ldr	r0, [pc, #516]	@ (8002c88 <menu+0x1834>)
 8002a82:	f007 ff31 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d115      	bne.n	8002ab8 <menu+0x1664>
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <menu+0x1838>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002a9a:	4b79      	ldr	r3, [pc, #484]	@ (8002c80 <menu+0x182c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <menu+0x182c>)
 8002aa4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002aa6:	4b76      	ldr	r3, [pc, #472]	@ (8002c80 <menu+0x182c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d902      	bls.n	8002ab4 <menu+0x1660>
				yukariYavasLimit = 0;
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <menu+0x182c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ab4:	f001 fa14 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4873      	ldr	r0, [pc, #460]	@ (8002c88 <menu+0x1834>)
 8002abc:	f007 ff14 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d115      	bne.n	8002af2 <menu+0x169e>
 8002ac6:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <menu+0x1838>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c80 <menu+0x182c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <menu+0x182c>)
 8002ade:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002ae0:	4b67      	ldr	r3, [pc, #412]	@ (8002c80 <menu+0x182c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <menu+0x182c>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aee:	f001 f9f7 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af2:	2108      	movs	r1, #8
 8002af4:	4864      	ldr	r0, [pc, #400]	@ (8002c88 <menu+0x1834>)
 8002af6:	f007 fef7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <menu+0x16c8>
 8002b00:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <menu+0x1838>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <menu+0x182c>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b5f      	ldr	r3, [pc, #380]	@ (8002c90 <menu+0x183c>)
 8002b14:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002b16:	4b5f      	ldr	r3, [pc, #380]	@ (8002c94 <menu+0x1840>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c98 <menu+0x1844>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b11      	cmp	r3, #17
 8002b22:	f040 808b 	bne.w	8002c3c <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002b26:	4a5d      	ldr	r2, [pc, #372]	@ (8002c9c <menu+0x1848>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f006 fb88 	bl	8009240 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002b30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <menu+0x184c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d105      	bne.n	8002b44 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002b38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <menu+0x1850>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f006 fb7f 	bl	8009240 <lcd_print>
 8002b42:	e012      	b.n	8002b6a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002b44:	4b56      	ldr	r3, [pc, #344]	@ (8002ca0 <menu+0x184c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002b4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <menu+0x1854>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f006 fb75 	bl	8009240 <lcd_print>
 8002b56:	e008      	b.n	8002b6a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002b58:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <menu+0x184c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002b60:	4a52      	ldr	r2, [pc, #328]	@ (8002cac <menu+0x1858>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	2002      	movs	r0, #2
 8002b66:	f006 fb6b 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4846      	ldr	r0, [pc, #280]	@ (8002c88 <menu+0x1834>)
 8002b6e:	f007 febb 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d115      	bne.n	8002ba4 <menu+0x1750>
 8002b78:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <menu+0x1838>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <menu+0x184c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <menu+0x184c>)
 8002b90:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <menu+0x184c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <menu+0x184c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ba0:	f001 f99e 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	4838      	ldr	r0, [pc, #224]	@ (8002c88 <menu+0x1834>)
 8002ba8:	f007 fe9e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d115      	bne.n	8002bde <menu+0x178a>
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <menu+0x1838>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002bc0:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <menu+0x184c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <menu+0x184c>)
 8002bca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002bcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <menu+0x184c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d902      	bls.n	8002bda <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002bd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <menu+0x184c>)
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bda:	f001 f981 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bde:	2108      	movs	r1, #8
 8002be0:	4829      	ldr	r0, [pc, #164]	@ (8002c88 <menu+0x1834>)
 8002be2:	f007 fe81 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d127      	bne.n	8002c3c <menu+0x17e8>
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <menu+0x1838>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002bfa:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <menu+0x184c>)
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <menu+0x183c>)
 8002c00:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <menu+0x184c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <menu+0x17be>
 8002c0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <menu+0x184c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <menu+0x17cc>
				calismaSekli = 0;
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <menu+0x185c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <menu+0x185c>)
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <menu+0x183c>)
 8002c1e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <menu+0x184c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <menu+0x1860>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <menu+0x1860>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <menu+0x183c>)
 8002c34:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <menu+0x1840>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <menu+0x1844>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	f040 8097 	bne.w	8002d74 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002c46:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <menu+0x184c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d105      	bne.n	8002c5a <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb8 <menu+0x1864>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f006 faf4 	bl	8009240 <lcd_print>
 8002c58:	e008      	b.n	8002c6c <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <menu+0x184c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002c62:	4a16      	ldr	r2, [pc, #88]	@ (8002cbc <menu+0x1868>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2001      	movs	r0, #1
 8002c68:	f006 faea 	bl	8009240 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <menu+0x186c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d127      	bne.n	8002cc4 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <menu+0x1858>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f006 fae1 	bl	8009240 <lcd_print>
 8002c7e:	e02a      	b.n	8002cd6 <menu+0x1882>
 8002c80:	200016ce 	.word	0x200016ce
 8002c84:	200019b4 	.word	0x200019b4
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	200016ef 	.word	0x200016ef
 8002c90:	20000fec 	.word	0x20000fec
 8002c94:	200016ec 	.word	0x200016ec
 8002c98:	200016c0 	.word	0x200016c0
 8002c9c:	20001b94 	.word	0x20001b94
 8002ca0:	200016cf 	.word	0x200016cf
 8002ca4:	20001ba8 	.word	0x20001ba8
 8002ca8:	20001bbc 	.word	0x20001bbc
 8002cac:	200019a0 	.word	0x200019a0
 8002cb0:	200016c1 	.word	0x200016c1
 8002cb4:	200016d2 	.word	0x200016d2
 8002cb8:	20001bd0 	.word	0x20001bd0
 8002cbc:	20001be4 	.word	0x20001be4
 8002cc0:	200016d0 	.word	0x200016d0
		} else if(devirmeYukariIleriLimit == 1){
 8002cc4:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <menu+0x1a58>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d104      	bne.n	8002cd6 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002ccc:	4a78      	ldr	r2, [pc, #480]	@ (8002eb0 <menu+0x1a5c>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f006 fab5 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4876      	ldr	r0, [pc, #472]	@ (8002eb4 <menu+0x1a60>)
 8002cda:	f007 fe05 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d115      	bne.n	8002d10 <menu+0x18bc>
 8002ce4:	4b74      	ldr	r3, [pc, #464]	@ (8002eb8 <menu+0x1a64>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8002eac <menu+0x1a58>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8002eac <menu+0x1a58>)
 8002cfc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002eac <menu+0x1a58>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d902      	bls.n	8002d0c <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002d06:	4b69      	ldr	r3, [pc, #420]	@ (8002eac <menu+0x1a58>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d0c:	f001 f8e8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d10:	2104      	movs	r1, #4
 8002d12:	4868      	ldr	r0, [pc, #416]	@ (8002eb4 <menu+0x1a60>)
 8002d14:	f007 fde8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d115      	bne.n	8002d4a <menu+0x18f6>
 8002d1e:	4b66      	ldr	r3, [pc, #408]	@ (8002eb8 <menu+0x1a64>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002eac <menu+0x1a58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <menu+0x1a58>)
 8002d36:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002d38:	4b5c      	ldr	r3, [pc, #368]	@ (8002eac <menu+0x1a58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002d40:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <menu+0x1a58>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d46:	f001 f8cb 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4a:	2108      	movs	r1, #8
 8002d4c:	4859      	ldr	r0, [pc, #356]	@ (8002eb4 <menu+0x1a60>)
 8002d4e:	f007 fdcb 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10d      	bne.n	8002d74 <menu+0x1920>
 8002d58:	4b57      	ldr	r3, [pc, #348]	@ (8002eb8 <menu+0x1a64>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <menu+0x1a58>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b54      	ldr	r3, [pc, #336]	@ (8002ebc <menu+0x1a68>)
 8002d6c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002d6e:	4b54      	ldr	r3, [pc, #336]	@ (8002ec0 <menu+0x1a6c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <menu+0x1a70>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b13      	cmp	r3, #19
 8002d7a:	d174      	bne.n	8002e66 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002d7c:	4b52      	ldr	r3, [pc, #328]	@ (8002ec8 <menu+0x1a74>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d105      	bne.n	8002d90 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <menu+0x1a78>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f006 fa59 	bl	8009240 <lcd_print>
 8002d8e:	e008      	b.n	8002da2 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002d90:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec8 <menu+0x1a74>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d104      	bne.n	8002da2 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002d98:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed0 <menu+0x1a7c>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f006 fa4f 	bl	8009240 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002da2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <menu+0x1a80>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002daa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <menu+0x1a84>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2002      	movs	r0, #2
 8002db0:	f006 fa46 	bl	8009240 <lcd_print>
 8002db4:	e008      	b.n	8002dc8 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <menu+0x1a80>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d104      	bne.n	8002dc8 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb0 <menu+0x1a5c>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f006 fa3c 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc8:	2102      	movs	r1, #2
 8002dca:	483a      	ldr	r0, [pc, #232]	@ (8002eb4 <menu+0x1a60>)
 8002dcc:	f007 fd8c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d115      	bne.n	8002e02 <menu+0x19ae>
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <menu+0x1a64>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <menu+0x1a80>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <menu+0x1a80>)
 8002dee:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002df0:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <menu+0x1a80>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d902      	bls.n	8002dfe <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002df8:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <menu+0x1a80>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dfe:	f001 f86f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e02:	2104      	movs	r1, #4
 8002e04:	482b      	ldr	r0, [pc, #172]	@ (8002eb4 <menu+0x1a60>)
 8002e06:	f007 fd6f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d115      	bne.n	8002e3c <menu+0x19e8>
 8002e10:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <menu+0x1a64>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <menu+0x1a80>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <menu+0x1a80>)
 8002e28:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <menu+0x1a80>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002e32:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <menu+0x1a80>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e38:	f001 f852 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	481d      	ldr	r0, [pc, #116]	@ (8002eb4 <menu+0x1a60>)
 8002e40:	f007 fd52 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10d      	bne.n	8002e66 <menu+0x1a12>
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <menu+0x1a64>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <menu+0x1a80>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <menu+0x1a68>)
 8002e5e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002e60:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <menu+0x1a6c>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002e66:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <menu+0x1a70>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b14      	cmp	r3, #20
 8002e6c:	f040 809e 	bne.w	8002fac <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <menu+0x1a74>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002e78:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <menu+0x1a88>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f006 f9df 	bl	8009240 <lcd_print>
 8002e82:	e008      	b.n	8002e96 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <menu+0x1a74>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d104      	bne.n	8002e96 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002e8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <menu+0x1a8c>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2001      	movs	r0, #1
 8002e92:	f006 f9d5 	bl	8009240 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <menu+0x1a90>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d126      	bne.n	8002eec <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002e9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ee8 <menu+0x1a94>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f006 f9cc 	bl	8009240 <lcd_print>
 8002ea8:	e029      	b.n	8002efe <menu+0x1aaa>
 8002eaa:	bf00      	nop
 8002eac:	200016d0 	.word	0x200016d0
 8002eb0:	200019b4 	.word	0x200019b4
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	200016ef 	.word	0x200016ef
 8002ebc:	20000fec 	.word	0x20000fec
 8002ec0:	200016ec 	.word	0x200016ec
 8002ec4:	200016c0 	.word	0x200016c0
 8002ec8:	200016cf 	.word	0x200016cf
 8002ecc:	20001bf8 	.word	0x20001bf8
 8002ed0:	20001c0c 	.word	0x20001c0c
 8002ed4:	200016d1 	.word	0x200016d1
 8002ed8:	200019a0 	.word	0x200019a0
 8002edc:	20001c20 	.word	0x20001c20
 8002ee0:	20001c34 	.word	0x20001c34
 8002ee4:	200016d2 	.word	0x200016d2
 8002ee8:	20001c48 	.word	0x20001c48
		} else if(devirmeSilindirTipi == 1) {
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <menu+0x1b80>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d104      	bne.n	8002efe <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002ef4:	4a38      	ldr	r2, [pc, #224]	@ (8002fd8 <menu+0x1b84>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f006 f9a1 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002efe:	2102      	movs	r1, #2
 8002f00:	4836      	ldr	r0, [pc, #216]	@ (8002fdc <menu+0x1b88>)
 8002f02:	f007 fcf1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d119      	bne.n	8002f40 <menu+0x1aec>
 8002f0c:	4b34      	ldr	r3, [pc, #208]	@ (8002fe0 <menu+0x1b8c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <menu+0x1aec>
 8002f1a:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <menu+0x1b90>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d10e      	bne.n	8002f40 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <menu+0x1b80>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <menu+0x1b80>)
 8002f2c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <menu+0x1b80>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d902      	bls.n	8002f3c <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <menu+0x1b80>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3c:	f000 ffd0 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002f40:	2104      	movs	r1, #4
 8002f42:	4826      	ldr	r0, [pc, #152]	@ (8002fdc <menu+0x1b88>)
 8002f44:	f007 fcd0 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d119      	bne.n	8002f82 <menu+0x1b2e>
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <menu+0x1b8c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d012      	beq.n	8002f82 <menu+0x1b2e>
 8002f5c:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <menu+0x1b90>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d10e      	bne.n	8002f82 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <menu+0x1b80>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <menu+0x1b80>)
 8002f6e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <menu+0x1b80>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <menu+0x1b80>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f7e:	f000 ffaf 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f82:	2108      	movs	r1, #8
 8002f84:	4815      	ldr	r0, [pc, #84]	@ (8002fdc <menu+0x1b88>)
 8002f86:	f007 fcaf 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <menu+0x1b58>
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <menu+0x1b8c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <menu+0x1b80>)
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <menu+0x1b94>)
 8002fa4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <menu+0x1b98>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002fac:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <menu+0x1b9c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b15      	cmp	r3, #21
 8002fb2:	f040 8088 	bne.w	80030c6 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <menu+0x1ba0>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f006 f940 	bl	8009240 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <menu+0x1ba4>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11b      	bne.n	8003000 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <menu+0x1ba8>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f006 f937 	bl	8009240 <lcd_print>
 8002fd2:	e01e      	b.n	8003012 <menu+0x1bbe>
 8002fd4:	200016d2 	.word	0x200016d2
 8002fd8:	20001c5c 	.word	0x20001c5c
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	200016ef 	.word	0x200016ef
 8002fe4:	200016cf 	.word	0x200016cf
 8002fe8:	20000fec 	.word	0x20000fec
 8002fec:	200016ec 	.word	0x200016ec
 8002ff0:	200016c0 	.word	0x200016c0
 8002ff4:	20001c70 	.word	0x20001c70
 8002ff8:	200016d3 	.word	0x200016d3
 8002ffc:	20001c48 	.word	0x20001c48
		} else if(platformSilindirTipi == 1) {
 8003000:	4ba1      	ldr	r3, [pc, #644]	@ (8003288 <menu+0x1e34>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d104      	bne.n	8003012 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003008:	4aa0      	ldr	r2, [pc, #640]	@ (800328c <menu+0x1e38>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f006 f917 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2102      	movs	r1, #2
 8003014:	489e      	ldr	r0, [pc, #632]	@ (8003290 <menu+0x1e3c>)
 8003016:	f007 fc67 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d115      	bne.n	800304c <menu+0x1bf8>
 8003020:	4b9c      	ldr	r3, [pc, #624]	@ (8003294 <menu+0x1e40>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 800302e:	4b96      	ldr	r3, [pc, #600]	@ (8003288 <menu+0x1e34>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b94      	ldr	r3, [pc, #592]	@ (8003288 <menu+0x1e34>)
 8003038:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800303a:	4b93      	ldr	r3, [pc, #588]	@ (8003288 <menu+0x1e34>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d902      	bls.n	8003048 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8003042:	4b91      	ldr	r3, [pc, #580]	@ (8003288 <menu+0x1e34>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003048:	f000 ff4a 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800304c:	2104      	movs	r1, #4
 800304e:	4890      	ldr	r0, [pc, #576]	@ (8003290 <menu+0x1e3c>)
 8003050:	f007 fc4a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <menu+0x1c32>
 800305a:	4b8e      	ldr	r3, [pc, #568]	@ (8003294 <menu+0x1e40>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003068:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <menu+0x1e34>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <menu+0x1e34>)
 8003072:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003074:	4b84      	ldr	r3, [pc, #528]	@ (8003288 <menu+0x1e34>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 800307c:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <menu+0x1e34>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003082:	f000 ff2d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003086:	2108      	movs	r1, #8
 8003088:	4881      	ldr	r0, [pc, #516]	@ (8003290 <menu+0x1e3c>)
 800308a:	f007 fc2d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d118      	bne.n	80030c6 <menu+0x1c72>
 8003094:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <menu+0x1e40>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80030a2:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <menu+0x1e34>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003298 <menu+0x1e44>)
 80030a8:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80030aa:	4b77      	ldr	r3, [pc, #476]	@ (8003288 <menu+0x1e34>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d106      	bne.n	80030c0 <menu+0x1c6c>
				altLimit = 1;
 80030b2:	4b7a      	ldr	r3, [pc, #488]	@ (800329c <menu+0x1e48>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030b8:	4b78      	ldr	r3, [pc, #480]	@ (800329c <menu+0x1e48>)
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <menu+0x1e44>)
 80030be:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80030c0:	4b77      	ldr	r3, [pc, #476]	@ (80032a0 <menu+0x1e4c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80030c6:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <menu+0x1e50>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d164      	bne.n	8003198 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 80030ce:	4a76      	ldr	r2, [pc, #472]	@ (80032a8 <menu+0x1e54>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f006 f8b4 	bl	8009240 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80030d8:	4a74      	ldr	r2, [pc, #464]	@ (80032ac <menu+0x1e58>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f006 f8af 	bl	8009240 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80030e2:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <menu+0x1e5c>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	220a      	movs	r2, #10
 80030e8:	4972      	ldr	r1, [pc, #456]	@ (80032b4 <menu+0x1e60>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00a ff74 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 80030f0:	4a70      	ldr	r2, [pc, #448]	@ (80032b4 <menu+0x1e60>)
 80030f2:	2110      	movs	r1, #16
 80030f4:	2002      	movs	r0, #2
 80030f6:	f006 f8a3 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2102      	movs	r1, #2
 80030fc:	4864      	ldr	r0, [pc, #400]	@ (8003290 <menu+0x1e3c>)
 80030fe:	f007 fbf3 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x1ce0>
 8003108:	4b62      	ldr	r3, [pc, #392]	@ (8003294 <menu+0x1e40>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8003116:	4b66      	ldr	r3, [pc, #408]	@ (80032b0 <menu+0x1e5c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b64      	ldr	r3, [pc, #400]	@ (80032b0 <menu+0x1e5c>)
 8003120:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003122:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <menu+0x1e5c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d902      	bls.n	8003130 <menu+0x1cdc>
				yukariValfTmr = 0;
 800312a:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <menu+0x1e5c>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003130:	f000 fed6 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2104      	movs	r1, #4
 8003136:	4856      	ldr	r0, [pc, #344]	@ (8003290 <menu+0x1e3c>)
 8003138:	f007 fbd6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d115      	bne.n	800316e <menu+0x1d1a>
 8003142:	4b54      	ldr	r3, [pc, #336]	@ (8003294 <menu+0x1e40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003150:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <menu+0x1e5c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b55      	ldr	r3, [pc, #340]	@ (80032b0 <menu+0x1e5c>)
 800315a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800315c:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <menu+0x1e5c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d902      	bls.n	800316a <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003164:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <menu+0x1e5c>)
 8003166:	2205      	movs	r2, #5
 8003168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800316a:	f000 feb9 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800316e:	2108      	movs	r1, #8
 8003170:	4847      	ldr	r0, [pc, #284]	@ (8003290 <menu+0x1e3c>)
 8003172:	f007 fbb9 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10d      	bne.n	8003198 <menu+0x1d44>
 800317c:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <menu+0x1e40>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 800318a:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <menu+0x1e5c>)
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b42      	ldr	r3, [pc, #264]	@ (8003298 <menu+0x1e44>)
 8003190:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003192:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <menu+0x1e4c>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003198:	4b42      	ldr	r3, [pc, #264]	@ (80032a4 <menu+0x1e50>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b17      	cmp	r3, #23
 800319e:	d164      	bne.n	800326a <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80031a0:	4a45      	ldr	r2, [pc, #276]	@ (80032b8 <menu+0x1e64>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	2001      	movs	r0, #1
 80031a6:	f006 f84b 	bl	8009240 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031aa:	4a40      	ldr	r2, [pc, #256]	@ (80032ac <menu+0x1e58>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	2002      	movs	r0, #2
 80031b0:	f006 f846 	bl	8009240 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80031b4:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <menu+0x1e68>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	220a      	movs	r2, #10
 80031ba:	493e      	ldr	r1, [pc, #248]	@ (80032b4 <menu+0x1e60>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f00a ff0b 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 80031c2:	4a3c      	ldr	r2, [pc, #240]	@ (80032b4 <menu+0x1e60>)
 80031c4:	2110      	movs	r1, #16
 80031c6:	2002      	movs	r0, #2
 80031c8:	f006 f83a 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031cc:	2102      	movs	r1, #2
 80031ce:	4830      	ldr	r0, [pc, #192]	@ (8003290 <menu+0x1e3c>)
 80031d0:	f007 fb8a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d115      	bne.n	8003206 <menu+0x1db2>
 80031da:	4b2e      	ldr	r3, [pc, #184]	@ (8003294 <menu+0x1e40>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80031e8:	4b34      	ldr	r3, [pc, #208]	@ (80032bc <menu+0x1e68>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b32      	ldr	r3, [pc, #200]	@ (80032bc <menu+0x1e68>)
 80031f2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80031f4:	4b31      	ldr	r3, [pc, #196]	@ (80032bc <menu+0x1e68>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d902      	bls.n	8003202 <menu+0x1dae>
				asagiValfTmr = 0;
 80031fc:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <menu+0x1e68>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003202:	f000 fe6d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003206:	2104      	movs	r1, #4
 8003208:	4821      	ldr	r0, [pc, #132]	@ (8003290 <menu+0x1e3c>)
 800320a:	f007 fb6d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d115      	bne.n	8003240 <menu+0x1dec>
 8003214:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <menu+0x1e40>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003222:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <menu+0x1e68>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	3b01      	subs	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <menu+0x1e68>)
 800322c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800322e:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <menu+0x1e68>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <menu+0x1de8>
		   		asagiValfTmr = 5;
 8003236:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <menu+0x1e68>)
 8003238:	2205      	movs	r2, #5
 800323a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800323c:	f000 fe50 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003240:	2108      	movs	r1, #8
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <menu+0x1e3c>)
 8003244:	f007 fb50 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10d      	bne.n	800326a <menu+0x1e16>
 800324e:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <menu+0x1e40>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <menu+0x1e68>)
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <menu+0x1e44>)
 8003262:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003264:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <menu+0x1e4c>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800326a:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <menu+0x1e50>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b18      	cmp	r3, #24
 8003270:	f040 8093 	bne.w	800339a <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003274:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <menu+0x1e6c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d125      	bne.n	80032c8 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800327c:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <menu+0x1e70>)
 800327e:	2101      	movs	r1, #1
 8003280:	2001      	movs	r0, #1
 8003282:	f005 ffdd 	bl	8009240 <lcd_print>
 8003286:	e028      	b.n	80032da <menu+0x1e86>
 8003288:	200016d3 	.word	0x200016d3
 800328c:	20001c5c 	.word	0x20001c5c
 8003290:	40010800 	.word	0x40010800
 8003294:	200016ef 	.word	0x200016ef
 8003298:	20000fec 	.word	0x20000fec
 800329c:	200016c6 	.word	0x200016c6
 80032a0:	200016ec 	.word	0x200016ec
 80032a4:	200016c0 	.word	0x200016c0
 80032a8:	20001c84 	.word	0x20001c84
 80032ac:	20001acc 	.word	0x20001acc
 80032b0:	200016d4 	.word	0x200016d4
 80032b4:	2000105c 	.word	0x2000105c
 80032b8:	20001c98 	.word	0x20001c98
 80032bc:	200016d5 	.word	0x200016d5
 80032c0:	200016cf 	.word	0x200016cf
 80032c4:	20001cac 	.word	0x20001cac
		} else if(devirmeYuruyusSecim == 1) {
 80032c8:	4b8c      	ldr	r3, [pc, #560]	@ (80034fc <menu+0x20a8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d104      	bne.n	80032da <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80032d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003500 <menu+0x20ac>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2001      	movs	r0, #1
 80032d6:	f005 ffb3 	bl	8009240 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032da:	4a8a      	ldr	r2, [pc, #552]	@ (8003504 <menu+0x20b0>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2002      	movs	r0, #2
 80032e0:	f005 ffae 	bl	8009240 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80032e4:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <menu+0x20b4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	220a      	movs	r2, #10
 80032ea:	4988      	ldr	r1, [pc, #544]	@ (800350c <menu+0x20b8>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f00a fe73 	bl	800dfd8 <itoa>
		lcd_print(2, 16, snum);
 80032f2:	4a86      	ldr	r2, [pc, #536]	@ (800350c <menu+0x20b8>)
 80032f4:	2110      	movs	r1, #16
 80032f6:	2002      	movs	r0, #2
 80032f8:	f005 ffa2 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fc:	2102      	movs	r1, #2
 80032fe:	4884      	ldr	r0, [pc, #528]	@ (8003510 <menu+0x20bc>)
 8003300:	f007 faf2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d115      	bne.n	8003336 <menu+0x1ee2>
 800330a:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <menu+0x20c0>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f083 0301 	eor.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003318:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <menu+0x20b4>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b79      	ldr	r3, [pc, #484]	@ (8003508 <menu+0x20b4>)
 8003322:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003324:	4b78      	ldr	r3, [pc, #480]	@ (8003508 <menu+0x20b4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d902      	bls.n	8003332 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <menu+0x20b4>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003332:	f000 fdd5 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003336:	2104      	movs	r1, #4
 8003338:	4875      	ldr	r0, [pc, #468]	@ (8003510 <menu+0x20bc>)
 800333a:	f007 fad5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d115      	bne.n	8003370 <menu+0x1f1c>
 8003344:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <menu+0x20c0>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003352:	4b6d      	ldr	r3, [pc, #436]	@ (8003508 <menu+0x20b4>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b6b      	ldr	r3, [pc, #428]	@ (8003508 <menu+0x20b4>)
 800335c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 800335e:	4b6a      	ldr	r3, [pc, #424]	@ (8003508 <menu+0x20b4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8003366:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <menu+0x20b4>)
 8003368:	2205      	movs	r2, #5
 800336a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800336c:	f000 fdb8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003370:	2108      	movs	r1, #8
 8003372:	4867      	ldr	r0, [pc, #412]	@ (8003510 <menu+0x20bc>)
 8003374:	f007 fab8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10d      	bne.n	800339a <menu+0x1f46>
 800337e:	4b65      	ldr	r3, [pc, #404]	@ (8003514 <menu+0x20c0>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 800338c:	4b5e      	ldr	r3, [pc, #376]	@ (8003508 <menu+0x20b4>)
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <menu+0x20c4>)
 8003392:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003394:	4b61      	ldr	r3, [pc, #388]	@ (800351c <menu+0x20c8>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800339a:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <menu+0x20cc>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b19      	cmp	r3, #25
 80033a0:	d172      	bne.n	8003488 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80033a2:	4b56      	ldr	r3, [pc, #344]	@ (80034fc <menu+0x20a8>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d105      	bne.n	80033b6 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80033aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003524 <menu+0x20d0>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	2001      	movs	r0, #1
 80033b0:	f005 ff46 	bl	8009240 <lcd_print>
 80033b4:	e008      	b.n	80033c8 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80033b6:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <menu+0x20a8>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d104      	bne.n	80033c8 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80033be:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <menu+0x20d4>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	2001      	movs	r0, #1
 80033c4:	f005 ff3c 	bl	8009240 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003504 <menu+0x20b0>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f005 ff37 	bl	8009240 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80033d2:	4b56      	ldr	r3, [pc, #344]	@ (800352c <menu+0x20d8>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	220a      	movs	r2, #10
 80033d8:	494c      	ldr	r1, [pc, #304]	@ (800350c <menu+0x20b8>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f00a fdfc 	bl	800dfd8 <itoa>
		lcd_print(2,16,snum);
 80033e0:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <menu+0x20b8>)
 80033e2:	2110      	movs	r1, #16
 80033e4:	2002      	movs	r0, #2
 80033e6:	f005 ff2b 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ea:	2102      	movs	r1, #2
 80033ec:	4848      	ldr	r0, [pc, #288]	@ (8003510 <menu+0x20bc>)
 80033ee:	f007 fa7b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d115      	bne.n	8003424 <menu+0x1fd0>
 80033f8:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <menu+0x20c0>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	f083 0301 	eor.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003406:	4b49      	ldr	r3, [pc, #292]	@ (800352c <menu+0x20d8>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <menu+0x20d8>)
 8003410:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003412:	4b46      	ldr	r3, [pc, #280]	@ (800352c <menu+0x20d8>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d902      	bls.n	8003420 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800341a:	4b44      	ldr	r3, [pc, #272]	@ (800352c <menu+0x20d8>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003420:	f000 fd5e 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003424:	2104      	movs	r1, #4
 8003426:	483a      	ldr	r0, [pc, #232]	@ (8003510 <menu+0x20bc>)
 8003428:	f007 fa5e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d115      	bne.n	800345e <menu+0x200a>
 8003432:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <menu+0x20c0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003440:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <menu+0x20d8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3b01      	subs	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b38      	ldr	r3, [pc, #224]	@ (800352c <menu+0x20d8>)
 800344a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800344c:	4b37      	ldr	r3, [pc, #220]	@ (800352c <menu+0x20d8>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d902      	bls.n	800345a <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <menu+0x20d8>)
 8003456:	2205      	movs	r2, #5
 8003458:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800345a:	f000 fd41 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800345e:	2108      	movs	r1, #8
 8003460:	482b      	ldr	r0, [pc, #172]	@ (8003510 <menu+0x20bc>)
 8003462:	f007 fa41 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10d      	bne.n	8003488 <menu+0x2034>
 800346c:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <menu+0x20c0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800347a:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <menu+0x20d8>)
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <menu+0x20c4>)
 8003480:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <menu+0x20c8>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <menu+0x20cc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b1a      	cmp	r3, #26
 800348e:	f040 80b7 	bne.w	8003600 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003492:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <menu+0x20dc>)
 8003494:	2101      	movs	r1, #1
 8003496:	2001      	movs	r0, #1
 8003498:	f005 fed2 	bl	8009240 <lcd_print>

		if(makineCalismaTmr > 99) {
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <menu+0x20e0>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b63      	cmp	r3, #99	@ 0x63
 80034a2:	d911      	bls.n	80034c8 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <menu+0x20b0>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2002      	movs	r0, #2
 80034aa:	f005 fec9 	bl	8009240 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <menu+0x20e0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	220a      	movs	r2, #10
 80034b4:	4915      	ldr	r1, [pc, #84]	@ (800350c <menu+0x20b8>)
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00a fd8e 	bl	800dfd8 <itoa>
			lcd_print(2,14,snum);
 80034bc:	4a13      	ldr	r2, [pc, #76]	@ (800350c <menu+0x20b8>)
 80034be:	210e      	movs	r1, #14
 80034c0:	2002      	movs	r0, #2
 80034c2:	f005 febd 	bl	8009240 <lcd_print>
 80034c6:	e04c      	b.n	8003562 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80034c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <menu+0x20e0>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d933      	bls.n	8003538 <menu+0x20e4>
 80034d0:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <menu+0x20e0>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b63      	cmp	r3, #99	@ 0x63
 80034d6:	d82f      	bhi.n	8003538 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <menu+0x20b0>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f005 feaf 	bl	8009240 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <menu+0x20e0>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	220a      	movs	r2, #10
 80034e8:	4908      	ldr	r1, [pc, #32]	@ (800350c <menu+0x20b8>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00a fd74 	bl	800dfd8 <itoa>
			lcd_print(2, 15, snum);
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <menu+0x20b8>)
 80034f2:	210f      	movs	r1, #15
 80034f4:	2002      	movs	r0, #2
 80034f6:	f005 fea3 	bl	8009240 <lcd_print>
 80034fa:	e032      	b.n	8003562 <menu+0x210e>
 80034fc:	200016cf 	.word	0x200016cf
 8003500:	20001cc0 	.word	0x20001cc0
 8003504:	20001acc 	.word	0x20001acc
 8003508:	200016d6 	.word	0x200016d6
 800350c:	2000105c 	.word	0x2000105c
 8003510:	40010800 	.word	0x40010800
 8003514:	200016ef 	.word	0x200016ef
 8003518:	20000fec 	.word	0x20000fec
 800351c:	200016ec 	.word	0x200016ec
 8003520:	200016c0 	.word	0x200016c0
 8003524:	20001cd4 	.word	0x20001cd4
 8003528:	20001ce8 	.word	0x20001ce8
 800352c:	200016d7 	.word	0x200016d7
 8003530:	20001cfc 	.word	0x20001cfc
 8003534:	200016d8 	.word	0x200016d8
		} else if(makineCalismaTmr <=  9) {
 8003538:	4b72      	ldr	r3, [pc, #456]	@ (8003704 <menu+0x22b0>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b09      	cmp	r3, #9
 800353e:	d810      	bhi.n	8003562 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003540:	4a71      	ldr	r2, [pc, #452]	@ (8003708 <menu+0x22b4>)
 8003542:	2101      	movs	r1, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f005 fe7b 	bl	8009240 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800354a:	4b6e      	ldr	r3, [pc, #440]	@ (8003704 <menu+0x22b0>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	220a      	movs	r2, #10
 8003550:	496e      	ldr	r1, [pc, #440]	@ (800370c <menu+0x22b8>)
 8003552:	4618      	mov	r0, r3
 8003554:	f00a fd40 	bl	800dfd8 <itoa>
			lcd_print(2, 16, snum);
 8003558:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <menu+0x22b8>)
 800355a:	2110      	movs	r1, #16
 800355c:	2002      	movs	r0, #2
 800355e:	f005 fe6f 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003562:	2102      	movs	r1, #2
 8003564:	486a      	ldr	r0, [pc, #424]	@ (8003710 <menu+0x22bc>)
 8003566:	f007 f9bf 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d115      	bne.n	800359c <menu+0x2148>
 8003570:	4b68      	ldr	r3, [pc, #416]	@ (8003714 <menu+0x22c0>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800357e:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <menu+0x22b0>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <menu+0x22b0>)
 8003588:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800358a:	4b5e      	ldr	r3, [pc, #376]	@ (8003704 <menu+0x22b0>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003590:	d902      	bls.n	8003598 <menu+0x2144>
				makineCalismaTmr = 0;
 8003592:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <menu+0x22b0>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003598:	f000 fca2 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800359c:	2104      	movs	r1, #4
 800359e:	485c      	ldr	r0, [pc, #368]	@ (8003710 <menu+0x22bc>)
 80035a0:	f007 f9a2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d115      	bne.n	80035d6 <menu+0x2182>
 80035aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <menu+0x22c0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80035b8:	4b52      	ldr	r3, [pc, #328]	@ (8003704 <menu+0x22b0>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <menu+0x22b0>)
 80035c2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80035c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003704 <menu+0x22b0>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2bb5      	cmp	r3, #181	@ 0xb5
 80035ca:	d902      	bls.n	80035d2 <menu+0x217e>
		   		makineCalismaTmr = 180;
 80035cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <menu+0x22b0>)
 80035ce:	22b4      	movs	r2, #180	@ 0xb4
 80035d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d2:	f000 fc85 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d6:	2108      	movs	r1, #8
 80035d8:	484d      	ldr	r0, [pc, #308]	@ (8003710 <menu+0x22bc>)
 80035da:	f007 f985 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10d      	bne.n	8003600 <menu+0x21ac>
 80035e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <menu+0x22c0>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80035f2:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <menu+0x22b0>)
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	4b48      	ldr	r3, [pc, #288]	@ (8003718 <menu+0x22c4>)
 80035f8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80035fa:	4b48      	ldr	r3, [pc, #288]	@ (800371c <menu+0x22c8>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003600:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <menu+0x22cc>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b1b      	cmp	r3, #27
 8003606:	d166      	bne.n	80036d6 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003608:	4a46      	ldr	r2, [pc, #280]	@ (8003724 <menu+0x22d0>)
 800360a:	2101      	movs	r1, #1
 800360c:	2001      	movs	r0, #1
 800360e:	f005 fe17 	bl	8009240 <lcd_print>

		if(buzzer == 0) {
 8003612:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <menu+0x22d4>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800361a:	4a44      	ldr	r2, [pc, #272]	@ (800372c <menu+0x22d8>)
 800361c:	2101      	movs	r1, #1
 800361e:	2002      	movs	r0, #2
 8003620:	f005 fe0e 	bl	8009240 <lcd_print>
 8003624:	e008      	b.n	8003638 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003626:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <menu+0x22d4>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d104      	bne.n	8003638 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 800362e:	4a40      	ldr	r2, [pc, #256]	@ (8003730 <menu+0x22dc>)
 8003630:	2101      	movs	r1, #1
 8003632:	2002      	movs	r0, #2
 8003634:	f005 fe04 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003638:	2102      	movs	r1, #2
 800363a:	4835      	ldr	r0, [pc, #212]	@ (8003710 <menu+0x22bc>)
 800363c:	f007 f954 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d115      	bne.n	8003672 <menu+0x221e>
 8003646:	4b33      	ldr	r3, [pc, #204]	@ (8003714 <menu+0x22c0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <menu+0x221e>
			buzzer = buzzer + 1;
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <menu+0x22d4>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <menu+0x22d4>)
 800365e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <menu+0x22d4>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d902      	bls.n	800366e <menu+0x221a>
				buzzer = 0;
 8003668:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <menu+0x22d4>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800366e:	f000 fc37 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003672:	2104      	movs	r1, #4
 8003674:	4826      	ldr	r0, [pc, #152]	@ (8003710 <menu+0x22bc>)
 8003676:	f007 f937 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <menu+0x2258>
 8003680:	4b24      	ldr	r3, [pc, #144]	@ (8003714 <menu+0x22c0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <menu+0x2258>
			buzzer = buzzer - 1;
 800368e:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <menu+0x22d4>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3b01      	subs	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <menu+0x22d4>)
 8003698:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <menu+0x22d4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <menu+0x2254>
		   		buzzer = 1;
 80036a2:	4b21      	ldr	r3, [pc, #132]	@ (8003728 <menu+0x22d4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036a8:	f000 fc1a 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ac:	2108      	movs	r1, #8
 80036ae:	4818      	ldr	r0, [pc, #96]	@ (8003710 <menu+0x22bc>)
 80036b0:	f007 f91a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <menu+0x2282>
 80036ba:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <menu+0x22c0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <menu+0x2282>
			eepromData[25] = buzzer;
 80036c8:	4b17      	ldr	r3, [pc, #92]	@ (8003728 <menu+0x22d4>)
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <menu+0x22c4>)
 80036ce:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <menu+0x22c8>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80036d6:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <menu+0x22cc>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b1c      	cmp	r3, #28
 80036dc:	f040 8088 	bne.w	80037f0 <menu+0x239c>
		calismaSayModu = 0;
 80036e0:	4b14      	ldr	r3, [pc, #80]	@ (8003734 <menu+0x22e0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80036e6:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <menu+0x22e4>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2001      	movs	r0, #1
 80036ec:	f005 fda8 	bl	8009240 <lcd_print>

		if(demoMode == 0) {
 80036f0:	4b12      	ldr	r3, [pc, #72]	@ (800373c <menu+0x22e8>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d123      	bne.n	8003740 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80036f8:	4a0c      	ldr	r2, [pc, #48]	@ (800372c <menu+0x22d8>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	2002      	movs	r0, #2
 80036fe:	f005 fd9f 	bl	8009240 <lcd_print>
 8003702:	e026      	b.n	8003752 <menu+0x22fe>
 8003704:	200016d8 	.word	0x200016d8
 8003708:	20001acc 	.word	0x20001acc
 800370c:	2000105c 	.word	0x2000105c
 8003710:	40010800 	.word	0x40010800
 8003714:	200016ef 	.word	0x200016ef
 8003718:	20000fec 	.word	0x20000fec
 800371c:	200016ec 	.word	0x200016ec
 8003720:	200016c0 	.word	0x200016c0
 8003724:	20000128 	.word	0x20000128
 8003728:	200016dc 	.word	0x200016dc
 800372c:	200019a0 	.word	0x200019a0
 8003730:	200019b4 	.word	0x200019b4
 8003734:	200016df 	.word	0x200016df
 8003738:	2000013c 	.word	0x2000013c
 800373c:	200016de 	.word	0x200016de
		} else if(demoMode == 1) {
 8003740:	4b80      	ldr	r3, [pc, #512]	@ (8003944 <menu+0x24f0>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d104      	bne.n	8003752 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003748:	4a7f      	ldr	r2, [pc, #508]	@ (8003948 <menu+0x24f4>)
 800374a:	2101      	movs	r1, #1
 800374c:	2002      	movs	r0, #2
 800374e:	f005 fd77 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003752:	2102      	movs	r1, #2
 8003754:	487d      	ldr	r0, [pc, #500]	@ (800394c <menu+0x24f8>)
 8003756:	f007 f8c7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800375a:	4603      	mov	r3, r0
 800375c:	2b01      	cmp	r3, #1
 800375e:	d115      	bne.n	800378c <menu+0x2338>
 8003760:	4b7b      	ldr	r3, [pc, #492]	@ (8003950 <menu+0x24fc>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <menu+0x2338>
			demoMode = demoMode + 1;
 800376e:	4b75      	ldr	r3, [pc, #468]	@ (8003944 <menu+0x24f0>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <menu+0x24f0>)
 8003778:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800377a:	4b72      	ldr	r3, [pc, #456]	@ (8003944 <menu+0x24f0>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d902      	bls.n	8003788 <menu+0x2334>
				demoMode = 0;
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <menu+0x24f0>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003788:	f000 fbaa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800378c:	2104      	movs	r1, #4
 800378e:	486f      	ldr	r0, [pc, #444]	@ (800394c <menu+0x24f8>)
 8003790:	f007 f8aa 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <menu+0x2372>
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <menu+0x24fc>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <menu+0x2372>
			demoMode = demoMode - 1;
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <menu+0x24f0>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <menu+0x24f0>)
 80037b2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <menu+0x24f0>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <menu+0x236e>
		   		demoMode = 1;
 80037bc:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <menu+0x24f0>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037c2:	f000 fb8d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c6:	2108      	movs	r1, #8
 80037c8:	4860      	ldr	r0, [pc, #384]	@ (800394c <menu+0x24f8>)
 80037ca:	f007 f88d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10d      	bne.n	80037f0 <menu+0x239c>
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <menu+0x24fc>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <menu+0x239c>
			eepromData[26] = demoMode;
 80037e2:	4b58      	ldr	r3, [pc, #352]	@ (8003944 <menu+0x24f0>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003954 <menu+0x2500>)
 80037e8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80037ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003958 <menu+0x2504>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80037f0:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <menu+0x2508>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b1d      	cmp	r3, #29
 80037f6:	f040 80d5 	bne.w	80039a4 <menu+0x2550>
		finalCount=0;
 80037fa:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <menu+0x250c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003800:	4b58      	ldr	r3, [pc, #352]	@ (8003964 <menu+0x2510>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d135      	bne.n	8003874 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <menu+0x2514>)
 800380a:	2101      	movs	r1, #1
 800380c:	2001      	movs	r0, #1
 800380e:	f005 fd17 	bl	8009240 <lcd_print>

			if(demoMode == 1) {
 8003812:	4b4c      	ldr	r3, [pc, #304]	@ (8003944 <menu+0x24f0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d113      	bne.n	8003842 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800381a:	4b54      	ldr	r3, [pc, #336]	@ (800396c <menu+0x2518>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4613      	mov	r3, r2
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	1a9a      	subs	r2, r3, r2
 8003826:	4b4e      	ldr	r3, [pc, #312]	@ (8003960 <menu+0x250c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a4c      	ldr	r2, [pc, #304]	@ (8003960 <menu+0x250c>)
 800382e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003830:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <menu+0x251c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <menu+0x250c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <menu+0x250c>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e012      	b.n	8003868 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003842:	4b4c      	ldr	r3, [pc, #304]	@ (8003974 <menu+0x2520>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	4613      	mov	r3, r2
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	1a9a      	subs	r2, r3, r2
 800384e:	4b44      	ldr	r3, [pc, #272]	@ (8003960 <menu+0x250c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a42      	ldr	r2, [pc, #264]	@ (8003960 <menu+0x250c>)
 8003856:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003858:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <menu+0x2524>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b40      	ldr	r3, [pc, #256]	@ (8003960 <menu+0x250c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4413      	add	r3, r2
 8003864:	4a3e      	ldr	r2, [pc, #248]	@ (8003960 <menu+0x250c>)
 8003866:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003868:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <menu+0x250c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fa89 	bl	8003d84 <displayCycleOnLCD>
 8003872:	e00d      	b.n	8003890 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003874:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <menu+0x2510>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d109      	bne.n	8003890 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 800387c:	4a3a      	ldr	r2, [pc, #232]	@ (8003968 <menu+0x2514>)
 800387e:	2101      	movs	r1, #1
 8003880:	2001      	movs	r0, #1
 8003882:	f005 fcdd 	bl	8009240 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003886:	4a3d      	ldr	r2, [pc, #244]	@ (800397c <menu+0x2528>)
 8003888:	2101      	movs	r1, #1
 800388a:	2002      	movs	r0, #2
 800388c:	f005 fcd8 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003890:	2102      	movs	r1, #2
 8003892:	482e      	ldr	r0, [pc, #184]	@ (800394c <menu+0x24f8>)
 8003894:	f007 f828 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d115      	bne.n	80038ca <menu+0x2476>
 800389e:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <menu+0x24fc>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <menu+0x2510>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <menu+0x2510>)
 80038b6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80038b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <menu+0x2510>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d902      	bls.n	80038c6 <menu+0x2472>
				calismaSayModu = 0;
 80038c0:	4b28      	ldr	r3, [pc, #160]	@ (8003964 <menu+0x2510>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c6:	f000 fb0b 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ca:	2104      	movs	r1, #4
 80038cc:	481f      	ldr	r0, [pc, #124]	@ (800394c <menu+0x24f8>)
 80038ce:	f007 f80b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <menu+0x24b0>
 80038d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <menu+0x24fc>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <menu+0x2510>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <menu+0x2510>)
 80038f0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <menu+0x2510>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <menu+0x24ac>
		   		calismaSayModu = 1;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <menu+0x2510>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003900:	f000 faee 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2108      	movs	r1, #8
 8003906:	4811      	ldr	r0, [pc, #68]	@ (800394c <menu+0x24f8>)
 8003908:	f006 ffee 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d148      	bne.n	80039a4 <menu+0x2550>
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <menu+0x24fc>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d041      	beq.n	80039a4 <menu+0x2550>
			if(demoMode == 1) {
 8003920:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <menu+0x24f0>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d12b      	bne.n	8003980 <menu+0x252c>
				eepromData[28] = 0;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <menu+0x2500>)
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <menu+0x2500>)
 8003930:	2200      	movs	r2, #0
 8003932:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003934:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <menu+0x251c>)
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <menu+0x2518>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e02a      	b.n	8003998 <menu+0x2544>
 8003942:	bf00      	nop
 8003944:	200016de 	.word	0x200016de
 8003948:	200019b4 	.word	0x200019b4
 800394c:	40010800 	.word	0x40010800
 8003950:	200016ef 	.word	0x200016ef
 8003954:	20000fec 	.word	0x20000fec
 8003958:	200016ec 	.word	0x200016ec
 800395c:	200016c0 	.word	0x200016c0
 8003960:	200016bc 	.word	0x200016bc
 8003964:	200016df 	.word	0x200016df
 8003968:	20001d10 	.word	0x20001d10
 800396c:	200016bb 	.word	0x200016bb
 8003970:	200016b9 	.word	0x200016b9
 8003974:	200016ba 	.word	0x200016ba
 8003978:	200016b8 	.word	0x200016b8
 800397c:	20001d24 	.word	0x20001d24
			} else {
				eepromData[27] = 0;
 8003980:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab0 <menu+0x265c>)
 8003982:	2200      	movs	r2, #0
 8003984:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <menu+0x265c>)
 8003988:	2200      	movs	r2, #0
 800398a:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 800398c:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <menu+0x2660>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <menu+0x2664>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003998:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <menu+0x2668>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800399e:	4b48      	ldr	r3, [pc, #288]	@ (8003ac0 <menu+0x266c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80039a4:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <menu+0x2670>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b1e      	cmp	r3, #30
 80039aa:	d16a      	bne.n	8003a82 <menu+0x262e>
		calismaSayModu = 0;
 80039ac:	4b43      	ldr	r3, [pc, #268]	@ (8003abc <menu+0x2668>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80039b2:	4a45      	ldr	r2, [pc, #276]	@ (8003ac8 <menu+0x2674>)
 80039b4:	2101      	movs	r1, #1
 80039b6:	2001      	movs	r0, #1
 80039b8:	f005 fc42 	bl	8009240 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80039bc:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <menu+0x2678>)
 80039be:	2101      	movs	r1, #1
 80039c0:	2002      	movs	r0, #2
 80039c2:	f005 fc3d 	bl	8009240 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c6:	2102      	movs	r1, #2
 80039c8:	4841      	ldr	r0, [pc, #260]	@ (8003ad0 <menu+0x267c>)
 80039ca:	f006 ff8d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11c      	bne.n	8003a0e <menu+0x25ba>
 80039d4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad4 <menu+0x2680>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <menu+0x25ba>
			dilSecim = dilSecim + 1;
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <menu+0x2684>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <menu+0x2684>)
 80039ec:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039ee:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <menu+0x2684>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d902      	bls.n	80039fc <menu+0x25a8>
				dilSecim = 0;
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <menu+0x2684>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80039fc:	f003 ff70 	bl	80078e0 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003a00:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <menu+0x2684>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f002 fae5 	bl	8005fd4 <loadMenuTexts>

			bekle();
 8003a0a:	f000 fa69 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0e:	2104      	movs	r1, #4
 8003a10:	482f      	ldr	r0, [pc, #188]	@ (8003ad0 <menu+0x267c>)
 8003a12:	f006 ff69 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d11c      	bne.n	8003a56 <menu+0x2602>
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <menu+0x2680>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <menu+0x2684>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <menu+0x2684>)
 8003a34:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a36:	4b28      	ldr	r3, [pc, #160]	@ (8003ad8 <menu+0x2684>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <menu+0x25f0>
		   		dilSecim = 1;
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <menu+0x2684>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003a44:	f003 ff4c 	bl	80078e0 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <menu+0x2684>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f002 fac1 	bl	8005fd4 <loadMenuTexts>

			bekle();
 8003a52:	f000 fa45 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a56:	2108      	movs	r1, #8
 8003a58:	481d      	ldr	r0, [pc, #116]	@ (8003ad0 <menu+0x267c>)
 8003a5a:	f006 ff45 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10e      	bne.n	8003a82 <menu+0x262e>
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <menu+0x2680>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003a72:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <menu+0x2684>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <menu+0x265c>)
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <menu+0x266c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <menu+0x2670>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b1f      	cmp	r3, #31
 8003a88:	f040 8087 	bne.w	8003b9a <menu+0x2746>
		calismaSayModu = 0;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <menu+0x2668>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <menu+0x2688>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2001      	movs	r0, #1
 8003a98:	f005 fbd2 	bl	8009240 <lcd_print>

		if(iotMode == 0) {
 8003a9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <menu+0x268c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d121      	bne.n	8003ae8 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae4 <menu+0x2690>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f005 fbc9 	bl	8009240 <lcd_print>
 8003aae:	e024      	b.n	8003afa <menu+0x26a6>
 8003ab0:	20000fec 	.word	0x20000fec
 8003ab4:	200016b8 	.word	0x200016b8
 8003ab8:	200016ba 	.word	0x200016ba
 8003abc:	200016df 	.word	0x200016df
 8003ac0:	200016ec 	.word	0x200016ec
 8003ac4:	200016c0 	.word	0x200016c0
 8003ac8:	20001d38 	.word	0x20001d38
 8003acc:	20001d4c 	.word	0x20001d4c
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	200016ef 	.word	0x200016ef
 8003ad8:	200016e0 	.word	0x200016e0
 8003adc:	20000150 	.word	0x20000150
 8003ae0:	200016eb 	.word	0x200016eb
 8003ae4:	200019a0 	.word	0x200019a0
		} else if(iotMode == 1) {
 8003ae8:	4b99      	ldr	r3, [pc, #612]	@ (8003d50 <menu+0x28fc>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d104      	bne.n	8003afa <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003af0:	4a98      	ldr	r2, [pc, #608]	@ (8003d54 <menu+0x2900>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	2002      	movs	r0, #2
 8003af6:	f005 fba3 	bl	8009240 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afa:	2102      	movs	r1, #2
 8003afc:	4896      	ldr	r0, [pc, #600]	@ (8003d58 <menu+0x2904>)
 8003afe:	f006 fef3 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d115      	bne.n	8003b34 <menu+0x26e0>
 8003b08:	4b94      	ldr	r3, [pc, #592]	@ (8003d5c <menu+0x2908>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f083 0301 	eor.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00e      	beq.n	8003b34 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003b16:	4b8e      	ldr	r3, [pc, #568]	@ (8003d50 <menu+0x28fc>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d50 <menu+0x28fc>)
 8003b20:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003b22:	4b8b      	ldr	r3, [pc, #556]	@ (8003d50 <menu+0x28fc>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d902      	bls.n	8003b30 <menu+0x26dc>
				iotMode = 0;
 8003b2a:	4b89      	ldr	r3, [pc, #548]	@ (8003d50 <menu+0x28fc>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b30:	f000 f9d6 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b34:	2104      	movs	r1, #4
 8003b36:	4888      	ldr	r0, [pc, #544]	@ (8003d58 <menu+0x2904>)
 8003b38:	f006 fed6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d115      	bne.n	8003b6e <menu+0x271a>
 8003b42:	4b86      	ldr	r3, [pc, #536]	@ (8003d5c <menu+0x2908>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <menu+0x271a>
			iotMode = iotMode - 1;
 8003b50:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <menu+0x28fc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b7d      	ldr	r3, [pc, #500]	@ (8003d50 <menu+0x28fc>)
 8003b5a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <menu+0x28fc>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <menu+0x2716>
		   		iotMode = 1;
 8003b64:	4b7a      	ldr	r3, [pc, #488]	@ (8003d50 <menu+0x28fc>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b6a:	f000 f9b9 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b6e:	2108      	movs	r1, #8
 8003b70:	4879      	ldr	r0, [pc, #484]	@ (8003d58 <menu+0x2904>)
 8003b72:	f006 feb9 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10e      	bne.n	8003b9a <menu+0x2746>
 8003b7c:	4b77      	ldr	r3, [pc, #476]	@ (8003d5c <menu+0x2908>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f083 0301 	eor.w	r3, r3, #1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <menu+0x2746>
			eepromData[48] = iotMode;
 8003b8a:	4b71      	ldr	r3, [pc, #452]	@ (8003d50 <menu+0x28fc>)
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <menu+0x290c>)
 8003b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003b94:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <menu+0x2910>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003b9a:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <menu+0x2914>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d127      	bne.n	8003bf2 <menu+0x279e>
		calismaSayModu = 0;
 8003ba2:	4b72      	ldr	r3, [pc, #456]	@ (8003d6c <menu+0x2918>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003ba8:	4a71      	ldr	r2, [pc, #452]	@ (8003d70 <menu+0x291c>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f005 fb47 	bl	8009240 <lcd_print>

		convertArrays(1);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f7fc fe78 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003bb8:	2032      	movs	r0, #50	@ 0x32
 8003bba:	f006 f8b9 	bl	8009d30 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f7fd fbec 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4864      	ldr	r0, [pc, #400]	@ (8003d58 <menu+0x2904>)
 8003bc8:	f006 fe8e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10f      	bne.n	8003bf2 <menu+0x279e>
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4860      	ldr	r0, [pc, #384]	@ (8003d58 <menu+0x2904>)
 8003bd6:	f006 fe87 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <menu+0x279e>
 8003be0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d5c <menu+0x2908>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003bee:	f004 fad3 	bl	8008198 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <menu+0x2914>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b21      	cmp	r3, #33	@ 0x21
 8003bf8:	d12b      	bne.n	8003c52 <menu+0x27fe>
		calismaSayModu = 0;
 8003bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003d6c <menu+0x2918>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003c00:	2002      	movs	r0, #2
 8003c02:	f7fc fe51 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003c06:	2032      	movs	r0, #50	@ 0x32
 8003c08:	f006 f892 	bl	8009d30 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f7fd fbc5 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c12:	2102      	movs	r1, #2
 8003c14:	4850      	ldr	r0, [pc, #320]	@ (8003d58 <menu+0x2904>)
 8003c16:	f006 fe67 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d118      	bne.n	8003c52 <menu+0x27fe>
 8003c20:	2104      	movs	r1, #4
 8003c22:	484d      	ldr	r0, [pc, #308]	@ (8003d58 <menu+0x2904>)
 8003c24:	f006 fe60 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d111      	bne.n	8003c52 <menu+0x27fe>
 8003c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d5c <menu+0x2908>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f083 0301 	eor.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <menu+0x27fe>
			takeWifiSSID();
 8003c3c:	f004 fcb8 	bl	80085b0 <takeWifiSSID>

			convertArrays(2);
 8003c40:	2002      	movs	r0, #2
 8003c42:	f7fc fe31 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003c46:	2032      	movs	r0, #50	@ 0x32
 8003c48:	f006 f872 	bl	8009d30 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f7fd fba5 	bl	800139c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003c52:	4b45      	ldr	r3, [pc, #276]	@ (8003d68 <menu+0x2914>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b22      	cmp	r3, #34	@ 0x22
 8003c58:	d12b      	bne.n	8003cb2 <menu+0x285e>
		calismaSayModu = 0;
 8003c5a:	4b44      	ldr	r3, [pc, #272]	@ (8003d6c <menu+0x2918>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003c60:	2003      	movs	r0, #3
 8003c62:	f7fc fe21 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003c66:	2032      	movs	r0, #50	@ 0x32
 8003c68:	f006 f862 	bl	8009d30 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f7fd fb95 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c72:	2102      	movs	r1, #2
 8003c74:	4838      	ldr	r0, [pc, #224]	@ (8003d58 <menu+0x2904>)
 8003c76:	f006 fe37 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d118      	bne.n	8003cb2 <menu+0x285e>
 8003c80:	2104      	movs	r1, #4
 8003c82:	4835      	ldr	r0, [pc, #212]	@ (8003d58 <menu+0x2904>)
 8003c84:	f006 fe30 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d111      	bne.n	8003cb2 <menu+0x285e>
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <menu+0x2908>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <menu+0x285e>
			takeWifiPass();
 8003c9c:	f004 fe34 	bl	8008908 <takeWifiPass>

			convertArrays(3);
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	f7fc fe01 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003ca6:	2032      	movs	r0, #50	@ 0x32
 8003ca8:	f006 f842 	bl	8009d30 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003cac:	2003      	movs	r0, #3
 8003cae:	f7fd fb75 	bl	800139c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <menu+0x2914>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b23      	cmp	r3, #35	@ 0x23
 8003cb8:	d146      	bne.n	8003d48 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003cba:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <menu+0x2920>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f005 fabe 	bl	8009240 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d78 <menu+0x2924>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f005 fab9 	bl	8009240 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003cce:	2108      	movs	r1, #8
 8003cd0:	4821      	ldr	r0, [pc, #132]	@ (8003d58 <menu+0x2904>)
 8003cd2:	f006 fe09 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d135      	bne.n	8003d48 <menu+0x28f4>
			menuGiris = 0;
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <menu+0x2928>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003ce2:	f006 f81b 	bl	8009d1c <HAL_GetTick>
 8003ce6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003ce8:	e007      	b.n	8003cfa <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003cea:	f006 f817 	bl	8009d1c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cf8:	d806      	bhi.n	8003d08 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003cfa:	4821      	ldr	r0, [pc, #132]	@ (8003d80 <menu+0x292c>)
 8003cfc:	f007 fc1d 	bl	800b53a <HAL_I2C_GetError>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d0f1      	beq.n	8003cea <menu+0x2896>
 8003d06:	e000      	b.n	8003d0a <menu+0x28b6>
			        break;
 8003d08:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003d0a:	f006 f807 	bl	8009d1c <HAL_GetTick>
 8003d0e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003d10:	e007      	b.n	8003d22 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003d12:	f006 f803 	bl	8009d1c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d20:	d806      	bhi.n	8003d30 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003d22:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <menu+0x292c>)
 8003d24:	f007 fbfc 	bl	800b520 <HAL_I2C_GetState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d1f1      	bne.n	8003d12 <menu+0x28be>
 8003d2e:	e000      	b.n	8003d32 <menu+0x28de>
			        break;
 8003d30:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f7fc fcb6 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003d38:	f005 faae 	bl	8009298 <lcd_clear>
			HAL_Delay(500);
 8003d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d40:	f005 fff6 	bl	8009d30 <HAL_Delay>
			NVIC_SystemReset();
 8003d44:	f7fd fb70 	bl	8001428 <__NVIC_SystemReset>
		}
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200016eb 	.word	0x200016eb
 8003d54:	200019b4 	.word	0x200019b4
 8003d58:	40010800 	.word	0x40010800
 8003d5c:	200016ef 	.word	0x200016ef
 8003d60:	20000fec 	.word	0x20000fec
 8003d64:	200016ec 	.word	0x200016ec
 8003d68:	200016c0 	.word	0x200016c0
 8003d6c:	200016df 	.word	0x200016df
 8003d70:	20001ec8 	.word	0x20001ec8
 8003d74:	20001d60 	.word	0x20001d60
 8003d78:	20001d74 	.word	0x20001d74
 8003d7c:	200016dd 	.word	0x200016dd
 8003d80:	20001f40 	.word	0x20001f40

08003d84 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	@ 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	491c      	ldr	r1, [pc, #112]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f00a f921 	bl	800dfd8 <itoa>

    int length = strlen(snum);
 8003d96:	481a      	ldr	r0, [pc, #104]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003d98:	f7fc fa44 	bl	8000224 <strlen>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f1c3 0310 	rsb	r3, r3, #16
 8003da6:	0fda      	lsrs	r2, r3, #31
 8003da8:	4413      	add	r3, r2
 8003daa:	105b      	asrs	r3, r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	2210      	movs	r2, #16
 8003db4:	2120      	movs	r1, #32
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00a fa60 	bl	800e27c <memset>
    displayLine[16] = '\0'; // Null terminator
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	e00d      	b.n	8003de2 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	4413      	add	r3, r2
 8003dcc:	490c      	ldr	r1, [pc, #48]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	440a      	add	r2, r1
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	3328      	adds	r3, #40	@ 0x28
 8003dd6:	443b      	add	r3, r7
 8003dd8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	3301      	adds	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dbed      	blt.n	8003dc6 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	461a      	mov	r2, r3
 8003df0:	2101      	movs	r1, #1
 8003df2:	2002      	movs	r0, #2
 8003df4:	f005 fa24 	bl	8009240 <lcd_print>
}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	@ 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000105c 	.word	0x2000105c

08003e04 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003e14:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	2002      	movs	r0, #2
 8003e1a:	f005 fa11 	bl	8009240 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003e1e:	e03e      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==2) {
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d105      	bne.n	8003e32 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e28:	2102      	movs	r1, #2
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f005 fa08 	bl	8009240 <lcd_print>
}
 8003e30:	e035      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==3) {
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d105      	bne.n	8003e44 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	2002      	movs	r0, #2
 8003e3e:	f005 f9ff 	bl	8009240 <lcd_print>
}
 8003e42:	e02c      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==4) {
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d105      	bne.n	8003e56 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	2002      	movs	r0, #2
 8003e50:	f005 f9f6 	bl	8009240 <lcd_print>
}
 8003e54:	e023      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==5) {
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d105      	bne.n	8003e68 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e5e:	2105      	movs	r1, #5
 8003e60:	2002      	movs	r0, #2
 8003e62:	f005 f9ed 	bl	8009240 <lcd_print>
}
 8003e66:	e01a      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==6) {
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d105      	bne.n	8003e7a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e70:	2106      	movs	r1, #6
 8003e72:	2002      	movs	r0, #2
 8003e74:	f005 f9e4 	bl	8009240 <lcd_print>
}
 8003e78:	e011      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if (y==7) {
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b07      	cmp	r3, #7
 8003e7e:	d10e      	bne.n	8003e9e <lcdUpdate+0x9a>
		lcd_clear();
 8003e80:	f005 fa0a 	bl	8009298 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003e84:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <lcdUpdate+0xa8>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f005 f9d9 	bl	8009240 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <lcdUpdate+0xac>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	2002      	movs	r0, #2
 8003e94:	f005 f9d4 	bl	8009240 <lcd_print>
		HAL_Delay(10);
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f005 ff49 	bl	8009d30 <HAL_Delay>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	0800ede0 	.word	0x0800ede0
 8003eac:	200000c4 	.word	0x200000c4
 8003eb0:	200000d8 	.word	0x200000d8

08003eb4 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <checkLCDBacklight+0x24>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <checkLCDBacklight+0x28>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ec4:	d903      	bls.n	8003ece <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f005 fa06 	bl	80092d8 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003ecc:	e002      	b.n	8003ed4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f005 fa02 	bl	80092d8 <lcd_backlight>
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20001698 	.word	0x20001698
 8003edc:	200016b4 	.word	0x200016b4

08003ee0 <bekle>:

void bekle() {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
	timer1=millis;
 8003ee4:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <bekle+0x124>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a47      	ldr	r2, [pc, #284]	@ (8004008 <bekle+0x128>)
 8003eea:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003eec:	e002      	b.n	8003ef4 <bekle+0x14>
    	butonKontrol = 1;
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <bekle+0x12c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4846      	ldr	r0, [pc, #280]	@ (8004010 <bekle+0x130>)
 8003ef8:	f006 fcf6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d109      	bne.n	8003f16 <bekle+0x36>
 8003f02:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <bekle+0x124>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b40      	ldr	r3, [pc, #256]	@ (8004008 <bekle+0x128>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d0ef      	beq.n	8003eee <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f0e:	e002      	b.n	8003f16 <bekle+0x36>
    	butonKontrol = 1;
 8003f10:	4b3e      	ldr	r3, [pc, #248]	@ (800400c <bekle+0x12c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f16:	2108      	movs	r1, #8
 8003f18:	483e      	ldr	r0, [pc, #248]	@ (8004014 <bekle+0x134>)
 8003f1a:	f006 fce5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d109      	bne.n	8003f38 <bekle+0x58>
 8003f24:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <bekle+0x124>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <bekle+0x128>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d0ef      	beq.n	8003f10 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f30:	e002      	b.n	8003f38 <bekle+0x58>
    	butonKontrol = 1;
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <bekle+0x12c>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4835      	ldr	r0, [pc, #212]	@ (8004010 <bekle+0x130>)
 8003f3c:	f006 fcd4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d109      	bne.n	8003f5a <bekle+0x7a>
 8003f46:	4b2f      	ldr	r3, [pc, #188]	@ (8004004 <bekle+0x124>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <bekle+0x128>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d0ef      	beq.n	8003f32 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f52:	e002      	b.n	8003f5a <bekle+0x7a>
    	butonKontrol = 1;
 8003f54:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <bekle+0x12c>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	482c      	ldr	r0, [pc, #176]	@ (8004010 <bekle+0x130>)
 8003f5e:	f006 fcc3 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d109      	bne.n	8003f7c <bekle+0x9c>
 8003f68:	4b26      	ldr	r3, [pc, #152]	@ (8004004 <bekle+0x124>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <bekle+0x128>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d0ef      	beq.n	8003f54 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f74:	e002      	b.n	8003f7c <bekle+0x9c>
    	butonKontrol = 1;
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <bekle+0x12c>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4824      	ldr	r0, [pc, #144]	@ (8004010 <bekle+0x130>)
 8003f80:	f006 fcb2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d109      	bne.n	8003f9e <bekle+0xbe>
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <bekle+0x124>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <bekle+0x128>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d0ef      	beq.n	8003f76 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f96:	e002      	b.n	8003f9e <bekle+0xbe>
    	butonKontrol = 1;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <bekle+0x12c>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f9e:	2180      	movs	r1, #128	@ 0x80
 8003fa0:	481c      	ldr	r0, [pc, #112]	@ (8004014 <bekle+0x134>)
 8003fa2:	f006 fca1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <bekle+0xe0>
 8003fac:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <bekle+0x124>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <bekle+0x128>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d0ef      	beq.n	8003f98 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fb8:	e002      	b.n	8003fc0 <bekle+0xe0>
    	butonKontrol = 1;
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <bekle+0x12c>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fc4:	4813      	ldr	r0, [pc, #76]	@ (8004014 <bekle+0x134>)
 8003fc6:	f006 fc8f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <bekle+0x104>
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <bekle+0x124>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <bekle+0x128>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0ee      	beq.n	8003fba <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fdc:	e002      	b.n	8003fe4 <bekle+0x104>
    	butonKontrol = 1;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <bekle+0x12c>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fe8:	480a      	ldr	r0, [pc, #40]	@ (8004014 <bekle+0x134>)
 8003fea:	f006 fc7d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <bekle+0x120>
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <bekle+0x124>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <bekle+0x128>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d0ee      	beq.n	8003fde <bekle+0xfe>
    }

}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20001698 	.word	0x20001698
 8004008:	200016a0 	.word	0x200016a0
 800400c:	200016ef 	.word	0x200016ef
 8004010:	40010800 	.word	0x40010800
 8004014:	40011000 	.word	0x40011000

08004018 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800401c:	2101      	movs	r1, #1
 800401e:	4815      	ldr	r0, [pc, #84]	@ (8004074 <buttonCheck+0x5c>)
 8004020:	f006 fc62 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d01b      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800402a:	2108      	movs	r1, #8
 800402c:	4812      	ldr	r0, [pc, #72]	@ (8004078 <buttonCheck+0x60>)
 800402e:	f006 fc5b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d014      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004038:	2102      	movs	r1, #2
 800403a:	480e      	ldr	r0, [pc, #56]	@ (8004074 <buttonCheck+0x5c>)
 800403c:	f006 fc54 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d00d      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004046:	2104      	movs	r1, #4
 8004048:	480a      	ldr	r0, [pc, #40]	@ (8004074 <buttonCheck+0x5c>)
 800404a:	f006 fc4d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d006      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004054:	2108      	movs	r1, #8
 8004056:	4807      	ldr	r0, [pc, #28]	@ (8004074 <buttonCheck+0x5c>)
 8004058:	f006 fc46 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d104      	bne.n	800406c <buttonCheck+0x54>
		backLightTimer = 0;
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <buttonCheck+0x64>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
		return 1;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <buttonCheck+0x56>
	}
	return 0;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40010800 	.word	0x40010800
 8004078:	40011000 	.word	0x40011000
 800407c:	200016b4 	.word	0x200016b4

08004080 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004084:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <checkBasincSalteri+0x54>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <checkBasincSalteri+0x12>
		basincVar=1;
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <checkBasincSalteri+0x58>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <checkBasincSalteri+0x54>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d119      	bne.n	80040ce <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800409a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800409e:	480f      	ldr	r0, [pc, #60]	@ (80040dc <checkBasincSalteri+0x5c>)
 80040a0:	f006 fc22 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <checkBasincSalteri+0x60>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <checkBasincSalteri+0x64>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d90a      	bls.n	80040ce <checkBasincSalteri+0x4e>
				basincVar=1;
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <checkBasincSalteri+0x58>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80040be:	e006      	b.n	80040ce <checkBasincSalteri+0x4e>
			timer5=millis;
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <checkBasincSalteri+0x60>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <checkBasincSalteri+0x64>)
 80040c6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <checkBasincSalteri+0x58>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200016c7 	.word	0x200016c7
 80040d8:	200016c3 	.word	0x200016c3
 80040dc:	40011000 	.word	0x40011000
 80040e0:	20001698 	.word	0x20001698
 80040e4:	200016b0 	.word	0x200016b0

080040e8 <checkBasGonder>:

void checkBasGonder() {
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <checkBasGonder+0x74>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10b      	bne.n	800410c <checkBasGonder+0x24>
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <checkBasGonder+0x78>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <checkBasGonder+0x24>
 80040fc:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <checkBasGonder+0x7c>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004104:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <checkBasGonder+0x80>)
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e009      	b.n	8004120 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800410c:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <checkBasGonder+0x78>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f083 0301 	eor.w	r3, r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800411a:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <checkBasGonder+0x80>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004120:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <checkBasGonder+0x74>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10b      	bne.n	8004140 <checkBasGonder+0x58>
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <checkBasGonder+0x84>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <checkBasGonder+0x58>
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <checkBasGonder+0x7c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004138:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <checkBasGonder+0x88>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800413e:	e009      	b.n	8004154 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <checkBasGonder+0x84>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f083 0301 	eor.w	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <checkBasGonder+0x88>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	200016c1 	.word	0x200016c1
 8004160:	200016f5 	.word	0x200016f5
 8004164:	200016cf 	.word	0x200016cf
 8004168:	200016fc 	.word	0x200016fc
 800416c:	200016f8 	.word	0x200016f8
 8004170:	200016fd 	.word	0x200016fd

08004174 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <checkKapiSecimleri+0x98>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004180:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <checkKapiSecimleri+0x9c>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004186:	4b21      	ldr	r3, [pc, #132]	@ (800420c <checkKapiSecimleri+0x98>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10e      	bne.n	80041ac <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800418e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004192:	4820      	ldr	r0, [pc, #128]	@ (8004214 <checkKapiSecimleri+0xa0>)
 8004194:	f006 fba8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800419e:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e002      	b.n	80041ac <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <checkKapiSecimleri+0x98>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d10e      	bne.n	80041d2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80041b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041b8:	4816      	ldr	r0, [pc, #88]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041ba:	f006 fb95 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <checkKapiSecimleri+0x98>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d116      	bne.n	8004208 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80041da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041de:	480d      	ldr	r0, [pc, #52]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041e0:	f006 fb82 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <checkKapiSecimleri+0x8e>
 80041ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041ee:	4809      	ldr	r0, [pc, #36]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041f0:	f006 fb7a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004200:	e002      	b.n	8004208 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004202:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <checkKapiSecimleri+0x9c>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200016c8 	.word	0x200016c8
 8004210:	20001712 	.word	0x20001712
 8004214:	40010800 	.word	0x40010800

08004218 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800421c:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <checkAktifCalisma+0x1a0>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f041 8343 	bne.w	80058ac <checkAktifCalisma+0x1694>
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <checkAktifCalisma+0x1a4>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f041 833e 	bne.w	80058ac <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004230:	4b63      	ldr	r3, [pc, #396]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <checkAktifCalisma+0x56>
 8004238:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <checkAktifCalisma+0x1ac>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <checkAktifCalisma+0x56>
 8004240:	4b61      	ldr	r3, [pc, #388]	@ (80043c8 <checkAktifCalisma+0x1b0>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <checkAktifCalisma+0x46>
 8004248:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <checkAktifCalisma+0x1b4>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <checkAktifCalisma+0x46>
 8004256:	4b5e      	ldr	r3, [pc, #376]	@ (80043d0 <checkAktifCalisma+0x1b8>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d007      	beq.n	800426e <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <checkAktifCalisma+0x1bc>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01c      	beq.n	80042a0 <checkAktifCalisma+0x88>
 8004266:	4b5c      	ldr	r3, [pc, #368]	@ (80043d8 <checkAktifCalisma+0x1c0>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d118      	bne.n	80042a0 <checkAktifCalisma+0x88>
 800426e:	4b5b      	ldr	r3, [pc, #364]	@ (80043dc <checkAktifCalisma+0x1c4>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <checkAktifCalisma+0x66>
 8004276:	4b5a      	ldr	r3, [pc, #360]	@ (80043e0 <checkAktifCalisma+0x1c8>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <checkAktifCalisma+0x88>
 800427e:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <checkAktifCalisma+0x1cc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004286:	2201      	movs	r2, #1
 8004288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800428c:	4856      	ldr	r0, [pc, #344]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 800428e:	f006 fb42 	bl	800a916 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004292:	4b56      	ldr	r3, [pc, #344]	@ (80043ec <checkAktifCalisma+0x1d4>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004298:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <checkAktifCalisma+0x1d8>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042a6:	4850      	ldr	r0, [pc, #320]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80042a8:	f006 fb35 	bl	800a916 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80042ac:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <checkAktifCalisma+0x1d4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80042b2:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <checkAktifCalisma+0x1a4>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d164      	bne.n	8004384 <checkAktifCalisma+0x16c>
 80042ba:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <checkAktifCalisma+0x1c8>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <checkAktifCalisma+0xb2>
 80042c2:	4b46      	ldr	r3, [pc, #280]	@ (80043dc <checkAktifCalisma+0x1c4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d05c      	beq.n	8004384 <checkAktifCalisma+0x16c>
 80042ca:	4b46      	ldr	r3, [pc, #280]	@ (80043e4 <checkAktifCalisma+0x1cc>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d058      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80042d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042d6:	4844      	ldr	r0, [pc, #272]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80042d8:	f006 fb06 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <checkAktifCalisma+0xd2>
 80042e2:	4b44      	ldr	r3, [pc, #272]	@ (80043f4 <checkAktifCalisma+0x1dc>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04c      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80042ea:	2102      	movs	r1, #2
 80042ec:	4842      	ldr	r0, [pc, #264]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 80042ee:	f006 fafb 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d145      	bne.n	8004384 <checkAktifCalisma+0x16c>
							&& (basincVar)
 80042f8:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <checkAktifCalisma+0x1e4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d041      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004300:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004304:	4838      	ldr	r0, [pc, #224]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 8004306:	f006 faef 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10e      	bne.n	800432e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004314:	4834      	ldr	r0, [pc, #208]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 8004316:	f006 fae7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004320:	2140      	movs	r1, #64	@ 0x40
 8004322:	4835      	ldr	r0, [pc, #212]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 8004324:	f006 fae0 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d003      	beq.n	8004336 <checkAktifCalisma+0x11e>
 800432e:	4b24      	ldr	r3, [pc, #144]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d026      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <checkAktifCalisma+0x1b0>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f083 0301 	eor.w	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01f      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004344:	4b1f      	ldr	r3, [pc, #124]	@ (80043c4 <checkAktifCalisma+0x1ac>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <checkAktifCalisma+0x1bc>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	f083 0301 	eor.w	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <checkAktifCalisma+0x1e8>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f083 0301 	eor.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800436e:	4b25      	ldr	r3, [pc, #148]	@ (8004404 <checkAktifCalisma+0x1ec>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e002      	b.n	800438a <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03c      	beq.n	800440c <checkAktifCalisma+0x1f4>
 8004392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004396:	4818      	ldr	r0, [pc, #96]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 8004398:	f006 faa6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d134      	bne.n	800440c <checkAktifCalisma+0x1f4>
 80043a2:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <checkAktifCalisma+0x1f0>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d030      	beq.n	800440c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80043aa:	2201      	movs	r2, #1
 80043ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043b0:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80043b2:	f006 fab0 	bl	800a916 <HAL_GPIO_WritePin>
 80043b6:	e02f      	b.n	8004418 <checkAktifCalisma+0x200>
 80043b8:	200016de 	.word	0x200016de
 80043bc:	200016dd 	.word	0x200016dd
 80043c0:	200016f5 	.word	0x200016f5
 80043c4:	200016f6 	.word	0x200016f6
 80043c8:	200016f8 	.word	0x200016f8
 80043cc:	200016f0 	.word	0x200016f0
 80043d0:	200016d3 	.word	0x200016d3
 80043d4:	200016f7 	.word	0x200016f7
 80043d8:	200016d2 	.word	0x200016d2
 80043dc:	20001711 	.word	0x20001711
 80043e0:	20001724 	.word	0x20001724
 80043e4:	20001712 	.word	0x20001712
 80043e8:	40010c00 	.word	0x40010c00
 80043ec:	20001713 	.word	0x20001713
 80043f0:	200016ff 	.word	0x200016ff
 80043f4:	200016fc 	.word	0x200016fc
 80043f8:	40011000 	.word	0x40011000
 80043fc:	200016c3 	.word	0x200016c3
 8004400:	200016fa 	.word	0x200016fa
 8004404:	200016fb 	.word	0x200016fb
 8004408:	200016ce 	.word	0x200016ce
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004412:	4865      	ldr	r0, [pc, #404]	@ (80045a8 <checkAktifCalisma+0x390>)
 8004414:	f006 fa7f 	bl	800a916 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <checkAktifCalisma+0x394>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <checkAktifCalisma+0x230>
 8004420:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <checkAktifCalisma+0x398>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d007      	beq.n	8004438 <checkAktifCalisma+0x220>
 8004428:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <checkAktifCalisma+0x398>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d003      	beq.n	8004438 <checkAktifCalisma+0x220>
 8004430:	4b60      	ldr	r3, [pc, #384]	@ (80045b4 <checkAktifCalisma+0x39c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	2104      	movs	r1, #4
 800443c:	485a      	ldr	r0, [pc, #360]	@ (80045a8 <checkAktifCalisma+0x390>)
 800443e:	f006 fa6a 	bl	800a916 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004448:	4b5b      	ldr	r3, [pc, #364]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d033      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 8004450:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004454:	4854      	ldr	r0, [pc, #336]	@ (80045a8 <checkAktifCalisma+0x390>)
 8004456:	f006 fa47 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <checkAktifCalisma+0x256>
 8004460:	4b56      	ldr	r3, [pc, #344]	@ (80045bc <checkAktifCalisma+0x3a4>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f083 0301 	eor.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <checkAktifCalisma+0x264>
 800446e:	2102      	movs	r1, #2
 8004470:	4853      	ldr	r0, [pc, #332]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 8004472:	f006 fa39 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d11d      	bne.n	80044b8 <checkAktifCalisma+0x2a0>
 800447c:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <checkAktifCalisma+0x3ac>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <checkAktifCalisma+0x274>
 8004484:	4b50      	ldr	r3, [pc, #320]	@ (80045c8 <checkAktifCalisma+0x3b0>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 800448c:	4b4f      	ldr	r3, [pc, #316]	@ (80045cc <checkAktifCalisma+0x3b4>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 8004494:	4b4e      	ldr	r3, [pc, #312]	@ (80045d0 <checkAktifCalisma+0x3b8>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 800449c:	4b4d      	ldr	r3, [pc, #308]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f083 0301 	eor.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
					timer2=millis;
 80044aa:	4b4b      	ldr	r3, [pc, #300]	@ (80045d8 <checkAktifCalisma+0x3c0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4b      	ldr	r2, [pc, #300]	@ (80045dc <checkAktifCalisma+0x3c4>)
 80044b0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80044b2:	4b48      	ldr	r3, [pc, #288]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80044b8:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <checkAktifCalisma+0x3c0>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b47      	ldr	r3, [pc, #284]	@ (80045dc <checkAktifCalisma+0x3c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	4a47      	ldr	r2, [pc, #284]	@ (80045e0 <checkAktifCalisma+0x3c8>)
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d303      	bcc.n	80044d2 <checkAktifCalisma+0x2ba>
 80044ca:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <checkAktifCalisma+0x3ac>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <checkAktifCalisma+0x2d6>
 80044e0:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <checkAktifCalisma+0x3b0>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044ee:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <checkAktifCalisma+0x3b4>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044fc:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <checkAktifCalisma+0x3b8>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004504:	2200      	movs	r2, #0
 8004506:	2104      	movs	r1, #4
 8004508:	4827      	ldr	r0, [pc, #156]	@ (80045a8 <checkAktifCalisma+0x390>)
 800450a:	f006 fa04 	bl	800a916 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800450e:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800451a:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004528:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d116      	bne.n	800455e <checkAktifCalisma+0x346>
 8004530:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <checkAktifCalisma+0x3d4>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d112      	bne.n	800455e <checkAktifCalisma+0x346>
 8004538:	2101      	movs	r1, #1
 800453a:	4821      	ldr	r0, [pc, #132]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 800453c:	f006 f9d4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <checkAktifCalisma+0x346>
 8004546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800454a:	4817      	ldr	r0, [pc, #92]	@ (80045a8 <checkAktifCalisma+0x390>)
 800454c:	f006 f9cc 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004556:	4b24      	ldr	r3, [pc, #144]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e011      	b.n	8004582 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800455e:	4b21      	ldr	r3, [pc, #132]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <checkAktifCalisma+0x36a>
 8004566:	2101      	movs	r1, #1
 8004568:	4815      	ldr	r0, [pc, #84]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 800456a:	f006 f9bd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <checkAktifCalisma+0x36a>
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <checkAktifCalisma+0x3d4>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 800457c:	4b1a      	ldr	r3, [pc, #104]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004582:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d135      	bne.n	80045f6 <checkAktifCalisma+0x3de>
 800458a:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <checkAktifCalisma+0x3d4>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d131      	bne.n	80045f6 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004592:	2101      	movs	r1, #1
 8004594:	480a      	ldr	r0, [pc, #40]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 8004596:	f006 f9a7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d127      	bne.n	80045f0 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80045a0:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e026      	b.n	80045f6 <checkAktifCalisma+0x3de>
 80045a8:	40010c00 	.word	0x40010c00
 80045ac:	200016f5 	.word	0x200016f5
 80045b0:	200016cf 	.word	0x200016cf
 80045b4:	200016d3 	.word	0x200016d3
 80045b8:	200016f9 	.word	0x200016f9
 80045bc:	200016fc 	.word	0x200016fc
 80045c0:	40011000 	.word	0x40011000
 80045c4:	20001711 	.word	0x20001711
 80045c8:	20001724 	.word	0x20001724
 80045cc:	20001712 	.word	0x20001712
 80045d0:	200016c3 	.word	0x200016c3
 80045d4:	200016f1 	.word	0x200016f1
 80045d8:	20001698 	.word	0x20001698
 80045dc:	200016a4 	.word	0x200016a4
 80045e0:	200016d4 	.word	0x200016d4
 80045e4:	200016c4 	.word	0x200016c4
 80045e8:	20001716 	.word	0x20001716
 80045ec:	200016c1 	.word	0x200016c1
					} else {
						cerceveVar=0;
 80045f0:	4b7f      	ldr	r3, [pc, #508]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80045f6:	4b7f      	ldr	r3, [pc, #508]	@ (80047f4 <checkAktifCalisma+0x5dc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d17c      	bne.n	80046f8 <checkAktifCalisma+0x4e0>
 80045fe:	4b7e      	ldr	r3, [pc, #504]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d078      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
 8004606:	4b7d      	ldr	r3, [pc, #500]	@ (80047fc <checkAktifCalisma+0x5e4>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d074      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800460e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004612:	487b      	ldr	r0, [pc, #492]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004614:	f006 f968 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <checkAktifCalisma+0x40e>
 800461e:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <checkAktifCalisma+0x5ec>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d068      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004626:	4b72      	ldr	r3, [pc, #456]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d064      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
 800462e:	4b76      	ldr	r3, [pc, #472]	@ (8004808 <checkAktifCalisma+0x5f0>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f083 0301 	eor.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05d      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800463c:	2104      	movs	r1, #4
 800463e:	4873      	ldr	r0, [pc, #460]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004640:	f006 f952 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <checkAktifCalisma+0x43a>
 800464a:	4b71      	ldr	r3, [pc, #452]	@ (8004810 <checkAktifCalisma+0x5f8>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d152      	bne.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004656:	486a      	ldr	r0, [pc, #424]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004658:	f006 f946 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10e      	bne.n	8004680 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004662:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004666:	4866      	ldr	r0, [pc, #408]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004668:	f006 f93e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d106      	bne.n	8004680 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004672:	2140      	movs	r1, #64	@ 0x40
 8004674:	4865      	ldr	r0, [pc, #404]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004676:	f006 f937 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d003      	beq.n	8004688 <checkAktifCalisma+0x470>
 8004680:	4b64      	ldr	r3, [pc, #400]	@ (8004814 <checkAktifCalisma+0x5fc>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d037      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004688:	4b63      	ldr	r3, [pc, #396]	@ (8004818 <checkAktifCalisma+0x600>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f083 0301 	eor.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d030      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004696:	4b61      	ldr	r3, [pc, #388]	@ (800481c <checkAktifCalisma+0x604>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f083 0301 	eor.w	r3, r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d029      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80046a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004820 <checkAktifCalisma+0x608>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80046b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <checkAktifCalisma+0x60c>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80046c0:	4b59      	ldr	r3, [pc, #356]	@ (8004828 <checkAktifCalisma+0x610>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	f083 0301 	eor.w	r3, r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80046ce:	4b57      	ldr	r3, [pc, #348]	@ (800482c <checkAktifCalisma+0x614>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	2102      	movs	r1, #2
 80046e0:	4847      	ldr	r0, [pc, #284]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80046e2:	f006 f918 	bl	800a916 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80046e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <checkAktifCalisma+0x618>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80046f2:	4b50      	ldr	r3, [pc, #320]	@ (8004834 <checkAktifCalisma+0x61c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80046f8:	4b46      	ldr	r3, [pc, #280]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d033      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004704:	483e      	ldr	r0, [pc, #248]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004706:	f006 f8ef 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <checkAktifCalisma+0x506>
 8004710:	4b3c      	ldr	r3, [pc, #240]	@ (8004804 <checkAktifCalisma+0x5ec>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <checkAktifCalisma+0x51c>
 800471e:	2104      	movs	r1, #4
 8004720:	483a      	ldr	r0, [pc, #232]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004722:	f006 f8e1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11d      	bne.n	8004768 <checkAktifCalisma+0x550>
 800472c:	4b38      	ldr	r3, [pc, #224]	@ (8004810 <checkAktifCalisma+0x5f8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d019      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <checkAktifCalisma+0x550>
 800473c:	4b2f      	ldr	r3, [pc, #188]	@ (80047fc <checkAktifCalisma+0x5e4>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004744:	4b2a      	ldr	r3, [pc, #168]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <checkAktifCalisma+0x550>
 800474c:	4b3a      	ldr	r3, [pc, #232]	@ (8004838 <checkAktifCalisma+0x620>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	f083 0301 	eor.w	r3, r3, #1
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <checkAktifCalisma+0x550>
					timer2=millis;
 800475a:	4b38      	ldr	r3, [pc, #224]	@ (800483c <checkAktifCalisma+0x624>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a38      	ldr	r2, [pc, #224]	@ (8004840 <checkAktifCalisma+0x628>)
 8004760:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004762:	4b35      	ldr	r3, [pc, #212]	@ (8004838 <checkAktifCalisma+0x620>)
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004768:	4b34      	ldr	r3, [pc, #208]	@ (800483c <checkAktifCalisma+0x624>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <checkAktifCalisma+0x628>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <checkAktifCalisma+0x62c>)
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	4293      	cmp	r3, r2
 8004778:	d303      	bcc.n	8004782 <checkAktifCalisma+0x56a>
 800477a:	4b2f      	ldr	r3, [pc, #188]	@ (8004838 <checkAktifCalisma+0x620>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d114      	bne.n	80047ac <checkAktifCalisma+0x594>
 8004782:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f083 0301 	eor.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <checkAktifCalisma+0x594>
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <checkAktifCalisma+0x5e4>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <checkAktifCalisma+0x594>
 800479e:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80047ac:	2200      	movs	r2, #0
 80047ae:	2102      	movs	r1, #2
 80047b0:	4813      	ldr	r0, [pc, #76]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80047b2:	f006 f8b0 	bl	800a916 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80047b6:	4b17      	ldr	r3, [pc, #92]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <checkAktifCalisma+0x620>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80047c2:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d040      	beq.n	800484c <checkAktifCalisma+0x634>
 80047ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047ce:	480f      	ldr	r0, [pc, #60]	@ (800480c <checkAktifCalisma+0x5f4>)
 80047d0:	f006 f88a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d138      	bne.n	800484c <checkAktifCalisma+0x634>
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <checkAktifCalisma+0x630>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d034      	beq.n	800484c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80047e2:	2201      	movs	r2, #1
 80047e4:	2101      	movs	r1, #1
 80047e6:	4806      	ldr	r0, [pc, #24]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80047e8:	f006 f895 	bl	800a916 <HAL_GPIO_WritePin>
 80047ec:	e033      	b.n	8004856 <checkAktifCalisma+0x63e>
 80047ee:	bf00      	nop
 80047f0:	20001716 	.word	0x20001716
 80047f4:	200016dd 	.word	0x200016dd
 80047f8:	20001711 	.word	0x20001711
 80047fc:	20001712 	.word	0x20001712
 8004800:	40010c00 	.word	0x40010c00
 8004804:	200016fd 	.word	0x200016fd
 8004808:	20001710 	.word	0x20001710
 800480c:	40011000 	.word	0x40011000
 8004810:	200016c6 	.word	0x200016c6
 8004814:	200016f8 	.word	0x200016f8
 8004818:	200016f5 	.word	0x200016f5
 800481c:	200016f9 	.word	0x200016f9
 8004820:	200016f6 	.word	0x200016f6
 8004824:	200016f7 	.word	0x200016f7
 8004828:	200016fa 	.word	0x200016fa
 800482c:	200016fb 	.word	0x200016fb
 8004830:	20001700 	.word	0x20001700
 8004834:	20001720 	.word	0x20001720
 8004838:	200016f0 	.word	0x200016f0
 800483c:	20001698 	.word	0x20001698
 8004840:	200016a4 	.word	0x200016a4
 8004844:	200016d5 	.word	0x200016d5
 8004848:	200016c5 	.word	0x200016c5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	2101      	movs	r1, #1
 8004850:	4836      	ldr	r0, [pc, #216]	@ (800492c <checkAktifCalisma+0x714>)
 8004852:	f006 f860 	bl	800a916 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004856:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <checkAktifCalisma+0x718>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 8080 	bne.w	8004960 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004860:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <checkAktifCalisma+0x71c>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d003      	beq.n	8004870 <checkAktifCalisma+0x658>
 8004868:	4b32      	ldr	r3, [pc, #200]	@ (8004934 <checkAktifCalisma+0x71c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d177      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004870:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <checkAktifCalisma+0x720>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d073      	beq.n	8004960 <checkAktifCalisma+0x748>
 8004878:	4b30      	ldr	r3, [pc, #192]	@ (800493c <checkAktifCalisma+0x724>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06f      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004884:	4829      	ldr	r0, [pc, #164]	@ (800492c <checkAktifCalisma+0x714>)
 8004886:	f006 f82f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d167      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004890:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004894:	482a      	ldr	r0, [pc, #168]	@ (8004940 <checkAktifCalisma+0x728>)
 8004896:	f006 f827 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <checkAktifCalisma+0x690>
 80048a0:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <checkAktifCalisma+0x72c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d15b      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80048a8:	2140      	movs	r1, #64	@ 0x40
 80048aa:	4825      	ldr	r0, [pc, #148]	@ (8004940 <checkAktifCalisma+0x728>)
 80048ac:	f006 f81c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10f      	bne.n	80048d6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048ba:	481c      	ldr	r0, [pc, #112]	@ (800492c <checkAktifCalisma+0x714>)
 80048bc:	f006 f814 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80048c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048ca:	4818      	ldr	r0, [pc, #96]	@ (800492c <checkAktifCalisma+0x714>)
 80048cc:	f006 f80c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d003      	beq.n	80048de <checkAktifCalisma+0x6c6>
 80048d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <checkAktifCalisma+0x730>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d040      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <checkAktifCalisma+0x734>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d039      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80048ec:	4b18      	ldr	r3, [pc, #96]	@ (8004950 <checkAktifCalisma+0x738>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d032      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80048fa:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <checkAktifCalisma+0x73c>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f083 0301 	eor.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02b      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <checkAktifCalisma+0x740>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d024      	beq.n	8004960 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004916:	4b11      	ldr	r3, [pc, #68]	@ (800495c <checkAktifCalisma+0x744>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01d      	beq.n	8004960 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004924:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <checkAktifCalisma+0x730>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e01c      	b.n	8004966 <checkAktifCalisma+0x74e>
 800492c:	40010c00 	.word	0x40010c00
 8004930:	200016dd 	.word	0x200016dd
 8004934:	200016cf 	.word	0x200016cf
 8004938:	20001711 	.word	0x20001711
 800493c:	20001712 	.word	0x20001712
 8004940:	40011000 	.word	0x40011000
 8004944:	200016d0 	.word	0x200016d0
 8004948:	200016f6 	.word	0x200016f6
 800494c:	200016f5 	.word	0x200016f5
 8004950:	200016f9 	.word	0x200016f9
 8004954:	200016f8 	.word	0x200016f8
 8004958:	200016f7 	.word	0x200016f7
 800495c:	200016fb 	.word	0x200016fb
				} else {
					devmotoryukaricalisiyor=0;
 8004960:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004966:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800496e:	2201      	movs	r2, #1
 8004970:	2120      	movs	r1, #32
 8004972:	4861      	ldr	r0, [pc, #388]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004974:	f005 ffcf 	bl	800a916 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004978:	4b60      	ldr	r3, [pc, #384]	@ (8004afc <checkAktifCalisma+0x8e4>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d025      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 8004986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800498a:	485d      	ldr	r0, [pc, #372]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 800498c:	f005 ffac 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d007      	beq.n	80049a6 <checkAktifCalisma+0x78e>
 8004996:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800499a:	4857      	ldr	r0, [pc, #348]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 800499c:	f005 ffa4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d115      	bne.n	80049d2 <checkAktifCalisma+0x7ba>
 80049a6:	4b57      	ldr	r3, [pc, #348]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 80049ae:	4b56      	ldr	r3, [pc, #344]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 80049b6:	4b55      	ldr	r3, [pc, #340]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
					timer2=millis;
 80049c4:	4b52      	ldr	r3, [pc, #328]	@ (8004b10 <checkAktifCalisma+0x8f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a52      	ldr	r2, [pc, #328]	@ (8004b14 <checkAktifCalisma+0x8fc>)
 80049ca:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80049cc:	4b4f      	ldr	r3, [pc, #316]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80049d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b10 <checkAktifCalisma+0x8f8>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b14 <checkAktifCalisma+0x8fc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b18 <checkAktifCalisma+0x900>)
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d303      	bcc.n	80049ec <checkAktifCalisma+0x7d4>
 80049e4:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <checkAktifCalisma+0x7f0>
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <checkAktifCalisma+0x7f0>
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	483a      	ldr	r0, [pc, #232]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a0e:	f005 ff82 	bl	800a916 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004a12:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004a18:	4b3c      	ldr	r3, [pc, #240]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b1c <checkAktifCalisma+0x904>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 8088 	bne.w	8004b38 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004a28:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <checkAktifCalisma+0x908>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d003      	beq.n	8004a38 <checkAktifCalisma+0x820>
 8004a30:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <checkAktifCalisma+0x908>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d17f      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004a38:	4b32      	ldr	r3, [pc, #200]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d07b      	beq.n	8004b38 <checkAktifCalisma+0x920>
 8004a40:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d077      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004a48:	2140      	movs	r1, #64	@ 0x40
 8004a4a:	482b      	ldr	r0, [pc, #172]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a4c:	f005 ff4c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d170      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004a56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a5a:	4827      	ldr	r0, [pc, #156]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a5c:	f005 ff44 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <checkAktifCalisma+0x856>
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <checkAktifCalisma+0x90c>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d164      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a72:	4823      	ldr	r0, [pc, #140]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a74:	f005 ff38 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10f      	bne.n	8004a9e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a82:	481f      	ldr	r0, [pc, #124]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a84:	f005 ff30 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a92:	481b      	ldr	r0, [pc, #108]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a94:	f005 ff28 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d003      	beq.n	8004aa6 <checkAktifCalisma+0x88e>
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <checkAktifCalisma+0x910>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d048      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <checkAktifCalisma+0x914>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d041      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b30 <checkAktifCalisma+0x918>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d03a      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <checkAktifCalisma+0x91c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f083 0301 	eor.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d033      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02c      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f083 0301 	eor.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d025      	beq.n	8004b38 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <checkAktifCalisma+0x910>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e024      	b.n	8004b3e <checkAktifCalisma+0x926>
 8004af4:	200016f6 	.word	0x200016f6
 8004af8:	40011000 	.word	0x40011000
 8004afc:	200016fa 	.word	0x200016fa
 8004b00:	40010c00 	.word	0x40010c00
 8004b04:	20001711 	.word	0x20001711
 8004b08:	20001712 	.word	0x20001712
 8004b0c:	200016f2 	.word	0x200016f2
 8004b10:	20001698 	.word	0x20001698
 8004b14:	200016a4 	.word	0x200016a4
 8004b18:	200016d6 	.word	0x200016d6
 8004b1c:	200016dd 	.word	0x200016dd
 8004b20:	200016cf 	.word	0x200016cf
 8004b24:	200016d1 	.word	0x200016d1
 8004b28:	200016f7 	.word	0x200016f7
 8004b2c:	200016f5 	.word	0x200016f5
 8004b30:	200016f9 	.word	0x200016f9
 8004b34:	200016f8 	.word	0x200016f8
				} else {
					devmotorasagicalisiyor=0;
 8004b38:	4b96      	ldr	r3, [pc, #600]	@ (8004d94 <checkAktifCalisma+0xb7c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004b3e:	4b95      	ldr	r3, [pc, #596]	@ (8004d94 <checkAktifCalisma+0xb7c>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004b46:	2201      	movs	r2, #1
 8004b48:	2110      	movs	r1, #16
 8004b4a:	4893      	ldr	r0, [pc, #588]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b4c:	f005 fee3 	bl	800a916 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004b50:	4b92      	ldr	r3, [pc, #584]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004b56:	4b91      	ldr	r3, [pc, #580]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d024      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b5e:	2140      	movs	r1, #64	@ 0x40
 8004b60:	488d      	ldr	r0, [pc, #564]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b62:	f005 fec1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d007      	beq.n	8004b7c <checkAktifCalisma+0x964>
 8004b6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b70:	4889      	ldr	r0, [pc, #548]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b72:	f005 feb9 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d115      	bne.n	8004ba8 <checkAktifCalisma+0x990>
 8004b7c:	4b88      	ldr	r3, [pc, #544]	@ (8004da0 <checkAktifCalisma+0xb88>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b84:	4b87      	ldr	r3, [pc, #540]	@ (8004da4 <checkAktifCalisma+0xb8c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b8c:	4b86      	ldr	r3, [pc, #536]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f083 0301 	eor.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <checkAktifCalisma+0x990>
					timer2=millis;
 8004b9a:	4b84      	ldr	r3, [pc, #528]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a84      	ldr	r2, [pc, #528]	@ (8004db0 <checkAktifCalisma+0xb98>)
 8004ba0:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004ba2:	4b81      	ldr	r3, [pc, #516]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ba8:	4b80      	ldr	r3, [pc, #512]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b80      	ldr	r3, [pc, #512]	@ (8004db0 <checkAktifCalisma+0xb98>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	4a80      	ldr	r2, [pc, #512]	@ (8004db4 <checkAktifCalisma+0xb9c>)
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d303      	bcc.n	8004bc2 <checkAktifCalisma+0x9aa>
 8004bba:	4b7b      	ldr	r3, [pc, #492]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <checkAktifCalisma+0x9c6>
 8004bc2:	4b77      	ldr	r3, [pc, #476]	@ (8004da0 <checkAktifCalisma+0xb88>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	f083 0301 	eor.w	r3, r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <checkAktifCalisma+0x9c6>
 8004bd0:	4b74      	ldr	r3, [pc, #464]	@ (8004da4 <checkAktifCalisma+0xb8c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f083 0301 	eor.w	r3, r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2110      	movs	r1, #16
 8004be2:	486d      	ldr	r0, [pc, #436]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004be4:	f005 fe97 	bl	800a916 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004be8:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004bee:	4b6e      	ldr	r3, [pc, #440]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004bf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bf8:	486f      	ldr	r0, [pc, #444]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004bfa:	f005 fe75 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d120      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004c04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c08:	486b      	ldr	r0, [pc, #428]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c0a:	f005 fe6d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004c14:	2104      	movs	r1, #4
 8004c16:	4868      	ldr	r0, [pc, #416]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c18:	f005 fe66 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d111      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004c22:	2102      	movs	r1, #2
 8004c24:	4864      	ldr	r0, [pc, #400]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c26:	f005 fe5f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004c30:	2101      	movs	r1, #1
 8004c32:	4861      	ldr	r0, [pc, #388]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c34:	f005 fe58 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004c46:	4b5d      	ldr	r3, [pc, #372]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc0 <checkAktifCalisma+0xba8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d144      	bne.n	8004cde <checkAktifCalisma+0xac6>
 8004c54:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d003      	beq.n	8004c64 <checkAktifCalisma+0xa4c>
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d13c      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c64:	2180      	movs	r1, #128	@ 0x80
 8004c66:	484c      	ldr	r0, [pc, #304]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004c68:	f005 fe3e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <checkAktifCalisma+0xa62>
 8004c72:	4b55      	ldr	r3, [pc, #340]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <checkAktifCalisma+0xa7a>
 8004c7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c7e:	484e      	ldr	r0, [pc, #312]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c80:	f005 fe32 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d129      	bne.n	8004cde <checkAktifCalisma+0xac6>
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d125      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c92:	2104      	movs	r1, #4
 8004c94:	4840      	ldr	r0, [pc, #256]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004c96:	f005 fe27 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <checkAktifCalisma+0xa90>
 8004ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11a      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ca8:	2102      	movs	r1, #2
 8004caa:	483b      	ldr	r0, [pc, #236]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004cac:	f005 fe1c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004cb6:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <checkAktifCalisma+0xbb8>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	f083 0301 	eor.w	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004ccc:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <checkAktifCalisma+0xbbc>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004cd2:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a40      	ldr	r2, [pc, #256]	@ (8004dd8 <checkAktifCalisma+0xbc0>)
 8004cd8:	6013      	str	r3, [r2, #0]
					bekle();
 8004cda:	f7ff f901 	bl	8003ee0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004cde:	4b33      	ldr	r3, [pc, #204]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd8 <checkAktifCalisma+0xbc0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8004ddc <checkAktifCalisma+0xbc4>)
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d211      	bcs.n	8004d14 <checkAktifCalisma+0xafc>
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	4829      	ldr	r0, [pc, #164]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004cf4:	f005 fdf8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <checkAktifCalisma+0xafc>
 8004cfe:	4b33      	ldr	r3, [pc, #204]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <checkAktifCalisma+0xafc>
 8004d06:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004d14:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <checkAktifCalisma+0xbbc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <checkAktifCalisma+0xba8>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d160      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
 8004d22:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d003      	beq.n	8004d32 <checkAktifCalisma+0xb1a>
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d158      	bne.n	8004de4 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d32:	2104      	movs	r1, #4
 8004d34:	4818      	ldr	r0, [pc, #96]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d36:	f005 fdd7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d003      	beq.n	8004d48 <checkAktifCalisma+0xb30>
 8004d40:	4b22      	ldr	r3, [pc, #136]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d14d      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4813      	ldr	r0, [pc, #76]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d4c:	f005 fdcc 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d146      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d56:	2180      	movs	r1, #128	@ 0x80
 8004d58:	480f      	ldr	r0, [pc, #60]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d5a:	f005 fdc5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <checkAktifCalisma+0xb54>
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <checkAktifCalisma+0xb6c>
 8004d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d70:	4811      	ldr	r0, [pc, #68]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004d72:	f005 fdb9 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d133      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d12f      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02b      	beq.n	8004de4 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004d8c:	4b14      	ldr	r3, [pc, #80]	@ (8004de0 <checkAktifCalisma+0xbc8>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e02a      	b.n	8004dea <checkAktifCalisma+0xbd2>
 8004d94:	200016f7 	.word	0x200016f7
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	200016fb 	.word	0x200016fb
 8004da0:	20001711 	.word	0x20001711
 8004da4:	20001712 	.word	0x20001712
 8004da8:	200016f3 	.word	0x200016f3
 8004dac:	20001698 	.word	0x20001698
 8004db0:	200016a4 	.word	0x200016a4
 8004db4:	200016d6 	.word	0x200016d6
 8004db8:	40010c00 	.word	0x40010c00
 8004dbc:	20001701 	.word	0x20001701
 8004dc0:	200016c9 	.word	0x200016c9
 8004dc4:	200016c8 	.word	0x200016c8
 8004dc8:	200016cc 	.word	0x200016cc
 8004dcc:	200016c6 	.word	0x200016c6
 8004dd0:	200016ef 	.word	0x200016ef
 8004dd4:	20001702 	.word	0x20001702
 8004dd8:	2000169c 	.word	0x2000169c
 8004ddc:	200016d9 	.word	0x200016d9
 8004de0:	20001703 	.word	0x20001703
				} else {
					kapi1butonkontrol=0;
 8004de4:	4b8b      	ldr	r3, [pc, #556]	@ (8005014 <checkAktifCalisma+0xdfc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004dea:	4b8b      	ldr	r3, [pc, #556]	@ (8005018 <checkAktifCalisma+0xe00>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d121      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
 8004df2:	4b8a      	ldr	r3, [pc, #552]	@ (800501c <checkAktifCalisma+0xe04>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d003      	beq.n	8004e02 <checkAktifCalisma+0xbea>
 8004dfa:	4b88      	ldr	r3, [pc, #544]	@ (800501c <checkAktifCalisma+0xe04>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d119      	bne.n	8004e36 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e02:	2104      	movs	r1, #4
 8004e04:	4886      	ldr	r0, [pc, #536]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e06:	f005 fd6f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d003      	beq.n	8004e18 <checkAktifCalisma+0xc00>
 8004e10:	4b84      	ldr	r3, [pc, #528]	@ (8005024 <checkAktifCalisma+0xe0c>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10e      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4881      	ldr	r0, [pc, #516]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e1c:	f005 fd64 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004e26:	4b80      	ldr	r3, [pc, #512]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e002      	b.n	8004e3c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004e36:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004e3c:	4b75      	ldr	r3, [pc, #468]	@ (8005014 <checkAktifCalisma+0xdfc>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <checkAktifCalisma+0xc3c>
 8004e44:	4b79      	ldr	r3, [pc, #484]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <checkAktifCalisma+0xc3c>
 8004e4c:	4b78      	ldr	r3, [pc, #480]	@ (8005030 <checkAktifCalisma+0xe18>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004e54:	2201      	movs	r2, #1
 8004e56:	2180      	movs	r1, #128	@ 0x80
 8004e58:	4876      	ldr	r0, [pc, #472]	@ (8005034 <checkAktifCalisma+0xe1c>)
 8004e5a:	f005 fd5c 	bl	800a916 <HAL_GPIO_WritePin>
 8004e5e:	e004      	b.n	8004e6a <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004e60:	2200      	movs	r2, #0
 8004e62:	2180      	movs	r1, #128	@ 0x80
 8004e64:	4873      	ldr	r0, [pc, #460]	@ (8005034 <checkAktifCalisma+0xe1c>)
 8004e66:	f005 fd56 	bl	800a916 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e6a:	4b73      	ldr	r3, [pc, #460]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d141      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
 8004e72:	4b6a      	ldr	r3, [pc, #424]	@ (800501c <checkAktifCalisma+0xe04>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d003      	beq.n	8004e82 <checkAktifCalisma+0xc6a>
 8004e7a:	4b68      	ldr	r3, [pc, #416]	@ (800501c <checkAktifCalisma+0xe04>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d139      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e86:	4866      	ldr	r0, [pc, #408]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e88:	f005 fd2e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <checkAktifCalisma+0xc82>
 8004e92:	4b6a      	ldr	r3, [pc, #424]	@ (800503c <checkAktifCalisma+0xe24>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <checkAktifCalisma+0xc9a>
 8004e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e9e:	4868      	ldr	r0, [pc, #416]	@ (8005040 <checkAktifCalisma+0xe28>)
 8004ea0:	f005 fd22 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d125      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
 8004eaa:	4b64      	ldr	r3, [pc, #400]	@ (800503c <checkAktifCalisma+0xe24>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d121      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	485a      	ldr	r0, [pc, #360]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004eb6:	f005 fd17 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d11a      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4857      	ldr	r0, [pc, #348]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004ec4:	f005 fd10 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d113      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004ece:	4b56      	ldr	r3, [pc, #344]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <checkAktifCalisma+0xe2c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f083 0301 	eor.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004ee4:	4b58      	ldr	r3, [pc, #352]	@ (8005048 <checkAktifCalisma+0xe30>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004eea:	4b58      	ldr	r3, [pc, #352]	@ (800504c <checkAktifCalisma+0xe34>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a58      	ldr	r2, [pc, #352]	@ (8005050 <checkAktifCalisma+0xe38>)
 8004ef0:	6013      	str	r3, [r2, #0]
					bekle();
 8004ef2:	f7fe fff5 	bl	8003ee0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004ef6:	4b55      	ldr	r3, [pc, #340]	@ (800504c <checkAktifCalisma+0xe34>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b55      	ldr	r3, [pc, #340]	@ (8005050 <checkAktifCalisma+0xe38>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	4a54      	ldr	r2, [pc, #336]	@ (8005054 <checkAktifCalisma+0xe3c>)
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d20d      	bcs.n	8004f24 <checkAktifCalisma+0xd0c>
 8004f08:	2102      	movs	r1, #2
 8004f0a:	4845      	ldr	r0, [pc, #276]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f0c:	f005 fcec 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <checkAktifCalisma+0xd0c>
 8004f16:	4b44      	ldr	r3, [pc, #272]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f083 0301 	eor.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004f24:	4b48      	ldr	r3, [pc, #288]	@ (8005048 <checkAktifCalisma+0xe30>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f2a:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d135      	bne.n	8004f9e <checkAktifCalisma+0xd86>
 8004f32:	4b3a      	ldr	r3, [pc, #232]	@ (800501c <checkAktifCalisma+0xe04>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d003      	beq.n	8004f42 <checkAktifCalisma+0xd2a>
 8004f3a:	4b38      	ldr	r3, [pc, #224]	@ (800501c <checkAktifCalisma+0xe04>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d12d      	bne.n	8004f9e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f46:	4836      	ldr	r0, [pc, #216]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f48:	f005 fcce 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <checkAktifCalisma+0xd42>
 8004f52:	4b3a      	ldr	r3, [pc, #232]	@ (800503c <checkAktifCalisma+0xe24>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <checkAktifCalisma+0xd5a>
 8004f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f5e:	4838      	ldr	r0, [pc, #224]	@ (8005040 <checkAktifCalisma+0xe28>)
 8004f60:	f005 fcc2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <checkAktifCalisma+0xd86>
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <checkAktifCalisma+0xe24>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d115      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f72:	2102      	movs	r1, #2
 8004f74:	482a      	ldr	r0, [pc, #168]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f76:	f005 fcb7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10e      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004f80:	2104      	movs	r1, #4
 8004f82:	4827      	ldr	r0, [pc, #156]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f84:	f005 fcb0 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d107      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004f96:	4b30      	ldr	r3, [pc, #192]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fa4:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11d      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <checkAktifCalisma+0xe04>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <checkAktifCalisma+0xda4>
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <checkAktifCalisma+0xe04>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d115      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4818      	ldr	r0, [pc, #96]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004fc0:	f005 fc92 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004fca:	2104      	movs	r1, #4
 8004fcc:	4814      	ldr	r0, [pc, #80]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004fce:	f005 fc8b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004fd8:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <checkAktifCalisma+0xe44>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <checkAktifCalisma+0xe44>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004fee:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d107      	bne.n	8005006 <checkAktifCalisma+0xdee>
 8004ff6:	4b19      	ldr	r3, [pc, #100]	@ (800505c <checkAktifCalisma+0xe44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <checkAktifCalisma+0xdee>
 8004ffe:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <checkAktifCalisma+0xe30>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02c      	beq.n	8005060 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005006:	2201      	movs	r2, #1
 8005008:	2140      	movs	r1, #64	@ 0x40
 800500a:	480a      	ldr	r0, [pc, #40]	@ (8005034 <checkAktifCalisma+0xe1c>)
 800500c:	f005 fc83 	bl	800a916 <HAL_GPIO_WritePin>
 8005010:	e02b      	b.n	800506a <checkAktifCalisma+0xe52>
 8005012:	bf00      	nop
 8005014:	20001703 	.word	0x20001703
 8005018:	200016c9 	.word	0x200016c9
 800501c:	200016c8 	.word	0x200016c8
 8005020:	40011000 	.word	0x40011000
 8005024:	200016c6 	.word	0x200016c6
 8005028:	20001701 	.word	0x20001701
 800502c:	20001704 	.word	0x20001704
 8005030:	20001702 	.word	0x20001702
 8005034:	40010800 	.word	0x40010800
 8005038:	200016ca 	.word	0x200016ca
 800503c:	200016cc 	.word	0x200016cc
 8005040:	40010c00 	.word	0x40010c00
 8005044:	200016ef 	.word	0x200016ef
 8005048:	20001705 	.word	0x20001705
 800504c:	20001698 	.word	0x20001698
 8005050:	2000169c 	.word	0x2000169c
 8005054:	200016da 	.word	0x200016da
 8005058:	20001706 	.word	0x20001706
 800505c:	20001707 	.word	0x20001707
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005060:	2200      	movs	r2, #0
 8005062:	2140      	movs	r1, #64	@ 0x40
 8005064:	4889      	ldr	r0, [pc, #548]	@ (800528c <checkAktifCalisma+0x1074>)
 8005066:	f005 fc56 	bl	800a916 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800506a:	4b89      	ldr	r3, [pc, #548]	@ (8005290 <checkAktifCalisma+0x1078>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <checkAktifCalisma+0xe62>
 8005072:	4b87      	ldr	r3, [pc, #540]	@ (8005290 <checkAktifCalisma+0x1078>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d115      	bne.n	80050a6 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800507a:	2104      	movs	r1, #4
 800507c:	4885      	ldr	r0, [pc, #532]	@ (8005294 <checkAktifCalisma+0x107c>)
 800507e:	f005 fc33 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d003      	beq.n	8005090 <checkAktifCalisma+0xe78>
 8005088:	4b83      	ldr	r3, [pc, #524]	@ (8005298 <checkAktifCalisma+0x1080>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005090:	2102      	movs	r1, #2
 8005092:	4880      	ldr	r0, [pc, #512]	@ (8005294 <checkAktifCalisma+0x107c>)
 8005094:	f005 fc28 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800509e:	4b7f      	ldr	r3, [pc, #508]	@ (800529c <checkAktifCalisma+0x1084>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e002      	b.n	80050ac <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80050a6:	4b7d      	ldr	r3, [pc, #500]	@ (800529c <checkAktifCalisma+0x1084>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80050ac:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <checkAktifCalisma+0x1078>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d003      	beq.n	80050bc <checkAktifCalisma+0xea4>
 80050b4:	4b76      	ldr	r3, [pc, #472]	@ (8005290 <checkAktifCalisma+0x1078>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d111      	bne.n	80050e0 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050bc:	2102      	movs	r1, #2
 80050be:	4875      	ldr	r0, [pc, #468]	@ (8005294 <checkAktifCalisma+0x107c>)
 80050c0:	f005 fc12 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10a      	bne.n	80050e0 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80050ca:	2104      	movs	r1, #4
 80050cc:	4871      	ldr	r0, [pc, #452]	@ (8005294 <checkAktifCalisma+0x107c>)
 80050ce:	f005 fc0b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80050d8:	4b71      	ldr	r3, [pc, #452]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e002      	b.n	80050e6 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80050e6:	4b6d      	ldr	r3, [pc, #436]	@ (800529c <checkAktifCalisma+0x1084>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00f      	beq.n	800510e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 80050ee:	4b6d      	ldr	r3, [pc, #436]	@ (80052a4 <checkAktifCalisma+0x108c>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10b      	bne.n	800510e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80050f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050fa:	486b      	ldr	r0, [pc, #428]	@ (80052a8 <checkAktifCalisma+0x1090>)
 80050fc:	f005 fbf4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8005106:	4b69      	ldr	r3, [pc, #420]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e002      	b.n	8005114 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800510e:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005114:	4b62      	ldr	r3, [pc, #392]	@ (80052a0 <checkAktifCalisma+0x1088>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00f      	beq.n	800513c <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 800511c:	4b61      	ldr	r3, [pc, #388]	@ (80052a4 <checkAktifCalisma+0x108c>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10b      	bne.n	800513c <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005128:	485f      	ldr	r0, [pc, #380]	@ (80052a8 <checkAktifCalisma+0x1090>)
 800512a:	f005 fbdd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005134:	4b5e      	ldr	r3, [pc, #376]	@ (80052b0 <checkAktifCalisma+0x1098>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 800513c:	4b5c      	ldr	r3, [pc, #368]	@ (80052b0 <checkAktifCalisma+0x1098>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005142:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <checkAktifCalisma+0x109c>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11b      	bne.n	8005182 <checkAktifCalisma+0xf6a>
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <checkAktifCalisma+0xf42>
 8005152:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d113      	bne.n	8005182 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 800515a:	4b50      	ldr	r3, [pc, #320]	@ (800529c <checkAktifCalisma+0x1084>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <checkAktifCalisma+0xf52>
 8005162:	4b4f      	ldr	r3, [pc, #316]	@ (80052a0 <checkAktifCalisma+0x1088>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <checkAktifCalisma+0xf6a>
 800516a:	4b54      	ldr	r3, [pc, #336]	@ (80052bc <checkAktifCalisma+0x10a4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <checkAktifCalisma+0xf62>
 8005172:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <checkAktifCalisma+0x10a8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 800517a:	4b52      	ldr	r3, [pc, #328]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e002      	b.n	8005188 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 8005182:	4b50      	ldr	r3, [pc, #320]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005188:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <checkAktifCalisma+0x109c>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d148      	bne.n	8005222 <checkAktifCalisma+0x100a>
 8005190:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d003      	beq.n	80051a0 <checkAktifCalisma+0xf88>
 8005198:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d140      	bne.n	8005222 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80051a0:	4b3e      	ldr	r3, [pc, #248]	@ (800529c <checkAktifCalisma+0x1084>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <checkAktifCalisma+0xf98>
 80051a8:	4b3d      	ldr	r3, [pc, #244]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d038      	beq.n	8005222 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80051b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051b4:	4837      	ldr	r0, [pc, #220]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051b6:	f005 fb97 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01c      	beq.n	80051fa <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80051c0:	2180      	movs	r1, #128	@ 0x80
 80051c2:	4834      	ldr	r0, [pc, #208]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051c4:	f005 fb90 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80051ce:	2104      	movs	r1, #4
 80051d0:	4830      	ldr	r0, [pc, #192]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051d2:	f005 fb89 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00e      	beq.n	80051fa <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80051dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051e0:	482c      	ldr	r0, [pc, #176]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051e2:	f005 fb81 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80051ec:	2102      	movs	r1, #2
 80051ee:	4829      	ldr	r0, [pc, #164]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051f0:	f005 fb7a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d103      	bne.n	8005202 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80051fa:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <checkAktifCalisma+0x108c>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <checkAktifCalisma+0xffa>
 8005202:	4b2a      	ldr	r3, [pc, #168]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <checkAktifCalisma+0xffa>
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <checkAktifCalisma+0x1098>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005212:	4b2d      	ldr	r3, [pc, #180]	@ (80052c8 <checkAktifCalisma+0x10b0>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800521a:	4b2c      	ldr	r3, [pc, #176]	@ (80052cc <checkAktifCalisma+0x10b4>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e002      	b.n	8005228 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005222:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <checkAktifCalisma+0x10b4>)
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005228:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <checkAktifCalisma+0x109c>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d117      	bne.n	8005260 <checkAktifCalisma+0x1048>
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d003      	beq.n	8005240 <checkAktifCalisma+0x1028>
 8005238:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d10f      	bne.n	8005260 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005240:	4b16      	ldr	r3, [pc, #88]	@ (800529c <checkAktifCalisma+0x1084>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <checkAktifCalisma+0x1038>
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <checkAktifCalisma+0x1088>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <checkAktifCalisma+0x10b0>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8005258:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e002      	b.n	8005266 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005260:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005266:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <checkAktifCalisma+0x10b4>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <checkAktifCalisma+0x1066>
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <checkAktifCalisma+0x1066>
 8005276:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02a      	beq.n	80052d4 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800527e:	2201      	movs	r2, #1
 8005280:	2120      	movs	r1, #32
 8005282:	4802      	ldr	r0, [pc, #8]	@ (800528c <checkAktifCalisma+0x1074>)
 8005284:	f005 fb47 	bl	800a916 <HAL_GPIO_WritePin>
 8005288:	e029      	b.n	80052de <checkAktifCalisma+0x10c6>
 800528a:	bf00      	nop
 800528c:	40010800 	.word	0x40010800
 8005290:	200016cd 	.word	0x200016cd
 8005294:	40011000 	.word	0x40011000
 8005298:	200016c6 	.word	0x200016c6
 800529c:	2000170b 	.word	0x2000170b
 80052a0:	2000170c 	.word	0x2000170c
 80052a4:	200016cc 	.word	0x200016cc
 80052a8:	40010c00 	.word	0x40010c00
 80052ac:	2000171b 	.word	0x2000171b
 80052b0:	2000171c 	.word	0x2000171c
 80052b4:	200016cb 	.word	0x200016cb
 80052b8:	200016c8 	.word	0x200016c8
 80052bc:	20001702 	.word	0x20001702
 80052c0:	20001705 	.word	0x20001705
 80052c4:	20001708 	.word	0x20001708
 80052c8:	20001701 	.word	0x20001701
 80052cc:	20001709 	.word	0x20001709
 80052d0:	2000170a 	.word	0x2000170a
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2120      	movs	r1, #32
 80052d8:	4887      	ldr	r0, [pc, #540]	@ (80054f8 <checkAktifCalisma+0x12e0>)
 80052da:	f005 fb1c 	bl	800a916 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80052de:	4b87      	ldr	r3, [pc, #540]	@ (80054fc <checkAktifCalisma+0x12e4>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <checkAktifCalisma+0x10ec>
 80052e6:	2102      	movs	r1, #2
 80052e8:	4885      	ldr	r0, [pc, #532]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80052ea:	f005 fafd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <checkAktifCalisma+0x10ec>
 80052f4:	4b83      	ldr	r3, [pc, #524]	@ (8005504 <checkAktifCalisma+0x12ec>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <checkAktifCalisma+0x10ec>
 80052fc:	4b82      	ldr	r3, [pc, #520]	@ (8005508 <checkAktifCalisma+0x12f0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d112      	bne.n	800532a <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005304:	4b81      	ldr	r3, [pc, #516]	@ (800550c <checkAktifCalisma+0x12f4>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d032      	beq.n	8005372 <checkAktifCalisma+0x115a>
 800530c:	2104      	movs	r1, #4
 800530e:	487c      	ldr	r0, [pc, #496]	@ (8005500 <checkAktifCalisma+0x12e8>)
 8005310:	f005 faea 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d12b      	bne.n	8005372 <checkAktifCalisma+0x115a>
 800531a:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <checkAktifCalisma+0x12ec>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d027      	beq.n	8005372 <checkAktifCalisma+0x115a>
 8005322:	4b79      	ldr	r3, [pc, #484]	@ (8005508 <checkAktifCalisma+0x12f0>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800532a:	4b79      	ldr	r3, [pc, #484]	@ (8005510 <checkAktifCalisma+0x12f8>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b77      	ldr	r3, [pc, #476]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005334:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005336:	4b76      	ldr	r3, [pc, #472]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2bff      	cmp	r3, #255	@ 0xff
 800533c:	d108      	bne.n	8005350 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 800533e:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005344:	4b73      	ldr	r3, [pc, #460]	@ (8005514 <checkAktifCalisma+0x12fc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b71      	ldr	r3, [pc, #452]	@ (8005514 <checkAktifCalisma+0x12fc>)
 800534e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005350:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	4b70      	ldr	r3, [pc, #448]	@ (8005518 <checkAktifCalisma+0x1300>)
 8005356:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005358:	4b6e      	ldr	r3, [pc, #440]	@ (8005514 <checkAktifCalisma+0x12fc>)
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	4b6e      	ldr	r3, [pc, #440]	@ (8005518 <checkAktifCalisma+0x1300>)
 800535e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005360:	4b6e      	ldr	r3, [pc, #440]	@ (800551c <checkAktifCalisma+0x1304>)
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005366:	4b65      	ldr	r3, [pc, #404]	@ (80054fc <checkAktifCalisma+0x12e4>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800536c:	4b67      	ldr	r3, [pc, #412]	@ (800550c <checkAktifCalisma+0x12f4>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005372:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005376:	486a      	ldr	r0, [pc, #424]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005378:	f005 fab6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005382:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005386:	4866      	ldr	r0, [pc, #408]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005388:	f005 faae 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00e      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005396:	4862      	ldr	r0, [pc, #392]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005398:	f005 faa6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80053a2:	2140      	movs	r1, #64	@ 0x40
 80053a4:	4856      	ldr	r0, [pc, #344]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80053a6:	f005 fa9f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <checkAktifCalisma+0x11a0>

					startBasili=1;
 80053b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e002      	b.n	80053be <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80053b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80053be:	4b59      	ldr	r3, [pc, #356]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <checkAktifCalisma+0x11d8>
 80053c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053ca:	4855      	ldr	r0, [pc, #340]	@ (8005520 <checkAktifCalisma+0x1308>)
 80053cc:	f005 fa8c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10c      	bne.n	80053f0 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80053d6:	4b54      	ldr	r3, [pc, #336]	@ (8005528 <checkAktifCalisma+0x1310>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7fb fd13 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7fb fcb8 	bl	8000d58 <hata2EEPROM>
					acilstophatasi=1;
 80053e8:	4b50      	ldr	r3, [pc, #320]	@ (800552c <checkAktifCalisma+0x1314>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e018      	b.n	8005422 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80053f0:	4b4e      	ldr	r3, [pc, #312]	@ (800552c <checkAktifCalisma+0x1314>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d014      	beq.n	8005422 <checkAktifCalisma+0x120a>
 80053f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053fc:	4848      	ldr	r0, [pc, #288]	@ (8005520 <checkAktifCalisma+0x1308>)
 80053fe:	f005 fa73 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10c      	bne.n	8005422 <checkAktifCalisma+0x120a>
 8005408:	4b46      	ldr	r3, [pc, #280]	@ (8005524 <checkAktifCalisma+0x130c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 8005416:	4b45      	ldr	r3, [pc, #276]	@ (800552c <checkAktifCalisma+0x1314>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800541c:	2001      	movs	r0, #1
 800541e:	f7fe fcf1 	bl	8003e04 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005422:	4b43      	ldr	r3, [pc, #268]	@ (8005530 <checkAktifCalisma+0x1318>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d023      	beq.n	8005478 <checkAktifCalisma+0x1260>
 8005430:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005434:	483a      	ldr	r0, [pc, #232]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005436:	f005 fa57 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <checkAktifCalisma+0x1230>
 8005440:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <checkAktifCalisma+0x131c>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <checkAktifCalisma+0x1260>
 8005448:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <checkAktifCalisma+0x1320>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d113      	bne.n	8005478 <checkAktifCalisma+0x1260>
 8005450:	4b3a      	ldr	r3, [pc, #232]	@ (800553c <checkAktifCalisma+0x1324>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <checkAktifCalisma+0x1260>
					hataVar=1;
 800545e:	4b32      	ldr	r3, [pc, #200]	@ (8005528 <checkAktifCalisma+0x1310>)
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005464:	2002      	movs	r0, #2
 8005466:	f7fb fccf 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800546a:	2002      	movs	r0, #2
 800546c:	f7fb fc74 	bl	8000d58 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005470:	4b32      	ldr	r3, [pc, #200]	@ (800553c <checkAktifCalisma+0x1324>)
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e017      	b.n	80054a8 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005478:	4b30      	ldr	r3, [pc, #192]	@ (800553c <checkAktifCalisma+0x1324>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <checkAktifCalisma+0x1290>
 8005480:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <checkAktifCalisma+0x1318>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00f      	beq.n	80054a8 <checkAktifCalisma+0x1290>
 8005488:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <checkAktifCalisma+0x1328>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <checkAktifCalisma+0x1324>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <checkAktifCalisma+0x131c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80054a2:	2002      	movs	r0, #2
 80054a4:	f7fe fcae 	bl	8003e04 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <checkAktifCalisma+0x132c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d151      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <checkAktifCalisma+0x1330>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d14d      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054b8:	4b24      	ldr	r3, [pc, #144]	@ (800554c <checkAktifCalisma+0x1334>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d049      	beq.n	8005554 <checkAktifCalisma+0x133c>
 80054c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c4:	480e      	ldr	r0, [pc, #56]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80054c6:	f005 fa0f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d141      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <checkAktifCalisma+0x1338>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f083 0301 	eor.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03a      	beq.n	8005554 <checkAktifCalisma+0x133c>
					hataVar=1;
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <checkAktifCalisma+0x1310>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80054e4:	2003      	movs	r0, #3
 80054e6:	f7fb fc8f 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80054ea:	2003      	movs	r0, #3
 80054ec:	f7fb fc34 	bl	8000d58 <hata2EEPROM>
					basinchatasi=1;
 80054f0:	4b17      	ldr	r3, [pc, #92]	@ (8005550 <checkAktifCalisma+0x1338>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e043      	b.n	8005580 <checkAktifCalisma+0x1368>
 80054f8:	40010800 	.word	0x40010800
 80054fc:	200016ff 	.word	0x200016ff
 8005500:	40011000 	.word	0x40011000
 8005504:	200016c6 	.word	0x200016c6
 8005508:	20001701 	.word	0x20001701
 800550c:	20001700 	.word	0x20001700
 8005510:	200016b8 	.word	0x200016b8
 8005514:	200016ba 	.word	0x200016ba
 8005518:	20000fec 	.word	0x20000fec
 800551c:	200016ec 	.word	0x200016ec
 8005520:	40010c00 	.word	0x40010c00
 8005524:	2000170d 	.word	0x2000170d
 8005528:	20001714 	.word	0x20001714
 800552c:	2000170f 	.word	0x2000170f
 8005530:	20001716 	.word	0x20001716
 8005534:	20001720 	.word	0x20001720
 8005538:	200016c4 	.word	0x200016c4
 800553c:	20001710 	.word	0x20001710
 8005540:	200016f8 	.word	0x200016f8
 8005544:	200016c3 	.word	0x200016c3
 8005548:	200016c7 	.word	0x200016c7
 800554c:	20001713 	.word	0x20001713
 8005550:	2000171d 	.word	0x2000171d
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005554:	4b85      	ldr	r3, [pc, #532]	@ (800576c <checkAktifCalisma+0x1554>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d011      	beq.n	8005580 <checkAktifCalisma+0x1368>
 800555c:	4b84      	ldr	r3, [pc, #528]	@ (8005770 <checkAktifCalisma+0x1558>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10d      	bne.n	8005580 <checkAktifCalisma+0x1368>
 8005564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005568:	4882      	ldr	r0, [pc, #520]	@ (8005774 <checkAktifCalisma+0x155c>)
 800556a:	f005 f9bd 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005574:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <checkAktifCalisma+0x1554>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800557a:	2003      	movs	r0, #3
 800557c:	f7fe fc42 	bl	8003e04 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005580:	4b7d      	ldr	r3, [pc, #500]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <checkAktifCalisma+0x1378>
 8005588:	4b7c      	ldr	r3, [pc, #496]	@ (800577c <checkAktifCalisma+0x1564>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <checkAktifCalisma+0x13c0>
 8005590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005594:	487a      	ldr	r0, [pc, #488]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005596:	f005 f9a7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11b      	bne.n	80055d8 <checkAktifCalisma+0x13c0>
 80055a0:	4b78      	ldr	r3, [pc, #480]	@ (8005784 <checkAktifCalisma+0x156c>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d003      	beq.n	80055b0 <checkAktifCalisma+0x1398>
 80055a8:	4b76      	ldr	r3, [pc, #472]	@ (8005784 <checkAktifCalisma+0x156c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d113      	bne.n	80055d8 <checkAktifCalisma+0x13c0>
 80055b0:	4b75      	ldr	r3, [pc, #468]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <checkAktifCalisma+0x13c0>
					hataVar=1;
 80055be:	4b73      	ldr	r3, [pc, #460]	@ (800578c <checkAktifCalisma+0x1574>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80055c4:	2004      	movs	r0, #4
 80055c6:	f7fb fc1f 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80055ca:	2004      	movs	r0, #4
 80055cc:	f7fb fbc4 	bl	8000d58 <hata2EEPROM>
					katkapisivicihatasi=1;
 80055d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e01f      	b.n	8005618 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80055d8:	4b6b      	ldr	r3, [pc, #428]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005790 <checkAktifCalisma+0x1578>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055e8:	4b63      	ldr	r3, [pc, #396]	@ (8005778 <checkAktifCalisma+0x1560>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f083 0301 	eor.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fa:	4861      	ldr	r0, [pc, #388]	@ (8005780 <checkAktifCalisma+0x1568>)
 80055fc:	f005 f974 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 8005606:	4b60      	ldr	r3, [pc, #384]	@ (8005788 <checkAktifCalisma+0x1570>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800560c:	4b5b      	ldr	r3, [pc, #364]	@ (800577c <checkAktifCalisma+0x1564>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005612:	2004      	movs	r0, #4
 8005614:	f7fe fbf6 	bl	8003e04 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005618:	4b57      	ldr	r3, [pc, #348]	@ (8005778 <checkAktifCalisma+0x1560>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <checkAktifCalisma+0x1410>
 8005620:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <checkAktifCalisma+0x157c>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <checkAktifCalisma+0x1458>
 8005628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800562c:	4854      	ldr	r0, [pc, #336]	@ (8005780 <checkAktifCalisma+0x1568>)
 800562e:	f005 f95b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d11b      	bne.n	8005670 <checkAktifCalisma+0x1458>
 8005638:	4b52      	ldr	r3, [pc, #328]	@ (8005784 <checkAktifCalisma+0x156c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d003      	beq.n	8005648 <checkAktifCalisma+0x1430>
 8005640:	4b50      	ldr	r3, [pc, #320]	@ (8005784 <checkAktifCalisma+0x156c>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d113      	bne.n	8005670 <checkAktifCalisma+0x1458>
 8005648:	4b53      	ldr	r3, [pc, #332]	@ (8005798 <checkAktifCalisma+0x1580>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <checkAktifCalisma+0x1458>

					hataVar=1;
 8005656:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <checkAktifCalisma+0x1574>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800565c:	2005      	movs	r0, #5
 800565e:	f7fb fbd3 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005662:	2005      	movs	r0, #5
 8005664:	f7fb fb78 	bl	8000d58 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005668:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <checkAktifCalisma+0x1580>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e023      	b.n	80056b8 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005670:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <checkAktifCalisma+0x1580>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01f      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 8005678:	4b45      	ldr	r3, [pc, #276]	@ (8005790 <checkAktifCalisma+0x1578>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 8005680:	4b3d      	ldr	r3, [pc, #244]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d014      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 800568e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005692:	483b      	ldr	r0, [pc, #236]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005694:	f005 f928 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10c      	bne.n	80056b8 <checkAktifCalisma+0x14a0>
 800569e:	4b3c      	ldr	r3, [pc, #240]	@ (8005790 <checkAktifCalisma+0x1578>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80056a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005798 <checkAktifCalisma+0x1580>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80056ac:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <checkAktifCalisma+0x157c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80056b2:	2005      	movs	r0, #5
 80056b4:	f7fe fba6 	bl	8003e04 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80056b8:	4b38      	ldr	r3, [pc, #224]	@ (800579c <checkAktifCalisma+0x1584>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <checkAktifCalisma+0x14b8>
 80056c0:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <checkAktifCalisma+0x1588>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <checkAktifCalisma+0x14b8>
 80056c8:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <checkAktifCalisma+0x158c>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <checkAktifCalisma+0x14f0>
 80056d0:	4b35      	ldr	r3, [pc, #212]	@ (80057a8 <checkAktifCalisma+0x1590>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 80056de:	4b33      	ldr	r3, [pc, #204]	@ (80057ac <checkAktifCalisma+0x1594>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b33      	ldr	r3, [pc, #204]	@ (80057b0 <checkAktifCalisma+0x1598>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	4a32      	ldr	r2, [pc, #200]	@ (80057b4 <checkAktifCalisma+0x159c>)
 80056ea:	7812      	ldrb	r2, [r2, #0]
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d30b      	bcc.n	8005708 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 80056f0:	4b26      	ldr	r3, [pc, #152]	@ (800578c <checkAktifCalisma+0x1574>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80056f6:	2006      	movs	r0, #6
 80056f8:	f7fb fb86 	bl	8000e08 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80056fc:	2006      	movs	r0, #6
 80056fe:	f7fb fb2b 	bl	8000d58 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005702:	4b29      	ldr	r3, [pc, #164]	@ (80057a8 <checkAktifCalisma+0x1590>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005708:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <checkAktifCalisma+0x1590>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <checkAktifCalisma+0x1520>
 8005710:	2108      	movs	r1, #8
 8005712:	481b      	ldr	r0, [pc, #108]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005714:	f005 f8e8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <checkAktifCalisma+0x1520>
 800571e:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 800572c:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <checkAktifCalisma+0x1590>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005732:	2006      	movs	r0, #6
 8005734:	f7fe fb66 	bl	8003e04 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <checkAktifCalisma+0x15a0>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005740:	4b17      	ldr	r3, [pc, #92]	@ (80057a0 <checkAktifCalisma+0x1588>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d107      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005748:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <checkAktifCalisma+0x15a4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005750:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <checkAktifCalisma+0x158c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d035      	beq.n	80057c4 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <checkAktifCalisma+0x15a8>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800575e:	4b07      	ldr	r3, [pc, #28]	@ (800577c <checkAktifCalisma+0x1564>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <checkAktifCalisma+0x157c>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e032      	b.n	80057d2 <checkAktifCalisma+0x15ba>
 800576c:	2000171d 	.word	0x2000171d
 8005770:	200016c3 	.word	0x200016c3
 8005774:	40010c00 	.word	0x40010c00
 8005778:	2000170d 	.word	0x2000170d
 800577c:	20001721 	.word	0x20001721
 8005780:	40010800 	.word	0x40010800
 8005784:	200016c8 	.word	0x200016c8
 8005788:	2000171e 	.word	0x2000171e
 800578c:	20001714 	.word	0x20001714
 8005790:	20001701 	.word	0x20001701
 8005794:	20001722 	.word	0x20001722
 8005798:	2000171f 	.word	0x2000171f
 800579c:	20001713 	.word	0x20001713
 80057a0:	200016f8 	.word	0x200016f8
 80057a4:	200016f7 	.word	0x200016f7
 80057a8:	2000170e 	.word	0x2000170e
 80057ac:	20001698 	.word	0x20001698
 80057b0:	200016ac 	.word	0x200016ac
 80057b4:	200016d8 	.word	0x200016d8
 80057b8:	200016f5 	.word	0x200016f5
 80057bc:	200016f6 	.word	0x200016f6
 80057c0:	20001715 	.word	0x20001715
				} else {
					makineCalisiyor=1;
 80057c4:	4b3a      	ldr	r3, [pc, #232]	@ (80058b0 <checkAktifCalisma+0x1698>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80057ca:	4b3a      	ldr	r3, [pc, #232]	@ (80058b4 <checkAktifCalisma+0x169c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3a      	ldr	r2, [pc, #232]	@ (80058b8 <checkAktifCalisma+0x16a0>)
 80057d0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80057d2:	4b3a      	ldr	r3, [pc, #232]	@ (80058bc <checkAktifCalisma+0x16a4>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02f      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057da:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <checkAktifCalisma+0x16a8>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f083 0301 	eor.w	r3, r3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d028      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057e8:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f083 0301 	eor.w	r3, r3, #1
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d021      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057f6:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <checkAktifCalisma+0x16b0>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	f083 0301 	eor.w	r3, r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01a      	beq.n	800583a <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005804:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <checkAktifCalisma+0x16b4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f083 0301 	eor.w	r3, r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d013      	beq.n	800583a <checkAktifCalisma+0x1622>
 8005812:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <checkAktifCalisma+0x16b8>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <checkAktifCalisma+0x1622>
 8005820:	4b2c      	ldr	r3, [pc, #176]	@ (80058d4 <checkAktifCalisma+0x16bc>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <checkAktifCalisma+0x1622>

					hataVar=0;
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <checkAktifCalisma+0x16a4>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005834:	2007      	movs	r0, #7
 8005836:	f7fe fae5 	bl	8003e04 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800583a:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <checkAktifCalisma+0x16a4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02a      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005842:	4b1f      	ldr	r3, [pc, #124]	@ (80058c0 <checkAktifCalisma+0x16a8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005850:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01f      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005858:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <checkAktifCalisma+0x16b0>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005866:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <checkAktifCalisma+0x16b4>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f083 0301 	eor.w	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005874:	4b16      	ldr	r3, [pc, #88]	@ (80058d0 <checkAktifCalisma+0x16b8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f083 0301 	eor.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <checkAktifCalisma+0x16bc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f083 0301 	eor.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005890:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <checkAktifCalisma+0x16c0>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005896:	e009      	b.n	80058ac <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005898:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f083 0301 	eor.w	r3, r3, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <checkAktifCalisma+0x16c0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20001715 	.word	0x20001715
 80058b4:	20001698 	.word	0x20001698
 80058b8:	200016ac 	.word	0x200016ac
 80058bc:	20001714 	.word	0x20001714
 80058c0:	2000170f 	.word	0x2000170f
 80058c4:	20001710 	.word	0x20001710
 80058c8:	2000171d 	.word	0x2000171d
 80058cc:	2000171e 	.word	0x2000171e
 80058d0:	2000171f 	.word	0x2000171f
 80058d4:	2000170e 	.word	0x2000170e
 80058d8:	20001723 	.word	0x20001723

080058dc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80058e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005b10 <checkDemoModCalisma+0x234>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	f040 81c4 	bne.w	8005c72 <checkDemoModCalisma+0x396>
 80058ea:	4b8a      	ldr	r3, [pc, #552]	@ (8005b14 <checkDemoModCalisma+0x238>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 81bf 	beq.w	8005c72 <checkDemoModCalisma+0x396>
 80058f4:	4b88      	ldr	r3, [pc, #544]	@ (8005b18 <checkDemoModCalisma+0x23c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 81ba 	bne.w	8005c72 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058fe:	2102      	movs	r1, #2
 8005900:	4886      	ldr	r0, [pc, #536]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005902:	f004 fff1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11d      	bne.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 800590c:	4b84      	ldr	r3, [pc, #528]	@ (8005b20 <checkDemoModCalisma+0x244>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f083 0301 	eor.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 800591a:	4b82      	ldr	r3, [pc, #520]	@ (8005b24 <checkDemoModCalisma+0x248>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005928:	4b7f      	ldr	r3, [pc, #508]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005936:	2201      	movs	r2, #1
 8005938:	2104      	movs	r1, #4
 800593a:	487c      	ldr	r0, [pc, #496]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800593c:	f004 ffeb 	bl	800a916 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005940:	4b7b      	ldr	r3, [pc, #492]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e00e      	b.n	8005966 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005948:	2102      	movs	r1, #2
 800594a:	4874      	ldr	r0, [pc, #464]	@ (8005b1c <checkDemoModCalisma+0x240>)
 800594c:	f004 ffcc 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005956:	2200      	movs	r2, #0
 8005958:	2104      	movs	r1, #4
 800595a:	4874      	ldr	r0, [pc, #464]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800595c:	f004 ffdb 	bl	800a916 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005960:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005966:	4b72      	ldr	r3, [pc, #456]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 800596e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 8005976:	4b6c      	ldr	r3, [pc, #432]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 800597e:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005986:	2201      	movs	r2, #1
 8005988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800598c:	4867      	ldr	r0, [pc, #412]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800598e:	f004 ffc2 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005992:	2201      	movs	r2, #1
 8005994:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005998:	4864      	ldr	r0, [pc, #400]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800599a:	f004 ffbc 	bl	800a916 <HAL_GPIO_WritePin>
 800599e:	e00b      	b.n	80059b8 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a6:	4861      	ldr	r0, [pc, #388]	@ (8005b2c <checkDemoModCalisma+0x250>)
 80059a8:	f004 ffb5 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059b2:	485e      	ldr	r0, [pc, #376]	@ (8005b2c <checkDemoModCalisma+0x250>)
 80059b4:	f004 ffaf 	bl	800a916 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059b8:	2102      	movs	r1, #2
 80059ba:	4858      	ldr	r0, [pc, #352]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059bc:	f004 ff94 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10d      	bne.n	80059e2 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80059c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059ca:	4854      	ldr	r0, [pc, #336]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059cc:	f004 ff8c 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 80059d6:	4b56      	ldr	r3, [pc, #344]	@ (8005b30 <checkDemoModCalisma+0x254>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f083 0301 	eor.w	r3, r3, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059e2:	2102      	movs	r1, #2
 80059e4:	484d      	ldr	r0, [pc, #308]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059e6:	f004 ff7f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d125      	bne.n	8005a3c <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80059f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059f4:	4849      	ldr	r0, [pc, #292]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059f6:	f004 ff77 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11d      	bne.n	8005a3c <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005a00:	4b4b      	ldr	r3, [pc, #300]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f083 0301 	eor.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005a0e:	4b44      	ldr	r3, [pc, #272]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f083 0301 	eor.w	r3, r3, #1
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00f      	beq.n	8005a3c <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005a1c:	4b42      	ldr	r3, [pc, #264]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f083 0301 	eor.w	r3, r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	483b      	ldr	r0, [pc, #236]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a30:	f004 ff71 	bl	800a916 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005a34:	4b3b      	ldr	r3, [pc, #236]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2120      	movs	r1, #32
 8005a40:	4836      	ldr	r0, [pc, #216]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a42:	f004 ff68 	bl	800a916 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005a46:	4b37      	ldr	r3, [pc, #220]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4833      	ldr	r0, [pc, #204]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a50:	f004 ff4a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d125      	bne.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005a5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a5e:	482f      	ldr	r0, [pc, #188]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a60:	f004 ff42 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11d      	bne.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005a6a:	4b31      	ldr	r3, [pc, #196]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f083 0301 	eor.w	r3, r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d016      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005a78:	4b2a      	ldr	r3, [pc, #168]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f083 0301 	eor.w	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00f      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005a86:	4b26      	ldr	r3, [pc, #152]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005a94:	2201      	movs	r2, #1
 8005a96:	2110      	movs	r1, #16
 8005a98:	4820      	ldr	r0, [pc, #128]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a9a:	f004 ff3c 	bl	800a916 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005a9e:	4b22      	ldr	r3, [pc, #136]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e007      	b.n	8005ab6 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	481c      	ldr	r0, [pc, #112]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005aac:	f004 ff33 	bl	800a916 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4818      	ldr	r0, [pc, #96]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005aba:	f004 ff15 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d139      	bne.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f083 0301 	eor.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d032      	beq.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	f083 0301 	eor.w	r3, r3, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02b      	beq.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005ae0:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d024      	beq.n	8005b38 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	2102      	movs	r1, #2
 8005af2:	480e      	ldr	r0, [pc, #56]	@ (8005b2c <checkDemoModCalisma+0x250>)
 8005af4:	f004 ff0f 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005af8:	2201      	movs	r2, #1
 8005afa:	2101      	movs	r1, #1
 8005afc:	480b      	ldr	r0, [pc, #44]	@ (8005b2c <checkDemoModCalisma+0x250>)
 8005afe:	f004 ff0a 	bl	800a916 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <checkDemoModCalisma+0x258>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e027      	b.n	8005b60 <checkDemoModCalisma+0x284>
 8005b10:	200016de 	.word	0x200016de
 8005b14:	20001711 	.word	0x20001711
 8005b18:	200016dd 	.word	0x200016dd
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	20001718 	.word	0x20001718
 8005b24:	20001719 	.word	0x20001719
 8005b28:	2000171a 	.word	0x2000171a
 8005b2c:	40010c00 	.word	0x40010c00
 8005b30:	20001717 	.word	0x20001717
 8005b34:	200016fe 	.word	0x200016fe
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005b38:	2104      	movs	r1, #4
 8005b3a:	486d      	ldr	r0, [pc, #436]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005b3c:	f004 fed4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10c      	bne.n	8005b60 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2102      	movs	r1, #2
 8005b4a:	486a      	ldr	r0, [pc, #424]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005b4c:	f004 fee3 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2101      	movs	r1, #1
 8005b54:	4867      	ldr	r0, [pc, #412]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005b56:	f004 fede 	bl	800a916 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <checkDemoModCalisma+0x41c>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005b60:	2104      	movs	r1, #4
 8005b62:	4863      	ldr	r0, [pc, #396]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005b64:	f004 fec0 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10d      	bne.n	8005b8a <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	2180      	movs	r1, #128	@ 0x80
 8005b72:	4862      	ldr	r0, [pc, #392]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b74:	f004 fecf 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005b78:	2201      	movs	r2, #1
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	485f      	ldr	r0, [pc, #380]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b7e:	f004 feca 	bl	800a916 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005b82:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a5f      	ldr	r2, [pc, #380]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005b88:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d909      	bls.n	8005bac <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	4857      	ldr	r0, [pc, #348]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b9e:	f004 feba 	bl	800a916 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2120      	movs	r1, #32
 8005ba6:	4855      	ldr	r0, [pc, #340]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005ba8:	f004 feb5 	bl	800a916 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005bac:	2102      	movs	r1, #2
 8005bae:	4850      	ldr	r0, [pc, #320]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005bb0:	f004 fe9a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d108      	bne.n	8005bcc <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2140      	movs	r1, #64	@ 0x40
 8005bbe:	484f      	ldr	r0, [pc, #316]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005bc0:	f004 fea9 	bl	800a916 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005bca:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d904      	bls.n	8005be4 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2140      	movs	r1, #64	@ 0x40
 8005bde:	4847      	ldr	r0, [pc, #284]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005be0:	f004 fe99 	bl	800a916 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005be4:	4b48      	ldr	r3, [pc, #288]	@ (8005d08 <checkDemoModCalisma+0x42c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d024      	beq.n	8005c36 <checkDemoModCalisma+0x35a>
 8005bec:	4b47      	ldr	r3, [pc, #284]	@ (8005d0c <checkDemoModCalisma+0x430>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005bf4:	4b46      	ldr	r3, [pc, #280]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	4b44      	ldr	r3, [pc, #272]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005bfe:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005c00:	4b44      	ldr	r3, [pc, #272]	@ (8005d14 <checkDemoModCalisma+0x438>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2bff      	cmp	r3, #255	@ 0xff
 8005c06:	d108      	bne.n	8005c1a <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005c08:	4b42      	ldr	r3, [pc, #264]	@ (8005d14 <checkDemoModCalisma+0x438>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005c0e:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <checkDemoModCalisma+0x43c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <checkDemoModCalisma+0x43c>)
 8005c18:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d1c <checkDemoModCalisma+0x440>)
 8005c20:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005c22:	4b3f      	ldr	r3, [pc, #252]	@ (8005d20 <checkDemoModCalisma+0x444>)
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	4b3d      	ldr	r3, [pc, #244]	@ (8005d1c <checkDemoModCalisma+0x440>)
 8005c28:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d24 <checkDemoModCalisma+0x448>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005c30:	4b36      	ldr	r3, [pc, #216]	@ (8005d0c <checkDemoModCalisma+0x430>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005c36:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <checkDemoModCalisma+0x44c>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d156      	bne.n	8005cec <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8005d2c <checkDemoModCalisma+0x450>)
 8005c40:	2101      	movs	r1, #1
 8005c42:	2002      	movs	r0, #2
 8005c44:	f003 fafc 	bl	8009240 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005c48:	4a39      	ldr	r2, [pc, #228]	@ (8005d30 <checkDemoModCalisma+0x454>)
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f003 faf7 	bl	8009240 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005c52:	4b2f      	ldr	r3, [pc, #188]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	220a      	movs	r2, #10
 8005c58:	4936      	ldr	r1, [pc, #216]	@ (8005d34 <checkDemoModCalisma+0x458>)
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f008 f9bc 	bl	800dfd8 <itoa>
					lcd_print(2,11,snum);
 8005c60:	4a34      	ldr	r2, [pc, #208]	@ (8005d34 <checkDemoModCalisma+0x458>)
 8005c62:	210b      	movs	r1, #11
 8005c64:	2002      	movs	r0, #2
 8005c66:	f003 faeb 	bl	8009240 <lcd_print>
					mesajYazildi=1;
 8005c6a:	4b33      	ldr	r3, [pc, #204]	@ (8005d38 <checkDemoModCalisma+0x45c>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005c70:	e03c      	b.n	8005cec <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005c72:	4b32      	ldr	r3, [pc, #200]	@ (8005d3c <checkDemoModCalisma+0x460>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d003      	beq.n	8005c82 <checkDemoModCalisma+0x3a6>
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d28 <checkDemoModCalisma+0x44c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d134      	bne.n	8005cec <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c82:	2200      	movs	r2, #0
 8005c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c88:	481a      	ldr	r0, [pc, #104]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005c8a:	f004 fe44 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c94:	4817      	ldr	r0, [pc, #92]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005c96:	f004 fe3e 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2104      	movs	r1, #4
 8005c9e:	4815      	ldr	r0, [pc, #84]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005ca0:	f004 fe39 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	4812      	ldr	r0, [pc, #72]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005caa:	f004 fe34 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4810      	ldr	r0, [pc, #64]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005cb4:	f004 fe2f 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2120      	movs	r1, #32
 8005cbc:	480c      	ldr	r0, [pc, #48]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005cbe:	f004 fe2a 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	480a      	ldr	r0, [pc, #40]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005cc8:	f004 fe25 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	480a      	ldr	r0, [pc, #40]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005cd2:	f004 fe20 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2140      	movs	r1, #64	@ 0x40
 8005cda:	4808      	ldr	r0, [pc, #32]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005cdc:	f004 fe1b 	bl	800a916 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	4805      	ldr	r0, [pc, #20]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005ce6:	f004 fe16 	bl	800a916 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005cea:	e7ff      	b.n	8005cec <checkDemoModCalisma+0x410>
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40010c00 	.word	0x40010c00
 8005cf8:	20001718 	.word	0x20001718
 8005cfc:	40010800 	.word	0x40010800
 8005d00:	20001698 	.word	0x20001698
 8005d04:	200016a8 	.word	0x200016a8
 8005d08:	20001717 	.word	0x20001717
 8005d0c:	200016fe 	.word	0x200016fe
 8005d10:	200016b9 	.word	0x200016b9
 8005d14:	200016b8 	.word	0x200016b8
 8005d18:	200016ba 	.word	0x200016ba
 8005d1c:	20000fec 	.word	0x20000fec
 8005d20:	200016bb 	.word	0x200016bb
 8005d24:	200016ec 	.word	0x200016ec
 8005d28:	200016dd 	.word	0x200016dd
 8005d2c:	0800ede4 	.word	0x0800ede4
 8005d30:	0800edf0 	.word	0x0800edf0
 8005d34:	2000105c 	.word	0x2000105c
 8005d38:	200016f4 	.word	0x200016f4
 8005d3c:	200016de 	.word	0x200016de

08005d40 <mainLoop>:

void mainLoop() {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005d44:	f7fe f8b6 	bl	8003eb4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005d48:	2101      	movs	r1, #1
 8005d4a:	488b      	ldr	r0, [pc, #556]	@ (8005f78 <mainLoop+0x238>)
 8005d4c:	f004 fdcc 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d136      	bne.n	8005dc4 <mainLoop+0x84>
 8005d56:	2108      	movs	r1, #8
 8005d58:	4888      	ldr	r0, [pc, #544]	@ (8005f7c <mainLoop+0x23c>)
 8005d5a:	f004 fdc5 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d12f      	bne.n	8005dc4 <mainLoop+0x84>
 8005d64:	2102      	movs	r1, #2
 8005d66:	4884      	ldr	r0, [pc, #528]	@ (8005f78 <mainLoop+0x238>)
 8005d68:	f004 fdbe 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d128      	bne.n	8005dc4 <mainLoop+0x84>
 8005d72:	2104      	movs	r1, #4
 8005d74:	4880      	ldr	r0, [pc, #512]	@ (8005f78 <mainLoop+0x238>)
 8005d76:	f004 fdb7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d121      	bne.n	8005dc4 <mainLoop+0x84>
 8005d80:	2108      	movs	r1, #8
 8005d82:	487d      	ldr	r0, [pc, #500]	@ (8005f78 <mainLoop+0x238>)
 8005d84:	f004 fdb0 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11a      	bne.n	8005dc4 <mainLoop+0x84>
 8005d8e:	2180      	movs	r1, #128	@ 0x80
 8005d90:	487a      	ldr	r0, [pc, #488]	@ (8005f7c <mainLoop+0x23c>)
 8005d92:	f004 fda9 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d113      	bne.n	8005dc4 <mainLoop+0x84>
 8005d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005da0:	4876      	ldr	r0, [pc, #472]	@ (8005f7c <mainLoop+0x23c>)
 8005da2:	f004 fda1 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10b      	bne.n	8005dc4 <mainLoop+0x84>
 8005dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005db0:	4872      	ldr	r0, [pc, #456]	@ (8005f7c <mainLoop+0x23c>)
 8005db2:	f004 fd99 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d103      	bne.n	8005dc4 <mainLoop+0x84>
			butonKontrol=0;
 8005dbc:	4b70      	ldr	r3, [pc, #448]	@ (8005f80 <mainLoop+0x240>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <mainLoop+0x244>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8005f88 <mainLoop+0x248>)
 8005dca:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005dcc:	f7fe f924 	bl	8004018 <buttonCheck>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d103      	bne.n	8005dde <mainLoop+0x9e>
			backLightTimer = millis;
 8005dd6:	4b6b      	ldr	r3, [pc, #428]	@ (8005f84 <mainLoop+0x244>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6b      	ldr	r2, [pc, #428]	@ (8005f88 <mainLoop+0x248>)
 8005ddc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005dde:	4b6b      	ldr	r3, [pc, #428]	@ (8005f8c <mainLoop+0x24c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005de6:	4b69      	ldr	r3, [pc, #420]	@ (8005f8c <mainLoop+0x24c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005dec:	2001      	movs	r0, #1
 8005dee:	f7fa fc59 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005df2:	4b67      	ldr	r3, [pc, #412]	@ (8005f90 <mainLoop+0x250>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d043      	beq.n	8005e88 <mainLoop+0x148>
 8005e00:	4864      	ldr	r0, [pc, #400]	@ (8005f94 <mainLoop+0x254>)
 8005e02:	f005 fb8d 	bl	800b520 <HAL_I2C_GetState>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d13d      	bne.n	8005e88 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005e0c:	4b62      	ldr	r3, [pc, #392]	@ (8005f98 <mainLoop+0x258>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f083 0301 	eor.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d028      	beq.n	8005e6c <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005e1a:	4a60      	ldr	r2, [pc, #384]	@ (8005f9c <mainLoop+0x25c>)
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f003 fa0e 	bl	8009240 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005e24:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa0 <mainLoop+0x260>)
 8005e26:	2101      	movs	r1, #1
 8005e28:	2002      	movs	r0, #2
 8005e2a:	f003 fa09 	bl	8009240 <lcd_print>
			  HAL_Delay(1000);
 8005e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e32:	f003 ff7d 	bl	8009d30 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005e36:	bf00      	nop
 8005e38:	4856      	ldr	r0, [pc, #344]	@ (8005f94 <mainLoop+0x254>)
 8005e3a:	f005 fb7e 	bl	800b53a <HAL_I2C_GetError>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d0f9      	beq.n	8005e38 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e44:	e003      	b.n	8005e4e <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005e46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e4a:	f003 ff71 	bl	8009d30 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e4e:	4851      	ldr	r0, [pc, #324]	@ (8005f94 <mainLoop+0x254>)
 8005e50:	f005 fb66 	bl	800b520 <HAL_I2C_GetState>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d1f5      	bne.n	8005e46 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005e5a:	4a52      	ldr	r2, [pc, #328]	@ (8005fa4 <mainLoop+0x264>)
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	2002      	movs	r0, #2
 8005e60:	f003 f9ee 	bl	8009240 <lcd_print>

			  ilkOkuma=1;
 8005e64:	4b4c      	ldr	r3, [pc, #304]	@ (8005f98 <mainLoop+0x258>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e006      	b.n	8005e7a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8005fa8 <mainLoop+0x268>)
 8005e6e:	2101      	movs	r1, #1
 8005e70:	2002      	movs	r0, #2
 8005e72:	f003 f9e5 	bl	8009240 <lcd_print>
			  lcd_clear();
 8005e76:	f003 fa0f 	bl	8009298 <lcd_clear>
		  }

		  lcd_clear();
 8005e7a:	f003 fa0d 	bl	8009298 <lcd_clear>

		  eepromKontrol();
 8005e7e:	f7fa f9d9 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005e82:	4b43      	ldr	r3, [pc, #268]	@ (8005f90 <mainLoop+0x250>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005e88:	4b48      	ldr	r3, [pc, #288]	@ (8005fac <mainLoop+0x26c>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11c      	bne.n	8005eca <mainLoop+0x18a>
 8005e90:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <mainLoop+0x270>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d015      	beq.n	8005eca <mainLoop+0x18a>
 8005e9e:	4b45      	ldr	r3, [pc, #276]	@ (8005fb4 <mainLoop+0x274>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d111      	bne.n	8005eca <mainLoop+0x18a>
			lcd_clear();
 8005ea6:	f003 f9f7 	bl	8009298 <lcd_clear>
			HAL_Delay(10);
 8005eaa:	200a      	movs	r0, #10
 8005eac:	f003 ff40 	bl	8009d30 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005eb0:	4a41      	ldr	r2, [pc, #260]	@ (8005fb8 <mainLoop+0x278>)
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	f003 f9c3 	bl	8009240 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005eba:	4a40      	ldr	r2, [pc, #256]	@ (8005fbc <mainLoop+0x27c>)
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	f003 f9be 	bl	8009240 <lcd_print>
			mesajYazildi=1;
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb0 <mainLoop+0x270>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005eca:	4b38      	ldr	r3, [pc, #224]	@ (8005fac <mainLoop+0x26c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d112      	bne.n	8005ef8 <mainLoop+0x1b8>
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	4828      	ldr	r0, [pc, #160]	@ (8005f78 <mainLoop+0x238>)
 8005ed6:	f004 fd07 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10b      	bne.n	8005ef8 <mainLoop+0x1b8>
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	4825      	ldr	r0, [pc, #148]	@ (8005f78 <mainLoop+0x238>)
 8005ee4:	f004 fd00 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d104      	bne.n	8005ef8 <mainLoop+0x1b8>
			menuGiris=1;
 8005eee:	4b2f      	ldr	r3, [pc, #188]	@ (8005fac <mainLoop+0x26c>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005ef4:	f003 f9d0 	bl	8009298 <lcd_clear>
		}

		if(menuGiris==1) {
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8005fac <mainLoop+0x26c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <mainLoop+0x1c4>
			menu();
 8005f00:	f7fb faa8 	bl	8001454 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f08:	481c      	ldr	r0, [pc, #112]	@ (8005f7c <mainLoop+0x23c>)
 8005f0a:	f004 fd1c 	bl	800a946 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f12:	482b      	ldr	r0, [pc, #172]	@ (8005fc0 <mainLoop+0x280>)
 8005f14:	f004 fce8 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <mainLoop+0x1f4>
 8005f1e:	4b29      	ldr	r3, [pc, #164]	@ (8005fc4 <mainLoop+0x284>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <mainLoop+0x1f4>
			stopVar=1;
 8005f2c:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <mainLoop+0x288>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <mainLoop+0x288>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f3e:	4820      	ldr	r0, [pc, #128]	@ (8005fc0 <mainLoop+0x280>)
 8005f40:	f004 fcd2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d107      	bne.n	8005f5a <mainLoop+0x21a>
 8005f4a:	4b20      	ldr	r3, [pc, #128]	@ (8005fcc <mainLoop+0x28c>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <mainLoop+0x21a>
			EmnStopVar=1;
 8005f52:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd0 <mainLoop+0x290>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd0 <mainLoop+0x290>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005f60:	f7fe f88e 	bl	8004080 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005f64:	f7fe f8c0 	bl	80040e8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005f68:	f7fe f904 	bl	8004174 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005f6c:	f7fe f954 	bl	8004218 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005f70:	f7ff fcb4 	bl	80058dc <checkDemoModCalisma>
		checkLCDBacklight();
 8005f74:	e6e6      	b.n	8005d44 <mainLoop+0x4>
 8005f76:	bf00      	nop
 8005f78:	40010800 	.word	0x40010800
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	200016ef 	.word	0x200016ef
 8005f84:	20001698 	.word	0x20001698
 8005f88:	200016b4 	.word	0x200016b4
 8005f8c:	200016ec 	.word	0x200016ec
 8005f90:	200016ed 	.word	0x200016ed
 8005f94:	20001f40 	.word	0x20001f40
 8005f98:	200016ee 	.word	0x200016ee
 8005f9c:	20000178 	.word	0x20000178
 8005fa0:	20001e78 	.word	0x20001e78
 8005fa4:	20001e8c 	.word	0x20001e8c
 8005fa8:	20001ea0 	.word	0x20001ea0
 8005fac:	200016dd 	.word	0x200016dd
 8005fb0:	200016f4 	.word	0x200016f4
 8005fb4:	200016de 	.word	0x200016de
 8005fb8:	200000c4 	.word	0x200000c4
 8005fbc:	200000d8 	.word	0x200000d8
 8005fc0:	40010c00 	.word	0x40010c00
 8005fc4:	20001714 	.word	0x20001714
 8005fc8:	20001711 	.word	0x20001711
 8005fcc:	20001723 	.word	0x20001723
 8005fd0:	20001724 	.word	0x20001724

08005fd4 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 853d 	bne.w	8006a60 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005fe6:	4ac7      	ldr	r2, [pc, #796]	@ (8006304 <loadMenuTexts+0x330>)
 8005fe8:	4bc7      	ldr	r3, [pc, #796]	@ (8006308 <loadMenuTexts+0x334>)
 8005fea:	4614      	mov	r4, r2
 8005fec:	461d      	mov	r5, r3
 8005fee:	6828      	ldr	r0, [r5, #0]
 8005ff0:	6869      	ldr	r1, [r5, #4]
 8005ff2:	68aa      	ldr	r2, [r5, #8]
 8005ff4:	68eb      	ldr	r3, [r5, #12]
 8005ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff8:	7c2b      	ldrb	r3, [r5, #16]
 8005ffa:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005ffc:	4ac3      	ldr	r2, [pc, #780]	@ (800630c <loadMenuTexts+0x338>)
 8005ffe:	4bc4      	ldr	r3, [pc, #784]	@ (8006310 <loadMenuTexts+0x33c>)
 8006000:	4614      	mov	r4, r2
 8006002:	461d      	mov	r5, r3
 8006004:	6828      	ldr	r0, [r5, #0]
 8006006:	6869      	ldr	r1, [r5, #4]
 8006008:	68aa      	ldr	r2, [r5, #8]
 800600a:	68eb      	ldr	r3, [r5, #12]
 800600c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800600e:	7c2b      	ldrb	r3, [r5, #16]
 8006010:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006012:	4ac0      	ldr	r2, [pc, #768]	@ (8006314 <loadMenuTexts+0x340>)
 8006014:	4bc0      	ldr	r3, [pc, #768]	@ (8006318 <loadMenuTexts+0x344>)
 8006016:	4614      	mov	r4, r2
 8006018:	461d      	mov	r5, r3
 800601a:	6828      	ldr	r0, [r5, #0]
 800601c:	6869      	ldr	r1, [r5, #4]
 800601e:	68aa      	ldr	r2, [r5, #8]
 8006020:	68eb      	ldr	r3, [r5, #12]
 8006022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006024:	7c2b      	ldrb	r3, [r5, #16]
 8006026:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006028:	4abc      	ldr	r2, [pc, #752]	@ (800631c <loadMenuTexts+0x348>)
 800602a:	4bbd      	ldr	r3, [pc, #756]	@ (8006320 <loadMenuTexts+0x34c>)
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	6828      	ldr	r0, [r5, #0]
 8006032:	6869      	ldr	r1, [r5, #4]
 8006034:	68aa      	ldr	r2, [r5, #8]
 8006036:	68eb      	ldr	r3, [r5, #12]
 8006038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603a:	7c2b      	ldrb	r3, [r5, #16]
 800603c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 800603e:	4ab9      	ldr	r2, [pc, #740]	@ (8006324 <loadMenuTexts+0x350>)
 8006040:	4bb9      	ldr	r3, [pc, #740]	@ (8006328 <loadMenuTexts+0x354>)
 8006042:	4614      	mov	r4, r2
 8006044:	461d      	mov	r5, r3
 8006046:	6828      	ldr	r0, [r5, #0]
 8006048:	6869      	ldr	r1, [r5, #4]
 800604a:	68aa      	ldr	r2, [r5, #8]
 800604c:	68eb      	ldr	r3, [r5, #12]
 800604e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006050:	7c2b      	ldrb	r3, [r5, #16]
 8006052:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006054:	4ab5      	ldr	r2, [pc, #724]	@ (800632c <loadMenuTexts+0x358>)
 8006056:	4bb6      	ldr	r3, [pc, #728]	@ (8006330 <loadMenuTexts+0x35c>)
 8006058:	4614      	mov	r4, r2
 800605a:	461d      	mov	r5, r3
 800605c:	6828      	ldr	r0, [r5, #0]
 800605e:	6869      	ldr	r1, [r5, #4]
 8006060:	68aa      	ldr	r2, [r5, #8]
 8006062:	68eb      	ldr	r3, [r5, #12]
 8006064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006066:	7c2b      	ldrb	r3, [r5, #16]
 8006068:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800606a:	4ab2      	ldr	r2, [pc, #712]	@ (8006334 <loadMenuTexts+0x360>)
 800606c:	4bb2      	ldr	r3, [pc, #712]	@ (8006338 <loadMenuTexts+0x364>)
 800606e:	4614      	mov	r4, r2
 8006070:	461d      	mov	r5, r3
 8006072:	6828      	ldr	r0, [r5, #0]
 8006074:	6869      	ldr	r1, [r5, #4]
 8006076:	68aa      	ldr	r2, [r5, #8]
 8006078:	68eb      	ldr	r3, [r5, #12]
 800607a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800607c:	7c2b      	ldrb	r3, [r5, #16]
 800607e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006080:	4aae      	ldr	r2, [pc, #696]	@ (800633c <loadMenuTexts+0x368>)
 8006082:	4baf      	ldr	r3, [pc, #700]	@ (8006340 <loadMenuTexts+0x36c>)
 8006084:	4614      	mov	r4, r2
 8006086:	461d      	mov	r5, r3
 8006088:	6828      	ldr	r0, [r5, #0]
 800608a:	6869      	ldr	r1, [r5, #4]
 800608c:	68aa      	ldr	r2, [r5, #8]
 800608e:	68eb      	ldr	r3, [r5, #12]
 8006090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006092:	7c2b      	ldrb	r3, [r5, #16]
 8006094:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006096:	4aab      	ldr	r2, [pc, #684]	@ (8006344 <loadMenuTexts+0x370>)
 8006098:	4bab      	ldr	r3, [pc, #684]	@ (8006348 <loadMenuTexts+0x374>)
 800609a:	4614      	mov	r4, r2
 800609c:	461d      	mov	r5, r3
 800609e:	6828      	ldr	r0, [r5, #0]
 80060a0:	6869      	ldr	r1, [r5, #4]
 80060a2:	68aa      	ldr	r2, [r5, #8]
 80060a4:	68eb      	ldr	r3, [r5, #12]
 80060a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a8:	7c2b      	ldrb	r3, [r5, #16]
 80060aa:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80060ac:	4aa7      	ldr	r2, [pc, #668]	@ (800634c <loadMenuTexts+0x378>)
 80060ae:	4ba8      	ldr	r3, [pc, #672]	@ (8006350 <loadMenuTexts+0x37c>)
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	6828      	ldr	r0, [r5, #0]
 80060b6:	6869      	ldr	r1, [r5, #4]
 80060b8:	68aa      	ldr	r2, [r5, #8]
 80060ba:	68eb      	ldr	r3, [r5, #12]
 80060bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060be:	7c2b      	ldrb	r3, [r5, #16]
 80060c0:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80060c2:	4aa4      	ldr	r2, [pc, #656]	@ (8006354 <loadMenuTexts+0x380>)
 80060c4:	4ba4      	ldr	r3, [pc, #656]	@ (8006358 <loadMenuTexts+0x384>)
 80060c6:	4614      	mov	r4, r2
 80060c8:	461d      	mov	r5, r3
 80060ca:	6828      	ldr	r0, [r5, #0]
 80060cc:	6869      	ldr	r1, [r5, #4]
 80060ce:	68aa      	ldr	r2, [r5, #8]
 80060d0:	68eb      	ldr	r3, [r5, #12]
 80060d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d4:	7c2b      	ldrb	r3, [r5, #16]
 80060d6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 80060d8:	4aa0      	ldr	r2, [pc, #640]	@ (800635c <loadMenuTexts+0x388>)
 80060da:	4ba1      	ldr	r3, [pc, #644]	@ (8006360 <loadMenuTexts+0x38c>)
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	6828      	ldr	r0, [r5, #0]
 80060e2:	6869      	ldr	r1, [r5, #4]
 80060e4:	68aa      	ldr	r2, [r5, #8]
 80060e6:	68eb      	ldr	r3, [r5, #12]
 80060e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ea:	7c2b      	ldrb	r3, [r5, #16]
 80060ec:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 80060ee:	4a9d      	ldr	r2, [pc, #628]	@ (8006364 <loadMenuTexts+0x390>)
 80060f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006368 <loadMenuTexts+0x394>)
 80060f2:	4614      	mov	r4, r2
 80060f4:	461d      	mov	r5, r3
 80060f6:	6828      	ldr	r0, [r5, #0]
 80060f8:	6869      	ldr	r1, [r5, #4]
 80060fa:	68aa      	ldr	r2, [r5, #8]
 80060fc:	68eb      	ldr	r3, [r5, #12]
 80060fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006100:	7c2b      	ldrb	r3, [r5, #16]
 8006102:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006104:	4a99      	ldr	r2, [pc, #612]	@ (800636c <loadMenuTexts+0x398>)
 8006106:	4b9a      	ldr	r3, [pc, #616]	@ (8006370 <loadMenuTexts+0x39c>)
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	6828      	ldr	r0, [r5, #0]
 800610e:	6869      	ldr	r1, [r5, #4]
 8006110:	68aa      	ldr	r2, [r5, #8]
 8006112:	68eb      	ldr	r3, [r5, #12]
 8006114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006116:	7c2b      	ldrb	r3, [r5, #16]
 8006118:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800611a:	4a96      	ldr	r2, [pc, #600]	@ (8006374 <loadMenuTexts+0x3a0>)
 800611c:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <loadMenuTexts+0x3a4>)
 800611e:	4614      	mov	r4, r2
 8006120:	461d      	mov	r5, r3
 8006122:	6828      	ldr	r0, [r5, #0]
 8006124:	6869      	ldr	r1, [r5, #4]
 8006126:	68aa      	ldr	r2, [r5, #8]
 8006128:	68eb      	ldr	r3, [r5, #12]
 800612a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612c:	7c2b      	ldrb	r3, [r5, #16]
 800612e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006130:	4a92      	ldr	r2, [pc, #584]	@ (800637c <loadMenuTexts+0x3a8>)
 8006132:	4b93      	ldr	r3, [pc, #588]	@ (8006380 <loadMenuTexts+0x3ac>)
 8006134:	4614      	mov	r4, r2
 8006136:	461d      	mov	r5, r3
 8006138:	6828      	ldr	r0, [r5, #0]
 800613a:	6869      	ldr	r1, [r5, #4]
 800613c:	68aa      	ldr	r2, [r5, #8]
 800613e:	68eb      	ldr	r3, [r5, #12]
 8006140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006142:	7c2b      	ldrb	r3, [r5, #16]
 8006144:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006146:	4a8f      	ldr	r2, [pc, #572]	@ (8006384 <loadMenuTexts+0x3b0>)
 8006148:	4b8f      	ldr	r3, [pc, #572]	@ (8006388 <loadMenuTexts+0x3b4>)
 800614a:	4614      	mov	r4, r2
 800614c:	461d      	mov	r5, r3
 800614e:	6828      	ldr	r0, [r5, #0]
 8006150:	6869      	ldr	r1, [r5, #4]
 8006152:	68aa      	ldr	r2, [r5, #8]
 8006154:	68eb      	ldr	r3, [r5, #12]
 8006156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006158:	7c2b      	ldrb	r3, [r5, #16]
 800615a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800615c:	4a8b      	ldr	r2, [pc, #556]	@ (800638c <loadMenuTexts+0x3b8>)
 800615e:	4b8c      	ldr	r3, [pc, #560]	@ (8006390 <loadMenuTexts+0x3bc>)
 8006160:	4614      	mov	r4, r2
 8006162:	461d      	mov	r5, r3
 8006164:	6828      	ldr	r0, [r5, #0]
 8006166:	6869      	ldr	r1, [r5, #4]
 8006168:	68aa      	ldr	r2, [r5, #8]
 800616a:	68eb      	ldr	r3, [r5, #12]
 800616c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616e:	7c2b      	ldrb	r3, [r5, #16]
 8006170:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006172:	4a88      	ldr	r2, [pc, #544]	@ (8006394 <loadMenuTexts+0x3c0>)
 8006174:	4b88      	ldr	r3, [pc, #544]	@ (8006398 <loadMenuTexts+0x3c4>)
 8006176:	4614      	mov	r4, r2
 8006178:	461d      	mov	r5, r3
 800617a:	6828      	ldr	r0, [r5, #0]
 800617c:	6869      	ldr	r1, [r5, #4]
 800617e:	68aa      	ldr	r2, [r5, #8]
 8006180:	68eb      	ldr	r3, [r5, #12]
 8006182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006184:	7c2b      	ldrb	r3, [r5, #16]
 8006186:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006188:	4a84      	ldr	r2, [pc, #528]	@ (800639c <loadMenuTexts+0x3c8>)
 800618a:	4b85      	ldr	r3, [pc, #532]	@ (80063a0 <loadMenuTexts+0x3cc>)
 800618c:	4614      	mov	r4, r2
 800618e:	461d      	mov	r5, r3
 8006190:	6828      	ldr	r0, [r5, #0]
 8006192:	6869      	ldr	r1, [r5, #4]
 8006194:	68aa      	ldr	r2, [r5, #8]
 8006196:	68eb      	ldr	r3, [r5, #12]
 8006198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800619a:	7c2b      	ldrb	r3, [r5, #16]
 800619c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800619e:	4a81      	ldr	r2, [pc, #516]	@ (80063a4 <loadMenuTexts+0x3d0>)
 80061a0:	4b81      	ldr	r3, [pc, #516]	@ (80063a8 <loadMenuTexts+0x3d4>)
 80061a2:	4614      	mov	r4, r2
 80061a4:	461d      	mov	r5, r3
 80061a6:	6828      	ldr	r0, [r5, #0]
 80061a8:	6869      	ldr	r1, [r5, #4]
 80061aa:	68aa      	ldr	r2, [r5, #8]
 80061ac:	68eb      	ldr	r3, [r5, #12]
 80061ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b0:	7c2b      	ldrb	r3, [r5, #16]
 80061b2:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80061b4:	4a7d      	ldr	r2, [pc, #500]	@ (80063ac <loadMenuTexts+0x3d8>)
 80061b6:	4b7e      	ldr	r3, [pc, #504]	@ (80063b0 <loadMenuTexts+0x3dc>)
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	6828      	ldr	r0, [r5, #0]
 80061be:	6869      	ldr	r1, [r5, #4]
 80061c0:	68aa      	ldr	r2, [r5, #8]
 80061c2:	68eb      	ldr	r3, [r5, #12]
 80061c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c6:	7c2b      	ldrb	r3, [r5, #16]
 80061c8:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80061ca:	4a7a      	ldr	r2, [pc, #488]	@ (80063b4 <loadMenuTexts+0x3e0>)
 80061cc:	4b7a      	ldr	r3, [pc, #488]	@ (80063b8 <loadMenuTexts+0x3e4>)
 80061ce:	4614      	mov	r4, r2
 80061d0:	461d      	mov	r5, r3
 80061d2:	6828      	ldr	r0, [r5, #0]
 80061d4:	6869      	ldr	r1, [r5, #4]
 80061d6:	68aa      	ldr	r2, [r5, #8]
 80061d8:	68eb      	ldr	r3, [r5, #12]
 80061da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061dc:	7c2b      	ldrb	r3, [r5, #16]
 80061de:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80061e0:	4a76      	ldr	r2, [pc, #472]	@ (80063bc <loadMenuTexts+0x3e8>)
 80061e2:	4b77      	ldr	r3, [pc, #476]	@ (80063c0 <loadMenuTexts+0x3ec>)
 80061e4:	4614      	mov	r4, r2
 80061e6:	461d      	mov	r5, r3
 80061e8:	6828      	ldr	r0, [r5, #0]
 80061ea:	6869      	ldr	r1, [r5, #4]
 80061ec:	68aa      	ldr	r2, [r5, #8]
 80061ee:	68eb      	ldr	r3, [r5, #12]
 80061f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f2:	7c2b      	ldrb	r3, [r5, #16]
 80061f4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80061f6:	4a73      	ldr	r2, [pc, #460]	@ (80063c4 <loadMenuTexts+0x3f0>)
 80061f8:	4b73      	ldr	r3, [pc, #460]	@ (80063c8 <loadMenuTexts+0x3f4>)
 80061fa:	4614      	mov	r4, r2
 80061fc:	461d      	mov	r5, r3
 80061fe:	6828      	ldr	r0, [r5, #0]
 8006200:	6869      	ldr	r1, [r5, #4]
 8006202:	68aa      	ldr	r2, [r5, #8]
 8006204:	68eb      	ldr	r3, [r5, #12]
 8006206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006208:	7c2b      	ldrb	r3, [r5, #16]
 800620a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 800620c:	4a6f      	ldr	r2, [pc, #444]	@ (80063cc <loadMenuTexts+0x3f8>)
 800620e:	4b70      	ldr	r3, [pc, #448]	@ (80063d0 <loadMenuTexts+0x3fc>)
 8006210:	4614      	mov	r4, r2
 8006212:	461d      	mov	r5, r3
 8006214:	6828      	ldr	r0, [r5, #0]
 8006216:	6869      	ldr	r1, [r5, #4]
 8006218:	68aa      	ldr	r2, [r5, #8]
 800621a:	68eb      	ldr	r3, [r5, #12]
 800621c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621e:	7c2b      	ldrb	r3, [r5, #16]
 8006220:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006222:	4a6c      	ldr	r2, [pc, #432]	@ (80063d4 <loadMenuTexts+0x400>)
 8006224:	4b6c      	ldr	r3, [pc, #432]	@ (80063d8 <loadMenuTexts+0x404>)
 8006226:	4614      	mov	r4, r2
 8006228:	461d      	mov	r5, r3
 800622a:	6828      	ldr	r0, [r5, #0]
 800622c:	6869      	ldr	r1, [r5, #4]
 800622e:	68aa      	ldr	r2, [r5, #8]
 8006230:	68eb      	ldr	r3, [r5, #12]
 8006232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006234:	7c2b      	ldrb	r3, [r5, #16]
 8006236:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006238:	4a68      	ldr	r2, [pc, #416]	@ (80063dc <loadMenuTexts+0x408>)
 800623a:	4b69      	ldr	r3, [pc, #420]	@ (80063e0 <loadMenuTexts+0x40c>)
 800623c:	4614      	mov	r4, r2
 800623e:	461d      	mov	r5, r3
 8006240:	6828      	ldr	r0, [r5, #0]
 8006242:	6869      	ldr	r1, [r5, #4]
 8006244:	68aa      	ldr	r2, [r5, #8]
 8006246:	68eb      	ldr	r3, [r5, #12]
 8006248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624a:	7c2b      	ldrb	r3, [r5, #16]
 800624c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800624e:	4a65      	ldr	r2, [pc, #404]	@ (80063e4 <loadMenuTexts+0x410>)
 8006250:	4b65      	ldr	r3, [pc, #404]	@ (80063e8 <loadMenuTexts+0x414>)
 8006252:	4614      	mov	r4, r2
 8006254:	461d      	mov	r5, r3
 8006256:	6828      	ldr	r0, [r5, #0]
 8006258:	6869      	ldr	r1, [r5, #4]
 800625a:	68aa      	ldr	r2, [r5, #8]
 800625c:	68eb      	ldr	r3, [r5, #12]
 800625e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006260:	7c2b      	ldrb	r3, [r5, #16]
 8006262:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006264:	4a61      	ldr	r2, [pc, #388]	@ (80063ec <loadMenuTexts+0x418>)
 8006266:	4b62      	ldr	r3, [pc, #392]	@ (80063f0 <loadMenuTexts+0x41c>)
 8006268:	4614      	mov	r4, r2
 800626a:	461d      	mov	r5, r3
 800626c:	6828      	ldr	r0, [r5, #0]
 800626e:	6869      	ldr	r1, [r5, #4]
 8006270:	68aa      	ldr	r2, [r5, #8]
 8006272:	68eb      	ldr	r3, [r5, #12]
 8006274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006276:	7c2b      	ldrb	r3, [r5, #16]
 8006278:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800627a:	4a5e      	ldr	r2, [pc, #376]	@ (80063f4 <loadMenuTexts+0x420>)
 800627c:	4b5e      	ldr	r3, [pc, #376]	@ (80063f8 <loadMenuTexts+0x424>)
 800627e:	4614      	mov	r4, r2
 8006280:	461d      	mov	r5, r3
 8006282:	6828      	ldr	r0, [r5, #0]
 8006284:	6869      	ldr	r1, [r5, #4]
 8006286:	68aa      	ldr	r2, [r5, #8]
 8006288:	68eb      	ldr	r3, [r5, #12]
 800628a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628c:	7c2b      	ldrb	r3, [r5, #16]
 800628e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006290:	4a5a      	ldr	r2, [pc, #360]	@ (80063fc <loadMenuTexts+0x428>)
 8006292:	4b5b      	ldr	r3, [pc, #364]	@ (8006400 <loadMenuTexts+0x42c>)
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	6828      	ldr	r0, [r5, #0]
 800629a:	6869      	ldr	r1, [r5, #4]
 800629c:	68aa      	ldr	r2, [r5, #8]
 800629e:	68eb      	ldr	r3, [r5, #12]
 80062a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a2:	7c2b      	ldrb	r3, [r5, #16]
 80062a4:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80062a6:	4a57      	ldr	r2, [pc, #348]	@ (8006404 <loadMenuTexts+0x430>)
 80062a8:	4b57      	ldr	r3, [pc, #348]	@ (8006408 <loadMenuTexts+0x434>)
 80062aa:	4614      	mov	r4, r2
 80062ac:	461d      	mov	r5, r3
 80062ae:	6828      	ldr	r0, [r5, #0]
 80062b0:	6869      	ldr	r1, [r5, #4]
 80062b2:	68aa      	ldr	r2, [r5, #8]
 80062b4:	68eb      	ldr	r3, [r5, #12]
 80062b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b8:	7c2b      	ldrb	r3, [r5, #16]
 80062ba:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80062bc:	4a53      	ldr	r2, [pc, #332]	@ (800640c <loadMenuTexts+0x438>)
 80062be:	4b54      	ldr	r3, [pc, #336]	@ (8006410 <loadMenuTexts+0x43c>)
 80062c0:	4614      	mov	r4, r2
 80062c2:	461d      	mov	r5, r3
 80062c4:	6828      	ldr	r0, [r5, #0]
 80062c6:	6869      	ldr	r1, [r5, #4]
 80062c8:	68aa      	ldr	r2, [r5, #8]
 80062ca:	68eb      	ldr	r3, [r5, #12]
 80062cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ce:	7c2b      	ldrb	r3, [r5, #16]
 80062d0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80062d2:	4a50      	ldr	r2, [pc, #320]	@ (8006414 <loadMenuTexts+0x440>)
 80062d4:	4b50      	ldr	r3, [pc, #320]	@ (8006418 <loadMenuTexts+0x444>)
 80062d6:	4614      	mov	r4, r2
 80062d8:	461d      	mov	r5, r3
 80062da:	6828      	ldr	r0, [r5, #0]
 80062dc:	6869      	ldr	r1, [r5, #4]
 80062de:	68aa      	ldr	r2, [r5, #8]
 80062e0:	68eb      	ldr	r3, [r5, #12]
 80062e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e4:	7c2b      	ldrb	r3, [r5, #16]
 80062e6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80062e8:	4a4c      	ldr	r2, [pc, #304]	@ (800641c <loadMenuTexts+0x448>)
 80062ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006420 <loadMenuTexts+0x44c>)
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	6828      	ldr	r0, [r5, #0]
 80062f2:	6869      	ldr	r1, [r5, #4]
 80062f4:	68aa      	ldr	r2, [r5, #8]
 80062f6:	68eb      	ldr	r3, [r5, #12]
 80062f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fa:	7c2b      	ldrb	r3, [r5, #16]
 80062fc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80062fe:	4a49      	ldr	r2, [pc, #292]	@ (8006424 <loadMenuTexts+0x450>)
 8006300:	e092      	b.n	8006428 <loadMenuTexts+0x454>
 8006302:	bf00      	nop
 8006304:	20001824 	.word	0x20001824
 8006308:	2000018c 	.word	0x2000018c
 800630c:	20001838 	.word	0x20001838
 8006310:	200001a0 	.word	0x200001a0
 8006314:	2000184c 	.word	0x2000184c
 8006318:	200001b4 	.word	0x200001b4
 800631c:	20001860 	.word	0x20001860
 8006320:	200001c8 	.word	0x200001c8
 8006324:	20001874 	.word	0x20001874
 8006328:	200001dc 	.word	0x200001dc
 800632c:	20001888 	.word	0x20001888
 8006330:	200001f0 	.word	0x200001f0
 8006334:	2000189c 	.word	0x2000189c
 8006338:	20000204 	.word	0x20000204
 800633c:	200018b0 	.word	0x200018b0
 8006340:	20000218 	.word	0x20000218
 8006344:	200018c4 	.word	0x200018c4
 8006348:	2000022c 	.word	0x2000022c
 800634c:	200018d8 	.word	0x200018d8
 8006350:	20000240 	.word	0x20000240
 8006354:	200018ec 	.word	0x200018ec
 8006358:	20000254 	.word	0x20000254
 800635c:	20001900 	.word	0x20001900
 8006360:	20000268 	.word	0x20000268
 8006364:	20001914 	.word	0x20001914
 8006368:	2000027c 	.word	0x2000027c
 800636c:	20001928 	.word	0x20001928
 8006370:	20000290 	.word	0x20000290
 8006374:	2000193c 	.word	0x2000193c
 8006378:	200002a4 	.word	0x200002a4
 800637c:	20001950 	.word	0x20001950
 8006380:	200002b8 	.word	0x200002b8
 8006384:	20001964 	.word	0x20001964
 8006388:	200002cc 	.word	0x200002cc
 800638c:	20001978 	.word	0x20001978
 8006390:	200002e0 	.word	0x200002e0
 8006394:	2000198c 	.word	0x2000198c
 8006398:	200002f4 	.word	0x200002f4
 800639c:	200019a0 	.word	0x200019a0
 80063a0:	20000308 	.word	0x20000308
 80063a4:	200019b4 	.word	0x200019b4
 80063a8:	2000031c 	.word	0x2000031c
 80063ac:	200019c8 	.word	0x200019c8
 80063b0:	20000330 	.word	0x20000330
 80063b4:	200019dc 	.word	0x200019dc
 80063b8:	20000344 	.word	0x20000344
 80063bc:	200019f0 	.word	0x200019f0
 80063c0:	20000358 	.word	0x20000358
 80063c4:	20001a04 	.word	0x20001a04
 80063c8:	2000036c 	.word	0x2000036c
 80063cc:	20001a18 	.word	0x20001a18
 80063d0:	20000380 	.word	0x20000380
 80063d4:	20001a2c 	.word	0x20001a2c
 80063d8:	20000394 	.word	0x20000394
 80063dc:	20001a40 	.word	0x20001a40
 80063e0:	200003a8 	.word	0x200003a8
 80063e4:	20001a54 	.word	0x20001a54
 80063e8:	200003bc 	.word	0x200003bc
 80063ec:	20001a68 	.word	0x20001a68
 80063f0:	200003d0 	.word	0x200003d0
 80063f4:	20001a7c 	.word	0x20001a7c
 80063f8:	200003e4 	.word	0x200003e4
 80063fc:	20001a90 	.word	0x20001a90
 8006400:	200003f8 	.word	0x200003f8
 8006404:	20001aa4 	.word	0x20001aa4
 8006408:	2000040c 	.word	0x2000040c
 800640c:	20001ab8 	.word	0x20001ab8
 8006410:	20000420 	.word	0x20000420
 8006414:	20001acc 	.word	0x20001acc
 8006418:	20000434 	.word	0x20000434
 800641c:	20001ae0 	.word	0x20001ae0
 8006420:	20000448 	.word	0x20000448
 8006424:	20001af4 	.word	0x20001af4
 8006428:	4bc7      	ldr	r3, [pc, #796]	@ (8006748 <loadMenuTexts+0x774>)
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	6828      	ldr	r0, [r5, #0]
 8006430:	6869      	ldr	r1, [r5, #4]
 8006432:	68aa      	ldr	r2, [r5, #8]
 8006434:	68eb      	ldr	r3, [r5, #12]
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	7c2b      	ldrb	r3, [r5, #16]
 800643a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800643c:	4ac3      	ldr	r2, [pc, #780]	@ (800674c <loadMenuTexts+0x778>)
 800643e:	4bc4      	ldr	r3, [pc, #784]	@ (8006750 <loadMenuTexts+0x77c>)
 8006440:	4614      	mov	r4, r2
 8006442:	461d      	mov	r5, r3
 8006444:	6828      	ldr	r0, [r5, #0]
 8006446:	6869      	ldr	r1, [r5, #4]
 8006448:	68aa      	ldr	r2, [r5, #8]
 800644a:	68eb      	ldr	r3, [r5, #12]
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	7c2b      	ldrb	r3, [r5, #16]
 8006450:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006452:	4ac0      	ldr	r2, [pc, #768]	@ (8006754 <loadMenuTexts+0x780>)
 8006454:	4bc0      	ldr	r3, [pc, #768]	@ (8006758 <loadMenuTexts+0x784>)
 8006456:	4614      	mov	r4, r2
 8006458:	461d      	mov	r5, r3
 800645a:	6828      	ldr	r0, [r5, #0]
 800645c:	6869      	ldr	r1, [r5, #4]
 800645e:	68aa      	ldr	r2, [r5, #8]
 8006460:	68eb      	ldr	r3, [r5, #12]
 8006462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006464:	7c2b      	ldrb	r3, [r5, #16]
 8006466:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006468:	4abc      	ldr	r2, [pc, #752]	@ (800675c <loadMenuTexts+0x788>)
 800646a:	4bbd      	ldr	r3, [pc, #756]	@ (8006760 <loadMenuTexts+0x78c>)
 800646c:	4614      	mov	r4, r2
 800646e:	461d      	mov	r5, r3
 8006470:	6828      	ldr	r0, [r5, #0]
 8006472:	6869      	ldr	r1, [r5, #4]
 8006474:	68aa      	ldr	r2, [r5, #8]
 8006476:	68eb      	ldr	r3, [r5, #12]
 8006478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647a:	7c2b      	ldrb	r3, [r5, #16]
 800647c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800647e:	4ab9      	ldr	r2, [pc, #740]	@ (8006764 <loadMenuTexts+0x790>)
 8006480:	4bb9      	ldr	r3, [pc, #740]	@ (8006768 <loadMenuTexts+0x794>)
 8006482:	4614      	mov	r4, r2
 8006484:	461d      	mov	r5, r3
 8006486:	6828      	ldr	r0, [r5, #0]
 8006488:	6869      	ldr	r1, [r5, #4]
 800648a:	68aa      	ldr	r2, [r5, #8]
 800648c:	68eb      	ldr	r3, [r5, #12]
 800648e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006490:	7c2b      	ldrb	r3, [r5, #16]
 8006492:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006494:	4ab5      	ldr	r2, [pc, #724]	@ (800676c <loadMenuTexts+0x798>)
 8006496:	4bb6      	ldr	r3, [pc, #728]	@ (8006770 <loadMenuTexts+0x79c>)
 8006498:	4614      	mov	r4, r2
 800649a:	461d      	mov	r5, r3
 800649c:	6828      	ldr	r0, [r5, #0]
 800649e:	6869      	ldr	r1, [r5, #4]
 80064a0:	68aa      	ldr	r2, [r5, #8]
 80064a2:	68eb      	ldr	r3, [r5, #12]
 80064a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a6:	7c2b      	ldrb	r3, [r5, #16]
 80064a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80064aa:	4ab2      	ldr	r2, [pc, #712]	@ (8006774 <loadMenuTexts+0x7a0>)
 80064ac:	4bb2      	ldr	r3, [pc, #712]	@ (8006778 <loadMenuTexts+0x7a4>)
 80064ae:	4614      	mov	r4, r2
 80064b0:	461d      	mov	r5, r3
 80064b2:	6828      	ldr	r0, [r5, #0]
 80064b4:	6869      	ldr	r1, [r5, #4]
 80064b6:	68aa      	ldr	r2, [r5, #8]
 80064b8:	68eb      	ldr	r3, [r5, #12]
 80064ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064bc:	7c2b      	ldrb	r3, [r5, #16]
 80064be:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80064c0:	4aae      	ldr	r2, [pc, #696]	@ (800677c <loadMenuTexts+0x7a8>)
 80064c2:	4baf      	ldr	r3, [pc, #700]	@ (8006780 <loadMenuTexts+0x7ac>)
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	6828      	ldr	r0, [r5, #0]
 80064ca:	6869      	ldr	r1, [r5, #4]
 80064cc:	68aa      	ldr	r2, [r5, #8]
 80064ce:	68eb      	ldr	r3, [r5, #12]
 80064d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d2:	7c2b      	ldrb	r3, [r5, #16]
 80064d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80064d6:	4aab      	ldr	r2, [pc, #684]	@ (8006784 <loadMenuTexts+0x7b0>)
 80064d8:	4bab      	ldr	r3, [pc, #684]	@ (8006788 <loadMenuTexts+0x7b4>)
 80064da:	4614      	mov	r4, r2
 80064dc:	461d      	mov	r5, r3
 80064de:	6828      	ldr	r0, [r5, #0]
 80064e0:	6869      	ldr	r1, [r5, #4]
 80064e2:	68aa      	ldr	r2, [r5, #8]
 80064e4:	68eb      	ldr	r3, [r5, #12]
 80064e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e8:	7c2b      	ldrb	r3, [r5, #16]
 80064ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80064ec:	4aa7      	ldr	r2, [pc, #668]	@ (800678c <loadMenuTexts+0x7b8>)
 80064ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006790 <loadMenuTexts+0x7bc>)
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	6828      	ldr	r0, [r5, #0]
 80064f6:	6869      	ldr	r1, [r5, #4]
 80064f8:	68aa      	ldr	r2, [r5, #8]
 80064fa:	68eb      	ldr	r3, [r5, #12]
 80064fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fe:	7c2b      	ldrb	r3, [r5, #16]
 8006500:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006502:	4aa4      	ldr	r2, [pc, #656]	@ (8006794 <loadMenuTexts+0x7c0>)
 8006504:	4ba4      	ldr	r3, [pc, #656]	@ (8006798 <loadMenuTexts+0x7c4>)
 8006506:	4614      	mov	r4, r2
 8006508:	461d      	mov	r5, r3
 800650a:	6828      	ldr	r0, [r5, #0]
 800650c:	6869      	ldr	r1, [r5, #4]
 800650e:	68aa      	ldr	r2, [r5, #8]
 8006510:	68eb      	ldr	r3, [r5, #12]
 8006512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006514:	7c2b      	ldrb	r3, [r5, #16]
 8006516:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006518:	4aa0      	ldr	r2, [pc, #640]	@ (800679c <loadMenuTexts+0x7c8>)
 800651a:	4ba1      	ldr	r3, [pc, #644]	@ (80067a0 <loadMenuTexts+0x7cc>)
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	6828      	ldr	r0, [r5, #0]
 8006522:	6869      	ldr	r1, [r5, #4]
 8006524:	68aa      	ldr	r2, [r5, #8]
 8006526:	68eb      	ldr	r3, [r5, #12]
 8006528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800652a:	7c2b      	ldrb	r3, [r5, #16]
 800652c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800652e:	4a9d      	ldr	r2, [pc, #628]	@ (80067a4 <loadMenuTexts+0x7d0>)
 8006530:	4b9d      	ldr	r3, [pc, #628]	@ (80067a8 <loadMenuTexts+0x7d4>)
 8006532:	4614      	mov	r4, r2
 8006534:	461d      	mov	r5, r3
 8006536:	6828      	ldr	r0, [r5, #0]
 8006538:	6869      	ldr	r1, [r5, #4]
 800653a:	68aa      	ldr	r2, [r5, #8]
 800653c:	68eb      	ldr	r3, [r5, #12]
 800653e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006540:	7c2b      	ldrb	r3, [r5, #16]
 8006542:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006544:	4a99      	ldr	r2, [pc, #612]	@ (80067ac <loadMenuTexts+0x7d8>)
 8006546:	4b9a      	ldr	r3, [pc, #616]	@ (80067b0 <loadMenuTexts+0x7dc>)
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	6828      	ldr	r0, [r5, #0]
 800654e:	6869      	ldr	r1, [r5, #4]
 8006550:	68aa      	ldr	r2, [r5, #8]
 8006552:	68eb      	ldr	r3, [r5, #12]
 8006554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006556:	7c2b      	ldrb	r3, [r5, #16]
 8006558:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800655a:	4a96      	ldr	r2, [pc, #600]	@ (80067b4 <loadMenuTexts+0x7e0>)
 800655c:	4b96      	ldr	r3, [pc, #600]	@ (80067b8 <loadMenuTexts+0x7e4>)
 800655e:	4614      	mov	r4, r2
 8006560:	461d      	mov	r5, r3
 8006562:	6828      	ldr	r0, [r5, #0]
 8006564:	6869      	ldr	r1, [r5, #4]
 8006566:	68aa      	ldr	r2, [r5, #8]
 8006568:	68eb      	ldr	r3, [r5, #12]
 800656a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656c:	7c2b      	ldrb	r3, [r5, #16]
 800656e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006570:	4a92      	ldr	r2, [pc, #584]	@ (80067bc <loadMenuTexts+0x7e8>)
 8006572:	4b93      	ldr	r3, [pc, #588]	@ (80067c0 <loadMenuTexts+0x7ec>)
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	6828      	ldr	r0, [r5, #0]
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	68aa      	ldr	r2, [r5, #8]
 800657e:	68eb      	ldr	r3, [r5, #12]
 8006580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006582:	7c2b      	ldrb	r3, [r5, #16]
 8006584:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006586:	4a8f      	ldr	r2, [pc, #572]	@ (80067c4 <loadMenuTexts+0x7f0>)
 8006588:	4b8f      	ldr	r3, [pc, #572]	@ (80067c8 <loadMenuTexts+0x7f4>)
 800658a:	4614      	mov	r4, r2
 800658c:	461d      	mov	r5, r3
 800658e:	6828      	ldr	r0, [r5, #0]
 8006590:	6869      	ldr	r1, [r5, #4]
 8006592:	68aa      	ldr	r2, [r5, #8]
 8006594:	68eb      	ldr	r3, [r5, #12]
 8006596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006598:	7c2b      	ldrb	r3, [r5, #16]
 800659a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800659c:	4a8b      	ldr	r2, [pc, #556]	@ (80067cc <loadMenuTexts+0x7f8>)
 800659e:	4b8c      	ldr	r3, [pc, #560]	@ (80067d0 <loadMenuTexts+0x7fc>)
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	6828      	ldr	r0, [r5, #0]
 80065a6:	6869      	ldr	r1, [r5, #4]
 80065a8:	68aa      	ldr	r2, [r5, #8]
 80065aa:	68eb      	ldr	r3, [r5, #12]
 80065ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ae:	7c2b      	ldrb	r3, [r5, #16]
 80065b0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80065b2:	4a88      	ldr	r2, [pc, #544]	@ (80067d4 <loadMenuTexts+0x800>)
 80065b4:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <loadMenuTexts+0x804>)
 80065b6:	4614      	mov	r4, r2
 80065b8:	461d      	mov	r5, r3
 80065ba:	6828      	ldr	r0, [r5, #0]
 80065bc:	6869      	ldr	r1, [r5, #4]
 80065be:	68aa      	ldr	r2, [r5, #8]
 80065c0:	68eb      	ldr	r3, [r5, #12]
 80065c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c4:	7c2b      	ldrb	r3, [r5, #16]
 80065c6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80065c8:	4a84      	ldr	r2, [pc, #528]	@ (80067dc <loadMenuTexts+0x808>)
 80065ca:	4b85      	ldr	r3, [pc, #532]	@ (80067e0 <loadMenuTexts+0x80c>)
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	6828      	ldr	r0, [r5, #0]
 80065d2:	6869      	ldr	r1, [r5, #4]
 80065d4:	68aa      	ldr	r2, [r5, #8]
 80065d6:	68eb      	ldr	r3, [r5, #12]
 80065d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065da:	7c2b      	ldrb	r3, [r5, #16]
 80065dc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80065de:	4a81      	ldr	r2, [pc, #516]	@ (80067e4 <loadMenuTexts+0x810>)
 80065e0:	4b81      	ldr	r3, [pc, #516]	@ (80067e8 <loadMenuTexts+0x814>)
 80065e2:	4614      	mov	r4, r2
 80065e4:	461d      	mov	r5, r3
 80065e6:	6828      	ldr	r0, [r5, #0]
 80065e8:	6869      	ldr	r1, [r5, #4]
 80065ea:	68aa      	ldr	r2, [r5, #8]
 80065ec:	68eb      	ldr	r3, [r5, #12]
 80065ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f0:	7c2b      	ldrb	r3, [r5, #16]
 80065f2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80065f4:	4a7d      	ldr	r2, [pc, #500]	@ (80067ec <loadMenuTexts+0x818>)
 80065f6:	4b7e      	ldr	r3, [pc, #504]	@ (80067f0 <loadMenuTexts+0x81c>)
 80065f8:	4614      	mov	r4, r2
 80065fa:	461d      	mov	r5, r3
 80065fc:	6828      	ldr	r0, [r5, #0]
 80065fe:	6869      	ldr	r1, [r5, #4]
 8006600:	68aa      	ldr	r2, [r5, #8]
 8006602:	68eb      	ldr	r3, [r5, #12]
 8006604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006606:	7c2b      	ldrb	r3, [r5, #16]
 8006608:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800660a:	4a7a      	ldr	r2, [pc, #488]	@ (80067f4 <loadMenuTexts+0x820>)
 800660c:	4b7a      	ldr	r3, [pc, #488]	@ (80067f8 <loadMenuTexts+0x824>)
 800660e:	4614      	mov	r4, r2
 8006610:	461d      	mov	r5, r3
 8006612:	6828      	ldr	r0, [r5, #0]
 8006614:	6869      	ldr	r1, [r5, #4]
 8006616:	68aa      	ldr	r2, [r5, #8]
 8006618:	68eb      	ldr	r3, [r5, #12]
 800661a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800661c:	7c2b      	ldrb	r3, [r5, #16]
 800661e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006620:	4a76      	ldr	r2, [pc, #472]	@ (80067fc <loadMenuTexts+0x828>)
 8006622:	4b77      	ldr	r3, [pc, #476]	@ (8006800 <loadMenuTexts+0x82c>)
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	6828      	ldr	r0, [r5, #0]
 800662a:	6869      	ldr	r1, [r5, #4]
 800662c:	68aa      	ldr	r2, [r5, #8]
 800662e:	68eb      	ldr	r3, [r5, #12]
 8006630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006632:	7c2b      	ldrb	r3, [r5, #16]
 8006634:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006636:	4a73      	ldr	r2, [pc, #460]	@ (8006804 <loadMenuTexts+0x830>)
 8006638:	4b73      	ldr	r3, [pc, #460]	@ (8006808 <loadMenuTexts+0x834>)
 800663a:	4614      	mov	r4, r2
 800663c:	461d      	mov	r5, r3
 800663e:	6828      	ldr	r0, [r5, #0]
 8006640:	6869      	ldr	r1, [r5, #4]
 8006642:	68aa      	ldr	r2, [r5, #8]
 8006644:	68eb      	ldr	r3, [r5, #12]
 8006646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006648:	7c2b      	ldrb	r3, [r5, #16]
 800664a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800664c:	4a6f      	ldr	r2, [pc, #444]	@ (800680c <loadMenuTexts+0x838>)
 800664e:	4b70      	ldr	r3, [pc, #448]	@ (8006810 <loadMenuTexts+0x83c>)
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	6828      	ldr	r0, [r5, #0]
 8006656:	6869      	ldr	r1, [r5, #4]
 8006658:	68aa      	ldr	r2, [r5, #8]
 800665a:	68eb      	ldr	r3, [r5, #12]
 800665c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665e:	7c2b      	ldrb	r3, [r5, #16]
 8006660:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006662:	4a6c      	ldr	r2, [pc, #432]	@ (8006814 <loadMenuTexts+0x840>)
 8006664:	4b6c      	ldr	r3, [pc, #432]	@ (8006818 <loadMenuTexts+0x844>)
 8006666:	4614      	mov	r4, r2
 8006668:	461d      	mov	r5, r3
 800666a:	6828      	ldr	r0, [r5, #0]
 800666c:	6869      	ldr	r1, [r5, #4]
 800666e:	68aa      	ldr	r2, [r5, #8]
 8006670:	68eb      	ldr	r3, [r5, #12]
 8006672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006674:	7c2b      	ldrb	r3, [r5, #16]
 8006676:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006678:	4a68      	ldr	r2, [pc, #416]	@ (800681c <loadMenuTexts+0x848>)
 800667a:	4b69      	ldr	r3, [pc, #420]	@ (8006820 <loadMenuTexts+0x84c>)
 800667c:	4614      	mov	r4, r2
 800667e:	461d      	mov	r5, r3
 8006680:	6828      	ldr	r0, [r5, #0]
 8006682:	6869      	ldr	r1, [r5, #4]
 8006684:	68aa      	ldr	r2, [r5, #8]
 8006686:	68eb      	ldr	r3, [r5, #12]
 8006688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668a:	7c2b      	ldrb	r3, [r5, #16]
 800668c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800668e:	4a65      	ldr	r2, [pc, #404]	@ (8006824 <loadMenuTexts+0x850>)
 8006690:	4b65      	ldr	r3, [pc, #404]	@ (8006828 <loadMenuTexts+0x854>)
 8006692:	4614      	mov	r4, r2
 8006694:	461d      	mov	r5, r3
 8006696:	6828      	ldr	r0, [r5, #0]
 8006698:	6869      	ldr	r1, [r5, #4]
 800669a:	68aa      	ldr	r2, [r5, #8]
 800669c:	68eb      	ldr	r3, [r5, #12]
 800669e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a0:	7c2b      	ldrb	r3, [r5, #16]
 80066a2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80066a4:	4a61      	ldr	r2, [pc, #388]	@ (800682c <loadMenuTexts+0x858>)
 80066a6:	4b62      	ldr	r3, [pc, #392]	@ (8006830 <loadMenuTexts+0x85c>)
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	6828      	ldr	r0, [r5, #0]
 80066ae:	6869      	ldr	r1, [r5, #4]
 80066b0:	68aa      	ldr	r2, [r5, #8]
 80066b2:	68eb      	ldr	r3, [r5, #12]
 80066b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b6:	7c2b      	ldrb	r3, [r5, #16]
 80066b8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80066ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006834 <loadMenuTexts+0x860>)
 80066bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006838 <loadMenuTexts+0x864>)
 80066be:	4614      	mov	r4, r2
 80066c0:	461d      	mov	r5, r3
 80066c2:	6828      	ldr	r0, [r5, #0]
 80066c4:	6869      	ldr	r1, [r5, #4]
 80066c6:	68aa      	ldr	r2, [r5, #8]
 80066c8:	68eb      	ldr	r3, [r5, #12]
 80066ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066cc:	7c2b      	ldrb	r3, [r5, #16]
 80066ce:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80066d0:	4a5a      	ldr	r2, [pc, #360]	@ (800683c <loadMenuTexts+0x868>)
 80066d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006840 <loadMenuTexts+0x86c>)
 80066d4:	4614      	mov	r4, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	6828      	ldr	r0, [r5, #0]
 80066da:	6869      	ldr	r1, [r5, #4]
 80066dc:	68aa      	ldr	r2, [r5, #8]
 80066de:	68eb      	ldr	r3, [r5, #12]
 80066e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e2:	7c2b      	ldrb	r3, [r5, #16]
 80066e4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80066e6:	4a57      	ldr	r2, [pc, #348]	@ (8006844 <loadMenuTexts+0x870>)
 80066e8:	4b57      	ldr	r3, [pc, #348]	@ (8006848 <loadMenuTexts+0x874>)
 80066ea:	4614      	mov	r4, r2
 80066ec:	461d      	mov	r5, r3
 80066ee:	6828      	ldr	r0, [r5, #0]
 80066f0:	6869      	ldr	r1, [r5, #4]
 80066f2:	68aa      	ldr	r2, [r5, #8]
 80066f4:	68eb      	ldr	r3, [r5, #12]
 80066f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f8:	7c2b      	ldrb	r3, [r5, #16]
 80066fa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80066fc:	4a53      	ldr	r2, [pc, #332]	@ (800684c <loadMenuTexts+0x878>)
 80066fe:	4b54      	ldr	r3, [pc, #336]	@ (8006850 <loadMenuTexts+0x87c>)
 8006700:	4614      	mov	r4, r2
 8006702:	461d      	mov	r5, r3
 8006704:	6828      	ldr	r0, [r5, #0]
 8006706:	6869      	ldr	r1, [r5, #4]
 8006708:	68aa      	ldr	r2, [r5, #8]
 800670a:	68eb      	ldr	r3, [r5, #12]
 800670c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800670e:	7c2b      	ldrb	r3, [r5, #16]
 8006710:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006712:	4a50      	ldr	r2, [pc, #320]	@ (8006854 <loadMenuTexts+0x880>)
 8006714:	4b50      	ldr	r3, [pc, #320]	@ (8006858 <loadMenuTexts+0x884>)
 8006716:	4614      	mov	r4, r2
 8006718:	461d      	mov	r5, r3
 800671a:	6828      	ldr	r0, [r5, #0]
 800671c:	6869      	ldr	r1, [r5, #4]
 800671e:	68aa      	ldr	r2, [r5, #8]
 8006720:	68eb      	ldr	r3, [r5, #12]
 8006722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006724:	7c2b      	ldrb	r3, [r5, #16]
 8006726:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006728:	4a4c      	ldr	r2, [pc, #304]	@ (800685c <loadMenuTexts+0x888>)
 800672a:	4b4d      	ldr	r3, [pc, #308]	@ (8006860 <loadMenuTexts+0x88c>)
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	6828      	ldr	r0, [r5, #0]
 8006732:	6869      	ldr	r1, [r5, #4]
 8006734:	68aa      	ldr	r2, [r5, #8]
 8006736:	68eb      	ldr	r3, [r5, #12]
 8006738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800673a:	7c2b      	ldrb	r3, [r5, #16]
 800673c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800673e:	4a49      	ldr	r2, [pc, #292]	@ (8006864 <loadMenuTexts+0x890>)
 8006740:	4b49      	ldr	r3, [pc, #292]	@ (8006868 <loadMenuTexts+0x894>)
 8006742:	4614      	mov	r4, r2
 8006744:	461d      	mov	r5, r3
 8006746:	e091      	b.n	800686c <loadMenuTexts+0x898>
 8006748:	2000045c 	.word	0x2000045c
 800674c:	20001b08 	.word	0x20001b08
 8006750:	20000470 	.word	0x20000470
 8006754:	20001b1c 	.word	0x20001b1c
 8006758:	20000484 	.word	0x20000484
 800675c:	20001b30 	.word	0x20001b30
 8006760:	20000498 	.word	0x20000498
 8006764:	20001b44 	.word	0x20001b44
 8006768:	200004ac 	.word	0x200004ac
 800676c:	20001b58 	.word	0x20001b58
 8006770:	200004c0 	.word	0x200004c0
 8006774:	20001b6c 	.word	0x20001b6c
 8006778:	200004d4 	.word	0x200004d4
 800677c:	20001b80 	.word	0x20001b80
 8006780:	200004e8 	.word	0x200004e8
 8006784:	20001b94 	.word	0x20001b94
 8006788:	200004fc 	.word	0x200004fc
 800678c:	20001ba8 	.word	0x20001ba8
 8006790:	20000510 	.word	0x20000510
 8006794:	20001bbc 	.word	0x20001bbc
 8006798:	20000524 	.word	0x20000524
 800679c:	20001bd0 	.word	0x20001bd0
 80067a0:	20000538 	.word	0x20000538
 80067a4:	20001be4 	.word	0x20001be4
 80067a8:	2000054c 	.word	0x2000054c
 80067ac:	20001bf8 	.word	0x20001bf8
 80067b0:	20000560 	.word	0x20000560
 80067b4:	20001c0c 	.word	0x20001c0c
 80067b8:	20000574 	.word	0x20000574
 80067bc:	20001c20 	.word	0x20001c20
 80067c0:	20000588 	.word	0x20000588
 80067c4:	20001c34 	.word	0x20001c34
 80067c8:	2000059c 	.word	0x2000059c
 80067cc:	20001c48 	.word	0x20001c48
 80067d0:	200005b0 	.word	0x200005b0
 80067d4:	20001c5c 	.word	0x20001c5c
 80067d8:	200005c4 	.word	0x200005c4
 80067dc:	20001c70 	.word	0x20001c70
 80067e0:	200005d8 	.word	0x200005d8
 80067e4:	20001c84 	.word	0x20001c84
 80067e8:	200005ec 	.word	0x200005ec
 80067ec:	20001c98 	.word	0x20001c98
 80067f0:	20000600 	.word	0x20000600
 80067f4:	20001cac 	.word	0x20001cac
 80067f8:	20000614 	.word	0x20000614
 80067fc:	20001cc0 	.word	0x20001cc0
 8006800:	20000628 	.word	0x20000628
 8006804:	20001cd4 	.word	0x20001cd4
 8006808:	2000063c 	.word	0x2000063c
 800680c:	20001ce8 	.word	0x20001ce8
 8006810:	20000650 	.word	0x20000650
 8006814:	20001cfc 	.word	0x20001cfc
 8006818:	20000664 	.word	0x20000664
 800681c:	20001d10 	.word	0x20001d10
 8006820:	20000678 	.word	0x20000678
 8006824:	20001d24 	.word	0x20001d24
 8006828:	2000068c 	.word	0x2000068c
 800682c:	20001d38 	.word	0x20001d38
 8006830:	200006a0 	.word	0x200006a0
 8006834:	20001d4c 	.word	0x20001d4c
 8006838:	200006b4 	.word	0x200006b4
 800683c:	20001d60 	.word	0x20001d60
 8006840:	200006c8 	.word	0x200006c8
 8006844:	20001d74 	.word	0x20001d74
 8006848:	200006dc 	.word	0x200006dc
 800684c:	20001d88 	.word	0x20001d88
 8006850:	200006f0 	.word	0x200006f0
 8006854:	20001d9c 	.word	0x20001d9c
 8006858:	20000c7c 	.word	0x20000c7c
 800685c:	20001db0 	.word	0x20001db0
 8006860:	20000c90 	.word	0x20000c90
 8006864:	20001dc4 	.word	0x20001dc4
 8006868:	20000ca4 	.word	0x20000ca4
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6869      	ldr	r1, [r5, #4]
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	68eb      	ldr	r3, [r5, #12]
 8006874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006876:	7c2b      	ldrb	r3, [r5, #16]
 8006878:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800687a:	4a59      	ldr	r2, [pc, #356]	@ (80069e0 <loadMenuTexts+0xa0c>)
 800687c:	4b59      	ldr	r3, [pc, #356]	@ (80069e4 <loadMenuTexts+0xa10>)
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	6828      	ldr	r0, [r5, #0]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	68aa      	ldr	r2, [r5, #8]
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	7c2b      	ldrb	r3, [r5, #16]
 800688e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006890:	4a55      	ldr	r2, [pc, #340]	@ (80069e8 <loadMenuTexts+0xa14>)
 8006892:	4b56      	ldr	r3, [pc, #344]	@ (80069ec <loadMenuTexts+0xa18>)
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	68aa      	ldr	r2, [r5, #8]
 800689e:	68eb      	ldr	r3, [r5, #12]
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	7c2b      	ldrb	r3, [r5, #16]
 80068a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80068a6:	4a52      	ldr	r2, [pc, #328]	@ (80069f0 <loadMenuTexts+0xa1c>)
 80068a8:	4b52      	ldr	r3, [pc, #328]	@ (80069f4 <loadMenuTexts+0xa20>)
 80068aa:	4614      	mov	r4, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	6828      	ldr	r0, [r5, #0]
 80068b0:	6869      	ldr	r1, [r5, #4]
 80068b2:	68aa      	ldr	r2, [r5, #8]
 80068b4:	68eb      	ldr	r3, [r5, #12]
 80068b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b8:	7c2b      	ldrb	r3, [r5, #16]
 80068ba:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80068bc:	4a4e      	ldr	r2, [pc, #312]	@ (80069f8 <loadMenuTexts+0xa24>)
 80068be:	4b4f      	ldr	r3, [pc, #316]	@ (80069fc <loadMenuTexts+0xa28>)
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	6828      	ldr	r0, [r5, #0]
 80068c6:	6869      	ldr	r1, [r5, #4]
 80068c8:	68aa      	ldr	r2, [r5, #8]
 80068ca:	68eb      	ldr	r3, [r5, #12]
 80068cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ce:	7c2b      	ldrb	r3, [r5, #16]
 80068d0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80068d2:	4a4b      	ldr	r2, [pc, #300]	@ (8006a00 <loadMenuTexts+0xa2c>)
 80068d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006a04 <loadMenuTexts+0xa30>)
 80068d6:	4614      	mov	r4, r2
 80068d8:	461d      	mov	r5, r3
 80068da:	6828      	ldr	r0, [r5, #0]
 80068dc:	6869      	ldr	r1, [r5, #4]
 80068de:	68aa      	ldr	r2, [r5, #8]
 80068e0:	68eb      	ldr	r3, [r5, #12]
 80068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e4:	7c2b      	ldrb	r3, [r5, #16]
 80068e6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80068e8:	4a47      	ldr	r2, [pc, #284]	@ (8006a08 <loadMenuTexts+0xa34>)
 80068ea:	4b48      	ldr	r3, [pc, #288]	@ (8006a0c <loadMenuTexts+0xa38>)
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	6828      	ldr	r0, [r5, #0]
 80068f2:	6869      	ldr	r1, [r5, #4]
 80068f4:	68aa      	ldr	r2, [r5, #8]
 80068f6:	68eb      	ldr	r3, [r5, #12]
 80068f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fa:	7c2b      	ldrb	r3, [r5, #16]
 80068fc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80068fe:	4a44      	ldr	r2, [pc, #272]	@ (8006a10 <loadMenuTexts+0xa3c>)
 8006900:	4b44      	ldr	r3, [pc, #272]	@ (8006a14 <loadMenuTexts+0xa40>)
 8006902:	4614      	mov	r4, r2
 8006904:	461d      	mov	r5, r3
 8006906:	6828      	ldr	r0, [r5, #0]
 8006908:	6869      	ldr	r1, [r5, #4]
 800690a:	68aa      	ldr	r2, [r5, #8]
 800690c:	68eb      	ldr	r3, [r5, #12]
 800690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006910:	7c2b      	ldrb	r3, [r5, #16]
 8006912:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006914:	4a40      	ldr	r2, [pc, #256]	@ (8006a18 <loadMenuTexts+0xa44>)
 8006916:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <loadMenuTexts+0xa48>)
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	6828      	ldr	r0, [r5, #0]
 800691e:	6869      	ldr	r1, [r5, #4]
 8006920:	68aa      	ldr	r2, [r5, #8]
 8006922:	68eb      	ldr	r3, [r5, #12]
 8006924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006926:	7c2b      	ldrb	r3, [r5, #16]
 8006928:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800692a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a20 <loadMenuTexts+0xa4c>)
 800692c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a24 <loadMenuTexts+0xa50>)
 800692e:	4614      	mov	r4, r2
 8006930:	461d      	mov	r5, r3
 8006932:	6828      	ldr	r0, [r5, #0]
 8006934:	6869      	ldr	r1, [r5, #4]
 8006936:	68aa      	ldr	r2, [r5, #8]
 8006938:	68eb      	ldr	r3, [r5, #12]
 800693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693c:	7c2b      	ldrb	r3, [r5, #16]
 800693e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006940:	4a39      	ldr	r2, [pc, #228]	@ (8006a28 <loadMenuTexts+0xa54>)
 8006942:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <loadMenuTexts+0xa58>)
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	6828      	ldr	r0, [r5, #0]
 800694a:	6869      	ldr	r1, [r5, #4]
 800694c:	68aa      	ldr	r2, [r5, #8]
 800694e:	68eb      	ldr	r3, [r5, #12]
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	7c2b      	ldrb	r3, [r5, #16]
 8006954:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006956:	4a36      	ldr	r2, [pc, #216]	@ (8006a30 <loadMenuTexts+0xa5c>)
 8006958:	4b36      	ldr	r3, [pc, #216]	@ (8006a34 <loadMenuTexts+0xa60>)
 800695a:	4614      	mov	r4, r2
 800695c:	461d      	mov	r5, r3
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	6869      	ldr	r1, [r5, #4]
 8006962:	68aa      	ldr	r2, [r5, #8]
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	7c2b      	ldrb	r3, [r5, #16]
 800696a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 800696c:	4a32      	ldr	r2, [pc, #200]	@ (8006a38 <loadMenuTexts+0xa64>)
 800696e:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <loadMenuTexts+0xa68>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006982:	4a2f      	ldr	r2, [pc, #188]	@ (8006a40 <loadMenuTexts+0xa6c>)
 8006984:	4b2f      	ldr	r3, [pc, #188]	@ (8006a44 <loadMenuTexts+0xa70>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006998:	4a2b      	ldr	r2, [pc, #172]	@ (8006a48 <loadMenuTexts+0xa74>)
 800699a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a4c <loadMenuTexts+0xa78>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80069ae:	4a28      	ldr	r2, [pc, #160]	@ (8006a50 <loadMenuTexts+0xa7c>)
 80069b0:	4b28      	ldr	r3, [pc, #160]	@ (8006a54 <loadMenuTexts+0xa80>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	6869      	ldr	r1, [r5, #4]
 80069ba:	68aa      	ldr	r2, [r5, #8]
 80069bc:	68eb      	ldr	r3, [r5, #12]
 80069be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c0:	7c2b      	ldrb	r3, [r5, #16]
 80069c2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80069c4:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <loadMenuTexts+0xa84>)
 80069c6:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <loadMenuTexts+0xa88>)
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	6869      	ldr	r1, [r5, #4]
 80069d0:	68aa      	ldr	r2, [r5, #8]
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d6:	7c2b      	ldrb	r3, [r5, #16]
 80069d8:	7023      	strb	r3, [r4, #0]
 80069da:	f000 bd3a 	b.w	8007452 <loadMenuTexts+0x147e>
 80069de:	bf00      	nop
 80069e0:	20001dd8 	.word	0x20001dd8
 80069e4:	20000cb8 	.word	0x20000cb8
 80069e8:	20001dec 	.word	0x20001dec
 80069ec:	20000d1c 	.word	0x20000d1c
 80069f0:	20001e00 	.word	0x20001e00
 80069f4:	20000d30 	.word	0x20000d30
 80069f8:	20001e14 	.word	0x20001e14
 80069fc:	20000d6c 	.word	0x20000d6c
 8006a00:	20001e28 	.word	0x20001e28
 8006a04:	20000d80 	.word	0x20000d80
 8006a08:	20001e3c 	.word	0x20001e3c
 8006a0c:	20000dbc 	.word	0x20000dbc
 8006a10:	20001e50 	.word	0x20001e50
 8006a14:	20000dd0 	.word	0x20000dd0
 8006a18:	20001e64 	.word	0x20001e64
 8006a1c:	20000e0c 	.word	0x20000e0c
 8006a20:	20001e78 	.word	0x20001e78
 8006a24:	20000e34 	.word	0x20000e34
 8006a28:	20001e8c 	.word	0x20001e8c
 8006a2c:	20000e5c 	.word	0x20000e5c
 8006a30:	20001ea0 	.word	0x20001ea0
 8006a34:	20000e84 	.word	0x20000e84
 8006a38:	20001eb4 	.word	0x20001eb4
 8006a3c:	20000eac 	.word	0x20000eac
 8006a40:	20001ec8 	.word	0x20001ec8
 8006a44:	20000ed4 	.word	0x20000ed4
 8006a48:	20001edc 	.word	0x20001edc
 8006a4c:	20000efc 	.word	0x20000efc
 8006a50:	20001ef0 	.word	0x20001ef0
 8006a54:	20000f24 	.word	0x20000f24
 8006a58:	20001f04 	.word	0x20001f04
 8006a5c:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006a60:	4ac6      	ldr	r2, [pc, #792]	@ (8006d7c <loadMenuTexts+0xda8>)
 8006a62:	4bc7      	ldr	r3, [pc, #796]	@ (8006d80 <loadMenuTexts+0xdac>)
 8006a64:	4614      	mov	r4, r2
 8006a66:	461d      	mov	r5, r3
 8006a68:	6828      	ldr	r0, [r5, #0]
 8006a6a:	6869      	ldr	r1, [r5, #4]
 8006a6c:	68aa      	ldr	r2, [r5, #8]
 8006a6e:	68eb      	ldr	r3, [r5, #12]
 8006a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a72:	7c2b      	ldrb	r3, [r5, #16]
 8006a74:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006a76:	4ac3      	ldr	r2, [pc, #780]	@ (8006d84 <loadMenuTexts+0xdb0>)
 8006a78:	4bc3      	ldr	r3, [pc, #780]	@ (8006d88 <loadMenuTexts+0xdb4>)
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	6828      	ldr	r0, [r5, #0]
 8006a80:	6869      	ldr	r1, [r5, #4]
 8006a82:	68aa      	ldr	r2, [r5, #8]
 8006a84:	68eb      	ldr	r3, [r5, #12]
 8006a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a88:	7c2b      	ldrb	r3, [r5, #16]
 8006a8a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006a8c:	4abf      	ldr	r2, [pc, #764]	@ (8006d8c <loadMenuTexts+0xdb8>)
 8006a8e:	4bc0      	ldr	r3, [pc, #768]	@ (8006d90 <loadMenuTexts+0xdbc>)
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	6828      	ldr	r0, [r5, #0]
 8006a96:	6869      	ldr	r1, [r5, #4]
 8006a98:	68aa      	ldr	r2, [r5, #8]
 8006a9a:	68eb      	ldr	r3, [r5, #12]
 8006a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9e:	7c2b      	ldrb	r3, [r5, #16]
 8006aa0:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006aa2:	4abc      	ldr	r2, [pc, #752]	@ (8006d94 <loadMenuTexts+0xdc0>)
 8006aa4:	4bbc      	ldr	r3, [pc, #752]	@ (8006d98 <loadMenuTexts+0xdc4>)
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	6828      	ldr	r0, [r5, #0]
 8006aac:	6869      	ldr	r1, [r5, #4]
 8006aae:	68aa      	ldr	r2, [r5, #8]
 8006ab0:	68eb      	ldr	r3, [r5, #12]
 8006ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab4:	7c2b      	ldrb	r3, [r5, #16]
 8006ab6:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006ab8:	4ab8      	ldr	r2, [pc, #736]	@ (8006d9c <loadMenuTexts+0xdc8>)
 8006aba:	4bb9      	ldr	r3, [pc, #740]	@ (8006da0 <loadMenuTexts+0xdcc>)
 8006abc:	4614      	mov	r4, r2
 8006abe:	461d      	mov	r5, r3
 8006ac0:	6828      	ldr	r0, [r5, #0]
 8006ac2:	6869      	ldr	r1, [r5, #4]
 8006ac4:	68aa      	ldr	r2, [r5, #8]
 8006ac6:	68eb      	ldr	r3, [r5, #12]
 8006ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aca:	7c2b      	ldrb	r3, [r5, #16]
 8006acc:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006ace:	4ab5      	ldr	r2, [pc, #724]	@ (8006da4 <loadMenuTexts+0xdd0>)
 8006ad0:	4bb5      	ldr	r3, [pc, #724]	@ (8006da8 <loadMenuTexts+0xdd4>)
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	461d      	mov	r5, r3
 8006ad6:	6828      	ldr	r0, [r5, #0]
 8006ad8:	6869      	ldr	r1, [r5, #4]
 8006ada:	68aa      	ldr	r2, [r5, #8]
 8006adc:	68eb      	ldr	r3, [r5, #12]
 8006ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae0:	7c2b      	ldrb	r3, [r5, #16]
 8006ae2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006ae4:	4ab1      	ldr	r2, [pc, #708]	@ (8006dac <loadMenuTexts+0xdd8>)
 8006ae6:	4bb2      	ldr	r3, [pc, #712]	@ (8006db0 <loadMenuTexts+0xddc>)
 8006ae8:	4614      	mov	r4, r2
 8006aea:	461d      	mov	r5, r3
 8006aec:	6828      	ldr	r0, [r5, #0]
 8006aee:	6869      	ldr	r1, [r5, #4]
 8006af0:	68aa      	ldr	r2, [r5, #8]
 8006af2:	68eb      	ldr	r3, [r5, #12]
 8006af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af6:	7c2b      	ldrb	r3, [r5, #16]
 8006af8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006afa:	4aae      	ldr	r2, [pc, #696]	@ (8006db4 <loadMenuTexts+0xde0>)
 8006afc:	4bae      	ldr	r3, [pc, #696]	@ (8006db8 <loadMenuTexts+0xde4>)
 8006afe:	4614      	mov	r4, r2
 8006b00:	461d      	mov	r5, r3
 8006b02:	6828      	ldr	r0, [r5, #0]
 8006b04:	6869      	ldr	r1, [r5, #4]
 8006b06:	68aa      	ldr	r2, [r5, #8]
 8006b08:	68eb      	ldr	r3, [r5, #12]
 8006b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0c:	7c2b      	ldrb	r3, [r5, #16]
 8006b0e:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006b10:	4aaa      	ldr	r2, [pc, #680]	@ (8006dbc <loadMenuTexts+0xde8>)
 8006b12:	4bab      	ldr	r3, [pc, #684]	@ (8006dc0 <loadMenuTexts+0xdec>)
 8006b14:	4614      	mov	r4, r2
 8006b16:	461d      	mov	r5, r3
 8006b18:	6828      	ldr	r0, [r5, #0]
 8006b1a:	6869      	ldr	r1, [r5, #4]
 8006b1c:	68aa      	ldr	r2, [r5, #8]
 8006b1e:	68eb      	ldr	r3, [r5, #12]
 8006b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b22:	7c2b      	ldrb	r3, [r5, #16]
 8006b24:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006b26:	4aa7      	ldr	r2, [pc, #668]	@ (8006dc4 <loadMenuTexts+0xdf0>)
 8006b28:	4ba7      	ldr	r3, [pc, #668]	@ (8006dc8 <loadMenuTexts+0xdf4>)
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	6828      	ldr	r0, [r5, #0]
 8006b30:	6869      	ldr	r1, [r5, #4]
 8006b32:	68aa      	ldr	r2, [r5, #8]
 8006b34:	68eb      	ldr	r3, [r5, #12]
 8006b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b38:	7c2b      	ldrb	r3, [r5, #16]
 8006b3a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006b3c:	4aa3      	ldr	r2, [pc, #652]	@ (8006dcc <loadMenuTexts+0xdf8>)
 8006b3e:	4ba4      	ldr	r3, [pc, #656]	@ (8006dd0 <loadMenuTexts+0xdfc>)
 8006b40:	4614      	mov	r4, r2
 8006b42:	461d      	mov	r5, r3
 8006b44:	6828      	ldr	r0, [r5, #0]
 8006b46:	6869      	ldr	r1, [r5, #4]
 8006b48:	68aa      	ldr	r2, [r5, #8]
 8006b4a:	68eb      	ldr	r3, [r5, #12]
 8006b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4e:	7c2b      	ldrb	r3, [r5, #16]
 8006b50:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006b52:	4aa0      	ldr	r2, [pc, #640]	@ (8006dd4 <loadMenuTexts+0xe00>)
 8006b54:	4ba0      	ldr	r3, [pc, #640]	@ (8006dd8 <loadMenuTexts+0xe04>)
 8006b56:	4614      	mov	r4, r2
 8006b58:	461d      	mov	r5, r3
 8006b5a:	6828      	ldr	r0, [r5, #0]
 8006b5c:	6869      	ldr	r1, [r5, #4]
 8006b5e:	68aa      	ldr	r2, [r5, #8]
 8006b60:	68eb      	ldr	r3, [r5, #12]
 8006b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b64:	7c2b      	ldrb	r3, [r5, #16]
 8006b66:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006b68:	4a9c      	ldr	r2, [pc, #624]	@ (8006ddc <loadMenuTexts+0xe08>)
 8006b6a:	4b9d      	ldr	r3, [pc, #628]	@ (8006de0 <loadMenuTexts+0xe0c>)
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	6828      	ldr	r0, [r5, #0]
 8006b72:	6869      	ldr	r1, [r5, #4]
 8006b74:	68aa      	ldr	r2, [r5, #8]
 8006b76:	68eb      	ldr	r3, [r5, #12]
 8006b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b7a:	7c2b      	ldrb	r3, [r5, #16]
 8006b7c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006b7e:	4a99      	ldr	r2, [pc, #612]	@ (8006de4 <loadMenuTexts+0xe10>)
 8006b80:	4b99      	ldr	r3, [pc, #612]	@ (8006de8 <loadMenuTexts+0xe14>)
 8006b82:	4614      	mov	r4, r2
 8006b84:	461d      	mov	r5, r3
 8006b86:	6828      	ldr	r0, [r5, #0]
 8006b88:	6869      	ldr	r1, [r5, #4]
 8006b8a:	68aa      	ldr	r2, [r5, #8]
 8006b8c:	68eb      	ldr	r3, [r5, #12]
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	7c2b      	ldrb	r3, [r5, #16]
 8006b92:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006b94:	4a95      	ldr	r2, [pc, #596]	@ (8006dec <loadMenuTexts+0xe18>)
 8006b96:	4b96      	ldr	r3, [pc, #600]	@ (8006df0 <loadMenuTexts+0xe1c>)
 8006b98:	4614      	mov	r4, r2
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	6828      	ldr	r0, [r5, #0]
 8006b9e:	6869      	ldr	r1, [r5, #4]
 8006ba0:	68aa      	ldr	r2, [r5, #8]
 8006ba2:	68eb      	ldr	r3, [r5, #12]
 8006ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba6:	7c2b      	ldrb	r3, [r5, #16]
 8006ba8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006baa:	4a92      	ldr	r2, [pc, #584]	@ (8006df4 <loadMenuTexts+0xe20>)
 8006bac:	4b92      	ldr	r3, [pc, #584]	@ (8006df8 <loadMenuTexts+0xe24>)
 8006bae:	4614      	mov	r4, r2
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	6828      	ldr	r0, [r5, #0]
 8006bb4:	6869      	ldr	r1, [r5, #4]
 8006bb6:	68aa      	ldr	r2, [r5, #8]
 8006bb8:	68eb      	ldr	r3, [r5, #12]
 8006bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bbc:	7c2b      	ldrb	r3, [r5, #16]
 8006bbe:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8006dfc <loadMenuTexts+0xe28>)
 8006bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e00 <loadMenuTexts+0xe2c>)
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	6828      	ldr	r0, [r5, #0]
 8006bca:	6869      	ldr	r1, [r5, #4]
 8006bcc:	68aa      	ldr	r2, [r5, #8]
 8006bce:	68eb      	ldr	r3, [r5, #12]
 8006bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd2:	7c2b      	ldrb	r3, [r5, #16]
 8006bd4:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006bd6:	4a8b      	ldr	r2, [pc, #556]	@ (8006e04 <loadMenuTexts+0xe30>)
 8006bd8:	4b8b      	ldr	r3, [pc, #556]	@ (8006e08 <loadMenuTexts+0xe34>)
 8006bda:	4614      	mov	r4, r2
 8006bdc:	461d      	mov	r5, r3
 8006bde:	6828      	ldr	r0, [r5, #0]
 8006be0:	6869      	ldr	r1, [r5, #4]
 8006be2:	68aa      	ldr	r2, [r5, #8]
 8006be4:	68eb      	ldr	r3, [r5, #12]
 8006be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be8:	7c2b      	ldrb	r3, [r5, #16]
 8006bea:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006bec:	4a87      	ldr	r2, [pc, #540]	@ (8006e0c <loadMenuTexts+0xe38>)
 8006bee:	4b88      	ldr	r3, [pc, #544]	@ (8006e10 <loadMenuTexts+0xe3c>)
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	6828      	ldr	r0, [r5, #0]
 8006bf6:	6869      	ldr	r1, [r5, #4]
 8006bf8:	68aa      	ldr	r2, [r5, #8]
 8006bfa:	68eb      	ldr	r3, [r5, #12]
 8006bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfe:	7c2b      	ldrb	r3, [r5, #16]
 8006c00:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006c02:	4a84      	ldr	r2, [pc, #528]	@ (8006e14 <loadMenuTexts+0xe40>)
 8006c04:	4b84      	ldr	r3, [pc, #528]	@ (8006e18 <loadMenuTexts+0xe44>)
 8006c06:	4614      	mov	r4, r2
 8006c08:	461d      	mov	r5, r3
 8006c0a:	6828      	ldr	r0, [r5, #0]
 8006c0c:	6869      	ldr	r1, [r5, #4]
 8006c0e:	68aa      	ldr	r2, [r5, #8]
 8006c10:	68eb      	ldr	r3, [r5, #12]
 8006c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c14:	7c2b      	ldrb	r3, [r5, #16]
 8006c16:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006c18:	4a80      	ldr	r2, [pc, #512]	@ (8006e1c <loadMenuTexts+0xe48>)
 8006c1a:	4b81      	ldr	r3, [pc, #516]	@ (8006e20 <loadMenuTexts+0xe4c>)
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	6828      	ldr	r0, [r5, #0]
 8006c22:	6869      	ldr	r1, [r5, #4]
 8006c24:	68aa      	ldr	r2, [r5, #8]
 8006c26:	68eb      	ldr	r3, [r5, #12]
 8006c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2a:	7c2b      	ldrb	r3, [r5, #16]
 8006c2c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8006e24 <loadMenuTexts+0xe50>)
 8006c30:	4b7d      	ldr	r3, [pc, #500]	@ (8006e28 <loadMenuTexts+0xe54>)
 8006c32:	4614      	mov	r4, r2
 8006c34:	461d      	mov	r5, r3
 8006c36:	6828      	ldr	r0, [r5, #0]
 8006c38:	6869      	ldr	r1, [r5, #4]
 8006c3a:	68aa      	ldr	r2, [r5, #8]
 8006c3c:	68eb      	ldr	r3, [r5, #12]
 8006c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c40:	7c2b      	ldrb	r3, [r5, #16]
 8006c42:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006c44:	4a79      	ldr	r2, [pc, #484]	@ (8006e2c <loadMenuTexts+0xe58>)
 8006c46:	4b7a      	ldr	r3, [pc, #488]	@ (8006e30 <loadMenuTexts+0xe5c>)
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	6828      	ldr	r0, [r5, #0]
 8006c4e:	6869      	ldr	r1, [r5, #4]
 8006c50:	68aa      	ldr	r2, [r5, #8]
 8006c52:	68eb      	ldr	r3, [r5, #12]
 8006c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c56:	7c2b      	ldrb	r3, [r5, #16]
 8006c58:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006c5a:	4a76      	ldr	r2, [pc, #472]	@ (8006e34 <loadMenuTexts+0xe60>)
 8006c5c:	4b76      	ldr	r3, [pc, #472]	@ (8006e38 <loadMenuTexts+0xe64>)
 8006c5e:	4614      	mov	r4, r2
 8006c60:	461d      	mov	r5, r3
 8006c62:	6828      	ldr	r0, [r5, #0]
 8006c64:	6869      	ldr	r1, [r5, #4]
 8006c66:	68aa      	ldr	r2, [r5, #8]
 8006c68:	68eb      	ldr	r3, [r5, #12]
 8006c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c6c:	7c2b      	ldrb	r3, [r5, #16]
 8006c6e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006c70:	4a72      	ldr	r2, [pc, #456]	@ (8006e3c <loadMenuTexts+0xe68>)
 8006c72:	4b73      	ldr	r3, [pc, #460]	@ (8006e40 <loadMenuTexts+0xe6c>)
 8006c74:	4614      	mov	r4, r2
 8006c76:	461d      	mov	r5, r3
 8006c78:	6828      	ldr	r0, [r5, #0]
 8006c7a:	6869      	ldr	r1, [r5, #4]
 8006c7c:	68aa      	ldr	r2, [r5, #8]
 8006c7e:	68eb      	ldr	r3, [r5, #12]
 8006c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c82:	7c2b      	ldrb	r3, [r5, #16]
 8006c84:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006c86:	4a6f      	ldr	r2, [pc, #444]	@ (8006e44 <loadMenuTexts+0xe70>)
 8006c88:	4b6f      	ldr	r3, [pc, #444]	@ (8006e48 <loadMenuTexts+0xe74>)
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	461d      	mov	r5, r3
 8006c8e:	6828      	ldr	r0, [r5, #0]
 8006c90:	6869      	ldr	r1, [r5, #4]
 8006c92:	68aa      	ldr	r2, [r5, #8]
 8006c94:	68eb      	ldr	r3, [r5, #12]
 8006c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c98:	7c2b      	ldrb	r3, [r5, #16]
 8006c9a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8006e4c <loadMenuTexts+0xe78>)
 8006c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8006e50 <loadMenuTexts+0xe7c>)
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	6828      	ldr	r0, [r5, #0]
 8006ca6:	6869      	ldr	r1, [r5, #4]
 8006ca8:	68aa      	ldr	r2, [r5, #8]
 8006caa:	68eb      	ldr	r3, [r5, #12]
 8006cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cae:	7c2b      	ldrb	r3, [r5, #16]
 8006cb0:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006cb2:	4a68      	ldr	r2, [pc, #416]	@ (8006e54 <loadMenuTexts+0xe80>)
 8006cb4:	4b68      	ldr	r3, [pc, #416]	@ (8006e58 <loadMenuTexts+0xe84>)
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	461d      	mov	r5, r3
 8006cba:	6828      	ldr	r0, [r5, #0]
 8006cbc:	6869      	ldr	r1, [r5, #4]
 8006cbe:	68aa      	ldr	r2, [r5, #8]
 8006cc0:	68eb      	ldr	r3, [r5, #12]
 8006cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc4:	7c2b      	ldrb	r3, [r5, #16]
 8006cc6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006cc8:	4a64      	ldr	r2, [pc, #400]	@ (8006e5c <loadMenuTexts+0xe88>)
 8006cca:	4b65      	ldr	r3, [pc, #404]	@ (8006e60 <loadMenuTexts+0xe8c>)
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	6828      	ldr	r0, [r5, #0]
 8006cd2:	6869      	ldr	r1, [r5, #4]
 8006cd4:	68aa      	ldr	r2, [r5, #8]
 8006cd6:	68eb      	ldr	r3, [r5, #12]
 8006cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cda:	7c2b      	ldrb	r3, [r5, #16]
 8006cdc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006cde:	4a61      	ldr	r2, [pc, #388]	@ (8006e64 <loadMenuTexts+0xe90>)
 8006ce0:	4b61      	ldr	r3, [pc, #388]	@ (8006e68 <loadMenuTexts+0xe94>)
 8006ce2:	4614      	mov	r4, r2
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	6828      	ldr	r0, [r5, #0]
 8006ce8:	6869      	ldr	r1, [r5, #4]
 8006cea:	68aa      	ldr	r2, [r5, #8]
 8006cec:	68eb      	ldr	r3, [r5, #12]
 8006cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf0:	7c2b      	ldrb	r3, [r5, #16]
 8006cf2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8006e6c <loadMenuTexts+0xe98>)
 8006cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8006e70 <loadMenuTexts+0xe9c>)
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	6828      	ldr	r0, [r5, #0]
 8006cfe:	6869      	ldr	r1, [r5, #4]
 8006d00:	68aa      	ldr	r2, [r5, #8]
 8006d02:	68eb      	ldr	r3, [r5, #12]
 8006d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d06:	7c2b      	ldrb	r3, [r5, #16]
 8006d08:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8006e74 <loadMenuTexts+0xea0>)
 8006d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006e78 <loadMenuTexts+0xea4>)
 8006d0e:	4614      	mov	r4, r2
 8006d10:	461d      	mov	r5, r3
 8006d12:	6828      	ldr	r0, [r5, #0]
 8006d14:	6869      	ldr	r1, [r5, #4]
 8006d16:	68aa      	ldr	r2, [r5, #8]
 8006d18:	68eb      	ldr	r3, [r5, #12]
 8006d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d1c:	7c2b      	ldrb	r3, [r5, #16]
 8006d1e:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006d20:	4a56      	ldr	r2, [pc, #344]	@ (8006e7c <loadMenuTexts+0xea8>)
 8006d22:	4b57      	ldr	r3, [pc, #348]	@ (8006e80 <loadMenuTexts+0xeac>)
 8006d24:	4614      	mov	r4, r2
 8006d26:	461d      	mov	r5, r3
 8006d28:	6828      	ldr	r0, [r5, #0]
 8006d2a:	6869      	ldr	r1, [r5, #4]
 8006d2c:	68aa      	ldr	r2, [r5, #8]
 8006d2e:	68eb      	ldr	r3, [r5, #12]
 8006d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d32:	7c2b      	ldrb	r3, [r5, #16]
 8006d34:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006d36:	4a53      	ldr	r2, [pc, #332]	@ (8006e84 <loadMenuTexts+0xeb0>)
 8006d38:	4b53      	ldr	r3, [pc, #332]	@ (8006e88 <loadMenuTexts+0xeb4>)
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	461d      	mov	r5, r3
 8006d3e:	6828      	ldr	r0, [r5, #0]
 8006d40:	6869      	ldr	r1, [r5, #4]
 8006d42:	68aa      	ldr	r2, [r5, #8]
 8006d44:	68eb      	ldr	r3, [r5, #12]
 8006d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d48:	7c2b      	ldrb	r3, [r5, #16]
 8006d4a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e8c <loadMenuTexts+0xeb8>)
 8006d4e:	4b50      	ldr	r3, [pc, #320]	@ (8006e90 <loadMenuTexts+0xebc>)
 8006d50:	4614      	mov	r4, r2
 8006d52:	461d      	mov	r5, r3
 8006d54:	6828      	ldr	r0, [r5, #0]
 8006d56:	6869      	ldr	r1, [r5, #4]
 8006d58:	68aa      	ldr	r2, [r5, #8]
 8006d5a:	68eb      	ldr	r3, [r5, #12]
 8006d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d5e:	7c2b      	ldrb	r3, [r5, #16]
 8006d60:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006d62:	4a4c      	ldr	r2, [pc, #304]	@ (8006e94 <loadMenuTexts+0xec0>)
 8006d64:	4b4c      	ldr	r3, [pc, #304]	@ (8006e98 <loadMenuTexts+0xec4>)
 8006d66:	4614      	mov	r4, r2
 8006d68:	461d      	mov	r5, r3
 8006d6a:	6828      	ldr	r0, [r5, #0]
 8006d6c:	6869      	ldr	r1, [r5, #4]
 8006d6e:	68aa      	ldr	r2, [r5, #8]
 8006d70:	68eb      	ldr	r3, [r5, #12]
 8006d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d74:	7c2b      	ldrb	r3, [r5, #16]
 8006d76:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006d78:	4a48      	ldr	r2, [pc, #288]	@ (8006e9c <loadMenuTexts+0xec8>)
 8006d7a:	e091      	b.n	8006ea0 <loadMenuTexts+0xecc>
 8006d7c:	20001824 	.word	0x20001824
 8006d80:	20000704 	.word	0x20000704
 8006d84:	20001838 	.word	0x20001838
 8006d88:	20000718 	.word	0x20000718
 8006d8c:	2000184c 	.word	0x2000184c
 8006d90:	2000072c 	.word	0x2000072c
 8006d94:	20001860 	.word	0x20001860
 8006d98:	20000740 	.word	0x20000740
 8006d9c:	20001874 	.word	0x20001874
 8006da0:	20000754 	.word	0x20000754
 8006da4:	20001888 	.word	0x20001888
 8006da8:	20000768 	.word	0x20000768
 8006dac:	2000189c 	.word	0x2000189c
 8006db0:	2000077c 	.word	0x2000077c
 8006db4:	200018b0 	.word	0x200018b0
 8006db8:	20000790 	.word	0x20000790
 8006dbc:	200018c4 	.word	0x200018c4
 8006dc0:	200007a4 	.word	0x200007a4
 8006dc4:	200018d8 	.word	0x200018d8
 8006dc8:	200007b8 	.word	0x200007b8
 8006dcc:	200018ec 	.word	0x200018ec
 8006dd0:	200007cc 	.word	0x200007cc
 8006dd4:	20001900 	.word	0x20001900
 8006dd8:	200007e0 	.word	0x200007e0
 8006ddc:	20001914 	.word	0x20001914
 8006de0:	200007f4 	.word	0x200007f4
 8006de4:	20001928 	.word	0x20001928
 8006de8:	20000808 	.word	0x20000808
 8006dec:	2000193c 	.word	0x2000193c
 8006df0:	2000081c 	.word	0x2000081c
 8006df4:	20001950 	.word	0x20001950
 8006df8:	20000830 	.word	0x20000830
 8006dfc:	20001964 	.word	0x20001964
 8006e00:	20000844 	.word	0x20000844
 8006e04:	20001978 	.word	0x20001978
 8006e08:	20000858 	.word	0x20000858
 8006e0c:	2000198c 	.word	0x2000198c
 8006e10:	2000086c 	.word	0x2000086c
 8006e14:	200019a0 	.word	0x200019a0
 8006e18:	20000880 	.word	0x20000880
 8006e1c:	200019b4 	.word	0x200019b4
 8006e20:	20000894 	.word	0x20000894
 8006e24:	200019c8 	.word	0x200019c8
 8006e28:	200008a8 	.word	0x200008a8
 8006e2c:	200019dc 	.word	0x200019dc
 8006e30:	200008bc 	.word	0x200008bc
 8006e34:	200019f0 	.word	0x200019f0
 8006e38:	200008d0 	.word	0x200008d0
 8006e3c:	20001a04 	.word	0x20001a04
 8006e40:	200008e4 	.word	0x200008e4
 8006e44:	20001a18 	.word	0x20001a18
 8006e48:	200008f8 	.word	0x200008f8
 8006e4c:	20001a2c 	.word	0x20001a2c
 8006e50:	2000090c 	.word	0x2000090c
 8006e54:	20001a40 	.word	0x20001a40
 8006e58:	20000920 	.word	0x20000920
 8006e5c:	20001a54 	.word	0x20001a54
 8006e60:	20000934 	.word	0x20000934
 8006e64:	20001a68 	.word	0x20001a68
 8006e68:	20000948 	.word	0x20000948
 8006e6c:	20001a7c 	.word	0x20001a7c
 8006e70:	2000095c 	.word	0x2000095c
 8006e74:	20001a90 	.word	0x20001a90
 8006e78:	20000970 	.word	0x20000970
 8006e7c:	20001aa4 	.word	0x20001aa4
 8006e80:	20000984 	.word	0x20000984
 8006e84:	20001ab8 	.word	0x20001ab8
 8006e88:	20000998 	.word	0x20000998
 8006e8c:	20001acc 	.word	0x20001acc
 8006e90:	200009ac 	.word	0x200009ac
 8006e94:	20001ae0 	.word	0x20001ae0
 8006e98:	200009c0 	.word	0x200009c0
 8006e9c:	20001af4 	.word	0x20001af4
 8006ea0:	4bc7      	ldr	r3, [pc, #796]	@ (80071c0 <loadMenuTexts+0x11ec>)
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	6828      	ldr	r0, [r5, #0]
 8006ea8:	6869      	ldr	r1, [r5, #4]
 8006eaa:	68aa      	ldr	r2, [r5, #8]
 8006eac:	68eb      	ldr	r3, [r5, #12]
 8006eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb0:	7c2b      	ldrb	r3, [r5, #16]
 8006eb2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006eb4:	4ac3      	ldr	r2, [pc, #780]	@ (80071c4 <loadMenuTexts+0x11f0>)
 8006eb6:	4bc4      	ldr	r3, [pc, #784]	@ (80071c8 <loadMenuTexts+0x11f4>)
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	6828      	ldr	r0, [r5, #0]
 8006ebe:	6869      	ldr	r1, [r5, #4]
 8006ec0:	68aa      	ldr	r2, [r5, #8]
 8006ec2:	68eb      	ldr	r3, [r5, #12]
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	7c2b      	ldrb	r3, [r5, #16]
 8006ec8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006eca:	4ac0      	ldr	r2, [pc, #768]	@ (80071cc <loadMenuTexts+0x11f8>)
 8006ecc:	4bc0      	ldr	r3, [pc, #768]	@ (80071d0 <loadMenuTexts+0x11fc>)
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	6869      	ldr	r1, [r5, #4]
 8006ed6:	68aa      	ldr	r2, [r5, #8]
 8006ed8:	68eb      	ldr	r3, [r5, #12]
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	7c2b      	ldrb	r3, [r5, #16]
 8006ede:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006ee0:	4abc      	ldr	r2, [pc, #752]	@ (80071d4 <loadMenuTexts+0x1200>)
 8006ee2:	4bbd      	ldr	r3, [pc, #756]	@ (80071d8 <loadMenuTexts+0x1204>)
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	6828      	ldr	r0, [r5, #0]
 8006eea:	6869      	ldr	r1, [r5, #4]
 8006eec:	68aa      	ldr	r2, [r5, #8]
 8006eee:	68eb      	ldr	r3, [r5, #12]
 8006ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef2:	7c2b      	ldrb	r3, [r5, #16]
 8006ef4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006ef6:	4ab9      	ldr	r2, [pc, #740]	@ (80071dc <loadMenuTexts+0x1208>)
 8006ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80071e0 <loadMenuTexts+0x120c>)
 8006efa:	4614      	mov	r4, r2
 8006efc:	461d      	mov	r5, r3
 8006efe:	6828      	ldr	r0, [r5, #0]
 8006f00:	6869      	ldr	r1, [r5, #4]
 8006f02:	68aa      	ldr	r2, [r5, #8]
 8006f04:	68eb      	ldr	r3, [r5, #12]
 8006f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f08:	7c2b      	ldrb	r3, [r5, #16]
 8006f0a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006f0c:	4ab5      	ldr	r2, [pc, #724]	@ (80071e4 <loadMenuTexts+0x1210>)
 8006f0e:	4bb6      	ldr	r3, [pc, #728]	@ (80071e8 <loadMenuTexts+0x1214>)
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	6828      	ldr	r0, [r5, #0]
 8006f16:	6869      	ldr	r1, [r5, #4]
 8006f18:	68aa      	ldr	r2, [r5, #8]
 8006f1a:	68eb      	ldr	r3, [r5, #12]
 8006f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1e:	7c2b      	ldrb	r3, [r5, #16]
 8006f20:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006f22:	4ab2      	ldr	r2, [pc, #712]	@ (80071ec <loadMenuTexts+0x1218>)
 8006f24:	4bb2      	ldr	r3, [pc, #712]	@ (80071f0 <loadMenuTexts+0x121c>)
 8006f26:	4614      	mov	r4, r2
 8006f28:	461d      	mov	r5, r3
 8006f2a:	6828      	ldr	r0, [r5, #0]
 8006f2c:	6869      	ldr	r1, [r5, #4]
 8006f2e:	68aa      	ldr	r2, [r5, #8]
 8006f30:	68eb      	ldr	r3, [r5, #12]
 8006f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f34:	7c2b      	ldrb	r3, [r5, #16]
 8006f36:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006f38:	4aae      	ldr	r2, [pc, #696]	@ (80071f4 <loadMenuTexts+0x1220>)
 8006f3a:	4baf      	ldr	r3, [pc, #700]	@ (80071f8 <loadMenuTexts+0x1224>)
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	461d      	mov	r5, r3
 8006f40:	6828      	ldr	r0, [r5, #0]
 8006f42:	6869      	ldr	r1, [r5, #4]
 8006f44:	68aa      	ldr	r2, [r5, #8]
 8006f46:	68eb      	ldr	r3, [r5, #12]
 8006f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f4a:	7c2b      	ldrb	r3, [r5, #16]
 8006f4c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006f4e:	4aab      	ldr	r2, [pc, #684]	@ (80071fc <loadMenuTexts+0x1228>)
 8006f50:	4bab      	ldr	r3, [pc, #684]	@ (8007200 <loadMenuTexts+0x122c>)
 8006f52:	4614      	mov	r4, r2
 8006f54:	461d      	mov	r5, r3
 8006f56:	6828      	ldr	r0, [r5, #0]
 8006f58:	6869      	ldr	r1, [r5, #4]
 8006f5a:	68aa      	ldr	r2, [r5, #8]
 8006f5c:	68eb      	ldr	r3, [r5, #12]
 8006f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f60:	7c2b      	ldrb	r3, [r5, #16]
 8006f62:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006f64:	4aa7      	ldr	r2, [pc, #668]	@ (8007204 <loadMenuTexts+0x1230>)
 8006f66:	4ba8      	ldr	r3, [pc, #672]	@ (8007208 <loadMenuTexts+0x1234>)
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	6828      	ldr	r0, [r5, #0]
 8006f6e:	6869      	ldr	r1, [r5, #4]
 8006f70:	68aa      	ldr	r2, [r5, #8]
 8006f72:	68eb      	ldr	r3, [r5, #12]
 8006f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f76:	7c2b      	ldrb	r3, [r5, #16]
 8006f78:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006f7a:	4aa4      	ldr	r2, [pc, #656]	@ (800720c <loadMenuTexts+0x1238>)
 8006f7c:	4ba4      	ldr	r3, [pc, #656]	@ (8007210 <loadMenuTexts+0x123c>)
 8006f7e:	4614      	mov	r4, r2
 8006f80:	461d      	mov	r5, r3
 8006f82:	6828      	ldr	r0, [r5, #0]
 8006f84:	6869      	ldr	r1, [r5, #4]
 8006f86:	68aa      	ldr	r2, [r5, #8]
 8006f88:	68eb      	ldr	r3, [r5, #12]
 8006f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8c:	7c2b      	ldrb	r3, [r5, #16]
 8006f8e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006f90:	4aa0      	ldr	r2, [pc, #640]	@ (8007214 <loadMenuTexts+0x1240>)
 8006f92:	4ba1      	ldr	r3, [pc, #644]	@ (8007218 <loadMenuTexts+0x1244>)
 8006f94:	4614      	mov	r4, r2
 8006f96:	461d      	mov	r5, r3
 8006f98:	6828      	ldr	r0, [r5, #0]
 8006f9a:	6869      	ldr	r1, [r5, #4]
 8006f9c:	68aa      	ldr	r2, [r5, #8]
 8006f9e:	68eb      	ldr	r3, [r5, #12]
 8006fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa2:	7c2b      	ldrb	r3, [r5, #16]
 8006fa4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006fa6:	4a9d      	ldr	r2, [pc, #628]	@ (800721c <loadMenuTexts+0x1248>)
 8006fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8007220 <loadMenuTexts+0x124c>)
 8006faa:	4614      	mov	r4, r2
 8006fac:	461d      	mov	r5, r3
 8006fae:	6828      	ldr	r0, [r5, #0]
 8006fb0:	6869      	ldr	r1, [r5, #4]
 8006fb2:	68aa      	ldr	r2, [r5, #8]
 8006fb4:	68eb      	ldr	r3, [r5, #12]
 8006fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb8:	7c2b      	ldrb	r3, [r5, #16]
 8006fba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006fbc:	4a99      	ldr	r2, [pc, #612]	@ (8007224 <loadMenuTexts+0x1250>)
 8006fbe:	4b9a      	ldr	r3, [pc, #616]	@ (8007228 <loadMenuTexts+0x1254>)
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	6828      	ldr	r0, [r5, #0]
 8006fc6:	6869      	ldr	r1, [r5, #4]
 8006fc8:	68aa      	ldr	r2, [r5, #8]
 8006fca:	68eb      	ldr	r3, [r5, #12]
 8006fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fce:	7c2b      	ldrb	r3, [r5, #16]
 8006fd0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006fd2:	4a96      	ldr	r2, [pc, #600]	@ (800722c <loadMenuTexts+0x1258>)
 8006fd4:	4b96      	ldr	r3, [pc, #600]	@ (8007230 <loadMenuTexts+0x125c>)
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461d      	mov	r5, r3
 8006fda:	6828      	ldr	r0, [r5, #0]
 8006fdc:	6869      	ldr	r1, [r5, #4]
 8006fde:	68aa      	ldr	r2, [r5, #8]
 8006fe0:	68eb      	ldr	r3, [r5, #12]
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe4:	7c2b      	ldrb	r3, [r5, #16]
 8006fe6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006fe8:	4a92      	ldr	r2, [pc, #584]	@ (8007234 <loadMenuTexts+0x1260>)
 8006fea:	4b93      	ldr	r3, [pc, #588]	@ (8007238 <loadMenuTexts+0x1264>)
 8006fec:	4614      	mov	r4, r2
 8006fee:	461d      	mov	r5, r3
 8006ff0:	6828      	ldr	r0, [r5, #0]
 8006ff2:	6869      	ldr	r1, [r5, #4]
 8006ff4:	68aa      	ldr	r2, [r5, #8]
 8006ff6:	68eb      	ldr	r3, [r5, #12]
 8006ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffa:	7c2b      	ldrb	r3, [r5, #16]
 8006ffc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006ffe:	4a8f      	ldr	r2, [pc, #572]	@ (800723c <loadMenuTexts+0x1268>)
 8007000:	4b8f      	ldr	r3, [pc, #572]	@ (8007240 <loadMenuTexts+0x126c>)
 8007002:	4614      	mov	r4, r2
 8007004:	461d      	mov	r5, r3
 8007006:	6828      	ldr	r0, [r5, #0]
 8007008:	6869      	ldr	r1, [r5, #4]
 800700a:	68aa      	ldr	r2, [r5, #8]
 800700c:	68eb      	ldr	r3, [r5, #12]
 800700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007010:	7c2b      	ldrb	r3, [r5, #16]
 8007012:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007014:	4a8b      	ldr	r2, [pc, #556]	@ (8007244 <loadMenuTexts+0x1270>)
 8007016:	4b8c      	ldr	r3, [pc, #560]	@ (8007248 <loadMenuTexts+0x1274>)
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	6828      	ldr	r0, [r5, #0]
 800701e:	6869      	ldr	r1, [r5, #4]
 8007020:	68aa      	ldr	r2, [r5, #8]
 8007022:	68eb      	ldr	r3, [r5, #12]
 8007024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007026:	7c2b      	ldrb	r3, [r5, #16]
 8007028:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800702a:	4a88      	ldr	r2, [pc, #544]	@ (800724c <loadMenuTexts+0x1278>)
 800702c:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <loadMenuTexts+0x127c>)
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	6828      	ldr	r0, [r5, #0]
 8007034:	6869      	ldr	r1, [r5, #4]
 8007036:	68aa      	ldr	r2, [r5, #8]
 8007038:	68eb      	ldr	r3, [r5, #12]
 800703a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703c:	7c2b      	ldrb	r3, [r5, #16]
 800703e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007040:	4a84      	ldr	r2, [pc, #528]	@ (8007254 <loadMenuTexts+0x1280>)
 8007042:	4b85      	ldr	r3, [pc, #532]	@ (8007258 <loadMenuTexts+0x1284>)
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	6828      	ldr	r0, [r5, #0]
 800704a:	6869      	ldr	r1, [r5, #4]
 800704c:	68aa      	ldr	r2, [r5, #8]
 800704e:	68eb      	ldr	r3, [r5, #12]
 8007050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007052:	7c2b      	ldrb	r3, [r5, #16]
 8007054:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007056:	4a81      	ldr	r2, [pc, #516]	@ (800725c <loadMenuTexts+0x1288>)
 8007058:	4b81      	ldr	r3, [pc, #516]	@ (8007260 <loadMenuTexts+0x128c>)
 800705a:	4614      	mov	r4, r2
 800705c:	461d      	mov	r5, r3
 800705e:	6828      	ldr	r0, [r5, #0]
 8007060:	6869      	ldr	r1, [r5, #4]
 8007062:	68aa      	ldr	r2, [r5, #8]
 8007064:	68eb      	ldr	r3, [r5, #12]
 8007066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007068:	7c2b      	ldrb	r3, [r5, #16]
 800706a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 800706c:	4a7d      	ldr	r2, [pc, #500]	@ (8007264 <loadMenuTexts+0x1290>)
 800706e:	4b7e      	ldr	r3, [pc, #504]	@ (8007268 <loadMenuTexts+0x1294>)
 8007070:	4614      	mov	r4, r2
 8007072:	461d      	mov	r5, r3
 8007074:	6828      	ldr	r0, [r5, #0]
 8007076:	6869      	ldr	r1, [r5, #4]
 8007078:	68aa      	ldr	r2, [r5, #8]
 800707a:	68eb      	ldr	r3, [r5, #12]
 800707c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707e:	7c2b      	ldrb	r3, [r5, #16]
 8007080:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007082:	4a7a      	ldr	r2, [pc, #488]	@ (800726c <loadMenuTexts+0x1298>)
 8007084:	4b7a      	ldr	r3, [pc, #488]	@ (8007270 <loadMenuTexts+0x129c>)
 8007086:	4614      	mov	r4, r2
 8007088:	461d      	mov	r5, r3
 800708a:	6828      	ldr	r0, [r5, #0]
 800708c:	6869      	ldr	r1, [r5, #4]
 800708e:	68aa      	ldr	r2, [r5, #8]
 8007090:	68eb      	ldr	r3, [r5, #12]
 8007092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007094:	7c2b      	ldrb	r3, [r5, #16]
 8007096:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007098:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <loadMenuTexts+0x12a0>)
 800709a:	4b77      	ldr	r3, [pc, #476]	@ (8007278 <loadMenuTexts+0x12a4>)
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	6828      	ldr	r0, [r5, #0]
 80070a2:	6869      	ldr	r1, [r5, #4]
 80070a4:	68aa      	ldr	r2, [r5, #8]
 80070a6:	68eb      	ldr	r3, [r5, #12]
 80070a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070aa:	7c2b      	ldrb	r3, [r5, #16]
 80070ac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 80070ae:	4a73      	ldr	r2, [pc, #460]	@ (800727c <loadMenuTexts+0x12a8>)
 80070b0:	4b73      	ldr	r3, [pc, #460]	@ (8007280 <loadMenuTexts+0x12ac>)
 80070b2:	4614      	mov	r4, r2
 80070b4:	461d      	mov	r5, r3
 80070b6:	6828      	ldr	r0, [r5, #0]
 80070b8:	6869      	ldr	r1, [r5, #4]
 80070ba:	68aa      	ldr	r2, [r5, #8]
 80070bc:	68eb      	ldr	r3, [r5, #12]
 80070be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c0:	7c2b      	ldrb	r3, [r5, #16]
 80070c2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 80070c4:	4a6f      	ldr	r2, [pc, #444]	@ (8007284 <loadMenuTexts+0x12b0>)
 80070c6:	4b70      	ldr	r3, [pc, #448]	@ (8007288 <loadMenuTexts+0x12b4>)
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
 80070cc:	6828      	ldr	r0, [r5, #0]
 80070ce:	6869      	ldr	r1, [r5, #4]
 80070d0:	68aa      	ldr	r2, [r5, #8]
 80070d2:	68eb      	ldr	r3, [r5, #12]
 80070d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d6:	7c2b      	ldrb	r3, [r5, #16]
 80070d8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 80070da:	4a6c      	ldr	r2, [pc, #432]	@ (800728c <loadMenuTexts+0x12b8>)
 80070dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <loadMenuTexts+0x12bc>)
 80070de:	4614      	mov	r4, r2
 80070e0:	461d      	mov	r5, r3
 80070e2:	6828      	ldr	r0, [r5, #0]
 80070e4:	6869      	ldr	r1, [r5, #4]
 80070e6:	68aa      	ldr	r2, [r5, #8]
 80070e8:	68eb      	ldr	r3, [r5, #12]
 80070ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ec:	7c2b      	ldrb	r3, [r5, #16]
 80070ee:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 80070f0:	4a68      	ldr	r2, [pc, #416]	@ (8007294 <loadMenuTexts+0x12c0>)
 80070f2:	4b69      	ldr	r3, [pc, #420]	@ (8007298 <loadMenuTexts+0x12c4>)
 80070f4:	4614      	mov	r4, r2
 80070f6:	461d      	mov	r5, r3
 80070f8:	6828      	ldr	r0, [r5, #0]
 80070fa:	6869      	ldr	r1, [r5, #4]
 80070fc:	68aa      	ldr	r2, [r5, #8]
 80070fe:	68eb      	ldr	r3, [r5, #12]
 8007100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007102:	7c2b      	ldrb	r3, [r5, #16]
 8007104:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007106:	4a65      	ldr	r2, [pc, #404]	@ (800729c <loadMenuTexts+0x12c8>)
 8007108:	4b65      	ldr	r3, [pc, #404]	@ (80072a0 <loadMenuTexts+0x12cc>)
 800710a:	4614      	mov	r4, r2
 800710c:	461d      	mov	r5, r3
 800710e:	6828      	ldr	r0, [r5, #0]
 8007110:	6869      	ldr	r1, [r5, #4]
 8007112:	68aa      	ldr	r2, [r5, #8]
 8007114:	68eb      	ldr	r3, [r5, #12]
 8007116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007118:	7c2b      	ldrb	r3, [r5, #16]
 800711a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 800711c:	4a61      	ldr	r2, [pc, #388]	@ (80072a4 <loadMenuTexts+0x12d0>)
 800711e:	4b62      	ldr	r3, [pc, #392]	@ (80072a8 <loadMenuTexts+0x12d4>)
 8007120:	4614      	mov	r4, r2
 8007122:	461d      	mov	r5, r3
 8007124:	6828      	ldr	r0, [r5, #0]
 8007126:	6869      	ldr	r1, [r5, #4]
 8007128:	68aa      	ldr	r2, [r5, #8]
 800712a:	68eb      	ldr	r3, [r5, #12]
 800712c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800712e:	7c2b      	ldrb	r3, [r5, #16]
 8007130:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007132:	4a5e      	ldr	r2, [pc, #376]	@ (80072ac <loadMenuTexts+0x12d8>)
 8007134:	4b5e      	ldr	r3, [pc, #376]	@ (80072b0 <loadMenuTexts+0x12dc>)
 8007136:	4614      	mov	r4, r2
 8007138:	461d      	mov	r5, r3
 800713a:	6828      	ldr	r0, [r5, #0]
 800713c:	6869      	ldr	r1, [r5, #4]
 800713e:	68aa      	ldr	r2, [r5, #8]
 8007140:	68eb      	ldr	r3, [r5, #12]
 8007142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007144:	7c2b      	ldrb	r3, [r5, #16]
 8007146:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007148:	4a5a      	ldr	r2, [pc, #360]	@ (80072b4 <loadMenuTexts+0x12e0>)
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <loadMenuTexts+0x12e4>)
 800714c:	4614      	mov	r4, r2
 800714e:	461d      	mov	r5, r3
 8007150:	6828      	ldr	r0, [r5, #0]
 8007152:	6869      	ldr	r1, [r5, #4]
 8007154:	68aa      	ldr	r2, [r5, #8]
 8007156:	68eb      	ldr	r3, [r5, #12]
 8007158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800715a:	7c2b      	ldrb	r3, [r5, #16]
 800715c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800715e:	4a57      	ldr	r2, [pc, #348]	@ (80072bc <loadMenuTexts+0x12e8>)
 8007160:	4b57      	ldr	r3, [pc, #348]	@ (80072c0 <loadMenuTexts+0x12ec>)
 8007162:	4614      	mov	r4, r2
 8007164:	461d      	mov	r5, r3
 8007166:	6828      	ldr	r0, [r5, #0]
 8007168:	6869      	ldr	r1, [r5, #4]
 800716a:	68aa      	ldr	r2, [r5, #8]
 800716c:	68eb      	ldr	r3, [r5, #12]
 800716e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007170:	7c2b      	ldrb	r3, [r5, #16]
 8007172:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007174:	4a53      	ldr	r2, [pc, #332]	@ (80072c4 <loadMenuTexts+0x12f0>)
 8007176:	4b54      	ldr	r3, [pc, #336]	@ (80072c8 <loadMenuTexts+0x12f4>)
 8007178:	4614      	mov	r4, r2
 800717a:	461d      	mov	r5, r3
 800717c:	6828      	ldr	r0, [r5, #0]
 800717e:	6869      	ldr	r1, [r5, #4]
 8007180:	68aa      	ldr	r2, [r5, #8]
 8007182:	68eb      	ldr	r3, [r5, #12]
 8007184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007186:	7c2b      	ldrb	r3, [r5, #16]
 8007188:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800718a:	4a50      	ldr	r2, [pc, #320]	@ (80072cc <loadMenuTexts+0x12f8>)
 800718c:	4b50      	ldr	r3, [pc, #320]	@ (80072d0 <loadMenuTexts+0x12fc>)
 800718e:	4614      	mov	r4, r2
 8007190:	461d      	mov	r5, r3
 8007192:	6828      	ldr	r0, [r5, #0]
 8007194:	6869      	ldr	r1, [r5, #4]
 8007196:	68aa      	ldr	r2, [r5, #8]
 8007198:	68eb      	ldr	r3, [r5, #12]
 800719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719c:	7c2b      	ldrb	r3, [r5, #16]
 800719e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80071a0:	4a4c      	ldr	r2, [pc, #304]	@ (80072d4 <loadMenuTexts+0x1300>)
 80071a2:	4b4d      	ldr	r3, [pc, #308]	@ (80072d8 <loadMenuTexts+0x1304>)
 80071a4:	4614      	mov	r4, r2
 80071a6:	461d      	mov	r5, r3
 80071a8:	6828      	ldr	r0, [r5, #0]
 80071aa:	6869      	ldr	r1, [r5, #4]
 80071ac:	68aa      	ldr	r2, [r5, #8]
 80071ae:	68eb      	ldr	r3, [r5, #12]
 80071b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b2:	7c2b      	ldrb	r3, [r5, #16]
 80071b4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80071b6:	4a49      	ldr	r2, [pc, #292]	@ (80072dc <loadMenuTexts+0x1308>)
 80071b8:	4b49      	ldr	r3, [pc, #292]	@ (80072e0 <loadMenuTexts+0x130c>)
 80071ba:	4614      	mov	r4, r2
 80071bc:	461d      	mov	r5, r3
 80071be:	e091      	b.n	80072e4 <loadMenuTexts+0x1310>
 80071c0:	200009d4 	.word	0x200009d4
 80071c4:	20001b08 	.word	0x20001b08
 80071c8:	200009e8 	.word	0x200009e8
 80071cc:	20001b1c 	.word	0x20001b1c
 80071d0:	200009fc 	.word	0x200009fc
 80071d4:	20001b30 	.word	0x20001b30
 80071d8:	20000a10 	.word	0x20000a10
 80071dc:	20001b44 	.word	0x20001b44
 80071e0:	20000a24 	.word	0x20000a24
 80071e4:	20001b58 	.word	0x20001b58
 80071e8:	20000a38 	.word	0x20000a38
 80071ec:	20001b6c 	.word	0x20001b6c
 80071f0:	20000a4c 	.word	0x20000a4c
 80071f4:	20001b80 	.word	0x20001b80
 80071f8:	20000a60 	.word	0x20000a60
 80071fc:	20001b94 	.word	0x20001b94
 8007200:	20000a74 	.word	0x20000a74
 8007204:	20001ba8 	.word	0x20001ba8
 8007208:	20000a88 	.word	0x20000a88
 800720c:	20001bbc 	.word	0x20001bbc
 8007210:	20000a9c 	.word	0x20000a9c
 8007214:	20001bd0 	.word	0x20001bd0
 8007218:	20000ab0 	.word	0x20000ab0
 800721c:	20001be4 	.word	0x20001be4
 8007220:	20000ac4 	.word	0x20000ac4
 8007224:	20001bf8 	.word	0x20001bf8
 8007228:	20000ad8 	.word	0x20000ad8
 800722c:	20001c0c 	.word	0x20001c0c
 8007230:	20000aec 	.word	0x20000aec
 8007234:	20001c20 	.word	0x20001c20
 8007238:	20000b00 	.word	0x20000b00
 800723c:	20001c34 	.word	0x20001c34
 8007240:	20000b14 	.word	0x20000b14
 8007244:	20001c48 	.word	0x20001c48
 8007248:	20000b28 	.word	0x20000b28
 800724c:	20001c5c 	.word	0x20001c5c
 8007250:	20000b3c 	.word	0x20000b3c
 8007254:	20001c70 	.word	0x20001c70
 8007258:	20000b50 	.word	0x20000b50
 800725c:	20001c84 	.word	0x20001c84
 8007260:	20000b64 	.word	0x20000b64
 8007264:	20001c98 	.word	0x20001c98
 8007268:	20000b78 	.word	0x20000b78
 800726c:	20001cac 	.word	0x20001cac
 8007270:	20000b8c 	.word	0x20000b8c
 8007274:	20001cc0 	.word	0x20001cc0
 8007278:	20000ba0 	.word	0x20000ba0
 800727c:	20001cd4 	.word	0x20001cd4
 8007280:	20000bb4 	.word	0x20000bb4
 8007284:	20001ce8 	.word	0x20001ce8
 8007288:	20000bc8 	.word	0x20000bc8
 800728c:	20001cfc 	.word	0x20001cfc
 8007290:	20000bdc 	.word	0x20000bdc
 8007294:	20001d10 	.word	0x20001d10
 8007298:	20000bf0 	.word	0x20000bf0
 800729c:	20001d24 	.word	0x20001d24
 80072a0:	20000c04 	.word	0x20000c04
 80072a4:	20001d38 	.word	0x20001d38
 80072a8:	20000c18 	.word	0x20000c18
 80072ac:	20001d4c 	.word	0x20001d4c
 80072b0:	20000c2c 	.word	0x20000c2c
 80072b4:	20001d60 	.word	0x20001d60
 80072b8:	20000c40 	.word	0x20000c40
 80072bc:	20001d74 	.word	0x20001d74
 80072c0:	20000c54 	.word	0x20000c54
 80072c4:	20001d88 	.word	0x20001d88
 80072c8:	20000c68 	.word	0x20000c68
 80072cc:	20001d9c 	.word	0x20001d9c
 80072d0:	20000cf4 	.word	0x20000cf4
 80072d4:	20001db0 	.word	0x20001db0
 80072d8:	20000d08 	.word	0x20000d08
 80072dc:	20001dc4 	.word	0x20001dc4
 80072e0:	20000ccc 	.word	0x20000ccc
 80072e4:	6828      	ldr	r0, [r5, #0]
 80072e6:	6869      	ldr	r1, [r5, #4]
 80072e8:	68aa      	ldr	r2, [r5, #8]
 80072ea:	68eb      	ldr	r3, [r5, #12]
 80072ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ee:	7c2b      	ldrb	r3, [r5, #16]
 80072f0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80072f2:	4a5b      	ldr	r2, [pc, #364]	@ (8007460 <loadMenuTexts+0x148c>)
 80072f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007464 <loadMenuTexts+0x1490>)
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	6828      	ldr	r0, [r5, #0]
 80072fc:	6869      	ldr	r1, [r5, #4]
 80072fe:	68aa      	ldr	r2, [r5, #8]
 8007300:	68eb      	ldr	r3, [r5, #12]
 8007302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007304:	7c2b      	ldrb	r3, [r5, #16]
 8007306:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007308:	4a57      	ldr	r2, [pc, #348]	@ (8007468 <loadMenuTexts+0x1494>)
 800730a:	4b58      	ldr	r3, [pc, #352]	@ (800746c <loadMenuTexts+0x1498>)
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	6828      	ldr	r0, [r5, #0]
 8007312:	6869      	ldr	r1, [r5, #4]
 8007314:	68aa      	ldr	r2, [r5, #8]
 8007316:	68eb      	ldr	r3, [r5, #12]
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	7c2b      	ldrb	r3, [r5, #16]
 800731c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800731e:	4a54      	ldr	r2, [pc, #336]	@ (8007470 <loadMenuTexts+0x149c>)
 8007320:	4b54      	ldr	r3, [pc, #336]	@ (8007474 <loadMenuTexts+0x14a0>)
 8007322:	4614      	mov	r4, r2
 8007324:	461d      	mov	r5, r3
 8007326:	6828      	ldr	r0, [r5, #0]
 8007328:	6869      	ldr	r1, [r5, #4]
 800732a:	68aa      	ldr	r2, [r5, #8]
 800732c:	68eb      	ldr	r3, [r5, #12]
 800732e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007330:	7c2b      	ldrb	r3, [r5, #16]
 8007332:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007334:	4a50      	ldr	r2, [pc, #320]	@ (8007478 <loadMenuTexts+0x14a4>)
 8007336:	4b51      	ldr	r3, [pc, #324]	@ (800747c <loadMenuTexts+0x14a8>)
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	6828      	ldr	r0, [r5, #0]
 800733e:	6869      	ldr	r1, [r5, #4]
 8007340:	68aa      	ldr	r2, [r5, #8]
 8007342:	68eb      	ldr	r3, [r5, #12]
 8007344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007346:	7c2b      	ldrb	r3, [r5, #16]
 8007348:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800734a:	4a4d      	ldr	r2, [pc, #308]	@ (8007480 <loadMenuTexts+0x14ac>)
 800734c:	4b4d      	ldr	r3, [pc, #308]	@ (8007484 <loadMenuTexts+0x14b0>)
 800734e:	4614      	mov	r4, r2
 8007350:	461d      	mov	r5, r3
 8007352:	6828      	ldr	r0, [r5, #0]
 8007354:	6869      	ldr	r1, [r5, #4]
 8007356:	68aa      	ldr	r2, [r5, #8]
 8007358:	68eb      	ldr	r3, [r5, #12]
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735c:	7c2b      	ldrb	r3, [r5, #16]
 800735e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007360:	4a49      	ldr	r2, [pc, #292]	@ (8007488 <loadMenuTexts+0x14b4>)
 8007362:	4b4a      	ldr	r3, [pc, #296]	@ (800748c <loadMenuTexts+0x14b8>)
 8007364:	4614      	mov	r4, r2
 8007366:	461d      	mov	r5, r3
 8007368:	6828      	ldr	r0, [r5, #0]
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	68aa      	ldr	r2, [r5, #8]
 800736e:	68eb      	ldr	r3, [r5, #12]
 8007370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007372:	7c2b      	ldrb	r3, [r5, #16]
 8007374:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007376:	4a46      	ldr	r2, [pc, #280]	@ (8007490 <loadMenuTexts+0x14bc>)
 8007378:	4b46      	ldr	r3, [pc, #280]	@ (8007494 <loadMenuTexts+0x14c0>)
 800737a:	4614      	mov	r4, r2
 800737c:	461d      	mov	r5, r3
 800737e:	6828      	ldr	r0, [r5, #0]
 8007380:	6869      	ldr	r1, [r5, #4]
 8007382:	68aa      	ldr	r2, [r5, #8]
 8007384:	68eb      	ldr	r3, [r5, #12]
 8007386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007388:	7c2b      	ldrb	r3, [r5, #16]
 800738a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800738c:	4a42      	ldr	r2, [pc, #264]	@ (8007498 <loadMenuTexts+0x14c4>)
 800738e:	4b43      	ldr	r3, [pc, #268]	@ (800749c <loadMenuTexts+0x14c8>)
 8007390:	4614      	mov	r4, r2
 8007392:	461d      	mov	r5, r3
 8007394:	6828      	ldr	r0, [r5, #0]
 8007396:	6869      	ldr	r1, [r5, #4]
 8007398:	68aa      	ldr	r2, [r5, #8]
 800739a:	68eb      	ldr	r3, [r5, #12]
 800739c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739e:	7c2b      	ldrb	r3, [r5, #16]
 80073a0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80073a2:	4a3f      	ldr	r2, [pc, #252]	@ (80074a0 <loadMenuTexts+0x14cc>)
 80073a4:	4b3f      	ldr	r3, [pc, #252]	@ (80074a4 <loadMenuTexts+0x14d0>)
 80073a6:	4614      	mov	r4, r2
 80073a8:	461d      	mov	r5, r3
 80073aa:	6828      	ldr	r0, [r5, #0]
 80073ac:	6869      	ldr	r1, [r5, #4]
 80073ae:	68aa      	ldr	r2, [r5, #8]
 80073b0:	68eb      	ldr	r3, [r5, #12]
 80073b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b4:	7c2b      	ldrb	r3, [r5, #16]
 80073b6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80073b8:	4a3b      	ldr	r2, [pc, #236]	@ (80074a8 <loadMenuTexts+0x14d4>)
 80073ba:	4b3c      	ldr	r3, [pc, #240]	@ (80074ac <loadMenuTexts+0x14d8>)
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	6828      	ldr	r0, [r5, #0]
 80073c2:	6869      	ldr	r1, [r5, #4]
 80073c4:	68aa      	ldr	r2, [r5, #8]
 80073c6:	68eb      	ldr	r3, [r5, #12]
 80073c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ca:	7c2b      	ldrb	r3, [r5, #16]
 80073cc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80073ce:	4a38      	ldr	r2, [pc, #224]	@ (80074b0 <loadMenuTexts+0x14dc>)
 80073d0:	4b38      	ldr	r3, [pc, #224]	@ (80074b4 <loadMenuTexts+0x14e0>)
 80073d2:	4614      	mov	r4, r2
 80073d4:	461d      	mov	r5, r3
 80073d6:	6828      	ldr	r0, [r5, #0]
 80073d8:	6869      	ldr	r1, [r5, #4]
 80073da:	68aa      	ldr	r2, [r5, #8]
 80073dc:	68eb      	ldr	r3, [r5, #12]
 80073de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e0:	7c2b      	ldrb	r3, [r5, #16]
 80073e2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80073e4:	4a34      	ldr	r2, [pc, #208]	@ (80074b8 <loadMenuTexts+0x14e4>)
 80073e6:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <loadMenuTexts+0x14e8>)
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	6828      	ldr	r0, [r5, #0]
 80073ee:	6869      	ldr	r1, [r5, #4]
 80073f0:	68aa      	ldr	r2, [r5, #8]
 80073f2:	68eb      	ldr	r3, [r5, #12]
 80073f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f6:	7c2b      	ldrb	r3, [r5, #16]
 80073f8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80073fa:	4a31      	ldr	r2, [pc, #196]	@ (80074c0 <loadMenuTexts+0x14ec>)
 80073fc:	4b31      	ldr	r3, [pc, #196]	@ (80074c4 <loadMenuTexts+0x14f0>)
 80073fe:	4614      	mov	r4, r2
 8007400:	461d      	mov	r5, r3
 8007402:	6828      	ldr	r0, [r5, #0]
 8007404:	6869      	ldr	r1, [r5, #4]
 8007406:	68aa      	ldr	r2, [r5, #8]
 8007408:	68eb      	ldr	r3, [r5, #12]
 800740a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740c:	7c2b      	ldrb	r3, [r5, #16]
 800740e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007410:	4a2d      	ldr	r2, [pc, #180]	@ (80074c8 <loadMenuTexts+0x14f4>)
 8007412:	4b2e      	ldr	r3, [pc, #184]	@ (80074cc <loadMenuTexts+0x14f8>)
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	6828      	ldr	r0, [r5, #0]
 800741a:	6869      	ldr	r1, [r5, #4]
 800741c:	68aa      	ldr	r2, [r5, #8]
 800741e:	68eb      	ldr	r3, [r5, #12]
 8007420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007422:	7c2b      	ldrb	r3, [r5, #16]
 8007424:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007426:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <loadMenuTexts+0x14fc>)
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <loadMenuTexts+0x1500>)
 800742a:	4614      	mov	r4, r2
 800742c:	461d      	mov	r5, r3
 800742e:	6828      	ldr	r0, [r5, #0]
 8007430:	6869      	ldr	r1, [r5, #4]
 8007432:	68aa      	ldr	r2, [r5, #8]
 8007434:	68eb      	ldr	r3, [r5, #12]
 8007436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007438:	7c2b      	ldrb	r3, [r5, #16]
 800743a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 800743c:	4a26      	ldr	r2, [pc, #152]	@ (80074d8 <loadMenuTexts+0x1504>)
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <loadMenuTexts+0x1508>)
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	6828      	ldr	r0, [r5, #0]
 8007446:	6869      	ldr	r1, [r5, #4]
 8007448:	68aa      	ldr	r2, [r5, #8]
 800744a:	68eb      	ldr	r3, [r5, #12]
 800744c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744e:	7c2b      	ldrb	r3, [r5, #16]
 8007450:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007452:	f000 f845 	bl	80074e0 <menuVariableFinisher>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bdb0      	pop	{r4, r5, r7, pc}
 800745e:	bf00      	nop
 8007460:	20001dd8 	.word	0x20001dd8
 8007464:	20000ce0 	.word	0x20000ce0
 8007468:	20001dec 	.word	0x20001dec
 800746c:	20000d44 	.word	0x20000d44
 8007470:	20001e00 	.word	0x20001e00
 8007474:	20000d58 	.word	0x20000d58
 8007478:	20001e14 	.word	0x20001e14
 800747c:	20000d94 	.word	0x20000d94
 8007480:	20001e28 	.word	0x20001e28
 8007484:	20000da8 	.word	0x20000da8
 8007488:	20001e3c 	.word	0x20001e3c
 800748c:	20000de4 	.word	0x20000de4
 8007490:	20001e50 	.word	0x20001e50
 8007494:	20000df8 	.word	0x20000df8
 8007498:	20001e64 	.word	0x20001e64
 800749c:	20000e20 	.word	0x20000e20
 80074a0:	20001e78 	.word	0x20001e78
 80074a4:	20000e48 	.word	0x20000e48
 80074a8:	20001e8c 	.word	0x20001e8c
 80074ac:	20000e70 	.word	0x20000e70
 80074b0:	20001ea0 	.word	0x20001ea0
 80074b4:	20000e98 	.word	0x20000e98
 80074b8:	20001eb4 	.word	0x20001eb4
 80074bc:	20000ec0 	.word	0x20000ec0
 80074c0:	20001ec8 	.word	0x20001ec8
 80074c4:	20000ee8 	.word	0x20000ee8
 80074c8:	20001edc 	.word	0x20001edc
 80074cc:	20000f10 	.word	0x20000f10
 80074d0:	20001ef0 	.word	0x20001ef0
 80074d4:	20000f38 	.word	0x20000f38
 80074d8:	20001f04 	.word	0x20001f04
 80074dc:	20000f60 	.word	0x20000f60

080074e0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80074e4:	4b99      	ldr	r3, [pc, #612]	@ (800774c <menuVariableFinisher+0x26c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80074ea:	4b99      	ldr	r3, [pc, #612]	@ (8007750 <menuVariableFinisher+0x270>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80074f0:	4b98      	ldr	r3, [pc, #608]	@ (8007754 <menuVariableFinisher+0x274>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80074f6:	4b98      	ldr	r3, [pc, #608]	@ (8007758 <menuVariableFinisher+0x278>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80074fc:	4b97      	ldr	r3, [pc, #604]	@ (800775c <menuVariableFinisher+0x27c>)
 80074fe:	2200      	movs	r2, #0
 8007500:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007502:	4b97      	ldr	r3, [pc, #604]	@ (8007760 <menuVariableFinisher+0x280>)
 8007504:	2200      	movs	r2, #0
 8007506:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007508:	4b96      	ldr	r3, [pc, #600]	@ (8007764 <menuVariableFinisher+0x284>)
 800750a:	2200      	movs	r2, #0
 800750c:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800750e:	4b96      	ldr	r3, [pc, #600]	@ (8007768 <menuVariableFinisher+0x288>)
 8007510:	2200      	movs	r2, #0
 8007512:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007514:	4b95      	ldr	r3, [pc, #596]	@ (800776c <menuVariableFinisher+0x28c>)
 8007516:	2200      	movs	r2, #0
 8007518:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800751a:	4b95      	ldr	r3, [pc, #596]	@ (8007770 <menuVariableFinisher+0x290>)
 800751c:	2200      	movs	r2, #0
 800751e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007520:	4b94      	ldr	r3, [pc, #592]	@ (8007774 <menuVariableFinisher+0x294>)
 8007522:	2200      	movs	r2, #0
 8007524:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007526:	4b94      	ldr	r3, [pc, #592]	@ (8007778 <menuVariableFinisher+0x298>)
 8007528:	2200      	movs	r2, #0
 800752a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800752c:	4b93      	ldr	r3, [pc, #588]	@ (800777c <menuVariableFinisher+0x29c>)
 800752e:	2200      	movs	r2, #0
 8007530:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007532:	4b93      	ldr	r3, [pc, #588]	@ (8007780 <menuVariableFinisher+0x2a0>)
 8007534:	2200      	movs	r2, #0
 8007536:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007538:	4b92      	ldr	r3, [pc, #584]	@ (8007784 <menuVariableFinisher+0x2a4>)
 800753a:	2200      	movs	r2, #0
 800753c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800753e:	4b92      	ldr	r3, [pc, #584]	@ (8007788 <menuVariableFinisher+0x2a8>)
 8007540:	2200      	movs	r2, #0
 8007542:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007544:	4b91      	ldr	r3, [pc, #580]	@ (800778c <menuVariableFinisher+0x2ac>)
 8007546:	2200      	movs	r2, #0
 8007548:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800754a:	4b91      	ldr	r3, [pc, #580]	@ (8007790 <menuVariableFinisher+0x2b0>)
 800754c:	2200      	movs	r2, #0
 800754e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007550:	4b90      	ldr	r3, [pc, #576]	@ (8007794 <menuVariableFinisher+0x2b4>)
 8007552:	2200      	movs	r2, #0
 8007554:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007556:	4b90      	ldr	r3, [pc, #576]	@ (8007798 <menuVariableFinisher+0x2b8>)
 8007558:	2200      	movs	r2, #0
 800755a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800755c:	4b8f      	ldr	r3, [pc, #572]	@ (800779c <menuVariableFinisher+0x2bc>)
 800755e:	2200      	movs	r2, #0
 8007560:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007562:	4b8f      	ldr	r3, [pc, #572]	@ (80077a0 <menuVariableFinisher+0x2c0>)
 8007564:	2200      	movs	r2, #0
 8007566:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007568:	4b8e      	ldr	r3, [pc, #568]	@ (80077a4 <menuVariableFinisher+0x2c4>)
 800756a:	2200      	movs	r2, #0
 800756c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800756e:	4b8e      	ldr	r3, [pc, #568]	@ (80077a8 <menuVariableFinisher+0x2c8>)
 8007570:	2200      	movs	r2, #0
 8007572:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007574:	4b8d      	ldr	r3, [pc, #564]	@ (80077ac <menuVariableFinisher+0x2cc>)
 8007576:	2200      	movs	r2, #0
 8007578:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800757a:	4b8d      	ldr	r3, [pc, #564]	@ (80077b0 <menuVariableFinisher+0x2d0>)
 800757c:	2200      	movs	r2, #0
 800757e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007580:	4b8c      	ldr	r3, [pc, #560]	@ (80077b4 <menuVariableFinisher+0x2d4>)
 8007582:	2200      	movs	r2, #0
 8007584:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007586:	4b8c      	ldr	r3, [pc, #560]	@ (80077b8 <menuVariableFinisher+0x2d8>)
 8007588:	2200      	movs	r2, #0
 800758a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800758c:	4b8b      	ldr	r3, [pc, #556]	@ (80077bc <menuVariableFinisher+0x2dc>)
 800758e:	2200      	movs	r2, #0
 8007590:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007592:	4b8b      	ldr	r3, [pc, #556]	@ (80077c0 <menuVariableFinisher+0x2e0>)
 8007594:	2200      	movs	r2, #0
 8007596:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007598:	4b8a      	ldr	r3, [pc, #552]	@ (80077c4 <menuVariableFinisher+0x2e4>)
 800759a:	2200      	movs	r2, #0
 800759c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800759e:	4b8a      	ldr	r3, [pc, #552]	@ (80077c8 <menuVariableFinisher+0x2e8>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80075a4:	4b89      	ldr	r3, [pc, #548]	@ (80077cc <menuVariableFinisher+0x2ec>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80075aa:	4b89      	ldr	r3, [pc, #548]	@ (80077d0 <menuVariableFinisher+0x2f0>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80075b0:	4b88      	ldr	r3, [pc, #544]	@ (80077d4 <menuVariableFinisher+0x2f4>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80075b6:	4b88      	ldr	r3, [pc, #544]	@ (80077d8 <menuVariableFinisher+0x2f8>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80075bc:	4b87      	ldr	r3, [pc, #540]	@ (80077dc <menuVariableFinisher+0x2fc>)
 80075be:	2200      	movs	r2, #0
 80075c0:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80075c2:	4b87      	ldr	r3, [pc, #540]	@ (80077e0 <menuVariableFinisher+0x300>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80075c8:	4b86      	ldr	r3, [pc, #536]	@ (80077e4 <menuVariableFinisher+0x304>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80075ce:	4b86      	ldr	r3, [pc, #536]	@ (80077e8 <menuVariableFinisher+0x308>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80075d4:	4b85      	ldr	r3, [pc, #532]	@ (80077ec <menuVariableFinisher+0x30c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80075da:	4b85      	ldr	r3, [pc, #532]	@ (80077f0 <menuVariableFinisher+0x310>)
 80075dc:	2200      	movs	r2, #0
 80075de:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80075e0:	4b84      	ldr	r3, [pc, #528]	@ (80077f4 <menuVariableFinisher+0x314>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80075e6:	4b84      	ldr	r3, [pc, #528]	@ (80077f8 <menuVariableFinisher+0x318>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80075ec:	4b83      	ldr	r3, [pc, #524]	@ (80077fc <menuVariableFinisher+0x31c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80075f2:	4b83      	ldr	r3, [pc, #524]	@ (8007800 <menuVariableFinisher+0x320>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80075f8:	4b82      	ldr	r3, [pc, #520]	@ (8007804 <menuVariableFinisher+0x324>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80075fe:	4b82      	ldr	r3, [pc, #520]	@ (8007808 <menuVariableFinisher+0x328>)
 8007600:	2200      	movs	r2, #0
 8007602:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007604:	4b81      	ldr	r3, [pc, #516]	@ (800780c <menuVariableFinisher+0x32c>)
 8007606:	2200      	movs	r2, #0
 8007608:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800760a:	4b81      	ldr	r3, [pc, #516]	@ (8007810 <menuVariableFinisher+0x330>)
 800760c:	2200      	movs	r2, #0
 800760e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007610:	4b80      	ldr	r3, [pc, #512]	@ (8007814 <menuVariableFinisher+0x334>)
 8007612:	2200      	movs	r2, #0
 8007614:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007616:	4b80      	ldr	r3, [pc, #512]	@ (8007818 <menuVariableFinisher+0x338>)
 8007618:	2200      	movs	r2, #0
 800761a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 800761c:	4b7f      	ldr	r3, [pc, #508]	@ (800781c <menuVariableFinisher+0x33c>)
 800761e:	2200      	movs	r2, #0
 8007620:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007622:	4b7f      	ldr	r3, [pc, #508]	@ (8007820 <menuVariableFinisher+0x340>)
 8007624:	2200      	movs	r2, #0
 8007626:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007628:	4b7e      	ldr	r3, [pc, #504]	@ (8007824 <menuVariableFinisher+0x344>)
 800762a:	2200      	movs	r2, #0
 800762c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800762e:	4b7e      	ldr	r3, [pc, #504]	@ (8007828 <menuVariableFinisher+0x348>)
 8007630:	2200      	movs	r2, #0
 8007632:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007634:	4b7d      	ldr	r3, [pc, #500]	@ (800782c <menuVariableFinisher+0x34c>)
 8007636:	2200      	movs	r2, #0
 8007638:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800763a:	4b7d      	ldr	r3, [pc, #500]	@ (8007830 <menuVariableFinisher+0x350>)
 800763c:	2200      	movs	r2, #0
 800763e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007640:	4b7c      	ldr	r3, [pc, #496]	@ (8007834 <menuVariableFinisher+0x354>)
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007646:	4b7c      	ldr	r3, [pc, #496]	@ (8007838 <menuVariableFinisher+0x358>)
 8007648:	2200      	movs	r2, #0
 800764a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 800764c:	4b7b      	ldr	r3, [pc, #492]	@ (800783c <menuVariableFinisher+0x35c>)
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007652:	4b7b      	ldr	r3, [pc, #492]	@ (8007840 <menuVariableFinisher+0x360>)
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007658:	4b7a      	ldr	r3, [pc, #488]	@ (8007844 <menuVariableFinisher+0x364>)
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800765e:	4b7a      	ldr	r3, [pc, #488]	@ (8007848 <menuVariableFinisher+0x368>)
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007664:	4b79      	ldr	r3, [pc, #484]	@ (800784c <menuVariableFinisher+0x36c>)
 8007666:	2200      	movs	r2, #0
 8007668:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800766a:	4b79      	ldr	r3, [pc, #484]	@ (8007850 <menuVariableFinisher+0x370>)
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007670:	4b78      	ldr	r3, [pc, #480]	@ (8007854 <menuVariableFinisher+0x374>)
 8007672:	2200      	movs	r2, #0
 8007674:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007676:	4b78      	ldr	r3, [pc, #480]	@ (8007858 <menuVariableFinisher+0x378>)
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 800767c:	4b77      	ldr	r3, [pc, #476]	@ (800785c <menuVariableFinisher+0x37c>)
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007682:	4b77      	ldr	r3, [pc, #476]	@ (8007860 <menuVariableFinisher+0x380>)
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007688:	4b76      	ldr	r3, [pc, #472]	@ (8007864 <menuVariableFinisher+0x384>)
 800768a:	2200      	movs	r2, #0
 800768c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 800768e:	4b76      	ldr	r3, [pc, #472]	@ (8007868 <menuVariableFinisher+0x388>)
 8007690:	2200      	movs	r2, #0
 8007692:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007694:	4b75      	ldr	r3, [pc, #468]	@ (800786c <menuVariableFinisher+0x38c>)
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800769a:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <menuVariableFinisher+0x390>)
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80076a0:	4b74      	ldr	r3, [pc, #464]	@ (8007874 <menuVariableFinisher+0x394>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80076a6:	4b74      	ldr	r3, [pc, #464]	@ (8007878 <menuVariableFinisher+0x398>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80076ac:	4b73      	ldr	r3, [pc, #460]	@ (800787c <menuVariableFinisher+0x39c>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80076b2:	4b73      	ldr	r3, [pc, #460]	@ (8007880 <menuVariableFinisher+0x3a0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80076b8:	4b72      	ldr	r3, [pc, #456]	@ (8007884 <menuVariableFinisher+0x3a4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80076be:	4b72      	ldr	r3, [pc, #456]	@ (8007888 <menuVariableFinisher+0x3a8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80076c4:	4b71      	ldr	r3, [pc, #452]	@ (800788c <menuVariableFinisher+0x3ac>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80076ca:	4b71      	ldr	r3, [pc, #452]	@ (8007890 <menuVariableFinisher+0x3b0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80076d0:	4b70      	ldr	r3, [pc, #448]	@ (8007894 <menuVariableFinisher+0x3b4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80076d6:	4b70      	ldr	r3, [pc, #448]	@ (8007898 <menuVariableFinisher+0x3b8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80076dc:	4b6f      	ldr	r3, [pc, #444]	@ (800789c <menuVariableFinisher+0x3bc>)
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80076e2:	4b6f      	ldr	r3, [pc, #444]	@ (80078a0 <menuVariableFinisher+0x3c0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80076e8:	4b6e      	ldr	r3, [pc, #440]	@ (80078a4 <menuVariableFinisher+0x3c4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80076ee:	4b6e      	ldr	r3, [pc, #440]	@ (80078a8 <menuVariableFinisher+0x3c8>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80076f4:	4b6d      	ldr	r3, [pc, #436]	@ (80078ac <menuVariableFinisher+0x3cc>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80076fa:	4b6d      	ldr	r3, [pc, #436]	@ (80078b0 <menuVariableFinisher+0x3d0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007700:	4b6c      	ldr	r3, [pc, #432]	@ (80078b4 <menuVariableFinisher+0x3d4>)
 8007702:	2200      	movs	r2, #0
 8007704:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007706:	4b6c      	ldr	r3, [pc, #432]	@ (80078b8 <menuVariableFinisher+0x3d8>)
 8007708:	2200      	movs	r2, #0
 800770a:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 800770c:	4b6b      	ldr	r3, [pc, #428]	@ (80078bc <menuVariableFinisher+0x3dc>)
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007712:	4b6b      	ldr	r3, [pc, #428]	@ (80078c0 <menuVariableFinisher+0x3e0>)
 8007714:	2200      	movs	r2, #0
 8007716:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007718:	4b6a      	ldr	r3, [pc, #424]	@ (80078c4 <menuVariableFinisher+0x3e4>)
 800771a:	2200      	movs	r2, #0
 800771c:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800771e:	4b6a      	ldr	r3, [pc, #424]	@ (80078c8 <menuVariableFinisher+0x3e8>)
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007724:	4b69      	ldr	r3, [pc, #420]	@ (80078cc <menuVariableFinisher+0x3ec>)
 8007726:	2200      	movs	r2, #0
 8007728:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800772a:	4b69      	ldr	r3, [pc, #420]	@ (80078d0 <menuVariableFinisher+0x3f0>)
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007730:	4b68      	ldr	r3, [pc, #416]	@ (80078d4 <menuVariableFinisher+0x3f4>)
 8007732:	2200      	movs	r2, #0
 8007734:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007736:	4b68      	ldr	r3, [pc, #416]	@ (80078d8 <menuVariableFinisher+0x3f8>)
 8007738:	2200      	movs	r2, #0
 800773a:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 800773c:	4b67      	ldr	r3, [pc, #412]	@ (80078dc <menuVariableFinisher+0x3fc>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
}
 8007742:	bf00      	nop
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	2000009c 	.word	0x2000009c
 8007750:	200000b0 	.word	0x200000b0
 8007754:	200000c4 	.word	0x200000c4
 8007758:	200000d8 	.word	0x200000d8
 800775c:	200000ec 	.word	0x200000ec
 8007760:	20000100 	.word	0x20000100
 8007764:	20000114 	.word	0x20000114
 8007768:	20000128 	.word	0x20000128
 800776c:	2000013c 	.word	0x2000013c
 8007770:	20000150 	.word	0x20000150
 8007774:	20000164 	.word	0x20000164
 8007778:	20000178 	.word	0x20000178
 800777c:	20001824 	.word	0x20001824
 8007780:	20001838 	.word	0x20001838
 8007784:	2000184c 	.word	0x2000184c
 8007788:	20001860 	.word	0x20001860
 800778c:	20001874 	.word	0x20001874
 8007790:	20001888 	.word	0x20001888
 8007794:	2000189c 	.word	0x2000189c
 8007798:	200018b0 	.word	0x200018b0
 800779c:	200018c4 	.word	0x200018c4
 80077a0:	200018d8 	.word	0x200018d8
 80077a4:	200018ec 	.word	0x200018ec
 80077a8:	20001900 	.word	0x20001900
 80077ac:	20001914 	.word	0x20001914
 80077b0:	20001928 	.word	0x20001928
 80077b4:	2000193c 	.word	0x2000193c
 80077b8:	20001950 	.word	0x20001950
 80077bc:	20001964 	.word	0x20001964
 80077c0:	20001978 	.word	0x20001978
 80077c4:	2000198c 	.word	0x2000198c
 80077c8:	200019a0 	.word	0x200019a0
 80077cc:	200019b4 	.word	0x200019b4
 80077d0:	200019c8 	.word	0x200019c8
 80077d4:	200019dc 	.word	0x200019dc
 80077d8:	200019f0 	.word	0x200019f0
 80077dc:	20001a04 	.word	0x20001a04
 80077e0:	20001a18 	.word	0x20001a18
 80077e4:	20001a2c 	.word	0x20001a2c
 80077e8:	20001a40 	.word	0x20001a40
 80077ec:	20001a54 	.word	0x20001a54
 80077f0:	20001a68 	.word	0x20001a68
 80077f4:	20001a7c 	.word	0x20001a7c
 80077f8:	20001a90 	.word	0x20001a90
 80077fc:	20001aa4 	.word	0x20001aa4
 8007800:	20001ab8 	.word	0x20001ab8
 8007804:	20001acc 	.word	0x20001acc
 8007808:	20001ae0 	.word	0x20001ae0
 800780c:	20001af4 	.word	0x20001af4
 8007810:	20001b08 	.word	0x20001b08
 8007814:	20001b1c 	.word	0x20001b1c
 8007818:	20001b30 	.word	0x20001b30
 800781c:	20001b44 	.word	0x20001b44
 8007820:	20001b58 	.word	0x20001b58
 8007824:	20001b6c 	.word	0x20001b6c
 8007828:	20001b80 	.word	0x20001b80
 800782c:	20001b94 	.word	0x20001b94
 8007830:	20001ba8 	.word	0x20001ba8
 8007834:	20001bbc 	.word	0x20001bbc
 8007838:	20001bd0 	.word	0x20001bd0
 800783c:	20001be4 	.word	0x20001be4
 8007840:	20001bf8 	.word	0x20001bf8
 8007844:	20001c0c 	.word	0x20001c0c
 8007848:	20001c20 	.word	0x20001c20
 800784c:	20001c34 	.word	0x20001c34
 8007850:	20001c48 	.word	0x20001c48
 8007854:	20001c5c 	.word	0x20001c5c
 8007858:	20001c70 	.word	0x20001c70
 800785c:	20001c84 	.word	0x20001c84
 8007860:	20001c98 	.word	0x20001c98
 8007864:	20001cac 	.word	0x20001cac
 8007868:	20001cc0 	.word	0x20001cc0
 800786c:	20001cd4 	.word	0x20001cd4
 8007870:	20001ce8 	.word	0x20001ce8
 8007874:	20001cfc 	.word	0x20001cfc
 8007878:	20001d10 	.word	0x20001d10
 800787c:	20001d24 	.word	0x20001d24
 8007880:	20001d38 	.word	0x20001d38
 8007884:	20001d4c 	.word	0x20001d4c
 8007888:	20001d60 	.word	0x20001d60
 800788c:	20001d74 	.word	0x20001d74
 8007890:	20001d88 	.word	0x20001d88
 8007894:	20001d9c 	.word	0x20001d9c
 8007898:	20001db0 	.word	0x20001db0
 800789c:	20001dc4 	.word	0x20001dc4
 80078a0:	20001dd8 	.word	0x20001dd8
 80078a4:	20001dec 	.word	0x20001dec
 80078a8:	20001e00 	.word	0x20001e00
 80078ac:	20001e14 	.word	0x20001e14
 80078b0:	20001e28 	.word	0x20001e28
 80078b4:	20001e3c 	.word	0x20001e3c
 80078b8:	20001e50 	.word	0x20001e50
 80078bc:	20001e64 	.word	0x20001e64
 80078c0:	20001e78 	.word	0x20001e78
 80078c4:	20001e8c 	.word	0x20001e8c
 80078c8:	20001ea0 	.word	0x20001ea0
 80078cc:	20001eb4 	.word	0x20001eb4
 80078d0:	20001ec8 	.word	0x20001ec8
 80078d4:	20001edc 	.word	0x20001edc
 80078d8:	20001ef0 	.word	0x20001ef0
 80078dc:	20001f04 	.word	0x20001f04

080078e0 <resetMenuTexts>:

void resetMenuTexts() {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80078e4:	2211      	movs	r2, #17
 80078e6:	2100      	movs	r1, #0
 80078e8:	48d3      	ldr	r0, [pc, #844]	@ (8007c38 <resetMenuTexts+0x358>)
 80078ea:	f006 fcc7 	bl	800e27c <memset>
    memset(ayarlarText, 0, 17);
 80078ee:	2211      	movs	r2, #17
 80078f0:	2100      	movs	r1, #0
 80078f2:	48d2      	ldr	r0, [pc, #840]	@ (8007c3c <resetMenuTexts+0x35c>)
 80078f4:	f006 fcc2 	bl	800e27c <memset>
    memset(hataKayitListText, 0, 17);
 80078f8:	2211      	movs	r2, #17
 80078fa:	2100      	movs	r1, #0
 80078fc:	48d0      	ldr	r0, [pc, #832]	@ (8007c40 <resetMenuTexts+0x360>)
 80078fe:	f006 fcbd 	bl	800e27c <memset>
    memset(birHataKoduText, 0, 17);
 8007902:	2211      	movs	r2, #17
 8007904:	2100      	movs	r1, #0
 8007906:	48cf      	ldr	r0, [pc, #828]	@ (8007c44 <resetMenuTexts+0x364>)
 8007908:	f006 fcb8 	bl	800e27c <memset>
    memset(ikiHataKoduText, 0, 17);
 800790c:	2211      	movs	r2, #17
 800790e:	2100      	movs	r1, #0
 8007910:	48cd      	ldr	r0, [pc, #820]	@ (8007c48 <resetMenuTexts+0x368>)
 8007912:	f006 fcb3 	bl	800e27c <memset>
    memset(ucHataKoduText, 0, 17);
 8007916:	2211      	movs	r2, #17
 8007918:	2100      	movs	r1, #0
 800791a:	48cc      	ldr	r0, [pc, #816]	@ (8007c4c <resetMenuTexts+0x36c>)
 800791c:	f006 fcae 	bl	800e27c <memset>
    memset(dortHataKoduText, 0, 17);
 8007920:	2211      	movs	r2, #17
 8007922:	2100      	movs	r1, #0
 8007924:	48ca      	ldr	r0, [pc, #808]	@ (8007c50 <resetMenuTexts+0x370>)
 8007926:	f006 fca9 	bl	800e27c <memset>
    memset(besHataKoduText, 0, 17);
 800792a:	2211      	movs	r2, #17
 800792c:	2100      	movs	r1, #0
 800792e:	48c9      	ldr	r0, [pc, #804]	@ (8007c54 <resetMenuTexts+0x374>)
 8007930:	f006 fca4 	bl	800e27c <memset>
    memset(altiHataKoduText, 0, 17);
 8007934:	2211      	movs	r2, #17
 8007936:	2100      	movs	r1, #0
 8007938:	48c7      	ldr	r0, [pc, #796]	@ (8007c58 <resetMenuTexts+0x378>)
 800793a:	f006 fc9f 	bl	800e27c <memset>
    memset(yediHataKoduText, 0, 17);
 800793e:	2211      	movs	r2, #17
 8007940:	2100      	movs	r1, #0
 8007942:	48c6      	ldr	r0, [pc, #792]	@ (8007c5c <resetMenuTexts+0x37c>)
 8007944:	f006 fc9a 	bl	800e27c <memset>
    memset(sekizHataKoduText, 0, 17);
 8007948:	2211      	movs	r2, #17
 800794a:	2100      	movs	r1, #0
 800794c:	48c4      	ldr	r0, [pc, #784]	@ (8007c60 <resetMenuTexts+0x380>)
 800794e:	f006 fc95 	bl	800e27c <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007952:	2211      	movs	r2, #17
 8007954:	2100      	movs	r1, #0
 8007956:	48c3      	ldr	r0, [pc, #780]	@ (8007c64 <resetMenuTexts+0x384>)
 8007958:	f006 fc90 	bl	800e27c <memset>
    memset(onHataKoduText, 0, 17);
 800795c:	2211      	movs	r2, #17
 800795e:	2100      	movs	r1, #0
 8007960:	48c1      	ldr	r0, [pc, #772]	@ (8007c68 <resetMenuTexts+0x388>)
 8007962:	f006 fc8b 	bl	800e27c <memset>
    memset(silmekIcinText, 0, 17);
 8007966:	2211      	movs	r2, #17
 8007968:	2100      	movs	r1, #0
 800796a:	48c0      	ldr	r0, [pc, #768]	@ (8007c6c <resetMenuTexts+0x38c>)
 800796c:	f006 fc86 	bl	800e27c <memset>
    memset(calismaSekliText, 0, 17);
 8007970:	2211      	movs	r2, #17
 8007972:	2100      	movs	r1, #0
 8007974:	48be      	ldr	r0, [pc, #760]	@ (8007c70 <resetMenuTexts+0x390>)
 8007976:	f006 fc81 	bl	800e27c <memset>
    memset(devirmeYuruyusText, 0, 17);
 800797a:	2211      	movs	r2, #17
 800797c:	2100      	movs	r1, #0
 800797e:	48bd      	ldr	r0, [pc, #756]	@ (8007c74 <resetMenuTexts+0x394>)
 8007980:	f006 fc7c 	bl	800e27c <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007984:	2211      	movs	r2, #17
 8007986:	2100      	movs	r1, #0
 8007988:	48bb      	ldr	r0, [pc, #748]	@ (8007c78 <resetMenuTexts+0x398>)
 800798a:	f006 fc77 	bl	800e27c <memset>
    memset(basGonderText, 0, 17);
 800798e:	2211      	movs	r2, #17
 8007990:	2100      	movs	r1, #0
 8007992:	48ba      	ldr	r0, [pc, #744]	@ (8007c7c <resetMenuTexts+0x39c>)
 8007994:	f006 fc72 	bl	800e27c <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007998:	2211      	movs	r2, #17
 800799a:	2100      	movs	r1, #0
 800799c:	48b8      	ldr	r0, [pc, #736]	@ (8007c80 <resetMenuTexts+0x3a0>)
 800799e:	f006 fc6d 	bl	800e27c <memset>
    memset(pasifText, 0, 17);
 80079a2:	2211      	movs	r2, #17
 80079a4:	2100      	movs	r1, #0
 80079a6:	48b7      	ldr	r0, [pc, #732]	@ (8007c84 <resetMenuTexts+0x3a4>)
 80079a8:	f006 fc68 	bl	800e27c <memset>
    memset(aktifText, 0, 17);
 80079ac:	2211      	movs	r2, #17
 80079ae:	2100      	movs	r1, #0
 80079b0:	48b5      	ldr	r0, [pc, #724]	@ (8007c88 <resetMenuTexts+0x3a8>)
 80079b2:	f006 fc63 	bl	800e27c <memset>
    memset(yavaslamaLimitText, 0, 17);
 80079b6:	2211      	movs	r2, #17
 80079b8:	2100      	movs	r1, #0
 80079ba:	48b4      	ldr	r0, [pc, #720]	@ (8007c8c <resetMenuTexts+0x3ac>)
 80079bc:	f006 fc5e 	bl	800e27c <memset>
    memset(altLimitText, 0, 17);
 80079c0:	2211      	movs	r2, #17
 80079c2:	2100      	movs	r1, #0
 80079c4:	48b2      	ldr	r0, [pc, #712]	@ (8007c90 <resetMenuTexts+0x3b0>)
 80079c6:	f006 fc59 	bl	800e27c <memset>
    memset(basincSalteriText, 0, 17);
 80079ca:	2211      	movs	r2, #17
 80079cc:	2100      	movs	r1, #0
 80079ce:	48b1      	ldr	r0, [pc, #708]	@ (8007c94 <resetMenuTexts+0x3b4>)
 80079d0:	f006 fc54 	bl	800e27c <memset>
    memset(kapiSecimleriText, 0, 17);
 80079d4:	2211      	movs	r2, #17
 80079d6:	2100      	movs	r1, #0
 80079d8:	48af      	ldr	r0, [pc, #700]	@ (8007c98 <resetMenuTexts+0x3b8>)
 80079da:	f006 fc4f 	bl	800e27c <memset>
    memset(katKapisiAktifText, 0, 17);
 80079de:	2211      	movs	r2, #17
 80079e0:	2100      	movs	r1, #0
 80079e2:	48ae      	ldr	r0, [pc, #696]	@ (8007c9c <resetMenuTexts+0x3bc>)
 80079e4:	f006 fc4a 	bl	800e27c <memset>
    memset(tablaKapiAktifText, 0, 17);
 80079e8:	2211      	movs	r2, #17
 80079ea:	2100      	movs	r1, #0
 80079ec:	48ac      	ldr	r0, [pc, #688]	@ (8007ca0 <resetMenuTexts+0x3c0>)
 80079ee:	f006 fc45 	bl	800e27c <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80079f2:	2211      	movs	r2, #17
 80079f4:	2100      	movs	r1, #0
 80079f6:	48ab      	ldr	r0, [pc, #684]	@ (8007ca4 <resetMenuTexts+0x3c4>)
 80079f8:	f006 fc40 	bl	800e27c <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80079fc:	2211      	movs	r2, #17
 80079fe:	2100      	movs	r1, #0
 8007a00:	48a9      	ldr	r0, [pc, #676]	@ (8007ca8 <resetMenuTexts+0x3c8>)
 8007a02:	f006 fc3b 	bl	800e27c <memset>
    memset(kapiButonuESPText, 0, 17);
 8007a06:	2211      	movs	r2, #17
 8007a08:	2100      	movs	r1, #0
 8007a0a:	48a8      	ldr	r0, [pc, #672]	@ (8007cac <resetMenuTexts+0x3cc>)
 8007a0c:	f006 fc36 	bl	800e27c <memset>
    memset(katButonuEXTText, 0, 17);
 8007a10:	2211      	movs	r2, #17
 8007a12:	2100      	movs	r1, #0
 8007a14:	48a6      	ldr	r0, [pc, #664]	@ (8007cb0 <resetMenuTexts+0x3d0>)
 8007a16:	f006 fc31 	bl	800e27c <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007a1a:	2211      	movs	r2, #17
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	48a5      	ldr	r0, [pc, #660]	@ (8007cb4 <resetMenuTexts+0x3d4>)
 8007a20:	f006 fc2c 	bl	800e27c <memset>
    memset(butonKontrolluText, 0, 17);
 8007a24:	2211      	movs	r2, #17
 8007a26:	2100      	movs	r1, #0
 8007a28:	48a3      	ldr	r0, [pc, #652]	@ (8007cb8 <resetMenuTexts+0x3d8>)
 8007a2a:	f006 fc27 	bl	800e27c <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007a2e:	2211      	movs	r2, #17
 8007a30:	2100      	movs	r1, #0
 8007a32:	48a2      	ldr	r0, [pc, #648]	@ (8007cbc <resetMenuTexts+0x3dc>)
 8007a34:	f006 fc22 	bl	800e27c <memset>
    memset(kacSaniyeText, 0, 17);
 8007a38:	2211      	movs	r2, #17
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	48a0      	ldr	r0, [pc, #640]	@ (8007cc0 <resetMenuTexts+0x3e0>)
 8007a3e:	f006 fc1d 	bl	800e27c <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007a42:	2211      	movs	r2, #17
 8007a44:	2100      	movs	r1, #0
 8007a46:	489f      	ldr	r0, [pc, #636]	@ (8007cc4 <resetMenuTexts+0x3e4>)
 8007a48:	f006 fc18 	bl	800e27c <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	2100      	movs	r1, #0
 8007a50:	489d      	ldr	r0, [pc, #628]	@ (8007cc8 <resetMenuTexts+0x3e8>)
 8007a52:	f006 fc13 	bl	800e27c <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007a56:	2211      	movs	r2, #17
 8007a58:	2100      	movs	r1, #0
 8007a5a:	489c      	ldr	r0, [pc, #624]	@ (8007ccc <resetMenuTexts+0x3ec>)
 8007a5c:	f006 fc0e 	bl	800e27c <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007a60:	2211      	movs	r2, #17
 8007a62:	2100      	movs	r1, #0
 8007a64:	489a      	ldr	r0, [pc, #616]	@ (8007cd0 <resetMenuTexts+0x3f0>)
 8007a66:	f006 fc09 	bl	800e27c <memset>
    memset(birinciKattaAcText, 0, 17);
 8007a6a:	2211      	movs	r2, #17
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4899      	ldr	r0, [pc, #612]	@ (8007cd4 <resetMenuTexts+0x3f4>)
 8007a70:	f006 fc04 	bl	800e27c <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007a74:	2211      	movs	r2, #17
 8007a76:	2100      	movs	r1, #0
 8007a78:	4897      	ldr	r0, [pc, #604]	@ (8007cd8 <resetMenuTexts+0x3f8>)
 8007a7a:	f006 fbff 	bl	800e27c <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007a7e:	2211      	movs	r2, #17
 8007a80:	2100      	movs	r1, #0
 8007a82:	4896      	ldr	r0, [pc, #600]	@ (8007cdc <resetMenuTexts+0x3fc>)
 8007a84:	f006 fbfa 	bl	800e27c <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007a88:	2211      	movs	r2, #17
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4894      	ldr	r0, [pc, #592]	@ (8007ce0 <resetMenuTexts+0x400>)
 8007a8e:	f006 fbf5 	bl	800e27c <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007a92:	2211      	movs	r2, #17
 8007a94:	2100      	movs	r1, #0
 8007a96:	4893      	ldr	r0, [pc, #588]	@ (8007ce4 <resetMenuTexts+0x404>)
 8007a98:	f006 fbf0 	bl	800e27c <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007a9c:	2211      	movs	r2, #17
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4891      	ldr	r0, [pc, #580]	@ (8007ce8 <resetMenuTexts+0x408>)
 8007aa2:	f006 fbeb 	bl	800e27c <memset>
    memset(devirmeAktifText, 0, 17);
 8007aa6:	2211      	movs	r2, #17
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4890      	ldr	r0, [pc, #576]	@ (8007cec <resetMenuTexts+0x40c>)
 8007aac:	f006 fbe6 	bl	800e27c <memset>
    memset(yuruyusAktifText, 0, 17);
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	488e      	ldr	r0, [pc, #568]	@ (8007cf0 <resetMenuTexts+0x410>)
 8007ab6:	f006 fbe1 	bl	800e27c <memset>
    memset(devirmeYukariText, 0, 17);
 8007aba:	2211      	movs	r2, #17
 8007abc:	2100      	movs	r1, #0
 8007abe:	488d      	ldr	r0, [pc, #564]	@ (8007cf4 <resetMenuTexts+0x414>)
 8007ac0:	f006 fbdc 	bl	800e27c <memset>
    memset(yuruyusIleriText, 0, 17);
 8007ac4:	2211      	movs	r2, #17
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	488b      	ldr	r0, [pc, #556]	@ (8007cf8 <resetMenuTexts+0x418>)
 8007aca:	f006 fbd7 	bl	800e27c <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007ace:	2211      	movs	r2, #17
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	488a      	ldr	r0, [pc, #552]	@ (8007cfc <resetMenuTexts+0x41c>)
 8007ad4:	f006 fbd2 	bl	800e27c <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007ad8:	2211      	movs	r2, #17
 8007ada:	2100      	movs	r1, #0
 8007adc:	4888      	ldr	r0, [pc, #544]	@ (8007d00 <resetMenuTexts+0x420>)
 8007ade:	f006 fbcd 	bl	800e27c <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007ae2:	2211      	movs	r2, #17
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4887      	ldr	r0, [pc, #540]	@ (8007d04 <resetMenuTexts+0x424>)
 8007ae8:	f006 fbc8 	bl	800e27c <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007aec:	2211      	movs	r2, #17
 8007aee:	2100      	movs	r1, #0
 8007af0:	4885      	ldr	r0, [pc, #532]	@ (8007d08 <resetMenuTexts+0x428>)
 8007af2:	f006 fbc3 	bl	800e27c <memset>
    memset(tekTesirText, 0, 17);
 8007af6:	2211      	movs	r2, #17
 8007af8:	2100      	movs	r1, #0
 8007afa:	4884      	ldr	r0, [pc, #528]	@ (8007d0c <resetMenuTexts+0x42c>)
 8007afc:	f006 fbbe 	bl	800e27c <memset>
    memset(ciftTesirText, 0, 17);
 8007b00:	2211      	movs	r2, #17
 8007b02:	2100      	movs	r1, #0
 8007b04:	4882      	ldr	r0, [pc, #520]	@ (8007d10 <resetMenuTexts+0x430>)
 8007b06:	f006 fbb9 	bl	800e27c <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007b0a:	2211      	movs	r2, #17
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4881      	ldr	r0, [pc, #516]	@ (8007d14 <resetMenuTexts+0x434>)
 8007b10:	f006 fbb4 	bl	800e27c <memset>
    memset(yukariValfSureText, 0, 17);
 8007b14:	2211      	movs	r2, #17
 8007b16:	2100      	movs	r1, #0
 8007b18:	487f      	ldr	r0, [pc, #508]	@ (8007d18 <resetMenuTexts+0x438>)
 8007b1a:	f006 fbaf 	bl	800e27c <memset>
    memset(asagiValfSureText, 0, 17);
 8007b1e:	2211      	movs	r2, #17
 8007b20:	2100      	movs	r1, #0
 8007b22:	487e      	ldr	r0, [pc, #504]	@ (8007d1c <resetMenuTexts+0x43c>)
 8007b24:	f006 fbaa 	bl	800e27c <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007b28:	2211      	movs	r2, #17
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	487c      	ldr	r0, [pc, #496]	@ (8007d20 <resetMenuTexts+0x440>)
 8007b2e:	f006 fba5 	bl	800e27c <memset>
    memset(ileriValfSureText, 0, 17);
 8007b32:	2211      	movs	r2, #17
 8007b34:	2100      	movs	r1, #0
 8007b36:	487b      	ldr	r0, [pc, #492]	@ (8007d24 <resetMenuTexts+0x444>)
 8007b38:	f006 fba0 	bl	800e27c <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007b3c:	2211      	movs	r2, #17
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4879      	ldr	r0, [pc, #484]	@ (8007d28 <resetMenuTexts+0x448>)
 8007b42:	f006 fb9b 	bl	800e27c <memset>
    memset(geriValfSureText, 0, 17);
 8007b46:	2211      	movs	r2, #17
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4878      	ldr	r0, [pc, #480]	@ (8007d2c <resetMenuTexts+0x44c>)
 8007b4c:	f006 fb96 	bl	800e27c <memset>
    memset(calismaSuresiText, 0, 17);
 8007b50:	2211      	movs	r2, #17
 8007b52:	2100      	movs	r1, #0
 8007b54:	4876      	ldr	r0, [pc, #472]	@ (8007d30 <resetMenuTexts+0x450>)
 8007b56:	f006 fb91 	bl	800e27c <memset>
    memset(calismaSayisiText, 0, 17);
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4875      	ldr	r0, [pc, #468]	@ (8007d34 <resetMenuTexts+0x454>)
 8007b60:	f006 fb8c 	bl	800e27c <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007b64:	2211      	movs	r2, #17
 8007b66:	2100      	movs	r1, #0
 8007b68:	4873      	ldr	r0, [pc, #460]	@ (8007d38 <resetMenuTexts+0x458>)
 8007b6a:	f006 fb87 	bl	800e27c <memset>
    memset(dilSecimText, 0, 17);
 8007b6e:	2211      	movs	r2, #17
 8007b70:	2100      	movs	r1, #0
 8007b72:	4872      	ldr	r0, [pc, #456]	@ (8007d3c <resetMenuTexts+0x45c>)
 8007b74:	f006 fb82 	bl	800e27c <memset>
    memset(secilenDilText, 0, 17);
 8007b78:	2211      	movs	r2, #17
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4870      	ldr	r0, [pc, #448]	@ (8007d40 <resetMenuTexts+0x460>)
 8007b7e:	f006 fb7d 	bl	800e27c <memset>
    memset(menudenCikisText, 0, 17);
 8007b82:	2211      	movs	r2, #17
 8007b84:	2100      	movs	r1, #0
 8007b86:	486f      	ldr	r0, [pc, #444]	@ (8007d44 <resetMenuTexts+0x464>)
 8007b88:	f006 fb78 	bl	800e27c <memset>
    memset(enteraBasinizText, 0, 17);
 8007b8c:	2211      	movs	r2, #17
 8007b8e:	2100      	movs	r1, #0
 8007b90:	486d      	ldr	r0, [pc, #436]	@ (8007d48 <resetMenuTexts+0x468>)
 8007b92:	f006 fb73 	bl	800e27c <memset>
    memset(hataKoduText, 0, 17);
 8007b96:	2211      	movs	r2, #17
 8007b98:	2100      	movs	r1, #0
 8007b9a:	486c      	ldr	r0, [pc, #432]	@ (8007d4c <resetMenuTexts+0x46c>)
 8007b9c:	f006 fb6e 	bl	800e27c <memset>
    memset(dataSynchText, 0, 17);
 8007ba0:	2211      	movs	r2, #17
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	486a      	ldr	r0, [pc, #424]	@ (8007d50 <resetMenuTexts+0x470>)
 8007ba6:	f006 fb69 	bl	800e27c <memset>
    memset(dataSynch2Text, 0, 17);
 8007baa:	2211      	movs	r2, #17
 8007bac:	2100      	movs	r1, #0
 8007bae:	4869      	ldr	r0, [pc, #420]	@ (8007d54 <resetMenuTexts+0x474>)
 8007bb0:	f006 fb64 	bl	800e27c <memset>
    memset(mustBeUniqueText, 0, 17);
 8007bb4:	2211      	movs	r2, #17
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4867      	ldr	r0, [pc, #412]	@ (8007d58 <resetMenuTexts+0x478>)
 8007bba:	f006 fb5f 	bl	800e27c <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4866      	ldr	r0, [pc, #408]	@ (8007d5c <resetMenuTexts+0x47c>)
 8007bc4:	f006 fb5a 	bl	800e27c <memset>
    memset(mustBe12Text, 0, 17);
 8007bc8:	2211      	movs	r2, #17
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4864      	ldr	r0, [pc, #400]	@ (8007d60 <resetMenuTexts+0x480>)
 8007bce:	f006 fb55 	bl	800e27c <memset>
    memset(mustBe122Text, 0, 17);
 8007bd2:	2211      	movs	r2, #17
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4863      	ldr	r0, [pc, #396]	@ (8007d64 <resetMenuTexts+0x484>)
 8007bd8:	f006 fb50 	bl	800e27c <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007bdc:	2211      	movs	r2, #17
 8007bde:	2100      	movs	r1, #0
 8007be0:	4861      	ldr	r0, [pc, #388]	@ (8007d68 <resetMenuTexts+0x488>)
 8007be2:	f006 fb4b 	bl	800e27c <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007be6:	2211      	movs	r2, #17
 8007be8:	2100      	movs	r1, #0
 8007bea:	4860      	ldr	r0, [pc, #384]	@ (8007d6c <resetMenuTexts+0x48c>)
 8007bec:	f006 fb46 	bl	800e27c <memset>
    memset(passExceedErrorText, 0, 17);
 8007bf0:	2211      	movs	r2, #17
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	485e      	ldr	r0, [pc, #376]	@ (8007d70 <resetMenuTexts+0x490>)
 8007bf6:	f006 fb41 	bl	800e27c <memset>
    memset(passExceedError2Text, 0, 17);
 8007bfa:	2211      	movs	r2, #17
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	485d      	ldr	r0, [pc, #372]	@ (8007d74 <resetMenuTexts+0x494>)
 8007c00:	f006 fb3c 	bl	800e27c <memset>
    memset(dataYazildiText, 0, 17);
 8007c04:	2211      	movs	r2, #17
 8007c06:	2100      	movs	r1, #0
 8007c08:	485b      	ldr	r0, [pc, #364]	@ (8007d78 <resetMenuTexts+0x498>)
 8007c0a:	f006 fb37 	bl	800e27c <memset>
    memset(dataOkunuyorText, 0, 17);
 8007c0e:	2211      	movs	r2, #17
 8007c10:	2100      	movs	r1, #0
 8007c12:	485a      	ldr	r0, [pc, #360]	@ (8007d7c <resetMenuTexts+0x49c>)
 8007c14:	f006 fb32 	bl	800e27c <memset>
    memset(dataOkunduText, 0, 17);
 8007c18:	2211      	movs	r2, #17
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4858      	ldr	r0, [pc, #352]	@ (8007d80 <resetMenuTexts+0x4a0>)
 8007c1e:	f006 fb2d 	bl	800e27c <memset>
    memset(degerKaydedildiText, 0, 17);
 8007c22:	2211      	movs	r2, #17
 8007c24:	2100      	movs	r1, #0
 8007c26:	4857      	ldr	r0, [pc, #348]	@ (8007d84 <resetMenuTexts+0x4a4>)
 8007c28:	f006 fb28 	bl	800e27c <memset>
    memset(errorCodeText, 0, 17);
 8007c2c:	2211      	movs	r2, #17
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4855      	ldr	r0, [pc, #340]	@ (8007d88 <resetMenuTexts+0x4a8>)
 8007c32:	f006 fb23 	bl	800e27c <memset>
 8007c36:	e0a9      	b.n	8007d8c <resetMenuTexts+0x4ac>
 8007c38:	20001824 	.word	0x20001824
 8007c3c:	20001838 	.word	0x20001838
 8007c40:	2000184c 	.word	0x2000184c
 8007c44:	20001860 	.word	0x20001860
 8007c48:	20001874 	.word	0x20001874
 8007c4c:	20001888 	.word	0x20001888
 8007c50:	2000189c 	.word	0x2000189c
 8007c54:	200018b0 	.word	0x200018b0
 8007c58:	200018c4 	.word	0x200018c4
 8007c5c:	200018d8 	.word	0x200018d8
 8007c60:	200018ec 	.word	0x200018ec
 8007c64:	20001900 	.word	0x20001900
 8007c68:	20001914 	.word	0x20001914
 8007c6c:	20001928 	.word	0x20001928
 8007c70:	2000193c 	.word	0x2000193c
 8007c74:	20001950 	.word	0x20001950
 8007c78:	20001964 	.word	0x20001964
 8007c7c:	20001978 	.word	0x20001978
 8007c80:	2000198c 	.word	0x2000198c
 8007c84:	200019a0 	.word	0x200019a0
 8007c88:	200019b4 	.word	0x200019b4
 8007c8c:	200019c8 	.word	0x200019c8
 8007c90:	200019dc 	.word	0x200019dc
 8007c94:	200019f0 	.word	0x200019f0
 8007c98:	20001a04 	.word	0x20001a04
 8007c9c:	20001a18 	.word	0x20001a18
 8007ca0:	20001a2c 	.word	0x20001a2c
 8007ca4:	20001a40 	.word	0x20001a40
 8007ca8:	20001a54 	.word	0x20001a54
 8007cac:	20001a68 	.word	0x20001a68
 8007cb0:	20001a7c 	.word	0x20001a7c
 8007cb4:	20001a90 	.word	0x20001a90
 8007cb8:	20001aa4 	.word	0x20001aa4
 8007cbc:	20001ab8 	.word	0x20001ab8
 8007cc0:	20001acc 	.word	0x20001acc
 8007cc4:	20001ae0 	.word	0x20001ae0
 8007cc8:	20001af4 	.word	0x20001af4
 8007ccc:	20001b08 	.word	0x20001b08
 8007cd0:	20001b1c 	.word	0x20001b1c
 8007cd4:	20001b30 	.word	0x20001b30
 8007cd8:	20001b44 	.word	0x20001b44
 8007cdc:	20001b58 	.word	0x20001b58
 8007ce0:	20001b6c 	.word	0x20001b6c
 8007ce4:	20001b80 	.word	0x20001b80
 8007ce8:	20001b94 	.word	0x20001b94
 8007cec:	20001ba8 	.word	0x20001ba8
 8007cf0:	20001bbc 	.word	0x20001bbc
 8007cf4:	20001bd0 	.word	0x20001bd0
 8007cf8:	20001be4 	.word	0x20001be4
 8007cfc:	20001bf8 	.word	0x20001bf8
 8007d00:	20001c0c 	.word	0x20001c0c
 8007d04:	20001c20 	.word	0x20001c20
 8007d08:	20001c34 	.word	0x20001c34
 8007d0c:	20001c48 	.word	0x20001c48
 8007d10:	20001c5c 	.word	0x20001c5c
 8007d14:	20001c70 	.word	0x20001c70
 8007d18:	20001c84 	.word	0x20001c84
 8007d1c:	20001c98 	.word	0x20001c98
 8007d20:	20001cac 	.word	0x20001cac
 8007d24:	20001cc0 	.word	0x20001cc0
 8007d28:	20001cd4 	.word	0x20001cd4
 8007d2c:	20001ce8 	.word	0x20001ce8
 8007d30:	20001cfc 	.word	0x20001cfc
 8007d34:	20001d10 	.word	0x20001d10
 8007d38:	20001d24 	.word	0x20001d24
 8007d3c:	20001d38 	.word	0x20001d38
 8007d40:	20001d4c 	.word	0x20001d4c
 8007d44:	20001d60 	.word	0x20001d60
 8007d48:	20001d74 	.word	0x20001d74
 8007d4c:	20001d88 	.word	0x20001d88
 8007d50:	20001d9c 	.word	0x20001d9c
 8007d54:	20001db0 	.word	0x20001db0
 8007d58:	20001dc4 	.word	0x20001dc4
 8007d5c:	20001dd8 	.word	0x20001dd8
 8007d60:	20001dec 	.word	0x20001dec
 8007d64:	20001e00 	.word	0x20001e00
 8007d68:	20001e14 	.word	0x20001e14
 8007d6c:	20001e28 	.word	0x20001e28
 8007d70:	20001e3c 	.word	0x20001e3c
 8007d74:	20001e50 	.word	0x20001e50
 8007d78:	20001e64 	.word	0x20001e64
 8007d7c:	20001e78 	.word	0x20001e78
 8007d80:	20001e8c 	.word	0x20001e8c
 8007d84:	20001ea0 	.word	0x20001ea0
 8007d88:	20001eb4 	.word	0x20001eb4
    memset(machineIDText, 0, 17);
 8007d8c:	2211      	movs	r2, #17
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <resetMenuTexts+0x4d8>)
 8007d92:	f006 fa73 	bl	800e27c <memset>
    memset(idConfirmationText, 0, 17);
 8007d96:	2211      	movs	r2, #17
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4808      	ldr	r0, [pc, #32]	@ (8007dbc <resetMenuTexts+0x4dc>)
 8007d9c:	f006 fa6e 	bl	800e27c <memset>
    memset(idConfirmationSubText, 0, 17);
 8007da0:	2211      	movs	r2, #17
 8007da2:	2100      	movs	r1, #0
 8007da4:	4806      	ldr	r0, [pc, #24]	@ (8007dc0 <resetMenuTexts+0x4e0>)
 8007da6:	f006 fa69 	bl	800e27c <memset>
    memset(wifiConfirmationText, 0, 17);
 8007daa:	2211      	movs	r2, #17
 8007dac:	2100      	movs	r1, #0
 8007dae:	4805      	ldr	r0, [pc, #20]	@ (8007dc4 <resetMenuTexts+0x4e4>)
 8007db0:	f006 fa64 	bl	800e27c <memset>
}
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20001ec8 	.word	0x20001ec8
 8007dbc:	20001edc 	.word	0x20001edc
 8007dc0:	20001ef0 	.word	0x20001ef0
 8007dc4:	20001f04 	.word	0x20001f04

08007dc8 <ESP8266_Init>:
#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

// ESP8266'yı WiFi ağına bağlamak için kullanılan fonksiyon
void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
    Wifi_FactoryReset(huart);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7f8 ff0f 	bl	8000bf8 <Wifi_FactoryReset>
    HAL_Delay(1000);
 8007dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007dde:	f001 ffa7 	bl	8009d30 <HAL_Delay>

    Wifi_Restart(huart);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7f8 fee6 	bl	8000bb4 <Wifi_Restart>
    HAL_Delay(1000);
 8007de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007dec:	f001 ffa0 	bl	8009d30 <HAL_Delay>

    Wifi_Init(huart);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7f8 feb1 	bl	8000b58 <Wifi_Init>
    HAL_Delay(2000);
 8007df6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007dfa:	f001 ff99 	bl	8009d30 <HAL_Delay>

    Wifi_SetMode(huart, WifiMode_Station);
 8007dfe:	2101      	movs	r1, #1
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7f8 ff1b 	bl	8000c3c <Wifi_SetMode>
    HAL_Delay(2000);
 8007e06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007e0a:	f001 ff91 	bl	8009d30 <HAL_Delay>

    Wifi_Station_ConnectToAp(huart, (char *)wifiSS, (char *)wifiPA, NULL);
 8007e0e:	2300      	movs	r3, #0
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7f8 ff3f 	bl	8000c98 <Wifi_Station_ConnectToAp>
    HAL_Delay(2000);
 8007e1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007e1e:	f001 ff87 	bl	8009d30 <HAL_Delay>
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <sendMachineData>:
    Wifi_TcpIp_Close(huart, 0);
    HAL_Delay(2000);
}

// Makine verilerini sunucuya göndermek için kullanılan fonksiyon
void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8007e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2e:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8007e32:	af2c      	add	r7, sp, #176	@ 0xb0
 8007e34:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8007e38:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8007e3c:	6020      	str	r0, [r4, #0]
 8007e3e:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8007e42:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8007e46:	6001      	str	r1, [r0, #0]
 8007e48:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8007e4c:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8007e50:	600a      	str	r2, [r1, #0]
 8007e52:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8007e56:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8007e5a:	6013      	str	r3, [r2, #0]
    char local_txA[1500];
    char local_txB[50];
    int len;

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8007e5c:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8007e60:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8007e64:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8007e68:	220c      	movs	r2, #12
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	f006 f9dd 	bl	800e22a <strncpy>
    subMachineID[12] = '\0';
 8007e70:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8007e74:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8007e78:	2200      	movs	r2, #0
 8007e7a:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8007e7c:	4a9d      	ldr	r2, [pc, #628]	@ (80080f4 <sendMachineData+0x2c8>)
 8007e7e:	499e      	ldr	r1, [pc, #632]	@ (80080f8 <sendMachineData+0x2cc>)
 8007e80:	489e      	ldr	r0, [pc, #632]	@ (80080fc <sendMachineData+0x2d0>)
 8007e82:	f006 f961 	bl	800e148 <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t *)bufferTX, strlen(bufferTX));
 8007e86:	489d      	ldr	r0, [pc, #628]	@ (80080fc <sendMachineData+0x2d0>)
 8007e88:	f7f8 f9cc 	bl	8000224 <strlen>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8007e94:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8007e98:	4998      	ldr	r1, [pc, #608]	@ (80080fc <sendMachineData+0x2d0>)
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	f005 f935 	bl	800d10a <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8007ea0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007ea4:	f001 ff44 	bl	8009d30 <HAL_Delay>

    sprintf(local_txA,
 8007ea8:	4b95      	ldr	r3, [pc, #596]	@ (8008100 <sendMachineData+0x2d4>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007eb0:	4b94      	ldr	r3, [pc, #592]	@ (8008104 <sendMachineData+0x2d8>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb8:	4b93      	ldr	r3, [pc, #588]	@ (8008108 <sendMachineData+0x2dc>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ec0:	4b92      	ldr	r3, [pc, #584]	@ (800810c <sendMachineData+0x2e0>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec8:	4b91      	ldr	r3, [pc, #580]	@ (8008110 <sendMachineData+0x2e4>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ece:	4b91      	ldr	r3, [pc, #580]	@ (8008114 <sendMachineData+0x2e8>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ed4:	4b90      	ldr	r3, [pc, #576]	@ (8008118 <sendMachineData+0x2ec>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	677b      	str	r3, [r7, #116]	@ 0x74
 8007eda:	4b90      	ldr	r3, [pc, #576]	@ (800811c <sendMachineData+0x2f0>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8008120 <sendMachineData+0x2f4>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ee6:	4b8f      	ldr	r3, [pc, #572]	@ (8008124 <sendMachineData+0x2f8>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eec:	4b8e      	ldr	r3, [pc, #568]	@ (8008128 <sendMachineData+0x2fc>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ef2:	4b8e      	ldr	r3, [pc, #568]	@ (800812c <sendMachineData+0x300>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8008130 <sendMachineData+0x304>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007efe:	4b8d      	ldr	r3, [pc, #564]	@ (8008134 <sendMachineData+0x308>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f04:	4b8c      	ldr	r3, [pc, #560]	@ (8008138 <sendMachineData+0x30c>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f0a:	4b8c      	ldr	r3, [pc, #560]	@ (800813c <sendMachineData+0x310>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f10:	4b8b      	ldr	r3, [pc, #556]	@ (8008140 <sendMachineData+0x314>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f16:	4b8b      	ldr	r3, [pc, #556]	@ (8008144 <sendMachineData+0x318>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8008148 <sendMachineData+0x31c>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f22:	4b8a      	ldr	r3, [pc, #552]	@ (800814c <sendMachineData+0x320>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f28:	4b89      	ldr	r3, [pc, #548]	@ (8008150 <sendMachineData+0x324>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2e:	4b89      	ldr	r3, [pc, #548]	@ (8008154 <sendMachineData+0x328>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f34:	4b88      	ldr	r3, [pc, #544]	@ (8008158 <sendMachineData+0x32c>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3a:	4b88      	ldr	r3, [pc, #544]	@ (800815c <sendMachineData+0x330>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f40:	4b87      	ldr	r3, [pc, #540]	@ (8008160 <sendMachineData+0x334>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f46:	4b87      	ldr	r3, [pc, #540]	@ (8008164 <sendMachineData+0x338>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f4c:	4b86      	ldr	r3, [pc, #536]	@ (8008168 <sendMachineData+0x33c>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f52:	4b86      	ldr	r3, [pc, #536]	@ (800816c <sendMachineData+0x340>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	623b      	str	r3, [r7, #32]
 8007f58:	4b85      	ldr	r3, [pc, #532]	@ (8008170 <sendMachineData+0x344>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	4b85      	ldr	r3, [pc, #532]	@ (8008174 <sendMachineData+0x348>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	61bb      	str	r3, [r7, #24]
        "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f64:	4b84      	ldr	r3, [pc, #528]	@ (8008178 <sendMachineData+0x34c>)
 8007f66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    sprintf(local_txA,
 8007f6a:	617b      	str	r3, [r7, #20]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f6c:	4b82      	ldr	r3, [pc, #520]	@ (8008178 <sendMachineData+0x34c>)
 8007f6e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    sprintf(local_txA,
 8007f72:	613b      	str	r3, [r7, #16]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f74:	4b80      	ldr	r3, [pc, #512]	@ (8008178 <sendMachineData+0x34c>)
 8007f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    sprintf(local_txA,
 8007f7a:	60fb      	str	r3, [r7, #12]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8008178 <sendMachineData+0x34c>)
 8007f7e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    sprintf(local_txA,
 8007f82:	60bb      	str	r3, [r7, #8]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f84:	4b7c      	ldr	r3, [pc, #496]	@ (8008178 <sendMachineData+0x34c>)
 8007f86:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    sprintf(local_txA,
 8007f8a:	607b      	str	r3, [r7, #4]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f8c:	4b7a      	ldr	r3, [pc, #488]	@ (8008178 <sendMachineData+0x34c>)
 8007f8e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    sprintf(local_txA,
 8007f92:	603b      	str	r3, [r7, #0]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f94:	4b78      	ldr	r3, [pc, #480]	@ (8008178 <sendMachineData+0x34c>)
 8007f96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    sprintf(local_txA,
 8007f9a:	461e      	mov	r6, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007f9c:	4b76      	ldr	r3, [pc, #472]	@ (8008178 <sendMachineData+0x34c>)
 8007f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    sprintf(local_txA,
 8007fa2:	4618      	mov	r0, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007fa4:	4b74      	ldr	r3, [pc, #464]	@ (8008178 <sendMachineData+0x34c>)
 8007fa6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    sprintf(local_txA,
 8007faa:	4619      	mov	r1, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8007fac:	4b72      	ldr	r3, [pc, #456]	@ (8008178 <sendMachineData+0x34c>)
 8007fae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    sprintf(local_txA,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8007fb8:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8007fbc:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8007fc0:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8007fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800817c <sendMachineData+0x350>)
 8007fc6:	932a      	str	r3, [sp, #168]	@ 0xa8
 8007fc8:	233c      	movs	r3, #60	@ 0x3c
 8007fca:	9329      	str	r3, [sp, #164]	@ 0xa4
 8007fcc:	9228      	str	r2, [sp, #160]	@ 0xa0
 8007fce:	9127      	str	r1, [sp, #156]	@ 0x9c
 8007fd0:	9026      	str	r0, [sp, #152]	@ 0x98
 8007fd2:	9625      	str	r6, [sp, #148]	@ 0x94
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	9224      	str	r2, [sp, #144]	@ 0x90
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	9222      	str	r2, [sp, #136]	@ 0x88
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	9221      	str	r2, [sp, #132]	@ 0x84
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	9220      	str	r2, [sp, #128]	@ 0x80
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	921e      	str	r2, [sp, #120]	@ 0x78
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	921d      	str	r2, [sp, #116]	@ 0x74
 8007ff4:	6a3a      	ldr	r2, [r7, #32]
 8007ff6:	921c      	str	r2, [sp, #112]	@ 0x70
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ffa:	921b      	str	r2, [sp, #108]	@ 0x6c
 8007ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ffe:	921a      	str	r2, [sp, #104]	@ 0x68
 8008000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008002:	9219      	str	r2, [sp, #100]	@ 0x64
 8008004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008006:	9218      	str	r2, [sp, #96]	@ 0x60
 8008008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800800a:	9217      	str	r2, [sp, #92]	@ 0x5c
 800800c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800800e:	9216      	str	r2, [sp, #88]	@ 0x58
 8008010:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008012:	9215      	str	r2, [sp, #84]	@ 0x54
 8008014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008016:	9214      	str	r2, [sp, #80]	@ 0x50
 8008018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800801a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800801c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008022:	9211      	str	r2, [sp, #68]	@ 0x44
 8008024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008026:	9210      	str	r2, [sp, #64]	@ 0x40
 8008028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800802a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800802c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800802e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008030:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008032:	920d      	str	r2, [sp, #52]	@ 0x34
 8008034:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008036:	920c      	str	r2, [sp, #48]	@ 0x30
 8008038:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800803a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800803c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800803e:	920a      	str	r2, [sp, #40]	@ 0x28
 8008040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008042:	9209      	str	r2, [sp, #36]	@ 0x24
 8008044:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008046:	9208      	str	r2, [sp, #32]
 8008048:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800804a:	9207      	str	r2, [sp, #28]
 800804c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800804e:	9206      	str	r2, [sp, #24]
 8008050:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008052:	9205      	str	r2, [sp, #20]
 8008054:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008058:	9204      	str	r2, [sp, #16]
 800805a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800805e:	9203      	str	r2, [sp, #12]
 8008060:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8008070:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	4662      	mov	r2, ip
 800807c:	4940      	ldr	r1, [pc, #256]	@ (8008180 <sendMachineData+0x354>)
 800807e:	4628      	mov	r0, r5
 8008080:	f006 f862 	bl	800e148 <siprintf>

    len = strlen(local_txA);
 8008084:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 f8cb 	bl	8000224 <strlen>
 800808e:	4603      	mov	r3, r0
 8008090:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8008094:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008098:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 800809c:	4939      	ldr	r1, [pc, #228]	@ (8008184 <sendMachineData+0x358>)
 800809e:	4618      	mov	r0, r3
 80080a0:	f006 f852 	bl	800e148 <siprintf>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txB, strlen(local_txB));
 80080a4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 f8bb 	bl	8000224 <strlen>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 80080b6:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 80080ba:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	f005 f823 	bl	800d10a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 80080c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80080c8:	f001 fe32 	bl	8009d30 <HAL_Delay>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txA, strlen(local_txA));
 80080cc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 f8a7 	bl	8000224 <strlen>
 80080d6:	4603      	mov	r3, r0
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 80080de:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 80080e2:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	f005 f80f 	bl	800d10a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 80080ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80080f0:	e04a      	b.n	8008188 <sendMachineData+0x35c>
 80080f2:	bf00      	nop
 80080f4:	0800ee84 	.word	0x0800ee84
 80080f8:	0800ee94 	.word	0x0800ee94
 80080fc:	20001728 	.word	0x20001728
 8008100:	200016cf 	.word	0x200016cf
 8008104:	200016c1 	.word	0x200016c1
 8008108:	200016c4 	.word	0x200016c4
 800810c:	200016c5 	.word	0x200016c5
 8008110:	200016c6 	.word	0x200016c6
 8008114:	200016cd 	.word	0x200016cd
 8008118:	200016c7 	.word	0x200016c7
 800811c:	200016c8 	.word	0x200016c8
 8008120:	200016cc 	.word	0x200016cc
 8008124:	200016c9 	.word	0x200016c9
 8008128:	200016d9 	.word	0x200016d9
 800812c:	200016ca 	.word	0x200016ca
 8008130:	200016da 	.word	0x200016da
 8008134:	200016cb 	.word	0x200016cb
 8008138:	200016db 	.word	0x200016db
 800813c:	200016ce 	.word	0x200016ce
 8008140:	200016d0 	.word	0x200016d0
 8008144:	200016d1 	.word	0x200016d1
 8008148:	200016d2 	.word	0x200016d2
 800814c:	200016d3 	.word	0x200016d3
 8008150:	200016d4 	.word	0x200016d4
 8008154:	200016d5 	.word	0x200016d5
 8008158:	200016d6 	.word	0x200016d6
 800815c:	200016d7 	.word	0x200016d7
 8008160:	200016d8 	.word	0x200016d8
 8008164:	200016dc 	.word	0x200016dc
 8008168:	200016de 	.word	0x200016de
 800816c:	200016b8 	.word	0x200016b8
 8008170:	200016b9 	.word	0x200016b9
 8008174:	200016e0 	.word	0x200016e0
 8008178:	20000fec 	.word	0x20000fec
 800817c:	0800f1e4 	.word	0x0800f1e4
 8008180:	0800eeb4 	.word	0x0800eeb4
 8008184:	0800f1f8 	.word	0x0800f1f8
 8008188:	f001 fdd2 	bl	8009d30 <HAL_Delay>
}
 800818c:	bf00      	nop
 800818e:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8008192:	46bd      	mov	sp, r7
 8008194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008196:	bf00      	nop

08008198 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800819e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80081a2:	f001 fdc5 	bl	8009d30 <HAL_Delay>
	int confirmationVal = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80081aa:	e012      	b.n	80081d2 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 80081ac:	4a12      	ldr	r2, [pc, #72]	@ (80081f8 <takeMachineIDWithConfirmation+0x60>)
 80081ae:	2101      	movs	r1, #1
 80081b0:	2001      	movs	r0, #1
 80081b2:	f001 f845 	bl	8009240 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 80081b6:	4a11      	ldr	r2, [pc, #68]	@ (80081fc <takeMachineIDWithConfirmation+0x64>)
 80081b8:	2101      	movs	r1, #1
 80081ba:	2002      	movs	r0, #2
 80081bc:	f001 f840 	bl	8009240 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 80081c0:	2102      	movs	r1, #2
 80081c2:	480f      	ldr	r0, [pc, #60]	@ (8008200 <takeMachineIDWithConfirmation+0x68>)
 80081c4:	f002 fb90 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 80081ce:	2301      	movs	r3, #1
 80081d0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0e9      	beq.n	80081ac <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 80081d8:	f000 f814 	bl	8008204 <takeMachineID>

	convertArrays(1);
 80081dc:	2001      	movs	r0, #1
 80081de:	f7f8 fb63 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 80081e2:	2032      	movs	r0, #50	@ 0x32
 80081e4:	f001 fda4 	bl	8009d30 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7f9 f8d7 	bl	800139c <printCredentials>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20001edc 	.word	0x20001edc
 80081fc:	20001ef0 	.word	0x20001ef0
 8008200:	40010800 	.word	0x40010800

08008204 <takeMachineID>:

void takeMachineID() {
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 800820a:	2001      	movs	r0, #1
 800820c:	f001 f876 	bl	80092fc <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008210:	220c      	movs	r2, #12
 8008212:	2100      	movs	r1, #0
 8008214:	48a6      	ldr	r0, [pc, #664]	@ (80084b0 <takeMachineID+0x2ac>)
 8008216:	f006 f831 	bl	800e27c <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800821a:	2305      	movs	r3, #5
 800821c:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800821e:	2303      	movs	r3, #3
 8008220:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008226:	4ba3      	ldr	r3, [pc, #652]	@ (80084b4 <takeMachineID+0x2b0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 800822c:	2100      	movs	r1, #0
 800822e:	2001      	movs	r0, #1
 8008230:	f7f8 ff44 	bl	80010bc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008234:	2108      	movs	r1, #8
 8008236:	48a0      	ldr	r0, [pc, #640]	@ (80084b8 <takeMachineID+0x2b4>)
 8008238:	f002 fb56 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800823c:	4603      	mov	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d12f      	bne.n	80082a2 <takeMachineID+0x9e>
        	lcd_cursor(0);
 8008242:	2000      	movs	r0, #0
 8008244:	f001 f85a 	bl	80092fc <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008248:	f000 fe34 	bl	8008eb4 <checkEEPROM4ID>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d00e      	beq.n	8008270 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008252:	4a9a      	ldr	r2, [pc, #616]	@ (80084bc <takeMachineID+0x2b8>)
 8008254:	2101      	movs	r1, #1
 8008256:	2001      	movs	r0, #1
 8008258:	f000 fff2 	bl	8009240 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 800825c:	4a98      	ldr	r2, [pc, #608]	@ (80084c0 <takeMachineID+0x2bc>)
 800825e:	2101      	movs	r1, #1
 8008260:	2002      	movs	r0, #2
 8008262:	f000 ffed 	bl	8009240 <lcd_print>
        		HAL_Delay(1250);
 8008266:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800826a:	f001 fd61 	bl	8009d30 <HAL_Delay>

        		goto mainSection;
 800826e:	e7cc      	b.n	800820a <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8008270:	f000 fe46 	bl	8008f00 <az5>
 8008274:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d103      	bne.n	8008284 <takeMachineID+0x80>
        		saveEEPROM(1);
 800827c:	2001      	movs	r0, #1
 800827e:	f7f8 fa11 	bl	80006a4 <saveEEPROM>
 8008282:	e00e      	b.n	80082a2 <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 8008284:	4a8f      	ldr	r2, [pc, #572]	@ (80084c4 <takeMachineID+0x2c0>)
 8008286:	2101      	movs	r1, #1
 8008288:	2001      	movs	r0, #1
 800828a:	f000 ffd9 	bl	8009240 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 800828e:	4a8e      	ldr	r2, [pc, #568]	@ (80084c8 <takeMachineID+0x2c4>)
 8008290:	2101      	movs	r1, #1
 8008292:	2002      	movs	r0, #2
 8008294:	f000 ffd4 	bl	8009240 <lcd_print>

        		HAL_Delay(500);
 8008298:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800829c:	f001 fd48 	bl	8009d30 <HAL_Delay>

        		goto mainSection;
 80082a0:	e7b3      	b.n	800820a <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80082a2:	2101      	movs	r1, #1
 80082a4:	4884      	ldr	r0, [pc, #528]	@ (80084b8 <takeMachineID+0x2b4>)
 80082a6:	f002 fb1f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d111      	bne.n	80082d4 <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2b07      	cmp	r3, #7
 80082b4:	d102      	bne.n	80082bc <takeMachineID+0xb8>
        		cursorPosition = 10;
 80082b6:	230a      	movs	r3, #10
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	e008      	b.n	80082ce <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2b0e      	cmp	r3, #14
 80082c0:	d102      	bne.n	80082c8 <takeMachineID+0xc4>
                cursorPosition = 3;
 80082c2:	2303      	movs	r3, #3
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	e002      	b.n	80082ce <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 80082ce:	2096      	movs	r0, #150	@ 0x96
 80082d0:	f001 fd2e 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80082d4:	2108      	movs	r1, #8
 80082d6:	487d      	ldr	r0, [pc, #500]	@ (80084cc <takeMachineID+0x2c8>)
 80082d8:	f002 fb06 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d111      	bne.n	8008306 <takeMachineID+0x102>
            if (cursorPosition == 3) {
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d102      	bne.n	80082ee <takeMachineID+0xea>
                cursorPosition = 14;
 80082e8:	230e      	movs	r3, #14
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	e008      	b.n	8008300 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b0a      	cmp	r3, #10
 80082f2:	d102      	bne.n	80082fa <takeMachineID+0xf6>
            	cursorPosition = 7;
 80082f4:	2307      	movs	r3, #7
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	e002      	b.n	8008300 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8008300:	20fa      	movs	r0, #250	@ 0xfa
 8008302:	f001 fd15 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008306:	2102      	movs	r1, #2
 8008308:	486b      	ldr	r0, [pc, #428]	@ (80084b8 <takeMachineID+0x2b4>)
 800830a:	f002 faed 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800830e:	4603      	mov	r3, r0
 8008310:	2b01      	cmp	r3, #1
 8008312:	f040 80a1 	bne.w	8008458 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d10a      	bne.n	8008332 <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 800831c:	4a64      	ldr	r2, [pc, #400]	@ (80084b0 <takeMachineID+0x2ac>)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	2230      	movs	r2, #48	@ 0x30
 8008324:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008326:	4a6a      	ldr	r2, [pc, #424]	@ (80084d0 <takeMachineID+0x2cc>)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4413      	add	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	e07c      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b04      	cmp	r3, #4
 8008336:	d10a      	bne.n	800834e <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 8008338:	4a5d      	ldr	r2, [pc, #372]	@ (80084b0 <takeMachineID+0x2ac>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	2231      	movs	r2, #49	@ 0x31
 8008340:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008342:	4a63      	ldr	r2, [pc, #396]	@ (80084d0 <takeMachineID+0x2cc>)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	2201      	movs	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e06e      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b05      	cmp	r3, #5
 8008352:	d10a      	bne.n	800836a <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 8008354:	4a56      	ldr	r2, [pc, #344]	@ (80084b0 <takeMachineID+0x2ac>)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	2232      	movs	r2, #50	@ 0x32
 800835c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800835e:	4a5c      	ldr	r2, [pc, #368]	@ (80084d0 <takeMachineID+0x2cc>)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4413      	add	r3, r2
 8008364:	2202      	movs	r2, #2
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e060      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b06      	cmp	r3, #6
 800836e:	d10a      	bne.n	8008386 <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8008370:	4a4f      	ldr	r2, [pc, #316]	@ (80084b0 <takeMachineID+0x2ac>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	2233      	movs	r2, #51	@ 0x33
 8008378:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800837a:	4a55      	ldr	r2, [pc, #340]	@ (80084d0 <takeMachineID+0x2cc>)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4413      	add	r3, r2
 8008380:	2203      	movs	r2, #3
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e052      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b07      	cmp	r3, #7
 800838a:	d10a      	bne.n	80083a2 <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 800838c:	4a48      	ldr	r2, [pc, #288]	@ (80084b0 <takeMachineID+0x2ac>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	2234      	movs	r2, #52	@ 0x34
 8008394:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008396:	4a4e      	ldr	r2, [pc, #312]	@ (80084d0 <takeMachineID+0x2cc>)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	2204      	movs	r2, #4
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e044      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b0a      	cmp	r3, #10
 80083a6:	d10a      	bne.n	80083be <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 80083a8:	4a41      	ldr	r2, [pc, #260]	@ (80084b0 <takeMachineID+0x2ac>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	2235      	movs	r2, #53	@ 0x35
 80083b0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80083b2:	4a47      	ldr	r2, [pc, #284]	@ (80084d0 <takeMachineID+0x2cc>)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	2205      	movs	r2, #5
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e036      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b0b      	cmp	r3, #11
 80083c2:	d10a      	bne.n	80083da <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 80083c4:	4a3a      	ldr	r2, [pc, #232]	@ (80084b0 <takeMachineID+0x2ac>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	2236      	movs	r2, #54	@ 0x36
 80083cc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80083ce:	4a40      	ldr	r2, [pc, #256]	@ (80084d0 <takeMachineID+0x2cc>)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4413      	add	r3, r2
 80083d4:	2206      	movs	r2, #6
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e028      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b0c      	cmp	r3, #12
 80083de:	d10a      	bne.n	80083f6 <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 80083e0:	4a33      	ldr	r2, [pc, #204]	@ (80084b0 <takeMachineID+0x2ac>)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	2237      	movs	r2, #55	@ 0x37
 80083e8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80083ea:	4a39      	ldr	r2, [pc, #228]	@ (80084d0 <takeMachineID+0x2cc>)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	2207      	movs	r2, #7
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e01a      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b0d      	cmp	r3, #13
 80083fa:	d10a      	bne.n	8008412 <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 80083fc:	4a2c      	ldr	r2, [pc, #176]	@ (80084b0 <takeMachineID+0x2ac>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	2238      	movs	r2, #56	@ 0x38
 8008404:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008406:	4a32      	ldr	r2, [pc, #200]	@ (80084d0 <takeMachineID+0x2cc>)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4413      	add	r3, r2
 800840c:	2208      	movs	r2, #8
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e00c      	b.n	800842c <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b0e      	cmp	r3, #14
 8008416:	d109      	bne.n	800842c <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 8008418:	4a25      	ldr	r2, [pc, #148]	@ (80084b0 <takeMachineID+0x2ac>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4413      	add	r3, r2
 800841e:	2239      	movs	r2, #57	@ 0x39
 8008420:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008422:	4a2b      	ldr	r2, [pc, #172]	@ (80084d0 <takeMachineID+0x2cc>)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4413      	add	r3, r2
 8008428:	2209      	movs	r2, #9
 800842a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	b2d9      	uxtb	r1, r3
 8008430:	4a1f      	ldr	r2, [pc, #124]	@ (80084b0 <takeMachineID+0x2ac>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	2001      	movs	r0, #1
 800843c:	f000 ff15 	bl	800926a <lcd_print_char>

        	writeLoc++;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	3301      	adds	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3301      	adds	r3, #1
 8008450:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8008452:	2096      	movs	r0, #150	@ 0x96
 8008454:	f001 fc6c 	bl	8009d30 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008458:	2104      	movs	r1, #4
 800845a:	4817      	ldr	r0, [pc, #92]	@ (80084b8 <takeMachineID+0x2b4>)
 800845c:	f002 fa44 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008460:	4603      	mov	r3, r0
 8008462:	2b01      	cmp	r3, #1
 8008464:	d14c      	bne.n	8008500 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 8008466:	4b12      	ldr	r3, [pc, #72]	@ (80084b0 <takeMachineID+0x2ac>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d045      	beq.n	80084fa <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 800846e:	4a10      	ldr	r2, [pc, #64]	@ (80084b0 <takeMachineID+0x2ac>)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008478:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <takeMachineID+0x2cc>)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b05      	cmp	r3, #5
 8008486:	dd03      	ble.n	8008490 <takeMachineID+0x28c>
                	writeLoc--;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	3b01      	subs	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e004      	b.n	800849a <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b04      	cmp	r3, #4
 8008494:	dc01      	bgt.n	800849a <takeMachineID+0x296>
                	writeLoc = 5;
 8008496:	2305      	movs	r3, #5
 8008498:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd19      	ble.n	80084d4 <takeMachineID+0x2d0>
                	arrayPos--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	60bb      	str	r3, [r7, #8]
 80084ac:	e01a      	b.n	80084e4 <takeMachineID+0x2e0>
 80084ae:	bf00      	nop
 80084b0:	20001064 	.word	0x20001064
 80084b4:	20000000 	.word	0x20000000
 80084b8:	40010800 	.word	0x40010800
 80084bc:	20001dec 	.word	0x20001dec
 80084c0:	20001e00 	.word	0x20001e00
 80084c4:	20001dc4 	.word	0x20001dc4
 80084c8:	20001dd8 	.word	0x20001dd8
 80084cc:	40011000 	.word	0x40011000
 80084d0:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da04      	bge.n	80084e4 <takeMachineID+0x2e0>
                	arrayPos = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 80084de:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <takeMachineID+0x30c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	3305      	adds	r3, #5
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4619      	mov	r1, r3
 80084ee:	2001      	movs	r0, #1
 80084f0:	f000 fedc 	bl	80092ac <lcd_delete_char>
                HAL_Delay(50);
 80084f4:	2032      	movs	r0, #50	@ 0x32
 80084f6:	f001 fc1b 	bl	8009d30 <HAL_Delay>
            }

            HAL_Delay(150);
 80084fa:	2096      	movs	r0, #150	@ 0x96
 80084fc:	f001 fc18 	bl	8009d30 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	4619      	mov	r1, r3
 8008506:	2002      	movs	r0, #2
 8008508:	f000 fe7b 	bl	8009202 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800850c:	e692      	b.n	8008234 <takeMachineID+0x30>
 800850e:	bf00      	nop
 8008510:	20000000 	.word	0x20000000

08008514 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800851a:	2301      	movs	r3, #1
 800851c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800851e:	4a1e      	ldr	r2, [pc, #120]	@ (8008598 <ssidConfirmation+0x84>)
 8008520:	2101      	movs	r1, #1
 8008522:	2001      	movs	r0, #1
 8008524:	f000 fe8c 	bl	8009240 <lcd_print>

	while(loopVal == 1) {
 8008528:	e012      	b.n	8008550 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800852a:	4a1c      	ldr	r2, [pc, #112]	@ (800859c <ssidConfirmation+0x88>)
 800852c:	2101      	movs	r1, #1
 800852e:	2002      	movs	r0, #2
 8008530:	f000 fe86 	bl	8009240 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008534:	2102      	movs	r1, #2
 8008536:	481a      	ldr	r0, [pc, #104]	@ (80085a0 <ssidConfirmation+0x8c>)
 8008538:	f002 f9d6 	bl	800a8e8 <HAL_GPIO_ReadPin>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <ssidConfirmation+0x32>
			loopVal = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008546:	4a17      	ldr	r2, [pc, #92]	@ (80085a4 <ssidConfirmation+0x90>)
 8008548:	2101      	movs	r1, #1
 800854a:	2001      	movs	r0, #1
 800854c:	f000 fe78 	bl	8009240 <lcd_print>
	while(loopVal == 1) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d0e9      	beq.n	800852a <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008556:	2000      	movs	r0, #0
 8008558:	f000 fed0 	bl	80092fc <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 800855c:	4811      	ldr	r0, [pc, #68]	@ (80085a4 <ssidConfirmation+0x90>)
 800855e:	f7f7 fe61 	bl	8000224 <strlen>
 8008562:	4603      	mov	r3, r0
 8008564:	2b14      	cmp	r3, #20
 8008566:	d90f      	bls.n	8008588 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008568:	4a0f      	ldr	r2, [pc, #60]	@ (80085a8 <ssidConfirmation+0x94>)
 800856a:	2101      	movs	r1, #1
 800856c:	2001      	movs	r0, #1
 800856e:	f000 fe67 	bl	8009240 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8008572:	4a0e      	ldr	r2, [pc, #56]	@ (80085ac <ssidConfirmation+0x98>)
 8008574:	2101      	movs	r1, #1
 8008576:	2002      	movs	r0, #2
 8008578:	f000 fe62 	bl	8009240 <lcd_print>
        HAL_Delay(1250);
 800857c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008580:	f001 fbd6 	bl	8009d30 <HAL_Delay>

        return 0;
 8008584:	2300      	movs	r3, #0
 8008586:	e003      	b.n	8008590 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008588:	2001      	movs	r0, #1
 800858a:	f7f8 f88b 	bl	80006a4 <saveEEPROM>

    	return 1;
 800858e:	2301      	movs	r3, #1
    }
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	0800f7a4 	.word	0x0800f7a4
 800859c:	20001f04 	.word	0x20001f04
 80085a0:	40010800 	.word	0x40010800
 80085a4:	20001070 	.word	0x20001070
 80085a8:	20001e14 	.word	0x20001e14
 80085ac:	20001e28 	.word	0x20001e28

080085b0 <takeWifiSSID>:

void takeWifiSSID() {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80085b6:	2001      	movs	r0, #1
 80085b8:	f000 fea0 	bl	80092fc <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80085bc:	2210      	movs	r2, #16
 80085be:	2100      	movs	r1, #0
 80085c0:	48a4      	ldr	r0, [pc, #656]	@ (8008854 <takeWifiSSID+0x2a4>)
 80085c2:	f005 fe5b 	bl	800e27c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80085c6:	2301      	movs	r3, #1
 80085c8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80085ca:	2307      	movs	r3, #7
 80085cc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80085ce:	2301      	movs	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80085d2:	2300      	movs	r3, #0
 80085d4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80085d6:	4ba0      	ldr	r3, [pc, #640]	@ (8008858 <takeWifiSSID+0x2a8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80085dc:	2101      	movs	r1, #1
 80085de:	2002      	movs	r0, #2
 80085e0:	f7f8 fd6c 	bl	80010bc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80085e4:	2108      	movs	r1, #8
 80085e6:	489d      	ldr	r0, [pc, #628]	@ (800885c <takeWifiSSID+0x2ac>)
 80085e8:	f002 f97e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d106      	bne.n	8008600 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80085f2:	f7ff ff8f 	bl	8008514 <ssidConfirmation>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f040 8126 	bne.w	800884a <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80085fe:	e7da      	b.n	80085b6 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008600:	2101      	movs	r1, #1
 8008602:	4896      	ldr	r0, [pc, #600]	@ (800885c <takeWifiSSID+0x2ac>)
 8008604:	f002 f970 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008608:	4603      	mov	r3, r0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d14d      	bne.n	80086aa <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b50      	cmp	r3, #80	@ 0x50
 8008612:	dd01      	ble.n	8008618 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b10      	cmp	r3, #16
 800861c:	d13f      	bne.n	800869e <takeWifiSSID+0xee>
            	if(page == 1) {
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d109      	bne.n	8008638 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8008624:	2301      	movs	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
            		page++;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	3301      	adds	r3, #1
 800862c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800862e:	2102      	movs	r1, #2
 8008630:	2002      	movs	r0, #2
 8008632:	f7f8 fd43 	bl	80010bc <printTemplate>
 8008636:	e035      	b.n	80086a4 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d109      	bne.n	8008652 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
            		page++;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3301      	adds	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008648:	2103      	movs	r1, #3
 800864a:	2002      	movs	r0, #2
 800864c:	f7f8 fd36 	bl	80010bc <printTemplate>
 8008650:	e028      	b.n	80086a4 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d109      	bne.n	800866c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008658:	2301      	movs	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
            		page++;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	3301      	adds	r3, #1
 8008660:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008662:	2104      	movs	r1, #4
 8008664:	2002      	movs	r0, #2
 8008666:	f7f8 fd29 	bl	80010bc <printTemplate>
 800866a:	e01b      	b.n	80086a4 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d109      	bne.n	8008686 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
            		page++;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	3301      	adds	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800867c:	2105      	movs	r1, #5
 800867e:	2002      	movs	r0, #2
 8008680:	f7f8 fd1c 	bl	80010bc <printTemplate>
 8008684:	e00e      	b.n	80086a4 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b05      	cmp	r3, #5
 800868a:	d10b      	bne.n	80086a4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 800868c:	2301      	movs	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008690:	2301      	movs	r3, #1
 8008692:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008694:	2101      	movs	r1, #1
 8008696:	2002      	movs	r0, #2
 8008698:	f7f8 fd10 	bl	80010bc <printTemplate>
 800869c:	e002      	b.n	80086a4 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80086a4:	2096      	movs	r0, #150	@ 0x96
 80086a6:	f001 fb43 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80086aa:	2108      	movs	r1, #8
 80086ac:	486c      	ldr	r0, [pc, #432]	@ (8008860 <takeWifiSSID+0x2b0>)
 80086ae:	f002 f91b 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d149      	bne.n	800874c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	dc01      	bgt.n	80086c2 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80086be:	2350      	movs	r3, #80	@ 0x50
 80086c0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d13b      	bne.n	8008740 <takeWifiSSID+0x190>
            	if(page == 1) {
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d108      	bne.n	80086e0 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80086ce:	2310      	movs	r3, #16
 80086d0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80086d2:	2305      	movs	r3, #5
 80086d4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80086d6:	2105      	movs	r1, #5
 80086d8:	2002      	movs	r0, #2
 80086da:	f7f8 fcef 	bl	80010bc <printTemplate>
 80086de:	e032      	b.n	8008746 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d108      	bne.n	80086f8 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80086e6:	2310      	movs	r3, #16
 80086e8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80086ee:	2101      	movs	r1, #1
 80086f0:	2002      	movs	r0, #2
 80086f2:	f7f8 fce3 	bl	80010bc <printTemplate>
 80086f6:	e026      	b.n	8008746 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d108      	bne.n	8008710 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80086fe:	2310      	movs	r3, #16
 8008700:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008702:	2302      	movs	r3, #2
 8008704:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008706:	2102      	movs	r1, #2
 8008708:	2002      	movs	r0, #2
 800870a:	f7f8 fcd7 	bl	80010bc <printTemplate>
 800870e:	e01a      	b.n	8008746 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b04      	cmp	r3, #4
 8008714:	d108      	bne.n	8008728 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8008716:	2310      	movs	r3, #16
 8008718:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800871a:	2303      	movs	r3, #3
 800871c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800871e:	2103      	movs	r1, #3
 8008720:	2002      	movs	r0, #2
 8008722:	f7f8 fccb 	bl	80010bc <printTemplate>
 8008726:	e00e      	b.n	8008746 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b05      	cmp	r3, #5
 800872c:	d10b      	bne.n	8008746 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 800872e:	2310      	movs	r3, #16
 8008730:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008732:	2304      	movs	r3, #4
 8008734:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008736:	2104      	movs	r1, #4
 8008738:	2002      	movs	r0, #2
 800873a:	f7f8 fcbf 	bl	80010bc <printTemplate>
 800873e:	e002      	b.n	8008746 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3b01      	subs	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008746:	2096      	movs	r0, #150	@ 0x96
 8008748:	f001 faf2 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800874c:	2102      	movs	r1, #2
 800874e:	4843      	ldr	r0, [pc, #268]	@ (800885c <takeWifiSSID+0x2ac>)
 8008750:	f002 f8ca 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008754:	4603      	mov	r3, r0
 8008756:	2b01      	cmp	r3, #1
 8008758:	d12f      	bne.n	80087ba <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	b2d9      	uxtb	r1, r3
 800875e:	4a41      	ldr	r2, [pc, #260]	@ (8008864 <takeWifiSSID+0x2b4>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4413      	add	r3, r2
 8008764:	460a      	mov	r2, r1
 8008766:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008768:	4a3f      	ldr	r2, [pc, #252]	@ (8008868 <takeWifiSSID+0x2b8>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	7819      	ldrb	r1, [r3, #0]
 8008770:	4a38      	ldr	r2, [pc, #224]	@ (8008854 <takeWifiSSID+0x2a4>)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	460a      	mov	r2, r1
 8008778:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	b2d9      	uxtb	r1, r3
 800877e:	4a3a      	ldr	r2, [pc, #232]	@ (8008868 <takeWifiSSID+0x2b8>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	2001      	movs	r0, #1
 800878a:	f000 fd6e 	bl	800926a <lcd_print_char>

            writeLoc++;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	3301      	adds	r3, #1
 8008798:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3301      	adds	r3, #1
 800879e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80087a0:	4a30      	ldr	r2, [pc, #192]	@ (8008864 <takeWifiSSID+0x2b4>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80087aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008854 <takeWifiSSID+0x2a4>)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4413      	add	r3, r2
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80087b4:	2096      	movs	r0, #150	@ 0x96
 80087b6:	f001 fabb 	bl	8009d30 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80087ba:	2104      	movs	r1, #4
 80087bc:	4827      	ldr	r0, [pc, #156]	@ (800885c <takeWifiSSID+0x2ac>)
 80087be:	f002 f893 	bl	800a8e8 <HAL_GPIO_ReadPin>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d139      	bne.n	800883c <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80087c8:	4b22      	ldr	r3, [pc, #136]	@ (8008854 <takeWifiSSID+0x2a4>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d032      	beq.n	8008836 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80087d0:	4a24      	ldr	r2, [pc, #144]	@ (8008864 <takeWifiSSID+0x2b4>)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80087da:	4a1e      	ldr	r2, [pc, #120]	@ (8008854 <takeWifiSSID+0x2a4>)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4413      	add	r3, r2
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b07      	cmp	r3, #7
 80087e8:	dd03      	ble.n	80087f2 <takeWifiSSID+0x242>
        			writeLoc--;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	e004      	b.n	80087fc <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b06      	cmp	r3, #6
 80087f6:	dc01      	bgt.n	80087fc <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80087f8:	2307      	movs	r3, #7
 80087fa:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd06      	ble.n	8008810 <takeWifiSSID+0x260>
        			arrayPosition--;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	3b01      	subs	r3, #1
 8008806:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3b01      	subs	r3, #1
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	e007      	b.n	8008820 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	da04      	bge.n	8008820 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800881a:	4b0f      	ldr	r3, [pc, #60]	@ (8008858 <takeWifiSSID+0x2a8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	3307      	adds	r3, #7
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	2001      	movs	r0, #1
 800882c:	f000 fd3e 	bl	80092ac <lcd_delete_char>
        		HAL_Delay(50);
 8008830:	2032      	movs	r0, #50	@ 0x32
 8008832:	f001 fa7d 	bl	8009d30 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008836:	2096      	movs	r0, #150	@ 0x96
 8008838:	f001 fa7a 	bl	8009d30 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4619      	mov	r1, r3
 8008842:	2002      	movs	r0, #2
 8008844:	f000 fcdd 	bl	8009202 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008848:	e6cc      	b.n	80085e4 <takeWifiSSID+0x34>
        		break;
 800884a:	bf00      	nop
    }
}
 800884c:	bf00      	nop
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20001070 	.word	0x20001070
 8008858:	20000004 	.word	0x20000004
 800885c:	40010800 	.word	0x40010800
 8008860:	40011000 	.word	0x40011000
 8008864:	20000fec 	.word	0x20000fec
 8008868:	20000018 	.word	0x20000018

0800886c <passConfirmation>:

uint8_t passConfirmation() {
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008872:	2301      	movs	r3, #1
 8008874:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008876:	4a1e      	ldr	r2, [pc, #120]	@ (80088f0 <passConfirmation+0x84>)
 8008878:	2101      	movs	r1, #1
 800887a:	2001      	movs	r0, #1
 800887c:	f000 fce0 	bl	8009240 <lcd_print>

	while(loopVal == 1) {
 8008880:	e012      	b.n	80088a8 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008882:	4a1c      	ldr	r2, [pc, #112]	@ (80088f4 <passConfirmation+0x88>)
 8008884:	2101      	movs	r1, #1
 8008886:	2002      	movs	r0, #2
 8008888:	f000 fcda 	bl	8009240 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800888c:	2102      	movs	r1, #2
 800888e:	481a      	ldr	r0, [pc, #104]	@ (80088f8 <passConfirmation+0x8c>)
 8008890:	f002 f82a 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008894:	4603      	mov	r3, r0
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <passConfirmation+0x32>
			loopVal = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 800889e:	4a17      	ldr	r2, [pc, #92]	@ (80088fc <passConfirmation+0x90>)
 80088a0:	2101      	movs	r1, #1
 80088a2:	2001      	movs	r0, #1
 80088a4:	f000 fccc 	bl	8009240 <lcd_print>
	while(loopVal == 1) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d0e9      	beq.n	8008882 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80088ae:	2000      	movs	r0, #0
 80088b0:	f000 fd24 	bl	80092fc <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80088b4:	4811      	ldr	r0, [pc, #68]	@ (80088fc <passConfirmation+0x90>)
 80088b6:	f7f7 fcb5 	bl	8000224 <strlen>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b14      	cmp	r3, #20
 80088be:	d90f      	bls.n	80088e0 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80088c0:	4a0f      	ldr	r2, [pc, #60]	@ (8008900 <passConfirmation+0x94>)
 80088c2:	2101      	movs	r1, #1
 80088c4:	2001      	movs	r0, #1
 80088c6:	f000 fcbb 	bl	8009240 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80088ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008904 <passConfirmation+0x98>)
 80088cc:	2101      	movs	r1, #1
 80088ce:	2002      	movs	r0, #2
 80088d0:	f000 fcb6 	bl	8009240 <lcd_print>
        HAL_Delay(1250);
 80088d4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80088d8:	f001 fa2a 	bl	8009d30 <HAL_Delay>

        return 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	e003      	b.n	80088e8 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80088e0:	2001      	movs	r0, #1
 80088e2:	f7f7 fedf 	bl	80006a4 <saveEEPROM>

    	return 1;
 80088e6:	2301      	movs	r3, #1
    }
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	0800f7a4 	.word	0x0800f7a4
 80088f4:	20001f04 	.word	0x20001f04
 80088f8:	40010800 	.word	0x40010800
 80088fc:	20001080 	.word	0x20001080
 8008900:	20001e3c 	.word	0x20001e3c
 8008904:	20001e50 	.word	0x20001e50

08008908 <takeWifiPass>:

void takeWifiPass() {
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800890e:	2001      	movs	r0, #1
 8008910:	f000 fcf4 	bl	80092fc <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008914:	2210      	movs	r2, #16
 8008916:	2100      	movs	r1, #0
 8008918:	48a4      	ldr	r0, [pc, #656]	@ (8008bac <takeWifiPass+0x2a4>)
 800891a:	f005 fcaf 	bl	800e27c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008922:	2307      	movs	r3, #7
 8008924:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008926:	2301      	movs	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800892a:	2300      	movs	r3, #0
 800892c:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800892e:	4ba0      	ldr	r3, [pc, #640]	@ (8008bb0 <takeWifiPass+0x2a8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008934:	2101      	movs	r1, #1
 8008936:	2003      	movs	r0, #3
 8008938:	f7f8 fbc0 	bl	80010bc <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800893c:	2108      	movs	r1, #8
 800893e:	489d      	ldr	r0, [pc, #628]	@ (8008bb4 <takeWifiPass+0x2ac>)
 8008940:	f001 ffd2 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008944:	4603      	mov	r3, r0
 8008946:	2b01      	cmp	r3, #1
 8008948:	d106      	bne.n	8008958 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800894a:	f7ff ff8f 	bl	800886c <passConfirmation>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 8126 	bne.w	8008ba2 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008956:	e7da      	b.n	800890e <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008958:	2101      	movs	r1, #1
 800895a:	4896      	ldr	r0, [pc, #600]	@ (8008bb4 <takeWifiPass+0x2ac>)
 800895c:	f001 ffc4 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008960:	4603      	mov	r3, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d14d      	bne.n	8008a02 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b50      	cmp	r3, #80	@ 0x50
 800896a:	dd01      	ble.n	8008970 <takeWifiPass+0x68>
        		cursorPosition = 1;
 800896c:	2301      	movs	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b10      	cmp	r3, #16
 8008974:	d13f      	bne.n	80089f6 <takeWifiPass+0xee>
            	if(page == 1) {
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d109      	bne.n	8008990 <takeWifiPass+0x88>
            		cursorPosition = 1;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	3301      	adds	r3, #1
 8008984:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008986:	2102      	movs	r1, #2
 8008988:	2003      	movs	r0, #3
 800898a:	f7f8 fb97 	bl	80010bc <printTemplate>
 800898e:	e035      	b.n	80089fc <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d109      	bne.n	80089aa <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
            		page++;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	3301      	adds	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80089a0:	2103      	movs	r1, #3
 80089a2:	2003      	movs	r0, #3
 80089a4:	f7f8 fb8a 	bl	80010bc <printTemplate>
 80089a8:	e028      	b.n	80089fc <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d109      	bne.n	80089c4 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
            		page++;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	3301      	adds	r3, #1
 80089b8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80089ba:	2104      	movs	r1, #4
 80089bc:	2003      	movs	r0, #3
 80089be:	f7f8 fb7d 	bl	80010bc <printTemplate>
 80089c2:	e01b      	b.n	80089fc <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d109      	bne.n	80089de <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
            		page++;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	3301      	adds	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80089d4:	2105      	movs	r1, #5
 80089d6:	2003      	movs	r0, #3
 80089d8:	f7f8 fb70 	bl	80010bc <printTemplate>
 80089dc:	e00e      	b.n	80089fc <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d10b      	bne.n	80089fc <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80089e4:	2301      	movs	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80089e8:	2301      	movs	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80089ec:	2101      	movs	r1, #1
 80089ee:	2003      	movs	r0, #3
 80089f0:	f7f8 fb64 	bl	80010bc <printTemplate>
 80089f4:	e002      	b.n	80089fc <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80089fc:	2096      	movs	r0, #150	@ 0x96
 80089fe:	f001 f997 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008a02:	2108      	movs	r1, #8
 8008a04:	486c      	ldr	r0, [pc, #432]	@ (8008bb8 <takeWifiPass+0x2b0>)
 8008a06:	f001 ff6f 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d149      	bne.n	8008aa4 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	dc01      	bgt.n	8008a1a <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008a16:	2350      	movs	r3, #80	@ 0x50
 8008a18:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d13b      	bne.n	8008a98 <takeWifiPass+0x190>
            	if(page == 1) {
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d108      	bne.n	8008a38 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8008a26:	2310      	movs	r3, #16
 8008a28:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008a2a:	2305      	movs	r3, #5
 8008a2c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008a2e:	2105      	movs	r1, #5
 8008a30:	2003      	movs	r0, #3
 8008a32:	f7f8 fb43 	bl	80010bc <printTemplate>
 8008a36:	e032      	b.n	8008a9e <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d108      	bne.n	8008a50 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008a3e:	2310      	movs	r3, #16
 8008a40:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008a42:	2301      	movs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008a46:	2101      	movs	r1, #1
 8008a48:	2003      	movs	r0, #3
 8008a4a:	f7f8 fb37 	bl	80010bc <printTemplate>
 8008a4e:	e026      	b.n	8008a9e <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d108      	bne.n	8008a68 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008a56:	2310      	movs	r3, #16
 8008a58:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008a5e:	2102      	movs	r1, #2
 8008a60:	2003      	movs	r0, #3
 8008a62:	f7f8 fb2b 	bl	80010bc <printTemplate>
 8008a66:	e01a      	b.n	8008a9e <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d108      	bne.n	8008a80 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008a6e:	2310      	movs	r3, #16
 8008a70:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008a72:	2303      	movs	r3, #3
 8008a74:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008a76:	2103      	movs	r1, #3
 8008a78:	2003      	movs	r0, #3
 8008a7a:	f7f8 fb1f 	bl	80010bc <printTemplate>
 8008a7e:	e00e      	b.n	8008a9e <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d10b      	bne.n	8008a9e <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008a86:	2310      	movs	r3, #16
 8008a88:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008a8a:	2304      	movs	r3, #4
 8008a8c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008a8e:	2104      	movs	r1, #4
 8008a90:	2003      	movs	r0, #3
 8008a92:	f7f8 fb13 	bl	80010bc <printTemplate>
 8008a96:	e002      	b.n	8008a9e <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008a9e:	2096      	movs	r0, #150	@ 0x96
 8008aa0:	f001 f946 	bl	8009d30 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4843      	ldr	r0, [pc, #268]	@ (8008bb4 <takeWifiPass+0x2ac>)
 8008aa8:	f001 ff1e 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d12f      	bne.n	8008b12 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	b2d9      	uxtb	r1, r3
 8008ab6:	4a41      	ldr	r2, [pc, #260]	@ (8008bbc <takeWifiPass+0x2b4>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4413      	add	r3, r2
 8008abc:	460a      	mov	r2, r1
 8008abe:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8008bc0 <takeWifiPass+0x2b8>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	7819      	ldrb	r1, [r3, #0]
 8008ac8:	4a38      	ldr	r2, [pc, #224]	@ (8008bac <takeWifiPass+0x2a4>)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4413      	add	r3, r2
 8008ace:	460a      	mov	r2, r1
 8008ad0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	b2d9      	uxtb	r1, r3
 8008ad6:	4a3a      	ldr	r2, [pc, #232]	@ (8008bc0 <takeWifiPass+0x2b8>)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f000 fbc2 	bl	800926a <lcd_print_char>

            writeLoc++;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3301      	adds	r3, #1
 8008af6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008af8:	4a30      	ldr	r2, [pc, #192]	@ (8008bbc <takeWifiPass+0x2b4>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008b02:	4a2a      	ldr	r2, [pc, #168]	@ (8008bac <takeWifiPass+0x2a4>)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4413      	add	r3, r2
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008b0c:	2096      	movs	r0, #150	@ 0x96
 8008b0e:	f001 f90f 	bl	8009d30 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008b12:	2104      	movs	r1, #4
 8008b14:	4827      	ldr	r0, [pc, #156]	@ (8008bb4 <takeWifiPass+0x2ac>)
 8008b16:	f001 fee7 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d139      	bne.n	8008b94 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008b20:	4b22      	ldr	r3, [pc, #136]	@ (8008bac <takeWifiPass+0x2a4>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d032      	beq.n	8008b8e <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008b28:	4a24      	ldr	r2, [pc, #144]	@ (8008bbc <takeWifiPass+0x2b4>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008b32:	4a1e      	ldr	r2, [pc, #120]	@ (8008bac <takeWifiPass+0x2a4>)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4413      	add	r3, r2
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b07      	cmp	r3, #7
 8008b40:	dd03      	ble.n	8008b4a <takeWifiPass+0x242>
        			writeLoc--;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	e004      	b.n	8008b54 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	dc01      	bgt.n	8008b54 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008b50:	2307      	movs	r3, #7
 8008b52:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dd06      	ble.n	8008b68 <takeWifiPass+0x260>
        			arrayPosition--;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	e007      	b.n	8008b78 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da04      	bge.n	8008b78 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008b72:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb0 <takeWifiPass+0x2a8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	4619      	mov	r1, r3
 8008b82:	2001      	movs	r0, #1
 8008b84:	f000 fb92 	bl	80092ac <lcd_delete_char>
        		HAL_Delay(50);
 8008b88:	2032      	movs	r0, #50	@ 0x32
 8008b8a:	f001 f8d1 	bl	8009d30 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008b8e:	2096      	movs	r0, #150	@ 0x96
 8008b90:	f001 f8ce 	bl	8009d30 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	4619      	mov	r1, r3
 8008b9a:	2002      	movs	r0, #2
 8008b9c:	f000 fb31 	bl	8009202 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008ba0:	e6cc      	b.n	800893c <takeWifiPass+0x34>
    	        break;
 8008ba2:	bf00      	nop
    }
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20001080 	.word	0x20001080
 8008bb0:	20000008 	.word	0x20000008
 8008bb4:	40010800 	.word	0x40010800
 8008bb8:	40011000 	.word	0x40011000
 8008bbc:	20000fec 	.word	0x20000fec
 8008bc0:	20000018 	.word	0x20000018

08008bc4 <mergeData>:

char* mergeData() {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b09c      	sub	sp, #112	@ 0x70
 8008bc8:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008bd2:	2229      	movs	r2, #41	@ 0x29
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f005 fb50 	bl	800e27c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8008d5c <mergeData+0x198>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	703b      	strb	r3, [r7, #0]
 8008be2:	4b5f      	ldr	r3, [pc, #380]	@ (8008d60 <mergeData+0x19c>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	707b      	strb	r3, [r7, #1]
 8008be8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d64 <mergeData+0x1a0>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	70bb      	strb	r3, [r7, #2]
 8008bee:	4b5e      	ldr	r3, [pc, #376]	@ (8008d68 <mergeData+0x1a4>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	70fb      	strb	r3, [r7, #3]
 8008bf4:	4b5d      	ldr	r3, [pc, #372]	@ (8008d6c <mergeData+0x1a8>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	713b      	strb	r3, [r7, #4]
 8008bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8008d70 <mergeData+0x1ac>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	717b      	strb	r3, [r7, #5]
 8008c00:	4b5c      	ldr	r3, [pc, #368]	@ (8008d74 <mergeData+0x1b0>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	71bb      	strb	r3, [r7, #6]
 8008c06:	4b5c      	ldr	r3, [pc, #368]	@ (8008d78 <mergeData+0x1b4>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8008d7c <mergeData+0x1b8>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	723b      	strb	r3, [r7, #8]
 8008c12:	4b5b      	ldr	r3, [pc, #364]	@ (8008d80 <mergeData+0x1bc>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	727b      	strb	r3, [r7, #9]
 8008c18:	4b5a      	ldr	r3, [pc, #360]	@ (8008d84 <mergeData+0x1c0>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	72bb      	strb	r3, [r7, #10]
 8008c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8008d88 <mergeData+0x1c4>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	72fb      	strb	r3, [r7, #11]
 8008c24:	4b59      	ldr	r3, [pc, #356]	@ (8008d8c <mergeData+0x1c8>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	733b      	strb	r3, [r7, #12]
 8008c2a:	4b59      	ldr	r3, [pc, #356]	@ (8008d90 <mergeData+0x1cc>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	737b      	strb	r3, [r7, #13]
 8008c30:	4b58      	ldr	r3, [pc, #352]	@ (8008d94 <mergeData+0x1d0>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	73bb      	strb	r3, [r7, #14]
 8008c36:	4b58      	ldr	r3, [pc, #352]	@ (8008d98 <mergeData+0x1d4>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	4b57      	ldr	r3, [pc, #348]	@ (8008d9c <mergeData+0x1d8>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	743b      	strb	r3, [r7, #16]
 8008c42:	4b57      	ldr	r3, [pc, #348]	@ (8008da0 <mergeData+0x1dc>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	747b      	strb	r3, [r7, #17]
 8008c48:	4b56      	ldr	r3, [pc, #344]	@ (8008da4 <mergeData+0x1e0>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	74bb      	strb	r3, [r7, #18]
 8008c4e:	4b56      	ldr	r3, [pc, #344]	@ (8008da8 <mergeData+0x1e4>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	74fb      	strb	r3, [r7, #19]
 8008c54:	4b55      	ldr	r3, [pc, #340]	@ (8008dac <mergeData+0x1e8>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	753b      	strb	r3, [r7, #20]
 8008c5a:	4b55      	ldr	r3, [pc, #340]	@ (8008db0 <mergeData+0x1ec>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	757b      	strb	r3, [r7, #21]
 8008c60:	4b54      	ldr	r3, [pc, #336]	@ (8008db4 <mergeData+0x1f0>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	75bb      	strb	r3, [r7, #22]
 8008c66:	4b54      	ldr	r3, [pc, #336]	@ (8008db8 <mergeData+0x1f4>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	75fb      	strb	r3, [r7, #23]
 8008c6c:	4b53      	ldr	r3, [pc, #332]	@ (8008dbc <mergeData+0x1f8>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	763b      	strb	r3, [r7, #24]
 8008c72:	4b53      	ldr	r3, [pc, #332]	@ (8008dc0 <mergeData+0x1fc>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	767b      	strb	r3, [r7, #25]
 8008c78:	4b52      	ldr	r3, [pc, #328]	@ (8008dc4 <mergeData+0x200>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	76bb      	strb	r3, [r7, #26]
 8008c7e:	4b52      	ldr	r3, [pc, #328]	@ (8008dc8 <mergeData+0x204>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	76fb      	strb	r3, [r7, #27]
 8008c84:	4b51      	ldr	r3, [pc, #324]	@ (8008dcc <mergeData+0x208>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	773b      	strb	r3, [r7, #28]
 8008c8a:	4b51      	ldr	r3, [pc, #324]	@ (8008dd0 <mergeData+0x20c>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008c90:	4b50      	ldr	r3, [pc, #320]	@ (8008dd4 <mergeData+0x210>)
 8008c92:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008c96:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008c98:	4b4e      	ldr	r3, [pc, #312]	@ (8008dd4 <mergeData+0x210>)
 8008c9a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008c9e:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8008dd4 <mergeData+0x210>)
 8008ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008ca6:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008caa:	4b4a      	ldr	r3, [pc, #296]	@ (8008dd4 <mergeData+0x210>)
 8008cac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008cb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008cb4:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <mergeData+0x210>)
 8008cb6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008cba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008cbe:	4b45      	ldr	r3, [pc, #276]	@ (8008dd4 <mergeData+0x210>)
 8008cc0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008cc8:	4b42      	ldr	r3, [pc, #264]	@ (8008dd4 <mergeData+0x210>)
 8008cca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008cce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008cd2:	4b40      	ldr	r3, [pc, #256]	@ (8008dd4 <mergeData+0x210>)
 8008cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008cd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8008dd4 <mergeData+0x210>)
 8008cde:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008ce2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8008dd4 <mergeData+0x210>)
 8008ce8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008cf0:	233c      	movs	r3, #60	@ 0x3c
 8008cf2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cfa:	e015      	b.n	8008d28 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008cfc:	463a      	mov	r2, r7
 8008cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d0a:	4933      	ldr	r1, [pc, #204]	@ (8008dd8 <mergeData+0x214>)
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f005 fa1b 	bl	800e148 <siprintf>
	    strcat(combinedString, temp);
 8008d12:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008d16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f005 fa75 	bl	800e20c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d24:	3301      	adds	r3, #1
 8008d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d2a:	2b28      	cmp	r3, #40	@ 0x28
 8008d2c:	d9e6      	bls.n	8008cfc <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008d2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f7 fa76 	bl	8000224 <strlen>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f005 f94d 	bl	800dfdc <malloc>
 8008d42:	4603      	mov	r3, r0
 8008d44:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008d46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008d4e:	f005 fae7 	bl	800e320 <strcpy>
	return result;
 8008d52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3770      	adds	r7, #112	@ 0x70
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	200016cf 	.word	0x200016cf
 8008d60:	200016c1 	.word	0x200016c1
 8008d64:	200016c4 	.word	0x200016c4
 8008d68:	200016c5 	.word	0x200016c5
 8008d6c:	200016c6 	.word	0x200016c6
 8008d70:	200016cd 	.word	0x200016cd
 8008d74:	200016c7 	.word	0x200016c7
 8008d78:	200016c8 	.word	0x200016c8
 8008d7c:	200016cc 	.word	0x200016cc
 8008d80:	200016c9 	.word	0x200016c9
 8008d84:	200016d9 	.word	0x200016d9
 8008d88:	200016ca 	.word	0x200016ca
 8008d8c:	200016da 	.word	0x200016da
 8008d90:	200016cb 	.word	0x200016cb
 8008d94:	200016db 	.word	0x200016db
 8008d98:	200016ce 	.word	0x200016ce
 8008d9c:	200016d0 	.word	0x200016d0
 8008da0:	200016d1 	.word	0x200016d1
 8008da4:	200016d2 	.word	0x200016d2
 8008da8:	200016d3 	.word	0x200016d3
 8008dac:	200016d4 	.word	0x200016d4
 8008db0:	200016d5 	.word	0x200016d5
 8008db4:	200016d6 	.word	0x200016d6
 8008db8:	200016d7 	.word	0x200016d7
 8008dbc:	200016d8 	.word	0x200016d8
 8008dc0:	200016dc 	.word	0x200016dc
 8008dc4:	200016de 	.word	0x200016de
 8008dc8:	200016b8 	.word	0x200016b8
 8008dcc:	200016b9 	.word	0x200016b9
 8008dd0:	200016e0 	.word	0x200016e0
 8008dd4:	20000fec 	.word	0x20000fec
 8008dd8:	0800f7b8 	.word	0x0800f7b8

08008ddc <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008de2:	4a13      	ldr	r2, [pc, #76]	@ (8008e30 <convertAndSendData+0x54>)
 8008de4:	2101      	movs	r1, #1
 8008de6:	2001      	movs	r0, #1
 8008de8:	f000 fa2a 	bl	8009240 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008dec:	4a11      	ldr	r2, [pc, #68]	@ (8008e34 <convertAndSendData+0x58>)
 8008dee:	2101      	movs	r1, #1
 8008df0:	2002      	movs	r0, #2
 8008df2:	f000 fa25 	bl	8009240 <lcd_print>

	for(int i=0; i<2; i++) {
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e00c      	b.n	8008e16 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008dfc:	f7ff fee2 	bl	8008bc4 <mergeData>
 8008e00:	4603      	mov	r3, r0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	4b0c      	ldr	r3, [pc, #48]	@ (8008e38 <convertAndSendData+0x5c>)
 8008e06:	4a0d      	ldr	r2, [pc, #52]	@ (8008e3c <convertAndSendData+0x60>)
 8008e08:	490d      	ldr	r1, [pc, #52]	@ (8008e40 <convertAndSendData+0x64>)
 8008e0a:	480e      	ldr	r0, [pc, #56]	@ (8008e44 <convertAndSendData+0x68>)
 8008e0c:	f7ff f80e 	bl	8007e2c <sendMachineData>
	for(int i=0; i<2; i++) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3301      	adds	r3, #1
 8008e14:	607b      	str	r3, [r7, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	ddef      	ble.n	8008dfc <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008e1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e20:	f000 ff86 	bl	8009d30 <HAL_Delay>
	lcd_clear();
 8008e24:	f000 fa38 	bl	8009298 <lcd_clear>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20001d9c 	.word	0x20001d9c
 8008e34:	20001db0 	.word	0x20001db0
 8008e38:	20001080 	.word	0x20001080
 8008e3c:	20001070 	.word	0x20001070
 8008e40:	20001064 	.word	0x20001064
 8008e44:	20001fdc 	.word	0x20001fdc

08008e48 <iotSetup>:

void iotSetup() {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008e4c:	4b13      	ldr	r3, [pc, #76]	@ (8008e9c <iotSetup+0x54>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d021      	beq.n	8008e98 <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008e54:	f000 f82e 	bl	8008eb4 <checkEEPROM4ID>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d001      	beq.n	8008e62 <iotSetup+0x1a>
			takeMachineID();
 8008e5e:	f7ff f9d1 	bl	8008204 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008e62:	480f      	ldr	r0, [pc, #60]	@ (8008ea0 <iotSetup+0x58>)
 8008e64:	f7f7 f9de 	bl	8000224 <strlen>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d801      	bhi.n	8008e72 <iotSetup+0x2a>
			takeWifiSSID();
 8008e6e:	f7ff fb9f 	bl	80085b0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008e72:	480c      	ldr	r0, [pc, #48]	@ (8008ea4 <iotSetup+0x5c>)
 8008e74:	f7f7 f9d6 	bl	8000224 <strlen>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d801      	bhi.n	8008e82 <iotSetup+0x3a>
			takeWifiPass();
 8008e7e:	f7ff fd43 	bl	8008908 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008e82:	4a09      	ldr	r2, [pc, #36]	@ (8008ea8 <iotSetup+0x60>)
 8008e84:	4909      	ldr	r1, [pc, #36]	@ (8008eac <iotSetup+0x64>)
 8008e86:	480a      	ldr	r0, [pc, #40]	@ (8008eb0 <iotSetup+0x68>)
 8008e88:	f7fe ff9e 	bl	8007dc8 <ESP8266_Init>
		HAL_Delay(500);
 8008e8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e90:	f000 ff4e 	bl	8009d30 <HAL_Delay>
		convertAndSendData();
 8008e94:	f7ff ffa2 	bl	8008ddc <convertAndSendData>
	}
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200016eb 	.word	0x200016eb
 8008ea0:	20001070 	.word	0x20001070
 8008ea4:	20001080 	.word	0x20001080
 8008ea8:	0800f7bc 	.word	0x0800f7bc
 8008eac:	0800f7d4 	.word	0x0800f7d4
 8008eb0:	20001fdc 	.word	0x20001fdc

08008eb4 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008eba:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef8 <checkEEPROM4ID+0x44>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	e00d      	b.n	8008ee6 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008eca:	4a0c      	ldr	r2, [pc, #48]	@ (8008efc <checkEEPROM4ID+0x48>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b0b      	cmp	r3, #11
 8008eea:	ddee      	ble.n	8008eca <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008eec:	68bb      	ldr	r3, [r7, #8]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr
 8008ef8:	20000000 	.word	0x20000000
 8008efc:	20000fec 	.word	0x20000fec

08008f00 <az5>:

int az5() {
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr
	...

08008f10 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	4603      	mov	r3, r0
 8008f18:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	f023 030f 	bic.w	r3, r3, #15
 8008f20:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008f28:	7b7b      	ldrb	r3, [r7, #13]
 8008f2a:	f043 030c 	orr.w	r3, r3, #12
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008f32:	7b7b      	ldrb	r3, [r7, #13]
 8008f34:	f043 0308 	orr.w	r3, r3, #8
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008f3c:	7b3b      	ldrb	r3, [r7, #12]
 8008f3e:	f043 030c 	orr.w	r3, r3, #12
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008f46:	7b3b      	ldrb	r3, [r7, #12]
 8008f48:	f043 0308 	orr.w	r3, r3, #8
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008f50:	bf00      	nop
 8008f52:	4825      	ldr	r0, [pc, #148]	@ (8008fe8 <lcd_send_cmd+0xd8>)
 8008f54:	f002 faf1 	bl	800b53a <HAL_I2C_GetError>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d0f9      	beq.n	8008f52 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008f5e:	bf00      	nop
 8008f60:	4821      	ldr	r0, [pc, #132]	@ (8008fe8 <lcd_send_cmd+0xd8>)
 8008f62:	f002 fadd 	bl	800b520 <HAL_I2C_GetState>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d1f9      	bne.n	8008f60 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fec <lcd_send_cmd+0xdc>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d116      	bne.n	8008fa2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
 8008f78:	e00f      	b.n	8008f9a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	3310      	adds	r3, #16
 8008f7e:	443b      	add	r3, r7
 8008f80:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	f022 0208 	bic.w	r2, r2, #8
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	443b      	add	r3, r7
 8008f90:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	3301      	adds	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d9ec      	bls.n	8008f7a <lcd_send_cmd+0x6a>
 8008fa0:	e015      	b.n	8008fce <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73bb      	strb	r3, [r7, #14]
 8008fa6:	e00f      	b.n	8008fc8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	3310      	adds	r3, #16
 8008fac:	443b      	add	r3, r7
 8008fae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	f042 0208 	orr.w	r2, r2, #8
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	3310      	adds	r3, #16
 8008fbc:	443b      	add	r3, r7
 8008fbe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	73bb      	strb	r3, [r7, #14]
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d9ec      	bls.n	8008fa8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008fce:	f107 0208 	add.w	r2, r7, #8
 8008fd2:	2364      	movs	r3, #100	@ 0x64
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	214e      	movs	r1, #78	@ 0x4e
 8008fda:	4803      	ldr	r0, [pc, #12]	@ (8008fe8 <lcd_send_cmd+0xd8>)
 8008fdc:	f001 fe40 	bl	800ac60 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20001f40 	.word	0x20001f40
 8008fec:	20001f15 	.word	0x20001f15

08008ff0 <lcd_send_data>:

void lcd_send_data (char data) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	f023 030f 	bic.w	r3, r3, #15
 8009000:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009008:	7b7b      	ldrb	r3, [r7, #13]
 800900a:	f043 030d 	orr.w	r3, r3, #13
 800900e:	b2db      	uxtb	r3, r3
 8009010:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8009012:	7b7b      	ldrb	r3, [r7, #13]
 8009014:	f043 0309 	orr.w	r3, r3, #9
 8009018:	b2db      	uxtb	r3, r3
 800901a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800901c:	7b3b      	ldrb	r3, [r7, #12]
 800901e:	f043 030d 	orr.w	r3, r3, #13
 8009022:	b2db      	uxtb	r3, r3
 8009024:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8009026:	7b3b      	ldrb	r3, [r7, #12]
 8009028:	f043 0309 	orr.w	r3, r3, #9
 800902c:	b2db      	uxtb	r3, r3
 800902e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009030:	bf00      	nop
 8009032:	4825      	ldr	r0, [pc, #148]	@ (80090c8 <lcd_send_data+0xd8>)
 8009034:	f002 fa81 	bl	800b53a <HAL_I2C_GetError>
 8009038:	4603      	mov	r3, r0
 800903a:	2b04      	cmp	r3, #4
 800903c:	d0f9      	beq.n	8009032 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800903e:	bf00      	nop
 8009040:	4821      	ldr	r0, [pc, #132]	@ (80090c8 <lcd_send_data+0xd8>)
 8009042:	f002 fa6d 	bl	800b520 <HAL_I2C_GetState>
 8009046:	4603      	mov	r3, r0
 8009048:	2b20      	cmp	r3, #32
 800904a:	d1f9      	bne.n	8009040 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800904c:	4b1f      	ldr	r3, [pc, #124]	@ (80090cc <lcd_send_data+0xdc>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d116      	bne.n	8009082 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
 8009058:	e00f      	b.n	800907a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	3310      	adds	r3, #16
 800905e:	443b      	add	r3, r7
 8009060:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	f022 0208 	bic.w	r2, r2, #8
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	3310      	adds	r3, #16
 800906e:	443b      	add	r3, r7
 8009070:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	3301      	adds	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b03      	cmp	r3, #3
 800907e:	d9ec      	bls.n	800905a <lcd_send_data+0x6a>
 8009080:	e015      	b.n	80090ae <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009082:	2300      	movs	r3, #0
 8009084:	73bb      	strb	r3, [r7, #14]
 8009086:	e00f      	b.n	80090a8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	3310      	adds	r3, #16
 800908c:	443b      	add	r3, r7
 800908e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f042 0208 	orr.w	r2, r2, #8
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	3310      	adds	r3, #16
 800909c:	443b      	add	r3, r7
 800909e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	3301      	adds	r3, #1
 80090a6:	73bb      	strb	r3, [r7, #14]
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d9ec      	bls.n	8009088 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80090ae:	f107 0208 	add.w	r2, r7, #8
 80090b2:	2364      	movs	r3, #100	@ 0x64
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2304      	movs	r3, #4
 80090b8:	214e      	movs	r1, #78	@ 0x4e
 80090ba:	4803      	ldr	r0, [pc, #12]	@ (80090c8 <lcd_send_data+0xd8>)
 80090bc:	f001 fdd0 	bl	800ac60 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20001f40 	.word	0x20001f40
 80090cc:	20001f15 	.word	0x20001f15

080090d0 <lcd_send_string>:

void lcd_send_string (char *str) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	while (*str) {
 80090d8:	e006      	b.n	80090e8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff ff84 	bl	8008ff0 <lcd_send_data>
	while (*str) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f4      	bne.n	80090da <lcd_send_string+0xa>
	}
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <lcd_send_char>:

void lcd_send_char(char ch) {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af02      	add	r7, sp, #8
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	f023 030f 	bic.w	r3, r3, #15
 800910c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009114:	7b7b      	ldrb	r3, [r7, #13]
 8009116:	f043 030d 	orr.w	r3, r3, #13
 800911a:	b2db      	uxtb	r3, r3
 800911c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800911e:	7b7b      	ldrb	r3, [r7, #13]
 8009120:	f043 0309 	orr.w	r3, r3, #9
 8009124:	b2db      	uxtb	r3, r3
 8009126:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009128:	7b3b      	ldrb	r3, [r7, #12]
 800912a:	f043 030d 	orr.w	r3, r3, #13
 800912e:	b2db      	uxtb	r3, r3
 8009130:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009132:	7b3b      	ldrb	r3, [r7, #12]
 8009134:	f043 0309 	orr.w	r3, r3, #9
 8009138:	b2db      	uxtb	r3, r3
 800913a:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800913c:	bf00      	nop
 800913e:	4825      	ldr	r0, [pc, #148]	@ (80091d4 <lcd_send_char+0xd8>)
 8009140:	f002 f9fb 	bl	800b53a <HAL_I2C_GetError>
 8009144:	4603      	mov	r3, r0
 8009146:	2b04      	cmp	r3, #4
 8009148:	d0f9      	beq.n	800913e <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800914a:	bf00      	nop
 800914c:	4821      	ldr	r0, [pc, #132]	@ (80091d4 <lcd_send_char+0xd8>)
 800914e:	f002 f9e7 	bl	800b520 <HAL_I2C_GetState>
 8009152:	4603      	mov	r3, r0
 8009154:	2b20      	cmp	r3, #32
 8009156:	d1f9      	bne.n	800914c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009158:	4b1f      	ldr	r3, [pc, #124]	@ (80091d8 <lcd_send_char+0xdc>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d116      	bne.n	800918e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e00f      	b.n	8009186 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	3310      	adds	r3, #16
 800916a:	443b      	add	r3, r7
 800916c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	f022 0208 	bic.w	r2, r2, #8
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	3310      	adds	r3, #16
 800917a:	443b      	add	r3, r7
 800917c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	3301      	adds	r3, #1
 8009184:	73fb      	strb	r3, [r7, #15]
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d9ec      	bls.n	8009166 <lcd_send_char+0x6a>
 800918c:	e015      	b.n	80091ba <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800918e:	2300      	movs	r3, #0
 8009190:	73bb      	strb	r3, [r7, #14]
 8009192:	e00f      	b.n	80091b4 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	3310      	adds	r3, #16
 8009198:	443b      	add	r3, r7
 800919a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	f042 0208 	orr.w	r2, r2, #8
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	3310      	adds	r3, #16
 80091a8:	443b      	add	r3, r7
 80091aa:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	3301      	adds	r3, #1
 80091b2:	73bb      	strb	r3, [r7, #14]
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d9ec      	bls.n	8009194 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80091ba:	f107 0208 	add.w	r2, r7, #8
 80091be:	2364      	movs	r3, #100	@ 0x64
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	2304      	movs	r3, #4
 80091c4:	214e      	movs	r1, #78	@ 0x4e
 80091c6:	4803      	ldr	r0, [pc, #12]	@ (80091d4 <lcd_send_char+0xd8>)
 80091c8:	f001 fd4a 	bl	800ac60 <HAL_I2C_Master_Transmit>
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20001f40 	.word	0x20001f40
 80091d8:	20001f15 	.word	0x20001f15

080091dc <lcd_init>:

void lcd_init (void) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80091e0:	2002      	movs	r0, #2
 80091e2:	f7ff fe95 	bl	8008f10 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80091e6:	2028      	movs	r0, #40	@ 0x28
 80091e8:	f7ff fe92 	bl	8008f10 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80091ec:	200c      	movs	r0, #12
 80091ee:	f7ff fe8f 	bl	8008f10 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80091f2:	2080      	movs	r0, #128	@ 0x80
 80091f4:	f7ff fe8c 	bl	8008f10 <lcd_send_cmd>
	lcd_backlight(1);
 80091f8:	2001      	movs	r0, #1
 80091fa:	f000 f86d 	bl	80092d8 <lcd_backlight>
}
 80091fe:	bf00      	nop
 8009200:	bd80      	pop	{r7, pc}

08009202 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	4603      	mov	r3, r0
 800920a:	460a      	mov	r2, r1
 800920c:	71fb      	strb	r3, [r7, #7]
 800920e:	4613      	mov	r3, r2
 8009210:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d106      	bne.n	8009226 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009218:	79bb      	ldrb	r3, [r7, #6]
 800921a:	337f      	adds	r3, #127	@ 0x7f
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff fe76 	bl	8008f10 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009224:	e008      	b.n	8009238 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d105      	bne.n	8009238 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800922c:	79bb      	ldrb	r3, [r7, #6]
 800922e:	3b41      	subs	r3, #65	@ 0x41
 8009230:	b2db      	uxtb	r3, r3
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff fe6c 	bl	8008f10 <lcd_send_cmd>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	603a      	str	r2, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
 800924c:	460b      	mov	r3, r1
 800924e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009250:	79ba      	ldrb	r2, [r7, #6]
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ffd3 	bl	8009202 <lcd_gotoxy>
	lcd_send_string(str);
 800925c:	6838      	ldr	r0, [r7, #0]
 800925e:	f7ff ff37 	bl	80090d0 <lcd_send_string>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	4603      	mov	r3, r0
 8009272:	71fb      	strb	r3, [r7, #7]
 8009274:	460b      	mov	r3, r1
 8009276:	71bb      	strb	r3, [r7, #6]
 8009278:	4613      	mov	r3, r2
 800927a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800927c:	79ba      	ldrb	r2, [r7, #6]
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff ffbd 	bl	8009202 <lcd_gotoxy>
    lcd_send_char(ch);
 8009288:	797b      	ldrb	r3, [r7, #5]
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff ff36 	bl	80090fc <lcd_send_char>
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <lcd_clear>:

void lcd_clear(void) {
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800929c:	2001      	movs	r0, #1
 800929e:	f7ff fe37 	bl	8008f10 <lcd_send_cmd>
    HAL_Delay(2);
 80092a2:	2002      	movs	r0, #2
 80092a4:	f000 fd44 	bl	8009d30 <HAL_Delay>
}
 80092a8:	bf00      	nop
 80092aa:	bd80      	pop	{r7, pc}

080092ac <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	460a      	mov	r2, r1
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	4613      	mov	r3, r2
 80092ba:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80092bc:	79ba      	ldrb	r2, [r7, #6]
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff9d 	bl	8009202 <lcd_gotoxy>

    lcd_send_char(' ');
 80092c8:	2020      	movs	r0, #32
 80092ca:	f7ff ff17 	bl	80090fc <lcd_send_char>
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80092e2:	4a05      	ldr	r2, [pc, #20]	@ (80092f8 <lcd_backlight+0x20>)
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7ff fe11 	bl	8008f10 <lcd_send_cmd>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001f15 	.word	0x20001f15

080092fc <lcd_cursor>:

void lcd_cursor(int state) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d106      	bne.n	8009318 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800930a:	200e      	movs	r0, #14
 800930c:	f7ff fe00 	bl	8008f10 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009310:	200f      	movs	r0, #15
 8009312:	f7ff fdfd 	bl	8008f10 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009316:	e002      	b.n	800931e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009318:	200c      	movs	r0, #12
 800931a:	f7ff fdf9 	bl	8008f10 <lcd_send_cmd>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009330:	4b04      	ldr	r3, [pc, #16]	@ (8009344 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a03      	ldr	r2, [pc, #12]	@ (8009344 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009338:	6013      	str	r3, [r2, #0]
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr
 8009344:	20001698 	.word	0x20001698

08009348 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a08      	ldr	r2, [pc, #32]	@ (8009378 <HAL_UART_RxCpltCallback+0x30>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d10a      	bne.n	8009370 <HAL_UART_RxCpltCallback+0x28>
        // RX işlemine başlamadan önce veri alımını durdurun (güvenlik için)
        HAL_UART_AbortReceive_IT(&huart1);
 800935a:	4808      	ldr	r0, [pc, #32]	@ (800937c <HAL_UART_RxCpltCallback+0x34>)
 800935c:	f003 ffd2 	bl	800d304 <HAL_UART_AbortReceive_IT>

        // Gelen byte'ı işleme koyun
        Wifi_RxCallBack(&huart1);
 8009360:	4806      	ldr	r0, [pc, #24]	@ (800937c <HAL_UART_RxCpltCallback+0x34>)
 8009362:	f7f7 fba3 	bl	8000aac <Wifi_RxCallBack>

        // Sonraki veri alımına devam edin
        HAL_UART_Receive_IT(&huart1, (uint8_t *)esp8266_rx_buffer, 1);
 8009366:	2201      	movs	r2, #1
 8009368:	4905      	ldr	r1, [pc, #20]	@ (8009380 <HAL_UART_RxCpltCallback+0x38>)
 800936a:	4804      	ldr	r0, [pc, #16]	@ (800937c <HAL_UART_RxCpltCallback+0x34>)
 800936c:	f003 ff02 	bl	800d174 <HAL_UART_Receive_IT>
    }
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	40013800 	.word	0x40013800
 800937c:	20001fdc 	.word	0x20001fdc
 8009380:	20001094 	.word	0x20001094

08009384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009388:	f000 fc70 	bl	8009c6c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800938c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009390:	f000 fcce 	bl	8009d30 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009394:	f000 f89c 	bl	80094d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009398:	f000 f9be 	bl	8009718 <MX_GPIO_Init>
  MX_CAN_Init();
 800939c:	f000 f8de 	bl	800955c <MX_CAN_Init>
  MX_I2C1_Init();
 80093a0:	f000 f910 	bl	80095c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80093a4:	f000 f93c 	bl	8009620 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80093a8:	f000 f98c 	bl	80096c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80093ac:	2201      	movs	r2, #1
 80093ae:	2140      	movs	r1, #64	@ 0x40
 80093b0:	483e      	ldr	r0, [pc, #248]	@ (80094ac <main+0x128>)
 80093b2:	f001 fab0 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80093b6:	2201      	movs	r2, #1
 80093b8:	2180      	movs	r1, #128	@ 0x80
 80093ba:	483c      	ldr	r0, [pc, #240]	@ (80094ac <main+0x128>)
 80093bc:	f001 faab 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80093c0:	200a      	movs	r0, #10
 80093c2:	f000 fcb5 	bl	8009d30 <HAL_Delay>
  lcd_init();
 80093c6:	f7ff ff09 	bl	80091dc <lcd_init>
  HAL_Delay(10);
 80093ca:	200a      	movs	r0, #10
 80093cc:	f000 fcb0 	bl	8009d30 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80093d0:	4837      	ldr	r0, [pc, #220]	@ (80094b0 <main+0x12c>)
 80093d2:	f003 f953 	bl	800c67c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80093d6:	bf00      	nop
 80093d8:	4836      	ldr	r0, [pc, #216]	@ (80094b4 <main+0x130>)
 80093da:	f002 f8ae 	bl	800b53a <HAL_I2C_GetError>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d0f9      	beq.n	80093d8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80093e4:	bf00      	nop
 80093e6:	4833      	ldr	r0, [pc, #204]	@ (80094b4 <main+0x130>)
 80093e8:	f002 f89a 	bl	800b520 <HAL_I2C_GetState>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d1f9      	bne.n	80093e6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80093f2:	2200      	movs	r2, #0
 80093f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80093f8:	482c      	ldr	r0, [pc, #176]	@ (80094ac <main+0x128>)
 80093fa:	f001 fa8c 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80093fe:	2200      	movs	r2, #0
 8009400:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009404:	4829      	ldr	r0, [pc, #164]	@ (80094ac <main+0x128>)
 8009406:	f001 fa86 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800940a:	2200      	movs	r2, #0
 800940c:	2104      	movs	r1, #4
 800940e:	4827      	ldr	r0, [pc, #156]	@ (80094ac <main+0x128>)
 8009410:	f001 fa81 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009414:	2200      	movs	r2, #0
 8009416:	2102      	movs	r1, #2
 8009418:	4824      	ldr	r0, [pc, #144]	@ (80094ac <main+0x128>)
 800941a:	f001 fa7c 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800941e:	2200      	movs	r2, #0
 8009420:	2101      	movs	r1, #1
 8009422:	4822      	ldr	r0, [pc, #136]	@ (80094ac <main+0x128>)
 8009424:	f001 fa77 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009428:	2200      	movs	r2, #0
 800942a:	2120      	movs	r1, #32
 800942c:	4822      	ldr	r0, [pc, #136]	@ (80094b8 <main+0x134>)
 800942e:	f001 fa72 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009432:	2200      	movs	r2, #0
 8009434:	2110      	movs	r1, #16
 8009436:	4820      	ldr	r0, [pc, #128]	@ (80094b8 <main+0x134>)
 8009438:	f001 fa6d 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800943c:	2200      	movs	r2, #0
 800943e:	2180      	movs	r1, #128	@ 0x80
 8009440:	481e      	ldr	r0, [pc, #120]	@ (80094bc <main+0x138>)
 8009442:	f001 fa68 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009446:	2200      	movs	r2, #0
 8009448:	2140      	movs	r1, #64	@ 0x40
 800944a:	481c      	ldr	r0, [pc, #112]	@ (80094bc <main+0x138>)
 800944c:	f001 fa63 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009450:	2200      	movs	r2, #0
 8009452:	2120      	movs	r1, #32
 8009454:	4819      	ldr	r0, [pc, #100]	@ (80094bc <main+0x138>)
 8009456:	f001 fa5e 	bl	800a916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800945a:	2200      	movs	r2, #0
 800945c:	2110      	movs	r1, #16
 800945e:	4817      	ldr	r0, [pc, #92]	@ (80094bc <main+0x138>)
 8009460:	f001 fa59 	bl	800a916 <HAL_GPIO_WritePin>

  i2cTest();
 8009464:	f7f7 fd7c 	bl	8000f60 <i2cTest>
  HAL_Delay(100);
 8009468:	2064      	movs	r0, #100	@ 0x64
 800946a:	f000 fc61 	bl	8009d30 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800946e:	4a14      	ldr	r2, [pc, #80]	@ (80094c0 <main+0x13c>)
 8009470:	2101      	movs	r1, #1
 8009472:	2001      	movs	r0, #1
 8009474:	f7ff fee4 	bl	8009240 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009478:	4a12      	ldr	r2, [pc, #72]	@ (80094c4 <main+0x140>)
 800947a:	2101      	movs	r1, #1
 800947c:	2002      	movs	r0, #2
 800947e:	f7ff fedf 	bl	8009240 <lcd_print>
  HAL_Delay(1000);
 8009482:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009486:	f000 fc53 	bl	8009d30 <HAL_Delay>
  lcd_clear();
 800948a:	f7ff ff05 	bl	8009298 <lcd_clear>

  eepromKontrol();
 800948e:	f7f6 fed1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009492:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009496:	f000 fc4b 	bl	8009d30 <HAL_Delay>

  backLightTimer = millis;
 800949a:	4b0b      	ldr	r3, [pc, #44]	@ (80094c8 <main+0x144>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a0b      	ldr	r2, [pc, #44]	@ (80094cc <main+0x148>)
 80094a0:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 80094a2:	f7ff fcd1 	bl	8008e48 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80094a6:	f7fc fc4b 	bl	8005d40 <mainLoop>
 80094aa:	e7fc      	b.n	80094a6 <main+0x122>
 80094ac:	40010c00 	.word	0x40010c00
 80094b0:	20001f94 	.word	0x20001f94
 80094b4:	20001f40 	.word	0x20001f40
 80094b8:	40011000 	.word	0x40011000
 80094bc:	40010800 	.word	0x40010800
 80094c0:	2000009c 	.word	0x2000009c
 80094c4:	200000b0 	.word	0x200000b0
 80094c8:	20001698 	.word	0x20001698
 80094cc:	200016b4 	.word	0x200016b4

080094d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b090      	sub	sp, #64	@ 0x40
 80094d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80094d6:	f107 0318 	add.w	r3, r7, #24
 80094da:	2228      	movs	r2, #40	@ 0x28
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f004 fecc 	bl	800e27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	60da      	str	r2, [r3, #12]
 80094f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094f2:	2301      	movs	r3, #1
 80094f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80094fc:	2300      	movs	r3, #0
 80094fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009500:	2301      	movs	r3, #1
 8009502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009504:	2302      	movs	r3, #2
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800950c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800950e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009514:	f107 0318 	add.w	r3, r7, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f002 fc4f 	bl	800bdbc <HAL_RCC_OscConfig>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009524:	f000 f9a2 	bl	800986c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009528:	230f      	movs	r3, #15
 800952a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800952c:	2302      	movs	r3, #2
 800952e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	2102      	movs	r1, #2
 8009542:	4618      	mov	r0, r3
 8009544:	f002 febc 	bl	800c2c0 <HAL_RCC_ClockConfig>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800954e:	f000 f98d 	bl	800986c <Error_Handler>
  }
}
 8009552:	bf00      	nop
 8009554:	3740      	adds	r7, #64	@ 0x40
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009560:	4b16      	ldr	r3, [pc, #88]	@ (80095bc <MX_CAN_Init+0x60>)
 8009562:	4a17      	ldr	r2, [pc, #92]	@ (80095c0 <MX_CAN_Init+0x64>)
 8009564:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009566:	4b15      	ldr	r3, [pc, #84]	@ (80095bc <MX_CAN_Init+0x60>)
 8009568:	2210      	movs	r2, #16
 800956a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800956c:	4b13      	ldr	r3, [pc, #76]	@ (80095bc <MX_CAN_Init+0x60>)
 800956e:	2200      	movs	r2, #0
 8009570:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009572:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <MX_CAN_Init+0x60>)
 8009574:	2200      	movs	r2, #0
 8009576:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009578:	4b10      	ldr	r3, [pc, #64]	@ (80095bc <MX_CAN_Init+0x60>)
 800957a:	2200      	movs	r2, #0
 800957c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800957e:	4b0f      	ldr	r3, [pc, #60]	@ (80095bc <MX_CAN_Init+0x60>)
 8009580:	2200      	movs	r2, #0
 8009582:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009584:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <MX_CAN_Init+0x60>)
 8009586:	2200      	movs	r2, #0
 8009588:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800958a:	4b0c      	ldr	r3, [pc, #48]	@ (80095bc <MX_CAN_Init+0x60>)
 800958c:	2200      	movs	r2, #0
 800958e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <MX_CAN_Init+0x60>)
 8009592:	2200      	movs	r2, #0
 8009594:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009596:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <MX_CAN_Init+0x60>)
 8009598:	2200      	movs	r2, #0
 800959a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800959c:	4b07      	ldr	r3, [pc, #28]	@ (80095bc <MX_CAN_Init+0x60>)
 800959e:	2200      	movs	r2, #0
 80095a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80095a2:	4b06      	ldr	r3, [pc, #24]	@ (80095bc <MX_CAN_Init+0x60>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80095a8:	4804      	ldr	r0, [pc, #16]	@ (80095bc <MX_CAN_Init+0x60>)
 80095aa:	f000 fbe5 	bl	8009d78 <HAL_CAN_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80095b4:	f000 f95a 	bl	800986c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80095b8:	bf00      	nop
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20001f18 	.word	0x20001f18
 80095c0:	40006400 	.word	0x40006400

080095c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80095c8:	4b12      	ldr	r3, [pc, #72]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095ca:	4a13      	ldr	r2, [pc, #76]	@ (8009618 <MX_I2C1_Init+0x54>)
 80095cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80095ce:	4b11      	ldr	r3, [pc, #68]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095d0:	4a12      	ldr	r2, [pc, #72]	@ (800961c <MX_I2C1_Init+0x58>)
 80095d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80095d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80095da:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095dc:	2200      	movs	r2, #0
 80095de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80095e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80095ee:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095f4:	4b07      	ldr	r3, [pc, #28]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095fa:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <MX_I2C1_Init+0x50>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009600:	4804      	ldr	r0, [pc, #16]	@ (8009614 <MX_I2C1_Init+0x50>)
 8009602:	f001 f9b9 	bl	800a978 <HAL_I2C_Init>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800960c:	f000 f92e 	bl	800986c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009610:	bf00      	nop
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20001f40 	.word	0x20001f40
 8009618:	40005400 	.word	0x40005400
 800961c:	00061a80 	.word	0x00061a80

08009620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	605a      	str	r2, [r3, #4]
 8009630:	609a      	str	r2, [r3, #8]
 8009632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009634:	463b      	mov	r3, r7
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800963c:	4b1f      	ldr	r3, [pc, #124]	@ (80096bc <MX_TIM1_Init+0x9c>)
 800963e:	4a20      	ldr	r2, [pc, #128]	@ (80096c0 <MX_TIM1_Init+0xa0>)
 8009640:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009642:	4b1e      	ldr	r3, [pc, #120]	@ (80096bc <MX_TIM1_Init+0x9c>)
 8009644:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009648:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800964a:	4b1c      	ldr	r3, [pc, #112]	@ (80096bc <MX_TIM1_Init+0x9c>)
 800964c:	2200      	movs	r2, #0
 800964e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009650:	4b1a      	ldr	r3, [pc, #104]	@ (80096bc <MX_TIM1_Init+0x9c>)
 8009652:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009658:	4b18      	ldr	r3, [pc, #96]	@ (80096bc <MX_TIM1_Init+0x9c>)
 800965a:	2200      	movs	r2, #0
 800965c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800965e:	4b17      	ldr	r3, [pc, #92]	@ (80096bc <MX_TIM1_Init+0x9c>)
 8009660:	2200      	movs	r2, #0
 8009662:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009664:	4b15      	ldr	r3, [pc, #84]	@ (80096bc <MX_TIM1_Init+0x9c>)
 8009666:	2200      	movs	r2, #0
 8009668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800966a:	4814      	ldr	r0, [pc, #80]	@ (80096bc <MX_TIM1_Init+0x9c>)
 800966c:	f002 ffb6 	bl	800c5dc <HAL_TIM_Base_Init>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009676:	f000 f8f9 	bl	800986c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800967a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800967e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	4619      	mov	r1, r3
 8009686:	480d      	ldr	r0, [pc, #52]	@ (80096bc <MX_TIM1_Init+0x9c>)
 8009688:	f003 f960 	bl	800c94c <HAL_TIM_ConfigClockSource>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009692:	f000 f8eb 	bl	800986c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009696:	2300      	movs	r3, #0
 8009698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800969a:	2300      	movs	r3, #0
 800969c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800969e:	463b      	mov	r3, r7
 80096a0:	4619      	mov	r1, r3
 80096a2:	4806      	ldr	r0, [pc, #24]	@ (80096bc <MX_TIM1_Init+0x9c>)
 80096a4:	f003 fb4e 	bl	800cd44 <HAL_TIMEx_MasterConfigSynchronization>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80096ae:	f000 f8dd 	bl	800986c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80096b2:	bf00      	nop
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20001f94 	.word	0x20001f94
 80096c0:	40012c00 	.word	0x40012c00

080096c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80096c8:	4b11      	ldr	r3, [pc, #68]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096ca:	4a12      	ldr	r2, [pc, #72]	@ (8009714 <MX_USART1_UART_Init+0x50>)
 80096cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80096ce:	4b10      	ldr	r3, [pc, #64]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80096d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096d8:	2200      	movs	r2, #0
 80096da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096de:	2200      	movs	r2, #0
 80096e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096e8:	4b09      	ldr	r3, [pc, #36]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096ea:	220c      	movs	r2, #12
 80096ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096ee:	4b08      	ldr	r3, [pc, #32]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096f4:	4b06      	ldr	r3, [pc, #24]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096fa:	4805      	ldr	r0, [pc, #20]	@ (8009710 <MX_USART1_UART_Init+0x4c>)
 80096fc:	f003 fba0 	bl	800ce40 <HAL_UART_Init>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009706:	f000 f8b1 	bl	800986c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20001fdc 	.word	0x20001fdc
 8009714:	40013800 	.word	0x40013800

08009718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800971e:	f107 0310 	add.w	r3, r7, #16
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	605a      	str	r2, [r3, #4]
 8009728:	609a      	str	r2, [r3, #8]
 800972a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800972c:	4b4b      	ldr	r3, [pc, #300]	@ (800985c <MX_GPIO_Init+0x144>)
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	4a4a      	ldr	r2, [pc, #296]	@ (800985c <MX_GPIO_Init+0x144>)
 8009732:	f043 0310 	orr.w	r3, r3, #16
 8009736:	6193      	str	r3, [r2, #24]
 8009738:	4b48      	ldr	r3, [pc, #288]	@ (800985c <MX_GPIO_Init+0x144>)
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f003 0310 	and.w	r3, r3, #16
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009744:	4b45      	ldr	r3, [pc, #276]	@ (800985c <MX_GPIO_Init+0x144>)
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	4a44      	ldr	r2, [pc, #272]	@ (800985c <MX_GPIO_Init+0x144>)
 800974a:	f043 0320 	orr.w	r3, r3, #32
 800974e:	6193      	str	r3, [r2, #24]
 8009750:	4b42      	ldr	r3, [pc, #264]	@ (800985c <MX_GPIO_Init+0x144>)
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	60bb      	str	r3, [r7, #8]
 800975a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800975c:	4b3f      	ldr	r3, [pc, #252]	@ (800985c <MX_GPIO_Init+0x144>)
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	4a3e      	ldr	r2, [pc, #248]	@ (800985c <MX_GPIO_Init+0x144>)
 8009762:	f043 0304 	orr.w	r3, r3, #4
 8009766:	6193      	str	r3, [r2, #24]
 8009768:	4b3c      	ldr	r3, [pc, #240]	@ (800985c <MX_GPIO_Init+0x144>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	607b      	str	r3, [r7, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009774:	4b39      	ldr	r3, [pc, #228]	@ (800985c <MX_GPIO_Init+0x144>)
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	4a38      	ldr	r2, [pc, #224]	@ (800985c <MX_GPIO_Init+0x144>)
 800977a:	f043 0308 	orr.w	r3, r3, #8
 800977e:	6193      	str	r3, [r2, #24]
 8009780:	4b36      	ldr	r3, [pc, #216]	@ (800985c <MX_GPIO_Init+0x144>)
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f003 0308 	and.w	r3, r3, #8
 8009788:	603b      	str	r3, [r7, #0]
 800978a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800978c:	2200      	movs	r2, #0
 800978e:	21f0      	movs	r1, #240	@ 0xf0
 8009790:	4833      	ldr	r0, [pc, #204]	@ (8009860 <MX_GPIO_Init+0x148>)
 8009792:	f001 f8c0 	bl	800a916 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009796:	2200      	movs	r2, #0
 8009798:	f241 0130 	movw	r1, #4144	@ 0x1030
 800979c:	4831      	ldr	r0, [pc, #196]	@ (8009864 <MX_GPIO_Init+0x14c>)
 800979e:	f001 f8ba 	bl	800a916 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80097a2:	2200      	movs	r2, #0
 80097a4:	f640 4107 	movw	r1, #3079	@ 0xc07
 80097a8:	482f      	ldr	r0, [pc, #188]	@ (8009868 <MX_GPIO_Init+0x150>)
 80097aa:	f001 f8b4 	bl	800a916 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80097ae:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80097b2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097bc:	f107 0310 	add.w	r3, r7, #16
 80097c0:	4619      	mov	r1, r3
 80097c2:	4828      	ldr	r0, [pc, #160]	@ (8009864 <MX_GPIO_Init+0x14c>)
 80097c4:	f000 fe30 	bl	800a428 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80097c8:	f248 130f 	movw	r3, #33039	@ 0x810f
 80097cc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d6:	f107 0310 	add.w	r3, r7, #16
 80097da:	4619      	mov	r1, r3
 80097dc:	4820      	ldr	r0, [pc, #128]	@ (8009860 <MX_GPIO_Init+0x148>)
 80097de:	f000 fe23 	bl	800a428 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80097e2:	23f0      	movs	r3, #240	@ 0xf0
 80097e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097e6:	2301      	movs	r3, #1
 80097e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ee:	2302      	movs	r3, #2
 80097f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097f2:	f107 0310 	add.w	r3, r7, #16
 80097f6:	4619      	mov	r1, r3
 80097f8:	4819      	ldr	r0, [pc, #100]	@ (8009860 <MX_GPIO_Init+0x148>)
 80097fa:	f000 fe15 	bl	800a428 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80097fe:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009804:	2301      	movs	r3, #1
 8009806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800980c:	2302      	movs	r3, #2
 800980e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009810:	f107 0310 	add.w	r3, r7, #16
 8009814:	4619      	mov	r1, r3
 8009816:	4813      	ldr	r0, [pc, #76]	@ (8009864 <MX_GPIO_Init+0x14c>)
 8009818:	f000 fe06 	bl	800a428 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800981c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009820:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009822:	2301      	movs	r3, #1
 8009824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009826:	2300      	movs	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982a:	2302      	movs	r3, #2
 800982c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800982e:	f107 0310 	add.w	r3, r7, #16
 8009832:	4619      	mov	r1, r3
 8009834:	480c      	ldr	r0, [pc, #48]	@ (8009868 <MX_GPIO_Init+0x150>)
 8009836:	f000 fdf7 	bl	800a428 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800983a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800983e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	4619      	mov	r1, r3
 800984e:	4806      	ldr	r0, [pc, #24]	@ (8009868 <MX_GPIO_Init+0x150>)
 8009850:	f000 fdea 	bl	800a428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009854:	bf00      	nop
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40021000 	.word	0x40021000
 8009860:	40010800 	.word	0x40010800
 8009864:	40011000 	.word	0x40011000
 8009868:	40010c00 	.word	0x40010c00

0800986c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009870:	bf00      	nop
 8009872:	46bd      	mov	sp, r7
 8009874:	bc80      	pop	{r7}
 8009876:	4770      	bx	lr

08009878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800987e:	4b15      	ldr	r3, [pc, #84]	@ (80098d4 <HAL_MspInit+0x5c>)
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	4a14      	ldr	r2, [pc, #80]	@ (80098d4 <HAL_MspInit+0x5c>)
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	6193      	str	r3, [r2, #24]
 800988a:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <HAL_MspInit+0x5c>)
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	60bb      	str	r3, [r7, #8]
 8009894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009896:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <HAL_MspInit+0x5c>)
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	4a0e      	ldr	r2, [pc, #56]	@ (80098d4 <HAL_MspInit+0x5c>)
 800989c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098a0:	61d3      	str	r3, [r2, #28]
 80098a2:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <HAL_MspInit+0x5c>)
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80098ae:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <HAL_MspInit+0x60>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	4a04      	ldr	r2, [pc, #16]	@ (80098d8 <HAL_MspInit+0x60>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr
 80098d4:	40021000 	.word	0x40021000
 80098d8:	40010000 	.word	0x40010000

080098dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098e4:	f107 0310 	add.w	r3, r7, #16
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	605a      	str	r2, [r3, #4]
 80098ee:	609a      	str	r2, [r3, #8]
 80098f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009968 <HAL_CAN_MspInit+0x8c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d131      	bne.n	8009960 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80098fc:	4b1b      	ldr	r3, [pc, #108]	@ (800996c <HAL_CAN_MspInit+0x90>)
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	4a1a      	ldr	r2, [pc, #104]	@ (800996c <HAL_CAN_MspInit+0x90>)
 8009902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009906:	61d3      	str	r3, [r2, #28]
 8009908:	4b18      	ldr	r3, [pc, #96]	@ (800996c <HAL_CAN_MspInit+0x90>)
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009914:	4b15      	ldr	r3, [pc, #84]	@ (800996c <HAL_CAN_MspInit+0x90>)
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	4a14      	ldr	r2, [pc, #80]	@ (800996c <HAL_CAN_MspInit+0x90>)
 800991a:	f043 0304 	orr.w	r3, r3, #4
 800991e:	6193      	str	r3, [r2, #24]
 8009920:	4b12      	ldr	r3, [pc, #72]	@ (800996c <HAL_CAN_MspInit+0x90>)
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	60bb      	str	r3, [r7, #8]
 800992a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800992c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009936:	2300      	movs	r3, #0
 8009938:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800993a:	f107 0310 	add.w	r3, r7, #16
 800993e:	4619      	mov	r1, r3
 8009940:	480b      	ldr	r0, [pc, #44]	@ (8009970 <HAL_CAN_MspInit+0x94>)
 8009942:	f000 fd71 	bl	800a428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800994a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994c:	2302      	movs	r3, #2
 800994e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009950:	2303      	movs	r3, #3
 8009952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009954:	f107 0310 	add.w	r3, r7, #16
 8009958:	4619      	mov	r1, r3
 800995a:	4805      	ldr	r0, [pc, #20]	@ (8009970 <HAL_CAN_MspInit+0x94>)
 800995c:	f000 fd64 	bl	800a428 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009960:	bf00      	nop
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40006400 	.word	0x40006400
 800996c:	40021000 	.word	0x40021000
 8009970:	40010800 	.word	0x40010800

08009974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800997c:	f107 0310 	add.w	r3, r7, #16
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	605a      	str	r2, [r3, #4]
 8009986:	609a      	str	r2, [r3, #8]
 8009988:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a15      	ldr	r2, [pc, #84]	@ (80099e4 <HAL_I2C_MspInit+0x70>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d123      	bne.n	80099dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009994:	4b14      	ldr	r3, [pc, #80]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4a13      	ldr	r2, [pc, #76]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 800999a:	f043 0308 	orr.w	r3, r3, #8
 800999e:	6193      	str	r3, [r2, #24]
 80099a0:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80099ac:	23c0      	movs	r3, #192	@ 0xc0
 80099ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099b0:	2312      	movs	r3, #18
 80099b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80099b4:	2303      	movs	r3, #3
 80099b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	4619      	mov	r1, r3
 80099be:	480b      	ldr	r0, [pc, #44]	@ (80099ec <HAL_I2C_MspInit+0x78>)
 80099c0:	f000 fd32 	bl	800a428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80099c4:	4b08      	ldr	r3, [pc, #32]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	4a07      	ldr	r2, [pc, #28]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 80099ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099ce:	61d3      	str	r3, [r2, #28]
 80099d0:	4b05      	ldr	r3, [pc, #20]	@ (80099e8 <HAL_I2C_MspInit+0x74>)
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099d8:	60bb      	str	r3, [r7, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80099dc:	bf00      	nop
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40005400 	.word	0x40005400
 80099e8:	40021000 	.word	0x40021000
 80099ec:	40010c00 	.word	0x40010c00

080099f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009a28 <HAL_I2C_MspDeInit+0x38>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10d      	bne.n	8009a1e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009a02:	4b0a      	ldr	r3, [pc, #40]	@ (8009a2c <HAL_I2C_MspDeInit+0x3c>)
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	4a09      	ldr	r2, [pc, #36]	@ (8009a2c <HAL_I2C_MspDeInit+0x3c>)
 8009a08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a0c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009a0e:	2140      	movs	r1, #64	@ 0x40
 8009a10:	4807      	ldr	r0, [pc, #28]	@ (8009a30 <HAL_I2C_MspDeInit+0x40>)
 8009a12:	f000 fe9d 	bl	800a750 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009a16:	2180      	movs	r1, #128	@ 0x80
 8009a18:	4805      	ldr	r0, [pc, #20]	@ (8009a30 <HAL_I2C_MspDeInit+0x40>)
 8009a1a:	f000 fe99 	bl	800a750 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40005400 	.word	0x40005400
 8009a2c:	40021000 	.word	0x40021000
 8009a30:	40010c00 	.word	0x40010c00

08009a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a0d      	ldr	r2, [pc, #52]	@ (8009a78 <HAL_TIM_Base_MspInit+0x44>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009a46:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <HAL_TIM_Base_MspInit+0x48>)
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <HAL_TIM_Base_MspInit+0x48>)
 8009a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009a50:	6193      	str	r3, [r2, #24]
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HAL_TIM_Base_MspInit+0x48>)
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2100      	movs	r1, #0
 8009a62:	2019      	movs	r0, #25
 8009a64:	f000 fb5b 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009a68:	2019      	movs	r0, #25
 8009a6a:	f000 fb74 	bl	800a156 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40012c00 	.word	0x40012c00
 8009a7c:	40021000 	.word	0x40021000

08009a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a88:	f107 0310 	add.w	r3, r7, #16
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	609a      	str	r2, [r3, #8]
 8009a94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a20      	ldr	r2, [pc, #128]	@ (8009b1c <HAL_UART_MspInit+0x9c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d139      	bne.n	8009b14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009aaa:	6193      	str	r3, [r2, #24]
 8009aac:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab8:	4b19      	ldr	r3, [pc, #100]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	4a18      	ldr	r2, [pc, #96]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009abe:	f043 0304 	orr.w	r3, r3, #4
 8009ac2:	6193      	str	r3, [r2, #24]
 8009ac4:	4b16      	ldr	r3, [pc, #88]	@ (8009b20 <HAL_UART_MspInit+0xa0>)
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ada:	2303      	movs	r3, #3
 8009adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ade:	f107 0310 	add.w	r3, r7, #16
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	480f      	ldr	r0, [pc, #60]	@ (8009b24 <HAL_UART_MspInit+0xa4>)
 8009ae6:	f000 fc9f 	bl	800a428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009af8:	f107 0310 	add.w	r3, r7, #16
 8009afc:	4619      	mov	r1, r3
 8009afe:	4809      	ldr	r0, [pc, #36]	@ (8009b24 <HAL_UART_MspInit+0xa4>)
 8009b00:	f000 fc92 	bl	800a428 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	2025      	movs	r0, #37	@ 0x25
 8009b0a:	f000 fb08 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009b0e:	2025      	movs	r0, #37	@ 0x25
 8009b10:	f000 fb21 	bl	800a156 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009b14:	bf00      	nop
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40013800 	.word	0x40013800
 8009b20:	40021000 	.word	0x40021000
 8009b24:	40010800 	.word	0x40010800

08009b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009b2c:	bf00      	nop
 8009b2e:	e7fd      	b.n	8009b2c <NMI_Handler+0x4>

08009b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b34:	bf00      	nop
 8009b36:	e7fd      	b.n	8009b34 <HardFault_Handler+0x4>

08009b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b3c:	bf00      	nop
 8009b3e:	e7fd      	b.n	8009b3c <MemManage_Handler+0x4>

08009b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b44:	bf00      	nop
 8009b46:	e7fd      	b.n	8009b44 <BusFault_Handler+0x4>

08009b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b4c:	bf00      	nop
 8009b4e:	e7fd      	b.n	8009b4c <UsageFault_Handler+0x4>

08009b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b60:	bf00      	nop
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b6c:	bf00      	nop
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bc80      	pop	{r7}
 8009b72:	4770      	bx	lr

08009b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b78:	f000 f8be 	bl	8009cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009b84:	4802      	ldr	r0, [pc, #8]	@ (8009b90 <TIM1_UP_IRQHandler+0x10>)
 8009b86:	f002 fdd9 	bl	800c73c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009b8a:	bf00      	nop
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20001f94 	.word	0x20001f94

08009b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009b98:	4802      	ldr	r0, [pc, #8]	@ (8009ba4 <USART1_IRQHandler+0x10>)
 8009b9a:	f003 fc65 	bl	800d468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009b9e:	bf00      	nop
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20001fdc 	.word	0x20001fdc

08009ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009bb0:	4a14      	ldr	r2, [pc, #80]	@ (8009c04 <_sbrk+0x5c>)
 8009bb2:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <_sbrk+0x60>)
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009bbc:	4b13      	ldr	r3, [pc, #76]	@ (8009c0c <_sbrk+0x64>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d102      	bne.n	8009bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009bc4:	4b11      	ldr	r3, [pc, #68]	@ (8009c0c <_sbrk+0x64>)
 8009bc6:	4a12      	ldr	r2, [pc, #72]	@ (8009c10 <_sbrk+0x68>)
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009bca:	4b10      	ldr	r3, [pc, #64]	@ (8009c0c <_sbrk+0x64>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d207      	bcs.n	8009be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009bd8:	f004 fb68 	bl	800e2ac <__errno>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	220c      	movs	r2, #12
 8009be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009be6:	e009      	b.n	8009bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009be8:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <_sbrk+0x64>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009bee:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <_sbrk+0x64>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4a05      	ldr	r2, [pc, #20]	@ (8009c0c <_sbrk+0x64>)
 8009bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	2000c000 	.word	0x2000c000
 8009c08:	00000400 	.word	0x00000400
 8009c0c:	20002024 	.word	0x20002024
 8009c10:	20002178 	.word	0x20002178

08009c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009c18:	bf00      	nop
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr

08009c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c20:	480c      	ldr	r0, [pc, #48]	@ (8009c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009c22:	490d      	ldr	r1, [pc, #52]	@ (8009c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009c24:	4a0d      	ldr	r2, [pc, #52]	@ (8009c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c28:	e002      	b.n	8009c30 <LoopCopyDataInit>

08009c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c2e:	3304      	adds	r3, #4

08009c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c34:	d3f9      	bcc.n	8009c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c36:	4a0a      	ldr	r2, [pc, #40]	@ (8009c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009c38:	4c0a      	ldr	r4, [pc, #40]	@ (8009c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c3c:	e001      	b.n	8009c42 <LoopFillZerobss>

08009c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c40:	3204      	adds	r2, #4

08009c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c44:	d3fb      	bcc.n	8009c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009c46:	f7ff ffe5 	bl	8009c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c4a:	f004 fb35 	bl	800e2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009c4e:	f7ff fb99 	bl	8009384 <main>
  bx lr
 8009c52:	4770      	bx	lr
  ldr r0, =_sdata
 8009c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c58:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009c5c:	0800f870 	.word	0x0800f870
  ldr r2, =_sbss
 8009c60:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009c64:	20002174 	.word	0x20002174

08009c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009c68:	e7fe      	b.n	8009c68 <ADC1_2_IRQHandler>
	...

08009c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c70:	4b08      	ldr	r3, [pc, #32]	@ (8009c94 <HAL_Init+0x28>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a07      	ldr	r2, [pc, #28]	@ (8009c94 <HAL_Init+0x28>)
 8009c76:	f043 0310 	orr.w	r3, r3, #16
 8009c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c7c:	2003      	movs	r0, #3
 8009c7e:	f000 fa43 	bl	800a108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c82:	200f      	movs	r0, #15
 8009c84:	f000 f808 	bl	8009c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c88:	f7ff fdf6 	bl	8009878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	40022000 	.word	0x40022000

08009c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009ca0:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <HAL_InitTick+0x54>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4b12      	ldr	r3, [pc, #72]	@ (8009cf0 <HAL_InitTick+0x58>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fa5b 	bl	800a172 <HAL_SYSTICK_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e00e      	b.n	8009ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b0f      	cmp	r3, #15
 8009cca:	d80a      	bhi.n	8009ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cd4:	f000 fa23 	bl	800a11e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cd8:	4a06      	ldr	r2, [pc, #24]	@ (8009cf4 <HAL_InitTick+0x5c>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e000      	b.n	8009ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20000f74 	.word	0x20000f74
 8009cf0:	20000f7c 	.word	0x20000f7c
 8009cf4:	20000f78 	.word	0x20000f78

08009cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cfc:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <HAL_IncTick+0x1c>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <HAL_IncTick+0x20>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4413      	add	r3, r2
 8009d08:	4a03      	ldr	r2, [pc, #12]	@ (8009d18 <HAL_IncTick+0x20>)
 8009d0a:	6013      	str	r3, [r2, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr
 8009d14:	20000f7c 	.word	0x20000f7c
 8009d18:	20002028 	.word	0x20002028

08009d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8009d20:	4b02      	ldr	r3, [pc, #8]	@ (8009d2c <HAL_GetTick+0x10>)
 8009d22:	681b      	ldr	r3, [r3, #0]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr
 8009d2c:	20002028 	.word	0x20002028

08009d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d38:	f7ff fff0 	bl	8009d1c <HAL_GetTick>
 8009d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d48:	d005      	beq.n	8009d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d74 <HAL_Delay+0x44>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009d56:	bf00      	nop
 8009d58:	f7ff ffe0 	bl	8009d1c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d8f7      	bhi.n	8009d58 <HAL_Delay+0x28>
  {
  }
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20000f7c 	.word	0x20000f7c

08009d78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e0ed      	b.n	8009f66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff fda0 	bl	80098dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0201 	orr.w	r2, r2, #1
 8009daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009dac:	f7ff ffb6 	bl	8009d1c <HAL_GetTick>
 8009db0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009db2:	e012      	b.n	8009dda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009db4:	f7ff ffb2 	bl	8009d1c <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	2b0a      	cmp	r3, #10
 8009dc0:	d90b      	bls.n	8009dda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2205      	movs	r2, #5
 8009dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e0c5      	b.n	8009f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0e5      	beq.n	8009db4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0202 	bic.w	r2, r2, #2
 8009df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009df8:	f7ff ff90 	bl	8009d1c <HAL_GetTick>
 8009dfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009dfe:	e012      	b.n	8009e26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009e00:	f7ff ff8c 	bl	8009d1c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b0a      	cmp	r3, #10
 8009e0c:	d90b      	bls.n	8009e26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2205      	movs	r2, #5
 8009e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e09f      	b.n	8009f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e5      	bne.n	8009e00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	7e1b      	ldrb	r3, [r3, #24]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d108      	bne.n	8009e4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	e007      	b.n	8009e5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7e5b      	ldrb	r3, [r3, #25]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d108      	bne.n	8009e78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	e007      	b.n	8009e88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7e9b      	ldrb	r3, [r3, #26]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d108      	bne.n	8009ea2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f042 0220 	orr.w	r2, r2, #32
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	e007      	b.n	8009eb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0220 	bic.w	r2, r2, #32
 8009eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	7edb      	ldrb	r3, [r3, #27]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d108      	bne.n	8009ecc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0210 	bic.w	r2, r2, #16
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e007      	b.n	8009edc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0210 	orr.w	r2, r2, #16
 8009eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7f1b      	ldrb	r3, [r3, #28]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d108      	bne.n	8009ef6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0208 	orr.w	r2, r2, #8
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	e007      	b.n	8009f06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0208 	bic.w	r2, r2, #8
 8009f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7f5b      	ldrb	r3, [r3, #29]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d108      	bne.n	8009f20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0204 	orr.w	r2, r2, #4
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e007      	b.n	8009f30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f022 0204 	bic.w	r2, r2, #4
 8009f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689a      	ldr	r2, [r3, #8]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	ea42 0103 	orr.w	r1, r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	1e5a      	subs	r2, r3, #1
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <__NVIC_SetPriorityGrouping>:
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f80:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009fa2:	4a04      	ldr	r2, [pc, #16]	@ (8009fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	60d3      	str	r3, [r2, #12]
}
 8009fa8:	bf00      	nop
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	e000ed00 	.word	0xe000ed00

08009fb8 <__NVIC_GetPriorityGrouping>:
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fbc:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	f003 0307 	and.w	r3, r3, #7
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000ed00 	.word	0xe000ed00

08009fd4 <__NVIC_EnableIRQ>:
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	db0b      	blt.n	8009ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	f003 021f 	and.w	r2, r3, #31
 8009fec:	4906      	ldr	r1, [pc, #24]	@ (800a008 <__NVIC_EnableIRQ+0x34>)
 8009fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8009ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr
 800a008:	e000e100 	.word	0xe000e100

0800a00c <__NVIC_SetPriority>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	db0a      	blt.n	800a036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	490c      	ldr	r1, [pc, #48]	@ (800a058 <__NVIC_SetPriority+0x4c>)
 800a026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02a:	0112      	lsls	r2, r2, #4
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	440b      	add	r3, r1
 800a030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a034:	e00a      	b.n	800a04c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4908      	ldr	r1, [pc, #32]	@ (800a05c <__NVIC_SetPriority+0x50>)
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	3b04      	subs	r3, #4
 800a044:	0112      	lsls	r2, r2, #4
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	440b      	add	r3, r1
 800a04a:	761a      	strb	r2, [r3, #24]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	e000e100 	.word	0xe000e100
 800a05c:	e000ed00 	.word	0xe000ed00

0800a060 <NVIC_EncodePriority>:
{
 800a060:	b480      	push	{r7}
 800a062:	b089      	sub	sp, #36	@ 0x24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f1c3 0307 	rsb	r3, r3, #7
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	bf28      	it	cs
 800a07e:	2304      	movcs	r3, #4
 800a080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3304      	adds	r3, #4
 800a086:	2b06      	cmp	r3, #6
 800a088:	d902      	bls.n	800a090 <NVIC_EncodePriority+0x30>
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3b03      	subs	r3, #3
 800a08e:	e000      	b.n	800a092 <NVIC_EncodePriority+0x32>
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	fa02 f303 	lsl.w	r3, r2, r3
 800a09e:	43da      	mvns	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b2:	43d9      	mvns	r1, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0b8:	4313      	orrs	r3, r2
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3724      	adds	r7, #36	@ 0x24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr

0800a0c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0d4:	d301      	bcc.n	800a0da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e00f      	b.n	800a0fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0da:	4a0a      	ldr	r2, [pc, #40]	@ (800a104 <SysTick_Config+0x40>)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0e2:	210f      	movs	r1, #15
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0e8:	f7ff ff90 	bl	800a00c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <SysTick_Config+0x40>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0f2:	4b04      	ldr	r3, [pc, #16]	@ (800a104 <SysTick_Config+0x40>)
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	e000e010 	.word	0xe000e010

0800a108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff2d 	bl	8009f70 <__NVIC_SetPriorityGrouping>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a11e:	b580      	push	{r7, lr}
 800a120:	b086      	sub	sp, #24
 800a122:	af00      	add	r7, sp, #0
 800a124:	4603      	mov	r3, r0
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a130:	f7ff ff42 	bl	8009fb8 <__NVIC_GetPriorityGrouping>
 800a134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	6978      	ldr	r0, [r7, #20]
 800a13c:	f7ff ff90 	bl	800a060 <NVIC_EncodePriority>
 800a140:	4602      	mov	r2, r0
 800a142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a146:	4611      	mov	r1, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff ff5f 	bl	800a00c <__NVIC_SetPriority>
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	4603      	mov	r3, r0
 800a15e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff ff35 	bl	8009fd4 <__NVIC_EnableIRQ>
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff ffa2 	bl	800a0c4 <SysTick_Config>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b085      	sub	sp, #20
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d008      	beq.n	800a1b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2204      	movs	r2, #4
 800a1a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e020      	b.n	800a1f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 020e 	bic.w	r2, r2, #14
 800a1c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0201 	bic.w	r2, r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1dc:	2101      	movs	r1, #1
 800a1de:	fa01 f202 	lsl.w	r2, r1, r2
 800a1e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d005      	beq.n	800a224 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2204      	movs	r2, #4
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	73fb      	strb	r3, [r7, #15]
 800a222:	e0d6      	b.n	800a3d2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 020e 	bic.w	r2, r2, #14
 800a232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0201 	bic.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	4b64      	ldr	r3, [pc, #400]	@ (800a3dc <HAL_DMA_Abort_IT+0x1dc>)
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d958      	bls.n	800a302 <HAL_DMA_Abort_IT+0x102>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a62      	ldr	r2, [pc, #392]	@ (800a3e0 <HAL_DMA_Abort_IT+0x1e0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d04f      	beq.n	800a2fa <HAL_DMA_Abort_IT+0xfa>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a61      	ldr	r2, [pc, #388]	@ (800a3e4 <HAL_DMA_Abort_IT+0x1e4>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d048      	beq.n	800a2f6 <HAL_DMA_Abort_IT+0xf6>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a5f      	ldr	r2, [pc, #380]	@ (800a3e8 <HAL_DMA_Abort_IT+0x1e8>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d040      	beq.n	800a2f0 <HAL_DMA_Abort_IT+0xf0>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a5e      	ldr	r2, [pc, #376]	@ (800a3ec <HAL_DMA_Abort_IT+0x1ec>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d038      	beq.n	800a2ea <HAL_DMA_Abort_IT+0xea>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a5c      	ldr	r2, [pc, #368]	@ (800a3f0 <HAL_DMA_Abort_IT+0x1f0>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d030      	beq.n	800a2e4 <HAL_DMA_Abort_IT+0xe4>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a5b      	ldr	r2, [pc, #364]	@ (800a3f4 <HAL_DMA_Abort_IT+0x1f4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d028      	beq.n	800a2de <HAL_DMA_Abort_IT+0xde>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a52      	ldr	r2, [pc, #328]	@ (800a3dc <HAL_DMA_Abort_IT+0x1dc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d020      	beq.n	800a2d8 <HAL_DMA_Abort_IT+0xd8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a57      	ldr	r2, [pc, #348]	@ (800a3f8 <HAL_DMA_Abort_IT+0x1f8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d019      	beq.n	800a2d4 <HAL_DMA_Abort_IT+0xd4>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a55      	ldr	r2, [pc, #340]	@ (800a3fc <HAL_DMA_Abort_IT+0x1fc>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d012      	beq.n	800a2d0 <HAL_DMA_Abort_IT+0xd0>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a54      	ldr	r2, [pc, #336]	@ (800a400 <HAL_DMA_Abort_IT+0x200>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00a      	beq.n	800a2ca <HAL_DMA_Abort_IT+0xca>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a52      	ldr	r2, [pc, #328]	@ (800a404 <HAL_DMA_Abort_IT+0x204>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d102      	bne.n	800a2c4 <HAL_DMA_Abort_IT+0xc4>
 800a2be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2c2:	e01b      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2c8:	e018      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2ce:	e015      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	e013      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e011      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2dc:	e00e      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a2e2:	e00b      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2e8:	e008      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2ee:	e005      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2f4:	e002      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2f6:	2310      	movs	r3, #16
 800a2f8:	e000      	b.n	800a2fc <HAL_DMA_Abort_IT+0xfc>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4a42      	ldr	r2, [pc, #264]	@ (800a408 <HAL_DMA_Abort_IT+0x208>)
 800a2fe:	6053      	str	r3, [r2, #4]
 800a300:	e057      	b.n	800a3b2 <HAL_DMA_Abort_IT+0x1b2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a36      	ldr	r2, [pc, #216]	@ (800a3e0 <HAL_DMA_Abort_IT+0x1e0>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d04f      	beq.n	800a3ac <HAL_DMA_Abort_IT+0x1ac>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a34      	ldr	r2, [pc, #208]	@ (800a3e4 <HAL_DMA_Abort_IT+0x1e4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d048      	beq.n	800a3a8 <HAL_DMA_Abort_IT+0x1a8>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a33      	ldr	r2, [pc, #204]	@ (800a3e8 <HAL_DMA_Abort_IT+0x1e8>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d040      	beq.n	800a3a2 <HAL_DMA_Abort_IT+0x1a2>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a31      	ldr	r2, [pc, #196]	@ (800a3ec <HAL_DMA_Abort_IT+0x1ec>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d038      	beq.n	800a39c <HAL_DMA_Abort_IT+0x19c>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a30      	ldr	r2, [pc, #192]	@ (800a3f0 <HAL_DMA_Abort_IT+0x1f0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d030      	beq.n	800a396 <HAL_DMA_Abort_IT+0x196>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a2e      	ldr	r2, [pc, #184]	@ (800a3f4 <HAL_DMA_Abort_IT+0x1f4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d028      	beq.n	800a390 <HAL_DMA_Abort_IT+0x190>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a26      	ldr	r2, [pc, #152]	@ (800a3dc <HAL_DMA_Abort_IT+0x1dc>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d020      	beq.n	800a38a <HAL_DMA_Abort_IT+0x18a>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f8 <HAL_DMA_Abort_IT+0x1f8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d019      	beq.n	800a386 <HAL_DMA_Abort_IT+0x186>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a29      	ldr	r2, [pc, #164]	@ (800a3fc <HAL_DMA_Abort_IT+0x1fc>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d012      	beq.n	800a382 <HAL_DMA_Abort_IT+0x182>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a27      	ldr	r2, [pc, #156]	@ (800a400 <HAL_DMA_Abort_IT+0x200>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d00a      	beq.n	800a37c <HAL_DMA_Abort_IT+0x17c>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a26      	ldr	r2, [pc, #152]	@ (800a404 <HAL_DMA_Abort_IT+0x204>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d102      	bne.n	800a376 <HAL_DMA_Abort_IT+0x176>
 800a370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a374:	e01b      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a37a:	e018      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a37c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a380:	e015      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a382:	2310      	movs	r3, #16
 800a384:	e013      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a386:	2301      	movs	r3, #1
 800a388:	e011      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a38a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a38e:	e00e      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a390:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a394:	e00b      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a39a:	e008      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a39c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3a0:	e005      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a3a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3a6:	e002      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	e000      	b.n	800a3ae <HAL_DMA_Abort_IT+0x1ae>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4a17      	ldr	r2, [pc, #92]	@ (800a40c <HAL_DMA_Abort_IT+0x20c>)
 800a3b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
    } 
  }
  return status;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	40020080 	.word	0x40020080
 800a3e0:	40020008 	.word	0x40020008
 800a3e4:	4002001c 	.word	0x4002001c
 800a3e8:	40020030 	.word	0x40020030
 800a3ec:	40020044 	.word	0x40020044
 800a3f0:	40020058 	.word	0x40020058
 800a3f4:	4002006c 	.word	0x4002006c
 800a3f8:	40020408 	.word	0x40020408
 800a3fc:	4002041c 	.word	0x4002041c
 800a400:	40020430 	.word	0x40020430
 800a404:	40020444 	.word	0x40020444
 800a408:	40020400 	.word	0x40020400
 800a40c:	40020000 	.word	0x40020000

0800a410 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr
	...

0800a428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a428:	b480      	push	{r7}
 800a42a:	b08b      	sub	sp, #44	@ 0x2c
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a432:	2300      	movs	r3, #0
 800a434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a436:	2300      	movs	r3, #0
 800a438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a43a:	e179      	b.n	800a730 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a43c:	2201      	movs	r2, #1
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	fa02 f303 	lsl.w	r3, r2, r3
 800a444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	4013      	ands	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	429a      	cmp	r2, r3
 800a456:	f040 8168 	bne.w	800a72a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	4a96      	ldr	r2, [pc, #600]	@ (800a6b8 <HAL_GPIO_Init+0x290>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d05e      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
 800a464:	4a94      	ldr	r2, [pc, #592]	@ (800a6b8 <HAL_GPIO_Init+0x290>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d875      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a46a:	4a94      	ldr	r2, [pc, #592]	@ (800a6bc <HAL_GPIO_Init+0x294>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d058      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
 800a470:	4a92      	ldr	r2, [pc, #584]	@ (800a6bc <HAL_GPIO_Init+0x294>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d86f      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a476:	4a92      	ldr	r2, [pc, #584]	@ (800a6c0 <HAL_GPIO_Init+0x298>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d052      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
 800a47c:	4a90      	ldr	r2, [pc, #576]	@ (800a6c0 <HAL_GPIO_Init+0x298>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d869      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a482:	4a90      	ldr	r2, [pc, #576]	@ (800a6c4 <HAL_GPIO_Init+0x29c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d04c      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
 800a488:	4a8e      	ldr	r2, [pc, #568]	@ (800a6c4 <HAL_GPIO_Init+0x29c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d863      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a48e:	4a8e      	ldr	r2, [pc, #568]	@ (800a6c8 <HAL_GPIO_Init+0x2a0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d046      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
 800a494:	4a8c      	ldr	r2, [pc, #560]	@ (800a6c8 <HAL_GPIO_Init+0x2a0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d85d      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a49a:	2b12      	cmp	r3, #18
 800a49c:	d82a      	bhi.n	800a4f4 <HAL_GPIO_Init+0xcc>
 800a49e:	2b12      	cmp	r3, #18
 800a4a0:	d859      	bhi.n	800a556 <HAL_GPIO_Init+0x12e>
 800a4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a8 <HAL_GPIO_Init+0x80>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a523 	.word	0x0800a523
 800a4ac:	0800a4fd 	.word	0x0800a4fd
 800a4b0:	0800a50f 	.word	0x0800a50f
 800a4b4:	0800a551 	.word	0x0800a551
 800a4b8:	0800a557 	.word	0x0800a557
 800a4bc:	0800a557 	.word	0x0800a557
 800a4c0:	0800a557 	.word	0x0800a557
 800a4c4:	0800a557 	.word	0x0800a557
 800a4c8:	0800a557 	.word	0x0800a557
 800a4cc:	0800a557 	.word	0x0800a557
 800a4d0:	0800a557 	.word	0x0800a557
 800a4d4:	0800a557 	.word	0x0800a557
 800a4d8:	0800a557 	.word	0x0800a557
 800a4dc:	0800a557 	.word	0x0800a557
 800a4e0:	0800a557 	.word	0x0800a557
 800a4e4:	0800a557 	.word	0x0800a557
 800a4e8:	0800a557 	.word	0x0800a557
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a519 	.word	0x0800a519
 800a4f4:	4a75      	ldr	r2, [pc, #468]	@ (800a6cc <HAL_GPIO_Init+0x2a4>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d013      	beq.n	800a522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a4fa:	e02c      	b.n	800a556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	623b      	str	r3, [r7, #32]
          break;
 800a502:	e029      	b.n	800a558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	3304      	adds	r3, #4
 800a50a:	623b      	str	r3, [r7, #32]
          break;
 800a50c:	e024      	b.n	800a558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	3308      	adds	r3, #8
 800a514:	623b      	str	r3, [r7, #32]
          break;
 800a516:	e01f      	b.n	800a558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	330c      	adds	r3, #12
 800a51e:	623b      	str	r3, [r7, #32]
          break;
 800a520:	e01a      	b.n	800a558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d102      	bne.n	800a530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a52a:	2304      	movs	r3, #4
 800a52c:	623b      	str	r3, [r7, #32]
          break;
 800a52e:	e013      	b.n	800a558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d105      	bne.n	800a544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a538:	2308      	movs	r3, #8
 800a53a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	611a      	str	r2, [r3, #16]
          break;
 800a542:	e009      	b.n	800a558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a544:	2308      	movs	r3, #8
 800a546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	615a      	str	r2, [r3, #20]
          break;
 800a54e:	e003      	b.n	800a558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a550:	2300      	movs	r3, #0
 800a552:	623b      	str	r3, [r7, #32]
          break;
 800a554:	e000      	b.n	800a558 <HAL_GPIO_Init+0x130>
          break;
 800a556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2bff      	cmp	r3, #255	@ 0xff
 800a55c:	d801      	bhi.n	800a562 <HAL_GPIO_Init+0x13a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	e001      	b.n	800a566 <HAL_GPIO_Init+0x13e>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3304      	adds	r3, #4
 800a566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2bff      	cmp	r3, #255	@ 0xff
 800a56c:	d802      	bhi.n	800a574 <HAL_GPIO_Init+0x14c>
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	e002      	b.n	800a57a <HAL_GPIO_Init+0x152>
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a576:	3b08      	subs	r3, #8
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	210f      	movs	r1, #15
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	fa01 f303 	lsl.w	r3, r1, r3
 800a588:	43db      	mvns	r3, r3
 800a58a:	401a      	ands	r2, r3
 800a58c:	6a39      	ldr	r1, [r7, #32]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	fa01 f303 	lsl.w	r3, r1, r3
 800a594:	431a      	orrs	r2, r3
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 80c1 	beq.w	800a72a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a5a8:	4b49      	ldr	r3, [pc, #292]	@ (800a6d0 <HAL_GPIO_Init+0x2a8>)
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	4a48      	ldr	r2, [pc, #288]	@ (800a6d0 <HAL_GPIO_Init+0x2a8>)
 800a5ae:	f043 0301 	orr.w	r3, r3, #1
 800a5b2:	6193      	str	r3, [r2, #24]
 800a5b4:	4b46      	ldr	r3, [pc, #280]	@ (800a6d0 <HAL_GPIO_Init+0x2a8>)
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	60bb      	str	r3, [r7, #8]
 800a5be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a5c0:	4a44      	ldr	r2, [pc, #272]	@ (800a6d4 <HAL_GPIO_Init+0x2ac>)
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	089b      	lsrs	r3, r3, #2
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	220f      	movs	r2, #15
 800a5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5dc:	43db      	mvns	r3, r3
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a3c      	ldr	r2, [pc, #240]	@ (800a6d8 <HAL_GPIO_Init+0x2b0>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d01f      	beq.n	800a62c <HAL_GPIO_Init+0x204>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3b      	ldr	r2, [pc, #236]	@ (800a6dc <HAL_GPIO_Init+0x2b4>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d019      	beq.n	800a628 <HAL_GPIO_Init+0x200>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3a      	ldr	r2, [pc, #232]	@ (800a6e0 <HAL_GPIO_Init+0x2b8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d013      	beq.n	800a624 <HAL_GPIO_Init+0x1fc>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a39      	ldr	r2, [pc, #228]	@ (800a6e4 <HAL_GPIO_Init+0x2bc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00d      	beq.n	800a620 <HAL_GPIO_Init+0x1f8>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a38      	ldr	r2, [pc, #224]	@ (800a6e8 <HAL_GPIO_Init+0x2c0>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d007      	beq.n	800a61c <HAL_GPIO_Init+0x1f4>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a37      	ldr	r2, [pc, #220]	@ (800a6ec <HAL_GPIO_Init+0x2c4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d101      	bne.n	800a618 <HAL_GPIO_Init+0x1f0>
 800a614:	2305      	movs	r3, #5
 800a616:	e00a      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a618:	2306      	movs	r3, #6
 800a61a:	e008      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a61c:	2304      	movs	r3, #4
 800a61e:	e006      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a620:	2303      	movs	r3, #3
 800a622:	e004      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a624:	2302      	movs	r3, #2
 800a626:	e002      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <HAL_GPIO_Init+0x206>
 800a62c:	2300      	movs	r3, #0
 800a62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a630:	f002 0203 	and.w	r2, r2, #3
 800a634:	0092      	lsls	r2, r2, #2
 800a636:	4093      	lsls	r3, r2
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a63e:	4925      	ldr	r1, [pc, #148]	@ (800a6d4 <HAL_GPIO_Init+0x2ac>)
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	089b      	lsrs	r3, r3, #2
 800a644:	3302      	adds	r3, #2
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d006      	beq.n	800a666 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a658:	4b25      	ldr	r3, [pc, #148]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	4924      	ldr	r1, [pc, #144]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	4313      	orrs	r3, r2
 800a662:	608b      	str	r3, [r1, #8]
 800a664:	e006      	b.n	800a674 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a666:	4b22      	ldr	r3, [pc, #136]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	43db      	mvns	r3, r3
 800a66e:	4920      	ldr	r1, [pc, #128]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a670:	4013      	ands	r3, r2
 800a672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a680:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	491a      	ldr	r1, [pc, #104]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60cb      	str	r3, [r1, #12]
 800a68c:	e006      	b.n	800a69c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a68e:	4b18      	ldr	r3, [pc, #96]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	43db      	mvns	r3, r3
 800a696:	4916      	ldr	r1, [pc, #88]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a698:	4013      	ands	r3, r2
 800a69a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d025      	beq.n	800a6f4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a6a8:	4b11      	ldr	r3, [pc, #68]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	4910      	ldr	r1, [pc, #64]	@ (800a6f0 <HAL_GPIO_Init+0x2c8>)
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	604b      	str	r3, [r1, #4]
 800a6b4:	e025      	b.n	800a702 <HAL_GPIO_Init+0x2da>
 800a6b6:	bf00      	nop
 800a6b8:	10320000 	.word	0x10320000
 800a6bc:	10310000 	.word	0x10310000
 800a6c0:	10220000 	.word	0x10220000
 800a6c4:	10210000 	.word	0x10210000
 800a6c8:	10120000 	.word	0x10120000
 800a6cc:	10110000 	.word	0x10110000
 800a6d0:	40021000 	.word	0x40021000
 800a6d4:	40010000 	.word	0x40010000
 800a6d8:	40010800 	.word	0x40010800
 800a6dc:	40010c00 	.word	0x40010c00
 800a6e0:	40011000 	.word	0x40011000
 800a6e4:	40011400 	.word	0x40011400
 800a6e8:	40011800 	.word	0x40011800
 800a6ec:	40011c00 	.word	0x40011c00
 800a6f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a6f4:	4b15      	ldr	r3, [pc, #84]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	43db      	mvns	r3, r3
 800a6fc:	4913      	ldr	r1, [pc, #76]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a6fe:	4013      	ands	r3, r2
 800a700:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a70e:	4b0f      	ldr	r3, [pc, #60]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	490e      	ldr	r1, [pc, #56]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]
 800a71a:	e006      	b.n	800a72a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a71c:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	43db      	mvns	r3, r3
 800a724:	4909      	ldr	r1, [pc, #36]	@ (800a74c <HAL_GPIO_Init+0x324>)
 800a726:	4013      	ands	r3, r2
 800a728:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	3301      	adds	r3, #1
 800a72e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	fa22 f303 	lsr.w	r3, r2, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f47f ae7e 	bne.w	800a43c <HAL_GPIO_Init+0x14>
  }
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	372c      	adds	r7, #44	@ 0x2c
 800a746:	46bd      	mov	sp, r7
 800a748:	bc80      	pop	{r7}
 800a74a:	4770      	bx	lr
 800a74c:	40010400 	.word	0x40010400

0800a750 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a750:	b480      	push	{r7}
 800a752:	b089      	sub	sp, #36	@ 0x24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a75e:	e0a6      	b.n	800a8ae <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a760:	2201      	movs	r2, #1
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	fa02 f303 	lsl.w	r3, r2, r3
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	4013      	ands	r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 8099 	beq.w	800a8a8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a776:	4a54      	ldr	r2, [pc, #336]	@ (800a8c8 <HAL_GPIO_DeInit+0x178>)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	089b      	lsrs	r3, r3, #2
 800a77c:	3302      	adds	r3, #2
 800a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a782:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	220f      	movs	r2, #15
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4013      	ands	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a4c      	ldr	r2, [pc, #304]	@ (800a8cc <HAL_GPIO_DeInit+0x17c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d01f      	beq.n	800a7e0 <HAL_GPIO_DeInit+0x90>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a4b      	ldr	r2, [pc, #300]	@ (800a8d0 <HAL_GPIO_DeInit+0x180>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d019      	beq.n	800a7dc <HAL_GPIO_DeInit+0x8c>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a4a      	ldr	r2, [pc, #296]	@ (800a8d4 <HAL_GPIO_DeInit+0x184>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d013      	beq.n	800a7d8 <HAL_GPIO_DeInit+0x88>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a49      	ldr	r2, [pc, #292]	@ (800a8d8 <HAL_GPIO_DeInit+0x188>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00d      	beq.n	800a7d4 <HAL_GPIO_DeInit+0x84>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a48      	ldr	r2, [pc, #288]	@ (800a8dc <HAL_GPIO_DeInit+0x18c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d007      	beq.n	800a7d0 <HAL_GPIO_DeInit+0x80>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a47      	ldr	r2, [pc, #284]	@ (800a8e0 <HAL_GPIO_DeInit+0x190>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d101      	bne.n	800a7cc <HAL_GPIO_DeInit+0x7c>
 800a7c8:	2305      	movs	r3, #5
 800a7ca:	e00a      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7cc:	2306      	movs	r3, #6
 800a7ce:	e008      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	e006      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e004      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e002      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <HAL_GPIO_DeInit+0x92>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	f002 0203 	and.w	r2, r2, #3
 800a7e8:	0092      	lsls	r2, r2, #2
 800a7ea:	4093      	lsls	r3, r2
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d132      	bne.n	800a858 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a7f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	493a      	ldr	r1, [pc, #232]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a800:	4b38      	ldr	r3, [pc, #224]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	43db      	mvns	r3, r3
 800a808:	4936      	ldr	r1, [pc, #216]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a80e:	4b35      	ldr	r3, [pc, #212]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	43db      	mvns	r3, r3
 800a816:	4933      	ldr	r1, [pc, #204]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a818:	4013      	ands	r3, r2
 800a81a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a81c:	4b31      	ldr	r3, [pc, #196]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a81e:	689a      	ldr	r2, [r3, #8]
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	43db      	mvns	r3, r3
 800a824:	492f      	ldr	r1, [pc, #188]	@ (800a8e4 <HAL_GPIO_DeInit+0x194>)
 800a826:	4013      	ands	r3, r2
 800a828:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	220f      	movs	r2, #15
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a83a:	4a23      	ldr	r2, [pc, #140]	@ (800a8c8 <HAL_GPIO_DeInit+0x178>)
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	089b      	lsrs	r3, r3, #2
 800a840:	3302      	adds	r3, #2
 800a842:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	43da      	mvns	r2, r3
 800a84a:	481f      	ldr	r0, [pc, #124]	@ (800a8c8 <HAL_GPIO_DeInit+0x178>)
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	089b      	lsrs	r3, r3, #2
 800a850:	400a      	ands	r2, r1
 800a852:	3302      	adds	r3, #2
 800a854:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2bff      	cmp	r3, #255	@ 0xff
 800a85c:	d801      	bhi.n	800a862 <HAL_GPIO_DeInit+0x112>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	e001      	b.n	800a866 <HAL_GPIO_DeInit+0x116>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3304      	adds	r3, #4
 800a866:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	2bff      	cmp	r3, #255	@ 0xff
 800a86c:	d802      	bhi.n	800a874 <HAL_GPIO_DeInit+0x124>
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	e002      	b.n	800a87a <HAL_GPIO_DeInit+0x12a>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	3b08      	subs	r3, #8
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	210f      	movs	r1, #15
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	fa01 f303 	lsl.w	r3, r1, r3
 800a888:	43db      	mvns	r3, r3
 800a88a:	401a      	ands	r2, r3
 800a88c:	2104      	movs	r1, #4
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	fa01 f303 	lsl.w	r3, r1, r3
 800a894:	431a      	orrs	r2, r3
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	401a      	ands	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f47f af52 	bne.w	800a760 <HAL_GPIO_DeInit+0x10>
  }
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3724      	adds	r7, #36	@ 0x24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40010800 	.word	0x40010800
 800a8d0:	40010c00 	.word	0x40010c00
 800a8d4:	40011000 	.word	0x40011000
 800a8d8:	40011400 	.word	0x40011400
 800a8dc:	40011800 	.word	0x40011800
 800a8e0:	40011c00 	.word	0x40011c00
 800a8e4:	40010400 	.word	0x40010400

0800a8e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	887b      	ldrh	r3, [r7, #2]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a900:	2301      	movs	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
 800a904:	e001      	b.n	800a90a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr

0800a916 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	807b      	strh	r3, [r7, #2]
 800a922:	4613      	mov	r3, r2
 800a924:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a926:	787b      	ldrb	r3, [r7, #1]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a92c:	887a      	ldrh	r2, [r7, #2]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a932:	e003      	b.n	800a93c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a934:	887b      	ldrh	r3, [r7, #2]
 800a936:	041a      	lsls	r2, r3, #16
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	611a      	str	r2, [r3, #16]
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	bc80      	pop	{r7}
 800a944:	4770      	bx	lr

0800a946 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	460b      	mov	r3, r1
 800a950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a958:	887a      	ldrh	r2, [r7, #2]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4013      	ands	r3, r2
 800a95e:	041a      	lsls	r2, r3, #16
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	43d9      	mvns	r1, r3
 800a964:	887b      	ldrh	r3, [r7, #2]
 800a966:	400b      	ands	r3, r1
 800a968:	431a      	orrs	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	611a      	str	r2, [r3, #16]
}
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e12b      	b.n	800abe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fe ffe8 	bl	8009974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2224      	movs	r2, #36	@ 0x24
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f022 0201 	bic.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a9ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a9dc:	f001 fdb8 	bl	800c550 <HAL_RCC_GetPCLK1Freq>
 800a9e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	4a81      	ldr	r2, [pc, #516]	@ (800abec <HAL_I2C_Init+0x274>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d807      	bhi.n	800a9fc <HAL_I2C_Init+0x84>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4a80      	ldr	r2, [pc, #512]	@ (800abf0 <HAL_I2C_Init+0x278>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	bf94      	ite	ls
 800a9f4:	2301      	movls	r3, #1
 800a9f6:	2300      	movhi	r3, #0
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	e006      	b.n	800aa0a <HAL_I2C_Init+0x92>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4a7d      	ldr	r2, [pc, #500]	@ (800abf4 <HAL_I2C_Init+0x27c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	bf94      	ite	ls
 800aa04:	2301      	movls	r3, #1
 800aa06:	2300      	movhi	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e0e7      	b.n	800abe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4a78      	ldr	r2, [pc, #480]	@ (800abf8 <HAL_I2C_Init+0x280>)
 800aa16:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1a:	0c9b      	lsrs	r3, r3, #18
 800aa1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	4a6a      	ldr	r2, [pc, #424]	@ (800abec <HAL_I2C_Init+0x274>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d802      	bhi.n	800aa4c <HAL_I2C_Init+0xd4>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	e009      	b.n	800aa60 <HAL_I2C_Init+0xe8>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
 800aa56:	4a69      	ldr	r2, [pc, #420]	@ (800abfc <HAL_I2C_Init+0x284>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	099b      	lsrs	r3, r3, #6
 800aa5e:	3301      	adds	r3, #1
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	430b      	orrs	r3, r1
 800aa66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	495c      	ldr	r1, [pc, #368]	@ (800abec <HAL_I2C_Init+0x274>)
 800aa7c:	428b      	cmp	r3, r1
 800aa7e:	d819      	bhi.n	800aab4 <HAL_I2C_Init+0x13c>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	1e59      	subs	r1, r3, #1
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa8e:	1c59      	adds	r1, r3, #1
 800aa90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa94:	400b      	ands	r3, r1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <HAL_I2C_Init+0x138>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1e59      	subs	r1, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaae:	e051      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800aab0:	2304      	movs	r3, #4
 800aab2:	e04f      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d111      	bne.n	800aae0 <HAL_I2C_Init+0x168>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	1e58      	subs	r0, r3, #1
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6859      	ldr	r1, [r3, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	440b      	add	r3, r1
 800aaca:	fbb0 f3f3 	udiv	r3, r0, r3
 800aace:	3301      	adds	r3, #1
 800aad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2301      	moveq	r3, #1
 800aada:	2300      	movne	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	e012      	b.n	800ab06 <HAL_I2C_Init+0x18e>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	1e58      	subs	r0, r3, #1
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6859      	ldr	r1, [r3, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	440b      	add	r3, r1
 800aaee:	0099      	lsls	r1, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bf0c      	ite	eq
 800ab00:	2301      	moveq	r3, #1
 800ab02:	2300      	movne	r3, #0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <HAL_I2C_Init+0x196>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e022      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10e      	bne.n	800ab34 <HAL_I2C_Init+0x1bc>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	1e58      	subs	r0, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6859      	ldr	r1, [r3, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	440b      	add	r3, r1
 800ab24:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab28:	3301      	adds	r3, #1
 800ab2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab32:	e00f      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1e58      	subs	r0, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6859      	ldr	r1, [r3, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	0099      	lsls	r1, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	6809      	ldr	r1, [r1, #0]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69da      	ldr	r2, [r3, #28]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ab82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6911      	ldr	r1, [r2, #16]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68d2      	ldr	r2, [r2, #12]
 800ab8e:	4311      	orrs	r1, r2
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	430b      	orrs	r3, r1
 800ab96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695a      	ldr	r2, [r3, #20]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	431a      	orrs	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0201 	orr.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	000186a0 	.word	0x000186a0
 800abf0:	001e847f 	.word	0x001e847f
 800abf4:	003d08ff 	.word	0x003d08ff
 800abf8:	431bde83 	.word	0x431bde83
 800abfc:	10624dd3 	.word	0x10624dd3

0800ac00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e021      	b.n	800ac56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2224      	movs	r2, #36	@ 0x24
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0201 	bic.w	r2, r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7fe fee0 	bl	80099f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
	...

0800ac60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	817b      	strh	r3, [r7, #10]
 800ac70:	4613      	mov	r3, r2
 800ac72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac74:	f7ff f852 	bl	8009d1c <HAL_GetTick>
 800ac78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	f040 80e0 	bne.w	800ae48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	2319      	movs	r3, #25
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4970      	ldr	r1, [pc, #448]	@ (800ae54 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fe5c 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	e0d3      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <HAL_I2C_Master_Transmit+0x50>
 800acac:	2302      	movs	r3, #2
 800acae:	e0cc      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d007      	beq.n	800acd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0201 	orr.w	r2, r2, #1
 800acd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ace4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2221      	movs	r2, #33	@ 0x21
 800acea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2210      	movs	r2, #16
 800acf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	893a      	ldrh	r2, [r7, #8]
 800ad06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4a50      	ldr	r2, [pc, #320]	@ (800ae58 <HAL_I2C_Master_Transmit+0x1f8>)
 800ad16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ad18:	8979      	ldrh	r1, [r7, #10]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	6a3a      	ldr	r2, [r7, #32]
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 fc16 	bl	800b550 <I2C_MasterRequestWrite>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e08d      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	613b      	str	r3, [r7, #16]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	613b      	str	r3, [r7, #16]
 800ad42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ad44:	e066      	b.n	800ae14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	6a39      	ldr	r1, [r7, #32]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 ff1a 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00d      	beq.n	800ad72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d107      	bne.n	800ad6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e06b      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b04      	cmp	r3, #4
 800adae:	d11b      	bne.n	800ade8 <HAL_I2C_Master_Transmit+0x188>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d017      	beq.n	800ade8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbc:	781a      	ldrb	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800add2:	b29b      	uxth	r3, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	b29a      	uxth	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	6a39      	ldr	r1, [r7, #32]
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 ff11 	bl	800bc14 <I2C_WaitOnBTFFlagUntilTimeout>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00d      	beq.n	800ae14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	d107      	bne.n	800ae10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e01a      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d194      	bne.n	800ad46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	e000      	b.n	800ae4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ae48:	2302      	movs	r3, #2
  }
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	00100002 	.word	0x00100002
 800ae58:	ffff0000 	.word	0xffff0000

0800ae5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	817b      	strh	r3, [r7, #10]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	813b      	strh	r3, [r7, #8]
 800ae72:	4613      	mov	r3, r2
 800ae74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae76:	f7fe ff51 	bl	8009d1c <HAL_GetTick>
 800ae7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	f040 80d9 	bne.w	800b03c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	2319      	movs	r3, #25
 800ae90:	2201      	movs	r2, #1
 800ae92:	496d      	ldr	r1, [pc, #436]	@ (800b048 <HAL_I2C_Mem_Write+0x1ec>)
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fd5b 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800aea0:	2302      	movs	r3, #2
 800aea2:	e0cc      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <HAL_I2C_Mem_Write+0x56>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e0c5      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d007      	beq.n	800aed8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0201 	orr.w	r2, r2, #1
 800aed6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aee6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2221      	movs	r2, #33	@ 0x21
 800aeec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2240      	movs	r2, #64	@ 0x40
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6a3a      	ldr	r2, [r7, #32]
 800af02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800af08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af0e:	b29a      	uxth	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4a4d      	ldr	r2, [pc, #308]	@ (800b04c <HAL_I2C_Mem_Write+0x1f0>)
 800af18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af1a:	88f8      	ldrh	r0, [r7, #6]
 800af1c:	893a      	ldrh	r2, [r7, #8]
 800af1e:	8979      	ldrh	r1, [r7, #10]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4603      	mov	r3, r0
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 fb92 	bl	800b654 <I2C_RequestMemoryWrite>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d052      	beq.n	800afdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e081      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 fe20 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00d      	beq.n	800af66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4e:	2b04      	cmp	r3, #4
 800af50:	d107      	bne.n	800af62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e06b      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af80:	3b01      	subs	r3, #1
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	3b01      	subs	r3, #1
 800af90:	b29a      	uxth	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d11b      	bne.n	800afdc <HAL_I2C_Mem_Write+0x180>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	3b01      	subs	r3, #1
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1aa      	bne.n	800af3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 fe13 	bl	800bc14 <I2C_WaitOnBTFFlagUntilTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d107      	bne.n	800b00c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b00a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e016      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b01e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2220      	movs	r2, #32
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	e000      	b.n	800b03e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b03c:	2302      	movs	r3, #2
  }
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	00100002 	.word	0x00100002
 800b04c:	ffff0000 	.word	0xffff0000

0800b050 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08c      	sub	sp, #48	@ 0x30
 800b054:	af02      	add	r7, sp, #8
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	4603      	mov	r3, r0
 800b060:	817b      	strh	r3, [r7, #10]
 800b062:	460b      	mov	r3, r1
 800b064:	813b      	strh	r3, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b06e:	f7fe fe55 	bl	8009d1c <HAL_GetTick>
 800b072:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b20      	cmp	r3, #32
 800b07e:	f040 8244 	bne.w	800b50a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	2319      	movs	r3, #25
 800b088:	2201      	movs	r2, #1
 800b08a:	4982      	ldr	r1, [pc, #520]	@ (800b294 <HAL_I2C_Mem_Read+0x244>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fc5f 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b098:	2302      	movs	r3, #2
 800b09a:	e237      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d101      	bne.n	800b0aa <HAL_I2C_Mem_Read+0x5a>
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	e230      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d007      	beq.n	800b0d0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0201 	orr.w	r2, r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b0de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2222      	movs	r2, #34	@ 0x22
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2240      	movs	r2, #64	@ 0x40
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b106:	b29a      	uxth	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4a62      	ldr	r2, [pc, #392]	@ (800b298 <HAL_I2C_Mem_Read+0x248>)
 800b110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b112:	88f8      	ldrh	r0, [r7, #6]
 800b114:	893a      	ldrh	r2, [r7, #8]
 800b116:	8979      	ldrh	r1, [r7, #10]
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	4603      	mov	r3, r0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 fb2c 	bl	800b780 <I2C_RequestMemoryRead>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e1ec      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	d113      	bne.n	800b162 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b13a:	2300      	movs	r3, #0
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	61fb      	str	r3, [r7, #28]
 800b14e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	e1c0      	b.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b166:	2b01      	cmp	r3, #1
 800b168:	d11e      	bne.n	800b1a8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b178:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b17a:	b672      	cpsid	i
}
 800b17c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b17e:	2300      	movs	r3, #0
 800b180:	61bb      	str	r3, [r7, #24]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b1a4:	b662      	cpsie	i
}
 800b1a6:	e035      	b.n	800b214 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d11e      	bne.n	800b1ee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c0:	b672      	cpsid	i
}
 800b1c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b1ea:	b662      	cpsie	i
}
 800b1ec:	e012      	b.n	800b214 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1fc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1fe:	2300      	movs	r3, #0
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b214:	e166      	b.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	f200 811f 	bhi.w	800b45e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b224:	2b01      	cmp	r3, #1
 800b226:	d123      	bne.n	800b270 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b22a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 fd39 	bl	800bca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e167      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691a      	ldr	r2, [r3, #16]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b258:	3b01      	subs	r3, #1
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b264:	b29b      	uxth	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b26e:	e139      	b.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b274:	2b02      	cmp	r3, #2
 800b276:	d152      	bne.n	800b31e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	2200      	movs	r2, #0
 800b280:	4906      	ldr	r1, [pc, #24]	@ (800b29c <HAL_I2C_Mem_Read+0x24c>)
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 fb64 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d008      	beq.n	800b2a0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e13c      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
 800b292:	bf00      	nop
 800b294:	00100002 	.word	0x00100002
 800b298:	ffff0000 	.word	0xffff0000
 800b29c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b2a0:	b672      	cpsid	i
}
 800b2a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	691a      	ldr	r2, [r3, #16]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	b2d2      	uxtb	r2, r2
 800b2c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c6:	1c5a      	adds	r2, r3, #1
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b2e6:	b662      	cpsie	i
}
 800b2e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b306:	3b01      	subs	r3, #1
 800b308:	b29a      	uxth	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b312:	b29b      	uxth	r3, r3
 800b314:	3b01      	subs	r3, #1
 800b316:	b29a      	uxth	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b31c:	e0e2      	b.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	2200      	movs	r2, #0
 800b326:	497b      	ldr	r1, [pc, #492]	@ (800b514 <HAL_I2C_Mem_Read+0x4c4>)
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 fb11 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e0e9      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b348:	b672      	cpsid	i
}
 800b34a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b368:	3b01      	subs	r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b374:	b29b      	uxth	r3, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b37e:	4b66      	ldr	r3, [pc, #408]	@ (800b518 <HAL_I2C_Mem_Read+0x4c8>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	08db      	lsrs	r3, r3, #3
 800b384:	4a65      	ldr	r2, [pc, #404]	@ (800b51c <HAL_I2C_Mem_Read+0x4cc>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	0a1a      	lsrs	r2, r3, #8
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	00da      	lsls	r2, r3, #3
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d118      	bne.n	800b3d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3be:	f043 0220 	orr.w	r2, r3, #32
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b3c6:	b662      	cpsie	i
}
 800b3c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e09a      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	f003 0304 	and.w	r3, r3, #4
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d1d9      	bne.n	800b398 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	691a      	ldr	r2, [r3, #16]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	b2d2      	uxtb	r2, r2
 800b400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b410:	3b01      	subs	r3, #1
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b426:	b662      	cpsie	i
}
 800b428:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b434:	b2d2      	uxtb	r2, r2
 800b436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b446:	3b01      	subs	r3, #1
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b452:	b29b      	uxth	r3, r3
 800b454:	3b01      	subs	r3, #1
 800b456:	b29a      	uxth	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b45c:	e042      	b.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b460:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 fc1e 	bl	800bca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e04c      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b48e:	3b01      	subs	r3, #1
 800b490:	b29a      	uxth	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	3b01      	subs	r3, #1
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d118      	bne.n	800b4e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	691a      	ldr	r2, [r3, #16]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c4:	1c5a      	adds	r2, r3, #1
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f47f ae94 	bne.w	800b216 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	e000      	b.n	800b50c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b50a:	2302      	movs	r3, #2
  }
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3728      	adds	r7, #40	@ 0x28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	00010004 	.word	0x00010004
 800b518:	20000f74 	.word	0x20000f74
 800b51c:	14f8b589 	.word	0x14f8b589

0800b520 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b52e:	b2db      	uxtb	r3, r3
}
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr

0800b53a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bc80      	pop	{r7}
 800b54e:	4770      	bx	lr

0800b550 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	460b      	mov	r3, r1
 800b55e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b564:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d006      	beq.n	800b57a <I2C_MasterRequestWrite+0x2a>
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d003      	beq.n	800b57a <I2C_MasterRequestWrite+0x2a>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b578:	d108      	bne.n	800b58c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	e00b      	b.n	800b5a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b590:	2b12      	cmp	r3, #18
 800b592:	d107      	bne.n	800b5a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 f9cd 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00d      	beq.n	800b5d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ca:	d103      	bne.n	800b5d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e035      	b.n	800b644 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5e0:	d108      	bne.n	800b5f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5e2:	897b      	ldrh	r3, [r7, #10]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b5f0:	611a      	str	r2, [r3, #16]
 800b5f2:	e01b      	b.n	800b62c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5f4:	897b      	ldrh	r3, [r7, #10]
 800b5f6:	11db      	asrs	r3, r3, #7
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	f003 0306 	and.w	r3, r3, #6
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f063 030f 	orn	r3, r3, #15
 800b604:	b2da      	uxtb	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	490e      	ldr	r1, [pc, #56]	@ (800b64c <I2C_MasterRequestWrite+0xfc>)
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fa16 	bl	800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e010      	b.n	800b644 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b622:	897b      	ldrh	r3, [r7, #10]
 800b624:	b2da      	uxtb	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	4907      	ldr	r1, [pc, #28]	@ (800b650 <I2C_MasterRequestWrite+0x100>)
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fa06 	bl	800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	00010008 	.word	0x00010008
 800b650:	00010002 	.word	0x00010002

0800b654 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af02      	add	r7, sp, #8
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	4608      	mov	r0, r1
 800b65e:	4611      	mov	r1, r2
 800b660:	461a      	mov	r2, r3
 800b662:	4603      	mov	r3, r0
 800b664:	817b      	strh	r3, [r7, #10]
 800b666:	460b      	mov	r3, r1
 800b668:	813b      	strh	r3, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b67c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	2200      	movs	r2, #0
 800b686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 f960 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00d      	beq.n	800b6b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6a4:	d103      	bne.n	800b6ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e05f      	b.n	800b772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b6b2:	897b      	ldrh	r3, [r7, #10]
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b6c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c4:	6a3a      	ldr	r2, [r7, #32]
 800b6c6:	492d      	ldr	r1, [pc, #180]	@ (800b77c <I2C_RequestMemoryWrite+0x128>)
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f9bb 	bl	800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e04c      	b.n	800b772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	617b      	str	r3, [r7, #20]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f0:	6a39      	ldr	r1, [r7, #32]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 fa46 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b702:	2b04      	cmp	r3, #4
 800b704:	d107      	bne.n	800b716 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e02b      	b.n	800b772 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b71a:	88fb      	ldrh	r3, [r7, #6]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d105      	bne.n	800b72c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b720:	893b      	ldrh	r3, [r7, #8]
 800b722:	b2da      	uxtb	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	611a      	str	r2, [r3, #16]
 800b72a:	e021      	b.n	800b770 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b72c:	893b      	ldrh	r3, [r7, #8]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	b29b      	uxth	r3, r3
 800b732:	b2da      	uxtb	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b73c:	6a39      	ldr	r1, [r7, #32]
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 fa20 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00d      	beq.n	800b766 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d107      	bne.n	800b762 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e005      	b.n	800b772 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b766:	893b      	ldrh	r3, [r7, #8]
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	00010002 	.word	0x00010002

0800b780 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af02      	add	r7, sp, #8
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	4608      	mov	r0, r1
 800b78a:	4611      	mov	r1, r2
 800b78c:	461a      	mov	r2, r3
 800b78e:	4603      	mov	r3, r0
 800b790:	817b      	strh	r3, [r7, #10]
 800b792:	460b      	mov	r3, r1
 800b794:	813b      	strh	r3, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f8c2 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7e0:	d103      	bne.n	800b7ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e0aa      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7ee:	897b      	ldrh	r3, [r7, #10]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b7fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b800:	6a3a      	ldr	r2, [r7, #32]
 800b802:	4952      	ldr	r1, [pc, #328]	@ (800b94c <I2C_RequestMemoryRead+0x1cc>)
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 f91d 	bl	800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e097      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b82c:	6a39      	ldr	r1, [r7, #32]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 f9a8 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00d      	beq.n	800b856 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d107      	bne.n	800b852 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b850:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e076      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b856:	88fb      	ldrh	r3, [r7, #6]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d105      	bne.n	800b868 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b85c:	893b      	ldrh	r3, [r7, #8]
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	611a      	str	r2, [r3, #16]
 800b866:	e021      	b.n	800b8ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b868:	893b      	ldrh	r3, [r7, #8]
 800b86a:	0a1b      	lsrs	r3, r3, #8
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b878:	6a39      	ldr	r1, [r7, #32]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f982 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00d      	beq.n	800b8a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b88a:	2b04      	cmp	r3, #4
 800b88c:	d107      	bne.n	800b89e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b89c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e050      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b8a2:	893b      	ldrh	r3, [r7, #8]
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ae:	6a39      	ldr	r1, [r7, #32]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 f967 	bl	800bb84 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00d      	beq.n	800b8d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d107      	bne.n	800b8d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e035      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 f82b 	bl	800b950 <I2C_WaitOnFlagUntilTimeout>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00d      	beq.n	800b91c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b90a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b90e:	d103      	bne.n	800b918 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b916:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e013      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b91c:	897b      	ldrh	r3, [r7, #10]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f043 0301 	orr.w	r3, r3, #1
 800b924:	b2da      	uxtb	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92e:	6a3a      	ldr	r2, [r7, #32]
 800b930:	4906      	ldr	r1, [pc, #24]	@ (800b94c <I2C_RequestMemoryRead+0x1cc>)
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 f886 	bl	800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	00010002 	.word	0x00010002

0800b950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b960:	e048      	b.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b968:	d044      	beq.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b96a:	f7fe f9d7 	bl	8009d1c <HAL_GetTick>
 800b96e:	4602      	mov	r2, r0
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d302      	bcc.n	800b980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d139      	bne.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	0c1b      	lsrs	r3, r3, #16
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10d      	bne.n	800b9a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	43da      	mvns	r2, r3
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	4013      	ands	r3, r2
 800b996:	b29b      	uxth	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bf0c      	ite	eq
 800b99c:	2301      	moveq	r3, #1
 800b99e:	2300      	movne	r3, #0
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	e00c      	b.n	800b9c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	43da      	mvns	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bf0c      	ite	eq
 800b9b8:	2301      	moveq	r3, #1
 800b9ba:	2300      	movne	r3, #0
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d116      	bne.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e0:	f043 0220 	orr.w	r2, r3, #32
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e023      	b.n	800ba3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	0c1b      	lsrs	r3, r3, #16
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d10d      	bne.n	800ba1a <I2C_WaitOnFlagUntilTimeout+0xca>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	43da      	mvns	r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bf0c      	ite	eq
 800ba10:	2301      	moveq	r3, #1
 800ba12:	2300      	movne	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	e00c      	b.n	800ba34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	43da      	mvns	r2, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	4013      	ands	r3, r2
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2301      	moveq	r3, #1
 800ba2e:	2300      	movne	r3, #0
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	461a      	mov	r2, r3
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d093      	beq.n	800b962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba52:	e071      	b.n	800bb38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba62:	d123      	bne.n	800baac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba98:	f043 0204 	orr.w	r2, r3, #4
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e067      	b.n	800bb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bab2:	d041      	beq.n	800bb38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bab4:	f7fe f932 	bl	8009d1c <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d302      	bcc.n	800baca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d136      	bne.n	800bb38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	0c1b      	lsrs	r3, r3, #16
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d10c      	bne.n	800baee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	43da      	mvns	r2, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4013      	ands	r3, r2
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf14      	ite	ne
 800bae6:	2301      	movne	r3, #1
 800bae8:	2300      	moveq	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	e00b      	b.n	800bb06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	43da      	mvns	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	4013      	ands	r3, r2
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	bf14      	ite	ne
 800bb00:	2301      	movne	r3, #1
 800bb02:	2300      	moveq	r3, #0
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d016      	beq.n	800bb38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2220      	movs	r2, #32
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb24:	f043 0220 	orr.w	r2, r3, #32
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e021      	b.n	800bb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	0c1b      	lsrs	r3, r3, #16
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d10c      	bne.n	800bb5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	43da      	mvns	r2, r3
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bf14      	ite	ne
 800bb54:	2301      	movne	r3, #1
 800bb56:	2300      	moveq	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	e00b      	b.n	800bb74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	43da      	mvns	r2, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	4013      	ands	r3, r2
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	bf14      	ite	ne
 800bb6e:	2301      	movne	r3, #1
 800bb70:	2300      	moveq	r3, #0
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f47f af6d 	bne.w	800ba54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb90:	e034      	b.n	800bbfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 f8e3 	bl	800bd5e <I2C_IsAcknowledgeFailed>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e034      	b.n	800bc0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bba8:	d028      	beq.n	800bbfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbaa:	f7fe f8b7 	bl	8009d1c <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d302      	bcc.n	800bbc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d11d      	bne.n	800bbfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbca:	2b80      	cmp	r3, #128	@ 0x80
 800bbcc:	d016      	beq.n	800bbfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe8:	f043 0220 	orr.w	r2, r3, #32
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e007      	b.n	800bc0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc06:	2b80      	cmp	r3, #128	@ 0x80
 800bc08:	d1c3      	bne.n	800bb92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc20:	e034      	b.n	800bc8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 f89b 	bl	800bd5e <I2C_IsAcknowledgeFailed>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e034      	b.n	800bc9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc38:	d028      	beq.n	800bc8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc3a:	f7fe f86f 	bl	8009d1c <HAL_GetTick>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d302      	bcc.n	800bc50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11d      	bne.n	800bc8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d016      	beq.n	800bc8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2220      	movs	r2, #32
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc78:	f043 0220 	orr.w	r2, r3, #32
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e007      	b.n	800bc9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	f003 0304 	and.w	r3, r3, #4
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d1c3      	bne.n	800bc22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcb0:	e049      	b.n	800bd46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	f003 0310 	and.w	r3, r3, #16
 800bcbc:	2b10      	cmp	r3, #16
 800bcbe:	d119      	bne.n	800bcf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f06f 0210 	mvn.w	r2, #16
 800bcc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e030      	b.n	800bd56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcf4:	f7fe f812 	bl	8009d1c <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d302      	bcc.n	800bd0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d11d      	bne.n	800bd46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd14:	2b40      	cmp	r3, #64	@ 0x40
 800bd16:	d016      	beq.n	800bd46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2220      	movs	r2, #32
 800bd22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd32:	f043 0220 	orr.w	r2, r3, #32
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e007      	b.n	800bd56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd50:	2b40      	cmp	r3, #64	@ 0x40
 800bd52:	d1ae      	bne.n	800bcb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd74:	d11b      	bne.n	800bdae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2220      	movs	r2, #32
 800bd8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9a:	f043 0204 	orr.w	r2, r3, #4
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e000      	b.n	800bdb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc80      	pop	{r7}
 800bdb8:	4770      	bx	lr
	...

0800bdbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e272      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 8087 	beq.w	800beea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bddc:	4b92      	ldr	r3, [pc, #584]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	f003 030c 	and.w	r3, r3, #12
 800bde4:	2b04      	cmp	r3, #4
 800bde6:	d00c      	beq.n	800be02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bde8:	4b8f      	ldr	r3, [pc, #572]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f003 030c 	and.w	r3, r3, #12
 800bdf0:	2b08      	cmp	r3, #8
 800bdf2:	d112      	bne.n	800be1a <HAL_RCC_OscConfig+0x5e>
 800bdf4:	4b8c      	ldr	r3, [pc, #560]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be00:	d10b      	bne.n	800be1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be02:	4b89      	ldr	r3, [pc, #548]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d06c      	beq.n	800bee8 <HAL_RCC_OscConfig+0x12c>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d168      	bne.n	800bee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e24c      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be22:	d106      	bne.n	800be32 <HAL_RCC_OscConfig+0x76>
 800be24:	4b80      	ldr	r3, [pc, #512]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a7f      	ldr	r2, [pc, #508]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	e02e      	b.n	800be90 <HAL_RCC_OscConfig+0xd4>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10c      	bne.n	800be54 <HAL_RCC_OscConfig+0x98>
 800be3a:	4b7b      	ldr	r3, [pc, #492]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a7a      	ldr	r2, [pc, #488]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	4b78      	ldr	r3, [pc, #480]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a77      	ldr	r2, [pc, #476]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	e01d      	b.n	800be90 <HAL_RCC_OscConfig+0xd4>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be5c:	d10c      	bne.n	800be78 <HAL_RCC_OscConfig+0xbc>
 800be5e:	4b72      	ldr	r3, [pc, #456]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a71      	ldr	r2, [pc, #452]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be68:	6013      	str	r3, [r2, #0]
 800be6a:	4b6f      	ldr	r3, [pc, #444]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a6e      	ldr	r2, [pc, #440]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	e00b      	b.n	800be90 <HAL_RCC_OscConfig+0xd4>
 800be78:	4b6b      	ldr	r3, [pc, #428]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a6a      	ldr	r2, [pc, #424]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	4b68      	ldr	r3, [pc, #416]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a67      	ldr	r2, [pc, #412]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800be8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d013      	beq.n	800bec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be98:	f7fd ff40 	bl	8009d1c <HAL_GetTick>
 800be9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be9e:	e008      	b.n	800beb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bea0:	f7fd ff3c 	bl	8009d1c <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b64      	cmp	r3, #100	@ 0x64
 800beac:	d901      	bls.n	800beb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e200      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800beb2:	4b5d      	ldr	r3, [pc, #372]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d0f0      	beq.n	800bea0 <HAL_RCC_OscConfig+0xe4>
 800bebe:	e014      	b.n	800beea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bec0:	f7fd ff2c 	bl	8009d1c <HAL_GetTick>
 800bec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bec6:	e008      	b.n	800beda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bec8:	f7fd ff28 	bl	8009d1c <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	2b64      	cmp	r3, #100	@ 0x64
 800bed4:	d901      	bls.n	800beda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e1ec      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800beda:	4b53      	ldr	r3, [pc, #332]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f0      	bne.n	800bec8 <HAL_RCC_OscConfig+0x10c>
 800bee6:	e000      	b.n	800beea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d063      	beq.n	800bfbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bef6:	4b4c      	ldr	r3, [pc, #304]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f003 030c 	and.w	r3, r3, #12
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00b      	beq.n	800bf1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bf02:	4b49      	ldr	r3, [pc, #292]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f003 030c 	and.w	r3, r3, #12
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d11c      	bne.n	800bf48 <HAL_RCC_OscConfig+0x18c>
 800bf0e:	4b46      	ldr	r3, [pc, #280]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d116      	bne.n	800bf48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf1a:	4b43      	ldr	r3, [pc, #268]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d005      	beq.n	800bf32 <HAL_RCC_OscConfig+0x176>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d001      	beq.n	800bf32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e1c0      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf32:	4b3d      	ldr	r3, [pc, #244]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4939      	ldr	r1, [pc, #228]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf46:	e03a      	b.n	800bfbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d020      	beq.n	800bf92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf50:	4b36      	ldr	r3, [pc, #216]	@ (800c02c <HAL_RCC_OscConfig+0x270>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf56:	f7fd fee1 	bl	8009d1c <HAL_GetTick>
 800bf5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf5c:	e008      	b.n	800bf70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf5e:	f7fd fedd 	bl	8009d1c <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d901      	bls.n	800bf70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e1a1      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf70:	4b2d      	ldr	r3, [pc, #180]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf7c:	4b2a      	ldr	r3, [pc, #168]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	4927      	ldr	r1, [pc, #156]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	600b      	str	r3, [r1, #0]
 800bf90:	e015      	b.n	800bfbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf92:	4b26      	ldr	r3, [pc, #152]	@ (800c02c <HAL_RCC_OscConfig+0x270>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf98:	f7fd fec0 	bl	8009d1c <HAL_GetTick>
 800bf9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf9e:	e008      	b.n	800bfb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfa0:	f7fd febc 	bl	8009d1c <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e180      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bfb2:	4b1d      	ldr	r3, [pc, #116]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1f0      	bne.n	800bfa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0308 	and.w	r3, r3, #8
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d03a      	beq.n	800c040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d019      	beq.n	800c006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bfd2:	4b17      	ldr	r3, [pc, #92]	@ (800c030 <HAL_RCC_OscConfig+0x274>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfd8:	f7fd fea0 	bl	8009d1c <HAL_GetTick>
 800bfdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfde:	e008      	b.n	800bff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfe0:	f7fd fe9c 	bl	8009d1c <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d901      	bls.n	800bff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e160      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bff2:	4b0d      	ldr	r3, [pc, #52]	@ (800c028 <HAL_RCC_OscConfig+0x26c>)
 800bff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0f0      	beq.n	800bfe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bffe:	2001      	movs	r0, #1
 800c000:	f000 face 	bl	800c5a0 <RCC_Delay>
 800c004:	e01c      	b.n	800c040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c006:	4b0a      	ldr	r3, [pc, #40]	@ (800c030 <HAL_RCC_OscConfig+0x274>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c00c:	f7fd fe86 	bl	8009d1c <HAL_GetTick>
 800c010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c012:	e00f      	b.n	800c034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c014:	f7fd fe82 	bl	8009d1c <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d908      	bls.n	800c034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e146      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
 800c026:	bf00      	nop
 800c028:	40021000 	.word	0x40021000
 800c02c:	42420000 	.word	0x42420000
 800c030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c034:	4b92      	ldr	r3, [pc, #584]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c038:	f003 0302 	and.w	r3, r3, #2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e9      	bne.n	800c014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 80a6 	beq.w	800c19a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c04e:	2300      	movs	r3, #0
 800c050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c052:	4b8b      	ldr	r3, [pc, #556]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10d      	bne.n	800c07a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c05e:	4b88      	ldr	r3, [pc, #544]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	4a87      	ldr	r2, [pc, #540]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c068:	61d3      	str	r3, [r2, #28]
 800c06a:	4b85      	ldr	r3, [pc, #532]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c072:	60bb      	str	r3, [r7, #8]
 800c074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c076:	2301      	movs	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c07a:	4b82      	ldr	r3, [pc, #520]	@ (800c284 <HAL_RCC_OscConfig+0x4c8>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c082:	2b00      	cmp	r3, #0
 800c084:	d118      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c086:	4b7f      	ldr	r3, [pc, #508]	@ (800c284 <HAL_RCC_OscConfig+0x4c8>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a7e      	ldr	r2, [pc, #504]	@ (800c284 <HAL_RCC_OscConfig+0x4c8>)
 800c08c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c092:	f7fd fe43 	bl	8009d1c <HAL_GetTick>
 800c096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c098:	e008      	b.n	800c0ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c09a:	f7fd fe3f 	bl	8009d1c <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	2b64      	cmp	r3, #100	@ 0x64
 800c0a6:	d901      	bls.n	800c0ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e103      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0ac:	4b75      	ldr	r3, [pc, #468]	@ (800c284 <HAL_RCC_OscConfig+0x4c8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0f0      	beq.n	800c09a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d106      	bne.n	800c0ce <HAL_RCC_OscConfig+0x312>
 800c0c0:	4b6f      	ldr	r3, [pc, #444]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	4a6e      	ldr	r2, [pc, #440]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	6213      	str	r3, [r2, #32]
 800c0cc:	e02d      	b.n	800c12a <HAL_RCC_OscConfig+0x36e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10c      	bne.n	800c0f0 <HAL_RCC_OscConfig+0x334>
 800c0d6:	4b6a      	ldr	r3, [pc, #424]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	4a69      	ldr	r2, [pc, #420]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0dc:	f023 0301 	bic.w	r3, r3, #1
 800c0e0:	6213      	str	r3, [r2, #32]
 800c0e2:	4b67      	ldr	r3, [pc, #412]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	4a66      	ldr	r2, [pc, #408]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0e8:	f023 0304 	bic.w	r3, r3, #4
 800c0ec:	6213      	str	r3, [r2, #32]
 800c0ee:	e01c      	b.n	800c12a <HAL_RCC_OscConfig+0x36e>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b05      	cmp	r3, #5
 800c0f6:	d10c      	bne.n	800c112 <HAL_RCC_OscConfig+0x356>
 800c0f8:	4b61      	ldr	r3, [pc, #388]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	4a60      	ldr	r2, [pc, #384]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c0fe:	f043 0304 	orr.w	r3, r3, #4
 800c102:	6213      	str	r3, [r2, #32]
 800c104:	4b5e      	ldr	r3, [pc, #376]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	4a5d      	ldr	r2, [pc, #372]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c10a:	f043 0301 	orr.w	r3, r3, #1
 800c10e:	6213      	str	r3, [r2, #32]
 800c110:	e00b      	b.n	800c12a <HAL_RCC_OscConfig+0x36e>
 800c112:	4b5b      	ldr	r3, [pc, #364]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	4a5a      	ldr	r2, [pc, #360]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c118:	f023 0301 	bic.w	r3, r3, #1
 800c11c:	6213      	str	r3, [r2, #32]
 800c11e:	4b58      	ldr	r3, [pc, #352]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	4a57      	ldr	r2, [pc, #348]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c124:	f023 0304 	bic.w	r3, r3, #4
 800c128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d015      	beq.n	800c15e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c132:	f7fd fdf3 	bl	8009d1c <HAL_GetTick>
 800c136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c138:	e00a      	b.n	800c150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c13a:	f7fd fdef 	bl	8009d1c <HAL_GetTick>
 800c13e:	4602      	mov	r2, r0
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c148:	4293      	cmp	r3, r2
 800c14a:	d901      	bls.n	800c150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e0b1      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c150:	4b4b      	ldr	r3, [pc, #300]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	f003 0302 	and.w	r3, r3, #2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0ee      	beq.n	800c13a <HAL_RCC_OscConfig+0x37e>
 800c15c:	e014      	b.n	800c188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c15e:	f7fd fddd 	bl	8009d1c <HAL_GetTick>
 800c162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c164:	e00a      	b.n	800c17c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c166:	f7fd fdd9 	bl	8009d1c <HAL_GetTick>
 800c16a:	4602      	mov	r2, r0
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c174:	4293      	cmp	r3, r2
 800c176:	d901      	bls.n	800c17c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e09b      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c17c:	4b40      	ldr	r3, [pc, #256]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1ee      	bne.n	800c166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d105      	bne.n	800c19a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c18e:	4b3c      	ldr	r3, [pc, #240]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	4a3b      	ldr	r2, [pc, #236]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8087 	beq.w	800c2b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c1a4:	4b36      	ldr	r3, [pc, #216]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f003 030c 	and.w	r3, r3, #12
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d061      	beq.n	800c274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d146      	bne.n	800c246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1b8:	4b33      	ldr	r3, [pc, #204]	@ (800c288 <HAL_RCC_OscConfig+0x4cc>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1be:	f7fd fdad 	bl	8009d1c <HAL_GetTick>
 800c1c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1c4:	e008      	b.n	800c1d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1c6:	f7fd fda9 	bl	8009d1c <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d901      	bls.n	800c1d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e06d      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1d8:	4b29      	ldr	r3, [pc, #164]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1f0      	bne.n	800c1c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a1b      	ldr	r3, [r3, #32]
 800c1e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1ec:	d108      	bne.n	800c200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c1ee:	4b24      	ldr	r3, [pc, #144]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	4921      	ldr	r1, [pc, #132]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c200:	4b1f      	ldr	r3, [pc, #124]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a19      	ldr	r1, [r3, #32]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c210:	430b      	orrs	r3, r1
 800c212:	491b      	ldr	r1, [pc, #108]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c214:	4313      	orrs	r3, r2
 800c216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c218:	4b1b      	ldr	r3, [pc, #108]	@ (800c288 <HAL_RCC_OscConfig+0x4cc>)
 800c21a:	2201      	movs	r2, #1
 800c21c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c21e:	f7fd fd7d 	bl	8009d1c <HAL_GetTick>
 800c222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c224:	e008      	b.n	800c238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c226:	f7fd fd79 	bl	8009d1c <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e03d      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c238:	4b11      	ldr	r3, [pc, #68]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0f0      	beq.n	800c226 <HAL_RCC_OscConfig+0x46a>
 800c244:	e035      	b.n	800c2b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c246:	4b10      	ldr	r3, [pc, #64]	@ (800c288 <HAL_RCC_OscConfig+0x4cc>)
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c24c:	f7fd fd66 	bl	8009d1c <HAL_GetTick>
 800c250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c252:	e008      	b.n	800c266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c254:	f7fd fd62 	bl	8009d1c <HAL_GetTick>
 800c258:	4602      	mov	r2, r0
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d901      	bls.n	800c266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e026      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c266:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <HAL_RCC_OscConfig+0x4c4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1f0      	bne.n	800c254 <HAL_RCC_OscConfig+0x498>
 800c272:	e01e      	b.n	800c2b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	69db      	ldr	r3, [r3, #28]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d107      	bne.n	800c28c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e019      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
 800c280:	40021000 	.word	0x40021000
 800c284:	40007000 	.word	0x40007000
 800c288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c28c:	4b0b      	ldr	r3, [pc, #44]	@ (800c2bc <HAL_RCC_OscConfig+0x500>)
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d106      	bne.n	800c2ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d001      	beq.n	800c2b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e000      	b.n	800c2b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	40021000 	.word	0x40021000

0800c2c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e0d0      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c2d4:	4b6a      	ldr	r3, [pc, #424]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0307 	and.w	r3, r3, #7
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d910      	bls.n	800c304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2e2:	4b67      	ldr	r3, [pc, #412]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f023 0207 	bic.w	r2, r3, #7
 800c2ea:	4965      	ldr	r1, [pc, #404]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2f2:	4b63      	ldr	r3, [pc, #396]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d001      	beq.n	800c304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e0b8      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 0302 	and.w	r3, r3, #2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d020      	beq.n	800c352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 0304 	and.w	r3, r3, #4
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c31c:	4b59      	ldr	r3, [pc, #356]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4a58      	ldr	r2, [pc, #352]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0308 	and.w	r3, r3, #8
 800c330:	2b00      	cmp	r3, #0
 800c332:	d005      	beq.n	800c340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c334:	4b53      	ldr	r3, [pc, #332]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	4a52      	ldr	r2, [pc, #328]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c33a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c33e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c340:	4b50      	ldr	r3, [pc, #320]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	494d      	ldr	r1, [pc, #308]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d040      	beq.n	800c3e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d107      	bne.n	800c376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c366:	4b47      	ldr	r3, [pc, #284]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d115      	bne.n	800c39e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e07f      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d107      	bne.n	800c38e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c37e:	4b41      	ldr	r3, [pc, #260]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c386:	2b00      	cmp	r3, #0
 800c388:	d109      	bne.n	800c39e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e073      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c38e:	4b3d      	ldr	r3, [pc, #244]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e06b      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c39e:	4b39      	ldr	r3, [pc, #228]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	f023 0203 	bic.w	r2, r3, #3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4936      	ldr	r1, [pc, #216]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c3b0:	f7fd fcb4 	bl	8009d1c <HAL_GetTick>
 800c3b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3b6:	e00a      	b.n	800c3ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3b8:	f7fd fcb0 	bl	8009d1c <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e053      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3ce:	4b2d      	ldr	r3, [pc, #180]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f003 020c 	and.w	r2, r3, #12
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d1eb      	bne.n	800c3b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3e0:	4b27      	ldr	r3, [pc, #156]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0307 	and.w	r3, r3, #7
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d210      	bcs.n	800c410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ee:	4b24      	ldr	r3, [pc, #144]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f023 0207 	bic.w	r2, r3, #7
 800c3f6:	4922      	ldr	r1, [pc, #136]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3fe:	4b20      	ldr	r3, [pc, #128]	@ (800c480 <HAL_RCC_ClockConfig+0x1c0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0307 	and.w	r3, r3, #7
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d001      	beq.n	800c410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e032      	b.n	800c476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d008      	beq.n	800c42e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c41c:	4b19      	ldr	r3, [pc, #100]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	4916      	ldr	r1, [pc, #88]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0308 	and.w	r3, r3, #8
 800c436:	2b00      	cmp	r3, #0
 800c438:	d009      	beq.n	800c44e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c43a:	4b12      	ldr	r3, [pc, #72]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	490e      	ldr	r1, [pc, #56]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c44e:	f000 f821 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800c452:	4602      	mov	r2, r0
 800c454:	4b0b      	ldr	r3, [pc, #44]	@ (800c484 <HAL_RCC_ClockConfig+0x1c4>)
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	091b      	lsrs	r3, r3, #4
 800c45a:	f003 030f 	and.w	r3, r3, #15
 800c45e:	490a      	ldr	r1, [pc, #40]	@ (800c488 <HAL_RCC_ClockConfig+0x1c8>)
 800c460:	5ccb      	ldrb	r3, [r1, r3]
 800c462:	fa22 f303 	lsr.w	r3, r2, r3
 800c466:	4a09      	ldr	r2, [pc, #36]	@ (800c48c <HAL_RCC_ClockConfig+0x1cc>)
 800c468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c46a:	4b09      	ldr	r3, [pc, #36]	@ (800c490 <HAL_RCC_ClockConfig+0x1d0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd fc12 	bl	8009c98 <HAL_InitTick>

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	40022000 	.word	0x40022000
 800c484:	40021000 	.word	0x40021000
 800c488:	0800f7dc 	.word	0x0800f7dc
 800c48c:	20000f74 	.word	0x20000f74
 800c490:	20000f78 	.word	0x20000f78

0800c494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60bb      	str	r3, [r7, #8]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c528 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f003 030c 	and.w	r3, r3, #12
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d002      	beq.n	800c4c4 <HAL_RCC_GetSysClockFreq+0x30>
 800c4be:	2b08      	cmp	r3, #8
 800c4c0:	d003      	beq.n	800c4ca <HAL_RCC_GetSysClockFreq+0x36>
 800c4c2:	e027      	b.n	800c514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c4c4:	4b19      	ldr	r3, [pc, #100]	@ (800c52c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4c6:	613b      	str	r3, [r7, #16]
      break;
 800c4c8:	e027      	b.n	800c51a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	0c9b      	lsrs	r3, r3, #18
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	4a17      	ldr	r2, [pc, #92]	@ (800c530 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c4d4:	5cd3      	ldrb	r3, [r2, r3]
 800c4d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d010      	beq.n	800c504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c4e2:	4b11      	ldr	r3, [pc, #68]	@ (800c528 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	0c5b      	lsrs	r3, r3, #17
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	4a11      	ldr	r2, [pc, #68]	@ (800c534 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c4ee:	5cd3      	ldrb	r3, [r2, r3]
 800c4f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c52c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4f6:	fb03 f202 	mul.w	r2, r3, r2
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e004      	b.n	800c50e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a0c      	ldr	r2, [pc, #48]	@ (800c538 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c508:	fb02 f303 	mul.w	r3, r2, r3
 800c50c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	613b      	str	r3, [r7, #16]
      break;
 800c512:	e002      	b.n	800c51a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <HAL_RCC_GetSysClockFreq+0x98>)
 800c516:	613b      	str	r3, [r7, #16]
      break;
 800c518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c51a:	693b      	ldr	r3, [r7, #16]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	371c      	adds	r7, #28
 800c520:	46bd      	mov	sp, r7
 800c522:	bc80      	pop	{r7}
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	40021000 	.word	0x40021000
 800c52c:	007a1200 	.word	0x007a1200
 800c530:	0800f7f4 	.word	0x0800f7f4
 800c534:	0800f804 	.word	0x0800f804
 800c538:	003d0900 	.word	0x003d0900

0800c53c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c540:	4b02      	ldr	r3, [pc, #8]	@ (800c54c <HAL_RCC_GetHCLKFreq+0x10>)
 800c542:	681b      	ldr	r3, [r3, #0]
}
 800c544:	4618      	mov	r0, r3
 800c546:	46bd      	mov	sp, r7
 800c548:	bc80      	pop	{r7}
 800c54a:	4770      	bx	lr
 800c54c:	20000f74 	.word	0x20000f74

0800c550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c554:	f7ff fff2 	bl	800c53c <HAL_RCC_GetHCLKFreq>
 800c558:	4602      	mov	r2, r0
 800c55a:	4b05      	ldr	r3, [pc, #20]	@ (800c570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	f003 0307 	and.w	r3, r3, #7
 800c564:	4903      	ldr	r1, [pc, #12]	@ (800c574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c566:	5ccb      	ldrb	r3, [r1, r3]
 800c568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	40021000 	.word	0x40021000
 800c574:	0800f7ec 	.word	0x0800f7ec

0800c578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c57c:	f7ff ffde 	bl	800c53c <HAL_RCC_GetHCLKFreq>
 800c580:	4602      	mov	r2, r0
 800c582:	4b05      	ldr	r3, [pc, #20]	@ (800c598 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	0adb      	lsrs	r3, r3, #11
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	4903      	ldr	r1, [pc, #12]	@ (800c59c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c58e:	5ccb      	ldrb	r3, [r1, r3]
 800c590:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c594:	4618      	mov	r0, r3
 800c596:	bd80      	pop	{r7, pc}
 800c598:	40021000 	.word	0x40021000
 800c59c:	0800f7ec 	.word	0x0800f7ec

0800c5a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d4 <RCC_Delay+0x34>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d8 <RCC_Delay+0x38>)
 800c5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b2:	0a5b      	lsrs	r3, r3, #9
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	fb02 f303 	mul.w	r3, r2, r3
 800c5ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c5bc:	bf00      	nop
  }
  while (Delay --);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	1e5a      	subs	r2, r3, #1
 800c5c2:	60fa      	str	r2, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1f9      	bne.n	800c5bc <RCC_Delay+0x1c>
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bc80      	pop	{r7}
 800c5d2:	4770      	bx	lr
 800c5d4:	20000f74 	.word	0x20000f74
 800c5d8:	10624dd3 	.word	0x10624dd3

0800c5dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e041      	b.n	800c672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d106      	bne.n	800c608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fd fa16 	bl	8009a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3304      	adds	r3, #4
 800c618:	4619      	mov	r1, r3
 800c61a:	4610      	mov	r0, r2
 800c61c:	f000 fa82 	bl	800cb24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d001      	beq.n	800c694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e044      	b.n	800c71e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0201 	orr.w	r2, r2, #1
 800c6aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c728 <HAL_TIM_Base_Start_IT+0xac>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d018      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x6c>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c72c <HAL_TIM_Base_Start_IT+0xb0>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d013      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x6c>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6c8:	d00e      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x6c>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a18      	ldr	r2, [pc, #96]	@ (800c730 <HAL_TIM_Base_Start_IT+0xb4>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d009      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x6c>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a16      	ldr	r2, [pc, #88]	@ (800c734 <HAL_TIM_Base_Start_IT+0xb8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d004      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x6c>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a15      	ldr	r2, [pc, #84]	@ (800c738 <HAL_TIM_Base_Start_IT+0xbc>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d111      	bne.n	800c70c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f003 0307 	and.w	r3, r3, #7
 800c6f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b06      	cmp	r3, #6
 800c6f8:	d010      	beq.n	800c71c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f042 0201 	orr.w	r2, r2, #1
 800c708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c70a:	e007      	b.n	800c71c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f042 0201 	orr.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	bc80      	pop	{r7}
 800c726:	4770      	bx	lr
 800c728:	40012c00 	.word	0x40012c00
 800c72c:	40013400 	.word	0x40013400
 800c730:	40000400 	.word	0x40000400
 800c734:	40000800 	.word	0x40000800
 800c738:	40000c00 	.word	0x40000c00

0800c73c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d122      	bne.n	800c798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	f003 0302 	and.w	r3, r3, #2
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d11b      	bne.n	800c798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f06f 0202 	mvn.w	r2, #2
 800c768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	699b      	ldr	r3, [r3, #24]
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d003      	beq.n	800c786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9b4 	bl	800caec <HAL_TIM_IC_CaptureCallback>
 800c784:	e005      	b.n	800c792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f9a7 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f9b6 	bl	800cafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	f003 0304 	and.w	r3, r3, #4
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d122      	bne.n	800c7ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	f003 0304 	and.w	r3, r3, #4
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d11b      	bne.n	800c7ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f06f 0204 	mvn.w	r2, #4
 800c7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f98a 	bl	800caec <HAL_TIM_IC_CaptureCallback>
 800c7d8:	e005      	b.n	800c7e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f97d 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f98c 	bl	800cafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	f003 0308 	and.w	r3, r3, #8
 800c7f6:	2b08      	cmp	r3, #8
 800c7f8:	d122      	bne.n	800c840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	f003 0308 	and.w	r3, r3, #8
 800c804:	2b08      	cmp	r3, #8
 800c806:	d11b      	bne.n	800c840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f06f 0208 	mvn.w	r2, #8
 800c810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2204      	movs	r2, #4
 800c816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	f003 0303 	and.w	r3, r3, #3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f960 	bl	800caec <HAL_TIM_IC_CaptureCallback>
 800c82c:	e005      	b.n	800c83a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f953 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f962 	bl	800cafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	f003 0310 	and.w	r3, r3, #16
 800c84a:	2b10      	cmp	r3, #16
 800c84c:	d122      	bne.n	800c894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b10      	cmp	r3, #16
 800c85a:	d11b      	bne.n	800c894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f06f 0210 	mvn.w	r2, #16
 800c864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2208      	movs	r2, #8
 800c86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f936 	bl	800caec <HAL_TIM_IC_CaptureCallback>
 800c880:	e005      	b.n	800c88e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f929 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f938 	bl	800cafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d10e      	bne.n	800c8c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d107      	bne.n	800c8c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f06f 0201 	mvn.w	r2, #1
 800c8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7fc fd34 	bl	8009328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8ca:	2b80      	cmp	r3, #128	@ 0x80
 800c8cc:	d10e      	bne.n	800c8ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d8:	2b80      	cmp	r3, #128	@ 0x80
 800c8da:	d107      	bne.n	800c8ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 faa1 	bl	800ce2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8f6:	2b40      	cmp	r3, #64	@ 0x40
 800c8f8:	d10e      	bne.n	800c918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c904:	2b40      	cmp	r3, #64	@ 0x40
 800c906:	d107      	bne.n	800c918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f8fc 	bl	800cb10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	f003 0320 	and.w	r3, r3, #32
 800c922:	2b20      	cmp	r3, #32
 800c924:	d10e      	bne.n	800c944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	f003 0320 	and.w	r3, r3, #32
 800c930:	2b20      	cmp	r3, #32
 800c932:	d107      	bne.n	800c944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f06f 0220 	mvn.w	r2, #32
 800c93c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fa6c 	bl	800ce1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c960:	2b01      	cmp	r3, #1
 800c962:	d101      	bne.n	800c968 <HAL_TIM_ConfigClockSource+0x1c>
 800c964:	2302      	movs	r3, #2
 800c966:	e0b4      	b.n	800cad2 <HAL_TIM_ConfigClockSource+0x186>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2202      	movs	r2, #2
 800c974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c98e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9a0:	d03e      	beq.n	800ca20 <HAL_TIM_ConfigClockSource+0xd4>
 800c9a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9a6:	f200 8087 	bhi.w	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ae:	f000 8086 	beq.w	800cabe <HAL_TIM_ConfigClockSource+0x172>
 800c9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9b6:	d87f      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9b8:	2b70      	cmp	r3, #112	@ 0x70
 800c9ba:	d01a      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0xa6>
 800c9bc:	2b70      	cmp	r3, #112	@ 0x70
 800c9be:	d87b      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9c0:	2b60      	cmp	r3, #96	@ 0x60
 800c9c2:	d050      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x11a>
 800c9c4:	2b60      	cmp	r3, #96	@ 0x60
 800c9c6:	d877      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9c8:	2b50      	cmp	r3, #80	@ 0x50
 800c9ca:	d03c      	beq.n	800ca46 <HAL_TIM_ConfigClockSource+0xfa>
 800c9cc:	2b50      	cmp	r3, #80	@ 0x50
 800c9ce:	d873      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9d0:	2b40      	cmp	r3, #64	@ 0x40
 800c9d2:	d058      	beq.n	800ca86 <HAL_TIM_ConfigClockSource+0x13a>
 800c9d4:	2b40      	cmp	r3, #64	@ 0x40
 800c9d6:	d86f      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9d8:	2b30      	cmp	r3, #48	@ 0x30
 800c9da:	d064      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9dc:	2b30      	cmp	r3, #48	@ 0x30
 800c9de:	d86b      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e0:	2b20      	cmp	r3, #32
 800c9e2:	d060      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	d867      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d05c      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9ec:	2b10      	cmp	r3, #16
 800c9ee:	d05a      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9f0:	e062      	b.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca02:	f000 f980 	bl	800cd06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	609a      	str	r2, [r3, #8]
      break;
 800ca1e:	e04f      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca30:	f000 f969 	bl	800cd06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca42:	609a      	str	r2, [r3, #8]
      break;
 800ca44:	e03c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca52:	461a      	mov	r2, r3
 800ca54:	f000 f8e0 	bl	800cc18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2150      	movs	r1, #80	@ 0x50
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f937 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800ca64:	e02c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca72:	461a      	mov	r2, r3
 800ca74:	f000 f8fe 	bl	800cc74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2160      	movs	r1, #96	@ 0x60
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f927 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800ca84:	e01c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca92:	461a      	mov	r2, r3
 800ca94:	f000 f8c0 	bl	800cc18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2140      	movs	r1, #64	@ 0x40
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 f917 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800caa4:	e00c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f000 f90e 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800cab6:	e003      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	73fb      	strb	r3, [r7, #15]
      break;
 800cabc:	e000      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cabe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cae2:	bf00      	nop
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr

0800caec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bc80      	pop	{r7}
 800cafc:	4770      	bx	lr

0800cafe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b083      	sub	sp, #12
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb06:	bf00      	nop
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bc80      	pop	{r7}
 800cb20:	4770      	bx	lr
	...

0800cb24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a33      	ldr	r2, [pc, #204]	@ (800cc04 <TIM_Base_SetConfig+0xe0>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d013      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a32      	ldr	r2, [pc, #200]	@ (800cc08 <TIM_Base_SetConfig+0xe4>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00f      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb4a:	d00b      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a2f      	ldr	r2, [pc, #188]	@ (800cc0c <TIM_Base_SetConfig+0xe8>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d007      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a2e      	ldr	r2, [pc, #184]	@ (800cc10 <TIM_Base_SetConfig+0xec>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d003      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a2d      	ldr	r2, [pc, #180]	@ (800cc14 <TIM_Base_SetConfig+0xf0>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d108      	bne.n	800cb76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a22      	ldr	r2, [pc, #136]	@ (800cc04 <TIM_Base_SetConfig+0xe0>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d013      	beq.n	800cba6 <TIM_Base_SetConfig+0x82>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a21      	ldr	r2, [pc, #132]	@ (800cc08 <TIM_Base_SetConfig+0xe4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00f      	beq.n	800cba6 <TIM_Base_SetConfig+0x82>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb8c:	d00b      	beq.n	800cba6 <TIM_Base_SetConfig+0x82>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a1e      	ldr	r2, [pc, #120]	@ (800cc0c <TIM_Base_SetConfig+0xe8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d007      	beq.n	800cba6 <TIM_Base_SetConfig+0x82>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a1d      	ldr	r2, [pc, #116]	@ (800cc10 <TIM_Base_SetConfig+0xec>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d003      	beq.n	800cba6 <TIM_Base_SetConfig+0x82>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a1c      	ldr	r2, [pc, #112]	@ (800cc14 <TIM_Base_SetConfig+0xf0>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d108      	bne.n	800cbb8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a09      	ldr	r2, [pc, #36]	@ (800cc04 <TIM_Base_SetConfig+0xe0>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d003      	beq.n	800cbec <TIM_Base_SetConfig+0xc8>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a08      	ldr	r2, [pc, #32]	@ (800cc08 <TIM_Base_SetConfig+0xe4>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d103      	bne.n	800cbf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	691a      	ldr	r2, [r3, #16]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	615a      	str	r2, [r3, #20]
}
 800cbfa:	bf00      	nop
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bc80      	pop	{r7}
 800cc02:	4770      	bx	lr
 800cc04:	40012c00 	.word	0x40012c00
 800cc08:	40013400 	.word	0x40013400
 800cc0c:	40000400 	.word	0x40000400
 800cc10:	40000800 	.word	0x40000800
 800cc14:	40000c00 	.word	0x40000c00

0800cc18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6a1b      	ldr	r3, [r3, #32]
 800cc28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	f023 0201 	bic.w	r2, r3, #1
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f023 030a 	bic.w	r3, r3, #10
 800cc54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	621a      	str	r2, [r3, #32]
}
 800cc6a:	bf00      	nop
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bc80      	pop	{r7}
 800cc72:	4770      	bx	lr

0800cc74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6a1b      	ldr	r3, [r3, #32]
 800cc84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	f023 0210 	bic.w	r2, r3, #16
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	031b      	lsls	r3, r3, #12
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ccb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	011b      	lsls	r3, r3, #4
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	621a      	str	r2, [r3, #32]
}
 800ccc8:	bf00      	nop
 800ccca:	371c      	adds	r7, #28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bc80      	pop	{r7}
 800ccd0:	4770      	bx	lr

0800ccd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f043 0307 	orr.w	r3, r3, #7
 800ccf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	609a      	str	r2, [r3, #8]
}
 800ccfc:	bf00      	nop
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bc80      	pop	{r7}
 800cd04:	4770      	bx	lr

0800cd06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b087      	sub	sp, #28
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	021a      	lsls	r2, r3, #8
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	609a      	str	r2, [r3, #8]
}
 800cd3a:	bf00      	nop
 800cd3c:	371c      	adds	r7, #28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bc80      	pop	{r7}
 800cd42:	4770      	bx	lr

0800cd44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d101      	bne.n	800cd5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd58:	2302      	movs	r3, #2
 800cd5a:	e050      	b.n	800cdfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2202      	movs	r2, #2
 800cd68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a1b      	ldr	r2, [pc, #108]	@ (800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d018      	beq.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a19      	ldr	r2, [pc, #100]	@ (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb2:	d00e      	beq.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a15      	ldr	r2, [pc, #84]	@ (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d009      	beq.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a14      	ldr	r2, [pc, #80]	@ (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a12      	ldr	r2, [pc, #72]	@ (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d10c      	bne.n	800cdec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bc80      	pop	{r7}
 800ce06:	4770      	bx	lr
 800ce08:	40012c00 	.word	0x40012c00
 800ce0c:	40013400 	.word	0x40013400
 800ce10:	40000400 	.word	0x40000400
 800ce14:	40000800 	.word	0x40000800
 800ce18:	40000c00 	.word	0x40000c00

0800ce1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bc80      	pop	{r7}
 800ce2c:	4770      	bx	lr

0800ce2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bc80      	pop	{r7}
 800ce3e:	4770      	bx	lr

0800ce40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e042      	b.n	800ced8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7fc fe0a 	bl	8009a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2224      	movs	r2, #36	@ 0x24
 800ce70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 f801 	bl	800de8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	691a      	ldr	r2, [r3, #16]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	695a      	ldr	r2, [r3, #20]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68da      	ldr	r2, [r3, #12]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ceb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b08a      	sub	sp, #40	@ 0x28
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4613      	mov	r3, r2
 800ceee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b20      	cmp	r3, #32
 800cefe:	d16d      	bne.n	800cfdc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <HAL_UART_Transmit+0x2c>
 800cf06:	88fb      	ldrh	r3, [r7, #6]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e066      	b.n	800cfde <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2221      	movs	r2, #33	@ 0x21
 800cf1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf1e:	f7fc fefd 	bl	8009d1c <HAL_GetTick>
 800cf22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	88fa      	ldrh	r2, [r7, #6]
 800cf2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf38:	d108      	bne.n	800cf4c <HAL_UART_Transmit+0x6c>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d104      	bne.n	800cf4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	61bb      	str	r3, [r7, #24]
 800cf4a:	e003      	b.n	800cf54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf50:	2300      	movs	r3, #0
 800cf52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf54:	e02a      	b.n	800cfac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	2180      	movs	r1, #128	@ 0x80
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f000 fd39 	bl	800d9d8 <UART_WaitOnFlagUntilTimeout>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e036      	b.n	800cfde <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10b      	bne.n	800cf8e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	881b      	ldrh	r3, [r3, #0]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	3302      	adds	r3, #2
 800cf8a:	61bb      	str	r3, [r7, #24]
 800cf8c:	e007      	b.n	800cf9e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1cf      	bne.n	800cf56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2140      	movs	r1, #64	@ 0x40
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f000 fd09 	bl	800d9d8 <UART_WaitOnFlagUntilTimeout>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e006      	b.n	800cfde <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e000      	b.n	800cfde <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cfdc:	2302      	movs	r3, #2
  }
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b08a      	sub	sp, #40	@ 0x28
 800cfea:	af02      	add	r7, sp, #8
 800cfec:	60f8      	str	r0, [r7, #12]
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	603b      	str	r3, [r7, #0]
 800cff2:	4613      	mov	r3, r2
 800cff4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b20      	cmp	r3, #32
 800d004:	d17c      	bne.n	800d100 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <HAL_UART_Receive+0x2c>
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e075      	b.n	800d102 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2222      	movs	r2, #34	@ 0x22
 800d020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d02a:	f7fc fe77 	bl	8009d1c <HAL_GetTick>
 800d02e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	88fa      	ldrh	r2, [r7, #6]
 800d034:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	88fa      	ldrh	r2, [r7, #6]
 800d03a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d044:	d108      	bne.n	800d058 <HAL_UART_Receive+0x72>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d104      	bne.n	800d058 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	61bb      	str	r3, [r7, #24]
 800d056:	e003      	b.n	800d060 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d05c:	2300      	movs	r3, #0
 800d05e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d060:	e043      	b.n	800d0ea <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2200      	movs	r2, #0
 800d06a:	2120      	movs	r1, #32
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f000 fcb3 	bl	800d9d8 <UART_WaitOnFlagUntilTimeout>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e042      	b.n	800d102 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10c      	bne.n	800d09c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	b29a      	uxth	r2, r3
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	3302      	adds	r3, #2
 800d098:	61bb      	str	r3, [r7, #24]
 800d09a:	e01f      	b.n	800d0dc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0a4:	d007      	beq.n	800d0b6 <HAL_UART_Receive+0xd0>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <HAL_UART_Receive+0xde>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d106      	bne.n	800d0c4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e008      	b.n	800d0d6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1b6      	bne.n	800d062 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2220      	movs	r2, #32
 800d0f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e000      	b.n	800d102 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d100:	2302      	movs	r3, #2
  }
}
 800d102:	4618      	mov	r0, r3
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b085      	sub	sp, #20
 800d10e:	af00      	add	r7, sp, #0
 800d110:	60f8      	str	r0, [r7, #12]
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	4613      	mov	r3, r2
 800d116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b20      	cmp	r3, #32
 800d122:	d121      	bne.n	800d168 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <HAL_UART_Transmit_IT+0x26>
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e01a      	b.n	800d16a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	88fa      	ldrh	r2, [r7, #6]
 800d13e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	88fa      	ldrh	r2, [r7, #6]
 800d144:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2221      	movs	r2, #33	@ 0x21
 800d150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d162:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d164:	2300      	movs	r3, #0
 800d166:	e000      	b.n	800d16a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800d168:	2302      	movs	r3, #2
  }
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr

0800d174 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b20      	cmp	r3, #32
 800d18c:	d112      	bne.n	800d1b4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <HAL_UART_Receive_IT+0x26>
 800d194:	88fb      	ldrh	r3, [r7, #6]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e00b      	b.n	800d1b6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	68b9      	ldr	r1, [r7, #8]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f000 fc82 	bl	800dab4 <UART_Start_Receive_IT>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	e000      	b.n	800d1b6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d1b4:	2302      	movs	r3, #2
  }
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b09a      	sub	sp, #104	@ 0x68
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	330c      	adds	r3, #12
 800d1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1d0:	e853 3f00 	ldrex	r3, [r3]
 800d1d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	330c      	adds	r3, #12
 800d1e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d1e6:	657a      	str	r2, [r7, #84]	@ 0x54
 800d1e8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e5      	bne.n	800d1c6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3314      	adds	r3, #20
 800d200:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20c:	f023 0301 	bic.w	r3, r3, #1
 800d210:	663b      	str	r3, [r7, #96]	@ 0x60
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3314      	adds	r3, #20
 800d218:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d21a:	643a      	str	r2, [r7, #64]	@ 0x40
 800d21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d220:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e5      	bne.n	800d1fa <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d232:	2b01      	cmp	r3, #1
 800d234:	d119      	bne.n	800d26a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	330c      	adds	r3, #12
 800d23c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	e853 3f00 	ldrex	r3, [r3]
 800d244:	61fb      	str	r3, [r7, #28]
   return(result);
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	f023 0310 	bic.w	r3, r3, #16
 800d24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	330c      	adds	r3, #12
 800d254:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d25c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e5      	bne.n	800d236 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d274:	2b00      	cmp	r3, #0
 800d276:	d036      	beq.n	800d2e6 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3314      	adds	r3, #20
 800d27e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	60bb      	str	r3, [r7, #8]
   return(result);
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d28e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3314      	adds	r3, #20
 800d296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d298:	61ba      	str	r2, [r7, #24]
 800d29a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	6979      	ldr	r1, [r7, #20]
 800d29e:	69ba      	ldr	r2, [r7, #24]
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e5      	bne.n	800d278 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d018      	beq.n	800d2e6 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fc ff62 	bl	800a18a <HAL_DMA_Abort>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00c      	beq.n	800d2e6 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fd f89d 	bl	800a410 <HAL_DMA_GetError>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b20      	cmp	r3, #32
 800d2da:	d104      	bne.n	800d2e6 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2210      	movs	r2, #16
 800d2e0:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e00a      	b.n	800d2fc <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3768      	adds	r7, #104	@ 0x68
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b09a      	sub	sp, #104	@ 0x68
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	330c      	adds	r3, #12
 800d312:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d316:	e853 3f00 	ldrex	r3, [r3]
 800d31a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d31e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d322:	667b      	str	r3, [r7, #100]	@ 0x64
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	330c      	adds	r3, #12
 800d32a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d32c:	657a      	str	r2, [r7, #84]	@ 0x54
 800d32e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d332:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e5      	bne.n	800d30c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3314      	adds	r3, #20
 800d346:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d34a:	e853 3f00 	ldrex	r3, [r3]
 800d34e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	f023 0301 	bic.w	r3, r3, #1
 800d356:	663b      	str	r3, [r7, #96]	@ 0x60
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3314      	adds	r3, #20
 800d35e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d360:	643a      	str	r2, [r7, #64]	@ 0x40
 800d362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d364:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d366:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e5      	bne.n	800d340 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d119      	bne.n	800d3b0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	330c      	adds	r3, #12
 800d382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	e853 3f00 	ldrex	r3, [r3]
 800d38a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f023 0310 	bic.w	r3, r3, #16
 800d392:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	330c      	adds	r3, #12
 800d39a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d39c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d39e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e5      	bne.n	800d37c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d03f      	beq.n	800d43e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3314      	adds	r3, #20
 800d3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	e853 3f00 	ldrex	r3, [r3]
 800d3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3314      	adds	r3, #20
 800d3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3de:	61ba      	str	r2, [r7, #24]
 800d3e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e2:	6979      	ldr	r1, [r7, #20]
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	e841 2300 	strex	r3, r2, [r1]
 800d3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1e5      	bne.n	800d3be <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d013      	beq.n	800d422 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3fe:	4a19      	ldr	r2, [pc, #100]	@ (800d464 <HAL_UART_AbortReceive_IT+0x160>)
 800d400:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d406:	4618      	mov	r0, r3
 800d408:	f7fc fefa 	bl	800a200 <HAL_DMA_Abort_IT>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d022      	beq.n	800d458 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d41c:	4610      	mov	r0, r2
 800d41e:	4798      	blx	r3
 800d420:	e01a      	b.n	800d458 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2220      	movs	r2, #32
 800d42c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 faba 	bl	800d9b0 <HAL_UART_AbortReceiveCpltCallback>
 800d43c:	e00c      	b.n	800d458 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2220      	movs	r2, #32
 800d448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 faac 	bl	800d9b0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3768      	adds	r7, #104	@ 0x68
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	0800dc13 	.word	0x0800dc13

0800d468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b0ba      	sub	sp, #232	@ 0xe8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d494:	2300      	movs	r3, #0
 800d496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d49e:	f003 030f 	and.w	r3, r3, #15
 800d4a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10f      	bne.n	800d4ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d009      	beq.n	800d4ce <HAL_UART_IRQHandler+0x66>
 800d4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4be:	f003 0320 	and.w	r3, r3, #32
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fc22 	bl	800dd10 <UART_Receive_IT>
      return;
 800d4cc:	e25b      	b.n	800d986 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d4ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 80de 	beq.w	800d694 <HAL_UART_IRQHandler+0x22c>
 800d4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 80d1 	beq.w	800d694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00b      	beq.n	800d516 <HAL_UART_IRQHandler+0xae>
 800d4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d506:	2b00      	cmp	r3, #0
 800d508:	d005      	beq.n	800d516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50e:	f043 0201 	orr.w	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d51a:	f003 0304 	and.w	r3, r3, #4
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00b      	beq.n	800d53a <HAL_UART_IRQHandler+0xd2>
 800d522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d005      	beq.n	800d53a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d532:	f043 0202 	orr.w	r2, r3, #2
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <HAL_UART_IRQHandler+0xf6>
 800d546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d005      	beq.n	800d55e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d556:	f043 0204 	orr.w	r2, r3, #4
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d562:	f003 0308 	and.w	r3, r3, #8
 800d566:	2b00      	cmp	r3, #0
 800d568:	d011      	beq.n	800d58e <HAL_UART_IRQHandler+0x126>
 800d56a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d56e:	f003 0320 	and.w	r3, r3, #32
 800d572:	2b00      	cmp	r3, #0
 800d574:	d105      	bne.n	800d582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d005      	beq.n	800d58e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d586:	f043 0208 	orr.w	r2, r3, #8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 81f2 	beq.w	800d97c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d008      	beq.n	800d5b6 <HAL_UART_IRQHandler+0x14e>
 800d5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a8:	f003 0320 	and.w	r3, r3, #32
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fbad 	bl	800dd10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	695b      	ldr	r3, [r3, #20]
 800d5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bf14      	ite	ne
 800d5c4:	2301      	movne	r3, #1
 800d5c6:	2300      	moveq	r3, #0
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d2:	f003 0308 	and.w	r3, r3, #8
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d103      	bne.n	800d5e2 <HAL_UART_IRQHandler+0x17a>
 800d5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d04f      	beq.n	800d682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fa9f 	bl	800db26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	695b      	ldr	r3, [r3, #20]
 800d5ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d041      	beq.n	800d67a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3314      	adds	r3, #20
 800d5fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d604:	e853 3f00 	ldrex	r3, [r3]
 800d608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d60c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3314      	adds	r3, #20
 800d61e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d622:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d62e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d632:	e841 2300 	strex	r3, r2, [r1]
 800d636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1d9      	bne.n	800d5f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d646:	2b00      	cmp	r3, #0
 800d648:	d013      	beq.n	800d672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64e:	4a7e      	ldr	r2, [pc, #504]	@ (800d848 <HAL_UART_IRQHandler+0x3e0>)
 800d650:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d656:	4618      	mov	r0, r3
 800d658:	f7fc fdd2 	bl	800a200 <HAL_DMA_Abort_IT>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d016      	beq.n	800d690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d66c:	4610      	mov	r0, r2
 800d66e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d670:	e00e      	b.n	800d690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f993 	bl	800d99e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d678:	e00a      	b.n	800d690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f98f 	bl	800d99e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d680:	e006      	b.n	800d690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f98b 	bl	800d99e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d68e:	e175      	b.n	800d97c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d690:	bf00      	nop
    return;
 800d692:	e173      	b.n	800d97c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d698:	2b01      	cmp	r3, #1
 800d69a:	f040 814f 	bne.w	800d93c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a2:	f003 0310 	and.w	r3, r3, #16
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f000 8148 	beq.w	800d93c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6b0:	f003 0310 	and.w	r3, r3, #16
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 8141 	beq.w	800d93c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	60bb      	str	r3, [r7, #8]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	60bb      	str	r3, [r7, #8]
 800d6ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80b6 	beq.w	800d84c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 8145 	beq.w	800d980 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6fe:	429a      	cmp	r2, r3
 800d700:	f080 813e 	bcs.w	800d980 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d70a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	2b20      	cmp	r3, #32
 800d714:	f000 8088 	beq.w	800d828 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	330c      	adds	r3, #12
 800d71e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d726:	e853 3f00 	ldrex	r3, [r3]
 800d72a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d72e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d732:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d736:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	330c      	adds	r3, #12
 800d740:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d744:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d750:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d754:	e841 2300 	strex	r3, r2, [r1]
 800d758:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d75c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1d9      	bne.n	800d718 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	3314      	adds	r3, #20
 800d76a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d776:	f023 0301 	bic.w	r3, r3, #1
 800d77a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3314      	adds	r3, #20
 800d784:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d788:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d78c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d790:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d794:	e841 2300 	strex	r3, r2, [r1]
 800d798:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d79a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1e1      	bne.n	800d764 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3314      	adds	r3, #20
 800d7a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7aa:	e853 3f00 	ldrex	r3, [r3]
 800d7ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d7b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	3314      	adds	r3, #20
 800d7c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7cc:	e841 2300 	strex	r3, r2, [r1]
 800d7d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1e3      	bne.n	800d7a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2220      	movs	r2, #32
 800d7dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	330c      	adds	r3, #12
 800d7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7f0:	e853 3f00 	ldrex	r3, [r3]
 800d7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7f8:	f023 0310 	bic.w	r3, r3, #16
 800d7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	330c      	adds	r3, #12
 800d806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d80a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d80c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d80e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d812:	e841 2300 	strex	r3, r2, [r1]
 800d816:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1e3      	bne.n	800d7e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d822:	4618      	mov	r0, r3
 800d824:	f7fc fcb1 	bl	800a18a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2202      	movs	r2, #2
 800d82c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d836:	b29b      	uxth	r3, r3
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f8bf 	bl	800d9c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d844:	e09c      	b.n	800d980 <HAL_UART_IRQHandler+0x518>
 800d846:	bf00      	nop
 800d848:	0800dbeb 	.word	0x0800dbeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d854:	b29b      	uxth	r3, r3
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d860:	b29b      	uxth	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 808e 	beq.w	800d984 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8089 	beq.w	800d984 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	330c      	adds	r3, #12
 800d878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	330c      	adds	r3, #12
 800d892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d896:	647a      	str	r2, [r7, #68]	@ 0x44
 800d898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d89c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e3      	bne.n	800d872 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3314      	adds	r3, #20
 800d8b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	f023 0301 	bic.w	r3, r3, #1
 800d8c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3314      	adds	r3, #20
 800d8ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8d6:	e841 2300 	strex	r3, r2, [r1]
 800d8da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1e3      	bne.n	800d8aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2220      	movs	r2, #32
 800d8e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	330c      	adds	r3, #12
 800d8f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 0310 	bic.w	r3, r3, #16
 800d906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	330c      	adds	r3, #12
 800d910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d914:	61fa      	str	r2, [r7, #28]
 800d916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d918:	69b9      	ldr	r1, [r7, #24]
 800d91a:	69fa      	ldr	r2, [r7, #28]
 800d91c:	e841 2300 	strex	r3, r2, [r1]
 800d920:	617b      	str	r3, [r7, #20]
   return(result);
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e3      	bne.n	800d8f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d92e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f844 	bl	800d9c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d93a:	e023      	b.n	800d984 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d944:	2b00      	cmp	r3, #0
 800d946:	d009      	beq.n	800d95c <HAL_UART_IRQHandler+0x4f4>
 800d948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d94c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f974 	bl	800dc42 <UART_Transmit_IT>
    return;
 800d95a:	e014      	b.n	800d986 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00e      	beq.n	800d986 <HAL_UART_IRQHandler+0x51e>
 800d968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	d008      	beq.n	800d986 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f9b3 	bl	800dce0 <UART_EndTransmit_IT>
    return;
 800d97a:	e004      	b.n	800d986 <HAL_UART_IRQHandler+0x51e>
    return;
 800d97c:	bf00      	nop
 800d97e:	e002      	b.n	800d986 <HAL_UART_IRQHandler+0x51e>
      return;
 800d980:	bf00      	nop
 800d982:	e000      	b.n	800d986 <HAL_UART_IRQHandler+0x51e>
      return;
 800d984:	bf00      	nop
  }
}
 800d986:	37e8      	adds	r7, #232	@ 0xe8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	bc80      	pop	{r7}
 800d99c:	4770      	bx	lr

0800d99e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bc80      	pop	{r7}
 800d9ae:	4770      	bx	lr

0800d9b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bc80      	pop	{r7}
 800d9c0:	4770      	bx	lr

0800d9c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bc80      	pop	{r7}
 800d9d6:	4770      	bx	lr

0800d9d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b090      	sub	sp, #64	@ 0x40
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	603b      	str	r3, [r7, #0]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9e8:	e050      	b.n	800da8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9f0:	d04c      	beq.n	800da8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d9f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <UART_WaitOnFlagUntilTimeout+0x30>
 800d9f8:	f7fc f990 	bl	8009d1c <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da04:	429a      	cmp	r2, r3
 800da06:	d241      	bcs.n	800da8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	330c      	adds	r3, #12
 800da0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	e853 3f00 	ldrex	r3, [r3]
 800da16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800da1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	330c      	adds	r3, #12
 800da26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da28:	637a      	str	r2, [r7, #52]	@ 0x34
 800da2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da30:	e841 2300 	strex	r3, r2, [r1]
 800da34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1e5      	bne.n	800da08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3314      	adds	r3, #20
 800da42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	e853 3f00 	ldrex	r3, [r3]
 800da4a:	613b      	str	r3, [r7, #16]
   return(result);
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f023 0301 	bic.w	r3, r3, #1
 800da52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3314      	adds	r3, #20
 800da5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da5c:	623a      	str	r2, [r7, #32]
 800da5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	69f9      	ldr	r1, [r7, #28]
 800da62:	6a3a      	ldr	r2, [r7, #32]
 800da64:	e841 2300 	strex	r3, r2, [r1]
 800da68:	61bb      	str	r3, [r7, #24]
   return(result);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e5      	bne.n	800da3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2220      	movs	r2, #32
 800da74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2220      	movs	r2, #32
 800da7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	e00f      	b.n	800daac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	4013      	ands	r3, r2
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	429a      	cmp	r2, r3
 800da9a:	bf0c      	ite	eq
 800da9c:	2301      	moveq	r3, #1
 800da9e:	2300      	movne	r3, #0
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	461a      	mov	r2, r3
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d09f      	beq.n	800d9ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3740      	adds	r7, #64	@ 0x40
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	4613      	mov	r3, r2
 800dac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	88fa      	ldrh	r2, [r7, #6]
 800dacc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	88fa      	ldrh	r2, [r7, #6]
 800dad2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2222      	movs	r2, #34	@ 0x22
 800dade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68da      	ldr	r2, [r3, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800daf8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	695a      	ldr	r2, [r3, #20]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f042 0201 	orr.w	r2, r2, #1
 800db08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f042 0220 	orr.w	r2, r2, #32
 800db18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	bc80      	pop	{r7}
 800db24:	4770      	bx	lr

0800db26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db26:	b480      	push	{r7}
 800db28:	b095      	sub	sp, #84	@ 0x54
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	330c      	adds	r3, #12
 800db34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	330c      	adds	r3, #12
 800db4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db4e:	643a      	str	r2, [r7, #64]	@ 0x40
 800db50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db56:	e841 2300 	strex	r3, r2, [r1]
 800db5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1e5      	bne.n	800db2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	3314      	adds	r3, #20
 800db68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	e853 3f00 	ldrex	r3, [r3]
 800db70:	61fb      	str	r3, [r7, #28]
   return(result);
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	f023 0301 	bic.w	r3, r3, #1
 800db78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	3314      	adds	r3, #20
 800db80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db8a:	e841 2300 	strex	r3, r2, [r1]
 800db8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e5      	bne.n	800db62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d119      	bne.n	800dbd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	330c      	adds	r3, #12
 800dba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	e853 3f00 	ldrex	r3, [r3]
 800dbac:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f023 0310 	bic.w	r3, r3, #16
 800dbb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	330c      	adds	r3, #12
 800dbbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbbe:	61ba      	str	r2, [r7, #24]
 800dbc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	6979      	ldr	r1, [r7, #20]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	613b      	str	r3, [r7, #16]
   return(result);
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e5      	bne.n	800db9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2220      	movs	r2, #32
 800dbd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dbe0:	bf00      	nop
 800dbe2:	3754      	adds	r7, #84	@ 0x54
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bc80      	pop	{r7}
 800dbe8:	4770      	bx	lr

0800dbea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7ff feca 	bl	800d99e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc0a:	bf00      	nop
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f7ff febb 	bl	800d9b0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc3a:	bf00      	nop
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b085      	sub	sp, #20
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b21      	cmp	r3, #33	@ 0x21
 800dc54:	d13e      	bne.n	800dcd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc5e:	d114      	bne.n	800dc8a <UART_Transmit_IT+0x48>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d110      	bne.n	800dc8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	1c9a      	adds	r2, r3, #2
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	621a      	str	r2, [r3, #32]
 800dc88:	e008      	b.n	800dc9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	1c59      	adds	r1, r3, #1
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	6211      	str	r1, [r2, #32]
 800dc94:	781a      	ldrb	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3b01      	subs	r3, #1
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10f      	bne.n	800dcd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dcbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dcce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e000      	b.n	800dcd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dcd4:	2302      	movs	r3, #2
  }
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3714      	adds	r7, #20
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bc80      	pop	{r7}
 800dcde:	4770      	bx	lr

0800dce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dcf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2220      	movs	r2, #32
 800dcfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff fe43 	bl	800d98c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08c      	sub	sp, #48	@ 0x30
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b22      	cmp	r3, #34	@ 0x22
 800dd22:	f040 80ae 	bne.w	800de82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd2e:	d117      	bne.n	800dd60 <UART_Receive_IT+0x50>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d113      	bne.n	800dd60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd58:	1c9a      	adds	r2, r3, #2
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	629a      	str	r2, [r3, #40]	@ 0x28
 800dd5e:	e026      	b.n	800ddae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd72:	d007      	beq.n	800dd84 <UART_Receive_IT+0x74>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <UART_Receive_IT+0x82>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd8e:	701a      	strb	r2, [r3, #0]
 800dd90:	e008      	b.n	800dda4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d15d      	bne.n	800de7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68da      	ldr	r2, [r3, #12]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f022 0220 	bic.w	r2, r2, #32
 800ddd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dde0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	695a      	ldr	r2, [r3, #20]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f022 0201 	bic.w	r2, r2, #1
 800ddf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2220      	movs	r2, #32
 800ddf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de04:	2b01      	cmp	r3, #1
 800de06:	d135      	bne.n	800de74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	330c      	adds	r3, #12
 800de14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	e853 3f00 	ldrex	r3, [r3]
 800de1c:	613b      	str	r3, [r7, #16]
   return(result);
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f023 0310 	bic.w	r3, r3, #16
 800de24:	627b      	str	r3, [r7, #36]	@ 0x24
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	330c      	adds	r3, #12
 800de2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de2e:	623a      	str	r2, [r7, #32]
 800de30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de32:	69f9      	ldr	r1, [r7, #28]
 800de34:	6a3a      	ldr	r2, [r7, #32]
 800de36:	e841 2300 	strex	r3, r2, [r1]
 800de3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1e5      	bne.n	800de0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0310 	and.w	r3, r3, #16
 800de4c:	2b10      	cmp	r3, #16
 800de4e:	d10a      	bne.n	800de66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff fda8 	bl	800d9c2 <HAL_UARTEx_RxEventCallback>
 800de72:	e002      	b.n	800de7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7fb fa67 	bl	8009348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	e002      	b.n	800de84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	e000      	b.n	800de84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800de82:	2302      	movs	r3, #2
  }
}
 800de84:	4618      	mov	r0, r3
 800de86:	3730      	adds	r7, #48	@ 0x30
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68da      	ldr	r2, [r3, #12]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	431a      	orrs	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	695b      	ldr	r3, [r3, #20]
 800deb8:	4313      	orrs	r3, r2
 800deba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800dec6:	f023 030c 	bic.w	r3, r3, #12
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	6812      	ldr	r2, [r2, #0]
 800dece:	68b9      	ldr	r1, [r7, #8]
 800ded0:	430b      	orrs	r3, r1
 800ded2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	699a      	ldr	r2, [r3, #24]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	430a      	orrs	r2, r1
 800dee8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a2c      	ldr	r2, [pc, #176]	@ (800dfa0 <UART_SetConfig+0x114>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d103      	bne.n	800defc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800def4:	f7fe fb40 	bl	800c578 <HAL_RCC_GetPCLK2Freq>
 800def8:	60f8      	str	r0, [r7, #12]
 800defa:	e002      	b.n	800df02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800defc:	f7fe fb28 	bl	800c550 <HAL_RCC_GetPCLK1Freq>
 800df00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009a      	lsls	r2, r3, #2
 800df0c:	441a      	add	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	fbb2 f3f3 	udiv	r3, r2, r3
 800df18:	4a22      	ldr	r2, [pc, #136]	@ (800dfa4 <UART_SetConfig+0x118>)
 800df1a:	fba2 2303 	umull	r2, r3, r2, r3
 800df1e:	095b      	lsrs	r3, r3, #5
 800df20:	0119      	lsls	r1, r3, #4
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	009a      	lsls	r2, r3, #2
 800df2c:	441a      	add	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	fbb2 f2f3 	udiv	r2, r2, r3
 800df38:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa4 <UART_SetConfig+0x118>)
 800df3a:	fba3 0302 	umull	r0, r3, r3, r2
 800df3e:	095b      	lsrs	r3, r3, #5
 800df40:	2064      	movs	r0, #100	@ 0x64
 800df42:	fb00 f303 	mul.w	r3, r0, r3
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	011b      	lsls	r3, r3, #4
 800df4a:	3332      	adds	r3, #50	@ 0x32
 800df4c:	4a15      	ldr	r2, [pc, #84]	@ (800dfa4 <UART_SetConfig+0x118>)
 800df4e:	fba2 2303 	umull	r2, r3, r2, r3
 800df52:	095b      	lsrs	r3, r3, #5
 800df54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df58:	4419      	add	r1, r3
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4613      	mov	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	009a      	lsls	r2, r3, #2
 800df64:	441a      	add	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df70:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <UART_SetConfig+0x118>)
 800df72:	fba3 0302 	umull	r0, r3, r3, r2
 800df76:	095b      	lsrs	r3, r3, #5
 800df78:	2064      	movs	r0, #100	@ 0x64
 800df7a:	fb00 f303 	mul.w	r3, r0, r3
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	011b      	lsls	r3, r3, #4
 800df82:	3332      	adds	r3, #50	@ 0x32
 800df84:	4a07      	ldr	r2, [pc, #28]	@ (800dfa4 <UART_SetConfig+0x118>)
 800df86:	fba2 2303 	umull	r2, r3, r2, r3
 800df8a:	095b      	lsrs	r3, r3, #5
 800df8c:	f003 020f 	and.w	r2, r3, #15
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	440a      	add	r2, r1
 800df96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	40013800 	.word	0x40013800
 800dfa4:	51eb851f 	.word	0x51eb851f

0800dfa8 <__itoa>:
 800dfa8:	1e93      	subs	r3, r2, #2
 800dfaa:	2b22      	cmp	r3, #34	@ 0x22
 800dfac:	b510      	push	{r4, lr}
 800dfae:	460c      	mov	r4, r1
 800dfb0:	d904      	bls.n	800dfbc <__itoa+0x14>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	461c      	mov	r4, r3
 800dfb6:	700b      	strb	r3, [r1, #0]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	bd10      	pop	{r4, pc}
 800dfbc:	2a0a      	cmp	r2, #10
 800dfbe:	d109      	bne.n	800dfd4 <__itoa+0x2c>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	da07      	bge.n	800dfd4 <__itoa+0x2c>
 800dfc4:	232d      	movs	r3, #45	@ 0x2d
 800dfc6:	700b      	strb	r3, [r1, #0]
 800dfc8:	2101      	movs	r1, #1
 800dfca:	4240      	negs	r0, r0
 800dfcc:	4421      	add	r1, r4
 800dfce:	f000 f8db 	bl	800e188 <__utoa>
 800dfd2:	e7f1      	b.n	800dfb8 <__itoa+0x10>
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	e7f9      	b.n	800dfcc <__itoa+0x24>

0800dfd8 <itoa>:
 800dfd8:	f7ff bfe6 	b.w	800dfa8 <__itoa>

0800dfdc <malloc>:
 800dfdc:	4b02      	ldr	r3, [pc, #8]	@ (800dfe8 <malloc+0xc>)
 800dfde:	4601      	mov	r1, r0
 800dfe0:	6818      	ldr	r0, [r3, #0]
 800dfe2:	f000 b825 	b.w	800e030 <_malloc_r>
 800dfe6:	bf00      	nop
 800dfe8:	20000f80 	.word	0x20000f80

0800dfec <sbrk_aligned>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	4e0f      	ldr	r6, [pc, #60]	@ (800e02c <sbrk_aligned+0x40>)
 800dff0:	460c      	mov	r4, r1
 800dff2:	6831      	ldr	r1, [r6, #0]
 800dff4:	4605      	mov	r5, r0
 800dff6:	b911      	cbnz	r1, 800dffe <sbrk_aligned+0x12>
 800dff8:	f000 f948 	bl	800e28c <_sbrk_r>
 800dffc:	6030      	str	r0, [r6, #0]
 800dffe:	4621      	mov	r1, r4
 800e000:	4628      	mov	r0, r5
 800e002:	f000 f943 	bl	800e28c <_sbrk_r>
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	d103      	bne.n	800e012 <sbrk_aligned+0x26>
 800e00a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e00e:	4620      	mov	r0, r4
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	1cc4      	adds	r4, r0, #3
 800e014:	f024 0403 	bic.w	r4, r4, #3
 800e018:	42a0      	cmp	r0, r4
 800e01a:	d0f8      	beq.n	800e00e <sbrk_aligned+0x22>
 800e01c:	1a21      	subs	r1, r4, r0
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 f934 	bl	800e28c <_sbrk_r>
 800e024:	3001      	adds	r0, #1
 800e026:	d1f2      	bne.n	800e00e <sbrk_aligned+0x22>
 800e028:	e7ef      	b.n	800e00a <sbrk_aligned+0x1e>
 800e02a:	bf00      	nop
 800e02c:	2000202c 	.word	0x2000202c

0800e030 <_malloc_r>:
 800e030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e034:	1ccd      	adds	r5, r1, #3
 800e036:	f025 0503 	bic.w	r5, r5, #3
 800e03a:	3508      	adds	r5, #8
 800e03c:	2d0c      	cmp	r5, #12
 800e03e:	bf38      	it	cc
 800e040:	250c      	movcc	r5, #12
 800e042:	2d00      	cmp	r5, #0
 800e044:	4606      	mov	r6, r0
 800e046:	db01      	blt.n	800e04c <_malloc_r+0x1c>
 800e048:	42a9      	cmp	r1, r5
 800e04a:	d904      	bls.n	800e056 <_malloc_r+0x26>
 800e04c:	230c      	movs	r3, #12
 800e04e:	6033      	str	r3, [r6, #0]
 800e050:	2000      	movs	r0, #0
 800e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e12c <_malloc_r+0xfc>
 800e05a:	f000 f869 	bl	800e130 <__malloc_lock>
 800e05e:	f8d8 3000 	ldr.w	r3, [r8]
 800e062:	461c      	mov	r4, r3
 800e064:	bb44      	cbnz	r4, 800e0b8 <_malloc_r+0x88>
 800e066:	4629      	mov	r1, r5
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff ffbf 	bl	800dfec <sbrk_aligned>
 800e06e:	1c43      	adds	r3, r0, #1
 800e070:	4604      	mov	r4, r0
 800e072:	d158      	bne.n	800e126 <_malloc_r+0xf6>
 800e074:	f8d8 4000 	ldr.w	r4, [r8]
 800e078:	4627      	mov	r7, r4
 800e07a:	2f00      	cmp	r7, #0
 800e07c:	d143      	bne.n	800e106 <_malloc_r+0xd6>
 800e07e:	2c00      	cmp	r4, #0
 800e080:	d04b      	beq.n	800e11a <_malloc_r+0xea>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	4639      	mov	r1, r7
 800e086:	4630      	mov	r0, r6
 800e088:	eb04 0903 	add.w	r9, r4, r3
 800e08c:	f000 f8fe 	bl	800e28c <_sbrk_r>
 800e090:	4581      	cmp	r9, r0
 800e092:	d142      	bne.n	800e11a <_malloc_r+0xea>
 800e094:	6821      	ldr	r1, [r4, #0]
 800e096:	4630      	mov	r0, r6
 800e098:	1a6d      	subs	r5, r5, r1
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7ff ffa6 	bl	800dfec <sbrk_aligned>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d03a      	beq.n	800e11a <_malloc_r+0xea>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	442b      	add	r3, r5
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	bb62      	cbnz	r2, 800e10c <_malloc_r+0xdc>
 800e0b2:	f8c8 7000 	str.w	r7, [r8]
 800e0b6:	e00f      	b.n	800e0d8 <_malloc_r+0xa8>
 800e0b8:	6822      	ldr	r2, [r4, #0]
 800e0ba:	1b52      	subs	r2, r2, r5
 800e0bc:	d420      	bmi.n	800e100 <_malloc_r+0xd0>
 800e0be:	2a0b      	cmp	r2, #11
 800e0c0:	d917      	bls.n	800e0f2 <_malloc_r+0xc2>
 800e0c2:	1961      	adds	r1, r4, r5
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	6025      	str	r5, [r4, #0]
 800e0c8:	bf18      	it	ne
 800e0ca:	6059      	strne	r1, [r3, #4]
 800e0cc:	6863      	ldr	r3, [r4, #4]
 800e0ce:	bf08      	it	eq
 800e0d0:	f8c8 1000 	streq.w	r1, [r8]
 800e0d4:	5162      	str	r2, [r4, r5]
 800e0d6:	604b      	str	r3, [r1, #4]
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f000 f82f 	bl	800e13c <__malloc_unlock>
 800e0de:	f104 000b 	add.w	r0, r4, #11
 800e0e2:	1d23      	adds	r3, r4, #4
 800e0e4:	f020 0007 	bic.w	r0, r0, #7
 800e0e8:	1ac2      	subs	r2, r0, r3
 800e0ea:	bf1c      	itt	ne
 800e0ec:	1a1b      	subne	r3, r3, r0
 800e0ee:	50a3      	strne	r3, [r4, r2]
 800e0f0:	e7af      	b.n	800e052 <_malloc_r+0x22>
 800e0f2:	6862      	ldr	r2, [r4, #4]
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	bf0c      	ite	eq
 800e0f8:	f8c8 2000 	streq.w	r2, [r8]
 800e0fc:	605a      	strne	r2, [r3, #4]
 800e0fe:	e7eb      	b.n	800e0d8 <_malloc_r+0xa8>
 800e100:	4623      	mov	r3, r4
 800e102:	6864      	ldr	r4, [r4, #4]
 800e104:	e7ae      	b.n	800e064 <_malloc_r+0x34>
 800e106:	463c      	mov	r4, r7
 800e108:	687f      	ldr	r7, [r7, #4]
 800e10a:	e7b6      	b.n	800e07a <_malloc_r+0x4a>
 800e10c:	461a      	mov	r2, r3
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	42a3      	cmp	r3, r4
 800e112:	d1fb      	bne.n	800e10c <_malloc_r+0xdc>
 800e114:	2300      	movs	r3, #0
 800e116:	6053      	str	r3, [r2, #4]
 800e118:	e7de      	b.n	800e0d8 <_malloc_r+0xa8>
 800e11a:	230c      	movs	r3, #12
 800e11c:	4630      	mov	r0, r6
 800e11e:	6033      	str	r3, [r6, #0]
 800e120:	f000 f80c 	bl	800e13c <__malloc_unlock>
 800e124:	e794      	b.n	800e050 <_malloc_r+0x20>
 800e126:	6005      	str	r5, [r0, #0]
 800e128:	e7d6      	b.n	800e0d8 <_malloc_r+0xa8>
 800e12a:	bf00      	nop
 800e12c:	20002030 	.word	0x20002030

0800e130 <__malloc_lock>:
 800e130:	4801      	ldr	r0, [pc, #4]	@ (800e138 <__malloc_lock+0x8>)
 800e132:	f000 b8e5 	b.w	800e300 <__retarget_lock_acquire_recursive>
 800e136:	bf00      	nop
 800e138:	2000216c 	.word	0x2000216c

0800e13c <__malloc_unlock>:
 800e13c:	4801      	ldr	r0, [pc, #4]	@ (800e144 <__malloc_unlock+0x8>)
 800e13e:	f000 b8e0 	b.w	800e302 <__retarget_lock_release_recursive>
 800e142:	bf00      	nop
 800e144:	2000216c 	.word	0x2000216c

0800e148 <siprintf>:
 800e148:	b40e      	push	{r1, r2, r3}
 800e14a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e14e:	b500      	push	{lr}
 800e150:	b09c      	sub	sp, #112	@ 0x70
 800e152:	ab1d      	add	r3, sp, #116	@ 0x74
 800e154:	9002      	str	r0, [sp, #8]
 800e156:	9006      	str	r0, [sp, #24]
 800e158:	9107      	str	r1, [sp, #28]
 800e15a:	9104      	str	r1, [sp, #16]
 800e15c:	4808      	ldr	r0, [pc, #32]	@ (800e180 <siprintf+0x38>)
 800e15e:	4909      	ldr	r1, [pc, #36]	@ (800e184 <siprintf+0x3c>)
 800e160:	f853 2b04 	ldr.w	r2, [r3], #4
 800e164:	9105      	str	r1, [sp, #20]
 800e166:	6800      	ldr	r0, [r0, #0]
 800e168:	a902      	add	r1, sp, #8
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	f000 f984 	bl	800e478 <_svfiprintf_r>
 800e170:	2200      	movs	r2, #0
 800e172:	9b02      	ldr	r3, [sp, #8]
 800e174:	701a      	strb	r2, [r3, #0]
 800e176:	b01c      	add	sp, #112	@ 0x70
 800e178:	f85d eb04 	ldr.w	lr, [sp], #4
 800e17c:	b003      	add	sp, #12
 800e17e:	4770      	bx	lr
 800e180:	20000f80 	.word	0x20000f80
 800e184:	ffff0208 	.word	0xffff0208

0800e188 <__utoa>:
 800e188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e18a:	b08b      	sub	sp, #44	@ 0x2c
 800e18c:	4605      	mov	r5, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	466e      	mov	r6, sp
 800e192:	4c1d      	ldr	r4, [pc, #116]	@ (800e208 <__utoa+0x80>)
 800e194:	f104 0c20 	add.w	ip, r4, #32
 800e198:	4637      	mov	r7, r6
 800e19a:	6820      	ldr	r0, [r4, #0]
 800e19c:	6861      	ldr	r1, [r4, #4]
 800e19e:	3408      	adds	r4, #8
 800e1a0:	c703      	stmia	r7!, {r0, r1}
 800e1a2:	4564      	cmp	r4, ip
 800e1a4:	463e      	mov	r6, r7
 800e1a6:	d1f7      	bne.n	800e198 <__utoa+0x10>
 800e1a8:	7921      	ldrb	r1, [r4, #4]
 800e1aa:	6820      	ldr	r0, [r4, #0]
 800e1ac:	7139      	strb	r1, [r7, #4]
 800e1ae:	1e91      	subs	r1, r2, #2
 800e1b0:	2922      	cmp	r1, #34	@ 0x22
 800e1b2:	6038      	str	r0, [r7, #0]
 800e1b4:	f04f 0100 	mov.w	r1, #0
 800e1b8:	d904      	bls.n	800e1c4 <__utoa+0x3c>
 800e1ba:	7019      	strb	r1, [r3, #0]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4618      	mov	r0, r3
 800e1c0:	b00b      	add	sp, #44	@ 0x2c
 800e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c4:	1e58      	subs	r0, r3, #1
 800e1c6:	4684      	mov	ip, r0
 800e1c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800e1cc:	fb02 5617 	mls	r6, r2, r7, r5
 800e1d0:	3628      	adds	r6, #40	@ 0x28
 800e1d2:	446e      	add	r6, sp
 800e1d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e1d8:	460c      	mov	r4, r1
 800e1da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e1de:	462e      	mov	r6, r5
 800e1e0:	42b2      	cmp	r2, r6
 800e1e2:	463d      	mov	r5, r7
 800e1e4:	f101 0101 	add.w	r1, r1, #1
 800e1e8:	d9ee      	bls.n	800e1c8 <__utoa+0x40>
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	545a      	strb	r2, [r3, r1]
 800e1ee:	1919      	adds	r1, r3, r4
 800e1f0:	1aa5      	subs	r5, r4, r2
 800e1f2:	42aa      	cmp	r2, r5
 800e1f4:	dae3      	bge.n	800e1be <__utoa+0x36>
 800e1f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e1fa:	780e      	ldrb	r6, [r1, #0]
 800e1fc:	3201      	adds	r2, #1
 800e1fe:	7006      	strb	r6, [r0, #0]
 800e200:	f801 5901 	strb.w	r5, [r1], #-1
 800e204:	e7f4      	b.n	800e1f0 <__utoa+0x68>
 800e206:	bf00      	nop
 800e208:	0800f806 	.word	0x0800f806

0800e20c <strcat>:
 800e20c:	4602      	mov	r2, r0
 800e20e:	b510      	push	{r4, lr}
 800e210:	7814      	ldrb	r4, [r2, #0]
 800e212:	4613      	mov	r3, r2
 800e214:	3201      	adds	r2, #1
 800e216:	2c00      	cmp	r4, #0
 800e218:	d1fa      	bne.n	800e210 <strcat+0x4>
 800e21a:	3b01      	subs	r3, #1
 800e21c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e220:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e224:	2a00      	cmp	r2, #0
 800e226:	d1f9      	bne.n	800e21c <strcat+0x10>
 800e228:	bd10      	pop	{r4, pc}

0800e22a <strncpy>:
 800e22a:	4603      	mov	r3, r0
 800e22c:	b510      	push	{r4, lr}
 800e22e:	3901      	subs	r1, #1
 800e230:	b132      	cbz	r2, 800e240 <strncpy+0x16>
 800e232:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e236:	3a01      	subs	r2, #1
 800e238:	f803 4b01 	strb.w	r4, [r3], #1
 800e23c:	2c00      	cmp	r4, #0
 800e23e:	d1f7      	bne.n	800e230 <strncpy+0x6>
 800e240:	2100      	movs	r1, #0
 800e242:	441a      	add	r2, r3
 800e244:	4293      	cmp	r3, r2
 800e246:	d100      	bne.n	800e24a <strncpy+0x20>
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	f803 1b01 	strb.w	r1, [r3], #1
 800e24e:	e7f9      	b.n	800e244 <strncpy+0x1a>

0800e250 <strstr>:
 800e250:	780a      	ldrb	r2, [r1, #0]
 800e252:	b570      	push	{r4, r5, r6, lr}
 800e254:	b96a      	cbnz	r2, 800e272 <strstr+0x22>
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	429a      	cmp	r2, r3
 800e25a:	d109      	bne.n	800e270 <strstr+0x20>
 800e25c:	460c      	mov	r4, r1
 800e25e:	4605      	mov	r5, r0
 800e260:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e264:	2b00      	cmp	r3, #0
 800e266:	d0f6      	beq.n	800e256 <strstr+0x6>
 800e268:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e26c:	429e      	cmp	r6, r3
 800e26e:	d0f7      	beq.n	800e260 <strstr+0x10>
 800e270:	3001      	adds	r0, #1
 800e272:	7803      	ldrb	r3, [r0, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1ef      	bne.n	800e258 <strstr+0x8>
 800e278:	4618      	mov	r0, r3
 800e27a:	e7ec      	b.n	800e256 <strstr+0x6>

0800e27c <memset>:
 800e27c:	4603      	mov	r3, r0
 800e27e:	4402      	add	r2, r0
 800e280:	4293      	cmp	r3, r2
 800e282:	d100      	bne.n	800e286 <memset+0xa>
 800e284:	4770      	bx	lr
 800e286:	f803 1b01 	strb.w	r1, [r3], #1
 800e28a:	e7f9      	b.n	800e280 <memset+0x4>

0800e28c <_sbrk_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	2300      	movs	r3, #0
 800e290:	4d05      	ldr	r5, [pc, #20]	@ (800e2a8 <_sbrk_r+0x1c>)
 800e292:	4604      	mov	r4, r0
 800e294:	4608      	mov	r0, r1
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	f7fb fc86 	bl	8009ba8 <_sbrk>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_sbrk_r+0x1a>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_sbrk_r+0x1a>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	20002170 	.word	0x20002170

0800e2ac <__errno>:
 800e2ac:	4b01      	ldr	r3, [pc, #4]	@ (800e2b4 <__errno+0x8>)
 800e2ae:	6818      	ldr	r0, [r3, #0]
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	20000f80 	.word	0x20000f80

0800e2b8 <__libc_init_array>:
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	2600      	movs	r6, #0
 800e2bc:	4d0c      	ldr	r5, [pc, #48]	@ (800e2f0 <__libc_init_array+0x38>)
 800e2be:	4c0d      	ldr	r4, [pc, #52]	@ (800e2f4 <__libc_init_array+0x3c>)
 800e2c0:	1b64      	subs	r4, r4, r5
 800e2c2:	10a4      	asrs	r4, r4, #2
 800e2c4:	42a6      	cmp	r6, r4
 800e2c6:	d109      	bne.n	800e2dc <__libc_init_array+0x24>
 800e2c8:	f000 fbc2 	bl	800ea50 <_init>
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	4d0a      	ldr	r5, [pc, #40]	@ (800e2f8 <__libc_init_array+0x40>)
 800e2d0:	4c0a      	ldr	r4, [pc, #40]	@ (800e2fc <__libc_init_array+0x44>)
 800e2d2:	1b64      	subs	r4, r4, r5
 800e2d4:	10a4      	asrs	r4, r4, #2
 800e2d6:	42a6      	cmp	r6, r4
 800e2d8:	d105      	bne.n	800e2e6 <__libc_init_array+0x2e>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e0:	4798      	blx	r3
 800e2e2:	3601      	adds	r6, #1
 800e2e4:	e7ee      	b.n	800e2c4 <__libc_init_array+0xc>
 800e2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ea:	4798      	blx	r3
 800e2ec:	3601      	adds	r6, #1
 800e2ee:	e7f2      	b.n	800e2d6 <__libc_init_array+0x1e>
 800e2f0:	0800f868 	.word	0x0800f868
 800e2f4:	0800f868 	.word	0x0800f868
 800e2f8:	0800f868 	.word	0x0800f868
 800e2fc:	0800f86c 	.word	0x0800f86c

0800e300 <__retarget_lock_acquire_recursive>:
 800e300:	4770      	bx	lr

0800e302 <__retarget_lock_release_recursive>:
 800e302:	4770      	bx	lr

0800e304 <memcpy>:
 800e304:	440a      	add	r2, r1
 800e306:	4291      	cmp	r1, r2
 800e308:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e30c:	d100      	bne.n	800e310 <memcpy+0xc>
 800e30e:	4770      	bx	lr
 800e310:	b510      	push	{r4, lr}
 800e312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e316:	4291      	cmp	r1, r2
 800e318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31c:	d1f9      	bne.n	800e312 <memcpy+0xe>
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <strcpy>:
 800e320:	4603      	mov	r3, r0
 800e322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e326:	f803 2b01 	strb.w	r2, [r3], #1
 800e32a:	2a00      	cmp	r2, #0
 800e32c:	d1f9      	bne.n	800e322 <strcpy+0x2>
 800e32e:	4770      	bx	lr

0800e330 <_free_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4605      	mov	r5, r0
 800e334:	2900      	cmp	r1, #0
 800e336:	d040      	beq.n	800e3ba <_free_r+0x8a>
 800e338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e33c:	1f0c      	subs	r4, r1, #4
 800e33e:	2b00      	cmp	r3, #0
 800e340:	bfb8      	it	lt
 800e342:	18e4      	addlt	r4, r4, r3
 800e344:	f7ff fef4 	bl	800e130 <__malloc_lock>
 800e348:	4a1c      	ldr	r2, [pc, #112]	@ (800e3bc <_free_r+0x8c>)
 800e34a:	6813      	ldr	r3, [r2, #0]
 800e34c:	b933      	cbnz	r3, 800e35c <_free_r+0x2c>
 800e34e:	6063      	str	r3, [r4, #4]
 800e350:	6014      	str	r4, [r2, #0]
 800e352:	4628      	mov	r0, r5
 800e354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e358:	f7ff bef0 	b.w	800e13c <__malloc_unlock>
 800e35c:	42a3      	cmp	r3, r4
 800e35e:	d908      	bls.n	800e372 <_free_r+0x42>
 800e360:	6820      	ldr	r0, [r4, #0]
 800e362:	1821      	adds	r1, r4, r0
 800e364:	428b      	cmp	r3, r1
 800e366:	bf01      	itttt	eq
 800e368:	6819      	ldreq	r1, [r3, #0]
 800e36a:	685b      	ldreq	r3, [r3, #4]
 800e36c:	1809      	addeq	r1, r1, r0
 800e36e:	6021      	streq	r1, [r4, #0]
 800e370:	e7ed      	b.n	800e34e <_free_r+0x1e>
 800e372:	461a      	mov	r2, r3
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	b10b      	cbz	r3, 800e37c <_free_r+0x4c>
 800e378:	42a3      	cmp	r3, r4
 800e37a:	d9fa      	bls.n	800e372 <_free_r+0x42>
 800e37c:	6811      	ldr	r1, [r2, #0]
 800e37e:	1850      	adds	r0, r2, r1
 800e380:	42a0      	cmp	r0, r4
 800e382:	d10b      	bne.n	800e39c <_free_r+0x6c>
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	4401      	add	r1, r0
 800e388:	1850      	adds	r0, r2, r1
 800e38a:	4283      	cmp	r3, r0
 800e38c:	6011      	str	r1, [r2, #0]
 800e38e:	d1e0      	bne.n	800e352 <_free_r+0x22>
 800e390:	6818      	ldr	r0, [r3, #0]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	4408      	add	r0, r1
 800e396:	6010      	str	r0, [r2, #0]
 800e398:	6053      	str	r3, [r2, #4]
 800e39a:	e7da      	b.n	800e352 <_free_r+0x22>
 800e39c:	d902      	bls.n	800e3a4 <_free_r+0x74>
 800e39e:	230c      	movs	r3, #12
 800e3a0:	602b      	str	r3, [r5, #0]
 800e3a2:	e7d6      	b.n	800e352 <_free_r+0x22>
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	1821      	adds	r1, r4, r0
 800e3a8:	428b      	cmp	r3, r1
 800e3aa:	bf01      	itttt	eq
 800e3ac:	6819      	ldreq	r1, [r3, #0]
 800e3ae:	685b      	ldreq	r3, [r3, #4]
 800e3b0:	1809      	addeq	r1, r1, r0
 800e3b2:	6021      	streq	r1, [r4, #0]
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	6054      	str	r4, [r2, #4]
 800e3b8:	e7cb      	b.n	800e352 <_free_r+0x22>
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	20002030 	.word	0x20002030

0800e3c0 <__ssputs_r>:
 800e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	461f      	mov	r7, r3
 800e3c6:	688e      	ldr	r6, [r1, #8]
 800e3c8:	4682      	mov	sl, r0
 800e3ca:	42be      	cmp	r6, r7
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	4690      	mov	r8, r2
 800e3d0:	680b      	ldr	r3, [r1, #0]
 800e3d2:	d82d      	bhi.n	800e430 <__ssputs_r+0x70>
 800e3d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3dc:	d026      	beq.n	800e42c <__ssputs_r+0x6c>
 800e3de:	6965      	ldr	r5, [r4, #20]
 800e3e0:	6909      	ldr	r1, [r1, #16]
 800e3e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3e6:	eba3 0901 	sub.w	r9, r3, r1
 800e3ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3ee:	1c7b      	adds	r3, r7, #1
 800e3f0:	444b      	add	r3, r9
 800e3f2:	106d      	asrs	r5, r5, #1
 800e3f4:	429d      	cmp	r5, r3
 800e3f6:	bf38      	it	cc
 800e3f8:	461d      	movcc	r5, r3
 800e3fa:	0553      	lsls	r3, r2, #21
 800e3fc:	d527      	bpl.n	800e44e <__ssputs_r+0x8e>
 800e3fe:	4629      	mov	r1, r5
 800e400:	f7ff fe16 	bl	800e030 <_malloc_r>
 800e404:	4606      	mov	r6, r0
 800e406:	b360      	cbz	r0, 800e462 <__ssputs_r+0xa2>
 800e408:	464a      	mov	r2, r9
 800e40a:	6921      	ldr	r1, [r4, #16]
 800e40c:	f7ff ff7a 	bl	800e304 <memcpy>
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	6126      	str	r6, [r4, #16]
 800e41e:	444e      	add	r6, r9
 800e420:	6026      	str	r6, [r4, #0]
 800e422:	463e      	mov	r6, r7
 800e424:	6165      	str	r5, [r4, #20]
 800e426:	eba5 0509 	sub.w	r5, r5, r9
 800e42a:	60a5      	str	r5, [r4, #8]
 800e42c:	42be      	cmp	r6, r7
 800e42e:	d900      	bls.n	800e432 <__ssputs_r+0x72>
 800e430:	463e      	mov	r6, r7
 800e432:	4632      	mov	r2, r6
 800e434:	4641      	mov	r1, r8
 800e436:	6820      	ldr	r0, [r4, #0]
 800e438:	f000 fada 	bl	800e9f0 <memmove>
 800e43c:	2000      	movs	r0, #0
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	1b9b      	subs	r3, r3, r6
 800e442:	60a3      	str	r3, [r4, #8]
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	4433      	add	r3, r6
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44e:	462a      	mov	r2, r5
 800e450:	f000 faa0 	bl	800e994 <_realloc_r>
 800e454:	4606      	mov	r6, r0
 800e456:	2800      	cmp	r0, #0
 800e458:	d1e0      	bne.n	800e41c <__ssputs_r+0x5c>
 800e45a:	4650      	mov	r0, sl
 800e45c:	6921      	ldr	r1, [r4, #16]
 800e45e:	f7ff ff67 	bl	800e330 <_free_r>
 800e462:	230c      	movs	r3, #12
 800e464:	f8ca 3000 	str.w	r3, [sl]
 800e468:	89a3      	ldrh	r3, [r4, #12]
 800e46a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	e7e9      	b.n	800e44a <__ssputs_r+0x8a>
	...

0800e478 <_svfiprintf_r>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	4698      	mov	r8, r3
 800e47e:	898b      	ldrh	r3, [r1, #12]
 800e480:	4607      	mov	r7, r0
 800e482:	061b      	lsls	r3, r3, #24
 800e484:	460d      	mov	r5, r1
 800e486:	4614      	mov	r4, r2
 800e488:	b09d      	sub	sp, #116	@ 0x74
 800e48a:	d510      	bpl.n	800e4ae <_svfiprintf_r+0x36>
 800e48c:	690b      	ldr	r3, [r1, #16]
 800e48e:	b973      	cbnz	r3, 800e4ae <_svfiprintf_r+0x36>
 800e490:	2140      	movs	r1, #64	@ 0x40
 800e492:	f7ff fdcd 	bl	800e030 <_malloc_r>
 800e496:	6028      	str	r0, [r5, #0]
 800e498:	6128      	str	r0, [r5, #16]
 800e49a:	b930      	cbnz	r0, 800e4aa <_svfiprintf_r+0x32>
 800e49c:	230c      	movs	r3, #12
 800e49e:	603b      	str	r3, [r7, #0]
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4a4:	b01d      	add	sp, #116	@ 0x74
 800e4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4aa:	2340      	movs	r3, #64	@ 0x40
 800e4ac:	616b      	str	r3, [r5, #20]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b2:	2320      	movs	r3, #32
 800e4b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4b8:	2330      	movs	r3, #48	@ 0x30
 800e4ba:	f04f 0901 	mov.w	r9, #1
 800e4be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e65c <_svfiprintf_r+0x1e4>
 800e4c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4ca:	4623      	mov	r3, r4
 800e4cc:	469a      	mov	sl, r3
 800e4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4d2:	b10a      	cbz	r2, 800e4d8 <_svfiprintf_r+0x60>
 800e4d4:	2a25      	cmp	r2, #37	@ 0x25
 800e4d6:	d1f9      	bne.n	800e4cc <_svfiprintf_r+0x54>
 800e4d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4dc:	d00b      	beq.n	800e4f6 <_svfiprintf_r+0x7e>
 800e4de:	465b      	mov	r3, fp
 800e4e0:	4622      	mov	r2, r4
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f7ff ff6b 	bl	800e3c0 <__ssputs_r>
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	f000 80a7 	beq.w	800e63e <_svfiprintf_r+0x1c6>
 800e4f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4f2:	445a      	add	r2, fp
 800e4f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 809f 	beq.w	800e63e <_svfiprintf_r+0x1c6>
 800e500:	2300      	movs	r3, #0
 800e502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e50a:	f10a 0a01 	add.w	sl, sl, #1
 800e50e:	9304      	str	r3, [sp, #16]
 800e510:	9307      	str	r3, [sp, #28]
 800e512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e516:	931a      	str	r3, [sp, #104]	@ 0x68
 800e518:	4654      	mov	r4, sl
 800e51a:	2205      	movs	r2, #5
 800e51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e520:	484e      	ldr	r0, [pc, #312]	@ (800e65c <_svfiprintf_r+0x1e4>)
 800e522:	f000 fa7f 	bl	800ea24 <memchr>
 800e526:	9a04      	ldr	r2, [sp, #16]
 800e528:	b9d8      	cbnz	r0, 800e562 <_svfiprintf_r+0xea>
 800e52a:	06d0      	lsls	r0, r2, #27
 800e52c:	bf44      	itt	mi
 800e52e:	2320      	movmi	r3, #32
 800e530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e534:	0711      	lsls	r1, r2, #28
 800e536:	bf44      	itt	mi
 800e538:	232b      	movmi	r3, #43	@ 0x2b
 800e53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e53e:	f89a 3000 	ldrb.w	r3, [sl]
 800e542:	2b2a      	cmp	r3, #42	@ 0x2a
 800e544:	d015      	beq.n	800e572 <_svfiprintf_r+0xfa>
 800e546:	4654      	mov	r4, sl
 800e548:	2000      	movs	r0, #0
 800e54a:	f04f 0c0a 	mov.w	ip, #10
 800e54e:	9a07      	ldr	r2, [sp, #28]
 800e550:	4621      	mov	r1, r4
 800e552:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e556:	3b30      	subs	r3, #48	@ 0x30
 800e558:	2b09      	cmp	r3, #9
 800e55a:	d94b      	bls.n	800e5f4 <_svfiprintf_r+0x17c>
 800e55c:	b1b0      	cbz	r0, 800e58c <_svfiprintf_r+0x114>
 800e55e:	9207      	str	r2, [sp, #28]
 800e560:	e014      	b.n	800e58c <_svfiprintf_r+0x114>
 800e562:	eba0 0308 	sub.w	r3, r0, r8
 800e566:	fa09 f303 	lsl.w	r3, r9, r3
 800e56a:	4313      	orrs	r3, r2
 800e56c:	46a2      	mov	sl, r4
 800e56e:	9304      	str	r3, [sp, #16]
 800e570:	e7d2      	b.n	800e518 <_svfiprintf_r+0xa0>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	1d19      	adds	r1, r3, #4
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	9103      	str	r1, [sp, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	bfbb      	ittet	lt
 800e57e:	425b      	neglt	r3, r3
 800e580:	f042 0202 	orrlt.w	r2, r2, #2
 800e584:	9307      	strge	r3, [sp, #28]
 800e586:	9307      	strlt	r3, [sp, #28]
 800e588:	bfb8      	it	lt
 800e58a:	9204      	strlt	r2, [sp, #16]
 800e58c:	7823      	ldrb	r3, [r4, #0]
 800e58e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e590:	d10a      	bne.n	800e5a8 <_svfiprintf_r+0x130>
 800e592:	7863      	ldrb	r3, [r4, #1]
 800e594:	2b2a      	cmp	r3, #42	@ 0x2a
 800e596:	d132      	bne.n	800e5fe <_svfiprintf_r+0x186>
 800e598:	9b03      	ldr	r3, [sp, #12]
 800e59a:	3402      	adds	r4, #2
 800e59c:	1d1a      	adds	r2, r3, #4
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	9203      	str	r2, [sp, #12]
 800e5a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5a6:	9305      	str	r3, [sp, #20]
 800e5a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e660 <_svfiprintf_r+0x1e8>
 800e5ac:	2203      	movs	r2, #3
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	7821      	ldrb	r1, [r4, #0]
 800e5b2:	f000 fa37 	bl	800ea24 <memchr>
 800e5b6:	b138      	cbz	r0, 800e5c8 <_svfiprintf_r+0x150>
 800e5b8:	2240      	movs	r2, #64	@ 0x40
 800e5ba:	9b04      	ldr	r3, [sp, #16]
 800e5bc:	eba0 000a 	sub.w	r0, r0, sl
 800e5c0:	4082      	lsls	r2, r0
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	3401      	adds	r4, #1
 800e5c6:	9304      	str	r3, [sp, #16]
 800e5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5cc:	2206      	movs	r2, #6
 800e5ce:	4825      	ldr	r0, [pc, #148]	@ (800e664 <_svfiprintf_r+0x1ec>)
 800e5d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5d4:	f000 fa26 	bl	800ea24 <memchr>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d036      	beq.n	800e64a <_svfiprintf_r+0x1d2>
 800e5dc:	4b22      	ldr	r3, [pc, #136]	@ (800e668 <_svfiprintf_r+0x1f0>)
 800e5de:	bb1b      	cbnz	r3, 800e628 <_svfiprintf_r+0x1b0>
 800e5e0:	9b03      	ldr	r3, [sp, #12]
 800e5e2:	3307      	adds	r3, #7
 800e5e4:	f023 0307 	bic.w	r3, r3, #7
 800e5e8:	3308      	adds	r3, #8
 800e5ea:	9303      	str	r3, [sp, #12]
 800e5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ee:	4433      	add	r3, r6
 800e5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5f2:	e76a      	b.n	800e4ca <_svfiprintf_r+0x52>
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	2001      	movs	r0, #1
 800e5f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5fc:	e7a8      	b.n	800e550 <_svfiprintf_r+0xd8>
 800e5fe:	2300      	movs	r3, #0
 800e600:	f04f 0c0a 	mov.w	ip, #10
 800e604:	4619      	mov	r1, r3
 800e606:	3401      	adds	r4, #1
 800e608:	9305      	str	r3, [sp, #20]
 800e60a:	4620      	mov	r0, r4
 800e60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e610:	3a30      	subs	r2, #48	@ 0x30
 800e612:	2a09      	cmp	r2, #9
 800e614:	d903      	bls.n	800e61e <_svfiprintf_r+0x1a6>
 800e616:	2b00      	cmp	r3, #0
 800e618:	d0c6      	beq.n	800e5a8 <_svfiprintf_r+0x130>
 800e61a:	9105      	str	r1, [sp, #20]
 800e61c:	e7c4      	b.n	800e5a8 <_svfiprintf_r+0x130>
 800e61e:	4604      	mov	r4, r0
 800e620:	2301      	movs	r3, #1
 800e622:	fb0c 2101 	mla	r1, ip, r1, r2
 800e626:	e7f0      	b.n	800e60a <_svfiprintf_r+0x192>
 800e628:	ab03      	add	r3, sp, #12
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	462a      	mov	r2, r5
 800e62e:	4638      	mov	r0, r7
 800e630:	4b0e      	ldr	r3, [pc, #56]	@ (800e66c <_svfiprintf_r+0x1f4>)
 800e632:	a904      	add	r1, sp, #16
 800e634:	f3af 8000 	nop.w
 800e638:	1c42      	adds	r2, r0, #1
 800e63a:	4606      	mov	r6, r0
 800e63c:	d1d6      	bne.n	800e5ec <_svfiprintf_r+0x174>
 800e63e:	89ab      	ldrh	r3, [r5, #12]
 800e640:	065b      	lsls	r3, r3, #25
 800e642:	f53f af2d 	bmi.w	800e4a0 <_svfiprintf_r+0x28>
 800e646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e648:	e72c      	b.n	800e4a4 <_svfiprintf_r+0x2c>
 800e64a:	ab03      	add	r3, sp, #12
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	462a      	mov	r2, r5
 800e650:	4638      	mov	r0, r7
 800e652:	4b06      	ldr	r3, [pc, #24]	@ (800e66c <_svfiprintf_r+0x1f4>)
 800e654:	a904      	add	r1, sp, #16
 800e656:	f000 f87d 	bl	800e754 <_printf_i>
 800e65a:	e7ed      	b.n	800e638 <_svfiprintf_r+0x1c0>
 800e65c:	0800f82b 	.word	0x0800f82b
 800e660:	0800f831 	.word	0x0800f831
 800e664:	0800f835 	.word	0x0800f835
 800e668:	00000000 	.word	0x00000000
 800e66c:	0800e3c1 	.word	0x0800e3c1

0800e670 <_printf_common>:
 800e670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e674:	4616      	mov	r6, r2
 800e676:	4698      	mov	r8, r3
 800e678:	688a      	ldr	r2, [r1, #8]
 800e67a:	690b      	ldr	r3, [r1, #16]
 800e67c:	4607      	mov	r7, r0
 800e67e:	4293      	cmp	r3, r2
 800e680:	bfb8      	it	lt
 800e682:	4613      	movlt	r3, r2
 800e684:	6033      	str	r3, [r6, #0]
 800e686:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e68a:	460c      	mov	r4, r1
 800e68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e690:	b10a      	cbz	r2, 800e696 <_printf_common+0x26>
 800e692:	3301      	adds	r3, #1
 800e694:	6033      	str	r3, [r6, #0]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	0699      	lsls	r1, r3, #26
 800e69a:	bf42      	ittt	mi
 800e69c:	6833      	ldrmi	r3, [r6, #0]
 800e69e:	3302      	addmi	r3, #2
 800e6a0:	6033      	strmi	r3, [r6, #0]
 800e6a2:	6825      	ldr	r5, [r4, #0]
 800e6a4:	f015 0506 	ands.w	r5, r5, #6
 800e6a8:	d106      	bne.n	800e6b8 <_printf_common+0x48>
 800e6aa:	f104 0a19 	add.w	sl, r4, #25
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	6832      	ldr	r2, [r6, #0]
 800e6b2:	1a9b      	subs	r3, r3, r2
 800e6b4:	42ab      	cmp	r3, r5
 800e6b6:	dc2b      	bgt.n	800e710 <_printf_common+0xa0>
 800e6b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6bc:	6822      	ldr	r2, [r4, #0]
 800e6be:	3b00      	subs	r3, #0
 800e6c0:	bf18      	it	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	0692      	lsls	r2, r2, #26
 800e6c6:	d430      	bmi.n	800e72a <_printf_common+0xba>
 800e6c8:	4641      	mov	r1, r8
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6d0:	47c8      	blx	r9
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d023      	beq.n	800e71e <_printf_common+0xae>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	6922      	ldr	r2, [r4, #16]
 800e6da:	f003 0306 	and.w	r3, r3, #6
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	bf14      	ite	ne
 800e6e2:	2500      	movne	r5, #0
 800e6e4:	6833      	ldreq	r3, [r6, #0]
 800e6e6:	f04f 0600 	mov.w	r6, #0
 800e6ea:	bf08      	it	eq
 800e6ec:	68e5      	ldreq	r5, [r4, #12]
 800e6ee:	f104 041a 	add.w	r4, r4, #26
 800e6f2:	bf08      	it	eq
 800e6f4:	1aed      	subeq	r5, r5, r3
 800e6f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e6fa:	bf08      	it	eq
 800e6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e700:	4293      	cmp	r3, r2
 800e702:	bfc4      	itt	gt
 800e704:	1a9b      	subgt	r3, r3, r2
 800e706:	18ed      	addgt	r5, r5, r3
 800e708:	42b5      	cmp	r5, r6
 800e70a:	d11a      	bne.n	800e742 <_printf_common+0xd2>
 800e70c:	2000      	movs	r0, #0
 800e70e:	e008      	b.n	800e722 <_printf_common+0xb2>
 800e710:	2301      	movs	r3, #1
 800e712:	4652      	mov	r2, sl
 800e714:	4641      	mov	r1, r8
 800e716:	4638      	mov	r0, r7
 800e718:	47c8      	blx	r9
 800e71a:	3001      	adds	r0, #1
 800e71c:	d103      	bne.n	800e726 <_printf_common+0xb6>
 800e71e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e726:	3501      	adds	r5, #1
 800e728:	e7c1      	b.n	800e6ae <_printf_common+0x3e>
 800e72a:	2030      	movs	r0, #48	@ 0x30
 800e72c:	18e1      	adds	r1, r4, r3
 800e72e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e738:	4422      	add	r2, r4
 800e73a:	3302      	adds	r3, #2
 800e73c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e740:	e7c2      	b.n	800e6c8 <_printf_common+0x58>
 800e742:	2301      	movs	r3, #1
 800e744:	4622      	mov	r2, r4
 800e746:	4641      	mov	r1, r8
 800e748:	4638      	mov	r0, r7
 800e74a:	47c8      	blx	r9
 800e74c:	3001      	adds	r0, #1
 800e74e:	d0e6      	beq.n	800e71e <_printf_common+0xae>
 800e750:	3601      	adds	r6, #1
 800e752:	e7d9      	b.n	800e708 <_printf_common+0x98>

0800e754 <_printf_i>:
 800e754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	7e0f      	ldrb	r7, [r1, #24]
 800e75a:	4691      	mov	r9, r2
 800e75c:	2f78      	cmp	r7, #120	@ 0x78
 800e75e:	4680      	mov	r8, r0
 800e760:	460c      	mov	r4, r1
 800e762:	469a      	mov	sl, r3
 800e764:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e76a:	d807      	bhi.n	800e77c <_printf_i+0x28>
 800e76c:	2f62      	cmp	r7, #98	@ 0x62
 800e76e:	d80a      	bhi.n	800e786 <_printf_i+0x32>
 800e770:	2f00      	cmp	r7, #0
 800e772:	f000 80d3 	beq.w	800e91c <_printf_i+0x1c8>
 800e776:	2f58      	cmp	r7, #88	@ 0x58
 800e778:	f000 80ba 	beq.w	800e8f0 <_printf_i+0x19c>
 800e77c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e784:	e03a      	b.n	800e7fc <_printf_i+0xa8>
 800e786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e78a:	2b15      	cmp	r3, #21
 800e78c:	d8f6      	bhi.n	800e77c <_printf_i+0x28>
 800e78e:	a101      	add	r1, pc, #4	@ (adr r1, 800e794 <_printf_i+0x40>)
 800e790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e794:	0800e7ed 	.word	0x0800e7ed
 800e798:	0800e801 	.word	0x0800e801
 800e79c:	0800e77d 	.word	0x0800e77d
 800e7a0:	0800e77d 	.word	0x0800e77d
 800e7a4:	0800e77d 	.word	0x0800e77d
 800e7a8:	0800e77d 	.word	0x0800e77d
 800e7ac:	0800e801 	.word	0x0800e801
 800e7b0:	0800e77d 	.word	0x0800e77d
 800e7b4:	0800e77d 	.word	0x0800e77d
 800e7b8:	0800e77d 	.word	0x0800e77d
 800e7bc:	0800e77d 	.word	0x0800e77d
 800e7c0:	0800e903 	.word	0x0800e903
 800e7c4:	0800e82b 	.word	0x0800e82b
 800e7c8:	0800e8bd 	.word	0x0800e8bd
 800e7cc:	0800e77d 	.word	0x0800e77d
 800e7d0:	0800e77d 	.word	0x0800e77d
 800e7d4:	0800e925 	.word	0x0800e925
 800e7d8:	0800e77d 	.word	0x0800e77d
 800e7dc:	0800e82b 	.word	0x0800e82b
 800e7e0:	0800e77d 	.word	0x0800e77d
 800e7e4:	0800e77d 	.word	0x0800e77d
 800e7e8:	0800e8c5 	.word	0x0800e8c5
 800e7ec:	6833      	ldr	r3, [r6, #0]
 800e7ee:	1d1a      	adds	r2, r3, #4
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	6032      	str	r2, [r6, #0]
 800e7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e09e      	b.n	800e93e <_printf_i+0x1ea>
 800e800:	6833      	ldr	r3, [r6, #0]
 800e802:	6820      	ldr	r0, [r4, #0]
 800e804:	1d19      	adds	r1, r3, #4
 800e806:	6031      	str	r1, [r6, #0]
 800e808:	0606      	lsls	r6, r0, #24
 800e80a:	d501      	bpl.n	800e810 <_printf_i+0xbc>
 800e80c:	681d      	ldr	r5, [r3, #0]
 800e80e:	e003      	b.n	800e818 <_printf_i+0xc4>
 800e810:	0645      	lsls	r5, r0, #25
 800e812:	d5fb      	bpl.n	800e80c <_printf_i+0xb8>
 800e814:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e818:	2d00      	cmp	r5, #0
 800e81a:	da03      	bge.n	800e824 <_printf_i+0xd0>
 800e81c:	232d      	movs	r3, #45	@ 0x2d
 800e81e:	426d      	negs	r5, r5
 800e820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e824:	230a      	movs	r3, #10
 800e826:	4859      	ldr	r0, [pc, #356]	@ (800e98c <_printf_i+0x238>)
 800e828:	e011      	b.n	800e84e <_printf_i+0xfa>
 800e82a:	6821      	ldr	r1, [r4, #0]
 800e82c:	6833      	ldr	r3, [r6, #0]
 800e82e:	0608      	lsls	r0, r1, #24
 800e830:	f853 5b04 	ldr.w	r5, [r3], #4
 800e834:	d402      	bmi.n	800e83c <_printf_i+0xe8>
 800e836:	0649      	lsls	r1, r1, #25
 800e838:	bf48      	it	mi
 800e83a:	b2ad      	uxthmi	r5, r5
 800e83c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e83e:	6033      	str	r3, [r6, #0]
 800e840:	bf14      	ite	ne
 800e842:	230a      	movne	r3, #10
 800e844:	2308      	moveq	r3, #8
 800e846:	4851      	ldr	r0, [pc, #324]	@ (800e98c <_printf_i+0x238>)
 800e848:	2100      	movs	r1, #0
 800e84a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e84e:	6866      	ldr	r6, [r4, #4]
 800e850:	2e00      	cmp	r6, #0
 800e852:	bfa8      	it	ge
 800e854:	6821      	ldrge	r1, [r4, #0]
 800e856:	60a6      	str	r6, [r4, #8]
 800e858:	bfa4      	itt	ge
 800e85a:	f021 0104 	bicge.w	r1, r1, #4
 800e85e:	6021      	strge	r1, [r4, #0]
 800e860:	b90d      	cbnz	r5, 800e866 <_printf_i+0x112>
 800e862:	2e00      	cmp	r6, #0
 800e864:	d04b      	beq.n	800e8fe <_printf_i+0x1aa>
 800e866:	4616      	mov	r6, r2
 800e868:	fbb5 f1f3 	udiv	r1, r5, r3
 800e86c:	fb03 5711 	mls	r7, r3, r1, r5
 800e870:	5dc7      	ldrb	r7, [r0, r7]
 800e872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e876:	462f      	mov	r7, r5
 800e878:	42bb      	cmp	r3, r7
 800e87a:	460d      	mov	r5, r1
 800e87c:	d9f4      	bls.n	800e868 <_printf_i+0x114>
 800e87e:	2b08      	cmp	r3, #8
 800e880:	d10b      	bne.n	800e89a <_printf_i+0x146>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	07df      	lsls	r7, r3, #31
 800e886:	d508      	bpl.n	800e89a <_printf_i+0x146>
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	6861      	ldr	r1, [r4, #4]
 800e88c:	4299      	cmp	r1, r3
 800e88e:	bfde      	ittt	le
 800e890:	2330      	movle	r3, #48	@ 0x30
 800e892:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e896:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e89a:	1b92      	subs	r2, r2, r6
 800e89c:	6122      	str	r2, [r4, #16]
 800e89e:	464b      	mov	r3, r9
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	f8cd a000 	str.w	sl, [sp]
 800e8a8:	aa03      	add	r2, sp, #12
 800e8aa:	f7ff fee1 	bl	800e670 <_printf_common>
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d14a      	bne.n	800e948 <_printf_i+0x1f4>
 800e8b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8b6:	b004      	add	sp, #16
 800e8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	f043 0320 	orr.w	r3, r3, #32
 800e8c2:	6023      	str	r3, [r4, #0]
 800e8c4:	2778      	movs	r7, #120	@ 0x78
 800e8c6:	4832      	ldr	r0, [pc, #200]	@ (800e990 <_printf_i+0x23c>)
 800e8c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	6831      	ldr	r1, [r6, #0]
 800e8d0:	061f      	lsls	r7, r3, #24
 800e8d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8d6:	d402      	bmi.n	800e8de <_printf_i+0x18a>
 800e8d8:	065f      	lsls	r7, r3, #25
 800e8da:	bf48      	it	mi
 800e8dc:	b2ad      	uxthmi	r5, r5
 800e8de:	6031      	str	r1, [r6, #0]
 800e8e0:	07d9      	lsls	r1, r3, #31
 800e8e2:	bf44      	itt	mi
 800e8e4:	f043 0320 	orrmi.w	r3, r3, #32
 800e8e8:	6023      	strmi	r3, [r4, #0]
 800e8ea:	b11d      	cbz	r5, 800e8f4 <_printf_i+0x1a0>
 800e8ec:	2310      	movs	r3, #16
 800e8ee:	e7ab      	b.n	800e848 <_printf_i+0xf4>
 800e8f0:	4826      	ldr	r0, [pc, #152]	@ (800e98c <_printf_i+0x238>)
 800e8f2:	e7e9      	b.n	800e8c8 <_printf_i+0x174>
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	f023 0320 	bic.w	r3, r3, #32
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	e7f6      	b.n	800e8ec <_printf_i+0x198>
 800e8fe:	4616      	mov	r6, r2
 800e900:	e7bd      	b.n	800e87e <_printf_i+0x12a>
 800e902:	6833      	ldr	r3, [r6, #0]
 800e904:	6825      	ldr	r5, [r4, #0]
 800e906:	1d18      	adds	r0, r3, #4
 800e908:	6961      	ldr	r1, [r4, #20]
 800e90a:	6030      	str	r0, [r6, #0]
 800e90c:	062e      	lsls	r6, r5, #24
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	d501      	bpl.n	800e916 <_printf_i+0x1c2>
 800e912:	6019      	str	r1, [r3, #0]
 800e914:	e002      	b.n	800e91c <_printf_i+0x1c8>
 800e916:	0668      	lsls	r0, r5, #25
 800e918:	d5fb      	bpl.n	800e912 <_printf_i+0x1be>
 800e91a:	8019      	strh	r1, [r3, #0]
 800e91c:	2300      	movs	r3, #0
 800e91e:	4616      	mov	r6, r2
 800e920:	6123      	str	r3, [r4, #16]
 800e922:	e7bc      	b.n	800e89e <_printf_i+0x14a>
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	2100      	movs	r1, #0
 800e928:	1d1a      	adds	r2, r3, #4
 800e92a:	6032      	str	r2, [r6, #0]
 800e92c:	681e      	ldr	r6, [r3, #0]
 800e92e:	6862      	ldr	r2, [r4, #4]
 800e930:	4630      	mov	r0, r6
 800e932:	f000 f877 	bl	800ea24 <memchr>
 800e936:	b108      	cbz	r0, 800e93c <_printf_i+0x1e8>
 800e938:	1b80      	subs	r0, r0, r6
 800e93a:	6060      	str	r0, [r4, #4]
 800e93c:	6863      	ldr	r3, [r4, #4]
 800e93e:	6123      	str	r3, [r4, #16]
 800e940:	2300      	movs	r3, #0
 800e942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e946:	e7aa      	b.n	800e89e <_printf_i+0x14a>
 800e948:	4632      	mov	r2, r6
 800e94a:	4649      	mov	r1, r9
 800e94c:	4640      	mov	r0, r8
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	47d0      	blx	sl
 800e952:	3001      	adds	r0, #1
 800e954:	d0ad      	beq.n	800e8b2 <_printf_i+0x15e>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	079b      	lsls	r3, r3, #30
 800e95a:	d413      	bmi.n	800e984 <_printf_i+0x230>
 800e95c:	68e0      	ldr	r0, [r4, #12]
 800e95e:	9b03      	ldr	r3, [sp, #12]
 800e960:	4298      	cmp	r0, r3
 800e962:	bfb8      	it	lt
 800e964:	4618      	movlt	r0, r3
 800e966:	e7a6      	b.n	800e8b6 <_printf_i+0x162>
 800e968:	2301      	movs	r3, #1
 800e96a:	4632      	mov	r2, r6
 800e96c:	4649      	mov	r1, r9
 800e96e:	4640      	mov	r0, r8
 800e970:	47d0      	blx	sl
 800e972:	3001      	adds	r0, #1
 800e974:	d09d      	beq.n	800e8b2 <_printf_i+0x15e>
 800e976:	3501      	adds	r5, #1
 800e978:	68e3      	ldr	r3, [r4, #12]
 800e97a:	9903      	ldr	r1, [sp, #12]
 800e97c:	1a5b      	subs	r3, r3, r1
 800e97e:	42ab      	cmp	r3, r5
 800e980:	dcf2      	bgt.n	800e968 <_printf_i+0x214>
 800e982:	e7eb      	b.n	800e95c <_printf_i+0x208>
 800e984:	2500      	movs	r5, #0
 800e986:	f104 0619 	add.w	r6, r4, #25
 800e98a:	e7f5      	b.n	800e978 <_printf_i+0x224>
 800e98c:	0800f83c 	.word	0x0800f83c
 800e990:	0800f84d 	.word	0x0800f84d

0800e994 <_realloc_r>:
 800e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e998:	4680      	mov	r8, r0
 800e99a:	4615      	mov	r5, r2
 800e99c:	460c      	mov	r4, r1
 800e99e:	b921      	cbnz	r1, 800e9aa <_realloc_r+0x16>
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a6:	f7ff bb43 	b.w	800e030 <_malloc_r>
 800e9aa:	b92a      	cbnz	r2, 800e9b8 <_realloc_r+0x24>
 800e9ac:	f7ff fcc0 	bl	800e330 <_free_r>
 800e9b0:	2400      	movs	r4, #0
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b8:	f000 f842 	bl	800ea40 <_malloc_usable_size_r>
 800e9bc:	4285      	cmp	r5, r0
 800e9be:	4606      	mov	r6, r0
 800e9c0:	d802      	bhi.n	800e9c8 <_realloc_r+0x34>
 800e9c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e9c6:	d8f4      	bhi.n	800e9b2 <_realloc_r+0x1e>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	f7ff fb30 	bl	800e030 <_malloc_r>
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d0ec      	beq.n	800e9b0 <_realloc_r+0x1c>
 800e9d6:	42b5      	cmp	r5, r6
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4621      	mov	r1, r4
 800e9dc:	bf28      	it	cs
 800e9de:	4632      	movcs	r2, r6
 800e9e0:	f7ff fc90 	bl	800e304 <memcpy>
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4640      	mov	r0, r8
 800e9e8:	f7ff fca2 	bl	800e330 <_free_r>
 800e9ec:	463c      	mov	r4, r7
 800e9ee:	e7e0      	b.n	800e9b2 <_realloc_r+0x1e>

0800e9f0 <memmove>:
 800e9f0:	4288      	cmp	r0, r1
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	eb01 0402 	add.w	r4, r1, r2
 800e9f8:	d902      	bls.n	800ea00 <memmove+0x10>
 800e9fa:	4284      	cmp	r4, r0
 800e9fc:	4623      	mov	r3, r4
 800e9fe:	d807      	bhi.n	800ea10 <memmove+0x20>
 800ea00:	1e43      	subs	r3, r0, #1
 800ea02:	42a1      	cmp	r1, r4
 800ea04:	d008      	beq.n	800ea18 <memmove+0x28>
 800ea06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea0e:	e7f8      	b.n	800ea02 <memmove+0x12>
 800ea10:	4601      	mov	r1, r0
 800ea12:	4402      	add	r2, r0
 800ea14:	428a      	cmp	r2, r1
 800ea16:	d100      	bne.n	800ea1a <memmove+0x2a>
 800ea18:	bd10      	pop	{r4, pc}
 800ea1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea22:	e7f7      	b.n	800ea14 <memmove+0x24>

0800ea24 <memchr>:
 800ea24:	4603      	mov	r3, r0
 800ea26:	b510      	push	{r4, lr}
 800ea28:	b2c9      	uxtb	r1, r1
 800ea2a:	4402      	add	r2, r0
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	4618      	mov	r0, r3
 800ea30:	d101      	bne.n	800ea36 <memchr+0x12>
 800ea32:	2000      	movs	r0, #0
 800ea34:	e003      	b.n	800ea3e <memchr+0x1a>
 800ea36:	7804      	ldrb	r4, [r0, #0]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	428c      	cmp	r4, r1
 800ea3c:	d1f6      	bne.n	800ea2c <memchr+0x8>
 800ea3e:	bd10      	pop	{r4, pc}

0800ea40 <_malloc_usable_size_r>:
 800ea40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea44:	1f18      	subs	r0, r3, #4
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	bfbc      	itt	lt
 800ea4a:	580b      	ldrlt	r3, [r1, r0]
 800ea4c:	18c0      	addlt	r0, r0, r3
 800ea4e:	4770      	bx	lr

0800ea50 <_init>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	bf00      	nop
 800ea54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea56:	bc08      	pop	{r3}
 800ea58:	469e      	mov	lr, r3
 800ea5a:	4770      	bx	lr

0800ea5c <_fini>:
 800ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5e:	bf00      	nop
 800ea60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea62:	bc08      	pop	{r3}
 800ea64:	469e      	mov	lr, r3
 800ea66:	4770      	bx	lr
