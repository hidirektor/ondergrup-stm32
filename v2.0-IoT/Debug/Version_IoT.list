
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de84  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  0800e068  0800e068  0000f068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebf4  0800ebf4  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebf4  0800ebf4  0000fbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebfc  0800ebfc  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebfc  0800ebfc  0000fbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec00  0800ec00  0000fc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800ec04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0800fbd4  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800fbd4  00011b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019104  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  0002a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  0002fab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d694  00000000  00000000  0004c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05f0  00000000  00000000  000699f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  0010a02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e050 	.word	0x0800e050

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e050 	.word	0x0800e050

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 faca 	bl	80007d8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]
	idVerifyVal = eepromData[49];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000260:	4b91      	ldr	r3, [pc, #580]	@ (80004a8 <eepromKontrol+0x274>)
 8000262:	78da      	ldrb	r2, [r3, #3]
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b8f      	ldr	r3, [pc, #572]	@ (80004a8 <eepromKontrol+0x274>)
 800026a:	785a      	ldrb	r2, [r3, #1]
 800026c:	4b93      	ldr	r3, [pc, #588]	@ (80004bc <eepromKontrol+0x288>)
 800026e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000270:	4b8d      	ldr	r3, [pc, #564]	@ (80004a8 <eepromKontrol+0x274>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b92      	ldr	r3, [pc, #584]	@ (80004c0 <eepromKontrol+0x28c>)
 8000276:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000278:	4b8b      	ldr	r3, [pc, #556]	@ (80004a8 <eepromKontrol+0x274>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b91      	ldr	r3, [pc, #580]	@ (80004c4 <eepromKontrol+0x290>)
 800027e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000280:	4b89      	ldr	r3, [pc, #548]	@ (80004a8 <eepromKontrol+0x274>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <eepromKontrol+0x294>)
 8000286:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000288:	4b87      	ldr	r3, [pc, #540]	@ (80004a8 <eepromKontrol+0x274>)
 800028a:	799a      	ldrb	r2, [r3, #6]
 800028c:	4b8f      	ldr	r3, [pc, #572]	@ (80004cc <eepromKontrol+0x298>)
 800028e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000290:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <eepromKontrol+0x274>)
 8000292:	79da      	ldrb	r2, [r3, #7]
 8000294:	4b8e      	ldr	r3, [pc, #568]	@ (80004d0 <eepromKontrol+0x29c>)
 8000296:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000298:	4b83      	ldr	r3, [pc, #524]	@ (80004a8 <eepromKontrol+0x274>)
 800029a:	7a1a      	ldrb	r2, [r3, #8]
 800029c:	4b8d      	ldr	r3, [pc, #564]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a0:	4b81      	ldr	r3, [pc, #516]	@ (80004a8 <eepromKontrol+0x274>)
 80002a2:	7a5a      	ldrb	r2, [r3, #9]
 80002a4:	4b8c      	ldr	r3, [pc, #560]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a8:	4b7f      	ldr	r3, [pc, #508]	@ (80004a8 <eepromKontrol+0x274>)
 80002aa:	7a9a      	ldrb	r2, [r3, #10]
 80002ac:	4b8b      	ldr	r3, [pc, #556]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b0:	4b7d      	ldr	r3, [pc, #500]	@ (80004a8 <eepromKontrol+0x274>)
 80002b2:	7ada      	ldrb	r2, [r3, #11]
 80002b4:	4b8a      	ldr	r3, [pc, #552]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b8:	4b7b      	ldr	r3, [pc, #492]	@ (80004a8 <eepromKontrol+0x274>)
 80002ba:	7b1a      	ldrb	r2, [r3, #12]
 80002bc:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c0:	4b79      	ldr	r3, [pc, #484]	@ (80004a8 <eepromKontrol+0x274>)
 80002c2:	7b5a      	ldrb	r2, [r3, #13]
 80002c4:	4b88      	ldr	r3, [pc, #544]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c8:	4b77      	ldr	r3, [pc, #476]	@ (80004a8 <eepromKontrol+0x274>)
 80002ca:	7b9a      	ldrb	r2, [r3, #14]
 80002cc:	4b87      	ldr	r3, [pc, #540]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ce:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d0:	4b75      	ldr	r3, [pc, #468]	@ (80004a8 <eepromKontrol+0x274>)
 80002d2:	7bda      	ldrb	r2, [r3, #15]
 80002d4:	4b86      	ldr	r3, [pc, #536]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d8:	4b73      	ldr	r3, [pc, #460]	@ (80004a8 <eepromKontrol+0x274>)
 80002da:	7c1a      	ldrb	r2, [r3, #16]
 80002dc:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002de:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e0:	4b71      	ldr	r3, [pc, #452]	@ (80004a8 <eepromKontrol+0x274>)
 80002e2:	7c5a      	ldrb	r2, [r3, #17]
 80002e4:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	7c9a      	ldrb	r2, [r3, #18]
 80002ec:	4b83      	ldr	r3, [pc, #524]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f0:	4b6d      	ldr	r3, [pc, #436]	@ (80004a8 <eepromKontrol+0x274>)
 80002f2:	7cda      	ldrb	r2, [r3, #19]
 80002f4:	4b82      	ldr	r3, [pc, #520]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f8:	4b6b      	ldr	r3, [pc, #428]	@ (80004a8 <eepromKontrol+0x274>)
 80002fa:	7d1a      	ldrb	r2, [r3, #20]
 80002fc:	4b81      	ldr	r3, [pc, #516]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fe:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000300:	4b69      	ldr	r3, [pc, #420]	@ (80004a8 <eepromKontrol+0x274>)
 8000302:	7d5a      	ldrb	r2, [r3, #21]
 8000304:	4b80      	ldr	r3, [pc, #512]	@ (8000508 <eepromKontrol+0x2d4>)
 8000306:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000308:	4b67      	ldr	r3, [pc, #412]	@ (80004a8 <eepromKontrol+0x274>)
 800030a:	7d9a      	ldrb	r2, [r3, #22]
 800030c:	4b7f      	ldr	r3, [pc, #508]	@ (800050c <eepromKontrol+0x2d8>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000310:	4b65      	ldr	r3, [pc, #404]	@ (80004a8 <eepromKontrol+0x274>)
 8000312:	7dda      	ldrb	r2, [r3, #23]
 8000314:	4b7e      	ldr	r3, [pc, #504]	@ (8000510 <eepromKontrol+0x2dc>)
 8000316:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000318:	4b63      	ldr	r3, [pc, #396]	@ (80004a8 <eepromKontrol+0x274>)
 800031a:	7e1a      	ldrb	r2, [r3, #24]
 800031c:	4b7d      	ldr	r3, [pc, #500]	@ (8000514 <eepromKontrol+0x2e0>)
 800031e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000320:	4b61      	ldr	r3, [pc, #388]	@ (80004a8 <eepromKontrol+0x274>)
 8000322:	7e5a      	ldrb	r2, [r3, #25]
 8000324:	4b7c      	ldr	r3, [pc, #496]	@ (8000518 <eepromKontrol+0x2e4>)
 8000326:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000328:	4b5f      	ldr	r3, [pc, #380]	@ (80004a8 <eepromKontrol+0x274>)
 800032a:	7e9a      	ldrb	r2, [r3, #26]
 800032c:	4b7b      	ldr	r3, [pc, #492]	@ (800051c <eepromKontrol+0x2e8>)
 800032e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000330:	4b5d      	ldr	r3, [pc, #372]	@ (80004a8 <eepromKontrol+0x274>)
 8000332:	7eda      	ldrb	r2, [r3, #27]
 8000334:	4b7a      	ldr	r3, [pc, #488]	@ (8000520 <eepromKontrol+0x2ec>)
 8000336:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000338:	4b5b      	ldr	r3, [pc, #364]	@ (80004a8 <eepromKontrol+0x274>)
 800033a:	7f1a      	ldrb	r2, [r3, #28]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <eepromKontrol+0x2f0>)
 800033e:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000340:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <eepromKontrol+0x274>)
 8000342:	7f5a      	ldrb	r2, [r3, #29]
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <eepromKontrol+0x2f4>)
 8000346:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000348:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <eepromKontrol+0x274>)
 800034a:	7f9a      	ldrb	r2, [r3, #30]
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d2:	4b35      	ldr	r3, [pc, #212]	@ (80004a8 <eepromKontrol+0x274>)
 80003d4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d8:	4b62      	ldr	r3, [pc, #392]	@ (8000564 <eepromKontrol+0x330>)
 80003da:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <eepromKontrol+0x288>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d902      	bls.n	80003ea <eepromKontrol+0x1b6>
	    calismaSekli=0;
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <eepromKontrol+0x288>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d902      	bls.n	80003f8 <eepromKontrol+0x1c4>
	    emniyetCercevesi=1;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d902      	bls.n	8000406 <eepromKontrol+0x1d2>
	    yavaslamaLimit=0;
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000406:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d902      	bls.n	8000414 <eepromKontrol+0x1e0>
	    altLimit=1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <eepromKontrol+0x294>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000414:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d902      	bls.n	8000422 <eepromKontrol+0x1ee>
	    basincSalteri=1;
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d902      	bls.n	8000430 <eepromKontrol+0x1fc>
	    kapiSecimleri=3;
 800042a:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <eepromKontrol+0x29c>)
 800042c:	2203      	movs	r2, #3
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <eepromKontrol+0x308>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d902      	bls.n	800043e <eepromKontrol+0x20a>
	    kapiAcTipi=0;
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <eepromKontrol+0x308>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d902      	bls.n	800044c <eepromKontrol+0x218>
	    kapi1Tip=1;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d902      	bls.n	800045a <eepromKontrol+0x226>
	    kapi1AcSure=5;
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d902      	bls.n	8000468 <eepromKontrol+0x234>
	    kapi2Tip=1;
 8000462:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <eepromKontrol+0x2a8>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d902      	bls.n	8000476 <eepromKontrol+0x242>
	    kapi2AcSure=5;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d902      	bls.n	8000484 <eepromKontrol+0x250>
	    kapitablaTip=1;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <eepromKontrol+0x300>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d902      	bls.n	8000492 <eepromKontrol+0x25e>
	    kapiTablaAcKonum=2;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <eepromKontrol+0x300>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d902      	bls.n	80004a0 <eepromKontrol+0x26c>
	    kapiTablaAcSure=5;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <eepromKontrol+0x2b4>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	e05f      	b.n	8000568 <eepromKontrol+0x334>
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	200010e8 	.word	0x200010e8
 80004b8:	20001091 	.word	0x20001091
 80004bc:	200010bd 	.word	0x200010bd
 80004c0:	200010c0 	.word	0x200010c0
 80004c4:	200010c1 	.word	0x200010c1
 80004c8:	200010c2 	.word	0x200010c2
 80004cc:	200010c3 	.word	0x200010c3
 80004d0:	200010c4 	.word	0x200010c4
 80004d4:	200010c5 	.word	0x200010c5
 80004d8:	200010d5 	.word	0x200010d5
 80004dc:	200010c6 	.word	0x200010c6
 80004e0:	200010d6 	.word	0x200010d6
 80004e4:	200010c7 	.word	0x200010c7
 80004e8:	200010d7 	.word	0x200010d7
 80004ec:	200010ca 	.word	0x200010ca
 80004f0:	200010cb 	.word	0x200010cb
 80004f4:	200010cc 	.word	0x200010cc
 80004f8:	200010cd 	.word	0x200010cd
 80004fc:	200010ce 	.word	0x200010ce
 8000500:	200010cf 	.word	0x200010cf
 8000504:	200010d0 	.word	0x200010d0
 8000508:	200010d1 	.word	0x200010d1
 800050c:	200010d2 	.word	0x200010d2
 8000510:	200010d3 	.word	0x200010d3
 8000514:	200010d4 	.word	0x200010d4
 8000518:	200010d8 	.word	0x200010d8
 800051c:	200010da 	.word	0x200010da
 8000520:	200010b4 	.word	0x200010b4
 8000524:	200010b5 	.word	0x200010b5
 8000528:	200010b6 	.word	0x200010b6
 800052c:	200010b7 	.word	0x200010b7
 8000530:	200010dc 	.word	0x200010dc
 8000534:	200010c9 	.word	0x200010c9
 8000538:	200010db 	.word	0x200010db
 800053c:	200010c8 	.word	0x200010c8
 8000540:	200010dd 	.word	0x200010dd
 8000544:	200010de 	.word	0x200010de
 8000548:	200010df 	.word	0x200010df
 800054c:	200010e0 	.word	0x200010e0
 8000550:	200010e1 	.word	0x200010e1
 8000554:	200010e2 	.word	0x200010e2
 8000558:	200010e3 	.word	0x200010e3
 800055c:	200010e4 	.word	0x200010e4
 8000560:	200010e5 	.word	0x200010e5
 8000564:	200010e6 	.word	0x200010e6
 8000568:	d902      	bls.n	8000570 <eepromKontrol+0x33c>
	    yukariYavasLimit=0;
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <eepromKontrol+0x440>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000570:	4b41      	ldr	r3, [pc, #260]	@ (8000678 <eepromKontrol+0x444>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d902      	bls.n	800057e <eepromKontrol+0x34a>
	    devirmeYuruyusSecim=0;
 8000578:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <eepromKontrol+0x444>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800057e:	4b3f      	ldr	r3, [pc, #252]	@ (800067c <eepromKontrol+0x448>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d902      	bls.n	800058c <eepromKontrol+0x358>
	    devirmeYukariIleriLimit=1;
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <eepromKontrol+0x448>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <eepromKontrol+0x44c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d902      	bls.n	800059a <eepromKontrol+0x366>
	    devirmeAsagiGeriLimit=1;
 8000594:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <eepromKontrol+0x44c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <eepromKontrol+0x450>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d902      	bls.n	80005a8 <eepromKontrol+0x374>
	    devirmeSilindirTipi=0;
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <eepromKontrol+0x450>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005a8:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <eepromKontrol+0x454>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d902      	bls.n	80005b6 <eepromKontrol+0x382>
	    platformSilindirTipi=0;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <eepromKontrol+0x454>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <eepromKontrol+0x458>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d902      	bls.n	80005c4 <eepromKontrol+0x390>
	    yukariValfTmr=0;
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <eepromKontrol+0x458>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005c4:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <eepromKontrol+0x45c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d902      	bls.n	80005d2 <eepromKontrol+0x39e>
	    asagiValfTmr=0;
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <eepromKontrol+0x45c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d2:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <eepromKontrol+0x460>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d902      	bls.n	80005e0 <eepromKontrol+0x3ac>
	    devirmeYukariIleriTmr=0;
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <eepromKontrol+0x460>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <eepromKontrol+0x464>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d902      	bls.n	80005ee <eepromKontrol+0x3ba>
	    devirmeAsagiGeriTmr=0;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <eepromKontrol+0x464>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <eepromKontrol+0x468>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f4:	d902      	bls.n	80005fc <eepromKontrol+0x3c8>
	    makineCalismaTmr=60;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <eepromKontrol+0x468>)
 80005f8:	223c      	movs	r2, #60	@ 0x3c
 80005fa:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <eepromKontrol+0x46c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d902      	bls.n	800060a <eepromKontrol+0x3d6>
	    buzzer=0;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <eepromKontrol+0x46c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <eepromKontrol+0x470>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d902      	bls.n	8000618 <eepromKontrol+0x3e4>
	    demoMode=0;
 8000612:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <eepromKontrol+0x470>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <eepromKontrol+0x474>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d902      	bls.n	8000626 <eepromKontrol+0x3f2>
	    calismaSayModu=0;
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <eepromKontrol+0x474>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <eepromKontrol+0x478>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d902      	bls.n	8000634 <eepromKontrol+0x400>
	    dilSecim=0;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <eepromKontrol+0x478>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <eepromKontrol+0x47c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d902      	bls.n	8000642 <eepromKontrol+0x40e>
		iotMode=0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <eepromKontrol+0x47c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 f938 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 f9df 	bl	8009a0c <HAL_Delay>

	convertArrays(2);
 800064e:	2002      	movs	r0, #2
 8000650:	f000 f932 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 f9d9 	bl	8009a0c <HAL_Delay>

	convertArrays(3);
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f92c 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000660:	20fa      	movs	r0, #250	@ 0xfa
 8000662:	f009 f9d3 	bl	8009a0c <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <eepromKontrol+0x478>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fd44 	bl	80060f8 <loadMenuTexts>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200010ca 	.word	0x200010ca
 8000678:	200010cb 	.word	0x200010cb
 800067c:	200010cc 	.word	0x200010cc
 8000680:	200010cd 	.word	0x200010cd
 8000684:	200010ce 	.word	0x200010ce
 8000688:	200010cf 	.word	0x200010cf
 800068c:	200010d0 	.word	0x200010d0
 8000690:	200010d1 	.word	0x200010d1
 8000694:	200010d2 	.word	0x200010d2
 8000698:	200010d3 	.word	0x200010d3
 800069c:	200010d4 	.word	0x200010d4
 80006a0:	200010d8 	.word	0x200010d8
 80006a4:	200010da 	.word	0x200010da
 80006a8:	200010db 	.word	0x200010db
 80006ac:	200010dc 	.word	0x200010dc
 80006b0:	200010e7 	.word	0x200010e7

080006b4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006bc:	236e      	movs	r3, #110	@ 0x6e
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <saveEEPROM+0x38>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f816 	bl	80006f4 <EEPROM_Write>

    if(resultText == 1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d104      	bne.n	80006d8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <saveEEPROM+0x3c>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	2002      	movs	r0, #2
 80006d4:	f008 fc40 	bl	8008f58 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f009 f996 	bl	8009a0c <HAL_Delay>
    lcd_clear();
 80006e0:	f008 fc66 	bl	8008fb0 <lcd_clear>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000fec 	.word	0x20000fec
 80006f0:	20001860 	.word	0x20001860

080006f4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	460b      	mov	r3, r1
 8000704:	81bb      	strh	r3, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 800070a:	2306      	movs	r3, #6
 800070c:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	89bb      	ldrh	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	da00      	bge.n	800071e <EEPROM_Write+0x2a>
 800071c:	333f      	adds	r3, #63	@ 0x3f
 800071e:	119b      	asrs	r3, r3, #6
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4413      	add	r3, r2
 8000726:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000728:	8afa      	ldrh	r2, [r7, #22]
 800072a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	e041      	b.n	80007c2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800073e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000758:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800075a:	8bfa      	ldrh	r2, [r7, #30]
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d901      	bls.n	8000766 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	8a79      	ldrh	r1, [r7, #18]
 800076e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	8bfa      	ldrh	r2, [r7, #30]
 8000776:	9201      	str	r2, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2310      	movs	r3, #16
 800077c:	460a      	mov	r2, r1
 800077e:	21a0      	movs	r1, #160	@ 0xa0
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <EEPROM_Write+0xdc>)
 8000782:	f00a f9cd 	bl	800ab20 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800078a:	7c7b      	ldrb	r3, [r7, #17]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <EEPROM_Write+0xe0>)
 8000792:	2101      	movs	r1, #1
 8000794:	2002      	movs	r0, #2
 8000796:	f008 fbdf 	bl	8008f58 <lcd_print>
            return;
 800079a:	e016      	b.n	80007ca <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800079c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800079e:	3301      	adds	r3, #1
 80007a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	8bfb      	ldrh	r3, [r7, #30]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 80007ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007b0:	8bfb      	ldrh	r3, [r7, #30]
 80007b2:	4413      	add	r3, r2
 80007b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f009 f928 	bl	8009a0c <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3301      	adds	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	8abb      	ldrh	r3, [r7, #20]
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbb9      	blt.n	800073e <EEPROM_Write+0x4a>
    }
}
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000193c 	.word	0x2000193c
 80007d4:	0800e068 	.word	0x0800e068

080007d8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af04      	add	r7, sp, #16
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	460b      	mov	r3, r1
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007ee:	2306      	movs	r3, #6
 80007f0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <EEPROM_Read+0x2a>
 8000800:	333f      	adds	r3, #63	@ 0x3f
 8000802:	119b      	asrs	r3, r3, #6
 8000804:	b29a      	uxth	r2, r3
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4413      	add	r3, r2
 800080a:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 800080c:	8afa      	ldrh	r2, [r7, #22]
 800080e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	e03e      	b.n	80008a0 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000822:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800083c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800083e:	8bfa      	ldrh	r2, [r7, #30]
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	429a      	cmp	r2, r3
 8000844:	d901      	bls.n	800084a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	8a79      	ldrh	r1, [r7, #18]
 8000852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000856:	9202      	str	r2, [sp, #8]
 8000858:	8bfa      	ldrh	r2, [r7, #30]
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2310      	movs	r3, #16
 8000860:	460a      	mov	r2, r1
 8000862:	21a0      	movs	r1, #160	@ 0xa0
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <EEPROM_Read+0xd8>)
 8000866:	f00a fa55 	bl	800ad14 <HAL_I2C_Mem_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800086e:	7c7b      	ldrb	r3, [r7, #17]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000874:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <EEPROM_Read+0xdc>)
 8000876:	2101      	movs	r1, #1
 8000878:	2002      	movs	r0, #2
 800087a:	f008 fb6d 	bl	8008f58 <lcd_print>
            return;
 800087e:	e013      	b.n	80008a8 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	3301      	adds	r3, #1
 8000884:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	8bfb      	ldrh	r3, [r7, #30]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000894:	8bfb      	ldrh	r3, [r7, #30]
 8000896:	4413      	add	r3, r2
 8000898:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3301      	adds	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	6a3a      	ldr	r2, [r7, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbbc      	blt.n	8000822 <EEPROM_Read+0x4a>
    }
}
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000193c 	.word	0x2000193c
 80008b4:	0800e07c 	.word	0x0800e07c

080008b8 <convertArrays>:

void convertArrays(int state) {
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11d      	bne.n	8000902 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <convertArrays+0xe0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	e013      	b.n	80008fa <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008d2:	4a32      	ldr	r2, [pc, #200]	@ (800099c <convertArrays+0xe4>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <convertArrays+0xe8>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	@ (80009a4 <convertArrays+0xec>)
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	3301      	adds	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	3301      	adds	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b0b      	cmp	r3, #11
 80008fe:	dde8      	ble.n	80008d2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000900:	e045      	b.n	800098e <convertArrays+0xd6>
	} else if(state == 2) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d121      	bne.n	800094c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <convertArrays+0xf0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e017      	b.n	8000944 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <convertArrays+0xe4>)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <convertArrays+0xe4>)
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <convertArrays+0xf4>)
 800092c:	5c99      	ldrb	r1, [r3, r2]
 800092e:	4a20      	ldr	r2, [pc, #128]	@ (80009b0 <convertArrays+0xf8>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3301      	adds	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dde4      	ble.n	8000914 <convertArrays+0x5c>
}
 800094a:	e020      	b.n	800098e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <convertArrays+0xfc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e017      	b.n	8000988 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000958:	4a10      	ldr	r2, [pc, #64]	@ (800099c <convertArrays+0xe4>)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <convertArrays+0xe4>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <convertArrays+0xf4>)
 8000970:	5c99      	ldrb	r1, [r3, r2]
 8000972:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <convertArrays+0x100>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	dde4      	ble.n	8000958 <convertArrays+0xa0>
}
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	@ 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000000 	.word	0x20000000
 800099c:	20000fec 	.word	0x20000fec
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20001064 	.word	0x20001064
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20001070 	.word	0x20001070
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20001080 	.word	0x20001080

080009bc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09f      	sub	sp, #124	@ 0x7c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009c8:	4948      	ldr	r1, [pc, #288]	@ (8000aec <ESP8266_Init+0x130>)
 80009ca:	4849      	ldr	r0, [pc, #292]	@ (8000af0 <ESP8266_Init+0x134>)
 80009cc:	f00c ff14 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009d0:	4847      	ldr	r0, [pc, #284]	@ (8000af0 <ESP8266_Init+0x134>)
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	4944      	ldr	r1, [pc, #272]	@ (8000af0 <ESP8266_Init+0x134>)
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f00c f8e0 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f009 f810 	bl	8009a0c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009ec:	4941      	ldr	r1, [pc, #260]	@ (8000af4 <ESP8266_Init+0x138>)
 80009ee:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f0:	f00c ff02 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f4:	483e      	ldr	r0, [pc, #248]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	493b      	ldr	r1, [pc, #236]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f00c f8ce 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f008 fffe 	bl	8009a0c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a10:	4939      	ldr	r1, [pc, #228]	@ (8000af8 <ESP8266_Init+0x13c>)
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a14:	f00c fef0 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a18:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4932      	ldr	r1, [pc, #200]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f00c f8bc 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a30:	f008 ffec 	bl	8009a0c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a34:	4931      	ldr	r1, [pc, #196]	@ (8000afc <ESP8266_Init+0x140>)
 8000a36:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a38:	f00c fede 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a3e:	f7ff fbf1 	bl	8000224 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4929      	ldr	r1, [pc, #164]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f00c f8aa 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a54:	f008 ffda 	bl	8009a0c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <ESP8266_Init+0x144>)
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4613      	mov	r3, r2
 8000a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a64:	c407      	stmia	r4!, {r0, r1, r2}
 8000a66:	8023      	strh	r3, [r4, #0]
 8000a68:	3402      	adds	r4, #2
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00c fee7 	bl	800d848 <strcat>
	strcat(str, "\",\"");
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbd0 	bl	8000224 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <ESP8266_Init+0x148>)
 8000a90:	6810      	ldr	r0, [r2, #0]
 8000a92:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00c fed4 	bl	800d848 <strcat>
	strcat(str, "\"\r\n");
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbd 	bl	8000224 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <ESP8266_Init+0x14c>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4912      	ldr	r1, [pc, #72]	@ (8000b0c <ESP8266_Init+0x150>)
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ac4:	f00c fe98 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <ESP8266_Init+0x134>)
 8000aca:	f7ff fbab 	bl	8000224 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4906      	ldr	r1, [pc, #24]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f00c f864 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae0:	f008 ff94 	bl	8009a0c <HAL_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	377c      	adds	r7, #124	@ 0x7c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	0800e090 	.word	0x0800e090
 8000af0:	20001124 	.word	0x20001124
 8000af4:	0800e0a0 	.word	0x0800e0a0
 8000af8:	0800e0ac 	.word	0x0800e0ac
 8000afc:	0800e0b4 	.word	0x0800e0b4
 8000b00:	0800e0c4 	.word	0x0800e0c4
 8000b04:	0800e0d4 	.word	0x0800e0d4
 8000b08:	0800e0d8 	.word	0x0800e0d8
 8000b0c:	0800e0dc 	.word	0x0800e0dc

08000b10 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000b16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000b18:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000b1c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000b26:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000b2a:	6001      	str	r1, [r0, #0]
 8000b2c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000b30:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000b3a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000b3e:	6013      	str	r3, [r2, #0]
	char local_txA[1500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000b40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b44:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000b48:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	f00c fe89 	bl	800d866 <strncpy>
	subMachineID[12] = '\0';
 8000b54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b58:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b60:	4a9d      	ldr	r2, [pc, #628]	@ (8000dd8 <sendMachineData+0x2c8>)
 8000b62:	499e      	ldr	r1, [pc, #632]	@ (8000ddc <sendMachineData+0x2cc>)
 8000b64:	489e      	ldr	r0, [pc, #632]	@ (8000de0 <sendMachineData+0x2d0>)
 8000b66:	f00c fe47 	bl	800d7f8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b6a:	489d      	ldr	r0, [pc, #628]	@ (8000de0 <sendMachineData+0x2d0>)
 8000b6c:	f7ff fb5a 	bl	8000224 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b78:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000b7c:	4998      	ldr	r1, [pc, #608]	@ (8000de0 <sendMachineData+0x2d0>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f00c f810 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b84:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000b88:	f008 ff40 	bl	8009a0c <HAL_Delay>

	sprintf(local_txA,
 8000b8c:	4b95      	ldr	r3, [pc, #596]	@ (8000de4 <sendMachineData+0x2d4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b94:	4b94      	ldr	r3, [pc, #592]	@ (8000de8 <sendMachineData+0x2d8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b9c:	4b93      	ldr	r3, [pc, #588]	@ (8000dec <sendMachineData+0x2dc>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000ba4:	4b92      	ldr	r3, [pc, #584]	@ (8000df0 <sendMachineData+0x2e0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000bac:	4b91      	ldr	r3, [pc, #580]	@ (8000df4 <sendMachineData+0x2e4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000bb2:	4b91      	ldr	r3, [pc, #580]	@ (8000df8 <sendMachineData+0x2e8>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000bb8:	4b90      	ldr	r3, [pc, #576]	@ (8000dfc <sendMachineData+0x2ec>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bbe:	4b90      	ldr	r3, [pc, #576]	@ (8000e00 <sendMachineData+0x2f0>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e04 <sendMachineData+0x2f4>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bca:	4b8f      	ldr	r3, [pc, #572]	@ (8000e08 <sendMachineData+0x2f8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8000e0c <sendMachineData+0x2fc>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8000e10 <sendMachineData+0x300>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bdc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e14 <sendMachineData+0x304>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000be2:	4b8d      	ldr	r3, [pc, #564]	@ (8000e18 <sendMachineData+0x308>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000be8:	4b8c      	ldr	r3, [pc, #560]	@ (8000e1c <sendMachineData+0x30c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000bee:	4b8c      	ldr	r3, [pc, #560]	@ (8000e20 <sendMachineData+0x310>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8000e24 <sendMachineData+0x314>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8000e28 <sendMachineData+0x318>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c00:	4b8a      	ldr	r3, [pc, #552]	@ (8000e2c <sendMachineData+0x31c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c06:	4b8a      	ldr	r3, [pc, #552]	@ (8000e30 <sendMachineData+0x320>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c0c:	4b89      	ldr	r3, [pc, #548]	@ (8000e34 <sendMachineData+0x324>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c12:	4b89      	ldr	r3, [pc, #548]	@ (8000e38 <sendMachineData+0x328>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c18:	4b88      	ldr	r3, [pc, #544]	@ (8000e3c <sendMachineData+0x32c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c1e:	4b88      	ldr	r3, [pc, #544]	@ (8000e40 <sendMachineData+0x330>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c24:	4b87      	ldr	r3, [pc, #540]	@ (8000e44 <sendMachineData+0x334>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2a:	4b87      	ldr	r3, [pc, #540]	@ (8000e48 <sendMachineData+0x338>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c30:	4b86      	ldr	r3, [pc, #536]	@ (8000e4c <sendMachineData+0x33c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c36:	4b86      	ldr	r3, [pc, #536]	@ (8000e50 <sendMachineData+0x340>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	4b85      	ldr	r3, [pc, #532]	@ (8000e54 <sendMachineData+0x344>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	4b85      	ldr	r3, [pc, #532]	@ (8000e58 <sendMachineData+0x348>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	61bb      	str	r3, [r7, #24]
	    "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
	    subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi,
	    yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure,
	    kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit,
	    devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr,
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c48:	4b84      	ldr	r3, [pc, #528]	@ (8000e5c <sendMachineData+0x34c>)
 8000c4a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	sprintf(local_txA,
 8000c4e:	617b      	str	r3, [r7, #20]
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c50:	4b82      	ldr	r3, [pc, #520]	@ (8000e5c <sendMachineData+0x34c>)
 8000c52:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	sprintf(local_txA,
 8000c56:	613b      	str	r3, [r7, #16]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c58:	4b80      	ldr	r3, [pc, #512]	@ (8000e5c <sendMachineData+0x34c>)
 8000c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	sprintf(local_txA,
 8000c5e:	60fb      	str	r3, [r7, #12]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c60:	4b7e      	ldr	r3, [pc, #504]	@ (8000e5c <sendMachineData+0x34c>)
 8000c62:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	sprintf(local_txA,
 8000c66:	60bb      	str	r3, [r7, #8]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c68:	4b7c      	ldr	r3, [pc, #496]	@ (8000e5c <sendMachineData+0x34c>)
 8000c6a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	sprintf(local_txA,
 8000c6e:	607b      	str	r3, [r7, #4]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c70:	4b7a      	ldr	r3, [pc, #488]	@ (8000e5c <sendMachineData+0x34c>)
 8000c72:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	sprintf(local_txA,
 8000c76:	603b      	str	r3, [r7, #0]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c78:	4b78      	ldr	r3, [pc, #480]	@ (8000e5c <sendMachineData+0x34c>)
 8000c7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	sprintf(local_txA,
 8000c7e:	461e      	mov	r6, r3
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c80:	4b76      	ldr	r3, [pc, #472]	@ (8000e5c <sendMachineData+0x34c>)
 8000c82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	sprintf(local_txA,
 8000c86:	4618      	mov	r0, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c88:	4b74      	ldr	r3, [pc, #464]	@ (8000e5c <sendMachineData+0x34c>)
 8000c8a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	sprintf(local_txA,
 8000c8e:	4619      	mov	r1, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c90:	4b72      	ldr	r3, [pc, #456]	@ (8000e5c <sendMachineData+0x34c>)
 8000c92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	sprintf(local_txA,
 8000c96:	461a      	mov	r2, r3
 8000c98:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c9c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000ca0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000ca4:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000ca8:	4b6d      	ldr	r3, [pc, #436]	@ (8000e60 <sendMachineData+0x350>)
 8000caa:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000cac:	233c      	movs	r3, #60	@ 0x3c
 8000cae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000cb0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000cb2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000cb4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000cb6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	9224      	str	r2, [sp, #144]	@ 0x90
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	9220      	str	r2, [sp, #128]	@ 0x80
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000cd8:	6a3a      	ldr	r2, [r7, #32]
 8000cda:	921c      	str	r2, [sp, #112]	@ 0x70
 8000cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cde:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ce2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ce6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cea:	9218      	str	r2, [sp, #96]	@ 0x60
 8000cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000cf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000cf2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cf6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cfa:	9214      	str	r2, [sp, #80]	@ 0x50
 8000cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cfe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d02:	9212      	str	r2, [sp, #72]	@ 0x48
 8000d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d06:	9211      	str	r2, [sp, #68]	@ 0x44
 8000d08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d0a:	9210      	str	r2, [sp, #64]	@ 0x40
 8000d0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d12:	920e      	str	r2, [sp, #56]	@ 0x38
 8000d14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d16:	920d      	str	r2, [sp, #52]	@ 0x34
 8000d18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000d1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000d20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d22:	920a      	str	r2, [sp, #40]	@ 0x28
 8000d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d2a:	9208      	str	r2, [sp, #32]
 8000d2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d2e:	9207      	str	r2, [sp, #28]
 8000d30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d32:	9206      	str	r2, [sp, #24]
 8000d34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d36:	9205      	str	r2, [sp, #20]
 8000d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000d3c:	9204      	str	r2, [sp, #16]
 8000d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d42:	9203      	str	r2, [sp, #12]
 8000d44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000d48:	9202      	str	r2, [sp, #8]
 8000d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d54:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	4662      	mov	r2, ip
 8000d60:	4940      	ldr	r1, [pc, #256]	@ (8000e64 <sendMachineData+0x354>)
 8000d62:	4628      	mov	r0, r5
 8000d64:	f00c fd48 	bl	800d7f8 <siprintf>

	len = strlen(local_txA);
 8000d68:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa59 	bl	8000224 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000d78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d7c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000d80:	4939      	ldr	r1, [pc, #228]	@ (8000e68 <sendMachineData+0x358>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00c fd38 	bl	800d7f8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000d88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fa49 	bl	8000224 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000d9a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d9e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f00b fefe 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000da8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000dac:	f008 fe2e 	bl	8009a0c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000db0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa35 	bl	8000224 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000dc2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000dc6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	f00b feea 	bl	800cba4 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000dd0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000dd4:	e04a      	b.n	8000e6c <sendMachineData+0x35c>
 8000dd6:	bf00      	nop
 8000dd8:	0800e1cc 	.word	0x0800e1cc
 8000ddc:	0800e1dc 	.word	0x0800e1dc
 8000de0:	20001124 	.word	0x20001124
 8000de4:	200010cb 	.word	0x200010cb
 8000de8:	200010bd 	.word	0x200010bd
 8000dec:	200010c0 	.word	0x200010c0
 8000df0:	200010c1 	.word	0x200010c1
 8000df4:	200010c2 	.word	0x200010c2
 8000df8:	200010c9 	.word	0x200010c9
 8000dfc:	200010c3 	.word	0x200010c3
 8000e00:	200010c4 	.word	0x200010c4
 8000e04:	200010c8 	.word	0x200010c8
 8000e08:	200010c5 	.word	0x200010c5
 8000e0c:	200010d5 	.word	0x200010d5
 8000e10:	200010c6 	.word	0x200010c6
 8000e14:	200010d6 	.word	0x200010d6
 8000e18:	200010c7 	.word	0x200010c7
 8000e1c:	200010d7 	.word	0x200010d7
 8000e20:	200010ca 	.word	0x200010ca
 8000e24:	200010cc 	.word	0x200010cc
 8000e28:	200010cd 	.word	0x200010cd
 8000e2c:	200010ce 	.word	0x200010ce
 8000e30:	200010cf 	.word	0x200010cf
 8000e34:	200010d0 	.word	0x200010d0
 8000e38:	200010d1 	.word	0x200010d1
 8000e3c:	200010d2 	.word	0x200010d2
 8000e40:	200010d3 	.word	0x200010d3
 8000e44:	200010d4 	.word	0x200010d4
 8000e48:	200010d8 	.word	0x200010d8
 8000e4c:	200010da 	.word	0x200010da
 8000e50:	200010b4 	.word	0x200010b4
 8000e54:	200010b5 	.word	0x200010b5
 8000e58:	200010dc 	.word	0x200010dc
 8000e5c:	20000fec 	.word	0x20000fec
 8000e60:	0800e52c 	.word	0x0800e52c
 8000e64:	0800e1fc 	.word	0x0800e1fc
 8000e68:	0800e540 	.word	0x0800e540
 8000e6c:	f008 fdce 	bl	8009a0c <HAL_Delay>
}
 8000e70:	bf00      	nop
 8000e72:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7a:	bf00      	nop

08000e7c <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <hata2EEPROM+0xa0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <hata2EEPROM+0xa4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a24      	ldr	r2, [pc, #144]	@ (8000f24 <hata2EEPROM+0xa8>)
 8000e94:	5cd3      	ldrb	r3, [r2, r3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000e9a:	f000 f8d1 	bl	8001040 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000e9e:	e000      	b.n	8000ea2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000ea0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	e012      	b.n	8000ece <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <hata2EEPROM+0xa4>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <hata2EEPROM+0xa8>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <hata2EEPROM+0xa4>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4918      	ldr	r1, [pc, #96]	@ (8000f24 <hata2EEPROM+0xa8>)
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	54ca      	strb	r2, [r1, r3]
					break;
 8000ec6:	e007      	b.n	8000ed8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <hata2EEPROM+0xa0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbe7      	blt.n	8000ea8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <hata2EEPROM+0xa4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b299      	uxth	r1, r3
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <hata2EEPROM+0xa0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b298      	uxth	r0, r3
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <hata2EEPROM+0xa4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <hata2EEPROM+0xa8>)
 8000eea:	4413      	add	r3, r2
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <hata2EEPROM+0xa0>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000ef6:	9402      	str	r4, [sp, #8]
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4603      	mov	r3, r0
 8000efe:	460a      	mov	r2, r1
 8000f00:	21a0      	movs	r1, #160	@ 0xa0
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <hata2EEPROM+0xac>)
 8000f04:	f009 fe0c 	bl	800ab20 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f0c:	f008 fd7e 	bl	8009a0c <HAL_Delay>
	eepromKontrol();
 8000f10:	f7ff f990 	bl	8000234 <eepromKontrol>
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	20000098 	.word	0x20000098
 8000f24:	20000fec 	.word	0x20000fec
 8000f28:	2000193c 	.word	0x2000193c

08000f2c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10f      	bne.n	8000f5c <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000f3c:	4a38      	ldr	r2, [pc, #224]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f008 f809 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, "1");
 8000f46:	4a37      	ldr	r2, [pc, #220]	@ (8001024 <hataKoduLcdGoster+0xf8>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f008 f804 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f50:	4a35      	ldr	r2, [pc, #212]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8000f52:	2107      	movs	r1, #7
 8000f54:	2002      	movs	r0, #2
 8000f56:	f007 ffff 	bl	8008f58 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000f5a:	e05d      	b.n	8001018 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d10f      	bne.n	8000f82 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000f62:	4a2f      	ldr	r2, [pc, #188]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	2001      	movs	r0, #1
 8000f68:	f007 fff6 	bl	8008f58 <lcd_print>
		lcd_print(2, 2, "2");
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800102c <hataKoduLcdGoster+0x100>)
 8000f6e:	2102      	movs	r1, #2
 8000f70:	2002      	movs	r0, #2
 8000f72:	f007 fff1 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f76:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f007 ffec 	bl	8008f58 <lcd_print>
}
 8000f80:	e04a      	b.n	8001018 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d10f      	bne.n	8000fa8 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000f88:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f007 ffe3 	bl	8008f58 <lcd_print>
		lcd_print(2, 3, "3");
 8000f92:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <hataKoduLcdGoster+0x104>)
 8000f94:	2103      	movs	r1, #3
 8000f96:	2002      	movs	r0, #2
 8000f98:	f007 ffde 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f9c:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8000f9e:	2107      	movs	r1, #7
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f007 ffd9 	bl	8008f58 <lcd_print>
}
 8000fa6:	e037      	b.n	8001018 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d10f      	bne.n	8000fce <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f007 ffd0 	bl	8008f58 <lcd_print>
		lcd_print(2, 4, "4");
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <hataKoduLcdGoster+0x108>)
 8000fba:	2104      	movs	r1, #4
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f007 ffcb 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fc2:	4a19      	ldr	r2, [pc, #100]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f007 ffc6 	bl	8008f58 <lcd_print>
}
 8000fcc:	e024      	b.n	8001018 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b05      	cmp	r3, #5
 8000fd2:	d10f      	bne.n	8000ff4 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000fd4:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f007 ffbd 	bl	8008f58 <lcd_print>
		lcd_print(2, 5, "5");
 8000fde:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <hataKoduLcdGoster+0x10c>)
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f007 ffb8 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8000fea:	2107      	movs	r1, #7
 8000fec:	2002      	movs	r0, #2
 8000fee:	f007 ffb3 	bl	8008f58 <lcd_print>
}
 8000ff2:	e011      	b.n	8001018 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d10e      	bne.n	8001018 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000ffa:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <hataKoduLcdGoster+0xf4>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f007 ffaa 	bl	8008f58 <lcd_print>
		lcd_print(2, 6, "6");
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <hataKoduLcdGoster+0x110>)
 8001006:	2106      	movs	r1, #6
 8001008:	2002      	movs	r0, #2
 800100a:	f007 ffa5 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "          ");
 800100e:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <hataKoduLcdGoster+0xfc>)
 8001010:	2107      	movs	r1, #7
 8001012:	2002      	movs	r0, #2
 8001014:	f007 ffa0 	bl	8008f58 <lcd_print>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200018b0 	.word	0x200018b0
 8001024:	0800e9dc 	.word	0x0800e9dc
 8001028:	0800e9e0 	.word	0x0800e9e0
 800102c:	0800e9ec 	.word	0x0800e9ec
 8001030:	0800e9f0 	.word	0x0800e9f0
 8001034:	0800e9f4 	.word	0x0800e9f4
 8001038:	0800e9f8 	.word	0x0800e9f8
 800103c:	0800e9fc 	.word	0x0800e9fc

08001040 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e009      	b.n	8001060 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <eepromDataFillWithEmpty+0x38>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <eepromDataFillWithEmpty+0x3c>)
 8001056:	2100      	movs	r1, #0
 8001058:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <eepromDataFillWithEmpty+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbf0      	blt.n	800104c <eepromDataFillWithEmpty+0xc>
	}
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000006c 	.word	0x2000006c
 800107c:	20000fec 	.word	0x20000fec
 8001080:	20000094 	.word	0x20000094

08001084 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8001096:	4b50      	ldr	r3, [pc, #320]	@ (80011d8 <i2cTest+0x154>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b4e      	ldr	r3, [pc, #312]	@ (80011d8 <i2cTest+0x154>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80010a6:	484c      	ldr	r0, [pc, #304]	@ (80011d8 <i2cTest+0x154>)
 80010a8:	f009 fc0c 	bl	800a8c4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ac:	23c0      	movs	r3, #192	@ 0xc0
 80010ae:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80010b0:	2311      	movs	r3, #17
 80010b2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4846      	ldr	r0, [pc, #280]	@ (80011dc <i2cTest+0x158>)
 80010c2:	f009 f813 	bl	800a0ec <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	@ 0x40
 80010ca:	4844      	ldr	r0, [pc, #272]	@ (80011dc <i2cTest+0x158>)
 80010cc:	f009 fa85 	bl	800a5da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	4841      	ldr	r0, [pc, #260]	@ (80011dc <i2cTest+0x158>)
 80010d6:	f009 fa80 	bl	800a5da <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f008 fc96 	bl	8009a0c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80010e0:	bf00      	nop
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	483d      	ldr	r0, [pc, #244]	@ (80011dc <i2cTest+0x158>)
 80010e6:	f009 fa61 	bl	800a5ac <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d006      	beq.n	80010fe <i2cTest+0x7a>
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	483a      	ldr	r0, [pc, #232]	@ (80011dc <i2cTest+0x158>)
 80010f4:	f009 fa5a 	bl	800a5ac <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d1f1      	bne.n	80010e2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	4836      	ldr	r0, [pc, #216]	@ (80011dc <i2cTest+0x158>)
 8001104:	f009 fa69 	bl	800a5da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001108:	200a      	movs	r0, #10
 800110a:	f008 fc7f 	bl	8009a0c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800110e:	bf00      	nop
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	4832      	ldr	r0, [pc, #200]	@ (80011dc <i2cTest+0x158>)
 8001114:	f009 fa4a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d0f8      	beq.n	8001110 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	@ 0x40
 8001122:	482e      	ldr	r0, [pc, #184]	@ (80011dc <i2cTest+0x158>)
 8001124:	f009 fa59 	bl	800a5da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f008 fc6f 	bl	8009a0c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800112e:	bf00      	nop
 8001130:	2140      	movs	r1, #64	@ 0x40
 8001132:	482a      	ldr	r0, [pc, #168]	@ (80011dc <i2cTest+0x158>)
 8001134:	f009 fa3a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d0f8      	beq.n	8001130 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2140      	movs	r1, #64	@ 0x40
 8001142:	4826      	ldr	r0, [pc, #152]	@ (80011dc <i2cTest+0x158>)
 8001144:	f009 fa49 	bl	800a5da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f008 fc5f 	bl	8009a0c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800114e:	bf00      	nop
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4822      	ldr	r0, [pc, #136]	@ (80011dc <i2cTest+0x158>)
 8001154:	f009 fa2a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d1f8      	bne.n	8001150 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2180      	movs	r1, #128	@ 0x80
 8001162:	481e      	ldr	r0, [pc, #120]	@ (80011dc <i2cTest+0x158>)
 8001164:	f009 fa39 	bl	800a5da <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f008 fc4f 	bl	8009a0c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800116e:	bf00      	nop
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	481a      	ldr	r0, [pc, #104]	@ (80011dc <i2cTest+0x158>)
 8001174:	f009 fa1a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d1f8      	bne.n	8001170 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117e:	23c0      	movs	r3, #192	@ 0xc0
 8001180:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8001182:	2312      	movs	r3, #18
 8001184:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <i2cTest+0x158>)
 8001194:	f008 ffaa 	bl	800a0ec <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <i2cTest+0x154>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <i2cTest+0x154>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011a6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <i2cTest+0x154>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <i2cTest+0x154>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011b6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <i2cTest+0x154>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <i2cTest+0x154>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <i2cTest+0x154>)
 80011ca:	f009 fa37 	bl	800a63c <HAL_I2C_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000193c 	.word	0x2000193c
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80011ea:	20c8      	movs	r0, #200	@ 0xc8
 80011ec:	f008 fc0e 	bl	8009a0c <HAL_Delay>
	lcd_clear();
 80011f0:	f007 fede 	bl	8008fb0 <lcd_clear>
	if(type == 1 && page == 0) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d13e      	bne.n	8001278 <printTemplate+0x98>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d13b      	bne.n	8001278 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001200:	4a9a      	ldr	r2, [pc, #616]	@ (800146c <printTemplate+0x28c>)
 8001202:	2101      	movs	r1, #1
 8001204:	2001      	movs	r0, #1
 8001206:	f007 fea7 	bl	8008f58 <lcd_print>
		lcd_print(2, 3, "0");
 800120a:	4a99      	ldr	r2, [pc, #612]	@ (8001470 <printTemplate+0x290>)
 800120c:	2103      	movs	r1, #3
 800120e:	2002      	movs	r0, #2
 8001210:	f007 fea2 	bl	8008f58 <lcd_print>
		lcd_print(2, 4, "1");
 8001214:	4a97      	ldr	r2, [pc, #604]	@ (8001474 <printTemplate+0x294>)
 8001216:	2104      	movs	r1, #4
 8001218:	2002      	movs	r0, #2
 800121a:	f007 fe9d 	bl	8008f58 <lcd_print>
		lcd_print(2, 5, "2");
 800121e:	4a96      	ldr	r2, [pc, #600]	@ (8001478 <printTemplate+0x298>)
 8001220:	2105      	movs	r1, #5
 8001222:	2002      	movs	r0, #2
 8001224:	f007 fe98 	bl	8008f58 <lcd_print>
		lcd_print(2, 6, "3");
 8001228:	4a94      	ldr	r2, [pc, #592]	@ (800147c <printTemplate+0x29c>)
 800122a:	2106      	movs	r1, #6
 800122c:	2002      	movs	r0, #2
 800122e:	f007 fe93 	bl	8008f58 <lcd_print>
		lcd_print(2, 7, "4");
 8001232:	4a93      	ldr	r2, [pc, #588]	@ (8001480 <printTemplate+0x2a0>)
 8001234:	2107      	movs	r1, #7
 8001236:	2002      	movs	r0, #2
 8001238:	f007 fe8e 	bl	8008f58 <lcd_print>
		lcd_print(2, 10, "5");
 800123c:	4a91      	ldr	r2, [pc, #580]	@ (8001484 <printTemplate+0x2a4>)
 800123e:	210a      	movs	r1, #10
 8001240:	2002      	movs	r0, #2
 8001242:	f007 fe89 	bl	8008f58 <lcd_print>
		lcd_print(2, 11, "6");
 8001246:	4a90      	ldr	r2, [pc, #576]	@ (8001488 <printTemplate+0x2a8>)
 8001248:	210b      	movs	r1, #11
 800124a:	2002      	movs	r0, #2
 800124c:	f007 fe84 	bl	8008f58 <lcd_print>
		lcd_print(2, 12, "7");
 8001250:	4a8e      	ldr	r2, [pc, #568]	@ (800148c <printTemplate+0x2ac>)
 8001252:	210c      	movs	r1, #12
 8001254:	2002      	movs	r0, #2
 8001256:	f007 fe7f 	bl	8008f58 <lcd_print>
		lcd_print(2, 13, "8");
 800125a:	4a8d      	ldr	r2, [pc, #564]	@ (8001490 <printTemplate+0x2b0>)
 800125c:	210d      	movs	r1, #13
 800125e:	2002      	movs	r0, #2
 8001260:	f007 fe7a 	bl	8008f58 <lcd_print>
		lcd_print(2, 14, "9");
 8001264:	4a8b      	ldr	r2, [pc, #556]	@ (8001494 <printTemplate+0x2b4>)
 8001266:	210e      	movs	r1, #14
 8001268:	2002      	movs	r0, #2
 800126a:	f007 fe75 	bl	8008f58 <lcd_print>
		lcd_gotoxy(2, 3);
 800126e:	2103      	movs	r1, #3
 8001270:	2002      	movs	r0, #2
 8001272:	f007 fe52 	bl	8008f1a <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8001276:	e0f5      	b.n	8001464 <printTemplate+0x284>
	} else if(type == 2) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d178      	bne.n	8001370 <printTemplate+0x190>
		if(page == 1) {
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d114      	bne.n	80012ae <printTemplate+0xce>
			lcd_clear();
 8001284:	f007 fe94 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f008 fbbf 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800128e:	4a82      	ldr	r2, [pc, #520]	@ (8001498 <printTemplate+0x2b8>)
 8001290:	2101      	movs	r1, #1
 8001292:	2001      	movs	r0, #1
 8001294:	f007 fe60 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001298:	4a80      	ldr	r2, [pc, #512]	@ (800149c <printTemplate+0x2bc>)
 800129a:	2107      	movs	r1, #7
 800129c:	2001      	movs	r0, #1
 800129e:	f007 fe5b 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80012a2:	4a7f      	ldr	r2, [pc, #508]	@ (80014a0 <printTemplate+0x2c0>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	2002      	movs	r0, #2
 80012a8:	f007 fe56 	bl	8008f58 <lcd_print>
}
 80012ac:	e0da      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 2) {
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d114      	bne.n	80012de <printTemplate+0xfe>
			lcd_clear();
 80012b4:	f007 fe7c 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 80012b8:	2064      	movs	r0, #100	@ 0x64
 80012ba:	f008 fba7 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80012be:	4a79      	ldr	r2, [pc, #484]	@ (80014a4 <printTemplate+0x2c4>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	2001      	movs	r0, #1
 80012c4:	f007 fe48 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012c8:	4a74      	ldr	r2, [pc, #464]	@ (800149c <printTemplate+0x2bc>)
 80012ca:	2107      	movs	r1, #7
 80012cc:	2001      	movs	r0, #1
 80012ce:	f007 fe43 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80012d2:	4a75      	ldr	r2, [pc, #468]	@ (80014a8 <printTemplate+0x2c8>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	2002      	movs	r0, #2
 80012d8:	f007 fe3e 	bl	8008f58 <lcd_print>
}
 80012dc:	e0c2      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 3) {
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d114      	bne.n	800130e <printTemplate+0x12e>
			lcd_clear();
 80012e4:	f007 fe64 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	f008 fb8f 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80012ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001498 <printTemplate+0x2b8>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	2001      	movs	r0, #1
 80012f4:	f007 fe30 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012f8:	4a68      	ldr	r2, [pc, #416]	@ (800149c <printTemplate+0x2bc>)
 80012fa:	2107      	movs	r1, #7
 80012fc:	2001      	movs	r0, #1
 80012fe:	f007 fe2b 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001302:	4a6a      	ldr	r2, [pc, #424]	@ (80014ac <printTemplate+0x2cc>)
 8001304:	2101      	movs	r1, #1
 8001306:	2002      	movs	r0, #2
 8001308:	f007 fe26 	bl	8008f58 <lcd_print>
}
 800130c:	e0aa      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 4) {
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d114      	bne.n	800133e <printTemplate+0x15e>
			lcd_clear();
 8001314:	f007 fe4c 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	@ 0x64
 800131a:	f008 fb77 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800131e:	4a5e      	ldr	r2, [pc, #376]	@ (8001498 <printTemplate+0x2b8>)
 8001320:	2101      	movs	r1, #1
 8001322:	2001      	movs	r0, #1
 8001324:	f007 fe18 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001328:	4a5c      	ldr	r2, [pc, #368]	@ (800149c <printTemplate+0x2bc>)
 800132a:	2107      	movs	r1, #7
 800132c:	2001      	movs	r0, #1
 800132e:	f007 fe13 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001332:	4a5f      	ldr	r2, [pc, #380]	@ (80014b0 <printTemplate+0x2d0>)
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f007 fe0e 	bl	8008f58 <lcd_print>
}
 800133c:	e092      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 5) {
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b05      	cmp	r3, #5
 8001342:	f040 808f 	bne.w	8001464 <printTemplate+0x284>
			lcd_clear();
 8001346:	f007 fe33 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 800134a:	2064      	movs	r0, #100	@ 0x64
 800134c:	f008 fb5e 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001350:	4a51      	ldr	r2, [pc, #324]	@ (8001498 <printTemplate+0x2b8>)
 8001352:	2101      	movs	r1, #1
 8001354:	2001      	movs	r0, #1
 8001356:	f007 fdff 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800135a:	4a50      	ldr	r2, [pc, #320]	@ (800149c <printTemplate+0x2bc>)
 800135c:	2107      	movs	r1, #7
 800135e:	2001      	movs	r0, #1
 8001360:	f007 fdfa 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001364:	4a53      	ldr	r2, [pc, #332]	@ (80014b4 <printTemplate+0x2d4>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f007 fdf5 	bl	8008f58 <lcd_print>
}
 800136e:	e079      	b.n	8001464 <printTemplate+0x284>
	} else if(type == 3) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d176      	bne.n	8001464 <printTemplate+0x284>
		if(page == 1) {
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d114      	bne.n	80013a6 <printTemplate+0x1c6>
			lcd_clear();
 800137c:	f007 fe18 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 8001380:	2064      	movs	r0, #100	@ 0x64
 8001382:	f008 fb43 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001386:	4a4c      	ldr	r2, [pc, #304]	@ (80014b8 <printTemplate+0x2d8>)
 8001388:	2101      	movs	r1, #1
 800138a:	2001      	movs	r0, #1
 800138c:	f007 fde4 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001390:	4a4a      	ldr	r2, [pc, #296]	@ (80014bc <printTemplate+0x2dc>)
 8001392:	2107      	movs	r1, #7
 8001394:	2001      	movs	r0, #1
 8001396:	f007 fddf 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800139a:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <printTemplate+0x2c0>)
 800139c:	2101      	movs	r1, #1
 800139e:	2002      	movs	r0, #2
 80013a0:	f007 fdda 	bl	8008f58 <lcd_print>
}
 80013a4:	e05e      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 2) {
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d114      	bne.n	80013d6 <printTemplate+0x1f6>
			lcd_clear();
 80013ac:	f007 fe00 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	f008 fb2b 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013b6:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <printTemplate+0x2d8>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	2001      	movs	r0, #1
 80013bc:	f007 fdcc 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013c0:	4a3e      	ldr	r2, [pc, #248]	@ (80014bc <printTemplate+0x2dc>)
 80013c2:	2107      	movs	r1, #7
 80013c4:	2001      	movs	r0, #1
 80013c6:	f007 fdc7 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80013ca:	4a37      	ldr	r2, [pc, #220]	@ (80014a8 <printTemplate+0x2c8>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f007 fdc2 	bl	8008f58 <lcd_print>
}
 80013d4:	e046      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 3) {
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d114      	bne.n	8001406 <printTemplate+0x226>
			lcd_clear();
 80013dc:	f007 fde8 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f008 fb13 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013e6:	4a34      	ldr	r2, [pc, #208]	@ (80014b8 <printTemplate+0x2d8>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f007 fdb4 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013f0:	4a32      	ldr	r2, [pc, #200]	@ (80014bc <printTemplate+0x2dc>)
 80013f2:	2107      	movs	r1, #7
 80013f4:	2001      	movs	r0, #1
 80013f6:	f007 fdaf 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80013fa:	4a2c      	ldr	r2, [pc, #176]	@ (80014ac <printTemplate+0x2cc>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2002      	movs	r0, #2
 8001400:	f007 fdaa 	bl	8008f58 <lcd_print>
}
 8001404:	e02e      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 4) {
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d114      	bne.n	8001436 <printTemplate+0x256>
			lcd_clear();
 800140c:	f007 fdd0 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	@ 0x64
 8001412:	f008 fafb 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001416:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <printTemplate+0x2d8>)
 8001418:	2101      	movs	r1, #1
 800141a:	2001      	movs	r0, #1
 800141c:	f007 fd9c 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001420:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <printTemplate+0x2dc>)
 8001422:	2107      	movs	r1, #7
 8001424:	2001      	movs	r0, #1
 8001426:	f007 fd97 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800142a:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <printTemplate+0x2d0>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f007 fd92 	bl	8008f58 <lcd_print>
}
 8001434:	e016      	b.n	8001464 <printTemplate+0x284>
		} else if(page == 5) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d113      	bne.n	8001464 <printTemplate+0x284>
			lcd_clear();
 800143c:	f007 fdb8 	bl	8008fb0 <lcd_clear>
			HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	@ 0x64
 8001442:	f008 fae3 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <printTemplate+0x2d8>)
 8001448:	2101      	movs	r1, #1
 800144a:	2001      	movs	r0, #1
 800144c:	f007 fd84 	bl	8008f58 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001450:	4a1a      	ldr	r2, [pc, #104]	@ (80014bc <printTemplate+0x2dc>)
 8001452:	2107      	movs	r1, #7
 8001454:	2001      	movs	r0, #1
 8001456:	f007 fd7f 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800145a:	4a16      	ldr	r2, [pc, #88]	@ (80014b4 <printTemplate+0x2d4>)
 800145c:	2101      	movs	r1, #1
 800145e:	2002      	movs	r0, #2
 8001460:	f007 fd7a 	bl	8008f58 <lcd_print>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0800ea00 	.word	0x0800ea00
 8001470:	0800ea08 	.word	0x0800ea08
 8001474:	0800ea0c 	.word	0x0800ea0c
 8001478:	0800ea10 	.word	0x0800ea10
 800147c:	0800ea14 	.word	0x0800ea14
 8001480:	0800ea18 	.word	0x0800ea18
 8001484:	0800ea1c 	.word	0x0800ea1c
 8001488:	0800ea20 	.word	0x0800ea20
 800148c:	0800ea24 	.word	0x0800ea24
 8001490:	0800ea28 	.word	0x0800ea28
 8001494:	0800ea2c 	.word	0x0800ea2c
 8001498:	0800ea30 	.word	0x0800ea30
 800149c:	20001070 	.word	0x20001070
 80014a0:	0800ea44 	.word	0x0800ea44
 80014a4:	0800ea58 	.word	0x0800ea58
 80014a8:	0800ea60 	.word	0x0800ea60
 80014ac:	0800ea74 	.word	0x0800ea74
 80014b0:	0800ea88 	.word	0x0800ea88
 80014b4:	0800ea9c 	.word	0x0800ea9c
 80014b8:	0800eab0 	.word	0x0800eab0
 80014bc:	20001080 	.word	0x20001080

080014c0 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10a      	bne.n	80014e4 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <printCredentials+0x70>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f007 fd40 	bl	8008f58 <lcd_print>
		lcd_print(2, 13, "    ");
 80014d8:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <printCredentials+0x74>)
 80014da:	210d      	movs	r1, #13
 80014dc:	2002      	movs	r0, #2
 80014de:	f007 fd3b 	bl	8008f58 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80014e2:	e021      	b.n	8001528 <printCredentials+0x68>
	} else if(type == 2) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d10f      	bne.n	800150a <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <printCredentials+0x78>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2001      	movs	r0, #1
 80014f0:	f007 fd32 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, "                ");
 80014f4:	4a11      	ldr	r2, [pc, #68]	@ (800153c <printCredentials+0x7c>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f007 fd2d 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80014fe:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <printCredentials+0x80>)
 8001500:	2101      	movs	r1, #1
 8001502:	2002      	movs	r0, #2
 8001504:	f007 fd28 	bl	8008f58 <lcd_print>
}
 8001508:	e00e      	b.n	8001528 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800150a:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <printCredentials+0x84>)
 800150c:	2101      	movs	r1, #1
 800150e:	2001      	movs	r0, #1
 8001510:	f007 fd22 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, "                ");
 8001514:	4a09      	ldr	r2, [pc, #36]	@ (800153c <printCredentials+0x7c>)
 8001516:	2101      	movs	r1, #1
 8001518:	2002      	movs	r0, #2
 800151a:	f007 fd1d 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, wifiPass);
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <printCredentials+0x88>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f007 fd18 	bl	8008f58 <lcd_print>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20001064 	.word	0x20001064
 8001534:	0800eac4 	.word	0x0800eac4
 8001538:	0800eacc 	.word	0x0800eacc
 800153c:	0800eae0 	.word	0x0800eae0
 8001540:	20001070 	.word	0x20001070
 8001544:	0800eaf4 	.word	0x0800eaf4
 8001548:	20001080 	.word	0x20001080

0800154c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001550:	f3bf 8f4f 	dsb	sy
}
 8001554:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <__NVIC_SystemReset+0x24>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800155e:	4904      	ldr	r1, [pc, #16]	@ (8001570 <__NVIC_SystemReset+0x24>)
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__NVIC_SystemReset+0x28>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <__NVIC_SystemReset+0x20>
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	05fa0004 	.word	0x05fa0004

08001578 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800157e:	2101      	movs	r1, #1
 8001580:	488e      	ldr	r0, [pc, #568]	@ (80017bc <menu+0x244>)
 8001582:	f009 f813 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	f040 8099 	bne.w	80016c0 <menu+0x148>
 800158e:	4b8c      	ldr	r3, [pc, #560]	@ (80017c0 <menu+0x248>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	f083 0301 	eor.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8091 	beq.w	80016c0 <menu+0x148>
		menuSayac = menuSayac+1;
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <menu+0x24c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b87      	ldr	r3, [pc, #540]	@ (80017c4 <menu+0x24c>)
 80015a8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015aa:	4b86      	ldr	r3, [pc, #536]	@ (80017c4 <menu+0x24c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b24      	cmp	r3, #36	@ 0x24
 80015b0:	d102      	bne.n	80015b8 <menu+0x40>
			menuSayac = 1;
 80015b2:	4b84      	ldr	r3, [pc, #528]	@ (80017c4 <menu+0x24c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015b8:	4b82      	ldr	r3, [pc, #520]	@ (80017c4 <menu+0x24c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b12      	cmp	r3, #18
 80015be:	d106      	bne.n	80015ce <menu+0x56>
 80015c0:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <menu+0x250>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <menu+0x56>
			menuSayac = 21;
 80015c8:	4b7e      	ldr	r3, [pc, #504]	@ (80017c4 <menu+0x24c>)
 80015ca:	2215      	movs	r2, #21
 80015cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80015ce:	4b7d      	ldr	r3, [pc, #500]	@ (80017c4 <menu+0x24c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d106      	bne.n	80015e4 <menu+0x6c>
 80015d6:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <menu+0x254>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <menu+0x6c>
			menuSayac = 16;
 80015de:	4b79      	ldr	r3, [pc, #484]	@ (80017c4 <menu+0x24c>)
 80015e0:	2210      	movs	r2, #16
 80015e2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80015e4:	4b77      	ldr	r3, [pc, #476]	@ (80017c4 <menu+0x24c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b0d      	cmp	r3, #13
 80015ea:	d106      	bne.n	80015fa <menu+0x82>
 80015ec:	4b77      	ldr	r3, [pc, #476]	@ (80017cc <menu+0x254>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <menu+0x82>
			menuSayac = 16;
 80015f4:	4b73      	ldr	r3, [pc, #460]	@ (80017c4 <menu+0x24c>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <menu+0x24c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d106      	bne.n	8001610 <menu+0x98>
 8001602:	4b72      	ldr	r3, [pc, #456]	@ (80017cc <menu+0x254>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d102      	bne.n	8001610 <menu+0x98>
			menuSayac = 13;
 800160a:	4b6e      	ldr	r3, [pc, #440]	@ (80017c4 <menu+0x24c>)
 800160c:	220d      	movs	r2, #13
 800160e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001610:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <menu+0x24c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b0a      	cmp	r3, #10
 8001616:	d10a      	bne.n	800162e <menu+0xb6>
 8001618:	4b6d      	ldr	r3, [pc, #436]	@ (80017d0 <menu+0x258>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d003      	beq.n	8001628 <menu+0xb0>
 8001620:	4b6b      	ldr	r3, [pc, #428]	@ (80017d0 <menu+0x258>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <menu+0xb6>
			menuSayac = 11;
 8001628:	4b66      	ldr	r3, [pc, #408]	@ (80017c4 <menu+0x24c>)
 800162a:	220b      	movs	r2, #11
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800162e:	4b65      	ldr	r3, [pc, #404]	@ (80017c4 <menu+0x24c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10e      	bne.n	8001654 <menu+0xdc>
 8001636:	4b67      	ldr	r3, [pc, #412]	@ (80017d4 <menu+0x25c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <menu+0xce>
 800163e:	4b65      	ldr	r3, [pc, #404]	@ (80017d4 <menu+0x25c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d106      	bne.n	8001654 <menu+0xdc>
 8001646:	4b61      	ldr	r3, [pc, #388]	@ (80017cc <menu+0x254>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <menu+0xdc>
			menuSayac = 16;
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <menu+0x24c>)
 8001650:	2210      	movs	r2, #16
 8001652:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001654:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <menu+0x24c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d10e      	bne.n	800167a <menu+0x102>
 800165c:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <menu+0x25c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <menu+0xf4>
 8001664:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <menu+0x25c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d106      	bne.n	800167a <menu+0x102>
 800166c:	4b57      	ldr	r3, [pc, #348]	@ (80017cc <menu+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d102      	bne.n	800167a <menu+0x102>
			menuSayac = 13;
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <menu+0x24c>)
 8001676:	220d      	movs	r2, #13
 8001678:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800167a:	4b52      	ldr	r3, [pc, #328]	@ (80017c4 <menu+0x24c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	d106      	bne.n	8001690 <menu+0x118>
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <menu+0x260>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d102      	bne.n	8001690 <menu+0x118>
			menuSayac = 16;
 800168a:	4b4e      	ldr	r3, [pc, #312]	@ (80017c4 <menu+0x24c>)
 800168c:	2210      	movs	r2, #16
 800168e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001690:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <menu+0x24c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b18      	cmp	r3, #24
 8001696:	d106      	bne.n	80016a6 <menu+0x12e>
 8001698:	4b4b      	ldr	r3, [pc, #300]	@ (80017c8 <menu+0x250>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <menu+0x12e>
			menuSayac = 26;
 80016a0:	4b48      	ldr	r3, [pc, #288]	@ (80017c4 <menu+0x24c>)
 80016a2:	221a      	movs	r2, #26
 80016a4:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80016a6:	4b47      	ldr	r3, [pc, #284]	@ (80017c4 <menu+0x24c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b21      	cmp	r3, #33	@ 0x21
 80016ac:	d106      	bne.n	80016bc <menu+0x144>
 80016ae:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <menu+0x264>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <menu+0x144>
			menuSayac = 35;
 80016b6:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <menu+0x24c>)
 80016b8:	2223      	movs	r2, #35	@ 0x23
 80016ba:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016bc:	f002 fca2 	bl	8004004 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016c0:	2108      	movs	r1, #8
 80016c2:	4847      	ldr	r0, [pc, #284]	@ (80017e0 <menu+0x268>)
 80016c4:	f008 ff72 	bl	800a5ac <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 8097 	bne.w	80017fe <menu+0x286>
 80016d0:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <menu+0x248>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	f083 0301 	eor.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 808f 	beq.w	80017fe <menu+0x286>
		if (menuSayac <= 1) {
 80016e0:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <menu+0x24c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d802      	bhi.n	80016ee <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80016e8:	4b36      	ldr	r3, [pc, #216]	@ (80017c4 <menu+0x24c>)
 80016ea:	2224      	movs	r2, #36	@ 0x24
 80016ec:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <menu+0x24c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <menu+0x24c>)
 80016f8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <menu+0x24c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b14      	cmp	r3, #20
 8001700:	d106      	bne.n	8001710 <menu+0x198>
 8001702:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <menu+0x250>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <menu+0x198>
			menuSayac = 17;
 800170a:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <menu+0x24c>)
 800170c:	2211      	movs	r2, #17
 800170e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <menu+0x24c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d106      	bne.n	8001726 <menu+0x1ae>
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <menu+0x254>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <menu+0x1ae>
			menuSayac = 7;
 8001720:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <menu+0x24c>)
 8001722:	2207      	movs	r2, #7
 8001724:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <menu+0x24c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	d106      	bne.n	800173c <menu+0x1c4>
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <menu+0x254>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <menu+0x1c4>
			menuSayac = 12;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <menu+0x24c>)
 8001738:	220c      	movs	r2, #12
 800173a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <menu+0x24c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d106      	bne.n	8001752 <menu+0x1da>
 8001744:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <menu+0x254>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d102      	bne.n	8001752 <menu+0x1da>
			menuSayac = 8;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <menu+0x24c>)
 800174e:	2208      	movs	r2, #8
 8001750:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <menu+0x24c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d10a      	bne.n	8001770 <menu+0x1f8>
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <menu+0x258>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d003      	beq.n	800176a <menu+0x1f2>
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <menu+0x258>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d102      	bne.n	8001770 <menu+0x1f8>
			menuSayac = 9;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <menu+0x24c>)
 800176c:	2209      	movs	r2, #9
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <menu+0x24c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d10a      	bne.n	800178e <menu+0x216>
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <menu+0x25c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <menu+0x210>
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <menu+0x25c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <menu+0x216>
			menuSayac = 11;
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <menu+0x24c>)
 800178a:	220b      	movs	r2, #11
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <menu+0x24c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	d106      	bne.n	80017a4 <menu+0x22c>
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <menu+0x260>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <menu+0x22c>
			menuSayac = 14;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <menu+0x24c>)
 80017a0:	220e      	movs	r2, #14
 80017a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <menu+0x24c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b19      	cmp	r3, #25
 80017aa:	d11b      	bne.n	80017e4 <menu+0x26c>
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <menu+0x250>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d117      	bne.n	80017e4 <menu+0x26c>
			menuSayac = 23;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <menu+0x24c>)
 80017b6:	2217      	movs	r2, #23
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e013      	b.n	80017e4 <menu+0x26c>
 80017bc:	40010800 	.word	0x40010800
 80017c0:	200010ec 	.word	0x200010ec
 80017c4:	200010bc 	.word	0x200010bc
 80017c8:	200010cb 	.word	0x200010cb
 80017cc:	200010c4 	.word	0x200010c4
 80017d0:	200010c5 	.word	0x200010c5
 80017d4:	200010c6 	.word	0x200010c6
 80017d8:	200010c7 	.word	0x200010c7
 80017dc:	200010e7 	.word	0x200010e7
 80017e0:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80017e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001aa8 <menu+0x530>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b22      	cmp	r3, #34	@ 0x22
 80017ea:	d106      	bne.n	80017fa <menu+0x282>
 80017ec:	4baf      	ldr	r3, [pc, #700]	@ (8001aac <menu+0x534>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <menu+0x282>
			menuSayac = 32;
 80017f4:	4bac      	ldr	r3, [pc, #688]	@ (8001aa8 <menu+0x530>)
 80017f6:	2220      	movs	r2, #32
 80017f8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017fa:	f002 fc03 	bl	8004004 <bekle>
	}

	if (menuSayac == 0) {
 80017fe:	4baa      	ldr	r3, [pc, #680]	@ (8001aa8 <menu+0x530>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001806:	4aaa      	ldr	r2, [pc, #680]	@ (8001ab0 <menu+0x538>)
 8001808:	2101      	movs	r1, #1
 800180a:	2001      	movs	r0, #1
 800180c:	f007 fba4 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001810:	4aa8      	ldr	r2, [pc, #672]	@ (8001ab4 <menu+0x53c>)
 8001812:	2101      	movs	r1, #1
 8001814:	2002      	movs	r0, #2
 8001816:	f007 fb9f 	bl	8008f58 <lcd_print>
	}

	if (menuSayac == 1) {
 800181a:	4ba3      	ldr	r3, [pc, #652]	@ (8001aa8 <menu+0x530>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 81f4 	bne.w	8001c0c <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001824:	4aa4      	ldr	r2, [pc, #656]	@ (8001ab8 <menu+0x540>)
 8001826:	2101      	movs	r1, #1
 8001828:	2001      	movs	r0, #1
 800182a:	f007 fb95 	bl	8008f58 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800182e:	4ba3      	ldr	r3, [pc, #652]	@ (8001abc <menu+0x544>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001836:	4aa2      	ldr	r2, [pc, #648]	@ (8001ac0 <menu+0x548>)
 8001838:	2101      	movs	r1, #1
 800183a:	2002      	movs	r0, #2
 800183c:	f007 fb8c 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "   ");
 8001840:	4aa0      	ldr	r2, [pc, #640]	@ (8001ac4 <menu+0x54c>)
 8001842:	210f      	movs	r1, #15
 8001844:	2002      	movs	r0, #2
 8001846:	f007 fb87 	bl	8008f58 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800184a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ac8 <menu+0x550>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	220a      	movs	r2, #10
 8001850:	499e      	ldr	r1, [pc, #632]	@ (8001acc <menu+0x554>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00b fed6 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 8001858:	4a9c      	ldr	r2, [pc, #624]	@ (8001acc <menu+0x554>)
 800185a:	210e      	movs	r1, #14
 800185c:	2002      	movs	r0, #2
 800185e:	f007 fb7b 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001862:	4b96      	ldr	r3, [pc, #600]	@ (8001abc <menu+0x544>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d115      	bne.n	8001896 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800186a:	4a99      	ldr	r2, [pc, #612]	@ (8001ad0 <menu+0x558>)
 800186c:	2101      	movs	r1, #1
 800186e:	2002      	movs	r0, #2
 8001870:	f007 fb72 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 8001874:	4a97      	ldr	r2, [pc, #604]	@ (8001ad4 <menu+0x55c>)
 8001876:	210f      	movs	r1, #15
 8001878:	2002      	movs	r0, #2
 800187a:	f007 fb6d 	bl	8008f58 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800187e:	4b96      	ldr	r3, [pc, #600]	@ (8001ad8 <menu+0x560>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	220a      	movs	r2, #10
 8001884:	4991      	ldr	r1, [pc, #580]	@ (8001acc <menu+0x554>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00b febc 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 800188c:	4a8f      	ldr	r2, [pc, #572]	@ (8001acc <menu+0x554>)
 800188e:	210e      	movs	r1, #14
 8001890:	2002      	movs	r0, #2
 8001892:	f007 fb61 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001896:	4b89      	ldr	r3, [pc, #548]	@ (8001abc <menu+0x544>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d115      	bne.n	80018ca <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 800189e:	4a8f      	ldr	r2, [pc, #572]	@ (8001adc <menu+0x564>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	2002      	movs	r0, #2
 80018a4:	f007 fb58 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 80018a8:	4a8a      	ldr	r2, [pc, #552]	@ (8001ad4 <menu+0x55c>)
 80018aa:	210f      	movs	r1, #15
 80018ac:	2002      	movs	r0, #2
 80018ae:	f007 fb53 	bl	8008f58 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae0 <menu+0x568>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	220a      	movs	r2, #10
 80018b8:	4984      	ldr	r1, [pc, #528]	@ (8001acc <menu+0x554>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00b fea2 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 80018c0:	4a82      	ldr	r2, [pc, #520]	@ (8001acc <menu+0x554>)
 80018c2:	210e      	movs	r1, #14
 80018c4:	2002      	movs	r0, #2
 80018c6:	f007 fb47 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80018ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <menu+0x544>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d115      	bne.n	80018fe <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80018d2:	4a84      	ldr	r2, [pc, #528]	@ (8001ae4 <menu+0x56c>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	2002      	movs	r0, #2
 80018d8:	f007 fb3e 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 80018dc:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <menu+0x55c>)
 80018de:	210f      	movs	r1, #15
 80018e0:	2002      	movs	r0, #2
 80018e2:	f007 fb39 	bl	8008f58 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018e6:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <menu+0x570>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	220a      	movs	r2, #10
 80018ec:	4977      	ldr	r1, [pc, #476]	@ (8001acc <menu+0x554>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00b fe88 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 80018f4:	4a75      	ldr	r2, [pc, #468]	@ (8001acc <menu+0x554>)
 80018f6:	210e      	movs	r1, #14
 80018f8:	2002      	movs	r0, #2
 80018fa:	f007 fb2d 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018fe:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <menu+0x544>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b04      	cmp	r3, #4
 8001904:	d115      	bne.n	8001932 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001906:	4a79      	ldr	r2, [pc, #484]	@ (8001aec <menu+0x574>)
 8001908:	2101      	movs	r1, #1
 800190a:	2002      	movs	r0, #2
 800190c:	f007 fb24 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 8001910:	4a70      	ldr	r2, [pc, #448]	@ (8001ad4 <menu+0x55c>)
 8001912:	210f      	movs	r1, #15
 8001914:	2002      	movs	r0, #2
 8001916:	f007 fb1f 	bl	8008f58 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800191a:	4b75      	ldr	r3, [pc, #468]	@ (8001af0 <menu+0x578>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	220a      	movs	r2, #10
 8001920:	496a      	ldr	r1, [pc, #424]	@ (8001acc <menu+0x554>)
 8001922:	4618      	mov	r0, r3
 8001924:	f00b fe6e 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 8001928:	4a68      	ldr	r2, [pc, #416]	@ (8001acc <menu+0x554>)
 800192a:	210e      	movs	r1, #14
 800192c:	2002      	movs	r0, #2
 800192e:	f007 fb13 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001932:	4b62      	ldr	r3, [pc, #392]	@ (8001abc <menu+0x544>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d115      	bne.n	8001966 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800193a:	4a6e      	ldr	r2, [pc, #440]	@ (8001af4 <menu+0x57c>)
 800193c:	2101      	movs	r1, #1
 800193e:	2002      	movs	r0, #2
 8001940:	f007 fb0a 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 8001944:	4a63      	ldr	r2, [pc, #396]	@ (8001ad4 <menu+0x55c>)
 8001946:	210f      	movs	r1, #15
 8001948:	2002      	movs	r0, #2
 800194a:	f007 fb05 	bl	8008f58 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800194e:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <menu+0x580>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	220a      	movs	r2, #10
 8001954:	495d      	ldr	r1, [pc, #372]	@ (8001acc <menu+0x554>)
 8001956:	4618      	mov	r0, r3
 8001958:	f00b fe54 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 800195c:	4a5b      	ldr	r2, [pc, #364]	@ (8001acc <menu+0x554>)
 800195e:	210e      	movs	r1, #14
 8001960:	2002      	movs	r0, #2
 8001962:	f007 faf9 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001966:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <menu+0x544>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d115      	bne.n	800199a <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800196e:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <menu+0x584>)
 8001970:	2101      	movs	r1, #1
 8001972:	2002      	movs	r0, #2
 8001974:	f007 faf0 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 8001978:	4a56      	ldr	r2, [pc, #344]	@ (8001ad4 <menu+0x55c>)
 800197a:	210f      	movs	r1, #15
 800197c:	2002      	movs	r0, #2
 800197e:	f007 faeb 	bl	8008f58 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001982:	4b5f      	ldr	r3, [pc, #380]	@ (8001b00 <menu+0x588>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	220a      	movs	r2, #10
 8001988:	4950      	ldr	r1, [pc, #320]	@ (8001acc <menu+0x554>)
 800198a:	4618      	mov	r0, r3
 800198c:	f00b fe3a 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 8001990:	4a4e      	ldr	r2, [pc, #312]	@ (8001acc <menu+0x554>)
 8001992:	210e      	movs	r1, #14
 8001994:	2002      	movs	r0, #2
 8001996:	f007 fadf 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800199a:	4b48      	ldr	r3, [pc, #288]	@ (8001abc <menu+0x544>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b07      	cmp	r3, #7
 80019a0:	d115      	bne.n	80019ce <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80019a2:	4a58      	ldr	r2, [pc, #352]	@ (8001b04 <menu+0x58c>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	2002      	movs	r0, #2
 80019a8:	f007 fad6 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 80019ac:	4a49      	ldr	r2, [pc, #292]	@ (8001ad4 <menu+0x55c>)
 80019ae:	210f      	movs	r1, #15
 80019b0:	2002      	movs	r0, #2
 80019b2:	f007 fad1 	bl	8008f58 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019b6:	4b54      	ldr	r3, [pc, #336]	@ (8001b08 <menu+0x590>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	220a      	movs	r2, #10
 80019bc:	4943      	ldr	r1, [pc, #268]	@ (8001acc <menu+0x554>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f00b fe20 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 80019c4:	4a41      	ldr	r2, [pc, #260]	@ (8001acc <menu+0x554>)
 80019c6:	210e      	movs	r1, #14
 80019c8:	2002      	movs	r0, #2
 80019ca:	f007 fac5 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <menu+0x544>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d115      	bne.n	8001a02 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80019d6:	4a4d      	ldr	r2, [pc, #308]	@ (8001b0c <menu+0x594>)
 80019d8:	2101      	movs	r1, #1
 80019da:	2002      	movs	r0, #2
 80019dc:	f007 fabc 	bl	8008f58 <lcd_print>
			lcd_print(2, 15, "  ");
 80019e0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad4 <menu+0x55c>)
 80019e2:	210f      	movs	r1, #15
 80019e4:	2002      	movs	r0, #2
 80019e6:	f007 fab7 	bl	8008f58 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019ea:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <menu+0x598>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	220a      	movs	r2, #10
 80019f0:	4936      	ldr	r1, [pc, #216]	@ (8001acc <menu+0x554>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00b fe06 	bl	800d604 <itoa>
			lcd_print(2, 14, snum);
 80019f8:	4a34      	ldr	r2, [pc, #208]	@ (8001acc <menu+0x554>)
 80019fa:	210e      	movs	r1, #14
 80019fc:	2002      	movs	r0, #2
 80019fe:	f007 faab 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a02:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <menu+0x544>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b09      	cmp	r3, #9
 8001a08:	d115      	bne.n	8001a36 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001a0a:	4a42      	ldr	r2, [pc, #264]	@ (8001b14 <menu+0x59c>)
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f007 faa2 	bl	8008f58 <lcd_print>
			lcd_print(2, 16, " ");
 8001a14:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <menu+0x5a0>)
 8001a16:	2110      	movs	r1, #16
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f007 fa9d 	bl	8008f58 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <menu+0x5a4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	220a      	movs	r2, #10
 8001a24:	4929      	ldr	r1, [pc, #164]	@ (8001acc <menu+0x554>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00b fdec 	bl	800d604 <itoa>
			lcd_print(2, 15, snum);
 8001a2c:	4a27      	ldr	r2, [pc, #156]	@ (8001acc <menu+0x554>)
 8001a2e:	210f      	movs	r1, #15
 8001a30:	2002      	movs	r0, #2
 8001a32:	f007 fa91 	bl	8008f58 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <menu+0x544>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d104      	bne.n	8001a48 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001a3e:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <menu+0x5a8>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	2002      	movs	r0, #2
 8001a44:	f007 fa88 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4836      	ldr	r0, [pc, #216]	@ (8001b24 <menu+0x5ac>)
 8001a4c:	f008 fdae 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d119      	bne.n	8001a8a <menu+0x512>
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <menu+0x5b0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d012      	beq.n	8001a8a <menu+0x512>
 8001a64:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <menu+0x5b4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10e      	bne.n	8001a8a <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <menu+0x544>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <menu+0x544>)
 8001a76:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a78:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <menu+0x544>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d902      	bls.n	8001a86 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <menu+0x544>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a86:	f002 fabd 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <menu+0x5ac>)
 8001a8e:	f008 fd8d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d15e      	bne.n	8001b56 <menu+0x5de>
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <menu+0x5b0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d057      	beq.n	8001b56 <menu+0x5de>
 8001aa6:	e043      	b.n	8001b30 <menu+0x5b8>
 8001aa8:	200010bc 	.word	0x200010bc
 8001aac:	200010e7 	.word	0x200010e7
 8001ab0:	20001220 	.word	0x20001220
 8001ab4:	20001234 	.word	0x20001234
 8001ab8:	20001248 	.word	0x20001248
 8001abc:	200010be 	.word	0x200010be
 8001ac0:	2000125c 	.word	0x2000125c
 8001ac4:	0800eb08 	.word	0x0800eb08
 8001ac8:	200010dd 	.word	0x200010dd
 8001acc:	2000105c 	.word	0x2000105c
 8001ad0:	20001270 	.word	0x20001270
 8001ad4:	0800eb0c 	.word	0x0800eb0c
 8001ad8:	200010de 	.word	0x200010de
 8001adc:	20001284 	.word	0x20001284
 8001ae0:	200010df 	.word	0x200010df
 8001ae4:	20001298 	.word	0x20001298
 8001ae8:	200010e0 	.word	0x200010e0
 8001aec:	200012ac 	.word	0x200012ac
 8001af0:	200010e1 	.word	0x200010e1
 8001af4:	200012c0 	.word	0x200012c0
 8001af8:	200010e2 	.word	0x200010e2
 8001afc:	200012d4 	.word	0x200012d4
 8001b00:	200010e3 	.word	0x200010e3
 8001b04:	200012e8 	.word	0x200012e8
 8001b08:	200010e4 	.word	0x200010e4
 8001b0c:	200012fc 	.word	0x200012fc
 8001b10:	200010e5 	.word	0x200010e5
 8001b14:	20001310 	.word	0x20001310
 8001b18:	0800eb10 	.word	0x0800eb10
 8001b1c:	200010e6 	.word	0x200010e6
 8001b20:	20001324 	.word	0x20001324
 8001b24:	40010800 	.word	0x40010800
 8001b28:	200010ec 	.word	0x200010ec
 8001b2c:	200010cb 	.word	0x200010cb
 8001b30:	4b8a      	ldr	r3, [pc, #552]	@ (8001d5c <menu+0x7e4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10e      	bne.n	8001b56 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b38:	4b89      	ldr	r3, [pc, #548]	@ (8001d60 <menu+0x7e8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b87      	ldr	r3, [pc, #540]	@ (8001d60 <menu+0x7e8>)
 8001b42:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b44:	4b86      	ldr	r3, [pc, #536]	@ (8001d60 <menu+0x7e8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b0b      	cmp	r3, #11
 8001b4a:	d902      	bls.n	8001b52 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001b4c:	4b84      	ldr	r3, [pc, #528]	@ (8001d60 <menu+0x7e8>)
 8001b4e:	220a      	movs	r2, #10
 8001b50:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b52:	f002 fa57 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b56:	2108      	movs	r1, #8
 8001b58:	4882      	ldr	r0, [pc, #520]	@ (8001d64 <menu+0x7ec>)
 8001b5a:	f008 fd27 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d153      	bne.n	8001c0c <menu+0x694>
 8001b64:	4b80      	ldr	r3, [pc, #512]	@ (8001d68 <menu+0x7f0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f083 0301 	eor.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d04c      	beq.n	8001c0c <menu+0x694>
 8001b72:	4b7b      	ldr	r3, [pc, #492]	@ (8001d60 <menu+0x7e8>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d148      	bne.n	8001c0c <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <menu+0x7f4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	4b7b      	ldr	r3, [pc, #492]	@ (8001d70 <menu+0x7f8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b88:	4b7a      	ldr	r3, [pc, #488]	@ (8001d74 <menu+0x7fc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	@ (8001d70 <menu+0x7f8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b96:	4b78      	ldr	r3, [pc, #480]	@ (8001d78 <menu+0x800>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	4b74      	ldr	r3, [pc, #464]	@ (8001d70 <menu+0x7f8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ba4:	4b75      	ldr	r3, [pc, #468]	@ (8001d7c <menu+0x804>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	4b71      	ldr	r3, [pc, #452]	@ (8001d70 <menu+0x7f8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bb2:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <menu+0x808>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <menu+0x7f8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bc0:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <menu+0x80c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <menu+0x7f8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001bce:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <menu+0x810>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <menu+0x7f8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001d8c <menu+0x814>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <menu+0x7f8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001bea:	4b69      	ldr	r3, [pc, #420]	@ (8001d90 <menu+0x818>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <menu+0x7f8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <menu+0x81c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <menu+0x7f8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001c06:	4b64      	ldr	r3, [pc, #400]	@ (8001d98 <menu+0x820>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c0c:	4b63      	ldr	r3, [pc, #396]	@ (8001d9c <menu+0x824>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 808e 	bne.w	8001d32 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001c16:	4a62      	ldr	r2, [pc, #392]	@ (8001da0 <menu+0x828>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f007 f99c 	bl	8008f58 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c20:	4b4e      	ldr	r3, [pc, #312]	@ (8001d5c <menu+0x7e4>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d003      	beq.n	8001c30 <menu+0x6b8>
 8001c28:	4b4c      	ldr	r3, [pc, #304]	@ (8001d5c <menu+0x7e4>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d104      	bne.n	8001c3a <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001c30:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <menu+0x82c>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	2002      	movs	r0, #2
 8001c36:	f007 f98f 	bl	8008f58 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001da8 <menu+0x830>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d108      	bne.n	8001c54 <menu+0x6dc>
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <menu+0x7e4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001c4a:	4a58      	ldr	r2, [pc, #352]	@ (8001dac <menu+0x834>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f007 f982 	bl	8008f58 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c54:	4b54      	ldr	r3, [pc, #336]	@ (8001da8 <menu+0x830>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d108      	bne.n	8001c6e <menu+0x6f6>
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <menu+0x7e4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <menu+0x838>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f007 f975 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c6e:	2102      	movs	r1, #2
 8001c70:	483c      	ldr	r0, [pc, #240]	@ (8001d64 <menu+0x7ec>)
 8001c72:	f008 fc9b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d119      	bne.n	8001cb0 <menu+0x738>
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <menu+0x7f0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <menu+0x738>
 8001c8a:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <menu+0x7e4>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001c92:	4b45      	ldr	r3, [pc, #276]	@ (8001da8 <menu+0x830>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b43      	ldr	r3, [pc, #268]	@ (8001da8 <menu+0x830>)
 8001c9c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c9e:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <menu+0x830>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d902      	bls.n	8001cac <menu+0x734>
				calismaSekli = 0;
 8001ca6:	4b40      	ldr	r3, [pc, #256]	@ (8001da8 <menu+0x830>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cac:	f002 f9aa 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	482c      	ldr	r0, [pc, #176]	@ (8001d64 <menu+0x7ec>)
 8001cb4:	f008 fc7a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d119      	bne.n	8001cf2 <menu+0x77a>
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <menu+0x7f0>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	f083 0301 	eor.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d012      	beq.n	8001cf2 <menu+0x77a>
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <menu+0x7e4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10e      	bne.n	8001cf2 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001cd4:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <menu+0x830>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b32      	ldr	r3, [pc, #200]	@ (8001da8 <menu+0x830>)
 8001cde:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <menu+0x830>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <menu+0x776>
	    		calismaSekli = 1;
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <menu+0x830>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cee:	f002 f989 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	481b      	ldr	r0, [pc, #108]	@ (8001d64 <menu+0x7ec>)
 8001cf6:	f008 fc59 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d118      	bne.n	8001d32 <menu+0x7ba>
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <menu+0x7f0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d011      	beq.n	8001d32 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <menu+0x830>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <menu+0x7f8>)
 8001d14:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <menu+0x830>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <menu+0x7b4>
				altLimit = 1;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <menu+0x83c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <menu+0x83c>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <menu+0x7f8>)
 8001d2a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <menu+0x820>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <menu+0x824>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	f040 809c 	bne.w	8001e74 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001db8 <menu+0x840>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2001      	movs	r0, #1
 8001d42:	f007 f909 	bl	8008f58 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <menu+0x844>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d13a      	bne.n	8001dc4 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <menu+0x848>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	2002      	movs	r0, #2
 8001d54:	f007 f900 	bl	8008f58 <lcd_print>
 8001d58:	e03d      	b.n	8001dd6 <menu+0x85e>
 8001d5a:	bf00      	nop
 8001d5c:	200010cb 	.word	0x200010cb
 8001d60:	200010be 	.word	0x200010be
 8001d64:	40010800 	.word	0x40010800
 8001d68:	200010ec 	.word	0x200010ec
 8001d6c:	200010dd 	.word	0x200010dd
 8001d70:	20000fec 	.word	0x20000fec
 8001d74:	200010de 	.word	0x200010de
 8001d78:	200010df 	.word	0x200010df
 8001d7c:	200010e0 	.word	0x200010e0
 8001d80:	200010e1 	.word	0x200010e1
 8001d84:	200010e2 	.word	0x200010e2
 8001d88:	200010e3 	.word	0x200010e3
 8001d8c:	200010e4 	.word	0x200010e4
 8001d90:	200010e5 	.word	0x200010e5
 8001d94:	200010e6 	.word	0x200010e6
 8001d98:	200010e9 	.word	0x200010e9
 8001d9c:	200010bc 	.word	0x200010bc
 8001da0:	20001338 	.word	0x20001338
 8001da4:	2000134c 	.word	0x2000134c
 8001da8:	200010bd 	.word	0x200010bd
 8001dac:	20001360 	.word	0x20001360
 8001db0:	20001374 	.word	0x20001374
 8001db4:	200010c2 	.word	0x200010c2
 8001db8:	20001388 	.word	0x20001388
 8001dbc:	200010c0 	.word	0x200010c0
 8001dc0:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <menu+0x9fc>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d104      	bne.n	8001dd6 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8001f78 <menu+0xa00>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f007 f8c1 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4868      	ldr	r0, [pc, #416]	@ (8001f7c <menu+0xa04>)
 8001dda:	f008 fbe7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d115      	bne.n	8001e10 <menu+0x898>
 8001de4:	4b66      	ldr	r3, [pc, #408]	@ (8001f80 <menu+0xa08>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00e      	beq.n	8001e10 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001df2:	4b60      	ldr	r3, [pc, #384]	@ (8001f74 <menu+0x9fc>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <menu+0x9fc>)
 8001dfc:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f74 <menu+0x9fc>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d902      	bls.n	8001e0c <menu+0x894>
				emniyetCercevesi = 0;
 8001e06:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <menu+0x9fc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e0c:	f002 f8fa 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e10:	2104      	movs	r1, #4
 8001e12:	485a      	ldr	r0, [pc, #360]	@ (8001f7c <menu+0xa04>)
 8001e14:	f008 fbca 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d115      	bne.n	8001e4a <menu+0x8d2>
 8001e1e:	4b58      	ldr	r3, [pc, #352]	@ (8001f80 <menu+0xa08>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e2c:	4b51      	ldr	r3, [pc, #324]	@ (8001f74 <menu+0x9fc>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b4f      	ldr	r3, [pc, #316]	@ (8001f74 <menu+0x9fc>)
 8001e36:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e38:	4b4e      	ldr	r3, [pc, #312]	@ (8001f74 <menu+0x9fc>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001e40:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <menu+0x9fc>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e46:	f002 f8dd 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	484b      	ldr	r0, [pc, #300]	@ (8001f7c <menu+0xa04>)
 8001e4e:	f008 fbad 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10d      	bne.n	8001e74 <menu+0x8fc>
 8001e58:	4b49      	ldr	r3, [pc, #292]	@ (8001f80 <menu+0xa08>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f083 0301 	eor.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001e66:	4b43      	ldr	r3, [pc, #268]	@ (8001f74 <menu+0x9fc>)
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <menu+0xa0c>)
 8001e6c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e6e:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <menu+0xa10>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e74:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <menu+0xa14>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d166      	bne.n	8001f4a <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001e7c:	4a44      	ldr	r2, [pc, #272]	@ (8001f90 <menu+0xa18>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2001      	movs	r0, #1
 8001e82:	f007 f869 	bl	8008f58 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <menu+0xa1c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001e8e:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <menu+0xa20>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2002      	movs	r0, #2
 8001e94:	f007 f860 	bl	8008f58 <lcd_print>
 8001e98:	e008      	b.n	8001eac <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <menu+0xa1c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8001f9c <menu+0xa24>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f007 f856 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eac:	2102      	movs	r1, #2
 8001eae:	4833      	ldr	r0, [pc, #204]	@ (8001f7c <menu+0xa04>)
 8001eb0:	f008 fb7c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d115      	bne.n	8001ee6 <menu+0x96e>
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <menu+0xa08>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ec8:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <menu+0xa1c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <menu+0xa1c>)
 8001ed2:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <menu+0xa1c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d902      	bls.n	8001ee2 <menu+0x96a>
				yavaslamaLimit = 0;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <menu+0xa1c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee2:	f002 f88f 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4824      	ldr	r0, [pc, #144]	@ (8001f7c <menu+0xa04>)
 8001eea:	f008 fb5f 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d115      	bne.n	8001f20 <menu+0x9a8>
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <menu+0xa08>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00e      	beq.n	8001f20 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <menu+0xa1c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <menu+0xa1c>)
 8001f0c:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f0e:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <menu+0xa1c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <menu+0xa1c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f1c:	f002 f872 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f20:	2108      	movs	r1, #8
 8001f22:	4816      	ldr	r0, [pc, #88]	@ (8001f7c <menu+0xa04>)
 8001f24:	f008 fb42 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10d      	bne.n	8001f4a <menu+0x9d2>
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <menu+0xa08>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	f083 0301 	eor.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <menu+0xa1c>)
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <menu+0xa0c>)
 8001f42:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <menu+0xa10>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <menu+0xa14>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	f040 80aa 	bne.w	80020a8 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <menu+0xa28>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f006 fffd 	bl	8008f58 <lcd_print>

		if(altLimit == 0) {
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <menu+0xa2c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d120      	bne.n	8001fa8 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001f66:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <menu+0xa20>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f006 fff4 	bl	8008f58 <lcd_print>
 8001f70:	e023      	b.n	8001fba <menu+0xa42>
 8001f72:	bf00      	nop
 8001f74:	200010c0 	.word	0x200010c0
 8001f78:	200000ec 	.word	0x200000ec
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	200010ec 	.word	0x200010ec
 8001f84:	20000fec 	.word	0x20000fec
 8001f88:	200010e9 	.word	0x200010e9
 8001f8c:	200010bc 	.word	0x200010bc
 8001f90:	200013c4 	.word	0x200013c4
 8001f94:	200010c1 	.word	0x200010c1
 8001f98:	2000139c 	.word	0x2000139c
 8001f9c:	200013b0 	.word	0x200013b0
 8001fa0:	200013d8 	.word	0x200013d8
 8001fa4:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001fa8:	4b89      	ldr	r3, [pc, #548]	@ (80021d0 <menu+0xc58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d104      	bne.n	8001fba <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001fb0:	4a88      	ldr	r2, [pc, #544]	@ (80021d4 <menu+0xc5c>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f006 ffcf 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4886      	ldr	r0, [pc, #536]	@ (80021d8 <menu+0xc60>)
 8001fbe:	f008 faf5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d119      	bne.n	8001ffc <menu+0xa84>
 8001fc8:	4b84      	ldr	r3, [pc, #528]	@ (80021dc <menu+0xc64>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <menu+0xa84>
 8001fd6:	4b82      	ldr	r3, [pc, #520]	@ (80021e0 <menu+0xc68>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <menu+0xa84>
			altLimit = altLimit + 1;
 8001fde:	4b7c      	ldr	r3, [pc, #496]	@ (80021d0 <menu+0xc58>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80021d0 <menu+0xc58>)
 8001fe8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001fea:	4b79      	ldr	r3, [pc, #484]	@ (80021d0 <menu+0xc58>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d902      	bls.n	8001ff8 <menu+0xa80>
				altLimit = 0;
 8001ff2:	4b77      	ldr	r3, [pc, #476]	@ (80021d0 <menu+0xc58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ff8:	f002 f804 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	4876      	ldr	r0, [pc, #472]	@ (80021d8 <menu+0xc60>)
 8002000:	f008 fad4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002004:	4603      	mov	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	d119      	bne.n	800203e <menu+0xac6>
 800200a:	4b74      	ldr	r3, [pc, #464]	@ (80021dc <menu+0xc64>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <menu+0xac6>
 8002018:	4b71      	ldr	r3, [pc, #452]	@ (80021e0 <menu+0xc68>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10e      	bne.n	800203e <menu+0xac6>
			altLimit = altLimit - 1;
 8002020:	4b6b      	ldr	r3, [pc, #428]	@ (80021d0 <menu+0xc58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b69      	ldr	r3, [pc, #420]	@ (80021d0 <menu+0xc58>)
 800202a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800202c:	4b68      	ldr	r3, [pc, #416]	@ (80021d0 <menu+0xc58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <menu+0xac2>
		   		altLimit = 1;
 8002034:	4b66      	ldr	r3, [pc, #408]	@ (80021d0 <menu+0xc58>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800203a:	f001 ffe3 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800203e:	2108      	movs	r1, #8
 8002040:	4865      	ldr	r0, [pc, #404]	@ (80021d8 <menu+0xc60>)
 8002042:	f008 fab3 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d12d      	bne.n	80020a8 <menu+0xb30>
 800204c:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <menu+0xc64>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d026      	beq.n	80020a8 <menu+0xb30>
			eepromData[5] = altLimit;
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <menu+0xc58>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <menu+0xc6c>)
 8002060:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002062:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <menu+0xc58>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d110      	bne.n	800208c <menu+0xb14>
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <menu+0xc70>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <menu+0xb02>
 8002072:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <menu+0xc70>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d108      	bne.n	800208c <menu+0xb14>
				kapiTablaAcKonum = 3;
 800207a:	4b5b      	ldr	r3, [pc, #364]	@ (80021e8 <menu+0xc70>)
 800207c:	2203      	movs	r2, #3
 800207e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002080:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <menu+0xc70>)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <menu+0xc6c>)
 8002086:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800208a:	e00a      	b.n	80020a2 <menu+0xb2a>
			} else if(altLimit == 0) {
 800208c:	4b50      	ldr	r3, [pc, #320]	@ (80021d0 <menu+0xc58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <menu+0xb2a>
				platformSilindirTipi = 0;
 8002094:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <menu+0xc74>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <menu+0xc74>)
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	4b51      	ldr	r3, [pc, #324]	@ (80021e4 <menu+0xc6c>)
 80020a0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020a2:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <menu+0xc78>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020a8:	4b52      	ldr	r3, [pc, #328]	@ (80021f4 <menu+0xc7c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d166      	bne.n	800217e <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80020b0:	4a51      	ldr	r2, [pc, #324]	@ (80021f8 <menu+0xc80>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2001      	movs	r0, #1
 80020b6:	f006 ff4f 	bl	8008f58 <lcd_print>

		if(basincSalteri == 0) {
 80020ba:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <menu+0xc84>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <menu+0xb56>
			lcd_print(2, 1, pasifText);
 80020c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002200 <menu+0xc88>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	2002      	movs	r0, #2
 80020c8:	f006 ff46 	bl	8008f58 <lcd_print>
 80020cc:	e008      	b.n	80020e0 <menu+0xb68>
		} else if(basincSalteri == 1) {
 80020ce:	4b4b      	ldr	r3, [pc, #300]	@ (80021fc <menu+0xc84>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d104      	bne.n	80020e0 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 80020d6:	4a3f      	ldr	r2, [pc, #252]	@ (80021d4 <menu+0xc5c>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f006 ff3c 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e0:	2102      	movs	r1, #2
 80020e2:	483d      	ldr	r0, [pc, #244]	@ (80021d8 <menu+0xc60>)
 80020e4:	f008 fa62 	bl	800a5ac <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d115      	bne.n	800211a <menu+0xba2>
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <menu+0xc64>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 80020fc:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <menu+0xc84>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <menu+0xc84>)
 8002106:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002108:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <menu+0xc84>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d902      	bls.n	8002116 <menu+0xb9e>
				basincSalteri = 0;
 8002110:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <menu+0xc84>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002116:	f001 ff75 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800211a:	2104      	movs	r1, #4
 800211c:	482e      	ldr	r0, [pc, #184]	@ (80021d8 <menu+0xc60>)
 800211e:	f008 fa45 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d115      	bne.n	8002154 <menu+0xbdc>
 8002128:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <menu+0xc64>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002136:	4b31      	ldr	r3, [pc, #196]	@ (80021fc <menu+0xc84>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b2f      	ldr	r3, [pc, #188]	@ (80021fc <menu+0xc84>)
 8002140:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002142:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <menu+0xc84>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <menu+0xbd8>
		   		basincSalteri = 1;
 800214a:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <menu+0xc84>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002150:	f001 ff58 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002154:	2108      	movs	r1, #8
 8002156:	4820      	ldr	r0, [pc, #128]	@ (80021d8 <menu+0xc60>)
 8002158:	f008 fa28 	bl	800a5ac <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <menu+0xc06>
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <menu+0xc64>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f083 0301 	eor.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <menu+0xc06>
			eepromData[6] = basincSalteri;
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <menu+0xc84>)
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <menu+0xc6c>)
 8002176:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <menu+0xc78>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800217e:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <menu+0xc7c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b07      	cmp	r3, #7
 8002184:	f040 80a9 	bne.w	80022da <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <menu+0xc8c>)
 800218a:	2101      	movs	r1, #1
 800218c:	2001      	movs	r0, #1
 800218e:	f006 fee3 	bl	8008f58 <lcd_print>

		if(kapiSecimleri == 0) {
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <menu+0xc90>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 800219a:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <menu+0xc88>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f006 feda 	bl	8008f58 <lcd_print>
 80021a4:	e03f      	b.n	8002226 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <menu+0xc90>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80021ae:	4a17      	ldr	r2, [pc, #92]	@ (800220c <menu+0xc94>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f006 fed0 	bl	8008f58 <lcd_print>
 80021b8:	e035      	b.n	8002226 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <menu+0xc90>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d128      	bne.n	8002214 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 80021c2:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <menu+0xc98>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f006 fec6 	bl	8008f58 <lcd_print>
 80021cc:	e02b      	b.n	8002226 <menu+0xcae>
 80021ce:	bf00      	nop
 80021d0:	200010c2 	.word	0x200010c2
 80021d4:	200013b0 	.word	0x200013b0
 80021d8:	40010800 	.word	0x40010800
 80021dc:	200010ec 	.word	0x200010ec
 80021e0:	200010bd 	.word	0x200010bd
 80021e4:	20000fec 	.word	0x20000fec
 80021e8:	200010c9 	.word	0x200010c9
 80021ec:	200010cf 	.word	0x200010cf
 80021f0:	200010e9 	.word	0x200010e9
 80021f4:	200010bc 	.word	0x200010bc
 80021f8:	200013ec 	.word	0x200013ec
 80021fc:	200010c3 	.word	0x200010c3
 8002200:	2000139c 	.word	0x2000139c
 8002204:	20001400 	.word	0x20001400
 8002208:	200010c4 	.word	0x200010c4
 800220c:	20001414 	.word	0x20001414
 8002210:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8002214:	4b76      	ldr	r3, [pc, #472]	@ (80023f0 <menu+0xe78>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d104      	bne.n	8002226 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 800221c:	4a75      	ldr	r2, [pc, #468]	@ (80023f4 <menu+0xe7c>)
 800221e:	2101      	movs	r1, #1
 8002220:	2002      	movs	r0, #2
 8002222:	f006 fe99 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002226:	2102      	movs	r1, #2
 8002228:	4873      	ldr	r0, [pc, #460]	@ (80023f8 <menu+0xe80>)
 800222a:	f008 f9bf 	bl	800a5ac <HAL_GPIO_ReadPin>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d115      	bne.n	8002260 <menu+0xce8>
 8002234:	4b71      	ldr	r3, [pc, #452]	@ (80023fc <menu+0xe84>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00e      	beq.n	8002260 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002242:	4b6b      	ldr	r3, [pc, #428]	@ (80023f0 <menu+0xe78>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b69      	ldr	r3, [pc, #420]	@ (80023f0 <menu+0xe78>)
 800224c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800224e:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <menu+0xe78>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d902      	bls.n	800225c <menu+0xce4>
				kapiSecimleri = 0;
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <menu+0xe78>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800225c:	f001 fed2 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002260:	2104      	movs	r1, #4
 8002262:	4865      	ldr	r0, [pc, #404]	@ (80023f8 <menu+0xe80>)
 8002264:	f008 f9a2 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	d115      	bne.n	800229a <menu+0xd22>
 800226e:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <menu+0xe84>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 800227c:	4b5c      	ldr	r3, [pc, #368]	@ (80023f0 <menu+0xe78>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b5a      	ldr	r3, [pc, #360]	@ (80023f0 <menu+0xe78>)
 8002286:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <menu+0xe78>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d902      	bls.n	8002296 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002290:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <menu+0xe78>)
 8002292:	2203      	movs	r2, #3
 8002294:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002296:	f001 feb5 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800229a:	2108      	movs	r1, #8
 800229c:	4856      	ldr	r0, [pc, #344]	@ (80023f8 <menu+0xe80>)
 800229e:	f008 f985 	bl	800a5ac <HAL_GPIO_ReadPin>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d118      	bne.n	80022da <menu+0xd62>
 80022a8:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <menu+0xe84>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f083 0301 	eor.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 80022b6:	4b4e      	ldr	r3, [pc, #312]	@ (80023f0 <menu+0xe78>)
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	4b51      	ldr	r3, [pc, #324]	@ (8002400 <menu+0xe88>)
 80022bc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022be:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <menu+0xe78>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <menu+0xd5c>
				altLimit = 1;
 80022c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002404 <menu+0xe8c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <menu+0xe8c>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002400 <menu+0xe88>)
 80022d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80022d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002408 <menu+0xe90>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80022da:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <menu+0xe94>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d167      	bne.n	80023b2 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80022e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002410 <menu+0xe98>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2001      	movs	r0, #1
 80022e8:	f006 fe36 	bl	8008f58 <lcd_print>

		if(kapiAcTipi == 0) {
 80022ec:	4b49      	ldr	r3, [pc, #292]	@ (8002414 <menu+0xe9c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80022f4:	4a48      	ldr	r2, [pc, #288]	@ (8002418 <menu+0xea0>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	2002      	movs	r0, #2
 80022fa:	f006 fe2d 	bl	8008f58 <lcd_print>
 80022fe:	e008      	b.n	8002312 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002300:	4b44      	ldr	r3, [pc, #272]	@ (8002414 <menu+0xe9c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d104      	bne.n	8002312 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002308:	4a44      	ldr	r2, [pc, #272]	@ (800241c <menu+0xea4>)
 800230a:	2101      	movs	r1, #1
 800230c:	2002      	movs	r0, #2
 800230e:	f006 fe23 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002312:	2102      	movs	r1, #2
 8002314:	4838      	ldr	r0, [pc, #224]	@ (80023f8 <menu+0xe80>)
 8002316:	f008 f949 	bl	800a5ac <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d115      	bne.n	800234c <menu+0xdd4>
 8002320:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <menu+0xe84>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800232e:	4b39      	ldr	r3, [pc, #228]	@ (8002414 <menu+0xe9c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <menu+0xe9c>)
 8002338:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <menu+0xe9c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d902      	bls.n	8002348 <menu+0xdd0>
				kapiAcTipi = 0;
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <menu+0xe9c>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002348:	f001 fe5c 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800234c:	2104      	movs	r1, #4
 800234e:	482a      	ldr	r0, [pc, #168]	@ (80023f8 <menu+0xe80>)
 8002350:	f008 f92c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d115      	bne.n	8002386 <menu+0xe0e>
 800235a:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <menu+0xe84>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <menu+0xe9c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <menu+0xe9c>)
 8002372:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002374:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <menu+0xe9c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <menu+0xe0a>
		   		kapiAcTipi = 1;
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <menu+0xe9c>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002382:	f001 fe3f 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002386:	2108      	movs	r1, #8
 8002388:	481b      	ldr	r0, [pc, #108]	@ (80023f8 <menu+0xe80>)
 800238a:	f008 f90f 	bl	800a5ac <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10e      	bne.n	80023b2 <menu+0xe3a>
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <menu+0xe84>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <menu+0xe9c>)
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <menu+0xe88>)
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80023ac:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <menu+0xe90>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <menu+0xe94>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	f040 8092 	bne.w	80024e0 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80023bc:	4a18      	ldr	r2, [pc, #96]	@ (8002420 <menu+0xea8>)
 80023be:	2101      	movs	r1, #1
 80023c0:	2001      	movs	r0, #1
 80023c2:	f006 fdc9 	bl	8008f58 <lcd_print>

		if(kapi1Tip == 0) {
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <menu+0xeac>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80023ce:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <menu+0xeb0>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f006 fdc0 	bl	8008f58 <lcd_print>
 80023d8:	e033      	b.n	8002442 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <menu+0xeac>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d126      	bne.n	8002430 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <menu+0xeb4>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f006 fdb6 	bl	8008f58 <lcd_print>
 80023ec:	e029      	b.n	8002442 <menu+0xeca>
 80023ee:	bf00      	nop
 80023f0:	200010c4 	.word	0x200010c4
 80023f4:	2000143c 	.word	0x2000143c
 80023f8:	40010800 	.word	0x40010800
 80023fc:	200010ec 	.word	0x200010ec
 8002400:	20000fec 	.word	0x20000fec
 8002404:	200010c2 	.word	0x200010c2
 8002408:	200010e9 	.word	0x200010e9
 800240c:	200010bc 	.word	0x200010bc
 8002410:	20001450 	.word	0x20001450
 8002414:	200010c8 	.word	0x200010c8
 8002418:	20001464 	.word	0x20001464
 800241c:	20001478 	.word	0x20001478
 8002420:	2000148c 	.word	0x2000148c
 8002424:	200010c5 	.word	0x200010c5
 8002428:	20000100 	.word	0x20000100
 800242c:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002430:	4b73      	ldr	r3, [pc, #460]	@ (8002600 <menu+0x1088>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d104      	bne.n	8002442 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002438:	4a72      	ldr	r2, [pc, #456]	@ (8002604 <menu+0x108c>)
 800243a:	2101      	movs	r1, #1
 800243c:	2002      	movs	r0, #2
 800243e:	f006 fd8b 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002442:	2102      	movs	r1, #2
 8002444:	4870      	ldr	r0, [pc, #448]	@ (8002608 <menu+0x1090>)
 8002446:	f008 f8b1 	bl	800a5ac <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d115      	bne.n	800247c <menu+0xf04>
 8002450:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <menu+0x1094>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800245e:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <menu+0x1088>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <menu+0x1088>)
 8002468:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800246a:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <menu+0x1088>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <menu+0xf00>
				kapi1Tip = 0;
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <menu+0x1088>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002478:	f001 fdc4 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800247c:	2104      	movs	r1, #4
 800247e:	4862      	ldr	r0, [pc, #392]	@ (8002608 <menu+0x1090>)
 8002480:	f008 f894 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d115      	bne.n	80024b6 <menu+0xf3e>
 800248a:	4b60      	ldr	r3, [pc, #384]	@ (800260c <menu+0x1094>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f083 0301 	eor.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00e      	beq.n	80024b6 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002498:	4b59      	ldr	r3, [pc, #356]	@ (8002600 <menu+0x1088>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <menu+0x1088>)
 80024a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024a4:	4b56      	ldr	r3, [pc, #344]	@ (8002600 <menu+0x1088>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d902      	bls.n	80024b2 <menu+0xf3a>
		   		kapi1Tip = 2;
 80024ac:	4b54      	ldr	r3, [pc, #336]	@ (8002600 <menu+0x1088>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024b2:	f001 fda7 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b6:	2108      	movs	r1, #8
 80024b8:	4853      	ldr	r0, [pc, #332]	@ (8002608 <menu+0x1090>)
 80024ba:	f008 f877 	bl	800a5ac <HAL_GPIO_ReadPin>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <menu+0xf68>
 80024c4:	4b51      	ldr	r3, [pc, #324]	@ (800260c <menu+0x1094>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80024d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <menu+0x1088>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002610 <menu+0x1098>)
 80024d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024da:	4b4e      	ldr	r3, [pc, #312]	@ (8002614 <menu+0x109c>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002618 <menu+0x10a0>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b0a      	cmp	r3, #10
 80024e6:	d16c      	bne.n	80025c2 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80024e8:	4a4c      	ldr	r2, [pc, #304]	@ (800261c <menu+0x10a4>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2001      	movs	r0, #1
 80024ee:	f006 fd33 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <menu+0x10a8>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	2002      	movs	r0, #2
 80024f8:	f006 fd2e 	bl	8008f58 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <menu+0x10ac>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	220a      	movs	r2, #10
 8002502:	4949      	ldr	r1, [pc, #292]	@ (8002628 <menu+0x10b0>)
 8002504:	4618      	mov	r0, r3
 8002506:	f00b f87d 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 800250a:	4a47      	ldr	r2, [pc, #284]	@ (8002628 <menu+0x10b0>)
 800250c:	2110      	movs	r1, #16
 800250e:	2002      	movs	r0, #2
 8002510:	f006 fd22 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002514:	2102      	movs	r1, #2
 8002516:	483c      	ldr	r0, [pc, #240]	@ (8002608 <menu+0x1090>)
 8002518:	f008 f848 	bl	800a5ac <HAL_GPIO_ReadPin>
 800251c:	4603      	mov	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d119      	bne.n	8002556 <menu+0xfde>
 8002522:	4b3a      	ldr	r3, [pc, #232]	@ (800260c <menu+0x1094>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <menu+0xfde>
 8002530:	4b33      	ldr	r3, [pc, #204]	@ (8002600 <menu+0x1088>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10e      	bne.n	8002556 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002538:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <menu+0x10ac>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <menu+0x10ac>)
 8002542:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002544:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <menu+0x10ac>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d902      	bls.n	8002552 <menu+0xfda>
				kapi1AcSure = 0;
 800254c:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <menu+0x10ac>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002552:	f001 fd57 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002556:	2104      	movs	r1, #4
 8002558:	482b      	ldr	r0, [pc, #172]	@ (8002608 <menu+0x1090>)
 800255a:	f008 f827 	bl	800a5ac <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d119      	bne.n	8002598 <menu+0x1020>
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <menu+0x1094>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <menu+0x1020>
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <menu+0x1088>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <menu+0x10ac>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <menu+0x10ac>)
 8002584:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <menu+0x10ac>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <menu+0x101c>
		   		kapi1AcSure = 5;
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <menu+0x10ac>)
 8002590:	2205      	movs	r2, #5
 8002592:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002594:	f001 fd36 	bl	8004004 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002598:	2108      	movs	r1, #8
 800259a:	481b      	ldr	r0, [pc, #108]	@ (8002608 <menu+0x1090>)
 800259c:	f008 f806 	bl	800a5ac <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10d      	bne.n	80025c2 <menu+0x104a>
 80025a6:	4b19      	ldr	r3, [pc, #100]	@ (800260c <menu+0x1094>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <menu+0x10ac>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <menu+0x1098>)
 80025ba:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025bc:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <menu+0x109c>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <menu+0x10a0>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b0b      	cmp	r3, #11
 80025c8:	f040 8090 	bne.w	80026ec <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80025cc:	4a17      	ldr	r2, [pc, #92]	@ (800262c <menu+0x10b4>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	2001      	movs	r0, #1
 80025d2:	f006 fcc1 	bl	8008f58 <lcd_print>

		if(kapi2Tip == 0) {
 80025d6:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <menu+0x10b8>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80025de:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <menu+0x10bc>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	2002      	movs	r0, #2
 80025e4:	f006 fcb8 	bl	8008f58 <lcd_print>
 80025e8:	e031      	b.n	800264e <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <menu+0x10b8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d124      	bne.n	800263c <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80025f2:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <menu+0x10c0>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	2002      	movs	r0, #2
 80025f8:	f006 fcae 	bl	8008f58 <lcd_print>
 80025fc:	e027      	b.n	800264e <menu+0x10d6>
 80025fe:	bf00      	nop
 8002600:	200010c5 	.word	0x200010c5
 8002604:	20000114 	.word	0x20000114
 8002608:	40010800 	.word	0x40010800
 800260c:	200010ec 	.word	0x200010ec
 8002610:	20000fec 	.word	0x20000fec
 8002614:	200010e9 	.word	0x200010e9
 8002618:	200010bc 	.word	0x200010bc
 800261c:	200014b4 	.word	0x200014b4
 8002620:	200014c8 	.word	0x200014c8
 8002624:	200010d5 	.word	0x200010d5
 8002628:	2000105c 	.word	0x2000105c
 800262c:	200014dc 	.word	0x200014dc
 8002630:	200010c6 	.word	0x200010c6
 8002634:	20000100 	.word	0x20000100
 8002638:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 800263c:	4b73      	ldr	r3, [pc, #460]	@ (800280c <menu+0x1294>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d104      	bne.n	800264e <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002644:	4a72      	ldr	r2, [pc, #456]	@ (8002810 <menu+0x1298>)
 8002646:	2101      	movs	r1, #1
 8002648:	2002      	movs	r0, #2
 800264a:	f006 fc85 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800264e:	2102      	movs	r1, #2
 8002650:	4870      	ldr	r0, [pc, #448]	@ (8002814 <menu+0x129c>)
 8002652:	f007 ffab 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002656:	4603      	mov	r3, r0
 8002658:	2b01      	cmp	r3, #1
 800265a:	d115      	bne.n	8002688 <menu+0x1110>
 800265c:	4b6e      	ldr	r3, [pc, #440]	@ (8002818 <menu+0x12a0>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00e      	beq.n	8002688 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800266a:	4b68      	ldr	r3, [pc, #416]	@ (800280c <menu+0x1294>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b66      	ldr	r3, [pc, #408]	@ (800280c <menu+0x1294>)
 8002674:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002676:	4b65      	ldr	r3, [pc, #404]	@ (800280c <menu+0x1294>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <menu+0x110c>
				kapi2Tip = 0;
 800267e:	4b63      	ldr	r3, [pc, #396]	@ (800280c <menu+0x1294>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002684:	f001 fcbe 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002688:	2104      	movs	r1, #4
 800268a:	4862      	ldr	r0, [pc, #392]	@ (8002814 <menu+0x129c>)
 800268c:	f007 ff8e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d115      	bne.n	80026c2 <menu+0x114a>
 8002696:	4b60      	ldr	r3, [pc, #384]	@ (8002818 <menu+0x12a0>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80026a4:	4b59      	ldr	r3, [pc, #356]	@ (800280c <menu+0x1294>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b57      	ldr	r3, [pc, #348]	@ (800280c <menu+0x1294>)
 80026ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026b0:	4b56      	ldr	r3, [pc, #344]	@ (800280c <menu+0x1294>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d902      	bls.n	80026be <menu+0x1146>
		   		kapi2Tip = 2;
 80026b8:	4b54      	ldr	r3, [pc, #336]	@ (800280c <menu+0x1294>)
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026be:	f001 fca1 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c2:	2108      	movs	r1, #8
 80026c4:	4853      	ldr	r0, [pc, #332]	@ (8002814 <menu+0x129c>)
 80026c6:	f007 ff71 	bl	800a5ac <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10d      	bne.n	80026ec <menu+0x1174>
 80026d0:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <menu+0x12a0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80026de:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <menu+0x1294>)
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	4b4e      	ldr	r3, [pc, #312]	@ (800281c <menu+0x12a4>)
 80026e4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80026e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <menu+0x12a8>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80026ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <menu+0x12ac>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d16c      	bne.n	80027ce <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80026f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002828 <menu+0x12b0>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	2001      	movs	r0, #1
 80026fa:	f006 fc2d 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80026fe:	4a4b      	ldr	r2, [pc, #300]	@ (800282c <menu+0x12b4>)
 8002700:	2101      	movs	r1, #1
 8002702:	2002      	movs	r0, #2
 8002704:	f006 fc28 	bl	8008f58 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002708:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <menu+0x12b8>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	220a      	movs	r2, #10
 800270e:	4949      	ldr	r1, [pc, #292]	@ (8002834 <menu+0x12bc>)
 8002710:	4618      	mov	r0, r3
 8002712:	f00a ff77 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 8002716:	4a47      	ldr	r2, [pc, #284]	@ (8002834 <menu+0x12bc>)
 8002718:	2110      	movs	r1, #16
 800271a:	2002      	movs	r0, #2
 800271c:	f006 fc1c 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002720:	2102      	movs	r1, #2
 8002722:	483c      	ldr	r0, [pc, #240]	@ (8002814 <menu+0x129c>)
 8002724:	f007 ff42 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d119      	bne.n	8002762 <menu+0x11ea>
 800272e:	4b3a      	ldr	r3, [pc, #232]	@ (8002818 <menu+0x12a0>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	f083 0301 	eor.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <menu+0x11ea>
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <menu+0x1294>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10e      	bne.n	8002762 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002744:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <menu+0x12b8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <menu+0x12b8>)
 800274e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002750:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <menu+0x12b8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d902      	bls.n	800275e <menu+0x11e6>
				kapi2AcSure = 0;
 8002758:	4b35      	ldr	r3, [pc, #212]	@ (8002830 <menu+0x12b8>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800275e:	f001 fc51 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002762:	2104      	movs	r1, #4
 8002764:	482b      	ldr	r0, [pc, #172]	@ (8002814 <menu+0x129c>)
 8002766:	f007 ff21 	bl	800a5ac <HAL_GPIO_ReadPin>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	d119      	bne.n	80027a4 <menu+0x122c>
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <menu+0x12a0>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <menu+0x122c>
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <menu+0x1294>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10e      	bne.n	80027a4 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <menu+0x12b8>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <menu+0x12b8>)
 8002790:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <menu+0x12b8>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <menu+0x1228>
		   		kapi2AcSure = 5;
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <menu+0x12b8>)
 800279c:	2205      	movs	r2, #5
 800279e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a0:	f001 fc30 	bl	8004004 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a4:	2108      	movs	r1, #8
 80027a6:	481b      	ldr	r0, [pc, #108]	@ (8002814 <menu+0x129c>)
 80027a8:	f007 ff00 	bl	800a5ac <HAL_GPIO_ReadPin>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <menu+0x1256>
 80027b2:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <menu+0x12a0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <menu+0x12b8>)
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <menu+0x12a4>)
 80027c6:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <menu+0x12a8>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <menu+0x12ac>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b0d      	cmp	r3, #13
 80027d4:	f040 8090 	bne.w	80028f8 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <menu+0x12c0>)
 80027da:	2101      	movs	r1, #1
 80027dc:	2001      	movs	r0, #1
 80027de:	f006 fbbb 	bl	8008f58 <lcd_print>

		if(kapitablaTip == 0) {
 80027e2:	4b16      	ldr	r3, [pc, #88]	@ (800283c <menu+0x12c4>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80027ea:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <menu+0x12c8>)
 80027ec:	2101      	movs	r1, #1
 80027ee:	2002      	movs	r0, #2
 80027f0:	f006 fbb2 	bl	8008f58 <lcd_print>
 80027f4:	e031      	b.n	800285a <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <menu+0x12c4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d124      	bne.n	8002848 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80027fe:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <menu+0x12cc>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f006 fba8 	bl	8008f58 <lcd_print>
 8002808:	e027      	b.n	800285a <menu+0x12e2>
 800280a:	bf00      	nop
 800280c:	200010c6 	.word	0x200010c6
 8002810:	20000114 	.word	0x20000114
 8002814:	40010800 	.word	0x40010800
 8002818:	200010ec 	.word	0x200010ec
 800281c:	20000fec 	.word	0x20000fec
 8002820:	200010e9 	.word	0x200010e9
 8002824:	200010bc 	.word	0x200010bc
 8002828:	200014f0 	.word	0x200014f0
 800282c:	200014c8 	.word	0x200014c8
 8002830:	200010d6 	.word	0x200010d6
 8002834:	2000105c 	.word	0x2000105c
 8002838:	20001504 	.word	0x20001504
 800283c:	200010c7 	.word	0x200010c7
 8002840:	20000100 	.word	0x20000100
 8002844:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 8002848:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <menu+0x13d0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d104      	bne.n	800285a <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002850:	4a3e      	ldr	r2, [pc, #248]	@ (800294c <menu+0x13d4>)
 8002852:	2101      	movs	r1, #1
 8002854:	2002      	movs	r0, #2
 8002856:	f006 fb7f 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800285a:	2102      	movs	r1, #2
 800285c:	483c      	ldr	r0, [pc, #240]	@ (8002950 <menu+0x13d8>)
 800285e:	f007 fea5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d115      	bne.n	8002894 <menu+0x131c>
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <menu+0x13dc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	f083 0301 	eor.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00e      	beq.n	8002894 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <menu+0x13d0>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <menu+0x13d0>)
 8002880:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <menu+0x13d0>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <menu+0x1318>
				kapitablaTip = 0;
 800288a:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <menu+0x13d0>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002890:	f001 fbb8 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002894:	2104      	movs	r1, #4
 8002896:	482e      	ldr	r0, [pc, #184]	@ (8002950 <menu+0x13d8>)
 8002898:	f007 fe88 	bl	800a5ac <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d115      	bne.n	80028ce <menu+0x1356>
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <menu+0x13dc>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	f083 0301 	eor.w	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <menu+0x13d0>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <menu+0x13d0>)
 80028ba:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <menu+0x13d0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d902      	bls.n	80028ca <menu+0x1352>
		   		kapitablaTip = 2;
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <menu+0x13d0>)
 80028c6:	2202      	movs	r2, #2
 80028c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ca:	f001 fb9b 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ce:	2108      	movs	r1, #8
 80028d0:	481f      	ldr	r0, [pc, #124]	@ (8002950 <menu+0x13d8>)
 80028d2:	f007 fe6b 	bl	800a5ac <HAL_GPIO_ReadPin>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10d      	bne.n	80028f8 <menu+0x1380>
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <menu+0x13dc>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d006      	beq.n	80028f8 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80028ea:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <menu+0x13d0>)
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <menu+0x13e0>)
 80028f0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <menu+0x13e4>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <menu+0x13e8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b0e      	cmp	r3, #14
 80028fe:	f040 80a3 	bne.w	8002a48 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002902:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <menu+0x13ec>)
 8002904:	2101      	movs	r1, #1
 8002906:	2001      	movs	r0, #1
 8002908:	f006 fb26 	bl	8008f58 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <menu+0x13f0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002914:	4a15      	ldr	r2, [pc, #84]	@ (800296c <menu+0x13f4>)
 8002916:	2101      	movs	r1, #1
 8002918:	2002      	movs	r0, #2
 800291a:	f006 fb1d 	bl	8008f58 <lcd_print>
 800291e:	e034      	b.n	800298a <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <menu+0x13f0>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002928:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <menu+0x13f8>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f006 fb13 	bl	8008f58 <lcd_print>
 8002932:	e02a      	b.n	800298a <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <menu+0x13f0>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d11d      	bne.n	8002978 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <menu+0x13fc>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f006 fb09 	bl	8008f58 <lcd_print>
 8002946:	e020      	b.n	800298a <menu+0x1412>
 8002948:	200010c7 	.word	0x200010c7
 800294c:	20000114 	.word	0x20000114
 8002950:	40010800 	.word	0x40010800
 8002954:	200010ec 	.word	0x200010ec
 8002958:	20000fec 	.word	0x20000fec
 800295c:	200010e9 	.word	0x200010e9
 8002960:	200010bc 	.word	0x200010bc
 8002964:	20001518 	.word	0x20001518
 8002968:	200010c9 	.word	0x200010c9
 800296c:	2000152c 	.word	0x2000152c
 8002970:	20001540 	.word	0x20001540
 8002974:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 8002978:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <menu+0x15dc>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d104      	bne.n	800298a <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002980:	4a75      	ldr	r2, [pc, #468]	@ (8002b58 <menu+0x15e0>)
 8002982:	2101      	movs	r1, #1
 8002984:	2002      	movs	r0, #2
 8002986:	f006 fae7 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298a:	2102      	movs	r1, #2
 800298c:	4873      	ldr	r0, [pc, #460]	@ (8002b5c <menu+0x15e4>)
 800298e:	f007 fe0d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d115      	bne.n	80029c4 <menu+0x144c>
 8002998:	4b71      	ldr	r3, [pc, #452]	@ (8002b60 <menu+0x15e8>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00e      	beq.n	80029c4 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b54 <menu+0x15dc>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b69      	ldr	r3, [pc, #420]	@ (8002b54 <menu+0x15dc>)
 80029b0:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80029b2:	4b68      	ldr	r3, [pc, #416]	@ (8002b54 <menu+0x15dc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80029ba:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <menu+0x15dc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c0:	f001 fb20 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c4:	2104      	movs	r1, #4
 80029c6:	4865      	ldr	r0, [pc, #404]	@ (8002b5c <menu+0x15e4>)
 80029c8:	f007 fdf0 	bl	800a5ac <HAL_GPIO_ReadPin>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d115      	bne.n	80029fe <menu+0x1486>
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <menu+0x15e8>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80029e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b54 <menu+0x15dc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b54 <menu+0x15dc>)
 80029ea:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80029ec:	4b59      	ldr	r3, [pc, #356]	@ (8002b54 <menu+0x15dc>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d902      	bls.n	80029fa <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80029f4:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <menu+0x15dc>)
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fa:	f001 fb03 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fe:	2108      	movs	r1, #8
 8002a00:	4856      	ldr	r0, [pc, #344]	@ (8002b5c <menu+0x15e4>)
 8002a02:	f007 fdd3 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d11d      	bne.n	8002a48 <menu+0x14d0>
 8002a0c:	4b54      	ldr	r3, [pc, #336]	@ (8002b60 <menu+0x15e8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b54 <menu+0x15dc>)
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b51      	ldr	r3, [pc, #324]	@ (8002b64 <menu+0x15ec>)
 8002a20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <menu+0x15dc>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <menu+0x14bc>
 8002a2c:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <menu+0x15dc>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d106      	bne.n	8002a42 <menu+0x14ca>
				altLimit = 1;
 8002a34:	4b4c      	ldr	r3, [pc, #304]	@ (8002b68 <menu+0x15f0>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <menu+0x15f0>)
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	4b49      	ldr	r3, [pc, #292]	@ (8002b64 <menu+0x15ec>)
 8002a40:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002a42:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <menu+0x15f4>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002a48:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <menu+0x15f8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d16c      	bne.n	8002b2a <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002a50:	4a48      	ldr	r2, [pc, #288]	@ (8002b74 <menu+0x15fc>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2001      	movs	r0, #1
 8002a56:	f006 fa7f 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002a5a:	4a47      	ldr	r2, [pc, #284]	@ (8002b78 <menu+0x1600>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f006 fa7a 	bl	8008f58 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002a64:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <menu+0x1604>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	220a      	movs	r2, #10
 8002a6a:	4945      	ldr	r1, [pc, #276]	@ (8002b80 <menu+0x1608>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00a fdc9 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 8002a72:	4a43      	ldr	r2, [pc, #268]	@ (8002b80 <menu+0x1608>)
 8002a74:	2110      	movs	r1, #16
 8002a76:	2002      	movs	r0, #2
 8002a78:	f006 fa6e 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4837      	ldr	r0, [pc, #220]	@ (8002b5c <menu+0x15e4>)
 8002a80:	f007 fd94 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d119      	bne.n	8002abe <menu+0x1546>
 8002a8a:	4b35      	ldr	r3, [pc, #212]	@ (8002b60 <menu+0x15e8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <menu+0x1546>
 8002a98:	4b3a      	ldr	r3, [pc, #232]	@ (8002b84 <menu+0x160c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <menu+0x1604>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b34      	ldr	r3, [pc, #208]	@ (8002b7c <menu+0x1604>)
 8002aaa:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002aac:	4b33      	ldr	r3, [pc, #204]	@ (8002b7c <menu+0x1604>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d902      	bls.n	8002aba <menu+0x1542>
				kapiTablaAcSure = 0;
 8002ab4:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <menu+0x1604>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002aba:	f001 faa3 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002abe:	2104      	movs	r1, #4
 8002ac0:	4826      	ldr	r0, [pc, #152]	@ (8002b5c <menu+0x15e4>)
 8002ac2:	f007 fd73 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <menu+0x1588>
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <menu+0x15e8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <menu+0x1588>
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <menu+0x160c>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <menu+0x1604>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <menu+0x1604>)
 8002aec:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <menu+0x1604>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <menu+0x1604>)
 8002af8:	2205      	movs	r2, #5
 8002afa:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002afc:	f001 fa82 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b00:	2108      	movs	r1, #8
 8002b02:	4816      	ldr	r0, [pc, #88]	@ (8002b5c <menu+0x15e4>)
 8002b04:	f007 fd52 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10d      	bne.n	8002b2a <menu+0x15b2>
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <menu+0x15e8>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f083 0301 	eor.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <menu+0x1604>)
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <menu+0x15ec>)
 8002b22:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <menu+0x15f4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <menu+0x15f8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	f040 8086 	bne.w	8002c40 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b34:	4a14      	ldr	r2, [pc, #80]	@ (8002b88 <menu+0x1610>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f006 fa0d 	bl	8008f58 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002b3e:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <menu+0x1614>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d124      	bne.n	8002b90 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002b46:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <menu+0x15e0>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2002      	movs	r0, #2
 8002b4c:	f006 fa04 	bl	8008f58 <lcd_print>
 8002b50:	e027      	b.n	8002ba2 <menu+0x162a>
 8002b52:	bf00      	nop
 8002b54:	200010c9 	.word	0x200010c9
 8002b58:	2000139c 	.word	0x2000139c
 8002b5c:	40010800 	.word	0x40010800
 8002b60:	200010ec 	.word	0x200010ec
 8002b64:	20000fec 	.word	0x20000fec
 8002b68:	200010c2 	.word	0x200010c2
 8002b6c:	200010e9 	.word	0x200010e9
 8002b70:	200010bc 	.word	0x200010bc
 8002b74:	20001568 	.word	0x20001568
 8002b78:	200014c8 	.word	0x200014c8
 8002b7c:	200010d7 	.word	0x200010d7
 8002b80:	2000105c 	.word	0x2000105c
 8002b84:	200010c7 	.word	0x200010c7
 8002b88:	2000157c 	.word	0x2000157c
 8002b8c:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002b90:	4b84      	ldr	r3, [pc, #528]	@ (8002da4 <menu+0x182c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d104      	bne.n	8002ba2 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002b98:	4a83      	ldr	r2, [pc, #524]	@ (8002da8 <menu+0x1830>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f006 f9db 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4881      	ldr	r0, [pc, #516]	@ (8002dac <menu+0x1834>)
 8002ba6:	f007 fd01 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d115      	bne.n	8002bdc <menu+0x1664>
 8002bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8002db0 <menu+0x1838>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00e      	beq.n	8002bdc <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002bbe:	4b79      	ldr	r3, [pc, #484]	@ (8002da4 <menu+0x182c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b77      	ldr	r3, [pc, #476]	@ (8002da4 <menu+0x182c>)
 8002bc8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002bca:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <menu+0x182c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d902      	bls.n	8002bd8 <menu+0x1660>
				yukariYavasLimit = 0;
 8002bd2:	4b74      	ldr	r3, [pc, #464]	@ (8002da4 <menu+0x182c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bd8:	f001 fa14 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bdc:	2104      	movs	r1, #4
 8002bde:	4873      	ldr	r0, [pc, #460]	@ (8002dac <menu+0x1834>)
 8002be0:	f007 fce4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d115      	bne.n	8002c16 <menu+0x169e>
 8002bea:	4b71      	ldr	r3, [pc, #452]	@ (8002db0 <menu+0x1838>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	f083 0301 	eor.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <menu+0x182c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <menu+0x182c>)
 8002c02:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002c04:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <menu+0x182c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <menu+0x182c>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c12:	f001 f9f7 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c16:	2108      	movs	r1, #8
 8002c18:	4864      	ldr	r0, [pc, #400]	@ (8002dac <menu+0x1834>)
 8002c1a:	f007 fcc7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10d      	bne.n	8002c40 <menu+0x16c8>
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <menu+0x1838>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002c32:	4b5c      	ldr	r3, [pc, #368]	@ (8002da4 <menu+0x182c>)
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	4b5f      	ldr	r3, [pc, #380]	@ (8002db4 <menu+0x183c>)
 8002c38:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002db8 <menu+0x1840>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002c40:	4b5e      	ldr	r3, [pc, #376]	@ (8002dbc <menu+0x1844>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b11      	cmp	r3, #17
 8002c46:	f040 808b 	bne.w	8002d60 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc0 <menu+0x1848>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f006 f982 	bl	8008f58 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002c54:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc4 <menu+0x184c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d105      	bne.n	8002c68 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc8 <menu+0x1850>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f006 f979 	bl	8008f58 <lcd_print>
 8002c66:	e012      	b.n	8002c8e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002c68:	4b56      	ldr	r3, [pc, #344]	@ (8002dc4 <menu+0x184c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002c70:	4a56      	ldr	r2, [pc, #344]	@ (8002dcc <menu+0x1854>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	2002      	movs	r0, #2
 8002c76:	f006 f96f 	bl	8008f58 <lcd_print>
 8002c7a:	e008      	b.n	8002c8e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002c7c:	4b51      	ldr	r3, [pc, #324]	@ (8002dc4 <menu+0x184c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002c84:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <menu+0x1858>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f006 f965 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4846      	ldr	r0, [pc, #280]	@ (8002dac <menu+0x1834>)
 8002c92:	f007 fc8b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d115      	bne.n	8002cc8 <menu+0x1750>
 8002c9c:	4b44      	ldr	r3, [pc, #272]	@ (8002db0 <menu+0x1838>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f083 0301 	eor.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002caa:	4b46      	ldr	r3, [pc, #280]	@ (8002dc4 <menu+0x184c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b44      	ldr	r3, [pc, #272]	@ (8002dc4 <menu+0x184c>)
 8002cb4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002cb6:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <menu+0x184c>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d902      	bls.n	8002cc4 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002cbe:	4b41      	ldr	r3, [pc, #260]	@ (8002dc4 <menu+0x184c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cc4:	f001 f99e 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cc8:	2104      	movs	r1, #4
 8002cca:	4838      	ldr	r0, [pc, #224]	@ (8002dac <menu+0x1834>)
 8002ccc:	f007 fc6e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d115      	bne.n	8002d02 <menu+0x178a>
 8002cd6:	4b36      	ldr	r3, [pc, #216]	@ (8002db0 <menu+0x1838>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002ce4:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <menu+0x184c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	4b35      	ldr	r3, [pc, #212]	@ (8002dc4 <menu+0x184c>)
 8002cee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002cf0:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <menu+0x184c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d902      	bls.n	8002cfe <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	@ (8002dc4 <menu+0x184c>)
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cfe:	f001 f981 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d02:	2108      	movs	r1, #8
 8002d04:	4829      	ldr	r0, [pc, #164]	@ (8002dac <menu+0x1834>)
 8002d06:	f007 fc51 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d127      	bne.n	8002d60 <menu+0x17e8>
 8002d10:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <menu+0x1838>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d020      	beq.n	8002d60 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002d1e:	4b29      	ldr	r3, [pc, #164]	@ (8002dc4 <menu+0x184c>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <menu+0x183c>)
 8002d24:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002d26:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <menu+0x184c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d003      	beq.n	8002d36 <menu+0x17be>
 8002d2e:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <menu+0x184c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d106      	bne.n	8002d44 <menu+0x17cc>
				calismaSekli = 0;
 8002d36:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <menu+0x185c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <menu+0x185c>)
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <menu+0x183c>)
 8002d42:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002d44:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <menu+0x184c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d106      	bne.n	8002d5a <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <menu+0x1860>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <menu+0x1860>)
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <menu+0x183c>)
 8002d58:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <menu+0x1840>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002d60:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <menu+0x1844>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b12      	cmp	r3, #18
 8002d66:	f040 8097 	bne.w	8002e98 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <menu+0x184c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d105      	bne.n	8002d7e <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002d72:	4a1a      	ldr	r2, [pc, #104]	@ (8002ddc <menu+0x1864>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	2001      	movs	r0, #1
 8002d78:	f006 f8ee 	bl	8008f58 <lcd_print>
 8002d7c:	e008      	b.n	8002d90 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002d7e:	4b11      	ldr	r3, [pc, #68]	@ (8002dc4 <menu+0x184c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002d86:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <menu+0x1868>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f006 f8e4 	bl	8008f58 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <menu+0x186c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d127      	bne.n	8002de8 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <menu+0x1858>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	f006 f8db 	bl	8008f58 <lcd_print>
 8002da2:	e02a      	b.n	8002dfa <menu+0x1882>
 8002da4:	200010ca 	.word	0x200010ca
 8002da8:	200013b0 	.word	0x200013b0
 8002dac:	40010800 	.word	0x40010800
 8002db0:	200010ec 	.word	0x200010ec
 8002db4:	20000fec 	.word	0x20000fec
 8002db8:	200010e9 	.word	0x200010e9
 8002dbc:	200010bc 	.word	0x200010bc
 8002dc0:	20001590 	.word	0x20001590
 8002dc4:	200010cb 	.word	0x200010cb
 8002dc8:	200015a4 	.word	0x200015a4
 8002dcc:	200015b8 	.word	0x200015b8
 8002dd0:	2000139c 	.word	0x2000139c
 8002dd4:	200010bd 	.word	0x200010bd
 8002dd8:	200010ce 	.word	0x200010ce
 8002ddc:	200015cc 	.word	0x200015cc
 8002de0:	200015e0 	.word	0x200015e0
 8002de4:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <menu+0x1a58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d104      	bne.n	8002dfa <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002df0:	4a78      	ldr	r2, [pc, #480]	@ (8002fd4 <menu+0x1a5c>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	2002      	movs	r0, #2
 8002df6:	f006 f8af 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4876      	ldr	r0, [pc, #472]	@ (8002fd8 <menu+0x1a60>)
 8002dfe:	f007 fbd5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <menu+0x18bc>
 8002e08:	4b74      	ldr	r3, [pc, #464]	@ (8002fdc <menu+0x1a64>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002e16:	4b6e      	ldr	r3, [pc, #440]	@ (8002fd0 <menu+0x1a58>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd0 <menu+0x1a58>)
 8002e20:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002e22:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd0 <menu+0x1a58>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d902      	bls.n	8002e30 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002e2a:	4b69      	ldr	r3, [pc, #420]	@ (8002fd0 <menu+0x1a58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e30:	f001 f8e8 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2104      	movs	r1, #4
 8002e36:	4868      	ldr	r0, [pc, #416]	@ (8002fd8 <menu+0x1a60>)
 8002e38:	f007 fbb8 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d115      	bne.n	8002e6e <menu+0x18f6>
 8002e42:	4b66      	ldr	r3, [pc, #408]	@ (8002fdc <menu+0x1a64>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002e50:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd0 <menu+0x1a58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd0 <menu+0x1a58>)
 8002e5a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd0 <menu+0x1a58>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002e64:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd0 <menu+0x1a58>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e6a:	f001 f8cb 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6e:	2108      	movs	r1, #8
 8002e70:	4859      	ldr	r0, [pc, #356]	@ (8002fd8 <menu+0x1a60>)
 8002e72:	f007 fb9b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10d      	bne.n	8002e98 <menu+0x1920>
 8002e7c:	4b57      	ldr	r3, [pc, #348]	@ (8002fdc <menu+0x1a64>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002e8a:	4b51      	ldr	r3, [pc, #324]	@ (8002fd0 <menu+0x1a58>)
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	4b54      	ldr	r3, [pc, #336]	@ (8002fe0 <menu+0x1a68>)
 8002e90:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002e92:	4b54      	ldr	r3, [pc, #336]	@ (8002fe4 <menu+0x1a6c>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002e98:	4b53      	ldr	r3, [pc, #332]	@ (8002fe8 <menu+0x1a70>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b13      	cmp	r3, #19
 8002e9e:	d174      	bne.n	8002f8a <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002ea0:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <menu+0x1a74>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d105      	bne.n	8002eb4 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002ea8:	4a51      	ldr	r2, [pc, #324]	@ (8002ff0 <menu+0x1a78>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2001      	movs	r0, #1
 8002eae:	f006 f853 	bl	8008f58 <lcd_print>
 8002eb2:	e008      	b.n	8002ec6 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002fec <menu+0x1a74>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d104      	bne.n	8002ec6 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff4 <menu+0x1a7c>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f006 f849 	bl	8008f58 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff8 <menu+0x1a80>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002ece:	4a4b      	ldr	r2, [pc, #300]	@ (8002ffc <menu+0x1a84>)
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f006 f840 	bl	8008f58 <lcd_print>
 8002ed8:	e008      	b.n	8002eec <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <menu+0x1a80>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d104      	bne.n	8002eec <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <menu+0x1a5c>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f006 f836 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eec:	2102      	movs	r1, #2
 8002eee:	483a      	ldr	r0, [pc, #232]	@ (8002fd8 <menu+0x1a60>)
 8002ef0:	f007 fb5c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <menu+0x19ae>
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <menu+0x1a64>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00e      	beq.n	8002f26 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002f08:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff8 <menu+0x1a80>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <menu+0x1a80>)
 8002f12:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002f14:	4b38      	ldr	r3, [pc, #224]	@ (8002ff8 <menu+0x1a80>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d902      	bls.n	8002f22 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002f1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <menu+0x1a80>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f22:	f001 f86f 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f26:	2104      	movs	r1, #4
 8002f28:	482b      	ldr	r0, [pc, #172]	@ (8002fd8 <menu+0x1a60>)
 8002f2a:	f007 fb3f 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d115      	bne.n	8002f60 <menu+0x19e8>
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <menu+0x1a64>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f083 0301 	eor.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00e      	beq.n	8002f60 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <menu+0x1a80>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff8 <menu+0x1a80>)
 8002f4c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <menu+0x1a80>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <menu+0x1a80>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f5c:	f001 f852 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f60:	2108      	movs	r1, #8
 8002f62:	481d      	ldr	r0, [pc, #116]	@ (8002fd8 <menu+0x1a60>)
 8002f64:	f007 fb22 	bl	800a5ac <HAL_GPIO_ReadPin>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10d      	bne.n	8002f8a <menu+0x1a12>
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <menu+0x1a64>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	f083 0301 	eor.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff8 <menu+0x1a80>)
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <menu+0x1a68>)
 8002f82:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <menu+0x1a6c>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002f8a:	4b17      	ldr	r3, [pc, #92]	@ (8002fe8 <menu+0x1a70>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b14      	cmp	r3, #20
 8002f90:	f040 809e 	bne.w	80030d0 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002f94:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <menu+0x1a74>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <menu+0x1a88>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f005 ffd9 	bl	8008f58 <lcd_print>
 8002fa6:	e008      	b.n	8002fba <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002fa8:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <menu+0x1a74>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d104      	bne.n	8002fba <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002fb0:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <menu+0x1a8c>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f005 ffcf 	bl	8008f58 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002fba:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <menu+0x1a90>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d126      	bne.n	8003010 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <menu+0x1a94>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f005 ffc6 	bl	8008f58 <lcd_print>
 8002fcc:	e029      	b.n	8003022 <menu+0x1aaa>
 8002fce:	bf00      	nop
 8002fd0:	200010cc 	.word	0x200010cc
 8002fd4:	200013b0 	.word	0x200013b0
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	200010ec 	.word	0x200010ec
 8002fe0:	20000fec 	.word	0x20000fec
 8002fe4:	200010e9 	.word	0x200010e9
 8002fe8:	200010bc 	.word	0x200010bc
 8002fec:	200010cb 	.word	0x200010cb
 8002ff0:	200015f4 	.word	0x200015f4
 8002ff4:	20001608 	.word	0x20001608
 8002ff8:	200010cd 	.word	0x200010cd
 8002ffc:	2000139c 	.word	0x2000139c
 8003000:	2000161c 	.word	0x2000161c
 8003004:	20001630 	.word	0x20001630
 8003008:	200010ce 	.word	0x200010ce
 800300c:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8003010:	4b39      	ldr	r3, [pc, #228]	@ (80030f8 <menu+0x1b80>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d104      	bne.n	8003022 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <menu+0x1b84>)
 800301a:	2101      	movs	r1, #1
 800301c:	2002      	movs	r0, #2
 800301e:	f005 ff9b 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003022:	2102      	movs	r1, #2
 8003024:	4836      	ldr	r0, [pc, #216]	@ (8003100 <menu+0x1b88>)
 8003026:	f007 fac1 	bl	800a5ac <HAL_GPIO_ReadPin>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d119      	bne.n	8003064 <menu+0x1aec>
 8003030:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <menu+0x1b8c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <menu+0x1aec>
 800303e:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <menu+0x1b90>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d10e      	bne.n	8003064 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003046:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <menu+0x1b80>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <menu+0x1b80>)
 8003050:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003052:	4b29      	ldr	r3, [pc, #164]	@ (80030f8 <menu+0x1b80>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d902      	bls.n	8003060 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 800305a:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <menu+0x1b80>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003060:	f000 ffd0 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003064:	2104      	movs	r1, #4
 8003066:	4826      	ldr	r0, [pc, #152]	@ (8003100 <menu+0x1b88>)
 8003068:	f007 faa0 	bl	800a5ac <HAL_GPIO_ReadPin>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d119      	bne.n	80030a6 <menu+0x1b2e>
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <menu+0x1b8c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <menu+0x1b2e>
 8003080:	4b21      	ldr	r3, [pc, #132]	@ (8003108 <menu+0x1b90>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d10e      	bne.n	80030a6 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <menu+0x1b80>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <menu+0x1b80>)
 8003092:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003094:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <menu+0x1b80>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 800309c:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <menu+0x1b80>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030a2:	f000 ffaf 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a6:	2108      	movs	r1, #8
 80030a8:	4815      	ldr	r0, [pc, #84]	@ (8003100 <menu+0x1b88>)
 80030aa:	f007 fa7f 	bl	800a5ac <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10d      	bne.n	80030d0 <menu+0x1b58>
 80030b4:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <menu+0x1b8c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <menu+0x1b80>)
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <menu+0x1b94>)
 80030c8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80030ca:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <menu+0x1b98>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80030d0:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <menu+0x1b9c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b15      	cmp	r3, #21
 80030d6:	f040 8088 	bne.w	80031ea <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 80030da:	4a0f      	ldr	r2, [pc, #60]	@ (8003118 <menu+0x1ba0>)
 80030dc:	2101      	movs	r1, #1
 80030de:	2001      	movs	r0, #1
 80030e0:	f005 ff3a 	bl	8008f58 <lcd_print>

		if(platformSilindirTipi == 0) {
 80030e4:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <menu+0x1ba4>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11b      	bne.n	8003124 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 80030ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003120 <menu+0x1ba8>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f005 ff31 	bl	8008f58 <lcd_print>
 80030f6:	e01e      	b.n	8003136 <menu+0x1bbe>
 80030f8:	200010ce 	.word	0x200010ce
 80030fc:	20001658 	.word	0x20001658
 8003100:	40010800 	.word	0x40010800
 8003104:	200010ec 	.word	0x200010ec
 8003108:	200010cb 	.word	0x200010cb
 800310c:	20000fec 	.word	0x20000fec
 8003110:	200010e9 	.word	0x200010e9
 8003114:	200010bc 	.word	0x200010bc
 8003118:	2000166c 	.word	0x2000166c
 800311c:	200010cf 	.word	0x200010cf
 8003120:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8003124:	4ba1      	ldr	r3, [pc, #644]	@ (80033ac <menu+0x1e34>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d104      	bne.n	8003136 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 800312c:	4aa0      	ldr	r2, [pc, #640]	@ (80033b0 <menu+0x1e38>)
 800312e:	2101      	movs	r1, #1
 8003130:	2002      	movs	r0, #2
 8003132:	f005 ff11 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003136:	2102      	movs	r1, #2
 8003138:	489e      	ldr	r0, [pc, #632]	@ (80033b4 <menu+0x1e3c>)
 800313a:	f007 fa37 	bl	800a5ac <HAL_GPIO_ReadPin>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d115      	bne.n	8003170 <menu+0x1bf8>
 8003144:	4b9c      	ldr	r3, [pc, #624]	@ (80033b8 <menu+0x1e40>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003152:	4b96      	ldr	r3, [pc, #600]	@ (80033ac <menu+0x1e34>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b94      	ldr	r3, [pc, #592]	@ (80033ac <menu+0x1e34>)
 800315c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800315e:	4b93      	ldr	r3, [pc, #588]	@ (80033ac <menu+0x1e34>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d902      	bls.n	800316c <menu+0x1bf4>
				platformSilindirTipi = 0;
 8003166:	4b91      	ldr	r3, [pc, #580]	@ (80033ac <menu+0x1e34>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800316c:	f000 ff4a 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003170:	2104      	movs	r1, #4
 8003172:	4890      	ldr	r0, [pc, #576]	@ (80033b4 <menu+0x1e3c>)
 8003174:	f007 fa1a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d115      	bne.n	80031aa <menu+0x1c32>
 800317e:	4b8e      	ldr	r3, [pc, #568]	@ (80033b8 <menu+0x1e40>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 800318c:	4b87      	ldr	r3, [pc, #540]	@ (80033ac <menu+0x1e34>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b85      	ldr	r3, [pc, #532]	@ (80033ac <menu+0x1e34>)
 8003196:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003198:	4b84      	ldr	r3, [pc, #528]	@ (80033ac <menu+0x1e34>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80031a0:	4b82      	ldr	r3, [pc, #520]	@ (80033ac <menu+0x1e34>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031a6:	f000 ff2d 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031aa:	2108      	movs	r1, #8
 80031ac:	4881      	ldr	r0, [pc, #516]	@ (80033b4 <menu+0x1e3c>)
 80031ae:	f007 f9fd 	bl	800a5ac <HAL_GPIO_ReadPin>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d118      	bne.n	80031ea <menu+0x1c72>
 80031b8:	4b7f      	ldr	r3, [pc, #508]	@ (80033b8 <menu+0x1e40>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d011      	beq.n	80031ea <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80031c6:	4b79      	ldr	r3, [pc, #484]	@ (80033ac <menu+0x1e34>)
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	4b7c      	ldr	r3, [pc, #496]	@ (80033bc <menu+0x1e44>)
 80031cc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80031ce:	4b77      	ldr	r3, [pc, #476]	@ (80033ac <menu+0x1e34>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d106      	bne.n	80031e4 <menu+0x1c6c>
				altLimit = 1;
 80031d6:	4b7a      	ldr	r3, [pc, #488]	@ (80033c0 <menu+0x1e48>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80031dc:	4b78      	ldr	r3, [pc, #480]	@ (80033c0 <menu+0x1e48>)
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <menu+0x1e44>)
 80031e2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80031e4:	4b77      	ldr	r3, [pc, #476]	@ (80033c4 <menu+0x1e4c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80031ea:	4b77      	ldr	r3, [pc, #476]	@ (80033c8 <menu+0x1e50>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b16      	cmp	r3, #22
 80031f0:	d164      	bne.n	80032bc <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 80031f2:	4a76      	ldr	r2, [pc, #472]	@ (80033cc <menu+0x1e54>)
 80031f4:	2101      	movs	r1, #1
 80031f6:	2001      	movs	r0, #1
 80031f8:	f005 feae 	bl	8008f58 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031fc:	4a74      	ldr	r2, [pc, #464]	@ (80033d0 <menu+0x1e58>)
 80031fe:	2101      	movs	r1, #1
 8003200:	2002      	movs	r0, #2
 8003202:	f005 fea9 	bl	8008f58 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <menu+0x1e5c>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	220a      	movs	r2, #10
 800320c:	4972      	ldr	r1, [pc, #456]	@ (80033d8 <menu+0x1e60>)
 800320e:	4618      	mov	r0, r3
 8003210:	f00a f9f8 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 8003214:	4a70      	ldr	r2, [pc, #448]	@ (80033d8 <menu+0x1e60>)
 8003216:	2110      	movs	r1, #16
 8003218:	2002      	movs	r0, #2
 800321a:	f005 fe9d 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800321e:	2102      	movs	r1, #2
 8003220:	4864      	ldr	r0, [pc, #400]	@ (80033b4 <menu+0x1e3c>)
 8003222:	f007 f9c3 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d115      	bne.n	8003258 <menu+0x1ce0>
 800322c:	4b62      	ldr	r3, [pc, #392]	@ (80033b8 <menu+0x1e40>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	f083 0301 	eor.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00e      	beq.n	8003258 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800323a:	4b66      	ldr	r3, [pc, #408]	@ (80033d4 <menu+0x1e5c>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b64      	ldr	r3, [pc, #400]	@ (80033d4 <menu+0x1e5c>)
 8003244:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003246:	4b63      	ldr	r3, [pc, #396]	@ (80033d4 <menu+0x1e5c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d902      	bls.n	8003254 <menu+0x1cdc>
				yukariValfTmr = 0;
 800324e:	4b61      	ldr	r3, [pc, #388]	@ (80033d4 <menu+0x1e5c>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003254:	f000 fed6 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003258:	2104      	movs	r1, #4
 800325a:	4856      	ldr	r0, [pc, #344]	@ (80033b4 <menu+0x1e3c>)
 800325c:	f007 f9a6 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d115      	bne.n	8003292 <menu+0x1d1a>
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <menu+0x1e40>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003274:	4b57      	ldr	r3, [pc, #348]	@ (80033d4 <menu+0x1e5c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b55      	ldr	r3, [pc, #340]	@ (80033d4 <menu+0x1e5c>)
 800327e:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003280:	4b54      	ldr	r3, [pc, #336]	@ (80033d4 <menu+0x1e5c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d902      	bls.n	800328e <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <menu+0x1e5c>)
 800328a:	2205      	movs	r2, #5
 800328c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800328e:	f000 feb9 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003292:	2108      	movs	r1, #8
 8003294:	4847      	ldr	r0, [pc, #284]	@ (80033b4 <menu+0x1e3c>)
 8003296:	f007 f989 	bl	800a5ac <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d10d      	bne.n	80032bc <menu+0x1d44>
 80032a0:	4b45      	ldr	r3, [pc, #276]	@ (80033b8 <menu+0x1e40>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80032ae:	4b49      	ldr	r3, [pc, #292]	@ (80033d4 <menu+0x1e5c>)
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	4b42      	ldr	r3, [pc, #264]	@ (80033bc <menu+0x1e44>)
 80032b4:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80032b6:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <menu+0x1e4c>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80032bc:	4b42      	ldr	r3, [pc, #264]	@ (80033c8 <menu+0x1e50>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b17      	cmp	r3, #23
 80032c2:	d164      	bne.n	800338e <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80032c4:	4a45      	ldr	r2, [pc, #276]	@ (80033dc <menu+0x1e64>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	2001      	movs	r0, #1
 80032ca:	f005 fe45 	bl	8008f58 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <menu+0x1e58>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	2002      	movs	r0, #2
 80032d4:	f005 fe40 	bl	8008f58 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80032d8:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <menu+0x1e68>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	220a      	movs	r2, #10
 80032de:	493e      	ldr	r1, [pc, #248]	@ (80033d8 <menu+0x1e60>)
 80032e0:	4618      	mov	r0, r3
 80032e2:	f00a f98f 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 80032e6:	4a3c      	ldr	r2, [pc, #240]	@ (80033d8 <menu+0x1e60>)
 80032e8:	2110      	movs	r1, #16
 80032ea:	2002      	movs	r0, #2
 80032ec:	f005 fe34 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f0:	2102      	movs	r1, #2
 80032f2:	4830      	ldr	r0, [pc, #192]	@ (80033b4 <menu+0x1e3c>)
 80032f4:	f007 f95a 	bl	800a5ac <HAL_GPIO_ReadPin>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d115      	bne.n	800332a <menu+0x1db2>
 80032fe:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <menu+0x1e40>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	f083 0301 	eor.w	r3, r3, #1
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 800330c:	4b34      	ldr	r3, [pc, #208]	@ (80033e0 <menu+0x1e68>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b32      	ldr	r3, [pc, #200]	@ (80033e0 <menu+0x1e68>)
 8003316:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <menu+0x1e68>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d902      	bls.n	8003326 <menu+0x1dae>
				asagiValfTmr = 0;
 8003320:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <menu+0x1e68>)
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003326:	f000 fe6d 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800332a:	2104      	movs	r1, #4
 800332c:	4821      	ldr	r0, [pc, #132]	@ (80033b4 <menu+0x1e3c>)
 800332e:	f007 f93d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b01      	cmp	r3, #1
 8003336:	d115      	bne.n	8003364 <menu+0x1dec>
 8003338:	4b1f      	ldr	r3, [pc, #124]	@ (80033b8 <menu+0x1e40>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003346:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <menu+0x1e68>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	3b01      	subs	r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <menu+0x1e68>)
 8003350:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003352:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <menu+0x1e68>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800335a:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <menu+0x1e68>)
 800335c:	2205      	movs	r2, #5
 800335e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003360:	f000 fe50 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003364:	2108      	movs	r1, #8
 8003366:	4813      	ldr	r0, [pc, #76]	@ (80033b4 <menu+0x1e3c>)
 8003368:	f007 f920 	bl	800a5ac <HAL_GPIO_ReadPin>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10d      	bne.n	800338e <menu+0x1e16>
 8003372:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <menu+0x1e40>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8003380:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <menu+0x1e68>)
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <menu+0x1e44>)
 8003386:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <menu+0x1e4c>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800338e:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <menu+0x1e50>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b18      	cmp	r3, #24
 8003394:	f040 8093 	bne.w	80034be <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003398:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <menu+0x1e6c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d125      	bne.n	80033ec <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80033a0:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <menu+0x1e70>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	2001      	movs	r0, #1
 80033a6:	f005 fdd7 	bl	8008f58 <lcd_print>
 80033aa:	e028      	b.n	80033fe <menu+0x1e86>
 80033ac:	200010cf 	.word	0x200010cf
 80033b0:	20001658 	.word	0x20001658
 80033b4:	40010800 	.word	0x40010800
 80033b8:	200010ec 	.word	0x200010ec
 80033bc:	20000fec 	.word	0x20000fec
 80033c0:	200010c2 	.word	0x200010c2
 80033c4:	200010e9 	.word	0x200010e9
 80033c8:	200010bc 	.word	0x200010bc
 80033cc:	20001680 	.word	0x20001680
 80033d0:	200014c8 	.word	0x200014c8
 80033d4:	200010d0 	.word	0x200010d0
 80033d8:	2000105c 	.word	0x2000105c
 80033dc:	20001694 	.word	0x20001694
 80033e0:	200010d1 	.word	0x200010d1
 80033e4:	200010cb 	.word	0x200010cb
 80033e8:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 80033ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003620 <menu+0x20a8>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d104      	bne.n	80033fe <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80033f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003624 <menu+0x20ac>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	2001      	movs	r0, #1
 80033fa:	f005 fdad 	bl	8008f58 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033fe:	4a8a      	ldr	r2, [pc, #552]	@ (8003628 <menu+0x20b0>)
 8003400:	2101      	movs	r1, #1
 8003402:	2002      	movs	r0, #2
 8003404:	f005 fda8 	bl	8008f58 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003408:	4b88      	ldr	r3, [pc, #544]	@ (800362c <menu+0x20b4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	220a      	movs	r2, #10
 800340e:	4988      	ldr	r1, [pc, #544]	@ (8003630 <menu+0x20b8>)
 8003410:	4618      	mov	r0, r3
 8003412:	f00a f8f7 	bl	800d604 <itoa>
		lcd_print(2, 16, snum);
 8003416:	4a86      	ldr	r2, [pc, #536]	@ (8003630 <menu+0x20b8>)
 8003418:	2110      	movs	r1, #16
 800341a:	2002      	movs	r0, #2
 800341c:	f005 fd9c 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003420:	2102      	movs	r1, #2
 8003422:	4884      	ldr	r0, [pc, #528]	@ (8003634 <menu+0x20bc>)
 8003424:	f007 f8c2 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d115      	bne.n	800345a <menu+0x1ee2>
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <menu+0x20c0>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f083 0301 	eor.w	r3, r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800343c:	4b7b      	ldr	r3, [pc, #492]	@ (800362c <menu+0x20b4>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b79      	ldr	r3, [pc, #484]	@ (800362c <menu+0x20b4>)
 8003446:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003448:	4b78      	ldr	r3, [pc, #480]	@ (800362c <menu+0x20b4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d902      	bls.n	8003456 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003450:	4b76      	ldr	r3, [pc, #472]	@ (800362c <menu+0x20b4>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003456:	f000 fdd5 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345a:	2104      	movs	r1, #4
 800345c:	4875      	ldr	r0, [pc, #468]	@ (8003634 <menu+0x20bc>)
 800345e:	f007 f8a5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <menu+0x1f1c>
 8003468:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <menu+0x20c0>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003476:	4b6d      	ldr	r3, [pc, #436]	@ (800362c <menu+0x20b4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b6b      	ldr	r3, [pc, #428]	@ (800362c <menu+0x20b4>)
 8003480:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003482:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <menu+0x20b4>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800348a:	4b68      	ldr	r3, [pc, #416]	@ (800362c <menu+0x20b4>)
 800348c:	2205      	movs	r2, #5
 800348e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003490:	f000 fdb8 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003494:	2108      	movs	r1, #8
 8003496:	4867      	ldr	r0, [pc, #412]	@ (8003634 <menu+0x20bc>)
 8003498:	f007 f888 	bl	800a5ac <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10d      	bne.n	80034be <menu+0x1f46>
 80034a2:	4b65      	ldr	r3, [pc, #404]	@ (8003638 <menu+0x20c0>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80034b0:	4b5e      	ldr	r3, [pc, #376]	@ (800362c <menu+0x20b4>)
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	4b61      	ldr	r3, [pc, #388]	@ (800363c <menu+0x20c4>)
 80034b6:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80034b8:	4b61      	ldr	r3, [pc, #388]	@ (8003640 <menu+0x20c8>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80034be:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <menu+0x20cc>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b19      	cmp	r3, #25
 80034c4:	d172      	bne.n	80035ac <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80034c6:	4b56      	ldr	r3, [pc, #344]	@ (8003620 <menu+0x20a8>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d105      	bne.n	80034da <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80034ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003648 <menu+0x20d0>)
 80034d0:	2101      	movs	r1, #1
 80034d2:	2001      	movs	r0, #1
 80034d4:	f005 fd40 	bl	8008f58 <lcd_print>
 80034d8:	e008      	b.n	80034ec <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80034da:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <menu+0x20a8>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d104      	bne.n	80034ec <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80034e2:	4a5a      	ldr	r2, [pc, #360]	@ (800364c <menu+0x20d4>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f005 fd36 	bl	8008f58 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80034ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003628 <menu+0x20b0>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f005 fd31 	bl	8008f58 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80034f6:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <menu+0x20d8>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	220a      	movs	r2, #10
 80034fc:	494c      	ldr	r1, [pc, #304]	@ (8003630 <menu+0x20b8>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f00a f880 	bl	800d604 <itoa>
		lcd_print(2,16,snum);
 8003504:	4a4a      	ldr	r2, [pc, #296]	@ (8003630 <menu+0x20b8>)
 8003506:	2110      	movs	r1, #16
 8003508:	2002      	movs	r0, #2
 800350a:	f005 fd25 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800350e:	2102      	movs	r1, #2
 8003510:	4848      	ldr	r0, [pc, #288]	@ (8003634 <menu+0x20bc>)
 8003512:	f007 f84b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d115      	bne.n	8003548 <menu+0x1fd0>
 800351c:	4b46      	ldr	r3, [pc, #280]	@ (8003638 <menu+0x20c0>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <menu+0x20d8>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <menu+0x20d8>)
 8003534:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003536:	4b46      	ldr	r3, [pc, #280]	@ (8003650 <menu+0x20d8>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d902      	bls.n	8003544 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800353e:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <menu+0x20d8>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003544:	f000 fd5e 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003548:	2104      	movs	r1, #4
 800354a:	483a      	ldr	r0, [pc, #232]	@ (8003634 <menu+0x20bc>)
 800354c:	f007 f82e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d115      	bne.n	8003582 <menu+0x200a>
 8003556:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <menu+0x20c0>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	f083 0301 	eor.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003564:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <menu+0x20d8>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3b01      	subs	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <menu+0x20d8>)
 800356e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003570:	4b37      	ldr	r3, [pc, #220]	@ (8003650 <menu+0x20d8>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d902      	bls.n	800357e <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003578:	4b35      	ldr	r3, [pc, #212]	@ (8003650 <menu+0x20d8>)
 800357a:	2205      	movs	r2, #5
 800357c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800357e:	f000 fd41 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003582:	2108      	movs	r1, #8
 8003584:	482b      	ldr	r0, [pc, #172]	@ (8003634 <menu+0x20bc>)
 8003586:	f007 f811 	bl	800a5ac <HAL_GPIO_ReadPin>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10d      	bne.n	80035ac <menu+0x2034>
 8003590:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <menu+0x20c0>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800359e:	4b2c      	ldr	r3, [pc, #176]	@ (8003650 <menu+0x20d8>)
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	4b26      	ldr	r3, [pc, #152]	@ (800363c <menu+0x20c4>)
 80035a4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80035a6:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <menu+0x20c8>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <menu+0x20cc>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b1a      	cmp	r3, #26
 80035b2:	f040 80b7 	bne.w	8003724 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80035b6:	4a27      	ldr	r2, [pc, #156]	@ (8003654 <menu+0x20dc>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2001      	movs	r0, #1
 80035bc:	f005 fccc 	bl	8008f58 <lcd_print>

		if(makineCalismaTmr > 99) {
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <menu+0x20e0>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b63      	cmp	r3, #99	@ 0x63
 80035c6:	d911      	bls.n	80035ec <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <menu+0x20b0>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2002      	movs	r0, #2
 80035ce:	f005 fcc3 	bl	8008f58 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80035d2:	4b21      	ldr	r3, [pc, #132]	@ (8003658 <menu+0x20e0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	220a      	movs	r2, #10
 80035d8:	4915      	ldr	r1, [pc, #84]	@ (8003630 <menu+0x20b8>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f00a f812 	bl	800d604 <itoa>
			lcd_print(2,14,snum);
 80035e0:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <menu+0x20b8>)
 80035e2:	210e      	movs	r1, #14
 80035e4:	2002      	movs	r0, #2
 80035e6:	f005 fcb7 	bl	8008f58 <lcd_print>
 80035ea:	e04c      	b.n	8003686 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80035ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <menu+0x20e0>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	d933      	bls.n	800365c <menu+0x20e4>
 80035f4:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <menu+0x20e0>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b63      	cmp	r3, #99	@ 0x63
 80035fa:	d82f      	bhi.n	800365c <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80035fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <menu+0x20b0>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2002      	movs	r0, #2
 8003602:	f005 fca9 	bl	8008f58 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003606:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <menu+0x20e0>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	220a      	movs	r2, #10
 800360c:	4908      	ldr	r1, [pc, #32]	@ (8003630 <menu+0x20b8>)
 800360e:	4618      	mov	r0, r3
 8003610:	f009 fff8 	bl	800d604 <itoa>
			lcd_print(2, 15, snum);
 8003614:	4a06      	ldr	r2, [pc, #24]	@ (8003630 <menu+0x20b8>)
 8003616:	210f      	movs	r1, #15
 8003618:	2002      	movs	r0, #2
 800361a:	f005 fc9d 	bl	8008f58 <lcd_print>
 800361e:	e032      	b.n	8003686 <menu+0x210e>
 8003620:	200010cb 	.word	0x200010cb
 8003624:	200016bc 	.word	0x200016bc
 8003628:	200014c8 	.word	0x200014c8
 800362c:	200010d2 	.word	0x200010d2
 8003630:	2000105c 	.word	0x2000105c
 8003634:	40010800 	.word	0x40010800
 8003638:	200010ec 	.word	0x200010ec
 800363c:	20000fec 	.word	0x20000fec
 8003640:	200010e9 	.word	0x200010e9
 8003644:	200010bc 	.word	0x200010bc
 8003648:	200016d0 	.word	0x200016d0
 800364c:	200016e4 	.word	0x200016e4
 8003650:	200010d3 	.word	0x200010d3
 8003654:	200016f8 	.word	0x200016f8
 8003658:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 800365c:	4b72      	ldr	r3, [pc, #456]	@ (8003828 <menu+0x22b0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d810      	bhi.n	8003686 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003664:	4a71      	ldr	r2, [pc, #452]	@ (800382c <menu+0x22b4>)
 8003666:	2101      	movs	r1, #1
 8003668:	2002      	movs	r0, #2
 800366a:	f005 fc75 	bl	8008f58 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800366e:	4b6e      	ldr	r3, [pc, #440]	@ (8003828 <menu+0x22b0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	220a      	movs	r2, #10
 8003674:	496e      	ldr	r1, [pc, #440]	@ (8003830 <menu+0x22b8>)
 8003676:	4618      	mov	r0, r3
 8003678:	f009 ffc4 	bl	800d604 <itoa>
			lcd_print(2, 16, snum);
 800367c:	4a6c      	ldr	r2, [pc, #432]	@ (8003830 <menu+0x22b8>)
 800367e:	2110      	movs	r1, #16
 8003680:	2002      	movs	r0, #2
 8003682:	f005 fc69 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003686:	2102      	movs	r1, #2
 8003688:	486a      	ldr	r0, [pc, #424]	@ (8003834 <menu+0x22bc>)
 800368a:	f006 ff8f 	bl	800a5ac <HAL_GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d115      	bne.n	80036c0 <menu+0x2148>
 8003694:	4b68      	ldr	r3, [pc, #416]	@ (8003838 <menu+0x22c0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f083 0301 	eor.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80036a2:	4b61      	ldr	r3, [pc, #388]	@ (8003828 <menu+0x22b0>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003828 <menu+0x22b0>)
 80036ac:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80036ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003828 <menu+0x22b0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2bb4      	cmp	r3, #180	@ 0xb4
 80036b4:	d902      	bls.n	80036bc <menu+0x2144>
				makineCalismaTmr = 0;
 80036b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003828 <menu+0x22b0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036bc:	f000 fca2 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c0:	2104      	movs	r1, #4
 80036c2:	485c      	ldr	r0, [pc, #368]	@ (8003834 <menu+0x22bc>)
 80036c4:	f006 ff72 	bl	800a5ac <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d115      	bne.n	80036fa <menu+0x2182>
 80036ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003838 <menu+0x22c0>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80036dc:	4b52      	ldr	r3, [pc, #328]	@ (8003828 <menu+0x22b0>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b50      	ldr	r3, [pc, #320]	@ (8003828 <menu+0x22b0>)
 80036e6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80036e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003828 <menu+0x22b0>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2bb5      	cmp	r3, #181	@ 0xb5
 80036ee:	d902      	bls.n	80036f6 <menu+0x217e>
		   		makineCalismaTmr = 180;
 80036f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003828 <menu+0x22b0>)
 80036f2:	22b4      	movs	r2, #180	@ 0xb4
 80036f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036f6:	f000 fc85 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fa:	2108      	movs	r1, #8
 80036fc:	484d      	ldr	r0, [pc, #308]	@ (8003834 <menu+0x22bc>)
 80036fe:	f006 ff55 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <menu+0x21ac>
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <menu+0x22c0>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	f083 0301 	eor.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003716:	4b44      	ldr	r3, [pc, #272]	@ (8003828 <menu+0x22b0>)
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	4b48      	ldr	r3, [pc, #288]	@ (800383c <menu+0x22c4>)
 800371c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800371e:	4b48      	ldr	r3, [pc, #288]	@ (8003840 <menu+0x22c8>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003724:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <menu+0x22cc>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b1b      	cmp	r3, #27
 800372a:	d166      	bne.n	80037fa <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 800372c:	4a46      	ldr	r2, [pc, #280]	@ (8003848 <menu+0x22d0>)
 800372e:	2101      	movs	r1, #1
 8003730:	2001      	movs	r0, #1
 8003732:	f005 fc11 	bl	8008f58 <lcd_print>

		if(buzzer == 0) {
 8003736:	4b45      	ldr	r3, [pc, #276]	@ (800384c <menu+0x22d4>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800373e:	4a44      	ldr	r2, [pc, #272]	@ (8003850 <menu+0x22d8>)
 8003740:	2101      	movs	r1, #1
 8003742:	2002      	movs	r0, #2
 8003744:	f005 fc08 	bl	8008f58 <lcd_print>
 8003748:	e008      	b.n	800375c <menu+0x21e4>
		} else if(buzzer == 1) {
 800374a:	4b40      	ldr	r3, [pc, #256]	@ (800384c <menu+0x22d4>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d104      	bne.n	800375c <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003752:	4a40      	ldr	r2, [pc, #256]	@ (8003854 <menu+0x22dc>)
 8003754:	2101      	movs	r1, #1
 8003756:	2002      	movs	r0, #2
 8003758:	f005 fbfe 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800375c:	2102      	movs	r1, #2
 800375e:	4835      	ldr	r0, [pc, #212]	@ (8003834 <menu+0x22bc>)
 8003760:	f006 ff24 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d115      	bne.n	8003796 <menu+0x221e>
 800376a:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <menu+0x22c0>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	f083 0301 	eor.w	r3, r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <menu+0x221e>
			buzzer = buzzer + 1;
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <menu+0x22d4>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b32      	ldr	r3, [pc, #200]	@ (800384c <menu+0x22d4>)
 8003782:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <menu+0x22d4>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d902      	bls.n	8003792 <menu+0x221a>
				buzzer = 0;
 800378c:	4b2f      	ldr	r3, [pc, #188]	@ (800384c <menu+0x22d4>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003792:	f000 fc37 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003796:	2104      	movs	r1, #4
 8003798:	4826      	ldr	r0, [pc, #152]	@ (8003834 <menu+0x22bc>)
 800379a:	f006 ff07 	bl	800a5ac <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d115      	bne.n	80037d0 <menu+0x2258>
 80037a4:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <menu+0x22c0>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00e      	beq.n	80037d0 <menu+0x2258>
			buzzer = buzzer - 1;
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <menu+0x22d4>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <menu+0x22d4>)
 80037bc:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80037be:	4b23      	ldr	r3, [pc, #140]	@ (800384c <menu+0x22d4>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <menu+0x2254>
		   		buzzer = 1;
 80037c6:	4b21      	ldr	r3, [pc, #132]	@ (800384c <menu+0x22d4>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037cc:	f000 fc1a 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d0:	2108      	movs	r1, #8
 80037d2:	4818      	ldr	r0, [pc, #96]	@ (8003834 <menu+0x22bc>)
 80037d4:	f006 feea 	bl	800a5ac <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10d      	bne.n	80037fa <menu+0x2282>
 80037de:	4b16      	ldr	r3, [pc, #88]	@ (8003838 <menu+0x22c0>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <menu+0x2282>
			eepromData[25] = buzzer;
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <menu+0x22d4>)
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	4b12      	ldr	r3, [pc, #72]	@ (800383c <menu+0x22c4>)
 80037f2:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <menu+0x22c8>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <menu+0x22cc>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b1c      	cmp	r3, #28
 8003800:	f040 8088 	bne.w	8003914 <menu+0x239c>
		calismaSayModu = 0;
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <menu+0x22e0>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800380a:	4a14      	ldr	r2, [pc, #80]	@ (800385c <menu+0x22e4>)
 800380c:	2101      	movs	r1, #1
 800380e:	2001      	movs	r0, #1
 8003810:	f005 fba2 	bl	8008f58 <lcd_print>

		if(demoMode == 0) {
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <menu+0x22e8>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d123      	bne.n	8003864 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 800381c:	4a0c      	ldr	r2, [pc, #48]	@ (8003850 <menu+0x22d8>)
 800381e:	2101      	movs	r1, #1
 8003820:	2002      	movs	r0, #2
 8003822:	f005 fb99 	bl	8008f58 <lcd_print>
 8003826:	e026      	b.n	8003876 <menu+0x22fe>
 8003828:	200010d4 	.word	0x200010d4
 800382c:	200014c8 	.word	0x200014c8
 8003830:	2000105c 	.word	0x2000105c
 8003834:	40010800 	.word	0x40010800
 8003838:	200010ec 	.word	0x200010ec
 800383c:	20000fec 	.word	0x20000fec
 8003840:	200010e9 	.word	0x200010e9
 8003844:	200010bc 	.word	0x200010bc
 8003848:	20000128 	.word	0x20000128
 800384c:	200010d8 	.word	0x200010d8
 8003850:	2000139c 	.word	0x2000139c
 8003854:	200013b0 	.word	0x200013b0
 8003858:	200010db 	.word	0x200010db
 800385c:	2000013c 	.word	0x2000013c
 8003860:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003864:	4b80      	ldr	r3, [pc, #512]	@ (8003a68 <menu+0x24f0>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d104      	bne.n	8003876 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 800386c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a6c <menu+0x24f4>)
 800386e:	2101      	movs	r1, #1
 8003870:	2002      	movs	r0, #2
 8003872:	f005 fb71 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003876:	2102      	movs	r1, #2
 8003878:	487d      	ldr	r0, [pc, #500]	@ (8003a70 <menu+0x24f8>)
 800387a:	f006 fe97 	bl	800a5ac <HAL_GPIO_ReadPin>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d115      	bne.n	80038b0 <menu+0x2338>
 8003884:	4b7b      	ldr	r3, [pc, #492]	@ (8003a74 <menu+0x24fc>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <menu+0x2338>
			demoMode = demoMode + 1;
 8003892:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <menu+0x24f0>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <menu+0x24f0>)
 800389c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800389e:	4b72      	ldr	r3, [pc, #456]	@ (8003a68 <menu+0x24f0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d902      	bls.n	80038ac <menu+0x2334>
				demoMode = 0;
 80038a6:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <menu+0x24f0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038ac:	f000 fbaa 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038b0:	2104      	movs	r1, #4
 80038b2:	486f      	ldr	r0, [pc, #444]	@ (8003a70 <menu+0x24f8>)
 80038b4:	f006 fe7a 	bl	800a5ac <HAL_GPIO_ReadPin>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d115      	bne.n	80038ea <menu+0x2372>
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <menu+0x24fc>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	f083 0301 	eor.w	r3, r3, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <menu+0x2372>
			demoMode = demoMode - 1;
 80038cc:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <menu+0x24f0>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b64      	ldr	r3, [pc, #400]	@ (8003a68 <menu+0x24f0>)
 80038d6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80038d8:	4b63      	ldr	r3, [pc, #396]	@ (8003a68 <menu+0x24f0>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <menu+0x236e>
		   		demoMode = 1;
 80038e0:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <menu+0x24f0>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038e6:	f000 fb8d 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ea:	2108      	movs	r1, #8
 80038ec:	4860      	ldr	r0, [pc, #384]	@ (8003a70 <menu+0x24f8>)
 80038ee:	f006 fe5d 	bl	800a5ac <HAL_GPIO_ReadPin>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10d      	bne.n	8003914 <menu+0x239c>
 80038f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a74 <menu+0x24fc>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <menu+0x239c>
			eepromData[26] = demoMode;
 8003906:	4b58      	ldr	r3, [pc, #352]	@ (8003a68 <menu+0x24f0>)
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a78 <menu+0x2500>)
 800390c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800390e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a7c <menu+0x2504>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003914:	4b5a      	ldr	r3, [pc, #360]	@ (8003a80 <menu+0x2508>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b1d      	cmp	r3, #29
 800391a:	f040 80d5 	bne.w	8003ac8 <menu+0x2550>
		finalCount=0;
 800391e:	4b59      	ldr	r3, [pc, #356]	@ (8003a84 <menu+0x250c>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003924:	4b58      	ldr	r3, [pc, #352]	@ (8003a88 <menu+0x2510>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d135      	bne.n	8003998 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 800392c:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <menu+0x2514>)
 800392e:	2101      	movs	r1, #1
 8003930:	2001      	movs	r0, #1
 8003932:	f005 fb11 	bl	8008f58 <lcd_print>

			if(demoMode == 1) {
 8003936:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <menu+0x24f0>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d113      	bne.n	8003966 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800393e:	4b54      	ldr	r3, [pc, #336]	@ (8003a90 <menu+0x2518>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	4613      	mov	r3, r2
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	1a9a      	subs	r2, r3, r2
 800394a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a84 <menu+0x250c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a4c      	ldr	r2, [pc, #304]	@ (8003a84 <menu+0x250c>)
 8003952:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003954:	4b4f      	ldr	r3, [pc, #316]	@ (8003a94 <menu+0x251c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <menu+0x250c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a48      	ldr	r2, [pc, #288]	@ (8003a84 <menu+0x250c>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e012      	b.n	800398c <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <menu+0x2520>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4613      	mov	r3, r2
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	1a9a      	subs	r2, r3, r2
 8003972:	4b44      	ldr	r3, [pc, #272]	@ (8003a84 <menu+0x250c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4413      	add	r3, r2
 8003978:	4a42      	ldr	r2, [pc, #264]	@ (8003a84 <menu+0x250c>)
 800397a:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 800397c:	4b47      	ldr	r3, [pc, #284]	@ (8003a9c <menu+0x2524>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b40      	ldr	r3, [pc, #256]	@ (8003a84 <menu+0x250c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4a3e      	ldr	r2, [pc, #248]	@ (8003a84 <menu+0x250c>)
 800398a:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 800398c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a84 <menu+0x250c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fa89 	bl	8003ea8 <displayCycleOnLCD>
 8003996:	e00d      	b.n	80039b4 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003998:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <menu+0x2510>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d109      	bne.n	80039b4 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80039a0:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <menu+0x2514>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	2001      	movs	r0, #1
 80039a6:	f005 fad7 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80039aa:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa0 <menu+0x2528>)
 80039ac:	2101      	movs	r1, #1
 80039ae:	2002      	movs	r0, #2
 80039b0:	f005 fad2 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b4:	2102      	movs	r1, #2
 80039b6:	482e      	ldr	r0, [pc, #184]	@ (8003a70 <menu+0x24f8>)
 80039b8:	f006 fdf8 	bl	800a5ac <HAL_GPIO_ReadPin>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d115      	bne.n	80039ee <menu+0x2476>
 80039c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a74 <menu+0x24fc>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80039d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a88 <menu+0x2510>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <menu+0x2510>)
 80039da:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80039dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a88 <menu+0x2510>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d902      	bls.n	80039ea <menu+0x2472>
				calismaSayModu = 0;
 80039e4:	4b28      	ldr	r3, [pc, #160]	@ (8003a88 <menu+0x2510>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039ea:	f000 fb0b 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ee:	2104      	movs	r1, #4
 80039f0:	481f      	ldr	r0, [pc, #124]	@ (8003a70 <menu+0x24f8>)
 80039f2:	f006 fddb 	bl	800a5ac <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d115      	bne.n	8003a28 <menu+0x24b0>
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <menu+0x24fc>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f083 0301 	eor.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00e      	beq.n	8003a28 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <menu+0x2510>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <menu+0x2510>)
 8003a14:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003a16:	4b1c      	ldr	r3, [pc, #112]	@ (8003a88 <menu+0x2510>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <menu+0x2510>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a24:	f000 faee 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a28:	2108      	movs	r1, #8
 8003a2a:	4811      	ldr	r0, [pc, #68]	@ (8003a70 <menu+0x24f8>)
 8003a2c:	f006 fdbe 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d148      	bne.n	8003ac8 <menu+0x2550>
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <menu+0x24fc>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d041      	beq.n	8003ac8 <menu+0x2550>
			if(demoMode == 1) {
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <menu+0x24f0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12b      	bne.n	8003aa4 <menu+0x252c>
				eepromData[28] = 0;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <menu+0x2500>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003a52:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <menu+0x2500>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <menu+0x251c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <menu+0x2518>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e02a      	b.n	8003abc <menu+0x2544>
 8003a66:	bf00      	nop
 8003a68:	200010da 	.word	0x200010da
 8003a6c:	200013b0 	.word	0x200013b0
 8003a70:	40010800 	.word	0x40010800
 8003a74:	200010ec 	.word	0x200010ec
 8003a78:	20000fec 	.word	0x20000fec
 8003a7c:	200010e9 	.word	0x200010e9
 8003a80:	200010bc 	.word	0x200010bc
 8003a84:	200010b8 	.word	0x200010b8
 8003a88:	200010db 	.word	0x200010db
 8003a8c:	2000170c 	.word	0x2000170c
 8003a90:	200010b7 	.word	0x200010b7
 8003a94:	200010b5 	.word	0x200010b5
 8003a98:	200010b6 	.word	0x200010b6
 8003a9c:	200010b4 	.word	0x200010b4
 8003aa0:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <menu+0x265c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <menu+0x265c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003ab0:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <menu+0x2660>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003ab6:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <menu+0x2664>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003abc:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <menu+0x2668>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003ac2:	4b48      	ldr	r3, [pc, #288]	@ (8003be4 <menu+0x266c>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <menu+0x2670>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b1e      	cmp	r3, #30
 8003ace:	d16a      	bne.n	8003ba6 <menu+0x262e>
		calismaSayModu = 0;
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <menu+0x2668>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003ad6:	4a45      	ldr	r2, [pc, #276]	@ (8003bec <menu+0x2674>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	2001      	movs	r0, #1
 8003adc:	f005 fa3c 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003ae0:	4a43      	ldr	r2, [pc, #268]	@ (8003bf0 <menu+0x2678>)
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f005 fa37 	bl	8008f58 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aea:	2102      	movs	r1, #2
 8003aec:	4841      	ldr	r0, [pc, #260]	@ (8003bf4 <menu+0x267c>)
 8003aee:	f006 fd5d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11c      	bne.n	8003b32 <menu+0x25ba>
 8003af8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <menu+0x2680>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d015      	beq.n	8003b32 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003b06:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <menu+0x2684>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <menu+0x2684>)
 8003b10:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b12:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <menu+0x2684>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d902      	bls.n	8003b20 <menu+0x25a8>
				dilSecim = 0;
 8003b1a:	4b38      	ldr	r3, [pc, #224]	@ (8003bfc <menu+0x2684>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003b20:	f003 ff70 	bl	8007a04 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <menu+0x2684>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fae5 	bl	80060f8 <loadMenuTexts>

			bekle();
 8003b2e:	f000 fa69 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b32:	2104      	movs	r1, #4
 8003b34:	482f      	ldr	r0, [pc, #188]	@ (8003bf4 <menu+0x267c>)
 8003b36:	f006 fd39 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11c      	bne.n	8003b7a <menu+0x2602>
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <menu+0x2680>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d015      	beq.n	8003b7a <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <menu+0x2684>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b29      	ldr	r3, [pc, #164]	@ (8003bfc <menu+0x2684>)
 8003b58:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b5a:	4b28      	ldr	r3, [pc, #160]	@ (8003bfc <menu+0x2684>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <menu+0x25f0>
		   		dilSecim = 1;
 8003b62:	4b26      	ldr	r3, [pc, #152]	@ (8003bfc <menu+0x2684>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003b68:	f003 ff4c 	bl	8007a04 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <menu+0x2684>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fac1 	bl	80060f8 <loadMenuTexts>

			bekle();
 8003b76:	f000 fa45 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	481d      	ldr	r0, [pc, #116]	@ (8003bf4 <menu+0x267c>)
 8003b7e:	f006 fd15 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10e      	bne.n	8003ba6 <menu+0x262e>
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <menu+0x2680>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f083 0301 	eor.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <menu+0x2684>)
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <menu+0x265c>)
 8003b9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <menu+0x266c>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <menu+0x2670>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b1f      	cmp	r3, #31
 8003bac:	f040 8087 	bne.w	8003cbe <menu+0x2746>
		calismaSayModu = 0;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <menu+0x2668>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003bb6:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <menu+0x2688>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f005 f9cc 	bl	8008f58 <lcd_print>

		if(iotMode == 0) {
 8003bc0:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <menu+0x268c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d121      	bne.n	8003c0c <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c08 <menu+0x2690>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f005 f9c3 	bl	8008f58 <lcd_print>
 8003bd2:	e024      	b.n	8003c1e <menu+0x26a6>
 8003bd4:	20000fec 	.word	0x20000fec
 8003bd8:	200010b4 	.word	0x200010b4
 8003bdc:	200010b6 	.word	0x200010b6
 8003be0:	200010db 	.word	0x200010db
 8003be4:	200010e9 	.word	0x200010e9
 8003be8:	200010bc 	.word	0x200010bc
 8003bec:	20001734 	.word	0x20001734
 8003bf0:	20001748 	.word	0x20001748
 8003bf4:	40010800 	.word	0x40010800
 8003bf8:	200010ec 	.word	0x200010ec
 8003bfc:	200010dc 	.word	0x200010dc
 8003c00:	20000150 	.word	0x20000150
 8003c04:	200010e7 	.word	0x200010e7
 8003c08:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003c0c:	4b99      	ldr	r3, [pc, #612]	@ (8003e74 <menu+0x28fc>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d104      	bne.n	8003c1e <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003c14:	4a98      	ldr	r2, [pc, #608]	@ (8003e78 <menu+0x2900>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f005 f99d 	bl	8008f58 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4896      	ldr	r0, [pc, #600]	@ (8003e7c <menu+0x2904>)
 8003c22:	f006 fcc3 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d115      	bne.n	8003c58 <menu+0x26e0>
 8003c2c:	4b94      	ldr	r3, [pc, #592]	@ (8003e80 <menu+0x2908>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00e      	beq.n	8003c58 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003c3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e74 <menu+0x28fc>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b8c      	ldr	r3, [pc, #560]	@ (8003e74 <menu+0x28fc>)
 8003c44:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003c46:	4b8b      	ldr	r3, [pc, #556]	@ (8003e74 <menu+0x28fc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d902      	bls.n	8003c54 <menu+0x26dc>
				iotMode = 0;
 8003c4e:	4b89      	ldr	r3, [pc, #548]	@ (8003e74 <menu+0x28fc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003c54:	f000 f9d6 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c58:	2104      	movs	r1, #4
 8003c5a:	4888      	ldr	r0, [pc, #544]	@ (8003e7c <menu+0x2904>)
 8003c5c:	f006 fca6 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d115      	bne.n	8003c92 <menu+0x271a>
 8003c66:	4b86      	ldr	r3, [pc, #536]	@ (8003e80 <menu+0x2908>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f083 0301 	eor.w	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <menu+0x271a>
			iotMode = iotMode - 1;
 8003c74:	4b7f      	ldr	r3, [pc, #508]	@ (8003e74 <menu+0x28fc>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8003e74 <menu+0x28fc>)
 8003c7e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003c80:	4b7c      	ldr	r3, [pc, #496]	@ (8003e74 <menu+0x28fc>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <menu+0x2716>
		   		iotMode = 1;
 8003c88:	4b7a      	ldr	r3, [pc, #488]	@ (8003e74 <menu+0x28fc>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003c8e:	f000 f9b9 	bl	8004004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c92:	2108      	movs	r1, #8
 8003c94:	4879      	ldr	r0, [pc, #484]	@ (8003e7c <menu+0x2904>)
 8003c96:	f006 fc89 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10e      	bne.n	8003cbe <menu+0x2746>
 8003ca0:	4b77      	ldr	r3, [pc, #476]	@ (8003e80 <menu+0x2908>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	f083 0301 	eor.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <menu+0x2746>
			eepromData[48] = iotMode;
 8003cae:	4b71      	ldr	r3, [pc, #452]	@ (8003e74 <menu+0x28fc>)
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <menu+0x290c>)
 8003cb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003cb8:	4b73      	ldr	r3, [pc, #460]	@ (8003e88 <menu+0x2910>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003cbe:	4b73      	ldr	r3, [pc, #460]	@ (8003e8c <menu+0x2914>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d127      	bne.n	8003d16 <menu+0x279e>
		calismaSayModu = 0;
 8003cc6:	4b72      	ldr	r3, [pc, #456]	@ (8003e90 <menu+0x2918>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003ccc:	4a71      	ldr	r2, [pc, #452]	@ (8003e94 <menu+0x291c>)
 8003cce:	2101      	movs	r1, #1
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f005 f941 	bl	8008f58 <lcd_print>

		convertArrays(1);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fc fdee 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003cdc:	2032      	movs	r0, #50	@ 0x32
 8003cde:	f005 fe95 	bl	8009a0c <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fd fbec 	bl	80014c0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4864      	ldr	r0, [pc, #400]	@ (8003e7c <menu+0x2904>)
 8003cec:	f006 fc5e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10f      	bne.n	8003d16 <menu+0x279e>
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	4860      	ldr	r0, [pc, #384]	@ (8003e7c <menu+0x2904>)
 8003cfa:	f006 fc57 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d108      	bne.n	8003d16 <menu+0x279e>
 8003d04:	4b5e      	ldr	r3, [pc, #376]	@ (8003e80 <menu+0x2908>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f083 0301 	eor.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003d12:	f004 f8eb 	bl	8007eec <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003d16:	4b5d      	ldr	r3, [pc, #372]	@ (8003e8c <menu+0x2914>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b21      	cmp	r3, #33	@ 0x21
 8003d1c:	d12b      	bne.n	8003d76 <menu+0x27fe>
		calismaSayModu = 0;
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e90 <menu+0x2918>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7fc fdc7 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d2a:	2032      	movs	r0, #50	@ 0x32
 8003d2c:	f005 fe6e 	bl	8009a0c <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003d30:	2002      	movs	r0, #2
 8003d32:	f7fd fbc5 	bl	80014c0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d36:	2102      	movs	r1, #2
 8003d38:	4850      	ldr	r0, [pc, #320]	@ (8003e7c <menu+0x2904>)
 8003d3a:	f006 fc37 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d118      	bne.n	8003d76 <menu+0x27fe>
 8003d44:	2104      	movs	r1, #4
 8003d46:	484d      	ldr	r0, [pc, #308]	@ (8003e7c <menu+0x2904>)
 8003d48:	f006 fc30 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d111      	bne.n	8003d76 <menu+0x27fe>
 8003d52:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <menu+0x2908>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <menu+0x27fe>
			takeWifiSSID();
 8003d60:	f004 faba 	bl	80082d8 <takeWifiSSID>

			convertArrays(2);
 8003d64:	2002      	movs	r0, #2
 8003d66:	f7fc fda7 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003d6a:	2032      	movs	r0, #50	@ 0x32
 8003d6c:	f005 fe4e 	bl	8009a0c <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003d70:	2002      	movs	r0, #2
 8003d72:	f7fd fba5 	bl	80014c0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003d76:	4b45      	ldr	r3, [pc, #276]	@ (8003e8c <menu+0x2914>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b22      	cmp	r3, #34	@ 0x22
 8003d7c:	d12b      	bne.n	8003dd6 <menu+0x285e>
		calismaSayModu = 0;
 8003d7e:	4b44      	ldr	r3, [pc, #272]	@ (8003e90 <menu+0x2918>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003d84:	2003      	movs	r0, #3
 8003d86:	f7fc fd97 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d8a:	2032      	movs	r0, #50	@ 0x32
 8003d8c:	f005 fe3e 	bl	8009a0c <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003d90:	2003      	movs	r0, #3
 8003d92:	f7fd fb95 	bl	80014c0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d96:	2102      	movs	r1, #2
 8003d98:	4838      	ldr	r0, [pc, #224]	@ (8003e7c <menu+0x2904>)
 8003d9a:	f006 fc07 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d118      	bne.n	8003dd6 <menu+0x285e>
 8003da4:	2104      	movs	r1, #4
 8003da6:	4835      	ldr	r0, [pc, #212]	@ (8003e7c <menu+0x2904>)
 8003da8:	f006 fc00 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d111      	bne.n	8003dd6 <menu+0x285e>
 8003db2:	4b33      	ldr	r3, [pc, #204]	@ (8003e80 <menu+0x2908>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <menu+0x285e>
			takeWifiPass();
 8003dc0:	f004 fc36 	bl	8008630 <takeWifiPass>

			convertArrays(3);
 8003dc4:	2003      	movs	r0, #3
 8003dc6:	f7fc fd77 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003dca:	2032      	movs	r0, #50	@ 0x32
 8003dcc:	f005 fe1e 	bl	8009a0c <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	f7fd fb75 	bl	80014c0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <menu+0x2914>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b23      	cmp	r3, #35	@ 0x23
 8003ddc:	d146      	bne.n	8003e6c <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003dde:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <menu+0x2920>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	2001      	movs	r0, #1
 8003de4:	f005 f8b8 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003de8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e9c <menu+0x2924>)
 8003dea:	2101      	movs	r1, #1
 8003dec:	2002      	movs	r0, #2
 8003dee:	f005 f8b3 	bl	8008f58 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003df2:	2108      	movs	r1, #8
 8003df4:	4821      	ldr	r0, [pc, #132]	@ (8003e7c <menu+0x2904>)
 8003df6:	f006 fbd9 	bl	800a5ac <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d135      	bne.n	8003e6c <menu+0x28f4>
			menuGiris = 0;
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <menu+0x2928>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003e06:	f005 fdf7 	bl	80099f8 <HAL_GetTick>
 8003e0a:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e0c:	e007      	b.n	8003e1e <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e0e:	f005 fdf3 	bl	80099f8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e1c:	d806      	bhi.n	8003e2c <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e1e:	4821      	ldr	r0, [pc, #132]	@ (8003ea4 <menu+0x292c>)
 8003e20:	f007 f9ed 	bl	800b1fe <HAL_I2C_GetError>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d0f1      	beq.n	8003e0e <menu+0x2896>
 8003e2a:	e000      	b.n	8003e2e <menu+0x28b6>
			        break;
 8003e2c:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003e2e:	f005 fde3 	bl	80099f8 <HAL_GetTick>
 8003e32:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e34:	e007      	b.n	8003e46 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e36:	f005 fddf 	bl	80099f8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e44:	d806      	bhi.n	8003e54 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e46:	4817      	ldr	r0, [pc, #92]	@ (8003ea4 <menu+0x292c>)
 8003e48:	f007 f9cc 	bl	800b1e4 <HAL_I2C_GetState>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d1f1      	bne.n	8003e36 <menu+0x28be>
 8003e52:	e000      	b.n	8003e56 <menu+0x28de>
			        break;
 8003e54:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fc fc2c 	bl	80006b4 <saveEEPROM>

			lcd_clear();
 8003e5c:	f005 f8a8 	bl	8008fb0 <lcd_clear>
			HAL_Delay(500);
 8003e60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e64:	f005 fdd2 	bl	8009a0c <HAL_Delay>
			NVIC_SystemReset();
 8003e68:	f7fd fb70 	bl	800154c <__NVIC_SystemReset>
		}
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200010e7 	.word	0x200010e7
 8003e78:	200013b0 	.word	0x200013b0
 8003e7c:	40010800 	.word	0x40010800
 8003e80:	200010ec 	.word	0x200010ec
 8003e84:	20000fec 	.word	0x20000fec
 8003e88:	200010e9 	.word	0x200010e9
 8003e8c:	200010bc 	.word	0x200010bc
 8003e90:	200010db 	.word	0x200010db
 8003e94:	200018c4 	.word	0x200018c4
 8003e98:	2000175c 	.word	0x2000175c
 8003e9c:	20001770 	.word	0x20001770
 8003ea0:	200010d9 	.word	0x200010d9
 8003ea4:	2000193c 	.word	0x2000193c

08003ea8 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	491c      	ldr	r1, [pc, #112]	@ (8003f24 <displayCycleOnLCD+0x7c>)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f009 fba5 	bl	800d604 <itoa>

    int length = strlen(snum);
 8003eba:	481a      	ldr	r0, [pc, #104]	@ (8003f24 <displayCycleOnLCD+0x7c>)
 8003ebc:	f7fc f9b2 	bl	8000224 <strlen>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f1c3 0310 	rsb	r3, r3, #16
 8003eca:	0fda      	lsrs	r2, r3, #31
 8003ecc:	4413      	add	r3, r2
 8003ece:	105b      	asrs	r3, r3, #1
 8003ed0:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	2120      	movs	r1, #32
 8003eda:	4618      	mov	r0, r3
 8003edc:	f009 fcac 	bl	800d838 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee8:	e00d      	b.n	8003f06 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	4413      	add	r3, r2
 8003ef0:	490c      	ldr	r1, [pc, #48]	@ (8003f24 <displayCycleOnLCD+0x7c>)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	440a      	add	r2, r1
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	3328      	adds	r3, #40	@ 0x28
 8003efa:	443b      	add	r3, r7
 8003efc:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	3301      	adds	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	dbed      	blt.n	8003eea <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003f0e:	f107 0308 	add.w	r3, r7, #8
 8003f12:	461a      	mov	r2, r3
 8003f14:	2101      	movs	r1, #1
 8003f16:	2002      	movs	r0, #2
 8003f18:	f005 f81e 	bl	8008f58 <lcd_print>
}
 8003f1c:	bf00      	nop
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	2000105c 	.word	0x2000105c

08003f28 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f005 f80b 	bl	8008f58 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003f42:	e03e      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d105      	bne.n	8003f56 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003f4a:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f005 f802 	bl	8008f58 <lcd_print>
}
 8003f54:	e035      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d105      	bne.n	8003f68 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f5e:	2103      	movs	r1, #3
 8003f60:	2002      	movs	r0, #2
 8003f62:	f004 fff9 	bl	8008f58 <lcd_print>
}
 8003f66:	e02c      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d105      	bne.n	8003f7a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003f6e:	4a17      	ldr	r2, [pc, #92]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f70:	2104      	movs	r1, #4
 8003f72:	2002      	movs	r0, #2
 8003f74:	f004 fff0 	bl	8008f58 <lcd_print>
}
 8003f78:	e023      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d105      	bne.n	8003f8c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003f80:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f82:	2105      	movs	r1, #5
 8003f84:	2002      	movs	r0, #2
 8003f86:	f004 ffe7 	bl	8008f58 <lcd_print>
}
 8003f8a:	e01a      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d105      	bne.n	8003f9e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003f92:	4a0e      	ldr	r2, [pc, #56]	@ (8003fcc <lcdUpdate+0xa4>)
 8003f94:	2106      	movs	r1, #6
 8003f96:	2002      	movs	r0, #2
 8003f98:	f004 ffde 	bl	8008f58 <lcd_print>
}
 8003f9c:	e011      	b.n	8003fc2 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	2b07      	cmp	r3, #7
 8003fa2:	d10e      	bne.n	8003fc2 <lcdUpdate+0x9a>
		lcd_clear();
 8003fa4:	f005 f804 	bl	8008fb0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003fa8:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <lcdUpdate+0xa8>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	2001      	movs	r0, #1
 8003fae:	f004 ffd3 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <lcdUpdate+0xac>)
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f004 ffce 	bl	8008f58 <lcd_print>
		HAL_Delay(10);
 8003fbc:	200a      	movs	r0, #10
 8003fbe:	f005 fd25 	bl	8009a0c <HAL_Delay>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	0800eb14 	.word	0x0800eb14
 8003fd0:	200000c4 	.word	0x200000c4
 8003fd4:	200000d8 	.word	0x200000d8

08003fd8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <checkLCDBacklight+0x24>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <checkLCDBacklight+0x28>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b3b      	cmp	r3, #59	@ 0x3b
 8003fe8:	d903      	bls.n	8003ff2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003fea:	2000      	movs	r0, #0
 8003fec:	f005 f800 	bl	8008ff0 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003ff0:	e002      	b.n	8003ff8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f004 fffc 	bl	8008ff0 <lcd_backlight>
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20001094 	.word	0x20001094
 8004000:	200010b0 	.word	0x200010b0

08004004 <bekle>:

void bekle() {
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
	timer1=millis;
 8004008:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <bekle+0x124>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a47      	ldr	r2, [pc, #284]	@ (800412c <bekle+0x128>)
 800400e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004010:	e002      	b.n	8004018 <bekle+0x14>
    	butonKontrol = 1;
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <bekle+0x12c>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004018:	2101      	movs	r1, #1
 800401a:	4846      	ldr	r0, [pc, #280]	@ (8004134 <bekle+0x130>)
 800401c:	f006 fac6 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d109      	bne.n	800403a <bekle+0x36>
 8004026:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <bekle+0x124>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b40      	ldr	r3, [pc, #256]	@ (800412c <bekle+0x128>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d0ef      	beq.n	8004012 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004032:	e002      	b.n	800403a <bekle+0x36>
    	butonKontrol = 1;
 8004034:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <bekle+0x12c>)
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800403a:	2108      	movs	r1, #8
 800403c:	483e      	ldr	r0, [pc, #248]	@ (8004138 <bekle+0x134>)
 800403e:	f006 fab5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d109      	bne.n	800405c <bekle+0x58>
 8004048:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <bekle+0x124>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b37      	ldr	r3, [pc, #220]	@ (800412c <bekle+0x128>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d0ef      	beq.n	8004034 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004054:	e002      	b.n	800405c <bekle+0x58>
    	butonKontrol = 1;
 8004056:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <bekle+0x12c>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800405c:	2102      	movs	r1, #2
 800405e:	4835      	ldr	r0, [pc, #212]	@ (8004134 <bekle+0x130>)
 8004060:	f006 faa4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d109      	bne.n	800407e <bekle+0x7a>
 800406a:	4b2f      	ldr	r3, [pc, #188]	@ (8004128 <bekle+0x124>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b2f      	ldr	r3, [pc, #188]	@ (800412c <bekle+0x128>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d0ef      	beq.n	8004056 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004076:	e002      	b.n	800407e <bekle+0x7a>
    	butonKontrol = 1;
 8004078:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <bekle+0x12c>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800407e:	2104      	movs	r1, #4
 8004080:	482c      	ldr	r0, [pc, #176]	@ (8004134 <bekle+0x130>)
 8004082:	f006 fa93 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	d109      	bne.n	80040a0 <bekle+0x9c>
 800408c:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <bekle+0x124>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b26      	ldr	r3, [pc, #152]	@ (800412c <bekle+0x128>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0ef      	beq.n	8004078 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004098:	e002      	b.n	80040a0 <bekle+0x9c>
    	butonKontrol = 1;
 800409a:	4b25      	ldr	r3, [pc, #148]	@ (8004130 <bekle+0x12c>)
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040a0:	2108      	movs	r1, #8
 80040a2:	4824      	ldr	r0, [pc, #144]	@ (8004134 <bekle+0x130>)
 80040a4:	f006 fa82 	bl	800a5ac <HAL_GPIO_ReadPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d109      	bne.n	80040c2 <bekle+0xbe>
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <bekle+0x124>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <bekle+0x128>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d0ef      	beq.n	800409a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040ba:	e002      	b.n	80040c2 <bekle+0xbe>
    	butonKontrol = 1;
 80040bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004130 <bekle+0x12c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	481c      	ldr	r0, [pc, #112]	@ (8004138 <bekle+0x134>)
 80040c6:	f006 fa71 	bl	800a5ac <HAL_GPIO_ReadPin>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <bekle+0xe0>
 80040d0:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <bekle+0x124>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b15      	ldr	r3, [pc, #84]	@ (800412c <bekle+0x128>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d0ef      	beq.n	80040bc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040dc:	e002      	b.n	80040e4 <bekle+0xe0>
    	butonKontrol = 1;
 80040de:	4b14      	ldr	r3, [pc, #80]	@ (8004130 <bekle+0x12c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040e8:	4813      	ldr	r0, [pc, #76]	@ (8004138 <bekle+0x134>)
 80040ea:	f006 fa5f 	bl	800a5ac <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <bekle+0x104>
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <bekle+0x124>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <bekle+0x128>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d0ee      	beq.n	80040de <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004100:	e002      	b.n	8004108 <bekle+0x104>
    	butonKontrol = 1;
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <bekle+0x12c>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800410c:	480a      	ldr	r0, [pc, #40]	@ (8004138 <bekle+0x134>)
 800410e:	f006 fa4d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <bekle+0x120>
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <bekle+0x124>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <bekle+0x128>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0ee      	beq.n	8004102 <bekle+0xfe>
    }

}
 8004124:	bf00      	nop
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20001094 	.word	0x20001094
 800412c:	2000109c 	.word	0x2000109c
 8004130:	200010ec 	.word	0x200010ec
 8004134:	40010800 	.word	0x40010800
 8004138:	40011000 	.word	0x40011000

0800413c <buttonCheck>:

uint8_t buttonCheck(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004140:	2101      	movs	r1, #1
 8004142:	4815      	ldr	r0, [pc, #84]	@ (8004198 <buttonCheck+0x5c>)
 8004144:	f006 fa32 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004148:	4603      	mov	r3, r0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d01b      	beq.n	8004186 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800414e:	2108      	movs	r1, #8
 8004150:	4812      	ldr	r0, [pc, #72]	@ (800419c <buttonCheck+0x60>)
 8004152:	f006 fa2b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004156:	4603      	mov	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d014      	beq.n	8004186 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 800415c:	2102      	movs	r1, #2
 800415e:	480e      	ldr	r0, [pc, #56]	@ (8004198 <buttonCheck+0x5c>)
 8004160:	f006 fa24 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d00d      	beq.n	8004186 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800416a:	2104      	movs	r1, #4
 800416c:	480a      	ldr	r0, [pc, #40]	@ (8004198 <buttonCheck+0x5c>)
 800416e:	f006 fa1d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d006      	beq.n	8004186 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004178:	2108      	movs	r1, #8
 800417a:	4807      	ldr	r0, [pc, #28]	@ (8004198 <buttonCheck+0x5c>)
 800417c:	f006 fa16 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d104      	bne.n	8004190 <buttonCheck+0x54>
		backLightTimer = 0;
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <buttonCheck+0x64>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
		return 1;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <buttonCheck+0x56>
	}
	return 0;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40010800 	.word	0x40010800
 800419c:	40011000 	.word	0x40011000
 80041a0:	200010b0 	.word	0x200010b0

080041a4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80041a8:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <checkBasincSalteri+0x54>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <checkBasincSalteri+0x12>
		basincVar=1;
 80041b0:	4b12      	ldr	r3, [pc, #72]	@ (80041fc <checkBasincSalteri+0x58>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <checkBasincSalteri+0x54>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d119      	bne.n	80041f2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80041be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041c2:	480f      	ldr	r0, [pc, #60]	@ (8004200 <checkBasincSalteri+0x5c>)
 80041c4:	f006 f9f2 	bl	800a5ac <HAL_GPIO_ReadPin>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <checkBasincSalteri+0x60>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <checkBasincSalteri+0x64>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d90a      	bls.n	80041f2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80041dc:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <checkBasincSalteri+0x58>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80041e2:	e006      	b.n	80041f2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80041e4:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <checkBasincSalteri+0x60>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a07      	ldr	r2, [pc, #28]	@ (8004208 <checkBasincSalteri+0x64>)
 80041ea:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <checkBasincSalteri+0x58>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200010c3 	.word	0x200010c3
 80041fc:	200010bf 	.word	0x200010bf
 8004200:	40011000 	.word	0x40011000
 8004204:	20001094 	.word	0x20001094
 8004208:	200010ac 	.word	0x200010ac

0800420c <checkBasGonder>:

void checkBasGonder() {
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <checkBasGonder+0x74>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d10b      	bne.n	8004230 <checkBasGonder+0x24>
 8004218:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <checkBasGonder+0x78>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <checkBasGonder+0x24>
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <checkBasGonder+0x7c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <checkBasGonder+0x80>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e009      	b.n	8004244 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <checkBasGonder+0x78>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800423e:	4b13      	ldr	r3, [pc, #76]	@ (800428c <checkBasGonder+0x80>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004244:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <checkBasGonder+0x74>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10b      	bne.n	8004264 <checkBasGonder+0x58>
 800424c:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <checkBasGonder+0x84>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <checkBasGonder+0x58>
 8004254:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <checkBasGonder+0x7c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800425c:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <checkBasGonder+0x88>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004262:	e009      	b.n	8004278 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <checkBasGonder+0x84>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f083 0301 	eor.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <checkBasGonder+0x88>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	200010bd 	.word	0x200010bd
 8004284:	200010f2 	.word	0x200010f2
 8004288:	200010cb 	.word	0x200010cb
 800428c:	200010f9 	.word	0x200010f9
 8004290:	200010f5 	.word	0x200010f5
 8004294:	200010fa 	.word	0x200010fa

08004298 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800429c:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <checkKapiSecimleri+0x98>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80042a4:	4b23      	ldr	r3, [pc, #140]	@ (8004334 <checkKapiSecimleri+0x9c>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80042aa:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <checkKapiSecimleri+0x98>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10e      	bne.n	80042d0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80042b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042b6:	4820      	ldr	r0, [pc, #128]	@ (8004338 <checkKapiSecimleri+0xa0>)
 80042b8:	f006 f978 	bl	800a5ac <HAL_GPIO_ReadPin>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004334 <checkKapiSecimleri+0x9c>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e002      	b.n	80042d0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80042ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004334 <checkKapiSecimleri+0x9c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80042d0:	4b17      	ldr	r3, [pc, #92]	@ (8004330 <checkKapiSecimleri+0x98>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d10e      	bne.n	80042f6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80042d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042dc:	4816      	ldr	r0, [pc, #88]	@ (8004338 <checkKapiSecimleri+0xa0>)
 80042de:	f006 f965 	bl	800a5ac <HAL_GPIO_ReadPin>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80042e8:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <checkKapiSecimleri+0x9c>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <checkKapiSecimleri+0x9c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80042f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004330 <checkKapiSecimleri+0x98>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d116      	bne.n	800432c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80042fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004302:	480d      	ldr	r0, [pc, #52]	@ (8004338 <checkKapiSecimleri+0xa0>)
 8004304:	f006 f952 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <checkKapiSecimleri+0x8e>
 800430e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004312:	4809      	ldr	r0, [pc, #36]	@ (8004338 <checkKapiSecimleri+0xa0>)
 8004314:	f006 f94a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <checkKapiSecimleri+0x9c>)
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004324:	e002      	b.n	800432c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004326:	4b03      	ldr	r3, [pc, #12]	@ (8004334 <checkKapiSecimleri+0x9c>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200010c4 	.word	0x200010c4
 8004334:	2000110f 	.word	0x2000110f
 8004338:	40010800 	.word	0x40010800

0800433c <checkAktifCalisma>:

void checkAktifCalisma() {
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004340:	4b66      	ldr	r3, [pc, #408]	@ (80044dc <checkAktifCalisma+0x1a0>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f041 8343 	bne.w	80059d0 <checkAktifCalisma+0x1694>
 800434a:	4b65      	ldr	r3, [pc, #404]	@ (80044e0 <checkAktifCalisma+0x1a4>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f041 833e 	bne.w	80059d0 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004354:	4b63      	ldr	r3, [pc, #396]	@ (80044e4 <checkAktifCalisma+0x1a8>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d11a      	bne.n	8004392 <checkAktifCalisma+0x56>
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <checkAktifCalisma+0x1ac>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <checkAktifCalisma+0x56>
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <checkAktifCalisma+0x1b0>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <checkAktifCalisma+0x46>
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <checkAktifCalisma+0x1b4>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f083 0301 	eor.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <checkAktifCalisma+0x46>
 800437a:	4b5e      	ldr	r3, [pc, #376]	@ (80044f4 <checkAktifCalisma+0x1b8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d007      	beq.n	8004392 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004382:	4b5d      	ldr	r3, [pc, #372]	@ (80044f8 <checkAktifCalisma+0x1bc>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01c      	beq.n	80043c4 <checkAktifCalisma+0x88>
 800438a:	4b5c      	ldr	r3, [pc, #368]	@ (80044fc <checkAktifCalisma+0x1c0>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d118      	bne.n	80043c4 <checkAktifCalisma+0x88>
 8004392:	4b5b      	ldr	r3, [pc, #364]	@ (8004500 <checkAktifCalisma+0x1c4>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <checkAktifCalisma+0x66>
 800439a:	4b5a      	ldr	r3, [pc, #360]	@ (8004504 <checkAktifCalisma+0x1c8>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d010      	beq.n	80043c4 <checkAktifCalisma+0x88>
 80043a2:	4b59      	ldr	r3, [pc, #356]	@ (8004508 <checkAktifCalisma+0x1cc>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80043aa:	2201      	movs	r2, #1
 80043ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043b0:	4856      	ldr	r0, [pc, #344]	@ (800450c <checkAktifCalisma+0x1d0>)
 80043b2:	f006 f912 	bl	800a5da <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80043b6:	4b56      	ldr	r3, [pc, #344]	@ (8004510 <checkAktifCalisma+0x1d4>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <checkAktifCalisma+0x1d8>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e008      	b.n	80043d6 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043ca:	4850      	ldr	r0, [pc, #320]	@ (800450c <checkAktifCalisma+0x1d0>)
 80043cc:	f006 f905 	bl	800a5da <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80043d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004510 <checkAktifCalisma+0x1d4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80043d6:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <checkAktifCalisma+0x1a4>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d164      	bne.n	80044a8 <checkAktifCalisma+0x16c>
 80043de:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <checkAktifCalisma+0x1c8>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <checkAktifCalisma+0xb2>
 80043e6:	4b46      	ldr	r3, [pc, #280]	@ (8004500 <checkAktifCalisma+0x1c4>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d05c      	beq.n	80044a8 <checkAktifCalisma+0x16c>
 80043ee:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <checkAktifCalisma+0x1cc>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d058      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80043f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043fa:	4844      	ldr	r0, [pc, #272]	@ (800450c <checkAktifCalisma+0x1d0>)
 80043fc:	f006 f8d6 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <checkAktifCalisma+0xd2>
 8004406:	4b44      	ldr	r3, [pc, #272]	@ (8004518 <checkAktifCalisma+0x1dc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04c      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800440e:	2102      	movs	r1, #2
 8004410:	4842      	ldr	r0, [pc, #264]	@ (800451c <checkAktifCalisma+0x1e0>)
 8004412:	f006 f8cb 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d145      	bne.n	80044a8 <checkAktifCalisma+0x16c>
							&& (basincVar)
 800441c:	4b40      	ldr	r3, [pc, #256]	@ (8004520 <checkAktifCalisma+0x1e4>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d041      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004428:	4838      	ldr	r0, [pc, #224]	@ (800450c <checkAktifCalisma+0x1d0>)
 800442a:	f006 f8bf 	bl	800a5ac <HAL_GPIO_ReadPin>
 800442e:	4603      	mov	r3, r0
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10e      	bne.n	8004452 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004434:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004438:	4834      	ldr	r0, [pc, #208]	@ (800450c <checkAktifCalisma+0x1d0>)
 800443a:	f006 f8b7 	bl	800a5ac <HAL_GPIO_ReadPin>
 800443e:	4603      	mov	r3, r0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004444:	2140      	movs	r1, #64	@ 0x40
 8004446:	4835      	ldr	r0, [pc, #212]	@ (800451c <checkAktifCalisma+0x1e0>)
 8004448:	f006 f8b0 	bl	800a5ac <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <checkAktifCalisma+0x11e>
 8004452:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <checkAktifCalisma+0x1a8>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d026      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800445a:	4b24      	ldr	r3, [pc, #144]	@ (80044ec <checkAktifCalisma+0x1b0>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f083 0301 	eor.w	r3, r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01f      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004468:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <checkAktifCalisma+0x1ac>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d018      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <checkAktifCalisma+0x1bc>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d011      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <checkAktifCalisma+0x1e8>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004492:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <checkAktifCalisma+0x1ec>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	f083 0301 	eor.w	r3, r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <checkAktifCalisma+0x1a8>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e002      	b.n	80044ae <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80044a8:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <checkAktifCalisma+0x1a8>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <checkAktifCalisma+0x1a8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03c      	beq.n	8004530 <checkAktifCalisma+0x1f4>
 80044b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044ba:	4818      	ldr	r0, [pc, #96]	@ (800451c <checkAktifCalisma+0x1e0>)
 80044bc:	f006 f876 	bl	800a5ac <HAL_GPIO_ReadPin>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d134      	bne.n	8004530 <checkAktifCalisma+0x1f4>
 80044c6:	4b19      	ldr	r3, [pc, #100]	@ (800452c <checkAktifCalisma+0x1f0>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d030      	beq.n	8004530 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80044ce:	2201      	movs	r2, #1
 80044d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044d4:	480d      	ldr	r0, [pc, #52]	@ (800450c <checkAktifCalisma+0x1d0>)
 80044d6:	f006 f880 	bl	800a5da <HAL_GPIO_WritePin>
 80044da:	e02f      	b.n	800453c <checkAktifCalisma+0x200>
 80044dc:	200010da 	.word	0x200010da
 80044e0:	200010d9 	.word	0x200010d9
 80044e4:	200010f2 	.word	0x200010f2
 80044e8:	200010f3 	.word	0x200010f3
 80044ec:	200010f5 	.word	0x200010f5
 80044f0:	200010ed 	.word	0x200010ed
 80044f4:	200010cf 	.word	0x200010cf
 80044f8:	200010f4 	.word	0x200010f4
 80044fc:	200010ce 	.word	0x200010ce
 8004500:	2000110e 	.word	0x2000110e
 8004504:	20001121 	.word	0x20001121
 8004508:	2000110f 	.word	0x2000110f
 800450c:	40010c00 	.word	0x40010c00
 8004510:	20001110 	.word	0x20001110
 8004514:	200010fc 	.word	0x200010fc
 8004518:	200010f9 	.word	0x200010f9
 800451c:	40011000 	.word	0x40011000
 8004520:	200010bf 	.word	0x200010bf
 8004524:	200010f7 	.word	0x200010f7
 8004528:	200010f8 	.word	0x200010f8
 800452c:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004536:	4865      	ldr	r0, [pc, #404]	@ (80046cc <checkAktifCalisma+0x390>)
 8004538:	f006 f84f 	bl	800a5da <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800453c:	4b64      	ldr	r3, [pc, #400]	@ (80046d0 <checkAktifCalisma+0x394>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <checkAktifCalisma+0x230>
 8004544:	4b63      	ldr	r3, [pc, #396]	@ (80046d4 <checkAktifCalisma+0x398>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d007      	beq.n	800455c <checkAktifCalisma+0x220>
 800454c:	4b61      	ldr	r3, [pc, #388]	@ (80046d4 <checkAktifCalisma+0x398>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d003      	beq.n	800455c <checkAktifCalisma+0x220>
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <checkAktifCalisma+0x39c>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800455c:	2201      	movs	r2, #1
 800455e:	2104      	movs	r1, #4
 8004560:	485a      	ldr	r0, [pc, #360]	@ (80046cc <checkAktifCalisma+0x390>)
 8004562:	f006 f83a 	bl	800a5da <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004566:	4b5d      	ldr	r3, [pc, #372]	@ (80046dc <checkAktifCalisma+0x3a0>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800456c:	4b5b      	ldr	r3, [pc, #364]	@ (80046dc <checkAktifCalisma+0x3a0>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d033      	beq.n	80045dc <checkAktifCalisma+0x2a0>
 8004574:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004578:	4854      	ldr	r0, [pc, #336]	@ (80046cc <checkAktifCalisma+0x390>)
 800457a:	f006 f817 	bl	800a5ac <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <checkAktifCalisma+0x256>
 8004584:	4b56      	ldr	r3, [pc, #344]	@ (80046e0 <checkAktifCalisma+0x3a4>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <checkAktifCalisma+0x264>
 8004592:	2102      	movs	r1, #2
 8004594:	4853      	ldr	r0, [pc, #332]	@ (80046e4 <checkAktifCalisma+0x3a8>)
 8004596:	f006 f809 	bl	800a5ac <HAL_GPIO_ReadPin>
 800459a:	4603      	mov	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d11d      	bne.n	80045dc <checkAktifCalisma+0x2a0>
 80045a0:	4b51      	ldr	r3, [pc, #324]	@ (80046e8 <checkAktifCalisma+0x3ac>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d103      	bne.n	80045b0 <checkAktifCalisma+0x274>
 80045a8:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <checkAktifCalisma+0x3b0>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <checkAktifCalisma+0x2a0>
 80045b0:	4b4f      	ldr	r3, [pc, #316]	@ (80046f0 <checkAktifCalisma+0x3b4>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d011      	beq.n	80045dc <checkAktifCalisma+0x2a0>
 80045b8:	4b4e      	ldr	r3, [pc, #312]	@ (80046f4 <checkAktifCalisma+0x3b8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <checkAktifCalisma+0x2a0>
 80045c0:	4b4d      	ldr	r3, [pc, #308]	@ (80046f8 <checkAktifCalisma+0x3bc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f083 0301 	eor.w	r3, r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <checkAktifCalisma+0x2a0>
					timer2=millis;
 80045ce:	4b4b      	ldr	r3, [pc, #300]	@ (80046fc <checkAktifCalisma+0x3c0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004700 <checkAktifCalisma+0x3c4>)
 80045d4:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80045d6:	4b48      	ldr	r3, [pc, #288]	@ (80046f8 <checkAktifCalisma+0x3bc>)
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80045dc:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <checkAktifCalisma+0x3c0>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <checkAktifCalisma+0x3c4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a47      	ldr	r2, [pc, #284]	@ (8004704 <checkAktifCalisma+0x3c8>)
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d303      	bcc.n	80045f6 <checkAktifCalisma+0x2ba>
 80045ee:	4b42      	ldr	r3, [pc, #264]	@ (80046f8 <checkAktifCalisma+0x3bc>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d118      	bne.n	8004628 <checkAktifCalisma+0x2ec>
 80045f6:	4b3c      	ldr	r3, [pc, #240]	@ (80046e8 <checkAktifCalisma+0x3ac>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f083 0301 	eor.w	r3, r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <checkAktifCalisma+0x2d6>
 8004604:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <checkAktifCalisma+0x3b0>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <checkAktifCalisma+0x2ec>
 8004612:	4b37      	ldr	r3, [pc, #220]	@ (80046f0 <checkAktifCalisma+0x3b4>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	f083 0301 	eor.w	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <checkAktifCalisma+0x2ec>
 8004620:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <checkAktifCalisma+0x3b8>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004628:	2200      	movs	r2, #0
 800462a:	2104      	movs	r1, #4
 800462c:	4827      	ldr	r0, [pc, #156]	@ (80046cc <checkAktifCalisma+0x390>)
 800462e:	f005 ffd4 	bl	800a5da <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004632:	4b2a      	ldr	r3, [pc, #168]	@ (80046dc <checkAktifCalisma+0x3a0>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004638:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <checkAktifCalisma+0x3bc>)
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800463e:	4b32      	ldr	r3, [pc, #200]	@ (8004708 <checkAktifCalisma+0x3cc>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <checkAktifCalisma+0x3d0>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800464c:	4b2e      	ldr	r3, [pc, #184]	@ (8004708 <checkAktifCalisma+0x3cc>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d116      	bne.n	8004682 <checkAktifCalisma+0x346>
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <checkAktifCalisma+0x3d4>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d112      	bne.n	8004682 <checkAktifCalisma+0x346>
 800465c:	2101      	movs	r1, #1
 800465e:	4821      	ldr	r0, [pc, #132]	@ (80046e4 <checkAktifCalisma+0x3a8>)
 8004660:	f005 ffa4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <checkAktifCalisma+0x346>
 800466a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800466e:	4817      	ldr	r0, [pc, #92]	@ (80046cc <checkAktifCalisma+0x390>)
 8004670:	f005 ff9c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800467a:	4b24      	ldr	r3, [pc, #144]	@ (800470c <checkAktifCalisma+0x3d0>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e011      	b.n	80046a6 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004682:	4b21      	ldr	r3, [pc, #132]	@ (8004708 <checkAktifCalisma+0x3cc>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10d      	bne.n	80046a6 <checkAktifCalisma+0x36a>
 800468a:	2101      	movs	r1, #1
 800468c:	4815      	ldr	r0, [pc, #84]	@ (80046e4 <checkAktifCalisma+0x3a8>)
 800468e:	f005 ff8d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d106      	bne.n	80046a6 <checkAktifCalisma+0x36a>
 8004698:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <checkAktifCalisma+0x3d4>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80046a0:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <checkAktifCalisma+0x3d0>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <checkAktifCalisma+0x3cc>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d135      	bne.n	800471a <checkAktifCalisma+0x3de>
 80046ae:	4b18      	ldr	r3, [pc, #96]	@ (8004710 <checkAktifCalisma+0x3d4>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d131      	bne.n	800471a <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80046b6:	2101      	movs	r1, #1
 80046b8:	480a      	ldr	r0, [pc, #40]	@ (80046e4 <checkAktifCalisma+0x3a8>)
 80046ba:	f005 ff77 	bl	800a5ac <HAL_GPIO_ReadPin>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d127      	bne.n	8004714 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <checkAktifCalisma+0x3d0>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e026      	b.n	800471a <checkAktifCalisma+0x3de>
 80046cc:	40010c00 	.word	0x40010c00
 80046d0:	200010f2 	.word	0x200010f2
 80046d4:	200010cb 	.word	0x200010cb
 80046d8:	200010cf 	.word	0x200010cf
 80046dc:	200010f6 	.word	0x200010f6
 80046e0:	200010f9 	.word	0x200010f9
 80046e4:	40011000 	.word	0x40011000
 80046e8:	2000110e 	.word	0x2000110e
 80046ec:	20001121 	.word	0x20001121
 80046f0:	2000110f 	.word	0x2000110f
 80046f4:	200010bf 	.word	0x200010bf
 80046f8:	200010ee 	.word	0x200010ee
 80046fc:	20001094 	.word	0x20001094
 8004700:	200010a0 	.word	0x200010a0
 8004704:	200010d0 	.word	0x200010d0
 8004708:	200010c0 	.word	0x200010c0
 800470c:	20001113 	.word	0x20001113
 8004710:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8004714:	4b7f      	ldr	r3, [pc, #508]	@ (8004914 <checkAktifCalisma+0x5d8>)
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800471a:	4b7f      	ldr	r3, [pc, #508]	@ (8004918 <checkAktifCalisma+0x5dc>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d17c      	bne.n	800481c <checkAktifCalisma+0x4e0>
 8004722:	4b7e      	ldr	r3, [pc, #504]	@ (800491c <checkAktifCalisma+0x5e0>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d078      	beq.n	800481c <checkAktifCalisma+0x4e0>
 800472a:	4b7d      	ldr	r3, [pc, #500]	@ (8004920 <checkAktifCalisma+0x5e4>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d074      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004736:	487b      	ldr	r0, [pc, #492]	@ (8004924 <checkAktifCalisma+0x5e8>)
 8004738:	f005 ff38 	bl	800a5ac <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <checkAktifCalisma+0x40e>
 8004742:	4b79      	ldr	r3, [pc, #484]	@ (8004928 <checkAktifCalisma+0x5ec>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d068      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800474a:	4b72      	ldr	r3, [pc, #456]	@ (8004914 <checkAktifCalisma+0x5d8>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d064      	beq.n	800481c <checkAktifCalisma+0x4e0>
 8004752:	4b76      	ldr	r3, [pc, #472]	@ (800492c <checkAktifCalisma+0x5f0>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05d      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004760:	2104      	movs	r1, #4
 8004762:	4873      	ldr	r0, [pc, #460]	@ (8004930 <checkAktifCalisma+0x5f4>)
 8004764:	f005 ff22 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <checkAktifCalisma+0x43a>
 800476e:	4b71      	ldr	r3, [pc, #452]	@ (8004934 <checkAktifCalisma+0x5f8>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d152      	bne.n	800481c <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800477a:	486a      	ldr	r0, [pc, #424]	@ (8004924 <checkAktifCalisma+0x5e8>)
 800477c:	f005 ff16 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004780:	4603      	mov	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10e      	bne.n	80047a4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004786:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800478a:	4866      	ldr	r0, [pc, #408]	@ (8004924 <checkAktifCalisma+0x5e8>)
 800478c:	f005 ff0e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d106      	bne.n	80047a4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004796:	2140      	movs	r1, #64	@ 0x40
 8004798:	4865      	ldr	r0, [pc, #404]	@ (8004930 <checkAktifCalisma+0x5f4>)
 800479a:	f005 ff07 	bl	800a5ac <HAL_GPIO_ReadPin>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d003      	beq.n	80047ac <checkAktifCalisma+0x470>
 80047a4:	4b64      	ldr	r3, [pc, #400]	@ (8004938 <checkAktifCalisma+0x5fc>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d037      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80047ac:	4b63      	ldr	r3, [pc, #396]	@ (800493c <checkAktifCalisma+0x600>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f083 0301 	eor.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d030      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80047ba:	4b61      	ldr	r3, [pc, #388]	@ (8004940 <checkAktifCalisma+0x604>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f083 0301 	eor.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d029      	beq.n	800481c <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80047c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004944 <checkAktifCalisma+0x608>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d022      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004948 <checkAktifCalisma+0x60c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f083 0301 	eor.w	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <checkAktifCalisma+0x610>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f083 0301 	eor.w	r3, r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d014      	beq.n	800481c <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80047f2:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <checkAktifCalisma+0x614>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	f083 0301 	eor.w	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004800:	2201      	movs	r2, #1
 8004802:	2102      	movs	r1, #2
 8004804:	4847      	ldr	r0, [pc, #284]	@ (8004924 <checkAktifCalisma+0x5e8>)
 8004806:	f005 fee8 	bl	800a5da <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800480a:	4b4b      	ldr	r3, [pc, #300]	@ (8004938 <checkAktifCalisma+0x5fc>)
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004810:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <checkAktifCalisma+0x618>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004816:	4b50      	ldr	r3, [pc, #320]	@ (8004958 <checkAktifCalisma+0x61c>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800481c:	4b46      	ldr	r3, [pc, #280]	@ (8004938 <checkAktifCalisma+0x5fc>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d033      	beq.n	800488c <checkAktifCalisma+0x550>
 8004824:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004828:	483e      	ldr	r0, [pc, #248]	@ (8004924 <checkAktifCalisma+0x5e8>)
 800482a:	f005 febf 	bl	800a5ac <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <checkAktifCalisma+0x506>
 8004834:	4b3c      	ldr	r3, [pc, #240]	@ (8004928 <checkAktifCalisma+0x5ec>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <checkAktifCalisma+0x51c>
 8004842:	2104      	movs	r1, #4
 8004844:	483a      	ldr	r0, [pc, #232]	@ (8004930 <checkAktifCalisma+0x5f4>)
 8004846:	f005 feb1 	bl	800a5ac <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d11d      	bne.n	800488c <checkAktifCalisma+0x550>
 8004850:	4b38      	ldr	r3, [pc, #224]	@ (8004934 <checkAktifCalisma+0x5f8>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <checkAktifCalisma+0x550>
 8004858:	4b30      	ldr	r3, [pc, #192]	@ (800491c <checkAktifCalisma+0x5e0>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <checkAktifCalisma+0x550>
 8004860:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <checkAktifCalisma+0x5e4>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <checkAktifCalisma+0x550>
 8004868:	4b2a      	ldr	r3, [pc, #168]	@ (8004914 <checkAktifCalisma+0x5d8>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <checkAktifCalisma+0x550>
 8004870:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <checkAktifCalisma+0x620>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <checkAktifCalisma+0x550>
					timer2=millis;
 800487e:	4b38      	ldr	r3, [pc, #224]	@ (8004960 <checkAktifCalisma+0x624>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a38      	ldr	r2, [pc, #224]	@ (8004964 <checkAktifCalisma+0x628>)
 8004884:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004886:	4b35      	ldr	r3, [pc, #212]	@ (800495c <checkAktifCalisma+0x620>)
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800488c:	4b34      	ldr	r3, [pc, #208]	@ (8004960 <checkAktifCalisma+0x624>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b34      	ldr	r3, [pc, #208]	@ (8004964 <checkAktifCalisma+0x628>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	4a34      	ldr	r2, [pc, #208]	@ (8004968 <checkAktifCalisma+0x62c>)
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	4293      	cmp	r3, r2
 800489c:	d303      	bcc.n	80048a6 <checkAktifCalisma+0x56a>
 800489e:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <checkAktifCalisma+0x620>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d114      	bne.n	80048d0 <checkAktifCalisma+0x594>
 80048a6:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <checkAktifCalisma+0x5e0>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10d      	bne.n	80048d0 <checkAktifCalisma+0x594>
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <checkAktifCalisma+0x5e4>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f083 0301 	eor.w	r3, r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <checkAktifCalisma+0x594>
 80048c2:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <checkAktifCalisma+0x5d8>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80048d0:	2200      	movs	r2, #0
 80048d2:	2102      	movs	r1, #2
 80048d4:	4813      	ldr	r0, [pc, #76]	@ (8004924 <checkAktifCalisma+0x5e8>)
 80048d6:	f005 fe80 	bl	800a5da <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80048da:	4b17      	ldr	r3, [pc, #92]	@ (8004938 <checkAktifCalisma+0x5fc>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <checkAktifCalisma+0x620>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <checkAktifCalisma+0x5fc>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d040      	beq.n	8004970 <checkAktifCalisma+0x634>
 80048ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048f2:	480f      	ldr	r0, [pc, #60]	@ (8004930 <checkAktifCalisma+0x5f4>)
 80048f4:	f005 fe5a 	bl	800a5ac <HAL_GPIO_ReadPin>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d138      	bne.n	8004970 <checkAktifCalisma+0x634>
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <checkAktifCalisma+0x630>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d034      	beq.n	8004970 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004906:	2201      	movs	r2, #1
 8004908:	2101      	movs	r1, #1
 800490a:	4806      	ldr	r0, [pc, #24]	@ (8004924 <checkAktifCalisma+0x5e8>)
 800490c:	f005 fe65 	bl	800a5da <HAL_GPIO_WritePin>
 8004910:	e033      	b.n	800497a <checkAktifCalisma+0x63e>
 8004912:	bf00      	nop
 8004914:	20001113 	.word	0x20001113
 8004918:	200010d9 	.word	0x200010d9
 800491c:	2000110e 	.word	0x2000110e
 8004920:	2000110f 	.word	0x2000110f
 8004924:	40010c00 	.word	0x40010c00
 8004928:	200010fa 	.word	0x200010fa
 800492c:	2000110d 	.word	0x2000110d
 8004930:	40011000 	.word	0x40011000
 8004934:	200010c2 	.word	0x200010c2
 8004938:	200010f5 	.word	0x200010f5
 800493c:	200010f2 	.word	0x200010f2
 8004940:	200010f6 	.word	0x200010f6
 8004944:	200010f3 	.word	0x200010f3
 8004948:	200010f4 	.word	0x200010f4
 800494c:	200010f7 	.word	0x200010f7
 8004950:	200010f8 	.word	0x200010f8
 8004954:	200010fd 	.word	0x200010fd
 8004958:	2000111d 	.word	0x2000111d
 800495c:	200010ed 	.word	0x200010ed
 8004960:	20001094 	.word	0x20001094
 8004964:	200010a0 	.word	0x200010a0
 8004968:	200010d1 	.word	0x200010d1
 800496c:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004970:	2200      	movs	r2, #0
 8004972:	2101      	movs	r1, #1
 8004974:	4836      	ldr	r0, [pc, #216]	@ (8004a50 <checkAktifCalisma+0x714>)
 8004976:	f005 fe30 	bl	800a5da <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800497a:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <checkAktifCalisma+0x718>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 8080 	bne.w	8004a84 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004984:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <checkAktifCalisma+0x71c>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d003      	beq.n	8004994 <checkAktifCalisma+0x658>
 800498c:	4b32      	ldr	r3, [pc, #200]	@ (8004a58 <checkAktifCalisma+0x71c>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d177      	bne.n	8004a84 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004994:	4b31      	ldr	r3, [pc, #196]	@ (8004a5c <checkAktifCalisma+0x720>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d073      	beq.n	8004a84 <checkAktifCalisma+0x748>
 800499c:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <checkAktifCalisma+0x724>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d06f      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80049a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049a8:	4829      	ldr	r0, [pc, #164]	@ (8004a50 <checkAktifCalisma+0x714>)
 80049aa:	f005 fdff 	bl	800a5ac <HAL_GPIO_ReadPin>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d167      	bne.n	8004a84 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80049b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049b8:	482a      	ldr	r0, [pc, #168]	@ (8004a64 <checkAktifCalisma+0x728>)
 80049ba:	f005 fdf7 	bl	800a5ac <HAL_GPIO_ReadPin>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <checkAktifCalisma+0x690>
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <checkAktifCalisma+0x72c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d15b      	bne.n	8004a84 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80049cc:	2140      	movs	r1, #64	@ 0x40
 80049ce:	4825      	ldr	r0, [pc, #148]	@ (8004a64 <checkAktifCalisma+0x728>)
 80049d0:	f005 fdec 	bl	800a5ac <HAL_GPIO_ReadPin>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10f      	bne.n	80049fa <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80049da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049de:	481c      	ldr	r0, [pc, #112]	@ (8004a50 <checkAktifCalisma+0x714>)
 80049e0:	f005 fde4 	bl	800a5ac <HAL_GPIO_ReadPin>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80049ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049ee:	4818      	ldr	r0, [pc, #96]	@ (8004a50 <checkAktifCalisma+0x714>)
 80049f0:	f005 fddc 	bl	800a5ac <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <checkAktifCalisma+0x6c6>
 80049fa:	4b1c      	ldr	r3, [pc, #112]	@ (8004a6c <checkAktifCalisma+0x730>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d040      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004a02:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <checkAktifCalisma+0x734>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	f083 0301 	eor.w	r3, r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d039      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004a10:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <checkAktifCalisma+0x738>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d032      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004a1e:	4b16      	ldr	r3, [pc, #88]	@ (8004a78 <checkAktifCalisma+0x73c>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f083 0301 	eor.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02b      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004a2c:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <checkAktifCalisma+0x740>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f083 0301 	eor.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d024      	beq.n	8004a84 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004a3a:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <checkAktifCalisma+0x744>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f083 0301 	eor.w	r3, r3, #1
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01d      	beq.n	8004a84 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004a48:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <checkAktifCalisma+0x730>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e01c      	b.n	8004a8a <checkAktifCalisma+0x74e>
 8004a50:	40010c00 	.word	0x40010c00
 8004a54:	200010d9 	.word	0x200010d9
 8004a58:	200010cb 	.word	0x200010cb
 8004a5c:	2000110e 	.word	0x2000110e
 8004a60:	2000110f 	.word	0x2000110f
 8004a64:	40011000 	.word	0x40011000
 8004a68:	200010cc 	.word	0x200010cc
 8004a6c:	200010f3 	.word	0x200010f3
 8004a70:	200010f2 	.word	0x200010f2
 8004a74:	200010f6 	.word	0x200010f6
 8004a78:	200010f5 	.word	0x200010f5
 8004a7c:	200010f4 	.word	0x200010f4
 8004a80:	200010f8 	.word	0x200010f8
				} else {
					devmotoryukaricalisiyor=0;
 8004a84:	4b64      	ldr	r3, [pc, #400]	@ (8004c18 <checkAktifCalisma+0x8dc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004a8a:	4b63      	ldr	r3, [pc, #396]	@ (8004c18 <checkAktifCalisma+0x8dc>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004a92:	2201      	movs	r2, #1
 8004a94:	2120      	movs	r1, #32
 8004a96:	4861      	ldr	r0, [pc, #388]	@ (8004c1c <checkAktifCalisma+0x8e0>)
 8004a98:	f005 fd9f 	bl	800a5da <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004a9c:	4b60      	ldr	r3, [pc, #384]	@ (8004c20 <checkAktifCalisma+0x8e4>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c20 <checkAktifCalisma+0x8e4>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <checkAktifCalisma+0x7ba>
 8004aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aae:	485d      	ldr	r0, [pc, #372]	@ (8004c24 <checkAktifCalisma+0x8e8>)
 8004ab0:	f005 fd7c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d007      	beq.n	8004aca <checkAktifCalisma+0x78e>
 8004aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004abe:	4857      	ldr	r0, [pc, #348]	@ (8004c1c <checkAktifCalisma+0x8e0>)
 8004ac0:	f005 fd74 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d115      	bne.n	8004af6 <checkAktifCalisma+0x7ba>
 8004aca:	4b57      	ldr	r3, [pc, #348]	@ (8004c28 <checkAktifCalisma+0x8ec>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <checkAktifCalisma+0x7ba>
 8004ad2:	4b56      	ldr	r3, [pc, #344]	@ (8004c2c <checkAktifCalisma+0x8f0>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <checkAktifCalisma+0x7ba>
 8004ada:	4b55      	ldr	r3, [pc, #340]	@ (8004c30 <checkAktifCalisma+0x8f4>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	f083 0301 	eor.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004ae8:	4b52      	ldr	r3, [pc, #328]	@ (8004c34 <checkAktifCalisma+0x8f8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a52      	ldr	r2, [pc, #328]	@ (8004c38 <checkAktifCalisma+0x8fc>)
 8004aee:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004af0:	4b4f      	ldr	r3, [pc, #316]	@ (8004c30 <checkAktifCalisma+0x8f4>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004af6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c34 <checkAktifCalisma+0x8f8>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b4f      	ldr	r3, [pc, #316]	@ (8004c38 <checkAktifCalisma+0x8fc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	4a4e      	ldr	r2, [pc, #312]	@ (8004c3c <checkAktifCalisma+0x900>)
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d303      	bcc.n	8004b10 <checkAktifCalisma+0x7d4>
 8004b08:	4b49      	ldr	r3, [pc, #292]	@ (8004c30 <checkAktifCalisma+0x8f4>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10d      	bne.n	8004b2c <checkAktifCalisma+0x7f0>
 8004b10:	4b45      	ldr	r3, [pc, #276]	@ (8004c28 <checkAktifCalisma+0x8ec>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f083 0301 	eor.w	r3, r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <checkAktifCalisma+0x7f0>
 8004b1e:	4b43      	ldr	r3, [pc, #268]	@ (8004c2c <checkAktifCalisma+0x8f0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f083 0301 	eor.w	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2120      	movs	r1, #32
 8004b30:	483a      	ldr	r0, [pc, #232]	@ (8004c1c <checkAktifCalisma+0x8e0>)
 8004b32:	f005 fd52 	bl	800a5da <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004b36:	4b3a      	ldr	r3, [pc, #232]	@ (8004c20 <checkAktifCalisma+0x8e4>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c30 <checkAktifCalisma+0x8f4>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004b42:	4b3f      	ldr	r3, [pc, #252]	@ (8004c40 <checkAktifCalisma+0x904>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8088 	bne.w	8004c5c <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c44 <checkAktifCalisma+0x908>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <checkAktifCalisma+0x820>
 8004b54:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <checkAktifCalisma+0x908>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d17f      	bne.n	8004c5c <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004b5c:	4b32      	ldr	r3, [pc, #200]	@ (8004c28 <checkAktifCalisma+0x8ec>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d07b      	beq.n	8004c5c <checkAktifCalisma+0x920>
 8004b64:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <checkAktifCalisma+0x8f0>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d077      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004b6c:	2140      	movs	r1, #64	@ 0x40
 8004b6e:	482b      	ldr	r0, [pc, #172]	@ (8004c1c <checkAktifCalisma+0x8e0>)
 8004b70:	f005 fd1c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d170      	bne.n	8004c5c <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b7e:	4827      	ldr	r0, [pc, #156]	@ (8004c1c <checkAktifCalisma+0x8e0>)
 8004b80:	f005 fd14 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <checkAktifCalisma+0x856>
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c48 <checkAktifCalisma+0x90c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d164      	bne.n	8004c5c <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b96:	4823      	ldr	r0, [pc, #140]	@ (8004c24 <checkAktifCalisma+0x8e8>)
 8004b98:	f005 fd08 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10f      	bne.n	8004bc2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004ba2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ba6:	481f      	ldr	r0, [pc, #124]	@ (8004c24 <checkAktifCalisma+0x8e8>)
 8004ba8:	f005 fd00 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004bb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bb6:	481b      	ldr	r0, [pc, #108]	@ (8004c24 <checkAktifCalisma+0x8e8>)
 8004bb8:	f005 fcf8 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d003      	beq.n	8004bca <checkAktifCalisma+0x88e>
 8004bc2:	4b22      	ldr	r3, [pc, #136]	@ (8004c4c <checkAktifCalisma+0x910>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d048      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004bca:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <checkAktifCalisma+0x914>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f083 0301 	eor.w	r3, r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d041      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <checkAktifCalisma+0x918>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f083 0301 	eor.w	r3, r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d03a      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004be6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <checkAktifCalisma+0x91c>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d033      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <checkAktifCalisma+0x8e4>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f083 0301 	eor.w	r3, r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02c      	beq.n	8004c5c <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <checkAktifCalisma+0x8dc>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d025      	beq.n	8004c5c <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004c10:	4b0e      	ldr	r3, [pc, #56]	@ (8004c4c <checkAktifCalisma+0x910>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e024      	b.n	8004c62 <checkAktifCalisma+0x926>
 8004c18:	200010f3 	.word	0x200010f3
 8004c1c:	40011000 	.word	0x40011000
 8004c20:	200010f7 	.word	0x200010f7
 8004c24:	40010c00 	.word	0x40010c00
 8004c28:	2000110e 	.word	0x2000110e
 8004c2c:	2000110f 	.word	0x2000110f
 8004c30:	200010ef 	.word	0x200010ef
 8004c34:	20001094 	.word	0x20001094
 8004c38:	200010a0 	.word	0x200010a0
 8004c3c:	200010d2 	.word	0x200010d2
 8004c40:	200010d9 	.word	0x200010d9
 8004c44:	200010cb 	.word	0x200010cb
 8004c48:	200010cd 	.word	0x200010cd
 8004c4c:	200010f4 	.word	0x200010f4
 8004c50:	200010f2 	.word	0x200010f2
 8004c54:	200010f6 	.word	0x200010f6
 8004c58:	200010f5 	.word	0x200010f5
				} else {
					devmotorasagicalisiyor=0;
 8004c5c:	4b96      	ldr	r3, [pc, #600]	@ (8004eb8 <checkAktifCalisma+0xb7c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004c62:	4b95      	ldr	r3, [pc, #596]	@ (8004eb8 <checkAktifCalisma+0xb7c>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	4893      	ldr	r0, [pc, #588]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004c70:	f005 fcb3 	bl	800a5da <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004c74:	4b92      	ldr	r3, [pc, #584]	@ (8004ec0 <checkAktifCalisma+0xb84>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004c7a:	4b91      	ldr	r3, [pc, #580]	@ (8004ec0 <checkAktifCalisma+0xb84>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d024      	beq.n	8004ccc <checkAktifCalisma+0x990>
 8004c82:	2140      	movs	r1, #64	@ 0x40
 8004c84:	488d      	ldr	r0, [pc, #564]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004c86:	f005 fc91 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d007      	beq.n	8004ca0 <checkAktifCalisma+0x964>
 8004c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c94:	4889      	ldr	r0, [pc, #548]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004c96:	f005 fc89 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d115      	bne.n	8004ccc <checkAktifCalisma+0x990>
 8004ca0:	4b88      	ldr	r3, [pc, #544]	@ (8004ec4 <checkAktifCalisma+0xb88>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <checkAktifCalisma+0x990>
 8004ca8:	4b87      	ldr	r3, [pc, #540]	@ (8004ec8 <checkAktifCalisma+0xb8c>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00d      	beq.n	8004ccc <checkAktifCalisma+0x990>
 8004cb0:	4b86      	ldr	r3, [pc, #536]	@ (8004ecc <checkAktifCalisma+0xb90>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <checkAktifCalisma+0x990>
					timer2=millis;
 8004cbe:	4b84      	ldr	r3, [pc, #528]	@ (8004ed0 <checkAktifCalisma+0xb94>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a84      	ldr	r2, [pc, #528]	@ (8004ed4 <checkAktifCalisma+0xb98>)
 8004cc4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004cc6:	4b81      	ldr	r3, [pc, #516]	@ (8004ecc <checkAktifCalisma+0xb90>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ccc:	4b80      	ldr	r3, [pc, #512]	@ (8004ed0 <checkAktifCalisma+0xb94>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b80      	ldr	r3, [pc, #512]	@ (8004ed4 <checkAktifCalisma+0xb98>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	4a80      	ldr	r2, [pc, #512]	@ (8004ed8 <checkAktifCalisma+0xb9c>)
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d303      	bcc.n	8004ce6 <checkAktifCalisma+0x9aa>
 8004cde:	4b7b      	ldr	r3, [pc, #492]	@ (8004ecc <checkAktifCalisma+0xb90>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <checkAktifCalisma+0x9c6>
 8004ce6:	4b77      	ldr	r3, [pc, #476]	@ (8004ec4 <checkAktifCalisma+0xb88>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f083 0301 	eor.w	r3, r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <checkAktifCalisma+0x9c6>
 8004cf4:	4b74      	ldr	r3, [pc, #464]	@ (8004ec8 <checkAktifCalisma+0xb8c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f083 0301 	eor.w	r3, r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2110      	movs	r1, #16
 8004d06:	486d      	ldr	r0, [pc, #436]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004d08:	f005 fc67 	bl	800a5da <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec0 <checkAktifCalisma+0xb84>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004d12:	4b6e      	ldr	r3, [pc, #440]	@ (8004ecc <checkAktifCalisma+0xb90>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004d18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d1c:	486f      	ldr	r0, [pc, #444]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004d1e:	f005 fc45 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d120      	bne.n	8004d6a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004d28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d2c:	486b      	ldr	r0, [pc, #428]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004d2e:	f005 fc3d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d118      	bne.n	8004d6a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004d38:	2104      	movs	r1, #4
 8004d3a:	4868      	ldr	r0, [pc, #416]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004d3c:	f005 fc36 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d111      	bne.n	8004d6a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004d46:	2102      	movs	r1, #2
 8004d48:	4864      	ldr	r0, [pc, #400]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004d4a:	f005 fc2f 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004d54:	2101      	movs	r1, #1
 8004d56:	4861      	ldr	r0, [pc, #388]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004d58:	f005 fc28 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004d62:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee0 <checkAktifCalisma+0xba4>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee0 <checkAktifCalisma+0xba4>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d70:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <checkAktifCalisma+0xba8>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d144      	bne.n	8004e02 <checkAktifCalisma+0xac6>
 8004d78:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <checkAktifCalisma+0xbac>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d003      	beq.n	8004d88 <checkAktifCalisma+0xa4c>
 8004d80:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <checkAktifCalisma+0xbac>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d13c      	bne.n	8004e02 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	484c      	ldr	r0, [pc, #304]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004d8c:	f005 fc0e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <checkAktifCalisma+0xa62>
 8004d96:	4b55      	ldr	r3, [pc, #340]	@ (8004eec <checkAktifCalisma+0xbb0>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <checkAktifCalisma+0xa7a>
 8004d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004da2:	484e      	ldr	r0, [pc, #312]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004da4:	f005 fc02 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d129      	bne.n	8004e02 <checkAktifCalisma+0xac6>
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <checkAktifCalisma+0xbb0>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d125      	bne.n	8004e02 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004db6:	2104      	movs	r1, #4
 8004db8:	4840      	ldr	r0, [pc, #256]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004dba:	f005 fbf7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d003      	beq.n	8004dcc <checkAktifCalisma+0xa90>
 8004dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef0 <checkAktifCalisma+0xbb4>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11a      	bne.n	8004e02 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dcc:	2102      	movs	r1, #2
 8004dce:	483b      	ldr	r0, [pc, #236]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004dd0:	f005 fbec 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004dda:	4b46      	ldr	r3, [pc, #280]	@ (8004ef4 <checkAktifCalisma+0xbb8>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f083 0301 	eor.w	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004de8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ee0 <checkAktifCalisma+0xba4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004df0:	4b41      	ldr	r3, [pc, #260]	@ (8004ef8 <checkAktifCalisma+0xbbc>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004df6:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <checkAktifCalisma+0xb94>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a40      	ldr	r2, [pc, #256]	@ (8004efc <checkAktifCalisma+0xbc0>)
 8004dfc:	6013      	str	r3, [r2, #0]
					bekle();
 8004dfe:	f7ff f901 	bl	8004004 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004e02:	4b33      	ldr	r3, [pc, #204]	@ (8004ed0 <checkAktifCalisma+0xb94>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b3d      	ldr	r3, [pc, #244]	@ (8004efc <checkAktifCalisma+0xbc0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f00 <checkAktifCalisma+0xbc4>)
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d211      	bcs.n	8004e38 <checkAktifCalisma+0xafc>
 8004e14:	2104      	movs	r1, #4
 8004e16:	4829      	ldr	r0, [pc, #164]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004e18:	f005 fbc8 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <checkAktifCalisma+0xafc>
 8004e22:	4b33      	ldr	r3, [pc, #204]	@ (8004ef0 <checkAktifCalisma+0xbb4>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <checkAktifCalisma+0xafc>
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee0 <checkAktifCalisma+0xba4>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f083 0301 	eor.w	r3, r3, #1
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004e38:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef8 <checkAktifCalisma+0xbbc>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ee4 <checkAktifCalisma+0xba8>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d160      	bne.n	8004f08 <checkAktifCalisma+0xbcc>
 8004e46:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <checkAktifCalisma+0xbac>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d003      	beq.n	8004e56 <checkAktifCalisma+0xb1a>
 8004e4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <checkAktifCalisma+0xbac>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d158      	bne.n	8004f08 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e56:	2104      	movs	r1, #4
 8004e58:	4818      	ldr	r0, [pc, #96]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004e5a:	f005 fba7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d003      	beq.n	8004e6c <checkAktifCalisma+0xb30>
 8004e64:	4b22      	ldr	r3, [pc, #136]	@ (8004ef0 <checkAktifCalisma+0xbb4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d14d      	bne.n	8004f08 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4813      	ldr	r0, [pc, #76]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004e70:	f005 fb9c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d146      	bne.n	8004f08 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e7a:	2180      	movs	r1, #128	@ 0x80
 8004e7c:	480f      	ldr	r0, [pc, #60]	@ (8004ebc <checkAktifCalisma+0xb80>)
 8004e7e:	f005 fb95 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <checkAktifCalisma+0xb54>
 8004e88:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <checkAktifCalisma+0xbb0>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <checkAktifCalisma+0xb6c>
 8004e90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e94:	4811      	ldr	r0, [pc, #68]	@ (8004edc <checkAktifCalisma+0xba0>)
 8004e96:	f005 fb89 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d133      	bne.n	8004f08 <checkAktifCalisma+0xbcc>
 8004ea0:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <checkAktifCalisma+0xbb0>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d12f      	bne.n	8004f08 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <checkAktifCalisma+0xba4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02b      	beq.n	8004f08 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004eb0:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <checkAktifCalisma+0xbc8>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e02a      	b.n	8004f0e <checkAktifCalisma+0xbd2>
 8004eb8:	200010f4 	.word	0x200010f4
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	200010f8 	.word	0x200010f8
 8004ec4:	2000110e 	.word	0x2000110e
 8004ec8:	2000110f 	.word	0x2000110f
 8004ecc:	200010f0 	.word	0x200010f0
 8004ed0:	20001094 	.word	0x20001094
 8004ed4:	200010a0 	.word	0x200010a0
 8004ed8:	200010d2 	.word	0x200010d2
 8004edc:	40010c00 	.word	0x40010c00
 8004ee0:	200010fe 	.word	0x200010fe
 8004ee4:	200010c5 	.word	0x200010c5
 8004ee8:	200010c4 	.word	0x200010c4
 8004eec:	200010c8 	.word	0x200010c8
 8004ef0:	200010c2 	.word	0x200010c2
 8004ef4:	200010ec 	.word	0x200010ec
 8004ef8:	200010ff 	.word	0x200010ff
 8004efc:	20001098 	.word	0x20001098
 8004f00:	200010d5 	.word	0x200010d5
 8004f04:	20001100 	.word	0x20001100
				} else {
					kapi1butonkontrol=0;
 8004f08:	4b8b      	ldr	r3, [pc, #556]	@ (8005138 <checkAktifCalisma+0xdfc>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800513c <checkAktifCalisma+0xe00>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d121      	bne.n	8004f5a <checkAktifCalisma+0xc1e>
 8004f16:	4b8a      	ldr	r3, [pc, #552]	@ (8005140 <checkAktifCalisma+0xe04>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d003      	beq.n	8004f26 <checkAktifCalisma+0xbea>
 8004f1e:	4b88      	ldr	r3, [pc, #544]	@ (8005140 <checkAktifCalisma+0xe04>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d119      	bne.n	8004f5a <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f26:	2104      	movs	r1, #4
 8004f28:	4886      	ldr	r0, [pc, #536]	@ (8005144 <checkAktifCalisma+0xe08>)
 8004f2a:	f005 fb3f 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d003      	beq.n	8004f3c <checkAktifCalisma+0xc00>
 8004f34:	4b84      	ldr	r3, [pc, #528]	@ (8005148 <checkAktifCalisma+0xe0c>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10e      	bne.n	8004f5a <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4881      	ldr	r0, [pc, #516]	@ (8005144 <checkAktifCalisma+0xe08>)
 8004f40:	f005 fb34 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004f4a:	4b80      	ldr	r3, [pc, #512]	@ (800514c <checkAktifCalisma+0xe10>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004f52:	4b7f      	ldr	r3, [pc, #508]	@ (8005150 <checkAktifCalisma+0xe14>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e002      	b.n	8004f60 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005150 <checkAktifCalisma+0xe14>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004f60:	4b75      	ldr	r3, [pc, #468]	@ (8005138 <checkAktifCalisma+0xdfc>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <checkAktifCalisma+0xc3c>
 8004f68:	4b79      	ldr	r3, [pc, #484]	@ (8005150 <checkAktifCalisma+0xe14>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <checkAktifCalisma+0xc3c>
 8004f70:	4b78      	ldr	r3, [pc, #480]	@ (8005154 <checkAktifCalisma+0xe18>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2180      	movs	r1, #128	@ 0x80
 8004f7c:	4876      	ldr	r0, [pc, #472]	@ (8005158 <checkAktifCalisma+0xe1c>)
 8004f7e:	f005 fb2c 	bl	800a5da <HAL_GPIO_WritePin>
 8004f82:	e004      	b.n	8004f8e <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	4873      	ldr	r0, [pc, #460]	@ (8005158 <checkAktifCalisma+0xe1c>)
 8004f8a:	f005 fb26 	bl	800a5da <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f8e:	4b73      	ldr	r3, [pc, #460]	@ (800515c <checkAktifCalisma+0xe20>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d141      	bne.n	800501a <checkAktifCalisma+0xcde>
 8004f96:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <checkAktifCalisma+0xe04>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d003      	beq.n	8004fa6 <checkAktifCalisma+0xc6a>
 8004f9e:	4b68      	ldr	r3, [pc, #416]	@ (8005140 <checkAktifCalisma+0xe04>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d139      	bne.n	800501a <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004faa:	4866      	ldr	r0, [pc, #408]	@ (8005144 <checkAktifCalisma+0xe08>)
 8004fac:	f005 fafe 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <checkAktifCalisma+0xc82>
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005160 <checkAktifCalisma+0xe24>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <checkAktifCalisma+0xc9a>
 8004fbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fc2:	4868      	ldr	r0, [pc, #416]	@ (8005164 <checkAktifCalisma+0xe28>)
 8004fc4:	f005 faf2 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d125      	bne.n	800501a <checkAktifCalisma+0xcde>
 8004fce:	4b64      	ldr	r3, [pc, #400]	@ (8005160 <checkAktifCalisma+0xe24>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d121      	bne.n	800501a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	485a      	ldr	r0, [pc, #360]	@ (8005144 <checkAktifCalisma+0xe08>)
 8004fda:	f005 fae7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d11a      	bne.n	800501a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004fe4:	2104      	movs	r1, #4
 8004fe6:	4857      	ldr	r0, [pc, #348]	@ (8005144 <checkAktifCalisma+0xe08>)
 8004fe8:	f005 fae0 	bl	800a5ac <HAL_GPIO_ReadPin>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004ff2:	4b56      	ldr	r3, [pc, #344]	@ (800514c <checkAktifCalisma+0xe10>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00f      	beq.n	800501a <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8005168 <checkAktifCalisma+0xe2c>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8005008:	4b58      	ldr	r3, [pc, #352]	@ (800516c <checkAktifCalisma+0xe30>)
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800500e:	4b58      	ldr	r3, [pc, #352]	@ (8005170 <checkAktifCalisma+0xe34>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a58      	ldr	r2, [pc, #352]	@ (8005174 <checkAktifCalisma+0xe38>)
 8005014:	6013      	str	r3, [r2, #0]
					bekle();
 8005016:	f7fe fff5 	bl	8004004 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800501a:	4b55      	ldr	r3, [pc, #340]	@ (8005170 <checkAktifCalisma+0xe34>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b55      	ldr	r3, [pc, #340]	@ (8005174 <checkAktifCalisma+0xe38>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	4a54      	ldr	r2, [pc, #336]	@ (8005178 <checkAktifCalisma+0xe3c>)
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	4293      	cmp	r3, r2
 800502a:	d20d      	bcs.n	8005048 <checkAktifCalisma+0xd0c>
 800502c:	2102      	movs	r1, #2
 800502e:	4845      	ldr	r0, [pc, #276]	@ (8005144 <checkAktifCalisma+0xe08>)
 8005030:	f005 fabc 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <checkAktifCalisma+0xd0c>
 800503a:	4b44      	ldr	r3, [pc, #272]	@ (800514c <checkAktifCalisma+0xe10>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f083 0301 	eor.w	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8005048:	4b48      	ldr	r3, [pc, #288]	@ (800516c <checkAktifCalisma+0xe30>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800504e:	4b43      	ldr	r3, [pc, #268]	@ (800515c <checkAktifCalisma+0xe20>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d135      	bne.n	80050c2 <checkAktifCalisma+0xd86>
 8005056:	4b3a      	ldr	r3, [pc, #232]	@ (8005140 <checkAktifCalisma+0xe04>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d003      	beq.n	8005066 <checkAktifCalisma+0xd2a>
 800505e:	4b38      	ldr	r3, [pc, #224]	@ (8005140 <checkAktifCalisma+0xe04>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d12d      	bne.n	80050c2 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800506a:	4836      	ldr	r0, [pc, #216]	@ (8005144 <checkAktifCalisma+0xe08>)
 800506c:	f005 fa9e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <checkAktifCalisma+0xd42>
 8005076:	4b3a      	ldr	r3, [pc, #232]	@ (8005160 <checkAktifCalisma+0xe24>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <checkAktifCalisma+0xd5a>
 800507e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005082:	4838      	ldr	r0, [pc, #224]	@ (8005164 <checkAktifCalisma+0xe28>)
 8005084:	f005 fa92 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d119      	bne.n	80050c2 <checkAktifCalisma+0xd86>
 800508e:	4b34      	ldr	r3, [pc, #208]	@ (8005160 <checkAktifCalisma+0xe24>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d115      	bne.n	80050c2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005096:	2102      	movs	r1, #2
 8005098:	482a      	ldr	r0, [pc, #168]	@ (8005144 <checkAktifCalisma+0xe08>)
 800509a:	f005 fa87 	bl	800a5ac <HAL_GPIO_ReadPin>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10e      	bne.n	80050c2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050a4:	2104      	movs	r1, #4
 80050a6:	4827      	ldr	r0, [pc, #156]	@ (8005144 <checkAktifCalisma+0xe08>)
 80050a8:	f005 fa80 	bl	800a5ac <HAL_GPIO_ReadPin>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d107      	bne.n	80050c2 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80050b2:	4b26      	ldr	r3, [pc, #152]	@ (800514c <checkAktifCalisma+0xe10>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80050ba:	4b30      	ldr	r3, [pc, #192]	@ (800517c <checkAktifCalisma+0xe40>)
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80050c2:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <checkAktifCalisma+0xe40>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <checkAktifCalisma+0xe20>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d11d      	bne.n	800510c <checkAktifCalisma+0xdd0>
 80050d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <checkAktifCalisma+0xe04>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d003      	beq.n	80050e0 <checkAktifCalisma+0xda4>
 80050d8:	4b19      	ldr	r3, [pc, #100]	@ (8005140 <checkAktifCalisma+0xe04>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d115      	bne.n	800510c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050e0:	2102      	movs	r1, #2
 80050e2:	4818      	ldr	r0, [pc, #96]	@ (8005144 <checkAktifCalisma+0xe08>)
 80050e4:	f005 fa62 	bl	800a5ac <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10e      	bne.n	800510c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050ee:	2104      	movs	r1, #4
 80050f0:	4814      	ldr	r0, [pc, #80]	@ (8005144 <checkAktifCalisma+0xe08>)
 80050f2:	f005 fa5b 	bl	800a5ac <HAL_GPIO_ReadPin>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 80050fc:	4b13      	ldr	r3, [pc, #76]	@ (800514c <checkAktifCalisma+0xe10>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005104:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <checkAktifCalisma+0xe44>)
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e002      	b.n	8005112 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 800510c:	4b1c      	ldr	r3, [pc, #112]	@ (8005180 <checkAktifCalisma+0xe44>)
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005112:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <checkAktifCalisma+0xe40>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <checkAktifCalisma+0xdee>
 800511a:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <checkAktifCalisma+0xe44>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <checkAktifCalisma+0xdee>
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <checkAktifCalisma+0xe30>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d02c      	beq.n	8005184 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800512a:	2201      	movs	r2, #1
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	480a      	ldr	r0, [pc, #40]	@ (8005158 <checkAktifCalisma+0xe1c>)
 8005130:	f005 fa53 	bl	800a5da <HAL_GPIO_WritePin>
 8005134:	e02b      	b.n	800518e <checkAktifCalisma+0xe52>
 8005136:	bf00      	nop
 8005138:	20001100 	.word	0x20001100
 800513c:	200010c5 	.word	0x200010c5
 8005140:	200010c4 	.word	0x200010c4
 8005144:	40011000 	.word	0x40011000
 8005148:	200010c2 	.word	0x200010c2
 800514c:	200010fe 	.word	0x200010fe
 8005150:	20001101 	.word	0x20001101
 8005154:	200010ff 	.word	0x200010ff
 8005158:	40010800 	.word	0x40010800
 800515c:	200010c6 	.word	0x200010c6
 8005160:	200010c8 	.word	0x200010c8
 8005164:	40010c00 	.word	0x40010c00
 8005168:	200010ec 	.word	0x200010ec
 800516c:	20001102 	.word	0x20001102
 8005170:	20001094 	.word	0x20001094
 8005174:	20001098 	.word	0x20001098
 8005178:	200010d6 	.word	0x200010d6
 800517c:	20001103 	.word	0x20001103
 8005180:	20001104 	.word	0x20001104
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005184:	2200      	movs	r2, #0
 8005186:	2140      	movs	r1, #64	@ 0x40
 8005188:	4889      	ldr	r0, [pc, #548]	@ (80053b0 <checkAktifCalisma+0x1074>)
 800518a:	f005 fa26 	bl	800a5da <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800518e:	4b89      	ldr	r3, [pc, #548]	@ (80053b4 <checkAktifCalisma+0x1078>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <checkAktifCalisma+0xe62>
 8005196:	4b87      	ldr	r3, [pc, #540]	@ (80053b4 <checkAktifCalisma+0x1078>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d115      	bne.n	80051ca <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800519e:	2104      	movs	r1, #4
 80051a0:	4885      	ldr	r0, [pc, #532]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80051a2:	f005 fa03 	bl	800a5ac <HAL_GPIO_ReadPin>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d003      	beq.n	80051b4 <checkAktifCalisma+0xe78>
 80051ac:	4b83      	ldr	r3, [pc, #524]	@ (80053bc <checkAktifCalisma+0x1080>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80051b4:	2102      	movs	r1, #2
 80051b6:	4880      	ldr	r0, [pc, #512]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80051b8:	f005 f9f8 	bl	800a5ac <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80051c2:	4b7f      	ldr	r3, [pc, #508]	@ (80053c0 <checkAktifCalisma+0x1084>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e002      	b.n	80051d0 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80051ca:	4b7d      	ldr	r3, [pc, #500]	@ (80053c0 <checkAktifCalisma+0x1084>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80051d0:	4b78      	ldr	r3, [pc, #480]	@ (80053b4 <checkAktifCalisma+0x1078>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d003      	beq.n	80051e0 <checkAktifCalisma+0xea4>
 80051d8:	4b76      	ldr	r3, [pc, #472]	@ (80053b4 <checkAktifCalisma+0x1078>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d111      	bne.n	8005204 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80051e0:	2102      	movs	r1, #2
 80051e2:	4875      	ldr	r0, [pc, #468]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80051e4:	f005 f9e2 	bl	800a5ac <HAL_GPIO_ReadPin>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10a      	bne.n	8005204 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80051ee:	2104      	movs	r1, #4
 80051f0:	4871      	ldr	r0, [pc, #452]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80051f2:	f005 f9db 	bl	800a5ac <HAL_GPIO_ReadPin>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80051fc:	4b71      	ldr	r3, [pc, #452]	@ (80053c4 <checkAktifCalisma+0x1088>)
 80051fe:	2201      	movs	r2, #1
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e002      	b.n	800520a <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005204:	4b6f      	ldr	r3, [pc, #444]	@ (80053c4 <checkAktifCalisma+0x1088>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800520a:	4b6d      	ldr	r3, [pc, #436]	@ (80053c0 <checkAktifCalisma+0x1084>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00f      	beq.n	8005232 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005212:	4b6d      	ldr	r3, [pc, #436]	@ (80053c8 <checkAktifCalisma+0x108c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800521a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800521e:	486b      	ldr	r0, [pc, #428]	@ (80053cc <checkAktifCalisma+0x1090>)
 8005220:	f005 f9c4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800522a:	4b69      	ldr	r3, [pc, #420]	@ (80053d0 <checkAktifCalisma+0x1094>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e002      	b.n	8005238 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005232:	4b67      	ldr	r3, [pc, #412]	@ (80053d0 <checkAktifCalisma+0x1094>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005238:	4b62      	ldr	r3, [pc, #392]	@ (80053c4 <checkAktifCalisma+0x1088>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00f      	beq.n	8005260 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005240:	4b61      	ldr	r3, [pc, #388]	@ (80053c8 <checkAktifCalisma+0x108c>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10b      	bne.n	8005260 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800524c:	485f      	ldr	r0, [pc, #380]	@ (80053cc <checkAktifCalisma+0x1090>)
 800524e:	f005 f9ad 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005258:	4b5e      	ldr	r3, [pc, #376]	@ (80053d4 <checkAktifCalisma+0x1098>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e002      	b.n	8005266 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005260:	4b5c      	ldr	r3, [pc, #368]	@ (80053d4 <checkAktifCalisma+0x1098>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005266:	4b5c      	ldr	r3, [pc, #368]	@ (80053d8 <checkAktifCalisma+0x109c>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11b      	bne.n	80052a6 <checkAktifCalisma+0xf6a>
 800526e:	4b5b      	ldr	r3, [pc, #364]	@ (80053dc <checkAktifCalisma+0x10a0>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d003      	beq.n	800527e <checkAktifCalisma+0xf42>
 8005276:	4b59      	ldr	r3, [pc, #356]	@ (80053dc <checkAktifCalisma+0x10a0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d113      	bne.n	80052a6 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 800527e:	4b50      	ldr	r3, [pc, #320]	@ (80053c0 <checkAktifCalisma+0x1084>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <checkAktifCalisma+0xf52>
 8005286:	4b4f      	ldr	r3, [pc, #316]	@ (80053c4 <checkAktifCalisma+0x1088>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <checkAktifCalisma+0xf6a>
 800528e:	4b54      	ldr	r3, [pc, #336]	@ (80053e0 <checkAktifCalisma+0x10a4>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <checkAktifCalisma+0xf62>
 8005296:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <checkAktifCalisma+0x10a8>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 800529e:	4b52      	ldr	r3, [pc, #328]	@ (80053e8 <checkAktifCalisma+0x10ac>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e002      	b.n	80052ac <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80052a6:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <checkAktifCalisma+0x10ac>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052ac:	4b4a      	ldr	r3, [pc, #296]	@ (80053d8 <checkAktifCalisma+0x109c>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d148      	bne.n	8005346 <checkAktifCalisma+0x100a>
 80052b4:	4b49      	ldr	r3, [pc, #292]	@ (80053dc <checkAktifCalisma+0x10a0>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d003      	beq.n	80052c4 <checkAktifCalisma+0xf88>
 80052bc:	4b47      	ldr	r3, [pc, #284]	@ (80053dc <checkAktifCalisma+0x10a0>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d140      	bne.n	8005346 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80052c4:	4b3e      	ldr	r3, [pc, #248]	@ (80053c0 <checkAktifCalisma+0x1084>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <checkAktifCalisma+0xf98>
 80052cc:	4b3d      	ldr	r3, [pc, #244]	@ (80053c4 <checkAktifCalisma+0x1088>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d038      	beq.n	8005346 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80052d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052d8:	4837      	ldr	r0, [pc, #220]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80052da:	f005 f967 	bl	800a5ac <HAL_GPIO_ReadPin>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01c      	beq.n	800531e <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80052e4:	2180      	movs	r1, #128	@ 0x80
 80052e6:	4834      	ldr	r0, [pc, #208]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80052e8:	f005 f960 	bl	800a5ac <HAL_GPIO_ReadPin>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80052f2:	2104      	movs	r1, #4
 80052f4:	4830      	ldr	r0, [pc, #192]	@ (80053b8 <checkAktifCalisma+0x107c>)
 80052f6:	f005 f959 	bl	800a5ac <HAL_GPIO_ReadPin>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d00e      	beq.n	800531e <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005304:	482c      	ldr	r0, [pc, #176]	@ (80053b8 <checkAktifCalisma+0x107c>)
 8005306:	f005 f951 	bl	800a5ac <HAL_GPIO_ReadPin>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005310:	2102      	movs	r1, #2
 8005312:	4829      	ldr	r0, [pc, #164]	@ (80053b8 <checkAktifCalisma+0x107c>)
 8005314:	f005 f94a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d103      	bne.n	8005326 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800531e:	4b2a      	ldr	r3, [pc, #168]	@ (80053c8 <checkAktifCalisma+0x108c>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <checkAktifCalisma+0xffa>
 8005326:	4b2a      	ldr	r3, [pc, #168]	@ (80053d0 <checkAktifCalisma+0x1094>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <checkAktifCalisma+0xffa>
 800532e:	4b29      	ldr	r3, [pc, #164]	@ (80053d4 <checkAktifCalisma+0x1098>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005336:	4b2d      	ldr	r3, [pc, #180]	@ (80053ec <checkAktifCalisma+0x10b0>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800533e:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <checkAktifCalisma+0x10b4>)
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e002      	b.n	800534c <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005346:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <checkAktifCalisma+0x10b4>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800534c:	4b22      	ldr	r3, [pc, #136]	@ (80053d8 <checkAktifCalisma+0x109c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d117      	bne.n	8005384 <checkAktifCalisma+0x1048>
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <checkAktifCalisma+0x10a0>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d003      	beq.n	8005364 <checkAktifCalisma+0x1028>
 800535c:	4b1f      	ldr	r3, [pc, #124]	@ (80053dc <checkAktifCalisma+0x10a0>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d10f      	bne.n	8005384 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005364:	4b16      	ldr	r3, [pc, #88]	@ (80053c0 <checkAktifCalisma+0x1084>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <checkAktifCalisma+0x1038>
 800536c:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <checkAktifCalisma+0x1088>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005374:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <checkAktifCalisma+0x10b0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 800537c:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <checkAktifCalisma+0x10b8>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e002      	b.n	800538a <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005384:	4b1b      	ldr	r3, [pc, #108]	@ (80053f4 <checkAktifCalisma+0x10b8>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <checkAktifCalisma+0x10b4>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <checkAktifCalisma+0x1066>
 8005392:	4b15      	ldr	r3, [pc, #84]	@ (80053e8 <checkAktifCalisma+0x10ac>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <checkAktifCalisma+0x1066>
 800539a:	4b16      	ldr	r3, [pc, #88]	@ (80053f4 <checkAktifCalisma+0x10b8>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02a      	beq.n	80053f8 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80053a2:	2201      	movs	r2, #1
 80053a4:	2120      	movs	r1, #32
 80053a6:	4802      	ldr	r0, [pc, #8]	@ (80053b0 <checkAktifCalisma+0x1074>)
 80053a8:	f005 f917 	bl	800a5da <HAL_GPIO_WritePin>
 80053ac:	e029      	b.n	8005402 <checkAktifCalisma+0x10c6>
 80053ae:	bf00      	nop
 80053b0:	40010800 	.word	0x40010800
 80053b4:	200010c9 	.word	0x200010c9
 80053b8:	40011000 	.word	0x40011000
 80053bc:	200010c2 	.word	0x200010c2
 80053c0:	20001108 	.word	0x20001108
 80053c4:	20001109 	.word	0x20001109
 80053c8:	200010c8 	.word	0x200010c8
 80053cc:	40010c00 	.word	0x40010c00
 80053d0:	20001118 	.word	0x20001118
 80053d4:	20001119 	.word	0x20001119
 80053d8:	200010c7 	.word	0x200010c7
 80053dc:	200010c4 	.word	0x200010c4
 80053e0:	200010ff 	.word	0x200010ff
 80053e4:	20001102 	.word	0x20001102
 80053e8:	20001105 	.word	0x20001105
 80053ec:	200010fe 	.word	0x200010fe
 80053f0:	20001106 	.word	0x20001106
 80053f4:	20001107 	.word	0x20001107
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2120      	movs	r1, #32
 80053fc:	4887      	ldr	r0, [pc, #540]	@ (800561c <checkAktifCalisma+0x12e0>)
 80053fe:	f005 f8ec 	bl	800a5da <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005402:	4b87      	ldr	r3, [pc, #540]	@ (8005620 <checkAktifCalisma+0x12e4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <checkAktifCalisma+0x10ec>
 800540a:	2102      	movs	r1, #2
 800540c:	4885      	ldr	r0, [pc, #532]	@ (8005624 <checkAktifCalisma+0x12e8>)
 800540e:	f005 f8cd 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <checkAktifCalisma+0x10ec>
 8005418:	4b83      	ldr	r3, [pc, #524]	@ (8005628 <checkAktifCalisma+0x12ec>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <checkAktifCalisma+0x10ec>
 8005420:	4b82      	ldr	r3, [pc, #520]	@ (800562c <checkAktifCalisma+0x12f0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d112      	bne.n	800544e <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005428:	4b81      	ldr	r3, [pc, #516]	@ (8005630 <checkAktifCalisma+0x12f4>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <checkAktifCalisma+0x115a>
 8005430:	2104      	movs	r1, #4
 8005432:	487c      	ldr	r0, [pc, #496]	@ (8005624 <checkAktifCalisma+0x12e8>)
 8005434:	f005 f8ba 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d12b      	bne.n	8005496 <checkAktifCalisma+0x115a>
 800543e:	4b7a      	ldr	r3, [pc, #488]	@ (8005628 <checkAktifCalisma+0x12ec>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d027      	beq.n	8005496 <checkAktifCalisma+0x115a>
 8005446:	4b79      	ldr	r3, [pc, #484]	@ (800562c <checkAktifCalisma+0x12f0>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d023      	beq.n	8005496 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800544e:	4b79      	ldr	r3, [pc, #484]	@ (8005634 <checkAktifCalisma+0x12f8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b77      	ldr	r3, [pc, #476]	@ (8005634 <checkAktifCalisma+0x12f8>)
 8005458:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800545a:	4b76      	ldr	r3, [pc, #472]	@ (8005634 <checkAktifCalisma+0x12f8>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2bff      	cmp	r3, #255	@ 0xff
 8005460:	d108      	bne.n	8005474 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005462:	4b74      	ldr	r3, [pc, #464]	@ (8005634 <checkAktifCalisma+0x12f8>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005468:	4b73      	ldr	r3, [pc, #460]	@ (8005638 <checkAktifCalisma+0x12fc>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	4b71      	ldr	r3, [pc, #452]	@ (8005638 <checkAktifCalisma+0x12fc>)
 8005472:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005474:	4b6f      	ldr	r3, [pc, #444]	@ (8005634 <checkAktifCalisma+0x12f8>)
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	4b70      	ldr	r3, [pc, #448]	@ (800563c <checkAktifCalisma+0x1300>)
 800547a:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 800547c:	4b6e      	ldr	r3, [pc, #440]	@ (8005638 <checkAktifCalisma+0x12fc>)
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	4b6e      	ldr	r3, [pc, #440]	@ (800563c <checkAktifCalisma+0x1300>)
 8005482:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005484:	4b6e      	ldr	r3, [pc, #440]	@ (8005640 <checkAktifCalisma+0x1304>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800548a:	4b65      	ldr	r3, [pc, #404]	@ (8005620 <checkAktifCalisma+0x12e4>)
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005490:	4b67      	ldr	r3, [pc, #412]	@ (8005630 <checkAktifCalisma+0x12f4>)
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800549a:	486a      	ldr	r0, [pc, #424]	@ (8005644 <checkAktifCalisma+0x1308>)
 800549c:	f005 f886 	bl	800a5ac <HAL_GPIO_ReadPin>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80054a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054aa:	4866      	ldr	r0, [pc, #408]	@ (8005644 <checkAktifCalisma+0x1308>)
 80054ac:	f005 f87e 	bl	800a5ac <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00e      	beq.n	80054d4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80054b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054ba:	4862      	ldr	r0, [pc, #392]	@ (8005644 <checkAktifCalisma+0x1308>)
 80054bc:	f005 f876 	bl	800a5ac <HAL_GPIO_ReadPin>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80054c6:	2140      	movs	r1, #64	@ 0x40
 80054c8:	4856      	ldr	r0, [pc, #344]	@ (8005624 <checkAktifCalisma+0x12e8>)
 80054ca:	f005 f86f 	bl	800a5ac <HAL_GPIO_ReadPin>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <checkAktifCalisma+0x11a0>

					startBasili=1;
 80054d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005648 <checkAktifCalisma+0x130c>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e002      	b.n	80054e2 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80054dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005648 <checkAktifCalisma+0x130c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <checkAktifCalisma+0x130c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <checkAktifCalisma+0x11d8>
 80054ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054ee:	4855      	ldr	r0, [pc, #340]	@ (8005644 <checkAktifCalisma+0x1308>)
 80054f0:	f005 f85c 	bl	800a5ac <HAL_GPIO_ReadPin>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10c      	bne.n	8005514 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80054fa:	4b54      	ldr	r3, [pc, #336]	@ (800564c <checkAktifCalisma+0x1310>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005500:	2001      	movs	r0, #1
 8005502:	f7fb fd13 	bl	8000f2c <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005506:	2001      	movs	r0, #1
 8005508:	f7fb fcb8 	bl	8000e7c <hata2EEPROM>
					acilstophatasi=1;
 800550c:	4b50      	ldr	r3, [pc, #320]	@ (8005650 <checkAktifCalisma+0x1314>)
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e018      	b.n	8005546 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005514:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <checkAktifCalisma+0x1314>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d014      	beq.n	8005546 <checkAktifCalisma+0x120a>
 800551c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005520:	4848      	ldr	r0, [pc, #288]	@ (8005644 <checkAktifCalisma+0x1308>)
 8005522:	f005 f843 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <checkAktifCalisma+0x120a>
 800552c:	4b46      	ldr	r3, [pc, #280]	@ (8005648 <checkAktifCalisma+0x130c>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800553a:	4b45      	ldr	r3, [pc, #276]	@ (8005650 <checkAktifCalisma+0x1314>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005540:	2001      	movs	r0, #1
 8005542:	f7fe fcf1 	bl	8003f28 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005546:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <checkAktifCalisma+0x1318>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f083 0301 	eor.w	r3, r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d023      	beq.n	800559c <checkAktifCalisma+0x1260>
 8005554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005558:	483a      	ldr	r0, [pc, #232]	@ (8005644 <checkAktifCalisma+0x1308>)
 800555a:	f005 f827 	bl	800a5ac <HAL_GPIO_ReadPin>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <checkAktifCalisma+0x1230>
 8005564:	4b3c      	ldr	r3, [pc, #240]	@ (8005658 <checkAktifCalisma+0x131c>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <checkAktifCalisma+0x1260>
 800556c:	4b3b      	ldr	r3, [pc, #236]	@ (800565c <checkAktifCalisma+0x1320>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d113      	bne.n	800559c <checkAktifCalisma+0x1260>
 8005574:	4b3a      	ldr	r3, [pc, #232]	@ (8005660 <checkAktifCalisma+0x1324>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f083 0301 	eor.w	r3, r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <checkAktifCalisma+0x1260>
					hataVar=1;
 8005582:	4b32      	ldr	r3, [pc, #200]	@ (800564c <checkAktifCalisma+0x1310>)
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005588:	2002      	movs	r0, #2
 800558a:	f7fb fccf 	bl	8000f2c <hataKoduLcdGoster>
					hata2EEPROM(2);
 800558e:	2002      	movs	r0, #2
 8005590:	f7fb fc74 	bl	8000e7c <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005594:	4b32      	ldr	r3, [pc, #200]	@ (8005660 <checkAktifCalisma+0x1324>)
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e017      	b.n	80055cc <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800559c:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <checkAktifCalisma+0x1324>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <checkAktifCalisma+0x1290>
 80055a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005654 <checkAktifCalisma+0x1318>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <checkAktifCalisma+0x1290>
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <checkAktifCalisma+0x1328>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 80055ba:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <checkAktifCalisma+0x1324>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80055c0:	4b25      	ldr	r3, [pc, #148]	@ (8005658 <checkAktifCalisma+0x131c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80055c6:	2002      	movs	r0, #2
 80055c8:	f7fe fcae 	bl	8003f28 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80055cc:	4b26      	ldr	r3, [pc, #152]	@ (8005668 <checkAktifCalisma+0x132c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d151      	bne.n	8005678 <checkAktifCalisma+0x133c>
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <checkAktifCalisma+0x1330>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d14d      	bne.n	8005678 <checkAktifCalisma+0x133c>
 80055dc:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <checkAktifCalisma+0x1334>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d049      	beq.n	8005678 <checkAktifCalisma+0x133c>
 80055e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055e8:	480e      	ldr	r0, [pc, #56]	@ (8005624 <checkAktifCalisma+0x12e8>)
 80055ea:	f004 ffdf 	bl	800a5ac <HAL_GPIO_ReadPin>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d141      	bne.n	8005678 <checkAktifCalisma+0x133c>
 80055f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <checkAktifCalisma+0x1338>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d03a      	beq.n	8005678 <checkAktifCalisma+0x133c>
					hataVar=1;
 8005602:	4b12      	ldr	r3, [pc, #72]	@ (800564c <checkAktifCalisma+0x1310>)
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005608:	2003      	movs	r0, #3
 800560a:	f7fb fc8f 	bl	8000f2c <hataKoduLcdGoster>
					hata2EEPROM(3);
 800560e:	2003      	movs	r0, #3
 8005610:	f7fb fc34 	bl	8000e7c <hata2EEPROM>
					basinchatasi=1;
 8005614:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <checkAktifCalisma+0x1338>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e043      	b.n	80056a4 <checkAktifCalisma+0x1368>
 800561c:	40010800 	.word	0x40010800
 8005620:	200010fc 	.word	0x200010fc
 8005624:	40011000 	.word	0x40011000
 8005628:	200010c2 	.word	0x200010c2
 800562c:	200010fe 	.word	0x200010fe
 8005630:	200010fd 	.word	0x200010fd
 8005634:	200010b4 	.word	0x200010b4
 8005638:	200010b6 	.word	0x200010b6
 800563c:	20000fec 	.word	0x20000fec
 8005640:	200010e9 	.word	0x200010e9
 8005644:	40010c00 	.word	0x40010c00
 8005648:	2000110a 	.word	0x2000110a
 800564c:	20001111 	.word	0x20001111
 8005650:	2000110c 	.word	0x2000110c
 8005654:	20001113 	.word	0x20001113
 8005658:	2000111d 	.word	0x2000111d
 800565c:	200010c0 	.word	0x200010c0
 8005660:	2000110d 	.word	0x2000110d
 8005664:	200010f5 	.word	0x200010f5
 8005668:	200010bf 	.word	0x200010bf
 800566c:	200010c3 	.word	0x200010c3
 8005670:	20001110 	.word	0x20001110
 8005674:	2000111a 	.word	0x2000111a
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005678:	4b85      	ldr	r3, [pc, #532]	@ (8005890 <checkAktifCalisma+0x1554>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d011      	beq.n	80056a4 <checkAktifCalisma+0x1368>
 8005680:	4b84      	ldr	r3, [pc, #528]	@ (8005894 <checkAktifCalisma+0x1558>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10d      	bne.n	80056a4 <checkAktifCalisma+0x1368>
 8005688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800568c:	4882      	ldr	r0, [pc, #520]	@ (8005898 <checkAktifCalisma+0x155c>)
 800568e:	f004 ff8d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005698:	4b7d      	ldr	r3, [pc, #500]	@ (8005890 <checkAktifCalisma+0x1554>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800569e:	2003      	movs	r0, #3
 80056a0:	f7fe fc42 	bl	8003f28 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80056a4:	4b7d      	ldr	r3, [pc, #500]	@ (800589c <checkAktifCalisma+0x1560>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <checkAktifCalisma+0x1378>
 80056ac:	4b7c      	ldr	r3, [pc, #496]	@ (80058a0 <checkAktifCalisma+0x1564>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d023      	beq.n	80056fc <checkAktifCalisma+0x13c0>
 80056b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056b8:	487a      	ldr	r0, [pc, #488]	@ (80058a4 <checkAktifCalisma+0x1568>)
 80056ba:	f004 ff77 	bl	800a5ac <HAL_GPIO_ReadPin>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d11b      	bne.n	80056fc <checkAktifCalisma+0x13c0>
 80056c4:	4b78      	ldr	r3, [pc, #480]	@ (80058a8 <checkAktifCalisma+0x156c>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d003      	beq.n	80056d4 <checkAktifCalisma+0x1398>
 80056cc:	4b76      	ldr	r3, [pc, #472]	@ (80058a8 <checkAktifCalisma+0x156c>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d113      	bne.n	80056fc <checkAktifCalisma+0x13c0>
 80056d4:	4b75      	ldr	r3, [pc, #468]	@ (80058ac <checkAktifCalisma+0x1570>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f083 0301 	eor.w	r3, r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <checkAktifCalisma+0x13c0>
					hataVar=1;
 80056e2:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <checkAktifCalisma+0x1574>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80056e8:	2004      	movs	r0, #4
 80056ea:	f7fb fc1f 	bl	8000f2c <hataKoduLcdGoster>
					hata2EEPROM(4);
 80056ee:	2004      	movs	r0, #4
 80056f0:	f7fb fbc4 	bl	8000e7c <hata2EEPROM>
					katkapisivicihatasi=1;
 80056f4:	4b6d      	ldr	r3, [pc, #436]	@ (80058ac <checkAktifCalisma+0x1570>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e01f      	b.n	800573c <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80056fc:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <checkAktifCalisma+0x1570>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01b      	beq.n	800573c <checkAktifCalisma+0x1400>
 8005704:	4b6b      	ldr	r3, [pc, #428]	@ (80058b4 <checkAktifCalisma+0x1578>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d017      	beq.n	800573c <checkAktifCalisma+0x1400>
 800570c:	4b63      	ldr	r3, [pc, #396]	@ (800589c <checkAktifCalisma+0x1560>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d010      	beq.n	800573c <checkAktifCalisma+0x1400>
 800571a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800571e:	4861      	ldr	r0, [pc, #388]	@ (80058a4 <checkAktifCalisma+0x1568>)
 8005720:	f004 ff44 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800572a:	4b60      	ldr	r3, [pc, #384]	@ (80058ac <checkAktifCalisma+0x1570>)
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005730:	4b5b      	ldr	r3, [pc, #364]	@ (80058a0 <checkAktifCalisma+0x1564>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005736:	2004      	movs	r0, #4
 8005738:	f7fe fbf6 	bl	8003f28 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800573c:	4b57      	ldr	r3, [pc, #348]	@ (800589c <checkAktifCalisma+0x1560>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <checkAktifCalisma+0x1410>
 8005744:	4b5c      	ldr	r3, [pc, #368]	@ (80058b8 <checkAktifCalisma+0x157c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <checkAktifCalisma+0x1458>
 800574c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005750:	4854      	ldr	r0, [pc, #336]	@ (80058a4 <checkAktifCalisma+0x1568>)
 8005752:	f004 ff2b 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11b      	bne.n	8005794 <checkAktifCalisma+0x1458>
 800575c:	4b52      	ldr	r3, [pc, #328]	@ (80058a8 <checkAktifCalisma+0x156c>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d003      	beq.n	800576c <checkAktifCalisma+0x1430>
 8005764:	4b50      	ldr	r3, [pc, #320]	@ (80058a8 <checkAktifCalisma+0x156c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d113      	bne.n	8005794 <checkAktifCalisma+0x1458>
 800576c:	4b53      	ldr	r3, [pc, #332]	@ (80058bc <checkAktifCalisma+0x1580>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f083 0301 	eor.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <checkAktifCalisma+0x1458>

					hataVar=1;
 800577a:	4b4d      	ldr	r3, [pc, #308]	@ (80058b0 <checkAktifCalisma+0x1574>)
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005780:	2005      	movs	r0, #5
 8005782:	f7fb fbd3 	bl	8000f2c <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005786:	2005      	movs	r0, #5
 8005788:	f7fb fb78 	bl	8000e7c <hata2EEPROM>
					tablakapisivicihatasi=1;
 800578c:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <checkAktifCalisma+0x1580>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e023      	b.n	80057dc <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005794:	4b49      	ldr	r3, [pc, #292]	@ (80058bc <checkAktifCalisma+0x1580>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <checkAktifCalisma+0x14a0>
 800579c:	4b45      	ldr	r3, [pc, #276]	@ (80058b4 <checkAktifCalisma+0x1578>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01b      	beq.n	80057dc <checkAktifCalisma+0x14a0>
 80057a4:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <checkAktifCalisma+0x1560>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d014      	beq.n	80057dc <checkAktifCalisma+0x14a0>
 80057b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057b6:	483b      	ldr	r0, [pc, #236]	@ (80058a4 <checkAktifCalisma+0x1568>)
 80057b8:	f004 fef8 	bl	800a5ac <HAL_GPIO_ReadPin>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10c      	bne.n	80057dc <checkAktifCalisma+0x14a0>
 80057c2:	4b3c      	ldr	r3, [pc, #240]	@ (80058b4 <checkAktifCalisma+0x1578>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80057ca:	4b3c      	ldr	r3, [pc, #240]	@ (80058bc <checkAktifCalisma+0x1580>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80057d0:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <checkAktifCalisma+0x157c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80057d6:	2005      	movs	r0, #5
 80057d8:	f7fe fba6 	bl	8003f28 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80057dc:	4b38      	ldr	r3, [pc, #224]	@ (80058c0 <checkAktifCalisma+0x1584>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <checkAktifCalisma+0x14b8>
 80057e4:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <checkAktifCalisma+0x1588>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <checkAktifCalisma+0x14b8>
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <checkAktifCalisma+0x158c>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01b      	beq.n	800582c <checkAktifCalisma+0x14f0>
 80057f4:	4b35      	ldr	r3, [pc, #212]	@ (80058cc <checkAktifCalisma+0x1590>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d014      	beq.n	800582c <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005802:	4b33      	ldr	r3, [pc, #204]	@ (80058d0 <checkAktifCalisma+0x1594>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b33      	ldr	r3, [pc, #204]	@ (80058d4 <checkAktifCalisma+0x1598>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	4a32      	ldr	r2, [pc, #200]	@ (80058d8 <checkAktifCalisma+0x159c>)
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	4293      	cmp	r3, r2
 8005812:	d30b      	bcc.n	800582c <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005814:	4b26      	ldr	r3, [pc, #152]	@ (80058b0 <checkAktifCalisma+0x1574>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800581a:	2006      	movs	r0, #6
 800581c:	f7fb fb86 	bl	8000f2c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005820:	2006      	movs	r0, #6
 8005822:	f7fb fb2b 	bl	8000e7c <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <checkAktifCalisma+0x1590>)
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800582c:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <checkAktifCalisma+0x1590>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <checkAktifCalisma+0x1520>
 8005834:	2108      	movs	r1, #8
 8005836:	481b      	ldr	r0, [pc, #108]	@ (80058a4 <checkAktifCalisma+0x1568>)
 8005838:	f004 feb8 	bl	800a5ac <HAL_GPIO_ReadPin>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00c      	beq.n	800585c <checkAktifCalisma+0x1520>
 8005842:	4b16      	ldr	r3, [pc, #88]	@ (800589c <checkAktifCalisma+0x1560>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005850:	4b1e      	ldr	r3, [pc, #120]	@ (80058cc <checkAktifCalisma+0x1590>)
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005856:	2006      	movs	r0, #6
 8005858:	f7fe fb66 	bl	8003f28 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800585c:	4b1f      	ldr	r3, [pc, #124]	@ (80058dc <checkAktifCalisma+0x15a0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <checkAktifCalisma+0x1540>
 8005864:	4b17      	ldr	r3, [pc, #92]	@ (80058c4 <checkAktifCalisma+0x1588>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d107      	bne.n	800587c <checkAktifCalisma+0x1540>
 800586c:	4b1c      	ldr	r3, [pc, #112]	@ (80058e0 <checkAktifCalisma+0x15a4>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <checkAktifCalisma+0x1540>
 8005874:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <checkAktifCalisma+0x158c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d035      	beq.n	80058e8 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <checkAktifCalisma+0x15a8>)
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005882:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <checkAktifCalisma+0x1564>)
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <checkAktifCalisma+0x157c>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e032      	b.n	80058f6 <checkAktifCalisma+0x15ba>
 8005890:	2000111a 	.word	0x2000111a
 8005894:	200010bf 	.word	0x200010bf
 8005898:	40010c00 	.word	0x40010c00
 800589c:	2000110a 	.word	0x2000110a
 80058a0:	2000111e 	.word	0x2000111e
 80058a4:	40010800 	.word	0x40010800
 80058a8:	200010c4 	.word	0x200010c4
 80058ac:	2000111b 	.word	0x2000111b
 80058b0:	20001111 	.word	0x20001111
 80058b4:	200010fe 	.word	0x200010fe
 80058b8:	2000111f 	.word	0x2000111f
 80058bc:	2000111c 	.word	0x2000111c
 80058c0:	20001110 	.word	0x20001110
 80058c4:	200010f5 	.word	0x200010f5
 80058c8:	200010f4 	.word	0x200010f4
 80058cc:	2000110b 	.word	0x2000110b
 80058d0:	20001094 	.word	0x20001094
 80058d4:	200010a8 	.word	0x200010a8
 80058d8:	200010d4 	.word	0x200010d4
 80058dc:	200010f2 	.word	0x200010f2
 80058e0:	200010f3 	.word	0x200010f3
 80058e4:	20001112 	.word	0x20001112
				} else {
					makineCalisiyor=1;
 80058e8:	4b3a      	ldr	r3, [pc, #232]	@ (80059d4 <checkAktifCalisma+0x1698>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80058ee:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <checkAktifCalisma+0x169c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a3a      	ldr	r2, [pc, #232]	@ (80059dc <checkAktifCalisma+0x16a0>)
 80058f4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80058f6:	4b3a      	ldr	r3, [pc, #232]	@ (80059e0 <checkAktifCalisma+0x16a4>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02f      	beq.n	800595e <checkAktifCalisma+0x1622>
 80058fe:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <checkAktifCalisma+0x16a8>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f083 0301 	eor.w	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d028      	beq.n	800595e <checkAktifCalisma+0x1622>
 800590c:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <checkAktifCalisma+0x16ac>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f083 0301 	eor.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d021      	beq.n	800595e <checkAktifCalisma+0x1622>
 800591a:	4b34      	ldr	r3, [pc, #208]	@ (80059ec <checkAktifCalisma+0x16b0>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01a      	beq.n	800595e <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005928:	4b31      	ldr	r3, [pc, #196]	@ (80059f0 <checkAktifCalisma+0x16b4>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d013      	beq.n	800595e <checkAktifCalisma+0x1622>
 8005936:	4b2f      	ldr	r3, [pc, #188]	@ (80059f4 <checkAktifCalisma+0x16b8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <checkAktifCalisma+0x1622>
 8005944:	4b2c      	ldr	r3, [pc, #176]	@ (80059f8 <checkAktifCalisma+0x16bc>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f083 0301 	eor.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <checkAktifCalisma+0x1622>

					hataVar=0;
 8005952:	4b23      	ldr	r3, [pc, #140]	@ (80059e0 <checkAktifCalisma+0x16a4>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005958:	2007      	movs	r0, #7
 800595a:	f7fe fae5 	bl	8003f28 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <checkAktifCalisma+0x16a4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02a      	beq.n	80059bc <checkAktifCalisma+0x1680>
 8005966:	4b1f      	ldr	r3, [pc, #124]	@ (80059e4 <checkAktifCalisma+0x16a8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d023      	beq.n	80059bc <checkAktifCalisma+0x1680>
 8005974:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <checkAktifCalisma+0x16ac>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01f      	beq.n	80059bc <checkAktifCalisma+0x1680>
 800597c:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <checkAktifCalisma+0x16b0>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f083 0301 	eor.w	r3, r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800598a:	4b19      	ldr	r3, [pc, #100]	@ (80059f0 <checkAktifCalisma+0x16b4>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f083 0301 	eor.w	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d011      	beq.n	80059bc <checkAktifCalisma+0x1680>
 8005998:	4b16      	ldr	r3, [pc, #88]	@ (80059f4 <checkAktifCalisma+0x16b8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f083 0301 	eor.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <checkAktifCalisma+0x1680>
 80059a6:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <checkAktifCalisma+0x16bc>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 80059b4:	4b11      	ldr	r3, [pc, #68]	@ (80059fc <checkAktifCalisma+0x16c0>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80059ba:	e009      	b.n	80059d0 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <checkAktifCalisma+0x16ac>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f083 0301 	eor.w	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <checkAktifCalisma+0x16c0>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20001112 	.word	0x20001112
 80059d8:	20001094 	.word	0x20001094
 80059dc:	200010a8 	.word	0x200010a8
 80059e0:	20001111 	.word	0x20001111
 80059e4:	2000110c 	.word	0x2000110c
 80059e8:	2000110d 	.word	0x2000110d
 80059ec:	2000111a 	.word	0x2000111a
 80059f0:	2000111b 	.word	0x2000111b
 80059f4:	2000111c 	.word	0x2000111c
 80059f8:	2000110b 	.word	0x2000110b
 80059fc:	20001120 	.word	0x20001120

08005a00 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005a04:	4b8b      	ldr	r3, [pc, #556]	@ (8005c34 <checkDemoModCalisma+0x234>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f040 81c4 	bne.w	8005d96 <checkDemoModCalisma+0x396>
 8005a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8005c38 <checkDemoModCalisma+0x238>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 81bf 	beq.w	8005d96 <checkDemoModCalisma+0x396>
 8005a18:	4b88      	ldr	r3, [pc, #544]	@ (8005c3c <checkDemoModCalisma+0x23c>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f040 81ba 	bne.w	8005d96 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a22:	2102      	movs	r1, #2
 8005a24:	4886      	ldr	r0, [pc, #536]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005a26:	f004 fdc1 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11d      	bne.n	8005a6c <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005a30:	4b84      	ldr	r3, [pc, #528]	@ (8005c44 <checkDemoModCalisma+0x244>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f083 0301 	eor.w	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005a3e:	4b82      	ldr	r3, [pc, #520]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00f      	beq.n	8005a6c <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f083 0301 	eor.w	r3, r3, #1
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	487c      	ldr	r0, [pc, #496]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005a60:	f004 fdbb 	bl	800a5da <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005a64:	4b7b      	ldr	r3, [pc, #492]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e00e      	b.n	8005a8a <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4874      	ldr	r0, [pc, #464]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005a70:	f004 fd9c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	4874      	ldr	r0, [pc, #464]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005a80:	f004 fdab 	bl	800a5da <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005a84:	4b73      	ldr	r3, [pc, #460]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005a8a:	4b72      	ldr	r3, [pc, #456]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <checkDemoModCalisma+0xaa>
 8005a92:	4b6d      	ldr	r3, [pc, #436]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d107      	bne.n	8005aaa <checkDemoModCalisma+0xaa>
 8005a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <checkDemoModCalisma+0xaa>
 8005aa2:	4b68      	ldr	r3, [pc, #416]	@ (8005c44 <checkDemoModCalisma+0x244>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ab0:	4867      	ldr	r0, [pc, #412]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005ab2:	f004 fd92 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005abc:	4864      	ldr	r0, [pc, #400]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005abe:	f004 fd8c 	bl	800a5da <HAL_GPIO_WritePin>
 8005ac2:	e00b      	b.n	8005adc <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005aca:	4861      	ldr	r0, [pc, #388]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005acc:	f004 fd85 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ad6:	485e      	ldr	r0, [pc, #376]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005ad8:	f004 fd7f 	bl	800a5da <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005adc:	2102      	movs	r1, #2
 8005ade:	4858      	ldr	r0, [pc, #352]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005ae0:	f004 fd64 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10d      	bne.n	8005b06 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005aee:	4854      	ldr	r0, [pc, #336]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005af0:	f004 fd5c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005afa:	4b56      	ldr	r3, [pc, #344]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f083 0301 	eor.w	r3, r3, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b06:	2102      	movs	r1, #2
 8005b08:	484d      	ldr	r0, [pc, #308]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b0a:	f004 fd4f 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d125      	bne.n	8005b60 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b18:	4849      	ldr	r0, [pc, #292]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b1a:	f004 fd47 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005b24:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f083 0301 	eor.w	r3, r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005b32:	4b44      	ldr	r3, [pc, #272]	@ (8005c44 <checkDemoModCalisma+0x244>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f083 0301 	eor.w	r3, r3, #1
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005b40:	4b42      	ldr	r3, [pc, #264]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f083 0301 	eor.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b4e:	2201      	movs	r2, #1
 8005b50:	2120      	movs	r1, #32
 8005b52:	483b      	ldr	r0, [pc, #236]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b54:	f004 fd41 	bl	800a5da <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005b58:	4b3b      	ldr	r3, [pc, #236]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e007      	b.n	8005b70 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b60:	2200      	movs	r2, #0
 8005b62:	2120      	movs	r1, #32
 8005b64:	4836      	ldr	r0, [pc, #216]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b66:	f004 fd38 	bl	800a5da <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005b6a:	4b37      	ldr	r3, [pc, #220]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b70:	2102      	movs	r1, #2
 8005b72:	4833      	ldr	r0, [pc, #204]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b74:	f004 fd1a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d125      	bne.n	8005bca <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005b7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b82:	482f      	ldr	r0, [pc, #188]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005b84:	f004 fd12 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11d      	bne.n	8005bca <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005b8e:	4b31      	ldr	r3, [pc, #196]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f083 0301 	eor.w	r3, r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00f      	beq.n	8005bca <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005baa:	4b26      	ldr	r3, [pc, #152]	@ (8005c44 <checkDemoModCalisma+0x244>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2110      	movs	r1, #16
 8005bbc:	4820      	ldr	r0, [pc, #128]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005bbe:	f004 fd0c 	bl	800a5da <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005bc2:	4b22      	ldr	r3, [pc, #136]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e007      	b.n	8005bda <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2110      	movs	r1, #16
 8005bce:	481c      	ldr	r0, [pc, #112]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005bd0:	f004 fd03 	bl	800a5da <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bda:	2104      	movs	r1, #4
 8005bdc:	4818      	ldr	r0, [pc, #96]	@ (8005c40 <checkDemoModCalisma+0x240>)
 8005bde:	f004 fce5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d139      	bne.n	8005c5c <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005be8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <checkDemoModCalisma+0x254>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f083 0301 	eor.w	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d032      	beq.n	8005c5c <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <checkDemoModCalisma+0x24c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f083 0301 	eor.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02b      	beq.n	8005c5c <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005c04:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <checkDemoModCalisma+0x248>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f083 0301 	eor.w	r3, r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d024      	beq.n	8005c5c <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005c12:	2201      	movs	r2, #1
 8005c14:	2102      	movs	r1, #2
 8005c16:	480e      	ldr	r0, [pc, #56]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005c18:	f004 fcdf 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2101      	movs	r1, #1
 8005c20:	480b      	ldr	r0, [pc, #44]	@ (8005c50 <checkDemoModCalisma+0x250>)
 8005c22:	f004 fcda 	bl	800a5da <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005c26:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <checkDemoModCalisma+0x244>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <checkDemoModCalisma+0x258>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e027      	b.n	8005c84 <checkDemoModCalisma+0x284>
 8005c34:	200010da 	.word	0x200010da
 8005c38:	2000110e 	.word	0x2000110e
 8005c3c:	200010d9 	.word	0x200010d9
 8005c40:	40011000 	.word	0x40011000
 8005c44:	20001115 	.word	0x20001115
 8005c48:	20001116 	.word	0x20001116
 8005c4c:	20001117 	.word	0x20001117
 8005c50:	40010c00 	.word	0x40010c00
 8005c54:	20001114 	.word	0x20001114
 8005c58:	200010fb 	.word	0x200010fb
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	486d      	ldr	r0, [pc, #436]	@ (8005e14 <checkDemoModCalisma+0x414>)
 8005c60:	f004 fca4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10c      	bne.n	8005c84 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	486a      	ldr	r0, [pc, #424]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005c70:	f004 fcb3 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c74:	2200      	movs	r2, #0
 8005c76:	2101      	movs	r1, #1
 8005c78:	4867      	ldr	r0, [pc, #412]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005c7a:	f004 fcae 	bl	800a5da <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005c7e:	4b67      	ldr	r3, [pc, #412]	@ (8005e1c <checkDemoModCalisma+0x41c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005c84:	2104      	movs	r1, #4
 8005c86:	4863      	ldr	r0, [pc, #396]	@ (8005e14 <checkDemoModCalisma+0x414>)
 8005c88:	f004 fc90 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10d      	bne.n	8005cae <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005c92:	2201      	movs	r2, #1
 8005c94:	2180      	movs	r1, #128	@ 0x80
 8005c96:	4862      	ldr	r0, [pc, #392]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005c98:	f004 fc9f 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	2120      	movs	r1, #32
 8005ca0:	485f      	ldr	r0, [pc, #380]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005ca2:	f004 fc9a 	bl	800a5da <HAL_GPIO_WritePin>
					timer3 = millis;
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e24 <checkDemoModCalisma+0x424>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5f      	ldr	r2, [pc, #380]	@ (8005e28 <checkDemoModCalisma+0x428>)
 8005cac:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005cae:	4b5d      	ldr	r3, [pc, #372]	@ (8005e24 <checkDemoModCalisma+0x424>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e28 <checkDemoModCalisma+0x428>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d909      	bls.n	8005cd0 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	@ 0x80
 8005cc0:	4857      	ldr	r0, [pc, #348]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005cc2:	f004 fc8a 	bl	800a5da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	4855      	ldr	r0, [pc, #340]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005ccc:	f004 fc85 	bl	800a5da <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4850      	ldr	r0, [pc, #320]	@ (8005e14 <checkDemoModCalisma+0x414>)
 8005cd4:	f004 fc6a 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d108      	bne.n	8005cf0 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2140      	movs	r1, #64	@ 0x40
 8005ce2:	484f      	ldr	r0, [pc, #316]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005ce4:	f004 fc79 	bl	800a5da <HAL_GPIO_WritePin>
					timer3 = millis;
 8005ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8005e24 <checkDemoModCalisma+0x424>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a4e      	ldr	r2, [pc, #312]	@ (8005e28 <checkDemoModCalisma+0x428>)
 8005cee:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8005e24 <checkDemoModCalisma+0x424>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8005e28 <checkDemoModCalisma+0x428>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d904      	bls.n	8005d08 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2140      	movs	r1, #64	@ 0x40
 8005d02:	4847      	ldr	r0, [pc, #284]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005d04:	f004 fc69 	bl	800a5da <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005d08:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <checkDemoModCalisma+0x42c>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d024      	beq.n	8005d5a <checkDemoModCalisma+0x35a>
 8005d10:	4b47      	ldr	r3, [pc, #284]	@ (8005e30 <checkDemoModCalisma+0x430>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005d18:	4b46      	ldr	r3, [pc, #280]	@ (8005e34 <checkDemoModCalisma+0x434>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b44      	ldr	r3, [pc, #272]	@ (8005e34 <checkDemoModCalisma+0x434>)
 8005d22:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005d24:	4b44      	ldr	r3, [pc, #272]	@ (8005e38 <checkDemoModCalisma+0x438>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2bff      	cmp	r3, #255	@ 0xff
 8005d2a:	d108      	bne.n	8005d3e <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005d2c:	4b42      	ldr	r3, [pc, #264]	@ (8005e38 <checkDemoModCalisma+0x438>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005d32:	4b42      	ldr	r3, [pc, #264]	@ (8005e3c <checkDemoModCalisma+0x43c>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b40      	ldr	r3, [pc, #256]	@ (8005e3c <checkDemoModCalisma+0x43c>)
 8005d3c:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e34 <checkDemoModCalisma+0x434>)
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	4b3f      	ldr	r3, [pc, #252]	@ (8005e40 <checkDemoModCalisma+0x440>)
 8005d44:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005d46:	4b3f      	ldr	r3, [pc, #252]	@ (8005e44 <checkDemoModCalisma+0x444>)
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e40 <checkDemoModCalisma+0x440>)
 8005d4c:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e48 <checkDemoModCalisma+0x448>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005d54:	4b36      	ldr	r3, [pc, #216]	@ (8005e30 <checkDemoModCalisma+0x430>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e4c <checkDemoModCalisma+0x44c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d156      	bne.n	8005e10 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005d62:	4a3b      	ldr	r2, [pc, #236]	@ (8005e50 <checkDemoModCalisma+0x450>)
 8005d64:	2101      	movs	r1, #1
 8005d66:	2002      	movs	r0, #2
 8005d68:	f003 f8f6 	bl	8008f58 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005d6c:	4a39      	ldr	r2, [pc, #228]	@ (8005e54 <checkDemoModCalisma+0x454>)
 8005d6e:	2101      	movs	r1, #1
 8005d70:	2001      	movs	r0, #1
 8005d72:	f003 f8f1 	bl	8008f58 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005d76:	4b2f      	ldr	r3, [pc, #188]	@ (8005e34 <checkDemoModCalisma+0x434>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	220a      	movs	r2, #10
 8005d7c:	4936      	ldr	r1, [pc, #216]	@ (8005e58 <checkDemoModCalisma+0x458>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f007 fc40 	bl	800d604 <itoa>
					lcd_print(2,11,snum);
 8005d84:	4a34      	ldr	r2, [pc, #208]	@ (8005e58 <checkDemoModCalisma+0x458>)
 8005d86:	210b      	movs	r1, #11
 8005d88:	2002      	movs	r0, #2
 8005d8a:	f003 f8e5 	bl	8008f58 <lcd_print>
					mesajYazildi=1;
 8005d8e:	4b33      	ldr	r3, [pc, #204]	@ (8005e5c <checkDemoModCalisma+0x45c>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005d94:	e03c      	b.n	8005e10 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005d96:	4b32      	ldr	r3, [pc, #200]	@ (8005e60 <checkDemoModCalisma+0x460>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d003      	beq.n	8005da6 <checkDemoModCalisma+0x3a6>
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <checkDemoModCalisma+0x44c>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d134      	bne.n	8005e10 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dac:	481a      	ldr	r0, [pc, #104]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005dae:	f004 fc14 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005db2:	2200      	movs	r2, #0
 8005db4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005db8:	4817      	ldr	r0, [pc, #92]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005dba:	f004 fc0e 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	4815      	ldr	r0, [pc, #84]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005dc4:	f004 fc09 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2102      	movs	r1, #2
 8005dcc:	4812      	ldr	r0, [pc, #72]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005dce:	f004 fc04 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4810      	ldr	r0, [pc, #64]	@ (8005e18 <checkDemoModCalisma+0x418>)
 8005dd8:	f004 fbff 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2120      	movs	r1, #32
 8005de0:	480c      	ldr	r0, [pc, #48]	@ (8005e14 <checkDemoModCalisma+0x414>)
 8005de2:	f004 fbfa 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2110      	movs	r1, #16
 8005dea:	480a      	ldr	r0, [pc, #40]	@ (8005e14 <checkDemoModCalisma+0x414>)
 8005dec:	f004 fbf5 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2180      	movs	r1, #128	@ 0x80
 8005df4:	480a      	ldr	r0, [pc, #40]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005df6:	f004 fbf0 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2140      	movs	r1, #64	@ 0x40
 8005dfe:	4808      	ldr	r0, [pc, #32]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005e00:	f004 fbeb 	bl	800a5da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2120      	movs	r1, #32
 8005e08:	4805      	ldr	r0, [pc, #20]	@ (8005e20 <checkDemoModCalisma+0x420>)
 8005e0a:	f004 fbe6 	bl	800a5da <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005e0e:	e7ff      	b.n	8005e10 <checkDemoModCalisma+0x410>
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40011000 	.word	0x40011000
 8005e18:	40010c00 	.word	0x40010c00
 8005e1c:	20001115 	.word	0x20001115
 8005e20:	40010800 	.word	0x40010800
 8005e24:	20001094 	.word	0x20001094
 8005e28:	200010a4 	.word	0x200010a4
 8005e2c:	20001114 	.word	0x20001114
 8005e30:	200010fb 	.word	0x200010fb
 8005e34:	200010b5 	.word	0x200010b5
 8005e38:	200010b4 	.word	0x200010b4
 8005e3c:	200010b6 	.word	0x200010b6
 8005e40:	20000fec 	.word	0x20000fec
 8005e44:	200010b7 	.word	0x200010b7
 8005e48:	200010e9 	.word	0x200010e9
 8005e4c:	200010d9 	.word	0x200010d9
 8005e50:	0800eb18 	.word	0x0800eb18
 8005e54:	0800eb24 	.word	0x0800eb24
 8005e58:	2000105c 	.word	0x2000105c
 8005e5c:	200010f1 	.word	0x200010f1
 8005e60:	200010da 	.word	0x200010da

08005e64 <mainLoop>:

void mainLoop() {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005e68:	f7fe f8b6 	bl	8003fd8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	488b      	ldr	r0, [pc, #556]	@ (800609c <mainLoop+0x238>)
 8005e70:	f004 fb9c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d136      	bne.n	8005ee8 <mainLoop+0x84>
 8005e7a:	2108      	movs	r1, #8
 8005e7c:	4888      	ldr	r0, [pc, #544]	@ (80060a0 <mainLoop+0x23c>)
 8005e7e:	f004 fb95 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d12f      	bne.n	8005ee8 <mainLoop+0x84>
 8005e88:	2102      	movs	r1, #2
 8005e8a:	4884      	ldr	r0, [pc, #528]	@ (800609c <mainLoop+0x238>)
 8005e8c:	f004 fb8e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d128      	bne.n	8005ee8 <mainLoop+0x84>
 8005e96:	2104      	movs	r1, #4
 8005e98:	4880      	ldr	r0, [pc, #512]	@ (800609c <mainLoop+0x238>)
 8005e9a:	f004 fb87 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d121      	bne.n	8005ee8 <mainLoop+0x84>
 8005ea4:	2108      	movs	r1, #8
 8005ea6:	487d      	ldr	r0, [pc, #500]	@ (800609c <mainLoop+0x238>)
 8005ea8:	f004 fb80 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11a      	bne.n	8005ee8 <mainLoop+0x84>
 8005eb2:	2180      	movs	r1, #128	@ 0x80
 8005eb4:	487a      	ldr	r0, [pc, #488]	@ (80060a0 <mainLoop+0x23c>)
 8005eb6:	f004 fb79 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d113      	bne.n	8005ee8 <mainLoop+0x84>
 8005ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ec4:	4876      	ldr	r0, [pc, #472]	@ (80060a0 <mainLoop+0x23c>)
 8005ec6:	f004 fb71 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10b      	bne.n	8005ee8 <mainLoop+0x84>
 8005ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ed4:	4872      	ldr	r0, [pc, #456]	@ (80060a0 <mainLoop+0x23c>)
 8005ed6:	f004 fb69 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d103      	bne.n	8005ee8 <mainLoop+0x84>
			butonKontrol=0;
 8005ee0:	4b70      	ldr	r3, [pc, #448]	@ (80060a4 <mainLoop+0x240>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e003      	b.n	8005ef0 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80060a8 <mainLoop+0x244>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a6f      	ldr	r2, [pc, #444]	@ (80060ac <mainLoop+0x248>)
 8005eee:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005ef0:	f7fe f924 	bl	800413c <buttonCheck>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d103      	bne.n	8005f02 <mainLoop+0x9e>
			backLightTimer = millis;
 8005efa:	4b6b      	ldr	r3, [pc, #428]	@ (80060a8 <mainLoop+0x244>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a6b      	ldr	r2, [pc, #428]	@ (80060ac <mainLoop+0x248>)
 8005f00:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005f02:	4b6b      	ldr	r3, [pc, #428]	@ (80060b0 <mainLoop+0x24c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005f0a:	4b69      	ldr	r3, [pc, #420]	@ (80060b0 <mainLoop+0x24c>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005f10:	2001      	movs	r0, #1
 8005f12:	f7fa fbcf 	bl	80006b4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005f16:	4b67      	ldr	r3, [pc, #412]	@ (80060b4 <mainLoop+0x250>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f083 0301 	eor.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d043      	beq.n	8005fac <mainLoop+0x148>
 8005f24:	4864      	ldr	r0, [pc, #400]	@ (80060b8 <mainLoop+0x254>)
 8005f26:	f005 f95d 	bl	800b1e4 <HAL_I2C_GetState>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d13d      	bne.n	8005fac <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005f30:	4b62      	ldr	r3, [pc, #392]	@ (80060bc <mainLoop+0x258>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f083 0301 	eor.w	r3, r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d028      	beq.n	8005f90 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005f3e:	4a60      	ldr	r2, [pc, #384]	@ (80060c0 <mainLoop+0x25c>)
 8005f40:	2101      	movs	r1, #1
 8005f42:	2001      	movs	r0, #1
 8005f44:	f003 f808 	bl	8008f58 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005f48:	4a5e      	ldr	r2, [pc, #376]	@ (80060c4 <mainLoop+0x260>)
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	2002      	movs	r0, #2
 8005f4e:	f003 f803 	bl	8008f58 <lcd_print>
			  HAL_Delay(1000);
 8005f52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f56:	f003 fd59 	bl	8009a0c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005f5a:	bf00      	nop
 8005f5c:	4856      	ldr	r0, [pc, #344]	@ (80060b8 <mainLoop+0x254>)
 8005f5e:	f005 f94e 	bl	800b1fe <HAL_I2C_GetError>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d0f9      	beq.n	8005f5c <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005f68:	e003      	b.n	8005f72 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005f6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f6e:	f003 fd4d 	bl	8009a0c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005f72:	4851      	ldr	r0, [pc, #324]	@ (80060b8 <mainLoop+0x254>)
 8005f74:	f005 f936 	bl	800b1e4 <HAL_I2C_GetState>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d1f5      	bne.n	8005f6a <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005f7e:	4a52      	ldr	r2, [pc, #328]	@ (80060c8 <mainLoop+0x264>)
 8005f80:	2101      	movs	r1, #1
 8005f82:	2002      	movs	r0, #2
 8005f84:	f002 ffe8 	bl	8008f58 <lcd_print>

			  ilkOkuma=1;
 8005f88:	4b4c      	ldr	r3, [pc, #304]	@ (80060bc <mainLoop+0x258>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e006      	b.n	8005f9e <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005f90:	4a4e      	ldr	r2, [pc, #312]	@ (80060cc <mainLoop+0x268>)
 8005f92:	2101      	movs	r1, #1
 8005f94:	2002      	movs	r0, #2
 8005f96:	f002 ffdf 	bl	8008f58 <lcd_print>
			  lcd_clear();
 8005f9a:	f003 f809 	bl	8008fb0 <lcd_clear>
		  }

		  lcd_clear();
 8005f9e:	f003 f807 	bl	8008fb0 <lcd_clear>

		  eepromKontrol();
 8005fa2:	f7fa f947 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005fa6:	4b43      	ldr	r3, [pc, #268]	@ (80060b4 <mainLoop+0x250>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005fac:	4b48      	ldr	r3, [pc, #288]	@ (80060d0 <mainLoop+0x26c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11c      	bne.n	8005fee <mainLoop+0x18a>
 8005fb4:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <mainLoop+0x270>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f083 0301 	eor.w	r3, r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d015      	beq.n	8005fee <mainLoop+0x18a>
 8005fc2:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <mainLoop+0x274>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d111      	bne.n	8005fee <mainLoop+0x18a>
			lcd_clear();
 8005fca:	f002 fff1 	bl	8008fb0 <lcd_clear>
			HAL_Delay(10);
 8005fce:	200a      	movs	r0, #10
 8005fd0:	f003 fd1c 	bl	8009a0c <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005fd4:	4a41      	ldr	r2, [pc, #260]	@ (80060dc <mainLoop+0x278>)
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f002 ffbd 	bl	8008f58 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005fde:	4a40      	ldr	r2, [pc, #256]	@ (80060e0 <mainLoop+0x27c>)
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	2002      	movs	r0, #2
 8005fe4:	f002 ffb8 	bl	8008f58 <lcd_print>
			mesajYazildi=1;
 8005fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80060d4 <mainLoop+0x270>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005fee:	4b38      	ldr	r3, [pc, #224]	@ (80060d0 <mainLoop+0x26c>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d112      	bne.n	800601c <mainLoop+0x1b8>
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4828      	ldr	r0, [pc, #160]	@ (800609c <mainLoop+0x238>)
 8005ffa:	f004 fad7 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10b      	bne.n	800601c <mainLoop+0x1b8>
 8006004:	2104      	movs	r1, #4
 8006006:	4825      	ldr	r0, [pc, #148]	@ (800609c <mainLoop+0x238>)
 8006008:	f004 fad0 	bl	800a5ac <HAL_GPIO_ReadPin>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d104      	bne.n	800601c <mainLoop+0x1b8>
			menuGiris=1;
 8006012:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <mainLoop+0x26c>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006018:	f002 ffca 	bl	8008fb0 <lcd_clear>
		}

		if(menuGiris==1) {
 800601c:	4b2c      	ldr	r3, [pc, #176]	@ (80060d0 <mainLoop+0x26c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <mainLoop+0x1c4>
			menu();
 8006024:	f7fb faa8 	bl	8001578 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006028:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800602c:	481c      	ldr	r0, [pc, #112]	@ (80060a0 <mainLoop+0x23c>)
 800602e:	f004 faec 	bl	800a60a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006032:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006036:	482b      	ldr	r0, [pc, #172]	@ (80060e4 <mainLoop+0x280>)
 8006038:	f004 fab8 	bl	800a5ac <HAL_GPIO_ReadPin>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <mainLoop+0x1f4>
 8006042:	4b29      	ldr	r3, [pc, #164]	@ (80060e8 <mainLoop+0x284>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f083 0301 	eor.w	r3, r3, #1
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <mainLoop+0x1f4>
			stopVar=1;
 8006050:	4b26      	ldr	r3, [pc, #152]	@ (80060ec <mainLoop+0x288>)
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e002      	b.n	800605e <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8006058:	4b24      	ldr	r3, [pc, #144]	@ (80060ec <mainLoop+0x288>)
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 800605e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006062:	4820      	ldr	r0, [pc, #128]	@ (80060e4 <mainLoop+0x280>)
 8006064:	f004 faa2 	bl	800a5ac <HAL_GPIO_ReadPin>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <mainLoop+0x21a>
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <mainLoop+0x28c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <mainLoop+0x21a>
			EmnStopVar=1;
 8006076:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <mainLoop+0x290>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e002      	b.n	8006084 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 800607e:	4b1d      	ldr	r3, [pc, #116]	@ (80060f4 <mainLoop+0x290>)
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006084:	f7fe f88e 	bl	80041a4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006088:	f7fe f8c0 	bl	800420c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 800608c:	f7fe f904 	bl	8004298 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006090:	f7fe f954 	bl	800433c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006094:	f7ff fcb4 	bl	8005a00 <checkDemoModCalisma>
		checkLCDBacklight();
 8006098:	e6e6      	b.n	8005e68 <mainLoop+0x4>
 800609a:	bf00      	nop
 800609c:	40010800 	.word	0x40010800
 80060a0:	40011000 	.word	0x40011000
 80060a4:	200010ec 	.word	0x200010ec
 80060a8:	20001094 	.word	0x20001094
 80060ac:	200010b0 	.word	0x200010b0
 80060b0:	200010e9 	.word	0x200010e9
 80060b4:	200010ea 	.word	0x200010ea
 80060b8:	2000193c 	.word	0x2000193c
 80060bc:	200010eb 	.word	0x200010eb
 80060c0:	20000178 	.word	0x20000178
 80060c4:	20001874 	.word	0x20001874
 80060c8:	20001888 	.word	0x20001888
 80060cc:	2000189c 	.word	0x2000189c
 80060d0:	200010d9 	.word	0x200010d9
 80060d4:	200010f1 	.word	0x200010f1
 80060d8:	200010da 	.word	0x200010da
 80060dc:	200000c4 	.word	0x200000c4
 80060e0:	200000d8 	.word	0x200000d8
 80060e4:	40010c00 	.word	0x40010c00
 80060e8:	20001111 	.word	0x20001111
 80060ec:	2000110e 	.word	0x2000110e
 80060f0:	20001120 	.word	0x20001120
 80060f4:	20001121 	.word	0x20001121

080060f8 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 80060f8:	b5b0      	push	{r4, r5, r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 853d 	bne.w	8006b84 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800610a:	4ac7      	ldr	r2, [pc, #796]	@ (8006428 <loadMenuTexts+0x330>)
 800610c:	4bc7      	ldr	r3, [pc, #796]	@ (800642c <loadMenuTexts+0x334>)
 800610e:	4614      	mov	r4, r2
 8006110:	461d      	mov	r5, r3
 8006112:	6828      	ldr	r0, [r5, #0]
 8006114:	6869      	ldr	r1, [r5, #4]
 8006116:	68aa      	ldr	r2, [r5, #8]
 8006118:	68eb      	ldr	r3, [r5, #12]
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	7c2b      	ldrb	r3, [r5, #16]
 800611e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006120:	4ac3      	ldr	r2, [pc, #780]	@ (8006430 <loadMenuTexts+0x338>)
 8006122:	4bc4      	ldr	r3, [pc, #784]	@ (8006434 <loadMenuTexts+0x33c>)
 8006124:	4614      	mov	r4, r2
 8006126:	461d      	mov	r5, r3
 8006128:	6828      	ldr	r0, [r5, #0]
 800612a:	6869      	ldr	r1, [r5, #4]
 800612c:	68aa      	ldr	r2, [r5, #8]
 800612e:	68eb      	ldr	r3, [r5, #12]
 8006130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006132:	7c2b      	ldrb	r3, [r5, #16]
 8006134:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006136:	4ac0      	ldr	r2, [pc, #768]	@ (8006438 <loadMenuTexts+0x340>)
 8006138:	4bc0      	ldr	r3, [pc, #768]	@ (800643c <loadMenuTexts+0x344>)
 800613a:	4614      	mov	r4, r2
 800613c:	461d      	mov	r5, r3
 800613e:	6828      	ldr	r0, [r5, #0]
 8006140:	6869      	ldr	r1, [r5, #4]
 8006142:	68aa      	ldr	r2, [r5, #8]
 8006144:	68eb      	ldr	r3, [r5, #12]
 8006146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006148:	7c2b      	ldrb	r3, [r5, #16]
 800614a:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 800614c:	4abc      	ldr	r2, [pc, #752]	@ (8006440 <loadMenuTexts+0x348>)
 800614e:	4bbd      	ldr	r3, [pc, #756]	@ (8006444 <loadMenuTexts+0x34c>)
 8006150:	4614      	mov	r4, r2
 8006152:	461d      	mov	r5, r3
 8006154:	6828      	ldr	r0, [r5, #0]
 8006156:	6869      	ldr	r1, [r5, #4]
 8006158:	68aa      	ldr	r2, [r5, #8]
 800615a:	68eb      	ldr	r3, [r5, #12]
 800615c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615e:	7c2b      	ldrb	r3, [r5, #16]
 8006160:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006162:	4ab9      	ldr	r2, [pc, #740]	@ (8006448 <loadMenuTexts+0x350>)
 8006164:	4bb9      	ldr	r3, [pc, #740]	@ (800644c <loadMenuTexts+0x354>)
 8006166:	4614      	mov	r4, r2
 8006168:	461d      	mov	r5, r3
 800616a:	6828      	ldr	r0, [r5, #0]
 800616c:	6869      	ldr	r1, [r5, #4]
 800616e:	68aa      	ldr	r2, [r5, #8]
 8006170:	68eb      	ldr	r3, [r5, #12]
 8006172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006174:	7c2b      	ldrb	r3, [r5, #16]
 8006176:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006178:	4ab5      	ldr	r2, [pc, #724]	@ (8006450 <loadMenuTexts+0x358>)
 800617a:	4bb6      	ldr	r3, [pc, #728]	@ (8006454 <loadMenuTexts+0x35c>)
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	6828      	ldr	r0, [r5, #0]
 8006182:	6869      	ldr	r1, [r5, #4]
 8006184:	68aa      	ldr	r2, [r5, #8]
 8006186:	68eb      	ldr	r3, [r5, #12]
 8006188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618a:	7c2b      	ldrb	r3, [r5, #16]
 800618c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800618e:	4ab2      	ldr	r2, [pc, #712]	@ (8006458 <loadMenuTexts+0x360>)
 8006190:	4bb2      	ldr	r3, [pc, #712]	@ (800645c <loadMenuTexts+0x364>)
 8006192:	4614      	mov	r4, r2
 8006194:	461d      	mov	r5, r3
 8006196:	6828      	ldr	r0, [r5, #0]
 8006198:	6869      	ldr	r1, [r5, #4]
 800619a:	68aa      	ldr	r2, [r5, #8]
 800619c:	68eb      	ldr	r3, [r5, #12]
 800619e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a0:	7c2b      	ldrb	r3, [r5, #16]
 80061a2:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80061a4:	4aae      	ldr	r2, [pc, #696]	@ (8006460 <loadMenuTexts+0x368>)
 80061a6:	4baf      	ldr	r3, [pc, #700]	@ (8006464 <loadMenuTexts+0x36c>)
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	6828      	ldr	r0, [r5, #0]
 80061ae:	6869      	ldr	r1, [r5, #4]
 80061b0:	68aa      	ldr	r2, [r5, #8]
 80061b2:	68eb      	ldr	r3, [r5, #12]
 80061b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b6:	7c2b      	ldrb	r3, [r5, #16]
 80061b8:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80061ba:	4aab      	ldr	r2, [pc, #684]	@ (8006468 <loadMenuTexts+0x370>)
 80061bc:	4bab      	ldr	r3, [pc, #684]	@ (800646c <loadMenuTexts+0x374>)
 80061be:	4614      	mov	r4, r2
 80061c0:	461d      	mov	r5, r3
 80061c2:	6828      	ldr	r0, [r5, #0]
 80061c4:	6869      	ldr	r1, [r5, #4]
 80061c6:	68aa      	ldr	r2, [r5, #8]
 80061c8:	68eb      	ldr	r3, [r5, #12]
 80061ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061cc:	7c2b      	ldrb	r3, [r5, #16]
 80061ce:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80061d0:	4aa7      	ldr	r2, [pc, #668]	@ (8006470 <loadMenuTexts+0x378>)
 80061d2:	4ba8      	ldr	r3, [pc, #672]	@ (8006474 <loadMenuTexts+0x37c>)
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	6828      	ldr	r0, [r5, #0]
 80061da:	6869      	ldr	r1, [r5, #4]
 80061dc:	68aa      	ldr	r2, [r5, #8]
 80061de:	68eb      	ldr	r3, [r5, #12]
 80061e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e2:	7c2b      	ldrb	r3, [r5, #16]
 80061e4:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80061e6:	4aa4      	ldr	r2, [pc, #656]	@ (8006478 <loadMenuTexts+0x380>)
 80061e8:	4ba4      	ldr	r3, [pc, #656]	@ (800647c <loadMenuTexts+0x384>)
 80061ea:	4614      	mov	r4, r2
 80061ec:	461d      	mov	r5, r3
 80061ee:	6828      	ldr	r0, [r5, #0]
 80061f0:	6869      	ldr	r1, [r5, #4]
 80061f2:	68aa      	ldr	r2, [r5, #8]
 80061f4:	68eb      	ldr	r3, [r5, #12]
 80061f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f8:	7c2b      	ldrb	r3, [r5, #16]
 80061fa:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 80061fc:	4aa0      	ldr	r2, [pc, #640]	@ (8006480 <loadMenuTexts+0x388>)
 80061fe:	4ba1      	ldr	r3, [pc, #644]	@ (8006484 <loadMenuTexts+0x38c>)
 8006200:	4614      	mov	r4, r2
 8006202:	461d      	mov	r5, r3
 8006204:	6828      	ldr	r0, [r5, #0]
 8006206:	6869      	ldr	r1, [r5, #4]
 8006208:	68aa      	ldr	r2, [r5, #8]
 800620a:	68eb      	ldr	r3, [r5, #12]
 800620c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620e:	7c2b      	ldrb	r3, [r5, #16]
 8006210:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006212:	4a9d      	ldr	r2, [pc, #628]	@ (8006488 <loadMenuTexts+0x390>)
 8006214:	4b9d      	ldr	r3, [pc, #628]	@ (800648c <loadMenuTexts+0x394>)
 8006216:	4614      	mov	r4, r2
 8006218:	461d      	mov	r5, r3
 800621a:	6828      	ldr	r0, [r5, #0]
 800621c:	6869      	ldr	r1, [r5, #4]
 800621e:	68aa      	ldr	r2, [r5, #8]
 8006220:	68eb      	ldr	r3, [r5, #12]
 8006222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006224:	7c2b      	ldrb	r3, [r5, #16]
 8006226:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006228:	4a99      	ldr	r2, [pc, #612]	@ (8006490 <loadMenuTexts+0x398>)
 800622a:	4b9a      	ldr	r3, [pc, #616]	@ (8006494 <loadMenuTexts+0x39c>)
 800622c:	4614      	mov	r4, r2
 800622e:	461d      	mov	r5, r3
 8006230:	6828      	ldr	r0, [r5, #0]
 8006232:	6869      	ldr	r1, [r5, #4]
 8006234:	68aa      	ldr	r2, [r5, #8]
 8006236:	68eb      	ldr	r3, [r5, #12]
 8006238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800623a:	7c2b      	ldrb	r3, [r5, #16]
 800623c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800623e:	4a96      	ldr	r2, [pc, #600]	@ (8006498 <loadMenuTexts+0x3a0>)
 8006240:	4b96      	ldr	r3, [pc, #600]	@ (800649c <loadMenuTexts+0x3a4>)
 8006242:	4614      	mov	r4, r2
 8006244:	461d      	mov	r5, r3
 8006246:	6828      	ldr	r0, [r5, #0]
 8006248:	6869      	ldr	r1, [r5, #4]
 800624a:	68aa      	ldr	r2, [r5, #8]
 800624c:	68eb      	ldr	r3, [r5, #12]
 800624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006250:	7c2b      	ldrb	r3, [r5, #16]
 8006252:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006254:	4a92      	ldr	r2, [pc, #584]	@ (80064a0 <loadMenuTexts+0x3a8>)
 8006256:	4b93      	ldr	r3, [pc, #588]	@ (80064a4 <loadMenuTexts+0x3ac>)
 8006258:	4614      	mov	r4, r2
 800625a:	461d      	mov	r5, r3
 800625c:	6828      	ldr	r0, [r5, #0]
 800625e:	6869      	ldr	r1, [r5, #4]
 8006260:	68aa      	ldr	r2, [r5, #8]
 8006262:	68eb      	ldr	r3, [r5, #12]
 8006264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006266:	7c2b      	ldrb	r3, [r5, #16]
 8006268:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800626a:	4a8f      	ldr	r2, [pc, #572]	@ (80064a8 <loadMenuTexts+0x3b0>)
 800626c:	4b8f      	ldr	r3, [pc, #572]	@ (80064ac <loadMenuTexts+0x3b4>)
 800626e:	4614      	mov	r4, r2
 8006270:	461d      	mov	r5, r3
 8006272:	6828      	ldr	r0, [r5, #0]
 8006274:	6869      	ldr	r1, [r5, #4]
 8006276:	68aa      	ldr	r2, [r5, #8]
 8006278:	68eb      	ldr	r3, [r5, #12]
 800627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627c:	7c2b      	ldrb	r3, [r5, #16]
 800627e:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006280:	4a8b      	ldr	r2, [pc, #556]	@ (80064b0 <loadMenuTexts+0x3b8>)
 8006282:	4b8c      	ldr	r3, [pc, #560]	@ (80064b4 <loadMenuTexts+0x3bc>)
 8006284:	4614      	mov	r4, r2
 8006286:	461d      	mov	r5, r3
 8006288:	6828      	ldr	r0, [r5, #0]
 800628a:	6869      	ldr	r1, [r5, #4]
 800628c:	68aa      	ldr	r2, [r5, #8]
 800628e:	68eb      	ldr	r3, [r5, #12]
 8006290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006292:	7c2b      	ldrb	r3, [r5, #16]
 8006294:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006296:	4a88      	ldr	r2, [pc, #544]	@ (80064b8 <loadMenuTexts+0x3c0>)
 8006298:	4b88      	ldr	r3, [pc, #544]	@ (80064bc <loadMenuTexts+0x3c4>)
 800629a:	4614      	mov	r4, r2
 800629c:	461d      	mov	r5, r3
 800629e:	6828      	ldr	r0, [r5, #0]
 80062a0:	6869      	ldr	r1, [r5, #4]
 80062a2:	68aa      	ldr	r2, [r5, #8]
 80062a4:	68eb      	ldr	r3, [r5, #12]
 80062a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a8:	7c2b      	ldrb	r3, [r5, #16]
 80062aa:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80062ac:	4a84      	ldr	r2, [pc, #528]	@ (80064c0 <loadMenuTexts+0x3c8>)
 80062ae:	4b85      	ldr	r3, [pc, #532]	@ (80064c4 <loadMenuTexts+0x3cc>)
 80062b0:	4614      	mov	r4, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	6828      	ldr	r0, [r5, #0]
 80062b6:	6869      	ldr	r1, [r5, #4]
 80062b8:	68aa      	ldr	r2, [r5, #8]
 80062ba:	68eb      	ldr	r3, [r5, #12]
 80062bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062be:	7c2b      	ldrb	r3, [r5, #16]
 80062c0:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80062c2:	4a81      	ldr	r2, [pc, #516]	@ (80064c8 <loadMenuTexts+0x3d0>)
 80062c4:	4b81      	ldr	r3, [pc, #516]	@ (80064cc <loadMenuTexts+0x3d4>)
 80062c6:	4614      	mov	r4, r2
 80062c8:	461d      	mov	r5, r3
 80062ca:	6828      	ldr	r0, [r5, #0]
 80062cc:	6869      	ldr	r1, [r5, #4]
 80062ce:	68aa      	ldr	r2, [r5, #8]
 80062d0:	68eb      	ldr	r3, [r5, #12]
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	7c2b      	ldrb	r3, [r5, #16]
 80062d6:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80062d8:	4a7d      	ldr	r2, [pc, #500]	@ (80064d0 <loadMenuTexts+0x3d8>)
 80062da:	4b7e      	ldr	r3, [pc, #504]	@ (80064d4 <loadMenuTexts+0x3dc>)
 80062dc:	4614      	mov	r4, r2
 80062de:	461d      	mov	r5, r3
 80062e0:	6828      	ldr	r0, [r5, #0]
 80062e2:	6869      	ldr	r1, [r5, #4]
 80062e4:	68aa      	ldr	r2, [r5, #8]
 80062e6:	68eb      	ldr	r3, [r5, #12]
 80062e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ea:	7c2b      	ldrb	r3, [r5, #16]
 80062ec:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80062ee:	4a7a      	ldr	r2, [pc, #488]	@ (80064d8 <loadMenuTexts+0x3e0>)
 80062f0:	4b7a      	ldr	r3, [pc, #488]	@ (80064dc <loadMenuTexts+0x3e4>)
 80062f2:	4614      	mov	r4, r2
 80062f4:	461d      	mov	r5, r3
 80062f6:	6828      	ldr	r0, [r5, #0]
 80062f8:	6869      	ldr	r1, [r5, #4]
 80062fa:	68aa      	ldr	r2, [r5, #8]
 80062fc:	68eb      	ldr	r3, [r5, #12]
 80062fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006300:	7c2b      	ldrb	r3, [r5, #16]
 8006302:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006304:	4a76      	ldr	r2, [pc, #472]	@ (80064e0 <loadMenuTexts+0x3e8>)
 8006306:	4b77      	ldr	r3, [pc, #476]	@ (80064e4 <loadMenuTexts+0x3ec>)
 8006308:	4614      	mov	r4, r2
 800630a:	461d      	mov	r5, r3
 800630c:	6828      	ldr	r0, [r5, #0]
 800630e:	6869      	ldr	r1, [r5, #4]
 8006310:	68aa      	ldr	r2, [r5, #8]
 8006312:	68eb      	ldr	r3, [r5, #12]
 8006314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006316:	7c2b      	ldrb	r3, [r5, #16]
 8006318:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800631a:	4a73      	ldr	r2, [pc, #460]	@ (80064e8 <loadMenuTexts+0x3f0>)
 800631c:	4b73      	ldr	r3, [pc, #460]	@ (80064ec <loadMenuTexts+0x3f4>)
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	6828      	ldr	r0, [r5, #0]
 8006324:	6869      	ldr	r1, [r5, #4]
 8006326:	68aa      	ldr	r2, [r5, #8]
 8006328:	68eb      	ldr	r3, [r5, #12]
 800632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632c:	7c2b      	ldrb	r3, [r5, #16]
 800632e:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006330:	4a6f      	ldr	r2, [pc, #444]	@ (80064f0 <loadMenuTexts+0x3f8>)
 8006332:	4b70      	ldr	r3, [pc, #448]	@ (80064f4 <loadMenuTexts+0x3fc>)
 8006334:	4614      	mov	r4, r2
 8006336:	461d      	mov	r5, r3
 8006338:	6828      	ldr	r0, [r5, #0]
 800633a:	6869      	ldr	r1, [r5, #4]
 800633c:	68aa      	ldr	r2, [r5, #8]
 800633e:	68eb      	ldr	r3, [r5, #12]
 8006340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006342:	7c2b      	ldrb	r3, [r5, #16]
 8006344:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006346:	4a6c      	ldr	r2, [pc, #432]	@ (80064f8 <loadMenuTexts+0x400>)
 8006348:	4b6c      	ldr	r3, [pc, #432]	@ (80064fc <loadMenuTexts+0x404>)
 800634a:	4614      	mov	r4, r2
 800634c:	461d      	mov	r5, r3
 800634e:	6828      	ldr	r0, [r5, #0]
 8006350:	6869      	ldr	r1, [r5, #4]
 8006352:	68aa      	ldr	r2, [r5, #8]
 8006354:	68eb      	ldr	r3, [r5, #12]
 8006356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006358:	7c2b      	ldrb	r3, [r5, #16]
 800635a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800635c:	4a68      	ldr	r2, [pc, #416]	@ (8006500 <loadMenuTexts+0x408>)
 800635e:	4b69      	ldr	r3, [pc, #420]	@ (8006504 <loadMenuTexts+0x40c>)
 8006360:	4614      	mov	r4, r2
 8006362:	461d      	mov	r5, r3
 8006364:	6828      	ldr	r0, [r5, #0]
 8006366:	6869      	ldr	r1, [r5, #4]
 8006368:	68aa      	ldr	r2, [r5, #8]
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636e:	7c2b      	ldrb	r3, [r5, #16]
 8006370:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006372:	4a65      	ldr	r2, [pc, #404]	@ (8006508 <loadMenuTexts+0x410>)
 8006374:	4b65      	ldr	r3, [pc, #404]	@ (800650c <loadMenuTexts+0x414>)
 8006376:	4614      	mov	r4, r2
 8006378:	461d      	mov	r5, r3
 800637a:	6828      	ldr	r0, [r5, #0]
 800637c:	6869      	ldr	r1, [r5, #4]
 800637e:	68aa      	ldr	r2, [r5, #8]
 8006380:	68eb      	ldr	r3, [r5, #12]
 8006382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006384:	7c2b      	ldrb	r3, [r5, #16]
 8006386:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006388:	4a61      	ldr	r2, [pc, #388]	@ (8006510 <loadMenuTexts+0x418>)
 800638a:	4b62      	ldr	r3, [pc, #392]	@ (8006514 <loadMenuTexts+0x41c>)
 800638c:	4614      	mov	r4, r2
 800638e:	461d      	mov	r5, r3
 8006390:	6828      	ldr	r0, [r5, #0]
 8006392:	6869      	ldr	r1, [r5, #4]
 8006394:	68aa      	ldr	r2, [r5, #8]
 8006396:	68eb      	ldr	r3, [r5, #12]
 8006398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639a:	7c2b      	ldrb	r3, [r5, #16]
 800639c:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800639e:	4a5e      	ldr	r2, [pc, #376]	@ (8006518 <loadMenuTexts+0x420>)
 80063a0:	4b5e      	ldr	r3, [pc, #376]	@ (800651c <loadMenuTexts+0x424>)
 80063a2:	4614      	mov	r4, r2
 80063a4:	461d      	mov	r5, r3
 80063a6:	6828      	ldr	r0, [r5, #0]
 80063a8:	6869      	ldr	r1, [r5, #4]
 80063aa:	68aa      	ldr	r2, [r5, #8]
 80063ac:	68eb      	ldr	r3, [r5, #12]
 80063ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b0:	7c2b      	ldrb	r3, [r5, #16]
 80063b2:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80063b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006520 <loadMenuTexts+0x428>)
 80063b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006524 <loadMenuTexts+0x42c>)
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	6828      	ldr	r0, [r5, #0]
 80063be:	6869      	ldr	r1, [r5, #4]
 80063c0:	68aa      	ldr	r2, [r5, #8]
 80063c2:	68eb      	ldr	r3, [r5, #12]
 80063c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c6:	7c2b      	ldrb	r3, [r5, #16]
 80063c8:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80063ca:	4a57      	ldr	r2, [pc, #348]	@ (8006528 <loadMenuTexts+0x430>)
 80063cc:	4b57      	ldr	r3, [pc, #348]	@ (800652c <loadMenuTexts+0x434>)
 80063ce:	4614      	mov	r4, r2
 80063d0:	461d      	mov	r5, r3
 80063d2:	6828      	ldr	r0, [r5, #0]
 80063d4:	6869      	ldr	r1, [r5, #4]
 80063d6:	68aa      	ldr	r2, [r5, #8]
 80063d8:	68eb      	ldr	r3, [r5, #12]
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	7c2b      	ldrb	r3, [r5, #16]
 80063de:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80063e0:	4a53      	ldr	r2, [pc, #332]	@ (8006530 <loadMenuTexts+0x438>)
 80063e2:	4b54      	ldr	r3, [pc, #336]	@ (8006534 <loadMenuTexts+0x43c>)
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	6828      	ldr	r0, [r5, #0]
 80063ea:	6869      	ldr	r1, [r5, #4]
 80063ec:	68aa      	ldr	r2, [r5, #8]
 80063ee:	68eb      	ldr	r3, [r5, #12]
 80063f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f2:	7c2b      	ldrb	r3, [r5, #16]
 80063f4:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80063f6:	4a50      	ldr	r2, [pc, #320]	@ (8006538 <loadMenuTexts+0x440>)
 80063f8:	4b50      	ldr	r3, [pc, #320]	@ (800653c <loadMenuTexts+0x444>)
 80063fa:	4614      	mov	r4, r2
 80063fc:	461d      	mov	r5, r3
 80063fe:	6828      	ldr	r0, [r5, #0]
 8006400:	6869      	ldr	r1, [r5, #4]
 8006402:	68aa      	ldr	r2, [r5, #8]
 8006404:	68eb      	ldr	r3, [r5, #12]
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	7c2b      	ldrb	r3, [r5, #16]
 800640a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800640c:	4a4c      	ldr	r2, [pc, #304]	@ (8006540 <loadMenuTexts+0x448>)
 800640e:	4b4d      	ldr	r3, [pc, #308]	@ (8006544 <loadMenuTexts+0x44c>)
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	6828      	ldr	r0, [r5, #0]
 8006416:	6869      	ldr	r1, [r5, #4]
 8006418:	68aa      	ldr	r2, [r5, #8]
 800641a:	68eb      	ldr	r3, [r5, #12]
 800641c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641e:	7c2b      	ldrb	r3, [r5, #16]
 8006420:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006422:	4a49      	ldr	r2, [pc, #292]	@ (8006548 <loadMenuTexts+0x450>)
 8006424:	e092      	b.n	800654c <loadMenuTexts+0x454>
 8006426:	bf00      	nop
 8006428:	20001220 	.word	0x20001220
 800642c:	2000018c 	.word	0x2000018c
 8006430:	20001234 	.word	0x20001234
 8006434:	200001a0 	.word	0x200001a0
 8006438:	20001248 	.word	0x20001248
 800643c:	200001b4 	.word	0x200001b4
 8006440:	2000125c 	.word	0x2000125c
 8006444:	200001c8 	.word	0x200001c8
 8006448:	20001270 	.word	0x20001270
 800644c:	200001dc 	.word	0x200001dc
 8006450:	20001284 	.word	0x20001284
 8006454:	200001f0 	.word	0x200001f0
 8006458:	20001298 	.word	0x20001298
 800645c:	20000204 	.word	0x20000204
 8006460:	200012ac 	.word	0x200012ac
 8006464:	20000218 	.word	0x20000218
 8006468:	200012c0 	.word	0x200012c0
 800646c:	2000022c 	.word	0x2000022c
 8006470:	200012d4 	.word	0x200012d4
 8006474:	20000240 	.word	0x20000240
 8006478:	200012e8 	.word	0x200012e8
 800647c:	20000254 	.word	0x20000254
 8006480:	200012fc 	.word	0x200012fc
 8006484:	20000268 	.word	0x20000268
 8006488:	20001310 	.word	0x20001310
 800648c:	2000027c 	.word	0x2000027c
 8006490:	20001324 	.word	0x20001324
 8006494:	20000290 	.word	0x20000290
 8006498:	20001338 	.word	0x20001338
 800649c:	200002a4 	.word	0x200002a4
 80064a0:	2000134c 	.word	0x2000134c
 80064a4:	200002b8 	.word	0x200002b8
 80064a8:	20001360 	.word	0x20001360
 80064ac:	200002cc 	.word	0x200002cc
 80064b0:	20001374 	.word	0x20001374
 80064b4:	200002e0 	.word	0x200002e0
 80064b8:	20001388 	.word	0x20001388
 80064bc:	200002f4 	.word	0x200002f4
 80064c0:	2000139c 	.word	0x2000139c
 80064c4:	20000308 	.word	0x20000308
 80064c8:	200013b0 	.word	0x200013b0
 80064cc:	2000031c 	.word	0x2000031c
 80064d0:	200013c4 	.word	0x200013c4
 80064d4:	20000330 	.word	0x20000330
 80064d8:	200013d8 	.word	0x200013d8
 80064dc:	20000344 	.word	0x20000344
 80064e0:	200013ec 	.word	0x200013ec
 80064e4:	20000358 	.word	0x20000358
 80064e8:	20001400 	.word	0x20001400
 80064ec:	2000036c 	.word	0x2000036c
 80064f0:	20001414 	.word	0x20001414
 80064f4:	20000380 	.word	0x20000380
 80064f8:	20001428 	.word	0x20001428
 80064fc:	20000394 	.word	0x20000394
 8006500:	2000143c 	.word	0x2000143c
 8006504:	200003a8 	.word	0x200003a8
 8006508:	20001450 	.word	0x20001450
 800650c:	200003bc 	.word	0x200003bc
 8006510:	20001464 	.word	0x20001464
 8006514:	200003d0 	.word	0x200003d0
 8006518:	20001478 	.word	0x20001478
 800651c:	200003e4 	.word	0x200003e4
 8006520:	2000148c 	.word	0x2000148c
 8006524:	200003f8 	.word	0x200003f8
 8006528:	200014a0 	.word	0x200014a0
 800652c:	2000040c 	.word	0x2000040c
 8006530:	200014b4 	.word	0x200014b4
 8006534:	20000420 	.word	0x20000420
 8006538:	200014c8 	.word	0x200014c8
 800653c:	20000434 	.word	0x20000434
 8006540:	200014dc 	.word	0x200014dc
 8006544:	20000448 	.word	0x20000448
 8006548:	200014f0 	.word	0x200014f0
 800654c:	4bc7      	ldr	r3, [pc, #796]	@ (800686c <loadMenuTexts+0x774>)
 800654e:	4614      	mov	r4, r2
 8006550:	461d      	mov	r5, r3
 8006552:	6828      	ldr	r0, [r5, #0]
 8006554:	6869      	ldr	r1, [r5, #4]
 8006556:	68aa      	ldr	r2, [r5, #8]
 8006558:	68eb      	ldr	r3, [r5, #12]
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	7c2b      	ldrb	r3, [r5, #16]
 800655e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006560:	4ac3      	ldr	r2, [pc, #780]	@ (8006870 <loadMenuTexts+0x778>)
 8006562:	4bc4      	ldr	r3, [pc, #784]	@ (8006874 <loadMenuTexts+0x77c>)
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	6828      	ldr	r0, [r5, #0]
 800656a:	6869      	ldr	r1, [r5, #4]
 800656c:	68aa      	ldr	r2, [r5, #8]
 800656e:	68eb      	ldr	r3, [r5, #12]
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	7c2b      	ldrb	r3, [r5, #16]
 8006574:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006576:	4ac0      	ldr	r2, [pc, #768]	@ (8006878 <loadMenuTexts+0x780>)
 8006578:	4bc0      	ldr	r3, [pc, #768]	@ (800687c <loadMenuTexts+0x784>)
 800657a:	4614      	mov	r4, r2
 800657c:	461d      	mov	r5, r3
 800657e:	6828      	ldr	r0, [r5, #0]
 8006580:	6869      	ldr	r1, [r5, #4]
 8006582:	68aa      	ldr	r2, [r5, #8]
 8006584:	68eb      	ldr	r3, [r5, #12]
 8006586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006588:	7c2b      	ldrb	r3, [r5, #16]
 800658a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800658c:	4abc      	ldr	r2, [pc, #752]	@ (8006880 <loadMenuTexts+0x788>)
 800658e:	4bbd      	ldr	r3, [pc, #756]	@ (8006884 <loadMenuTexts+0x78c>)
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	6828      	ldr	r0, [r5, #0]
 8006596:	6869      	ldr	r1, [r5, #4]
 8006598:	68aa      	ldr	r2, [r5, #8]
 800659a:	68eb      	ldr	r3, [r5, #12]
 800659c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659e:	7c2b      	ldrb	r3, [r5, #16]
 80065a0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80065a2:	4ab9      	ldr	r2, [pc, #740]	@ (8006888 <loadMenuTexts+0x790>)
 80065a4:	4bb9      	ldr	r3, [pc, #740]	@ (800688c <loadMenuTexts+0x794>)
 80065a6:	4614      	mov	r4, r2
 80065a8:	461d      	mov	r5, r3
 80065aa:	6828      	ldr	r0, [r5, #0]
 80065ac:	6869      	ldr	r1, [r5, #4]
 80065ae:	68aa      	ldr	r2, [r5, #8]
 80065b0:	68eb      	ldr	r3, [r5, #12]
 80065b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b4:	7c2b      	ldrb	r3, [r5, #16]
 80065b6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80065b8:	4ab5      	ldr	r2, [pc, #724]	@ (8006890 <loadMenuTexts+0x798>)
 80065ba:	4bb6      	ldr	r3, [pc, #728]	@ (8006894 <loadMenuTexts+0x79c>)
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	6828      	ldr	r0, [r5, #0]
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	68aa      	ldr	r2, [r5, #8]
 80065c6:	68eb      	ldr	r3, [r5, #12]
 80065c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ca:	7c2b      	ldrb	r3, [r5, #16]
 80065cc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80065ce:	4ab2      	ldr	r2, [pc, #712]	@ (8006898 <loadMenuTexts+0x7a0>)
 80065d0:	4bb2      	ldr	r3, [pc, #712]	@ (800689c <loadMenuTexts+0x7a4>)
 80065d2:	4614      	mov	r4, r2
 80065d4:	461d      	mov	r5, r3
 80065d6:	6828      	ldr	r0, [r5, #0]
 80065d8:	6869      	ldr	r1, [r5, #4]
 80065da:	68aa      	ldr	r2, [r5, #8]
 80065dc:	68eb      	ldr	r3, [r5, #12]
 80065de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e0:	7c2b      	ldrb	r3, [r5, #16]
 80065e2:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80065e4:	4aae      	ldr	r2, [pc, #696]	@ (80068a0 <loadMenuTexts+0x7a8>)
 80065e6:	4baf      	ldr	r3, [pc, #700]	@ (80068a4 <loadMenuTexts+0x7ac>)
 80065e8:	4614      	mov	r4, r2
 80065ea:	461d      	mov	r5, r3
 80065ec:	6828      	ldr	r0, [r5, #0]
 80065ee:	6869      	ldr	r1, [r5, #4]
 80065f0:	68aa      	ldr	r2, [r5, #8]
 80065f2:	68eb      	ldr	r3, [r5, #12]
 80065f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f6:	7c2b      	ldrb	r3, [r5, #16]
 80065f8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80065fa:	4aab      	ldr	r2, [pc, #684]	@ (80068a8 <loadMenuTexts+0x7b0>)
 80065fc:	4bab      	ldr	r3, [pc, #684]	@ (80068ac <loadMenuTexts+0x7b4>)
 80065fe:	4614      	mov	r4, r2
 8006600:	461d      	mov	r5, r3
 8006602:	6828      	ldr	r0, [r5, #0]
 8006604:	6869      	ldr	r1, [r5, #4]
 8006606:	68aa      	ldr	r2, [r5, #8]
 8006608:	68eb      	ldr	r3, [r5, #12]
 800660a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660c:	7c2b      	ldrb	r3, [r5, #16]
 800660e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006610:	4aa7      	ldr	r2, [pc, #668]	@ (80068b0 <loadMenuTexts+0x7b8>)
 8006612:	4ba8      	ldr	r3, [pc, #672]	@ (80068b4 <loadMenuTexts+0x7bc>)
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	6828      	ldr	r0, [r5, #0]
 800661a:	6869      	ldr	r1, [r5, #4]
 800661c:	68aa      	ldr	r2, [r5, #8]
 800661e:	68eb      	ldr	r3, [r5, #12]
 8006620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006622:	7c2b      	ldrb	r3, [r5, #16]
 8006624:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006626:	4aa4      	ldr	r2, [pc, #656]	@ (80068b8 <loadMenuTexts+0x7c0>)
 8006628:	4ba4      	ldr	r3, [pc, #656]	@ (80068bc <loadMenuTexts+0x7c4>)
 800662a:	4614      	mov	r4, r2
 800662c:	461d      	mov	r5, r3
 800662e:	6828      	ldr	r0, [r5, #0]
 8006630:	6869      	ldr	r1, [r5, #4]
 8006632:	68aa      	ldr	r2, [r5, #8]
 8006634:	68eb      	ldr	r3, [r5, #12]
 8006636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006638:	7c2b      	ldrb	r3, [r5, #16]
 800663a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 800663c:	4aa0      	ldr	r2, [pc, #640]	@ (80068c0 <loadMenuTexts+0x7c8>)
 800663e:	4ba1      	ldr	r3, [pc, #644]	@ (80068c4 <loadMenuTexts+0x7cc>)
 8006640:	4614      	mov	r4, r2
 8006642:	461d      	mov	r5, r3
 8006644:	6828      	ldr	r0, [r5, #0]
 8006646:	6869      	ldr	r1, [r5, #4]
 8006648:	68aa      	ldr	r2, [r5, #8]
 800664a:	68eb      	ldr	r3, [r5, #12]
 800664c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664e:	7c2b      	ldrb	r3, [r5, #16]
 8006650:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006652:	4a9d      	ldr	r2, [pc, #628]	@ (80068c8 <loadMenuTexts+0x7d0>)
 8006654:	4b9d      	ldr	r3, [pc, #628]	@ (80068cc <loadMenuTexts+0x7d4>)
 8006656:	4614      	mov	r4, r2
 8006658:	461d      	mov	r5, r3
 800665a:	6828      	ldr	r0, [r5, #0]
 800665c:	6869      	ldr	r1, [r5, #4]
 800665e:	68aa      	ldr	r2, [r5, #8]
 8006660:	68eb      	ldr	r3, [r5, #12]
 8006662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006664:	7c2b      	ldrb	r3, [r5, #16]
 8006666:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006668:	4a99      	ldr	r2, [pc, #612]	@ (80068d0 <loadMenuTexts+0x7d8>)
 800666a:	4b9a      	ldr	r3, [pc, #616]	@ (80068d4 <loadMenuTexts+0x7dc>)
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	6828      	ldr	r0, [r5, #0]
 8006672:	6869      	ldr	r1, [r5, #4]
 8006674:	68aa      	ldr	r2, [r5, #8]
 8006676:	68eb      	ldr	r3, [r5, #12]
 8006678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667a:	7c2b      	ldrb	r3, [r5, #16]
 800667c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800667e:	4a96      	ldr	r2, [pc, #600]	@ (80068d8 <loadMenuTexts+0x7e0>)
 8006680:	4b96      	ldr	r3, [pc, #600]	@ (80068dc <loadMenuTexts+0x7e4>)
 8006682:	4614      	mov	r4, r2
 8006684:	461d      	mov	r5, r3
 8006686:	6828      	ldr	r0, [r5, #0]
 8006688:	6869      	ldr	r1, [r5, #4]
 800668a:	68aa      	ldr	r2, [r5, #8]
 800668c:	68eb      	ldr	r3, [r5, #12]
 800668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006690:	7c2b      	ldrb	r3, [r5, #16]
 8006692:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006694:	4a92      	ldr	r2, [pc, #584]	@ (80068e0 <loadMenuTexts+0x7e8>)
 8006696:	4b93      	ldr	r3, [pc, #588]	@ (80068e4 <loadMenuTexts+0x7ec>)
 8006698:	4614      	mov	r4, r2
 800669a:	461d      	mov	r5, r3
 800669c:	6828      	ldr	r0, [r5, #0]
 800669e:	6869      	ldr	r1, [r5, #4]
 80066a0:	68aa      	ldr	r2, [r5, #8]
 80066a2:	68eb      	ldr	r3, [r5, #12]
 80066a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a6:	7c2b      	ldrb	r3, [r5, #16]
 80066a8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80066aa:	4a8f      	ldr	r2, [pc, #572]	@ (80068e8 <loadMenuTexts+0x7f0>)
 80066ac:	4b8f      	ldr	r3, [pc, #572]	@ (80068ec <loadMenuTexts+0x7f4>)
 80066ae:	4614      	mov	r4, r2
 80066b0:	461d      	mov	r5, r3
 80066b2:	6828      	ldr	r0, [r5, #0]
 80066b4:	6869      	ldr	r1, [r5, #4]
 80066b6:	68aa      	ldr	r2, [r5, #8]
 80066b8:	68eb      	ldr	r3, [r5, #12]
 80066ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066bc:	7c2b      	ldrb	r3, [r5, #16]
 80066be:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80066c0:	4a8b      	ldr	r2, [pc, #556]	@ (80068f0 <loadMenuTexts+0x7f8>)
 80066c2:	4b8c      	ldr	r3, [pc, #560]	@ (80068f4 <loadMenuTexts+0x7fc>)
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	6828      	ldr	r0, [r5, #0]
 80066ca:	6869      	ldr	r1, [r5, #4]
 80066cc:	68aa      	ldr	r2, [r5, #8]
 80066ce:	68eb      	ldr	r3, [r5, #12]
 80066d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d2:	7c2b      	ldrb	r3, [r5, #16]
 80066d4:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80066d6:	4a88      	ldr	r2, [pc, #544]	@ (80068f8 <loadMenuTexts+0x800>)
 80066d8:	4b88      	ldr	r3, [pc, #544]	@ (80068fc <loadMenuTexts+0x804>)
 80066da:	4614      	mov	r4, r2
 80066dc:	461d      	mov	r5, r3
 80066de:	6828      	ldr	r0, [r5, #0]
 80066e0:	6869      	ldr	r1, [r5, #4]
 80066e2:	68aa      	ldr	r2, [r5, #8]
 80066e4:	68eb      	ldr	r3, [r5, #12]
 80066e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e8:	7c2b      	ldrb	r3, [r5, #16]
 80066ea:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80066ec:	4a84      	ldr	r2, [pc, #528]	@ (8006900 <loadMenuTexts+0x808>)
 80066ee:	4b85      	ldr	r3, [pc, #532]	@ (8006904 <loadMenuTexts+0x80c>)
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	6828      	ldr	r0, [r5, #0]
 80066f6:	6869      	ldr	r1, [r5, #4]
 80066f8:	68aa      	ldr	r2, [r5, #8]
 80066fa:	68eb      	ldr	r3, [r5, #12]
 80066fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fe:	7c2b      	ldrb	r3, [r5, #16]
 8006700:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006702:	4a81      	ldr	r2, [pc, #516]	@ (8006908 <loadMenuTexts+0x810>)
 8006704:	4b81      	ldr	r3, [pc, #516]	@ (800690c <loadMenuTexts+0x814>)
 8006706:	4614      	mov	r4, r2
 8006708:	461d      	mov	r5, r3
 800670a:	6828      	ldr	r0, [r5, #0]
 800670c:	6869      	ldr	r1, [r5, #4]
 800670e:	68aa      	ldr	r2, [r5, #8]
 8006710:	68eb      	ldr	r3, [r5, #12]
 8006712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006714:	7c2b      	ldrb	r3, [r5, #16]
 8006716:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006718:	4a7d      	ldr	r2, [pc, #500]	@ (8006910 <loadMenuTexts+0x818>)
 800671a:	4b7e      	ldr	r3, [pc, #504]	@ (8006914 <loadMenuTexts+0x81c>)
 800671c:	4614      	mov	r4, r2
 800671e:	461d      	mov	r5, r3
 8006720:	6828      	ldr	r0, [r5, #0]
 8006722:	6869      	ldr	r1, [r5, #4]
 8006724:	68aa      	ldr	r2, [r5, #8]
 8006726:	68eb      	ldr	r3, [r5, #12]
 8006728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672a:	7c2b      	ldrb	r3, [r5, #16]
 800672c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800672e:	4a7a      	ldr	r2, [pc, #488]	@ (8006918 <loadMenuTexts+0x820>)
 8006730:	4b7a      	ldr	r3, [pc, #488]	@ (800691c <loadMenuTexts+0x824>)
 8006732:	4614      	mov	r4, r2
 8006734:	461d      	mov	r5, r3
 8006736:	6828      	ldr	r0, [r5, #0]
 8006738:	6869      	ldr	r1, [r5, #4]
 800673a:	68aa      	ldr	r2, [r5, #8]
 800673c:	68eb      	ldr	r3, [r5, #12]
 800673e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006740:	7c2b      	ldrb	r3, [r5, #16]
 8006742:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006744:	4a76      	ldr	r2, [pc, #472]	@ (8006920 <loadMenuTexts+0x828>)
 8006746:	4b77      	ldr	r3, [pc, #476]	@ (8006924 <loadMenuTexts+0x82c>)
 8006748:	4614      	mov	r4, r2
 800674a:	461d      	mov	r5, r3
 800674c:	6828      	ldr	r0, [r5, #0]
 800674e:	6869      	ldr	r1, [r5, #4]
 8006750:	68aa      	ldr	r2, [r5, #8]
 8006752:	68eb      	ldr	r3, [r5, #12]
 8006754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006756:	7c2b      	ldrb	r3, [r5, #16]
 8006758:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800675a:	4a73      	ldr	r2, [pc, #460]	@ (8006928 <loadMenuTexts+0x830>)
 800675c:	4b73      	ldr	r3, [pc, #460]	@ (800692c <loadMenuTexts+0x834>)
 800675e:	4614      	mov	r4, r2
 8006760:	461d      	mov	r5, r3
 8006762:	6828      	ldr	r0, [r5, #0]
 8006764:	6869      	ldr	r1, [r5, #4]
 8006766:	68aa      	ldr	r2, [r5, #8]
 8006768:	68eb      	ldr	r3, [r5, #12]
 800676a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676c:	7c2b      	ldrb	r3, [r5, #16]
 800676e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006770:	4a6f      	ldr	r2, [pc, #444]	@ (8006930 <loadMenuTexts+0x838>)
 8006772:	4b70      	ldr	r3, [pc, #448]	@ (8006934 <loadMenuTexts+0x83c>)
 8006774:	4614      	mov	r4, r2
 8006776:	461d      	mov	r5, r3
 8006778:	6828      	ldr	r0, [r5, #0]
 800677a:	6869      	ldr	r1, [r5, #4]
 800677c:	68aa      	ldr	r2, [r5, #8]
 800677e:	68eb      	ldr	r3, [r5, #12]
 8006780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006782:	7c2b      	ldrb	r3, [r5, #16]
 8006784:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006786:	4a6c      	ldr	r2, [pc, #432]	@ (8006938 <loadMenuTexts+0x840>)
 8006788:	4b6c      	ldr	r3, [pc, #432]	@ (800693c <loadMenuTexts+0x844>)
 800678a:	4614      	mov	r4, r2
 800678c:	461d      	mov	r5, r3
 800678e:	6828      	ldr	r0, [r5, #0]
 8006790:	6869      	ldr	r1, [r5, #4]
 8006792:	68aa      	ldr	r2, [r5, #8]
 8006794:	68eb      	ldr	r3, [r5, #12]
 8006796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006798:	7c2b      	ldrb	r3, [r5, #16]
 800679a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 800679c:	4a68      	ldr	r2, [pc, #416]	@ (8006940 <loadMenuTexts+0x848>)
 800679e:	4b69      	ldr	r3, [pc, #420]	@ (8006944 <loadMenuTexts+0x84c>)
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	6828      	ldr	r0, [r5, #0]
 80067a6:	6869      	ldr	r1, [r5, #4]
 80067a8:	68aa      	ldr	r2, [r5, #8]
 80067aa:	68eb      	ldr	r3, [r5, #12]
 80067ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ae:	7c2b      	ldrb	r3, [r5, #16]
 80067b0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80067b2:	4a65      	ldr	r2, [pc, #404]	@ (8006948 <loadMenuTexts+0x850>)
 80067b4:	4b65      	ldr	r3, [pc, #404]	@ (800694c <loadMenuTexts+0x854>)
 80067b6:	4614      	mov	r4, r2
 80067b8:	461d      	mov	r5, r3
 80067ba:	6828      	ldr	r0, [r5, #0]
 80067bc:	6869      	ldr	r1, [r5, #4]
 80067be:	68aa      	ldr	r2, [r5, #8]
 80067c0:	68eb      	ldr	r3, [r5, #12]
 80067c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c4:	7c2b      	ldrb	r3, [r5, #16]
 80067c6:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80067c8:	4a61      	ldr	r2, [pc, #388]	@ (8006950 <loadMenuTexts+0x858>)
 80067ca:	4b62      	ldr	r3, [pc, #392]	@ (8006954 <loadMenuTexts+0x85c>)
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	6828      	ldr	r0, [r5, #0]
 80067d2:	6869      	ldr	r1, [r5, #4]
 80067d4:	68aa      	ldr	r2, [r5, #8]
 80067d6:	68eb      	ldr	r3, [r5, #12]
 80067d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067da:	7c2b      	ldrb	r3, [r5, #16]
 80067dc:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80067de:	4a5e      	ldr	r2, [pc, #376]	@ (8006958 <loadMenuTexts+0x860>)
 80067e0:	4b5e      	ldr	r3, [pc, #376]	@ (800695c <loadMenuTexts+0x864>)
 80067e2:	4614      	mov	r4, r2
 80067e4:	461d      	mov	r5, r3
 80067e6:	6828      	ldr	r0, [r5, #0]
 80067e8:	6869      	ldr	r1, [r5, #4]
 80067ea:	68aa      	ldr	r2, [r5, #8]
 80067ec:	68eb      	ldr	r3, [r5, #12]
 80067ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f0:	7c2b      	ldrb	r3, [r5, #16]
 80067f2:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80067f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006960 <loadMenuTexts+0x868>)
 80067f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006964 <loadMenuTexts+0x86c>)
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	6828      	ldr	r0, [r5, #0]
 80067fe:	6869      	ldr	r1, [r5, #4]
 8006800:	68aa      	ldr	r2, [r5, #8]
 8006802:	68eb      	ldr	r3, [r5, #12]
 8006804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006806:	7c2b      	ldrb	r3, [r5, #16]
 8006808:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800680a:	4a57      	ldr	r2, [pc, #348]	@ (8006968 <loadMenuTexts+0x870>)
 800680c:	4b57      	ldr	r3, [pc, #348]	@ (800696c <loadMenuTexts+0x874>)
 800680e:	4614      	mov	r4, r2
 8006810:	461d      	mov	r5, r3
 8006812:	6828      	ldr	r0, [r5, #0]
 8006814:	6869      	ldr	r1, [r5, #4]
 8006816:	68aa      	ldr	r2, [r5, #8]
 8006818:	68eb      	ldr	r3, [r5, #12]
 800681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681c:	7c2b      	ldrb	r3, [r5, #16]
 800681e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006820:	4a53      	ldr	r2, [pc, #332]	@ (8006970 <loadMenuTexts+0x878>)
 8006822:	4b54      	ldr	r3, [pc, #336]	@ (8006974 <loadMenuTexts+0x87c>)
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	6828      	ldr	r0, [r5, #0]
 800682a:	6869      	ldr	r1, [r5, #4]
 800682c:	68aa      	ldr	r2, [r5, #8]
 800682e:	68eb      	ldr	r3, [r5, #12]
 8006830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006832:	7c2b      	ldrb	r3, [r5, #16]
 8006834:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006836:	4a50      	ldr	r2, [pc, #320]	@ (8006978 <loadMenuTexts+0x880>)
 8006838:	4b50      	ldr	r3, [pc, #320]	@ (800697c <loadMenuTexts+0x884>)
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	6828      	ldr	r0, [r5, #0]
 8006840:	6869      	ldr	r1, [r5, #4]
 8006842:	68aa      	ldr	r2, [r5, #8]
 8006844:	68eb      	ldr	r3, [r5, #12]
 8006846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006848:	7c2b      	ldrb	r3, [r5, #16]
 800684a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 800684c:	4a4c      	ldr	r2, [pc, #304]	@ (8006980 <loadMenuTexts+0x888>)
 800684e:	4b4d      	ldr	r3, [pc, #308]	@ (8006984 <loadMenuTexts+0x88c>)
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	6828      	ldr	r0, [r5, #0]
 8006856:	6869      	ldr	r1, [r5, #4]
 8006858:	68aa      	ldr	r2, [r5, #8]
 800685a:	68eb      	ldr	r3, [r5, #12]
 800685c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685e:	7c2b      	ldrb	r3, [r5, #16]
 8006860:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006862:	4a49      	ldr	r2, [pc, #292]	@ (8006988 <loadMenuTexts+0x890>)
 8006864:	4b49      	ldr	r3, [pc, #292]	@ (800698c <loadMenuTexts+0x894>)
 8006866:	4614      	mov	r4, r2
 8006868:	461d      	mov	r5, r3
 800686a:	e091      	b.n	8006990 <loadMenuTexts+0x898>
 800686c:	2000045c 	.word	0x2000045c
 8006870:	20001504 	.word	0x20001504
 8006874:	20000470 	.word	0x20000470
 8006878:	20001518 	.word	0x20001518
 800687c:	20000484 	.word	0x20000484
 8006880:	2000152c 	.word	0x2000152c
 8006884:	20000498 	.word	0x20000498
 8006888:	20001540 	.word	0x20001540
 800688c:	200004ac 	.word	0x200004ac
 8006890:	20001554 	.word	0x20001554
 8006894:	200004c0 	.word	0x200004c0
 8006898:	20001568 	.word	0x20001568
 800689c:	200004d4 	.word	0x200004d4
 80068a0:	2000157c 	.word	0x2000157c
 80068a4:	200004e8 	.word	0x200004e8
 80068a8:	20001590 	.word	0x20001590
 80068ac:	200004fc 	.word	0x200004fc
 80068b0:	200015a4 	.word	0x200015a4
 80068b4:	20000510 	.word	0x20000510
 80068b8:	200015b8 	.word	0x200015b8
 80068bc:	20000524 	.word	0x20000524
 80068c0:	200015cc 	.word	0x200015cc
 80068c4:	20000538 	.word	0x20000538
 80068c8:	200015e0 	.word	0x200015e0
 80068cc:	2000054c 	.word	0x2000054c
 80068d0:	200015f4 	.word	0x200015f4
 80068d4:	20000560 	.word	0x20000560
 80068d8:	20001608 	.word	0x20001608
 80068dc:	20000574 	.word	0x20000574
 80068e0:	2000161c 	.word	0x2000161c
 80068e4:	20000588 	.word	0x20000588
 80068e8:	20001630 	.word	0x20001630
 80068ec:	2000059c 	.word	0x2000059c
 80068f0:	20001644 	.word	0x20001644
 80068f4:	200005b0 	.word	0x200005b0
 80068f8:	20001658 	.word	0x20001658
 80068fc:	200005c4 	.word	0x200005c4
 8006900:	2000166c 	.word	0x2000166c
 8006904:	200005d8 	.word	0x200005d8
 8006908:	20001680 	.word	0x20001680
 800690c:	200005ec 	.word	0x200005ec
 8006910:	20001694 	.word	0x20001694
 8006914:	20000600 	.word	0x20000600
 8006918:	200016a8 	.word	0x200016a8
 800691c:	20000614 	.word	0x20000614
 8006920:	200016bc 	.word	0x200016bc
 8006924:	20000628 	.word	0x20000628
 8006928:	200016d0 	.word	0x200016d0
 800692c:	2000063c 	.word	0x2000063c
 8006930:	200016e4 	.word	0x200016e4
 8006934:	20000650 	.word	0x20000650
 8006938:	200016f8 	.word	0x200016f8
 800693c:	20000664 	.word	0x20000664
 8006940:	2000170c 	.word	0x2000170c
 8006944:	20000678 	.word	0x20000678
 8006948:	20001720 	.word	0x20001720
 800694c:	2000068c 	.word	0x2000068c
 8006950:	20001734 	.word	0x20001734
 8006954:	200006a0 	.word	0x200006a0
 8006958:	20001748 	.word	0x20001748
 800695c:	200006b4 	.word	0x200006b4
 8006960:	2000175c 	.word	0x2000175c
 8006964:	200006c8 	.word	0x200006c8
 8006968:	20001770 	.word	0x20001770
 800696c:	200006dc 	.word	0x200006dc
 8006970:	20001784 	.word	0x20001784
 8006974:	200006f0 	.word	0x200006f0
 8006978:	20001798 	.word	0x20001798
 800697c:	20000c7c 	.word	0x20000c7c
 8006980:	200017ac 	.word	0x200017ac
 8006984:	20000c90 	.word	0x20000c90
 8006988:	200017c0 	.word	0x200017c0
 800698c:	20000ca4 	.word	0x20000ca4
 8006990:	6828      	ldr	r0, [r5, #0]
 8006992:	6869      	ldr	r1, [r5, #4]
 8006994:	68aa      	ldr	r2, [r5, #8]
 8006996:	68eb      	ldr	r3, [r5, #12]
 8006998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699a:	7c2b      	ldrb	r3, [r5, #16]
 800699c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800699e:	4a59      	ldr	r2, [pc, #356]	@ (8006b04 <loadMenuTexts+0xa0c>)
 80069a0:	4b59      	ldr	r3, [pc, #356]	@ (8006b08 <loadMenuTexts+0xa10>)
 80069a2:	4614      	mov	r4, r2
 80069a4:	461d      	mov	r5, r3
 80069a6:	6828      	ldr	r0, [r5, #0]
 80069a8:	6869      	ldr	r1, [r5, #4]
 80069aa:	68aa      	ldr	r2, [r5, #8]
 80069ac:	68eb      	ldr	r3, [r5, #12]
 80069ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b0:	7c2b      	ldrb	r3, [r5, #16]
 80069b2:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80069b4:	4a55      	ldr	r2, [pc, #340]	@ (8006b0c <loadMenuTexts+0xa14>)
 80069b6:	4b56      	ldr	r3, [pc, #344]	@ (8006b10 <loadMenuTexts+0xa18>)
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	6828      	ldr	r0, [r5, #0]
 80069be:	6869      	ldr	r1, [r5, #4]
 80069c0:	68aa      	ldr	r2, [r5, #8]
 80069c2:	68eb      	ldr	r3, [r5, #12]
 80069c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c6:	7c2b      	ldrb	r3, [r5, #16]
 80069c8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80069ca:	4a52      	ldr	r2, [pc, #328]	@ (8006b14 <loadMenuTexts+0xa1c>)
 80069cc:	4b52      	ldr	r3, [pc, #328]	@ (8006b18 <loadMenuTexts+0xa20>)
 80069ce:	4614      	mov	r4, r2
 80069d0:	461d      	mov	r5, r3
 80069d2:	6828      	ldr	r0, [r5, #0]
 80069d4:	6869      	ldr	r1, [r5, #4]
 80069d6:	68aa      	ldr	r2, [r5, #8]
 80069d8:	68eb      	ldr	r3, [r5, #12]
 80069da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069dc:	7c2b      	ldrb	r3, [r5, #16]
 80069de:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80069e0:	4a4e      	ldr	r2, [pc, #312]	@ (8006b1c <loadMenuTexts+0xa24>)
 80069e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b20 <loadMenuTexts+0xa28>)
 80069e4:	4614      	mov	r4, r2
 80069e6:	461d      	mov	r5, r3
 80069e8:	6828      	ldr	r0, [r5, #0]
 80069ea:	6869      	ldr	r1, [r5, #4]
 80069ec:	68aa      	ldr	r2, [r5, #8]
 80069ee:	68eb      	ldr	r3, [r5, #12]
 80069f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f2:	7c2b      	ldrb	r3, [r5, #16]
 80069f4:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80069f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006b24 <loadMenuTexts+0xa2c>)
 80069f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006b28 <loadMenuTexts+0xa30>)
 80069fa:	4614      	mov	r4, r2
 80069fc:	461d      	mov	r5, r3
 80069fe:	6828      	ldr	r0, [r5, #0]
 8006a00:	6869      	ldr	r1, [r5, #4]
 8006a02:	68aa      	ldr	r2, [r5, #8]
 8006a04:	68eb      	ldr	r3, [r5, #12]
 8006a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a08:	7c2b      	ldrb	r3, [r5, #16]
 8006a0a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006a0c:	4a47      	ldr	r2, [pc, #284]	@ (8006b2c <loadMenuTexts+0xa34>)
 8006a0e:	4b48      	ldr	r3, [pc, #288]	@ (8006b30 <loadMenuTexts+0xa38>)
 8006a10:	4614      	mov	r4, r2
 8006a12:	461d      	mov	r5, r3
 8006a14:	6828      	ldr	r0, [r5, #0]
 8006a16:	6869      	ldr	r1, [r5, #4]
 8006a18:	68aa      	ldr	r2, [r5, #8]
 8006a1a:	68eb      	ldr	r3, [r5, #12]
 8006a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a1e:	7c2b      	ldrb	r3, [r5, #16]
 8006a20:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006a22:	4a44      	ldr	r2, [pc, #272]	@ (8006b34 <loadMenuTexts+0xa3c>)
 8006a24:	4b44      	ldr	r3, [pc, #272]	@ (8006b38 <loadMenuTexts+0xa40>)
 8006a26:	4614      	mov	r4, r2
 8006a28:	461d      	mov	r5, r3
 8006a2a:	6828      	ldr	r0, [r5, #0]
 8006a2c:	6869      	ldr	r1, [r5, #4]
 8006a2e:	68aa      	ldr	r2, [r5, #8]
 8006a30:	68eb      	ldr	r3, [r5, #12]
 8006a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a34:	7c2b      	ldrb	r3, [r5, #16]
 8006a36:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006a38:	4a40      	ldr	r2, [pc, #256]	@ (8006b3c <loadMenuTexts+0xa44>)
 8006a3a:	4b41      	ldr	r3, [pc, #260]	@ (8006b40 <loadMenuTexts+0xa48>)
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
 8006a40:	6828      	ldr	r0, [r5, #0]
 8006a42:	6869      	ldr	r1, [r5, #4]
 8006a44:	68aa      	ldr	r2, [r5, #8]
 8006a46:	68eb      	ldr	r3, [r5, #12]
 8006a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4a:	7c2b      	ldrb	r3, [r5, #16]
 8006a4c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8006b44 <loadMenuTexts+0xa4c>)
 8006a50:	4b3d      	ldr	r3, [pc, #244]	@ (8006b48 <loadMenuTexts+0xa50>)
 8006a52:	4614      	mov	r4, r2
 8006a54:	461d      	mov	r5, r3
 8006a56:	6828      	ldr	r0, [r5, #0]
 8006a58:	6869      	ldr	r1, [r5, #4]
 8006a5a:	68aa      	ldr	r2, [r5, #8]
 8006a5c:	68eb      	ldr	r3, [r5, #12]
 8006a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a60:	7c2b      	ldrb	r3, [r5, #16]
 8006a62:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006a64:	4a39      	ldr	r2, [pc, #228]	@ (8006b4c <loadMenuTexts+0xa54>)
 8006a66:	4b3a      	ldr	r3, [pc, #232]	@ (8006b50 <loadMenuTexts+0xa58>)
 8006a68:	4614      	mov	r4, r2
 8006a6a:	461d      	mov	r5, r3
 8006a6c:	6828      	ldr	r0, [r5, #0]
 8006a6e:	6869      	ldr	r1, [r5, #4]
 8006a70:	68aa      	ldr	r2, [r5, #8]
 8006a72:	68eb      	ldr	r3, [r5, #12]
 8006a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a76:	7c2b      	ldrb	r3, [r5, #16]
 8006a78:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006a7a:	4a36      	ldr	r2, [pc, #216]	@ (8006b54 <loadMenuTexts+0xa5c>)
 8006a7c:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <loadMenuTexts+0xa60>)
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461d      	mov	r5, r3
 8006a82:	6828      	ldr	r0, [r5, #0]
 8006a84:	6869      	ldr	r1, [r5, #4]
 8006a86:	68aa      	ldr	r2, [r5, #8]
 8006a88:	68eb      	ldr	r3, [r5, #12]
 8006a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8c:	7c2b      	ldrb	r3, [r5, #16]
 8006a8e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006a90:	4a32      	ldr	r2, [pc, #200]	@ (8006b5c <loadMenuTexts+0xa64>)
 8006a92:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <loadMenuTexts+0xa68>)
 8006a94:	4614      	mov	r4, r2
 8006a96:	461d      	mov	r5, r3
 8006a98:	6828      	ldr	r0, [r5, #0]
 8006a9a:	6869      	ldr	r1, [r5, #4]
 8006a9c:	68aa      	ldr	r2, [r5, #8]
 8006a9e:	68eb      	ldr	r3, [r5, #12]
 8006aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa2:	7c2b      	ldrb	r3, [r5, #16]
 8006aa4:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b64 <loadMenuTexts+0xa6c>)
 8006aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8006b68 <loadMenuTexts+0xa70>)
 8006aaa:	4614      	mov	r4, r2
 8006aac:	461d      	mov	r5, r3
 8006aae:	6828      	ldr	r0, [r5, #0]
 8006ab0:	6869      	ldr	r1, [r5, #4]
 8006ab2:	68aa      	ldr	r2, [r5, #8]
 8006ab4:	68eb      	ldr	r3, [r5, #12]
 8006ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab8:	7c2b      	ldrb	r3, [r5, #16]
 8006aba:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006abc:	4a2b      	ldr	r2, [pc, #172]	@ (8006b6c <loadMenuTexts+0xa74>)
 8006abe:	4b2c      	ldr	r3, [pc, #176]	@ (8006b70 <loadMenuTexts+0xa78>)
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	6828      	ldr	r0, [r5, #0]
 8006ac6:	6869      	ldr	r1, [r5, #4]
 8006ac8:	68aa      	ldr	r2, [r5, #8]
 8006aca:	68eb      	ldr	r3, [r5, #12]
 8006acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ace:	7c2b      	ldrb	r3, [r5, #16]
 8006ad0:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006ad2:	4a28      	ldr	r2, [pc, #160]	@ (8006b74 <loadMenuTexts+0xa7c>)
 8006ad4:	4b28      	ldr	r3, [pc, #160]	@ (8006b78 <loadMenuTexts+0xa80>)
 8006ad6:	4614      	mov	r4, r2
 8006ad8:	461d      	mov	r5, r3
 8006ada:	6828      	ldr	r0, [r5, #0]
 8006adc:	6869      	ldr	r1, [r5, #4]
 8006ade:	68aa      	ldr	r2, [r5, #8]
 8006ae0:	68eb      	ldr	r3, [r5, #12]
 8006ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae4:	7c2b      	ldrb	r3, [r5, #16]
 8006ae6:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006ae8:	4a24      	ldr	r2, [pc, #144]	@ (8006b7c <loadMenuTexts+0xa84>)
 8006aea:	4b25      	ldr	r3, [pc, #148]	@ (8006b80 <loadMenuTexts+0xa88>)
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	6828      	ldr	r0, [r5, #0]
 8006af2:	6869      	ldr	r1, [r5, #4]
 8006af4:	68aa      	ldr	r2, [r5, #8]
 8006af6:	68eb      	ldr	r3, [r5, #12]
 8006af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afa:	7c2b      	ldrb	r3, [r5, #16]
 8006afc:	7023      	strb	r3, [r4, #0]
 8006afe:	f000 bd3a 	b.w	8007576 <loadMenuTexts+0x147e>
 8006b02:	bf00      	nop
 8006b04:	200017d4 	.word	0x200017d4
 8006b08:	20000cb8 	.word	0x20000cb8
 8006b0c:	200017e8 	.word	0x200017e8
 8006b10:	20000d1c 	.word	0x20000d1c
 8006b14:	200017fc 	.word	0x200017fc
 8006b18:	20000d30 	.word	0x20000d30
 8006b1c:	20001810 	.word	0x20001810
 8006b20:	20000d6c 	.word	0x20000d6c
 8006b24:	20001824 	.word	0x20001824
 8006b28:	20000d80 	.word	0x20000d80
 8006b2c:	20001838 	.word	0x20001838
 8006b30:	20000dbc 	.word	0x20000dbc
 8006b34:	2000184c 	.word	0x2000184c
 8006b38:	20000dd0 	.word	0x20000dd0
 8006b3c:	20001860 	.word	0x20001860
 8006b40:	20000e0c 	.word	0x20000e0c
 8006b44:	20001874 	.word	0x20001874
 8006b48:	20000e34 	.word	0x20000e34
 8006b4c:	20001888 	.word	0x20001888
 8006b50:	20000e5c 	.word	0x20000e5c
 8006b54:	2000189c 	.word	0x2000189c
 8006b58:	20000e84 	.word	0x20000e84
 8006b5c:	200018b0 	.word	0x200018b0
 8006b60:	20000eac 	.word	0x20000eac
 8006b64:	200018c4 	.word	0x200018c4
 8006b68:	20000ed4 	.word	0x20000ed4
 8006b6c:	200018d8 	.word	0x200018d8
 8006b70:	20000efc 	.word	0x20000efc
 8006b74:	200018ec 	.word	0x200018ec
 8006b78:	20000f24 	.word	0x20000f24
 8006b7c:	20001900 	.word	0x20001900
 8006b80:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006b84:	4ac6      	ldr	r2, [pc, #792]	@ (8006ea0 <loadMenuTexts+0xda8>)
 8006b86:	4bc7      	ldr	r3, [pc, #796]	@ (8006ea4 <loadMenuTexts+0xdac>)
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	6869      	ldr	r1, [r5, #4]
 8006b90:	68aa      	ldr	r2, [r5, #8]
 8006b92:	68eb      	ldr	r3, [r5, #12]
 8006b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b96:	7c2b      	ldrb	r3, [r5, #16]
 8006b98:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006b9a:	4ac3      	ldr	r2, [pc, #780]	@ (8006ea8 <loadMenuTexts+0xdb0>)
 8006b9c:	4bc3      	ldr	r3, [pc, #780]	@ (8006eac <loadMenuTexts+0xdb4>)
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	68aa      	ldr	r2, [r5, #8]
 8006ba8:	68eb      	ldr	r3, [r5, #12]
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	7c2b      	ldrb	r3, [r5, #16]
 8006bae:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006bb0:	4abf      	ldr	r2, [pc, #764]	@ (8006eb0 <loadMenuTexts+0xdb8>)
 8006bb2:	4bc0      	ldr	r3, [pc, #768]	@ (8006eb4 <loadMenuTexts+0xdbc>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	6828      	ldr	r0, [r5, #0]
 8006bba:	6869      	ldr	r1, [r5, #4]
 8006bbc:	68aa      	ldr	r2, [r5, #8]
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc2:	7c2b      	ldrb	r3, [r5, #16]
 8006bc4:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006bc6:	4abc      	ldr	r2, [pc, #752]	@ (8006eb8 <loadMenuTexts+0xdc0>)
 8006bc8:	4bbc      	ldr	r3, [pc, #752]	@ (8006ebc <loadMenuTexts+0xdc4>)
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	6828      	ldr	r0, [r5, #0]
 8006bd0:	6869      	ldr	r1, [r5, #4]
 8006bd2:	68aa      	ldr	r2, [r5, #8]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd8:	7c2b      	ldrb	r3, [r5, #16]
 8006bda:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006bdc:	4ab8      	ldr	r2, [pc, #736]	@ (8006ec0 <loadMenuTexts+0xdc8>)
 8006bde:	4bb9      	ldr	r3, [pc, #740]	@ (8006ec4 <loadMenuTexts+0xdcc>)
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	6828      	ldr	r0, [r5, #0]
 8006be6:	6869      	ldr	r1, [r5, #4]
 8006be8:	68aa      	ldr	r2, [r5, #8]
 8006bea:	68eb      	ldr	r3, [r5, #12]
 8006bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bee:	7c2b      	ldrb	r3, [r5, #16]
 8006bf0:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006bf2:	4ab5      	ldr	r2, [pc, #724]	@ (8006ec8 <loadMenuTexts+0xdd0>)
 8006bf4:	4bb5      	ldr	r3, [pc, #724]	@ (8006ecc <loadMenuTexts+0xdd4>)
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	6869      	ldr	r1, [r5, #4]
 8006bfe:	68aa      	ldr	r2, [r5, #8]
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c04:	7c2b      	ldrb	r3, [r5, #16]
 8006c06:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006c08:	4ab1      	ldr	r2, [pc, #708]	@ (8006ed0 <loadMenuTexts+0xdd8>)
 8006c0a:	4bb2      	ldr	r3, [pc, #712]	@ (8006ed4 <loadMenuTexts+0xddc>)
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	6828      	ldr	r0, [r5, #0]
 8006c12:	6869      	ldr	r1, [r5, #4]
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	7c2b      	ldrb	r3, [r5, #16]
 8006c1c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006c1e:	4aae      	ldr	r2, [pc, #696]	@ (8006ed8 <loadMenuTexts+0xde0>)
 8006c20:	4bae      	ldr	r3, [pc, #696]	@ (8006edc <loadMenuTexts+0xde4>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	6869      	ldr	r1, [r5, #4]
 8006c2a:	68aa      	ldr	r2, [r5, #8]
 8006c2c:	68eb      	ldr	r3, [r5, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	7c2b      	ldrb	r3, [r5, #16]
 8006c32:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006c34:	4aaa      	ldr	r2, [pc, #680]	@ (8006ee0 <loadMenuTexts+0xde8>)
 8006c36:	4bab      	ldr	r3, [pc, #684]	@ (8006ee4 <loadMenuTexts+0xdec>)
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	6869      	ldr	r1, [r5, #4]
 8006c40:	68aa      	ldr	r2, [r5, #8]
 8006c42:	68eb      	ldr	r3, [r5, #12]
 8006c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c46:	7c2b      	ldrb	r3, [r5, #16]
 8006c48:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006c4a:	4aa7      	ldr	r2, [pc, #668]	@ (8006ee8 <loadMenuTexts+0xdf0>)
 8006c4c:	4ba7      	ldr	r3, [pc, #668]	@ (8006eec <loadMenuTexts+0xdf4>)
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461d      	mov	r5, r3
 8006c52:	6828      	ldr	r0, [r5, #0]
 8006c54:	6869      	ldr	r1, [r5, #4]
 8006c56:	68aa      	ldr	r2, [r5, #8]
 8006c58:	68eb      	ldr	r3, [r5, #12]
 8006c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5c:	7c2b      	ldrb	r3, [r5, #16]
 8006c5e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006c60:	4aa3      	ldr	r2, [pc, #652]	@ (8006ef0 <loadMenuTexts+0xdf8>)
 8006c62:	4ba4      	ldr	r3, [pc, #656]	@ (8006ef4 <loadMenuTexts+0xdfc>)
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	6828      	ldr	r0, [r5, #0]
 8006c6a:	6869      	ldr	r1, [r5, #4]
 8006c6c:	68aa      	ldr	r2, [r5, #8]
 8006c6e:	68eb      	ldr	r3, [r5, #12]
 8006c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c72:	7c2b      	ldrb	r3, [r5, #16]
 8006c74:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006c76:	4aa0      	ldr	r2, [pc, #640]	@ (8006ef8 <loadMenuTexts+0xe00>)
 8006c78:	4ba0      	ldr	r3, [pc, #640]	@ (8006efc <loadMenuTexts+0xe04>)
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	6828      	ldr	r0, [r5, #0]
 8006c80:	6869      	ldr	r1, [r5, #4]
 8006c82:	68aa      	ldr	r2, [r5, #8]
 8006c84:	68eb      	ldr	r3, [r5, #12]
 8006c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c88:	7c2b      	ldrb	r3, [r5, #16]
 8006c8a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006c8c:	4a9c      	ldr	r2, [pc, #624]	@ (8006f00 <loadMenuTexts+0xe08>)
 8006c8e:	4b9d      	ldr	r3, [pc, #628]	@ (8006f04 <loadMenuTexts+0xe0c>)
 8006c90:	4614      	mov	r4, r2
 8006c92:	461d      	mov	r5, r3
 8006c94:	6828      	ldr	r0, [r5, #0]
 8006c96:	6869      	ldr	r1, [r5, #4]
 8006c98:	68aa      	ldr	r2, [r5, #8]
 8006c9a:	68eb      	ldr	r3, [r5, #12]
 8006c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c9e:	7c2b      	ldrb	r3, [r5, #16]
 8006ca0:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006ca2:	4a99      	ldr	r2, [pc, #612]	@ (8006f08 <loadMenuTexts+0xe10>)
 8006ca4:	4b99      	ldr	r3, [pc, #612]	@ (8006f0c <loadMenuTexts+0xe14>)
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	461d      	mov	r5, r3
 8006caa:	6828      	ldr	r0, [r5, #0]
 8006cac:	6869      	ldr	r1, [r5, #4]
 8006cae:	68aa      	ldr	r2, [r5, #8]
 8006cb0:	68eb      	ldr	r3, [r5, #12]
 8006cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb4:	7c2b      	ldrb	r3, [r5, #16]
 8006cb6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006cb8:	4a95      	ldr	r2, [pc, #596]	@ (8006f10 <loadMenuTexts+0xe18>)
 8006cba:	4b96      	ldr	r3, [pc, #600]	@ (8006f14 <loadMenuTexts+0xe1c>)
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	6828      	ldr	r0, [r5, #0]
 8006cc2:	6869      	ldr	r1, [r5, #4]
 8006cc4:	68aa      	ldr	r2, [r5, #8]
 8006cc6:	68eb      	ldr	r3, [r5, #12]
 8006cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cca:	7c2b      	ldrb	r3, [r5, #16]
 8006ccc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006cce:	4a92      	ldr	r2, [pc, #584]	@ (8006f18 <loadMenuTexts+0xe20>)
 8006cd0:	4b92      	ldr	r3, [pc, #584]	@ (8006f1c <loadMenuTexts+0xe24>)
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	6828      	ldr	r0, [r5, #0]
 8006cd8:	6869      	ldr	r1, [r5, #4]
 8006cda:	68aa      	ldr	r2, [r5, #8]
 8006cdc:	68eb      	ldr	r3, [r5, #12]
 8006cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce0:	7c2b      	ldrb	r3, [r5, #16]
 8006ce2:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8006f20 <loadMenuTexts+0xe28>)
 8006ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f24 <loadMenuTexts+0xe2c>)
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	6828      	ldr	r0, [r5, #0]
 8006cee:	6869      	ldr	r1, [r5, #4]
 8006cf0:	68aa      	ldr	r2, [r5, #8]
 8006cf2:	68eb      	ldr	r3, [r5, #12]
 8006cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf6:	7c2b      	ldrb	r3, [r5, #16]
 8006cf8:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006cfa:	4a8b      	ldr	r2, [pc, #556]	@ (8006f28 <loadMenuTexts+0xe30>)
 8006cfc:	4b8b      	ldr	r3, [pc, #556]	@ (8006f2c <loadMenuTexts+0xe34>)
 8006cfe:	4614      	mov	r4, r2
 8006d00:	461d      	mov	r5, r3
 8006d02:	6828      	ldr	r0, [r5, #0]
 8006d04:	6869      	ldr	r1, [r5, #4]
 8006d06:	68aa      	ldr	r2, [r5, #8]
 8006d08:	68eb      	ldr	r3, [r5, #12]
 8006d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0c:	7c2b      	ldrb	r3, [r5, #16]
 8006d0e:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006d10:	4a87      	ldr	r2, [pc, #540]	@ (8006f30 <loadMenuTexts+0xe38>)
 8006d12:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <loadMenuTexts+0xe3c>)
 8006d14:	4614      	mov	r4, r2
 8006d16:	461d      	mov	r5, r3
 8006d18:	6828      	ldr	r0, [r5, #0]
 8006d1a:	6869      	ldr	r1, [r5, #4]
 8006d1c:	68aa      	ldr	r2, [r5, #8]
 8006d1e:	68eb      	ldr	r3, [r5, #12]
 8006d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d22:	7c2b      	ldrb	r3, [r5, #16]
 8006d24:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006d26:	4a84      	ldr	r2, [pc, #528]	@ (8006f38 <loadMenuTexts+0xe40>)
 8006d28:	4b84      	ldr	r3, [pc, #528]	@ (8006f3c <loadMenuTexts+0xe44>)
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	6828      	ldr	r0, [r5, #0]
 8006d30:	6869      	ldr	r1, [r5, #4]
 8006d32:	68aa      	ldr	r2, [r5, #8]
 8006d34:	68eb      	ldr	r3, [r5, #12]
 8006d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d38:	7c2b      	ldrb	r3, [r5, #16]
 8006d3a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006d3c:	4a80      	ldr	r2, [pc, #512]	@ (8006f40 <loadMenuTexts+0xe48>)
 8006d3e:	4b81      	ldr	r3, [pc, #516]	@ (8006f44 <loadMenuTexts+0xe4c>)
 8006d40:	4614      	mov	r4, r2
 8006d42:	461d      	mov	r5, r3
 8006d44:	6828      	ldr	r0, [r5, #0]
 8006d46:	6869      	ldr	r1, [r5, #4]
 8006d48:	68aa      	ldr	r2, [r5, #8]
 8006d4a:	68eb      	ldr	r3, [r5, #12]
 8006d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4e:	7c2b      	ldrb	r3, [r5, #16]
 8006d50:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006d52:	4a7d      	ldr	r2, [pc, #500]	@ (8006f48 <loadMenuTexts+0xe50>)
 8006d54:	4b7d      	ldr	r3, [pc, #500]	@ (8006f4c <loadMenuTexts+0xe54>)
 8006d56:	4614      	mov	r4, r2
 8006d58:	461d      	mov	r5, r3
 8006d5a:	6828      	ldr	r0, [r5, #0]
 8006d5c:	6869      	ldr	r1, [r5, #4]
 8006d5e:	68aa      	ldr	r2, [r5, #8]
 8006d60:	68eb      	ldr	r3, [r5, #12]
 8006d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d64:	7c2b      	ldrb	r3, [r5, #16]
 8006d66:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006d68:	4a79      	ldr	r2, [pc, #484]	@ (8006f50 <loadMenuTexts+0xe58>)
 8006d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f54 <loadMenuTexts+0xe5c>)
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	6828      	ldr	r0, [r5, #0]
 8006d72:	6869      	ldr	r1, [r5, #4]
 8006d74:	68aa      	ldr	r2, [r5, #8]
 8006d76:	68eb      	ldr	r3, [r5, #12]
 8006d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7a:	7c2b      	ldrb	r3, [r5, #16]
 8006d7c:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006d7e:	4a76      	ldr	r2, [pc, #472]	@ (8006f58 <loadMenuTexts+0xe60>)
 8006d80:	4b76      	ldr	r3, [pc, #472]	@ (8006f5c <loadMenuTexts+0xe64>)
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	6828      	ldr	r0, [r5, #0]
 8006d88:	6869      	ldr	r1, [r5, #4]
 8006d8a:	68aa      	ldr	r2, [r5, #8]
 8006d8c:	68eb      	ldr	r3, [r5, #12]
 8006d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d90:	7c2b      	ldrb	r3, [r5, #16]
 8006d92:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006d94:	4a72      	ldr	r2, [pc, #456]	@ (8006f60 <loadMenuTexts+0xe68>)
 8006d96:	4b73      	ldr	r3, [pc, #460]	@ (8006f64 <loadMenuTexts+0xe6c>)
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	6828      	ldr	r0, [r5, #0]
 8006d9e:	6869      	ldr	r1, [r5, #4]
 8006da0:	68aa      	ldr	r2, [r5, #8]
 8006da2:	68eb      	ldr	r3, [r5, #12]
 8006da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da6:	7c2b      	ldrb	r3, [r5, #16]
 8006da8:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006daa:	4a6f      	ldr	r2, [pc, #444]	@ (8006f68 <loadMenuTexts+0xe70>)
 8006dac:	4b6f      	ldr	r3, [pc, #444]	@ (8006f6c <loadMenuTexts+0xe74>)
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	6828      	ldr	r0, [r5, #0]
 8006db4:	6869      	ldr	r1, [r5, #4]
 8006db6:	68aa      	ldr	r2, [r5, #8]
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbc:	7c2b      	ldrb	r3, [r5, #16]
 8006dbe:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8006f70 <loadMenuTexts+0xe78>)
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f74 <loadMenuTexts+0xe7c>)
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	6828      	ldr	r0, [r5, #0]
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	68aa      	ldr	r2, [r5, #8]
 8006dce:	68eb      	ldr	r3, [r5, #12]
 8006dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd2:	7c2b      	ldrb	r3, [r5, #16]
 8006dd4:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006dd6:	4a68      	ldr	r2, [pc, #416]	@ (8006f78 <loadMenuTexts+0xe80>)
 8006dd8:	4b68      	ldr	r3, [pc, #416]	@ (8006f7c <loadMenuTexts+0xe84>)
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	6828      	ldr	r0, [r5, #0]
 8006de0:	6869      	ldr	r1, [r5, #4]
 8006de2:	68aa      	ldr	r2, [r5, #8]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	7c2b      	ldrb	r3, [r5, #16]
 8006dea:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006dec:	4a64      	ldr	r2, [pc, #400]	@ (8006f80 <loadMenuTexts+0xe88>)
 8006dee:	4b65      	ldr	r3, [pc, #404]	@ (8006f84 <loadMenuTexts+0xe8c>)
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	6828      	ldr	r0, [r5, #0]
 8006df6:	6869      	ldr	r1, [r5, #4]
 8006df8:	68aa      	ldr	r2, [r5, #8]
 8006dfa:	68eb      	ldr	r3, [r5, #12]
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	7c2b      	ldrb	r3, [r5, #16]
 8006e00:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006e02:	4a61      	ldr	r2, [pc, #388]	@ (8006f88 <loadMenuTexts+0xe90>)
 8006e04:	4b61      	ldr	r3, [pc, #388]	@ (8006f8c <loadMenuTexts+0xe94>)
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	68aa      	ldr	r2, [r5, #8]
 8006e10:	68eb      	ldr	r3, [r5, #12]
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	7c2b      	ldrb	r3, [r5, #16]
 8006e16:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006e18:	4a5d      	ldr	r2, [pc, #372]	@ (8006f90 <loadMenuTexts+0xe98>)
 8006e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8006f94 <loadMenuTexts+0xe9c>)
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	6828      	ldr	r0, [r5, #0]
 8006e22:	6869      	ldr	r1, [r5, #4]
 8006e24:	68aa      	ldr	r2, [r5, #8]
 8006e26:	68eb      	ldr	r3, [r5, #12]
 8006e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2a:	7c2b      	ldrb	r3, [r5, #16]
 8006e2c:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8006f98 <loadMenuTexts+0xea0>)
 8006e30:	4b5a      	ldr	r3, [pc, #360]	@ (8006f9c <loadMenuTexts+0xea4>)
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	6828      	ldr	r0, [r5, #0]
 8006e38:	6869      	ldr	r1, [r5, #4]
 8006e3a:	68aa      	ldr	r2, [r5, #8]
 8006e3c:	68eb      	ldr	r3, [r5, #12]
 8006e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e40:	7c2b      	ldrb	r3, [r5, #16]
 8006e42:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006e44:	4a56      	ldr	r2, [pc, #344]	@ (8006fa0 <loadMenuTexts+0xea8>)
 8006e46:	4b57      	ldr	r3, [pc, #348]	@ (8006fa4 <loadMenuTexts+0xeac>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	6828      	ldr	r0, [r5, #0]
 8006e4e:	6869      	ldr	r1, [r5, #4]
 8006e50:	68aa      	ldr	r2, [r5, #8]
 8006e52:	68eb      	ldr	r3, [r5, #12]
 8006e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e56:	7c2b      	ldrb	r3, [r5, #16]
 8006e58:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006e5a:	4a53      	ldr	r2, [pc, #332]	@ (8006fa8 <loadMenuTexts+0xeb0>)
 8006e5c:	4b53      	ldr	r3, [pc, #332]	@ (8006fac <loadMenuTexts+0xeb4>)
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461d      	mov	r5, r3
 8006e62:	6828      	ldr	r0, [r5, #0]
 8006e64:	6869      	ldr	r1, [r5, #4]
 8006e66:	68aa      	ldr	r2, [r5, #8]
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	7c2b      	ldrb	r3, [r5, #16]
 8006e6e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006e70:	4a4f      	ldr	r2, [pc, #316]	@ (8006fb0 <loadMenuTexts+0xeb8>)
 8006e72:	4b50      	ldr	r3, [pc, #320]	@ (8006fb4 <loadMenuTexts+0xebc>)
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	6828      	ldr	r0, [r5, #0]
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	68aa      	ldr	r2, [r5, #8]
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e82:	7c2b      	ldrb	r3, [r5, #16]
 8006e84:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006e86:	4a4c      	ldr	r2, [pc, #304]	@ (8006fb8 <loadMenuTexts+0xec0>)
 8006e88:	4b4c      	ldr	r3, [pc, #304]	@ (8006fbc <loadMenuTexts+0xec4>)
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	6828      	ldr	r0, [r5, #0]
 8006e90:	6869      	ldr	r1, [r5, #4]
 8006e92:	68aa      	ldr	r2, [r5, #8]
 8006e94:	68eb      	ldr	r3, [r5, #12]
 8006e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e98:	7c2b      	ldrb	r3, [r5, #16]
 8006e9a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006e9c:	4a48      	ldr	r2, [pc, #288]	@ (8006fc0 <loadMenuTexts+0xec8>)
 8006e9e:	e091      	b.n	8006fc4 <loadMenuTexts+0xecc>
 8006ea0:	20001220 	.word	0x20001220
 8006ea4:	20000704 	.word	0x20000704
 8006ea8:	20001234 	.word	0x20001234
 8006eac:	20000718 	.word	0x20000718
 8006eb0:	20001248 	.word	0x20001248
 8006eb4:	2000072c 	.word	0x2000072c
 8006eb8:	2000125c 	.word	0x2000125c
 8006ebc:	20000740 	.word	0x20000740
 8006ec0:	20001270 	.word	0x20001270
 8006ec4:	20000754 	.word	0x20000754
 8006ec8:	20001284 	.word	0x20001284
 8006ecc:	20000768 	.word	0x20000768
 8006ed0:	20001298 	.word	0x20001298
 8006ed4:	2000077c 	.word	0x2000077c
 8006ed8:	200012ac 	.word	0x200012ac
 8006edc:	20000790 	.word	0x20000790
 8006ee0:	200012c0 	.word	0x200012c0
 8006ee4:	200007a4 	.word	0x200007a4
 8006ee8:	200012d4 	.word	0x200012d4
 8006eec:	200007b8 	.word	0x200007b8
 8006ef0:	200012e8 	.word	0x200012e8
 8006ef4:	200007cc 	.word	0x200007cc
 8006ef8:	200012fc 	.word	0x200012fc
 8006efc:	200007e0 	.word	0x200007e0
 8006f00:	20001310 	.word	0x20001310
 8006f04:	200007f4 	.word	0x200007f4
 8006f08:	20001324 	.word	0x20001324
 8006f0c:	20000808 	.word	0x20000808
 8006f10:	20001338 	.word	0x20001338
 8006f14:	2000081c 	.word	0x2000081c
 8006f18:	2000134c 	.word	0x2000134c
 8006f1c:	20000830 	.word	0x20000830
 8006f20:	20001360 	.word	0x20001360
 8006f24:	20000844 	.word	0x20000844
 8006f28:	20001374 	.word	0x20001374
 8006f2c:	20000858 	.word	0x20000858
 8006f30:	20001388 	.word	0x20001388
 8006f34:	2000086c 	.word	0x2000086c
 8006f38:	2000139c 	.word	0x2000139c
 8006f3c:	20000880 	.word	0x20000880
 8006f40:	200013b0 	.word	0x200013b0
 8006f44:	20000894 	.word	0x20000894
 8006f48:	200013c4 	.word	0x200013c4
 8006f4c:	200008a8 	.word	0x200008a8
 8006f50:	200013d8 	.word	0x200013d8
 8006f54:	200008bc 	.word	0x200008bc
 8006f58:	200013ec 	.word	0x200013ec
 8006f5c:	200008d0 	.word	0x200008d0
 8006f60:	20001400 	.word	0x20001400
 8006f64:	200008e4 	.word	0x200008e4
 8006f68:	20001414 	.word	0x20001414
 8006f6c:	200008f8 	.word	0x200008f8
 8006f70:	20001428 	.word	0x20001428
 8006f74:	2000090c 	.word	0x2000090c
 8006f78:	2000143c 	.word	0x2000143c
 8006f7c:	20000920 	.word	0x20000920
 8006f80:	20001450 	.word	0x20001450
 8006f84:	20000934 	.word	0x20000934
 8006f88:	20001464 	.word	0x20001464
 8006f8c:	20000948 	.word	0x20000948
 8006f90:	20001478 	.word	0x20001478
 8006f94:	2000095c 	.word	0x2000095c
 8006f98:	2000148c 	.word	0x2000148c
 8006f9c:	20000970 	.word	0x20000970
 8006fa0:	200014a0 	.word	0x200014a0
 8006fa4:	20000984 	.word	0x20000984
 8006fa8:	200014b4 	.word	0x200014b4
 8006fac:	20000998 	.word	0x20000998
 8006fb0:	200014c8 	.word	0x200014c8
 8006fb4:	200009ac 	.word	0x200009ac
 8006fb8:	200014dc 	.word	0x200014dc
 8006fbc:	200009c0 	.word	0x200009c0
 8006fc0:	200014f0 	.word	0x200014f0
 8006fc4:	4bc7      	ldr	r3, [pc, #796]	@ (80072e4 <loadMenuTexts+0x11ec>)
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461d      	mov	r5, r3
 8006fca:	6828      	ldr	r0, [r5, #0]
 8006fcc:	6869      	ldr	r1, [r5, #4]
 8006fce:	68aa      	ldr	r2, [r5, #8]
 8006fd0:	68eb      	ldr	r3, [r5, #12]
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd4:	7c2b      	ldrb	r3, [r5, #16]
 8006fd6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006fd8:	4ac3      	ldr	r2, [pc, #780]	@ (80072e8 <loadMenuTexts+0x11f0>)
 8006fda:	4bc4      	ldr	r3, [pc, #784]	@ (80072ec <loadMenuTexts+0x11f4>)
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	6828      	ldr	r0, [r5, #0]
 8006fe2:	6869      	ldr	r1, [r5, #4]
 8006fe4:	68aa      	ldr	r2, [r5, #8]
 8006fe6:	68eb      	ldr	r3, [r5, #12]
 8006fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fea:	7c2b      	ldrb	r3, [r5, #16]
 8006fec:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006fee:	4ac0      	ldr	r2, [pc, #768]	@ (80072f0 <loadMenuTexts+0x11f8>)
 8006ff0:	4bc0      	ldr	r3, [pc, #768]	@ (80072f4 <loadMenuTexts+0x11fc>)
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	6828      	ldr	r0, [r5, #0]
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	68aa      	ldr	r2, [r5, #8]
 8006ffc:	68eb      	ldr	r3, [r5, #12]
 8006ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007000:	7c2b      	ldrb	r3, [r5, #16]
 8007002:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007004:	4abc      	ldr	r2, [pc, #752]	@ (80072f8 <loadMenuTexts+0x1200>)
 8007006:	4bbd      	ldr	r3, [pc, #756]	@ (80072fc <loadMenuTexts+0x1204>)
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	6828      	ldr	r0, [r5, #0]
 800700e:	6869      	ldr	r1, [r5, #4]
 8007010:	68aa      	ldr	r2, [r5, #8]
 8007012:	68eb      	ldr	r3, [r5, #12]
 8007014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007016:	7c2b      	ldrb	r3, [r5, #16]
 8007018:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800701a:	4ab9      	ldr	r2, [pc, #740]	@ (8007300 <loadMenuTexts+0x1208>)
 800701c:	4bb9      	ldr	r3, [pc, #740]	@ (8007304 <loadMenuTexts+0x120c>)
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	6828      	ldr	r0, [r5, #0]
 8007024:	6869      	ldr	r1, [r5, #4]
 8007026:	68aa      	ldr	r2, [r5, #8]
 8007028:	68eb      	ldr	r3, [r5, #12]
 800702a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702c:	7c2b      	ldrb	r3, [r5, #16]
 800702e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007030:	4ab5      	ldr	r2, [pc, #724]	@ (8007308 <loadMenuTexts+0x1210>)
 8007032:	4bb6      	ldr	r3, [pc, #728]	@ (800730c <loadMenuTexts+0x1214>)
 8007034:	4614      	mov	r4, r2
 8007036:	461d      	mov	r5, r3
 8007038:	6828      	ldr	r0, [r5, #0]
 800703a:	6869      	ldr	r1, [r5, #4]
 800703c:	68aa      	ldr	r2, [r5, #8]
 800703e:	68eb      	ldr	r3, [r5, #12]
 8007040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007042:	7c2b      	ldrb	r3, [r5, #16]
 8007044:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007046:	4ab2      	ldr	r2, [pc, #712]	@ (8007310 <loadMenuTexts+0x1218>)
 8007048:	4bb2      	ldr	r3, [pc, #712]	@ (8007314 <loadMenuTexts+0x121c>)
 800704a:	4614      	mov	r4, r2
 800704c:	461d      	mov	r5, r3
 800704e:	6828      	ldr	r0, [r5, #0]
 8007050:	6869      	ldr	r1, [r5, #4]
 8007052:	68aa      	ldr	r2, [r5, #8]
 8007054:	68eb      	ldr	r3, [r5, #12]
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	7c2b      	ldrb	r3, [r5, #16]
 800705a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 800705c:	4aae      	ldr	r2, [pc, #696]	@ (8007318 <loadMenuTexts+0x1220>)
 800705e:	4baf      	ldr	r3, [pc, #700]	@ (800731c <loadMenuTexts+0x1224>)
 8007060:	4614      	mov	r4, r2
 8007062:	461d      	mov	r5, r3
 8007064:	6828      	ldr	r0, [r5, #0]
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	68aa      	ldr	r2, [r5, #8]
 800706a:	68eb      	ldr	r3, [r5, #12]
 800706c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706e:	7c2b      	ldrb	r3, [r5, #16]
 8007070:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8007072:	4aab      	ldr	r2, [pc, #684]	@ (8007320 <loadMenuTexts+0x1228>)
 8007074:	4bab      	ldr	r3, [pc, #684]	@ (8007324 <loadMenuTexts+0x122c>)
 8007076:	4614      	mov	r4, r2
 8007078:	461d      	mov	r5, r3
 800707a:	6828      	ldr	r0, [r5, #0]
 800707c:	6869      	ldr	r1, [r5, #4]
 800707e:	68aa      	ldr	r2, [r5, #8]
 8007080:	68eb      	ldr	r3, [r5, #12]
 8007082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007084:	7c2b      	ldrb	r3, [r5, #16]
 8007086:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007088:	4aa7      	ldr	r2, [pc, #668]	@ (8007328 <loadMenuTexts+0x1230>)
 800708a:	4ba8      	ldr	r3, [pc, #672]	@ (800732c <loadMenuTexts+0x1234>)
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	6828      	ldr	r0, [r5, #0]
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	68aa      	ldr	r2, [r5, #8]
 8007096:	68eb      	ldr	r3, [r5, #12]
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709a:	7c2b      	ldrb	r3, [r5, #16]
 800709c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 800709e:	4aa4      	ldr	r2, [pc, #656]	@ (8007330 <loadMenuTexts+0x1238>)
 80070a0:	4ba4      	ldr	r3, [pc, #656]	@ (8007334 <loadMenuTexts+0x123c>)
 80070a2:	4614      	mov	r4, r2
 80070a4:	461d      	mov	r5, r3
 80070a6:	6828      	ldr	r0, [r5, #0]
 80070a8:	6869      	ldr	r1, [r5, #4]
 80070aa:	68aa      	ldr	r2, [r5, #8]
 80070ac:	68eb      	ldr	r3, [r5, #12]
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	7c2b      	ldrb	r3, [r5, #16]
 80070b2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80070b4:	4aa0      	ldr	r2, [pc, #640]	@ (8007338 <loadMenuTexts+0x1240>)
 80070b6:	4ba1      	ldr	r3, [pc, #644]	@ (800733c <loadMenuTexts+0x1244>)
 80070b8:	4614      	mov	r4, r2
 80070ba:	461d      	mov	r5, r3
 80070bc:	6828      	ldr	r0, [r5, #0]
 80070be:	6869      	ldr	r1, [r5, #4]
 80070c0:	68aa      	ldr	r2, [r5, #8]
 80070c2:	68eb      	ldr	r3, [r5, #12]
 80070c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c6:	7c2b      	ldrb	r3, [r5, #16]
 80070c8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80070ca:	4a9d      	ldr	r2, [pc, #628]	@ (8007340 <loadMenuTexts+0x1248>)
 80070cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007344 <loadMenuTexts+0x124c>)
 80070ce:	4614      	mov	r4, r2
 80070d0:	461d      	mov	r5, r3
 80070d2:	6828      	ldr	r0, [r5, #0]
 80070d4:	6869      	ldr	r1, [r5, #4]
 80070d6:	68aa      	ldr	r2, [r5, #8]
 80070d8:	68eb      	ldr	r3, [r5, #12]
 80070da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070dc:	7c2b      	ldrb	r3, [r5, #16]
 80070de:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 80070e0:	4a99      	ldr	r2, [pc, #612]	@ (8007348 <loadMenuTexts+0x1250>)
 80070e2:	4b9a      	ldr	r3, [pc, #616]	@ (800734c <loadMenuTexts+0x1254>)
 80070e4:	4614      	mov	r4, r2
 80070e6:	461d      	mov	r5, r3
 80070e8:	6828      	ldr	r0, [r5, #0]
 80070ea:	6869      	ldr	r1, [r5, #4]
 80070ec:	68aa      	ldr	r2, [r5, #8]
 80070ee:	68eb      	ldr	r3, [r5, #12]
 80070f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f2:	7c2b      	ldrb	r3, [r5, #16]
 80070f4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 80070f6:	4a96      	ldr	r2, [pc, #600]	@ (8007350 <loadMenuTexts+0x1258>)
 80070f8:	4b96      	ldr	r3, [pc, #600]	@ (8007354 <loadMenuTexts+0x125c>)
 80070fa:	4614      	mov	r4, r2
 80070fc:	461d      	mov	r5, r3
 80070fe:	6828      	ldr	r0, [r5, #0]
 8007100:	6869      	ldr	r1, [r5, #4]
 8007102:	68aa      	ldr	r2, [r5, #8]
 8007104:	68eb      	ldr	r3, [r5, #12]
 8007106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007108:	7c2b      	ldrb	r3, [r5, #16]
 800710a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 800710c:	4a92      	ldr	r2, [pc, #584]	@ (8007358 <loadMenuTexts+0x1260>)
 800710e:	4b93      	ldr	r3, [pc, #588]	@ (800735c <loadMenuTexts+0x1264>)
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	6828      	ldr	r0, [r5, #0]
 8007116:	6869      	ldr	r1, [r5, #4]
 8007118:	68aa      	ldr	r2, [r5, #8]
 800711a:	68eb      	ldr	r3, [r5, #12]
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	7c2b      	ldrb	r3, [r5, #16]
 8007120:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007122:	4a8f      	ldr	r2, [pc, #572]	@ (8007360 <loadMenuTexts+0x1268>)
 8007124:	4b8f      	ldr	r3, [pc, #572]	@ (8007364 <loadMenuTexts+0x126c>)
 8007126:	4614      	mov	r4, r2
 8007128:	461d      	mov	r5, r3
 800712a:	6828      	ldr	r0, [r5, #0]
 800712c:	6869      	ldr	r1, [r5, #4]
 800712e:	68aa      	ldr	r2, [r5, #8]
 8007130:	68eb      	ldr	r3, [r5, #12]
 8007132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007134:	7c2b      	ldrb	r3, [r5, #16]
 8007136:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007138:	4a8b      	ldr	r2, [pc, #556]	@ (8007368 <loadMenuTexts+0x1270>)
 800713a:	4b8c      	ldr	r3, [pc, #560]	@ (800736c <loadMenuTexts+0x1274>)
 800713c:	4614      	mov	r4, r2
 800713e:	461d      	mov	r5, r3
 8007140:	6828      	ldr	r0, [r5, #0]
 8007142:	6869      	ldr	r1, [r5, #4]
 8007144:	68aa      	ldr	r2, [r5, #8]
 8007146:	68eb      	ldr	r3, [r5, #12]
 8007148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714a:	7c2b      	ldrb	r3, [r5, #16]
 800714c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800714e:	4a88      	ldr	r2, [pc, #544]	@ (8007370 <loadMenuTexts+0x1278>)
 8007150:	4b88      	ldr	r3, [pc, #544]	@ (8007374 <loadMenuTexts+0x127c>)
 8007152:	4614      	mov	r4, r2
 8007154:	461d      	mov	r5, r3
 8007156:	6828      	ldr	r0, [r5, #0]
 8007158:	6869      	ldr	r1, [r5, #4]
 800715a:	68aa      	ldr	r2, [r5, #8]
 800715c:	68eb      	ldr	r3, [r5, #12]
 800715e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007160:	7c2b      	ldrb	r3, [r5, #16]
 8007162:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007164:	4a84      	ldr	r2, [pc, #528]	@ (8007378 <loadMenuTexts+0x1280>)
 8007166:	4b85      	ldr	r3, [pc, #532]	@ (800737c <loadMenuTexts+0x1284>)
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	6828      	ldr	r0, [r5, #0]
 800716e:	6869      	ldr	r1, [r5, #4]
 8007170:	68aa      	ldr	r2, [r5, #8]
 8007172:	68eb      	ldr	r3, [r5, #12]
 8007174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007176:	7c2b      	ldrb	r3, [r5, #16]
 8007178:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 800717a:	4a81      	ldr	r2, [pc, #516]	@ (8007380 <loadMenuTexts+0x1288>)
 800717c:	4b81      	ldr	r3, [pc, #516]	@ (8007384 <loadMenuTexts+0x128c>)
 800717e:	4614      	mov	r4, r2
 8007180:	461d      	mov	r5, r3
 8007182:	6828      	ldr	r0, [r5, #0]
 8007184:	6869      	ldr	r1, [r5, #4]
 8007186:	68aa      	ldr	r2, [r5, #8]
 8007188:	68eb      	ldr	r3, [r5, #12]
 800718a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718c:	7c2b      	ldrb	r3, [r5, #16]
 800718e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007190:	4a7d      	ldr	r2, [pc, #500]	@ (8007388 <loadMenuTexts+0x1290>)
 8007192:	4b7e      	ldr	r3, [pc, #504]	@ (800738c <loadMenuTexts+0x1294>)
 8007194:	4614      	mov	r4, r2
 8007196:	461d      	mov	r5, r3
 8007198:	6828      	ldr	r0, [r5, #0]
 800719a:	6869      	ldr	r1, [r5, #4]
 800719c:	68aa      	ldr	r2, [r5, #8]
 800719e:	68eb      	ldr	r3, [r5, #12]
 80071a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a2:	7c2b      	ldrb	r3, [r5, #16]
 80071a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80071a6:	4a7a      	ldr	r2, [pc, #488]	@ (8007390 <loadMenuTexts+0x1298>)
 80071a8:	4b7a      	ldr	r3, [pc, #488]	@ (8007394 <loadMenuTexts+0x129c>)
 80071aa:	4614      	mov	r4, r2
 80071ac:	461d      	mov	r5, r3
 80071ae:	6828      	ldr	r0, [r5, #0]
 80071b0:	6869      	ldr	r1, [r5, #4]
 80071b2:	68aa      	ldr	r2, [r5, #8]
 80071b4:	68eb      	ldr	r3, [r5, #12]
 80071b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b8:	7c2b      	ldrb	r3, [r5, #16]
 80071ba:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80071bc:	4a76      	ldr	r2, [pc, #472]	@ (8007398 <loadMenuTexts+0x12a0>)
 80071be:	4b77      	ldr	r3, [pc, #476]	@ (800739c <loadMenuTexts+0x12a4>)
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	6828      	ldr	r0, [r5, #0]
 80071c6:	6869      	ldr	r1, [r5, #4]
 80071c8:	68aa      	ldr	r2, [r5, #8]
 80071ca:	68eb      	ldr	r3, [r5, #12]
 80071cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ce:	7c2b      	ldrb	r3, [r5, #16]
 80071d0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 80071d2:	4a73      	ldr	r2, [pc, #460]	@ (80073a0 <loadMenuTexts+0x12a8>)
 80071d4:	4b73      	ldr	r3, [pc, #460]	@ (80073a4 <loadMenuTexts+0x12ac>)
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	6828      	ldr	r0, [r5, #0]
 80071dc:	6869      	ldr	r1, [r5, #4]
 80071de:	68aa      	ldr	r2, [r5, #8]
 80071e0:	68eb      	ldr	r3, [r5, #12]
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	7c2b      	ldrb	r3, [r5, #16]
 80071e6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 80071e8:	4a6f      	ldr	r2, [pc, #444]	@ (80073a8 <loadMenuTexts+0x12b0>)
 80071ea:	4b70      	ldr	r3, [pc, #448]	@ (80073ac <loadMenuTexts+0x12b4>)
 80071ec:	4614      	mov	r4, r2
 80071ee:	461d      	mov	r5, r3
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	6869      	ldr	r1, [r5, #4]
 80071f4:	68aa      	ldr	r2, [r5, #8]
 80071f6:	68eb      	ldr	r3, [r5, #12]
 80071f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fa:	7c2b      	ldrb	r3, [r5, #16]
 80071fc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 80071fe:	4a6c      	ldr	r2, [pc, #432]	@ (80073b0 <loadMenuTexts+0x12b8>)
 8007200:	4b6c      	ldr	r3, [pc, #432]	@ (80073b4 <loadMenuTexts+0x12bc>)
 8007202:	4614      	mov	r4, r2
 8007204:	461d      	mov	r5, r3
 8007206:	6828      	ldr	r0, [r5, #0]
 8007208:	6869      	ldr	r1, [r5, #4]
 800720a:	68aa      	ldr	r2, [r5, #8]
 800720c:	68eb      	ldr	r3, [r5, #12]
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	7c2b      	ldrb	r3, [r5, #16]
 8007212:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007214:	4a68      	ldr	r2, [pc, #416]	@ (80073b8 <loadMenuTexts+0x12c0>)
 8007216:	4b69      	ldr	r3, [pc, #420]	@ (80073bc <loadMenuTexts+0x12c4>)
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	6869      	ldr	r1, [r5, #4]
 8007220:	68aa      	ldr	r2, [r5, #8]
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	7c2b      	ldrb	r3, [r5, #16]
 8007228:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800722a:	4a65      	ldr	r2, [pc, #404]	@ (80073c0 <loadMenuTexts+0x12c8>)
 800722c:	4b65      	ldr	r3, [pc, #404]	@ (80073c4 <loadMenuTexts+0x12cc>)
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	6869      	ldr	r1, [r5, #4]
 8007236:	68aa      	ldr	r2, [r5, #8]
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	7c2b      	ldrb	r3, [r5, #16]
 800723e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007240:	4a61      	ldr	r2, [pc, #388]	@ (80073c8 <loadMenuTexts+0x12d0>)
 8007242:	4b62      	ldr	r3, [pc, #392]	@ (80073cc <loadMenuTexts+0x12d4>)
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	6828      	ldr	r0, [r5, #0]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	68aa      	ldr	r2, [r5, #8]
 800724e:	68eb      	ldr	r3, [r5, #12]
 8007250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007252:	7c2b      	ldrb	r3, [r5, #16]
 8007254:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007256:	4a5e      	ldr	r2, [pc, #376]	@ (80073d0 <loadMenuTexts+0x12d8>)
 8007258:	4b5e      	ldr	r3, [pc, #376]	@ (80073d4 <loadMenuTexts+0x12dc>)
 800725a:	4614      	mov	r4, r2
 800725c:	461d      	mov	r5, r3
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	6869      	ldr	r1, [r5, #4]
 8007262:	68aa      	ldr	r2, [r5, #8]
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007268:	7c2b      	ldrb	r3, [r5, #16]
 800726a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800726c:	4a5a      	ldr	r2, [pc, #360]	@ (80073d8 <loadMenuTexts+0x12e0>)
 800726e:	4b5b      	ldr	r3, [pc, #364]	@ (80073dc <loadMenuTexts+0x12e4>)
 8007270:	4614      	mov	r4, r2
 8007272:	461d      	mov	r5, r3
 8007274:	6828      	ldr	r0, [r5, #0]
 8007276:	6869      	ldr	r1, [r5, #4]
 8007278:	68aa      	ldr	r2, [r5, #8]
 800727a:	68eb      	ldr	r3, [r5, #12]
 800727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727e:	7c2b      	ldrb	r3, [r5, #16]
 8007280:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007282:	4a57      	ldr	r2, [pc, #348]	@ (80073e0 <loadMenuTexts+0x12e8>)
 8007284:	4b57      	ldr	r3, [pc, #348]	@ (80073e4 <loadMenuTexts+0x12ec>)
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	6869      	ldr	r1, [r5, #4]
 800728e:	68aa      	ldr	r2, [r5, #8]
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	7c2b      	ldrb	r3, [r5, #16]
 8007296:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007298:	4a53      	ldr	r2, [pc, #332]	@ (80073e8 <loadMenuTexts+0x12f0>)
 800729a:	4b54      	ldr	r3, [pc, #336]	@ (80073ec <loadMenuTexts+0x12f4>)
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	6828      	ldr	r0, [r5, #0]
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	68eb      	ldr	r3, [r5, #12]
 80072a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072aa:	7c2b      	ldrb	r3, [r5, #16]
 80072ac:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80072ae:	4a50      	ldr	r2, [pc, #320]	@ (80073f0 <loadMenuTexts+0x12f8>)
 80072b0:	4b50      	ldr	r3, [pc, #320]	@ (80073f4 <loadMenuTexts+0x12fc>)
 80072b2:	4614      	mov	r4, r2
 80072b4:	461d      	mov	r5, r3
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	6869      	ldr	r1, [r5, #4]
 80072ba:	68aa      	ldr	r2, [r5, #8]
 80072bc:	68eb      	ldr	r3, [r5, #12]
 80072be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c0:	7c2b      	ldrb	r3, [r5, #16]
 80072c2:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80072c4:	4a4c      	ldr	r2, [pc, #304]	@ (80073f8 <loadMenuTexts+0x1300>)
 80072c6:	4b4d      	ldr	r3, [pc, #308]	@ (80073fc <loadMenuTexts+0x1304>)
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	68aa      	ldr	r2, [r5, #8]
 80072d2:	68eb      	ldr	r3, [r5, #12]
 80072d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d6:	7c2b      	ldrb	r3, [r5, #16]
 80072d8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80072da:	4a49      	ldr	r2, [pc, #292]	@ (8007400 <loadMenuTexts+0x1308>)
 80072dc:	4b49      	ldr	r3, [pc, #292]	@ (8007404 <loadMenuTexts+0x130c>)
 80072de:	4614      	mov	r4, r2
 80072e0:	461d      	mov	r5, r3
 80072e2:	e091      	b.n	8007408 <loadMenuTexts+0x1310>
 80072e4:	200009d4 	.word	0x200009d4
 80072e8:	20001504 	.word	0x20001504
 80072ec:	200009e8 	.word	0x200009e8
 80072f0:	20001518 	.word	0x20001518
 80072f4:	200009fc 	.word	0x200009fc
 80072f8:	2000152c 	.word	0x2000152c
 80072fc:	20000a10 	.word	0x20000a10
 8007300:	20001540 	.word	0x20001540
 8007304:	20000a24 	.word	0x20000a24
 8007308:	20001554 	.word	0x20001554
 800730c:	20000a38 	.word	0x20000a38
 8007310:	20001568 	.word	0x20001568
 8007314:	20000a4c 	.word	0x20000a4c
 8007318:	2000157c 	.word	0x2000157c
 800731c:	20000a60 	.word	0x20000a60
 8007320:	20001590 	.word	0x20001590
 8007324:	20000a74 	.word	0x20000a74
 8007328:	200015a4 	.word	0x200015a4
 800732c:	20000a88 	.word	0x20000a88
 8007330:	200015b8 	.word	0x200015b8
 8007334:	20000a9c 	.word	0x20000a9c
 8007338:	200015cc 	.word	0x200015cc
 800733c:	20000ab0 	.word	0x20000ab0
 8007340:	200015e0 	.word	0x200015e0
 8007344:	20000ac4 	.word	0x20000ac4
 8007348:	200015f4 	.word	0x200015f4
 800734c:	20000ad8 	.word	0x20000ad8
 8007350:	20001608 	.word	0x20001608
 8007354:	20000aec 	.word	0x20000aec
 8007358:	2000161c 	.word	0x2000161c
 800735c:	20000b00 	.word	0x20000b00
 8007360:	20001630 	.word	0x20001630
 8007364:	20000b14 	.word	0x20000b14
 8007368:	20001644 	.word	0x20001644
 800736c:	20000b28 	.word	0x20000b28
 8007370:	20001658 	.word	0x20001658
 8007374:	20000b3c 	.word	0x20000b3c
 8007378:	2000166c 	.word	0x2000166c
 800737c:	20000b50 	.word	0x20000b50
 8007380:	20001680 	.word	0x20001680
 8007384:	20000b64 	.word	0x20000b64
 8007388:	20001694 	.word	0x20001694
 800738c:	20000b78 	.word	0x20000b78
 8007390:	200016a8 	.word	0x200016a8
 8007394:	20000b8c 	.word	0x20000b8c
 8007398:	200016bc 	.word	0x200016bc
 800739c:	20000ba0 	.word	0x20000ba0
 80073a0:	200016d0 	.word	0x200016d0
 80073a4:	20000bb4 	.word	0x20000bb4
 80073a8:	200016e4 	.word	0x200016e4
 80073ac:	20000bc8 	.word	0x20000bc8
 80073b0:	200016f8 	.word	0x200016f8
 80073b4:	20000bdc 	.word	0x20000bdc
 80073b8:	2000170c 	.word	0x2000170c
 80073bc:	20000bf0 	.word	0x20000bf0
 80073c0:	20001720 	.word	0x20001720
 80073c4:	20000c04 	.word	0x20000c04
 80073c8:	20001734 	.word	0x20001734
 80073cc:	20000c18 	.word	0x20000c18
 80073d0:	20001748 	.word	0x20001748
 80073d4:	20000c2c 	.word	0x20000c2c
 80073d8:	2000175c 	.word	0x2000175c
 80073dc:	20000c40 	.word	0x20000c40
 80073e0:	20001770 	.word	0x20001770
 80073e4:	20000c54 	.word	0x20000c54
 80073e8:	20001784 	.word	0x20001784
 80073ec:	20000c68 	.word	0x20000c68
 80073f0:	20001798 	.word	0x20001798
 80073f4:	20000cf4 	.word	0x20000cf4
 80073f8:	200017ac 	.word	0x200017ac
 80073fc:	20000d08 	.word	0x20000d08
 8007400:	200017c0 	.word	0x200017c0
 8007404:	20000ccc 	.word	0x20000ccc
 8007408:	6828      	ldr	r0, [r5, #0]
 800740a:	6869      	ldr	r1, [r5, #4]
 800740c:	68aa      	ldr	r2, [r5, #8]
 800740e:	68eb      	ldr	r3, [r5, #12]
 8007410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007412:	7c2b      	ldrb	r3, [r5, #16]
 8007414:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007416:	4a5b      	ldr	r2, [pc, #364]	@ (8007584 <loadMenuTexts+0x148c>)
 8007418:	4b5b      	ldr	r3, [pc, #364]	@ (8007588 <loadMenuTexts+0x1490>)
 800741a:	4614      	mov	r4, r2
 800741c:	461d      	mov	r5, r3
 800741e:	6828      	ldr	r0, [r5, #0]
 8007420:	6869      	ldr	r1, [r5, #4]
 8007422:	68aa      	ldr	r2, [r5, #8]
 8007424:	68eb      	ldr	r3, [r5, #12]
 8007426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007428:	7c2b      	ldrb	r3, [r5, #16]
 800742a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 800742c:	4a57      	ldr	r2, [pc, #348]	@ (800758c <loadMenuTexts+0x1494>)
 800742e:	4b58      	ldr	r3, [pc, #352]	@ (8007590 <loadMenuTexts+0x1498>)
 8007430:	4614      	mov	r4, r2
 8007432:	461d      	mov	r5, r3
 8007434:	6828      	ldr	r0, [r5, #0]
 8007436:	6869      	ldr	r1, [r5, #4]
 8007438:	68aa      	ldr	r2, [r5, #8]
 800743a:	68eb      	ldr	r3, [r5, #12]
 800743c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743e:	7c2b      	ldrb	r3, [r5, #16]
 8007440:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007442:	4a54      	ldr	r2, [pc, #336]	@ (8007594 <loadMenuTexts+0x149c>)
 8007444:	4b54      	ldr	r3, [pc, #336]	@ (8007598 <loadMenuTexts+0x14a0>)
 8007446:	4614      	mov	r4, r2
 8007448:	461d      	mov	r5, r3
 800744a:	6828      	ldr	r0, [r5, #0]
 800744c:	6869      	ldr	r1, [r5, #4]
 800744e:	68aa      	ldr	r2, [r5, #8]
 8007450:	68eb      	ldr	r3, [r5, #12]
 8007452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007454:	7c2b      	ldrb	r3, [r5, #16]
 8007456:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007458:	4a50      	ldr	r2, [pc, #320]	@ (800759c <loadMenuTexts+0x14a4>)
 800745a:	4b51      	ldr	r3, [pc, #324]	@ (80075a0 <loadMenuTexts+0x14a8>)
 800745c:	4614      	mov	r4, r2
 800745e:	461d      	mov	r5, r3
 8007460:	6828      	ldr	r0, [r5, #0]
 8007462:	6869      	ldr	r1, [r5, #4]
 8007464:	68aa      	ldr	r2, [r5, #8]
 8007466:	68eb      	ldr	r3, [r5, #12]
 8007468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746a:	7c2b      	ldrb	r3, [r5, #16]
 800746c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800746e:	4a4d      	ldr	r2, [pc, #308]	@ (80075a4 <loadMenuTexts+0x14ac>)
 8007470:	4b4d      	ldr	r3, [pc, #308]	@ (80075a8 <loadMenuTexts+0x14b0>)
 8007472:	4614      	mov	r4, r2
 8007474:	461d      	mov	r5, r3
 8007476:	6828      	ldr	r0, [r5, #0]
 8007478:	6869      	ldr	r1, [r5, #4]
 800747a:	68aa      	ldr	r2, [r5, #8]
 800747c:	68eb      	ldr	r3, [r5, #12]
 800747e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007480:	7c2b      	ldrb	r3, [r5, #16]
 8007482:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007484:	4a49      	ldr	r2, [pc, #292]	@ (80075ac <loadMenuTexts+0x14b4>)
 8007486:	4b4a      	ldr	r3, [pc, #296]	@ (80075b0 <loadMenuTexts+0x14b8>)
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	6828      	ldr	r0, [r5, #0]
 800748e:	6869      	ldr	r1, [r5, #4]
 8007490:	68aa      	ldr	r2, [r5, #8]
 8007492:	68eb      	ldr	r3, [r5, #12]
 8007494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007496:	7c2b      	ldrb	r3, [r5, #16]
 8007498:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800749a:	4a46      	ldr	r2, [pc, #280]	@ (80075b4 <loadMenuTexts+0x14bc>)
 800749c:	4b46      	ldr	r3, [pc, #280]	@ (80075b8 <loadMenuTexts+0x14c0>)
 800749e:	4614      	mov	r4, r2
 80074a0:	461d      	mov	r5, r3
 80074a2:	6828      	ldr	r0, [r5, #0]
 80074a4:	6869      	ldr	r1, [r5, #4]
 80074a6:	68aa      	ldr	r2, [r5, #8]
 80074a8:	68eb      	ldr	r3, [r5, #12]
 80074aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ac:	7c2b      	ldrb	r3, [r5, #16]
 80074ae:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80074b0:	4a42      	ldr	r2, [pc, #264]	@ (80075bc <loadMenuTexts+0x14c4>)
 80074b2:	4b43      	ldr	r3, [pc, #268]	@ (80075c0 <loadMenuTexts+0x14c8>)
 80074b4:	4614      	mov	r4, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	6828      	ldr	r0, [r5, #0]
 80074ba:	6869      	ldr	r1, [r5, #4]
 80074bc:	68aa      	ldr	r2, [r5, #8]
 80074be:	68eb      	ldr	r3, [r5, #12]
 80074c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c2:	7c2b      	ldrb	r3, [r5, #16]
 80074c4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80074c6:	4a3f      	ldr	r2, [pc, #252]	@ (80075c4 <loadMenuTexts+0x14cc>)
 80074c8:	4b3f      	ldr	r3, [pc, #252]	@ (80075c8 <loadMenuTexts+0x14d0>)
 80074ca:	4614      	mov	r4, r2
 80074cc:	461d      	mov	r5, r3
 80074ce:	6828      	ldr	r0, [r5, #0]
 80074d0:	6869      	ldr	r1, [r5, #4]
 80074d2:	68aa      	ldr	r2, [r5, #8]
 80074d4:	68eb      	ldr	r3, [r5, #12]
 80074d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074d8:	7c2b      	ldrb	r3, [r5, #16]
 80074da:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80074dc:	4a3b      	ldr	r2, [pc, #236]	@ (80075cc <loadMenuTexts+0x14d4>)
 80074de:	4b3c      	ldr	r3, [pc, #240]	@ (80075d0 <loadMenuTexts+0x14d8>)
 80074e0:	4614      	mov	r4, r2
 80074e2:	461d      	mov	r5, r3
 80074e4:	6828      	ldr	r0, [r5, #0]
 80074e6:	6869      	ldr	r1, [r5, #4]
 80074e8:	68aa      	ldr	r2, [r5, #8]
 80074ea:	68eb      	ldr	r3, [r5, #12]
 80074ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ee:	7c2b      	ldrb	r3, [r5, #16]
 80074f0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80074f2:	4a38      	ldr	r2, [pc, #224]	@ (80075d4 <loadMenuTexts+0x14dc>)
 80074f4:	4b38      	ldr	r3, [pc, #224]	@ (80075d8 <loadMenuTexts+0x14e0>)
 80074f6:	4614      	mov	r4, r2
 80074f8:	461d      	mov	r5, r3
 80074fa:	6828      	ldr	r0, [r5, #0]
 80074fc:	6869      	ldr	r1, [r5, #4]
 80074fe:	68aa      	ldr	r2, [r5, #8]
 8007500:	68eb      	ldr	r3, [r5, #12]
 8007502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007504:	7c2b      	ldrb	r3, [r5, #16]
 8007506:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007508:	4a34      	ldr	r2, [pc, #208]	@ (80075dc <loadMenuTexts+0x14e4>)
 800750a:	4b35      	ldr	r3, [pc, #212]	@ (80075e0 <loadMenuTexts+0x14e8>)
 800750c:	4614      	mov	r4, r2
 800750e:	461d      	mov	r5, r3
 8007510:	6828      	ldr	r0, [r5, #0]
 8007512:	6869      	ldr	r1, [r5, #4]
 8007514:	68aa      	ldr	r2, [r5, #8]
 8007516:	68eb      	ldr	r3, [r5, #12]
 8007518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751a:	7c2b      	ldrb	r3, [r5, #16]
 800751c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800751e:	4a31      	ldr	r2, [pc, #196]	@ (80075e4 <loadMenuTexts+0x14ec>)
 8007520:	4b31      	ldr	r3, [pc, #196]	@ (80075e8 <loadMenuTexts+0x14f0>)
 8007522:	4614      	mov	r4, r2
 8007524:	461d      	mov	r5, r3
 8007526:	6828      	ldr	r0, [r5, #0]
 8007528:	6869      	ldr	r1, [r5, #4]
 800752a:	68aa      	ldr	r2, [r5, #8]
 800752c:	68eb      	ldr	r3, [r5, #12]
 800752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007530:	7c2b      	ldrb	r3, [r5, #16]
 8007532:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007534:	4a2d      	ldr	r2, [pc, #180]	@ (80075ec <loadMenuTexts+0x14f4>)
 8007536:	4b2e      	ldr	r3, [pc, #184]	@ (80075f0 <loadMenuTexts+0x14f8>)
 8007538:	4614      	mov	r4, r2
 800753a:	461d      	mov	r5, r3
 800753c:	6828      	ldr	r0, [r5, #0]
 800753e:	6869      	ldr	r1, [r5, #4]
 8007540:	68aa      	ldr	r2, [r5, #8]
 8007542:	68eb      	ldr	r3, [r5, #12]
 8007544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007546:	7c2b      	ldrb	r3, [r5, #16]
 8007548:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800754a:	4a2a      	ldr	r2, [pc, #168]	@ (80075f4 <loadMenuTexts+0x14fc>)
 800754c:	4b2a      	ldr	r3, [pc, #168]	@ (80075f8 <loadMenuTexts+0x1500>)
 800754e:	4614      	mov	r4, r2
 8007550:	461d      	mov	r5, r3
 8007552:	6828      	ldr	r0, [r5, #0]
 8007554:	6869      	ldr	r1, [r5, #4]
 8007556:	68aa      	ldr	r2, [r5, #8]
 8007558:	68eb      	ldr	r3, [r5, #12]
 800755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755c:	7c2b      	ldrb	r3, [r5, #16]
 800755e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007560:	4a26      	ldr	r2, [pc, #152]	@ (80075fc <loadMenuTexts+0x1504>)
 8007562:	4b27      	ldr	r3, [pc, #156]	@ (8007600 <loadMenuTexts+0x1508>)
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	6828      	ldr	r0, [r5, #0]
 800756a:	6869      	ldr	r1, [r5, #4]
 800756c:	68aa      	ldr	r2, [r5, #8]
 800756e:	68eb      	ldr	r3, [r5, #12]
 8007570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007572:	7c2b      	ldrb	r3, [r5, #16]
 8007574:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007576:	f000 f845 	bl	8007604 <menuVariableFinisher>
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bdb0      	pop	{r4, r5, r7, pc}
 8007582:	bf00      	nop
 8007584:	200017d4 	.word	0x200017d4
 8007588:	20000ce0 	.word	0x20000ce0
 800758c:	200017e8 	.word	0x200017e8
 8007590:	20000d44 	.word	0x20000d44
 8007594:	200017fc 	.word	0x200017fc
 8007598:	20000d58 	.word	0x20000d58
 800759c:	20001810 	.word	0x20001810
 80075a0:	20000d94 	.word	0x20000d94
 80075a4:	20001824 	.word	0x20001824
 80075a8:	20000da8 	.word	0x20000da8
 80075ac:	20001838 	.word	0x20001838
 80075b0:	20000de4 	.word	0x20000de4
 80075b4:	2000184c 	.word	0x2000184c
 80075b8:	20000df8 	.word	0x20000df8
 80075bc:	20001860 	.word	0x20001860
 80075c0:	20000e20 	.word	0x20000e20
 80075c4:	20001874 	.word	0x20001874
 80075c8:	20000e48 	.word	0x20000e48
 80075cc:	20001888 	.word	0x20001888
 80075d0:	20000e70 	.word	0x20000e70
 80075d4:	2000189c 	.word	0x2000189c
 80075d8:	20000e98 	.word	0x20000e98
 80075dc:	200018b0 	.word	0x200018b0
 80075e0:	20000ec0 	.word	0x20000ec0
 80075e4:	200018c4 	.word	0x200018c4
 80075e8:	20000ee8 	.word	0x20000ee8
 80075ec:	200018d8 	.word	0x200018d8
 80075f0:	20000f10 	.word	0x20000f10
 80075f4:	200018ec 	.word	0x200018ec
 80075f8:	20000f38 	.word	0x20000f38
 80075fc:	20001900 	.word	0x20001900
 8007600:	20000f60 	.word	0x20000f60

08007604 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007608:	4b99      	ldr	r3, [pc, #612]	@ (8007870 <menuVariableFinisher+0x26c>)
 800760a:	2200      	movs	r2, #0
 800760c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800760e:	4b99      	ldr	r3, [pc, #612]	@ (8007874 <menuVariableFinisher+0x270>)
 8007610:	2200      	movs	r2, #0
 8007612:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007614:	4b98      	ldr	r3, [pc, #608]	@ (8007878 <menuVariableFinisher+0x274>)
 8007616:	2200      	movs	r2, #0
 8007618:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800761a:	4b98      	ldr	r3, [pc, #608]	@ (800787c <menuVariableFinisher+0x278>)
 800761c:	2200      	movs	r2, #0
 800761e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007620:	4b97      	ldr	r3, [pc, #604]	@ (8007880 <menuVariableFinisher+0x27c>)
 8007622:	2200      	movs	r2, #0
 8007624:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007626:	4b97      	ldr	r3, [pc, #604]	@ (8007884 <menuVariableFinisher+0x280>)
 8007628:	2200      	movs	r2, #0
 800762a:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 800762c:	4b96      	ldr	r3, [pc, #600]	@ (8007888 <menuVariableFinisher+0x284>)
 800762e:	2200      	movs	r2, #0
 8007630:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007632:	4b96      	ldr	r3, [pc, #600]	@ (800788c <menuVariableFinisher+0x288>)
 8007634:	2200      	movs	r2, #0
 8007636:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007638:	4b95      	ldr	r3, [pc, #596]	@ (8007890 <menuVariableFinisher+0x28c>)
 800763a:	2200      	movs	r2, #0
 800763c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800763e:	4b95      	ldr	r3, [pc, #596]	@ (8007894 <menuVariableFinisher+0x290>)
 8007640:	2200      	movs	r2, #0
 8007642:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007644:	4b94      	ldr	r3, [pc, #592]	@ (8007898 <menuVariableFinisher+0x294>)
 8007646:	2200      	movs	r2, #0
 8007648:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800764a:	4b94      	ldr	r3, [pc, #592]	@ (800789c <menuVariableFinisher+0x298>)
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007650:	4b93      	ldr	r3, [pc, #588]	@ (80078a0 <menuVariableFinisher+0x29c>)
 8007652:	2200      	movs	r2, #0
 8007654:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007656:	4b93      	ldr	r3, [pc, #588]	@ (80078a4 <menuVariableFinisher+0x2a0>)
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800765c:	4b92      	ldr	r3, [pc, #584]	@ (80078a8 <menuVariableFinisher+0x2a4>)
 800765e:	2200      	movs	r2, #0
 8007660:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007662:	4b92      	ldr	r3, [pc, #584]	@ (80078ac <menuVariableFinisher+0x2a8>)
 8007664:	2200      	movs	r2, #0
 8007666:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007668:	4b91      	ldr	r3, [pc, #580]	@ (80078b0 <menuVariableFinisher+0x2ac>)
 800766a:	2200      	movs	r2, #0
 800766c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800766e:	4b91      	ldr	r3, [pc, #580]	@ (80078b4 <menuVariableFinisher+0x2b0>)
 8007670:	2200      	movs	r2, #0
 8007672:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007674:	4b90      	ldr	r3, [pc, #576]	@ (80078b8 <menuVariableFinisher+0x2b4>)
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800767a:	4b90      	ldr	r3, [pc, #576]	@ (80078bc <menuVariableFinisher+0x2b8>)
 800767c:	2200      	movs	r2, #0
 800767e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007680:	4b8f      	ldr	r3, [pc, #572]	@ (80078c0 <menuVariableFinisher+0x2bc>)
 8007682:	2200      	movs	r2, #0
 8007684:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007686:	4b8f      	ldr	r3, [pc, #572]	@ (80078c4 <menuVariableFinisher+0x2c0>)
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 800768c:	4b8e      	ldr	r3, [pc, #568]	@ (80078c8 <menuVariableFinisher+0x2c4>)
 800768e:	2200      	movs	r2, #0
 8007690:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007692:	4b8e      	ldr	r3, [pc, #568]	@ (80078cc <menuVariableFinisher+0x2c8>)
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007698:	4b8d      	ldr	r3, [pc, #564]	@ (80078d0 <menuVariableFinisher+0x2cc>)
 800769a:	2200      	movs	r2, #0
 800769c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800769e:	4b8d      	ldr	r3, [pc, #564]	@ (80078d4 <menuVariableFinisher+0x2d0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80076a4:	4b8c      	ldr	r3, [pc, #560]	@ (80078d8 <menuVariableFinisher+0x2d4>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80076aa:	4b8c      	ldr	r3, [pc, #560]	@ (80078dc <menuVariableFinisher+0x2d8>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80076b0:	4b8b      	ldr	r3, [pc, #556]	@ (80078e0 <menuVariableFinisher+0x2dc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80076b6:	4b8b      	ldr	r3, [pc, #556]	@ (80078e4 <menuVariableFinisher+0x2e0>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80076bc:	4b8a      	ldr	r3, [pc, #552]	@ (80078e8 <menuVariableFinisher+0x2e4>)
 80076be:	2200      	movs	r2, #0
 80076c0:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80076c2:	4b8a      	ldr	r3, [pc, #552]	@ (80078ec <menuVariableFinisher+0x2e8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80076c8:	4b89      	ldr	r3, [pc, #548]	@ (80078f0 <menuVariableFinisher+0x2ec>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80076ce:	4b89      	ldr	r3, [pc, #548]	@ (80078f4 <menuVariableFinisher+0x2f0>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80076d4:	4b88      	ldr	r3, [pc, #544]	@ (80078f8 <menuVariableFinisher+0x2f4>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80076da:	4b88      	ldr	r3, [pc, #544]	@ (80078fc <menuVariableFinisher+0x2f8>)
 80076dc:	2200      	movs	r2, #0
 80076de:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80076e0:	4b87      	ldr	r3, [pc, #540]	@ (8007900 <menuVariableFinisher+0x2fc>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80076e6:	4b87      	ldr	r3, [pc, #540]	@ (8007904 <menuVariableFinisher+0x300>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80076ec:	4b86      	ldr	r3, [pc, #536]	@ (8007908 <menuVariableFinisher+0x304>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80076f2:	4b86      	ldr	r3, [pc, #536]	@ (800790c <menuVariableFinisher+0x308>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80076f8:	4b85      	ldr	r3, [pc, #532]	@ (8007910 <menuVariableFinisher+0x30c>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80076fe:	4b85      	ldr	r3, [pc, #532]	@ (8007914 <menuVariableFinisher+0x310>)
 8007700:	2200      	movs	r2, #0
 8007702:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007704:	4b84      	ldr	r3, [pc, #528]	@ (8007918 <menuVariableFinisher+0x314>)
 8007706:	2200      	movs	r2, #0
 8007708:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800770a:	4b84      	ldr	r3, [pc, #528]	@ (800791c <menuVariableFinisher+0x318>)
 800770c:	2200      	movs	r2, #0
 800770e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007710:	4b83      	ldr	r3, [pc, #524]	@ (8007920 <menuVariableFinisher+0x31c>)
 8007712:	2200      	movs	r2, #0
 8007714:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007716:	4b83      	ldr	r3, [pc, #524]	@ (8007924 <menuVariableFinisher+0x320>)
 8007718:	2200      	movs	r2, #0
 800771a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 800771c:	4b82      	ldr	r3, [pc, #520]	@ (8007928 <menuVariableFinisher+0x324>)
 800771e:	2200      	movs	r2, #0
 8007720:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007722:	4b82      	ldr	r3, [pc, #520]	@ (800792c <menuVariableFinisher+0x328>)
 8007724:	2200      	movs	r2, #0
 8007726:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007728:	4b81      	ldr	r3, [pc, #516]	@ (8007930 <menuVariableFinisher+0x32c>)
 800772a:	2200      	movs	r2, #0
 800772c:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800772e:	4b81      	ldr	r3, [pc, #516]	@ (8007934 <menuVariableFinisher+0x330>)
 8007730:	2200      	movs	r2, #0
 8007732:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007734:	4b80      	ldr	r3, [pc, #512]	@ (8007938 <menuVariableFinisher+0x334>)
 8007736:	2200      	movs	r2, #0
 8007738:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800773a:	4b80      	ldr	r3, [pc, #512]	@ (800793c <menuVariableFinisher+0x338>)
 800773c:	2200      	movs	r2, #0
 800773e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007740:	4b7f      	ldr	r3, [pc, #508]	@ (8007940 <menuVariableFinisher+0x33c>)
 8007742:	2200      	movs	r2, #0
 8007744:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007746:	4b7f      	ldr	r3, [pc, #508]	@ (8007944 <menuVariableFinisher+0x340>)
 8007748:	2200      	movs	r2, #0
 800774a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800774c:	4b7e      	ldr	r3, [pc, #504]	@ (8007948 <menuVariableFinisher+0x344>)
 800774e:	2200      	movs	r2, #0
 8007750:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007752:	4b7e      	ldr	r3, [pc, #504]	@ (800794c <menuVariableFinisher+0x348>)
 8007754:	2200      	movs	r2, #0
 8007756:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007758:	4b7d      	ldr	r3, [pc, #500]	@ (8007950 <menuVariableFinisher+0x34c>)
 800775a:	2200      	movs	r2, #0
 800775c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800775e:	4b7d      	ldr	r3, [pc, #500]	@ (8007954 <menuVariableFinisher+0x350>)
 8007760:	2200      	movs	r2, #0
 8007762:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007764:	4b7c      	ldr	r3, [pc, #496]	@ (8007958 <menuVariableFinisher+0x354>)
 8007766:	2200      	movs	r2, #0
 8007768:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800776a:	4b7c      	ldr	r3, [pc, #496]	@ (800795c <menuVariableFinisher+0x358>)
 800776c:	2200      	movs	r2, #0
 800776e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007770:	4b7b      	ldr	r3, [pc, #492]	@ (8007960 <menuVariableFinisher+0x35c>)
 8007772:	2200      	movs	r2, #0
 8007774:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007776:	4b7b      	ldr	r3, [pc, #492]	@ (8007964 <menuVariableFinisher+0x360>)
 8007778:	2200      	movs	r2, #0
 800777a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 800777c:	4b7a      	ldr	r3, [pc, #488]	@ (8007968 <menuVariableFinisher+0x364>)
 800777e:	2200      	movs	r2, #0
 8007780:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007782:	4b7a      	ldr	r3, [pc, #488]	@ (800796c <menuVariableFinisher+0x368>)
 8007784:	2200      	movs	r2, #0
 8007786:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007788:	4b79      	ldr	r3, [pc, #484]	@ (8007970 <menuVariableFinisher+0x36c>)
 800778a:	2200      	movs	r2, #0
 800778c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800778e:	4b79      	ldr	r3, [pc, #484]	@ (8007974 <menuVariableFinisher+0x370>)
 8007790:	2200      	movs	r2, #0
 8007792:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007794:	4b78      	ldr	r3, [pc, #480]	@ (8007978 <menuVariableFinisher+0x374>)
 8007796:	2200      	movs	r2, #0
 8007798:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800779a:	4b78      	ldr	r3, [pc, #480]	@ (800797c <menuVariableFinisher+0x378>)
 800779c:	2200      	movs	r2, #0
 800779e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80077a0:	4b77      	ldr	r3, [pc, #476]	@ (8007980 <menuVariableFinisher+0x37c>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80077a6:	4b77      	ldr	r3, [pc, #476]	@ (8007984 <menuVariableFinisher+0x380>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80077ac:	4b76      	ldr	r3, [pc, #472]	@ (8007988 <menuVariableFinisher+0x384>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80077b2:	4b76      	ldr	r3, [pc, #472]	@ (800798c <menuVariableFinisher+0x388>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80077b8:	4b75      	ldr	r3, [pc, #468]	@ (8007990 <menuVariableFinisher+0x38c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80077be:	4b75      	ldr	r3, [pc, #468]	@ (8007994 <menuVariableFinisher+0x390>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80077c4:	4b74      	ldr	r3, [pc, #464]	@ (8007998 <menuVariableFinisher+0x394>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80077ca:	4b74      	ldr	r3, [pc, #464]	@ (800799c <menuVariableFinisher+0x398>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80077d0:	4b73      	ldr	r3, [pc, #460]	@ (80079a0 <menuVariableFinisher+0x39c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80077d6:	4b73      	ldr	r3, [pc, #460]	@ (80079a4 <menuVariableFinisher+0x3a0>)
 80077d8:	2200      	movs	r2, #0
 80077da:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80077dc:	4b72      	ldr	r3, [pc, #456]	@ (80079a8 <menuVariableFinisher+0x3a4>)
 80077de:	2200      	movs	r2, #0
 80077e0:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80077e2:	4b72      	ldr	r3, [pc, #456]	@ (80079ac <menuVariableFinisher+0x3a8>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80077e8:	4b71      	ldr	r3, [pc, #452]	@ (80079b0 <menuVariableFinisher+0x3ac>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80077ee:	4b71      	ldr	r3, [pc, #452]	@ (80079b4 <menuVariableFinisher+0x3b0>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80077f4:	4b70      	ldr	r3, [pc, #448]	@ (80079b8 <menuVariableFinisher+0x3b4>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80077fa:	4b70      	ldr	r3, [pc, #448]	@ (80079bc <menuVariableFinisher+0x3b8>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007800:	4b6f      	ldr	r3, [pc, #444]	@ (80079c0 <menuVariableFinisher+0x3bc>)
 8007802:	2200      	movs	r2, #0
 8007804:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007806:	4b6f      	ldr	r3, [pc, #444]	@ (80079c4 <menuVariableFinisher+0x3c0>)
 8007808:	2200      	movs	r2, #0
 800780a:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 800780c:	4b6e      	ldr	r3, [pc, #440]	@ (80079c8 <menuVariableFinisher+0x3c4>)
 800780e:	2200      	movs	r2, #0
 8007810:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007812:	4b6e      	ldr	r3, [pc, #440]	@ (80079cc <menuVariableFinisher+0x3c8>)
 8007814:	2200      	movs	r2, #0
 8007816:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007818:	4b6d      	ldr	r3, [pc, #436]	@ (80079d0 <menuVariableFinisher+0x3cc>)
 800781a:	2200      	movs	r2, #0
 800781c:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800781e:	4b6d      	ldr	r3, [pc, #436]	@ (80079d4 <menuVariableFinisher+0x3d0>)
 8007820:	2200      	movs	r2, #0
 8007822:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007824:	4b6c      	ldr	r3, [pc, #432]	@ (80079d8 <menuVariableFinisher+0x3d4>)
 8007826:	2200      	movs	r2, #0
 8007828:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800782a:	4b6c      	ldr	r3, [pc, #432]	@ (80079dc <menuVariableFinisher+0x3d8>)
 800782c:	2200      	movs	r2, #0
 800782e:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007830:	4b6b      	ldr	r3, [pc, #428]	@ (80079e0 <menuVariableFinisher+0x3dc>)
 8007832:	2200      	movs	r2, #0
 8007834:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007836:	4b6b      	ldr	r3, [pc, #428]	@ (80079e4 <menuVariableFinisher+0x3e0>)
 8007838:	2200      	movs	r2, #0
 800783a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800783c:	4b6a      	ldr	r3, [pc, #424]	@ (80079e8 <menuVariableFinisher+0x3e4>)
 800783e:	2200      	movs	r2, #0
 8007840:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007842:	4b6a      	ldr	r3, [pc, #424]	@ (80079ec <menuVariableFinisher+0x3e8>)
 8007844:	2200      	movs	r2, #0
 8007846:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007848:	4b69      	ldr	r3, [pc, #420]	@ (80079f0 <menuVariableFinisher+0x3ec>)
 800784a:	2200      	movs	r2, #0
 800784c:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800784e:	4b69      	ldr	r3, [pc, #420]	@ (80079f4 <menuVariableFinisher+0x3f0>)
 8007850:	2200      	movs	r2, #0
 8007852:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007854:	4b68      	ldr	r3, [pc, #416]	@ (80079f8 <menuVariableFinisher+0x3f4>)
 8007856:	2200      	movs	r2, #0
 8007858:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800785a:	4b68      	ldr	r3, [pc, #416]	@ (80079fc <menuVariableFinisher+0x3f8>)
 800785c:	2200      	movs	r2, #0
 800785e:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007860:	4b67      	ldr	r3, [pc, #412]	@ (8007a00 <menuVariableFinisher+0x3fc>)
 8007862:	2200      	movs	r2, #0
 8007864:	741a      	strb	r2, [r3, #16]
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	2000009c 	.word	0x2000009c
 8007874:	200000b0 	.word	0x200000b0
 8007878:	200000c4 	.word	0x200000c4
 800787c:	200000d8 	.word	0x200000d8
 8007880:	200000ec 	.word	0x200000ec
 8007884:	20000100 	.word	0x20000100
 8007888:	20000114 	.word	0x20000114
 800788c:	20000128 	.word	0x20000128
 8007890:	2000013c 	.word	0x2000013c
 8007894:	20000150 	.word	0x20000150
 8007898:	20000164 	.word	0x20000164
 800789c:	20000178 	.word	0x20000178
 80078a0:	20001220 	.word	0x20001220
 80078a4:	20001234 	.word	0x20001234
 80078a8:	20001248 	.word	0x20001248
 80078ac:	2000125c 	.word	0x2000125c
 80078b0:	20001270 	.word	0x20001270
 80078b4:	20001284 	.word	0x20001284
 80078b8:	20001298 	.word	0x20001298
 80078bc:	200012ac 	.word	0x200012ac
 80078c0:	200012c0 	.word	0x200012c0
 80078c4:	200012d4 	.word	0x200012d4
 80078c8:	200012e8 	.word	0x200012e8
 80078cc:	200012fc 	.word	0x200012fc
 80078d0:	20001310 	.word	0x20001310
 80078d4:	20001324 	.word	0x20001324
 80078d8:	20001338 	.word	0x20001338
 80078dc:	2000134c 	.word	0x2000134c
 80078e0:	20001360 	.word	0x20001360
 80078e4:	20001374 	.word	0x20001374
 80078e8:	20001388 	.word	0x20001388
 80078ec:	2000139c 	.word	0x2000139c
 80078f0:	200013b0 	.word	0x200013b0
 80078f4:	200013c4 	.word	0x200013c4
 80078f8:	200013d8 	.word	0x200013d8
 80078fc:	200013ec 	.word	0x200013ec
 8007900:	20001400 	.word	0x20001400
 8007904:	20001414 	.word	0x20001414
 8007908:	20001428 	.word	0x20001428
 800790c:	2000143c 	.word	0x2000143c
 8007910:	20001450 	.word	0x20001450
 8007914:	20001464 	.word	0x20001464
 8007918:	20001478 	.word	0x20001478
 800791c:	2000148c 	.word	0x2000148c
 8007920:	200014a0 	.word	0x200014a0
 8007924:	200014b4 	.word	0x200014b4
 8007928:	200014c8 	.word	0x200014c8
 800792c:	200014dc 	.word	0x200014dc
 8007930:	200014f0 	.word	0x200014f0
 8007934:	20001504 	.word	0x20001504
 8007938:	20001518 	.word	0x20001518
 800793c:	2000152c 	.word	0x2000152c
 8007940:	20001540 	.word	0x20001540
 8007944:	20001554 	.word	0x20001554
 8007948:	20001568 	.word	0x20001568
 800794c:	2000157c 	.word	0x2000157c
 8007950:	20001590 	.word	0x20001590
 8007954:	200015a4 	.word	0x200015a4
 8007958:	200015b8 	.word	0x200015b8
 800795c:	200015cc 	.word	0x200015cc
 8007960:	200015e0 	.word	0x200015e0
 8007964:	200015f4 	.word	0x200015f4
 8007968:	20001608 	.word	0x20001608
 800796c:	2000161c 	.word	0x2000161c
 8007970:	20001630 	.word	0x20001630
 8007974:	20001644 	.word	0x20001644
 8007978:	20001658 	.word	0x20001658
 800797c:	2000166c 	.word	0x2000166c
 8007980:	20001680 	.word	0x20001680
 8007984:	20001694 	.word	0x20001694
 8007988:	200016a8 	.word	0x200016a8
 800798c:	200016bc 	.word	0x200016bc
 8007990:	200016d0 	.word	0x200016d0
 8007994:	200016e4 	.word	0x200016e4
 8007998:	200016f8 	.word	0x200016f8
 800799c:	2000170c 	.word	0x2000170c
 80079a0:	20001720 	.word	0x20001720
 80079a4:	20001734 	.word	0x20001734
 80079a8:	20001748 	.word	0x20001748
 80079ac:	2000175c 	.word	0x2000175c
 80079b0:	20001770 	.word	0x20001770
 80079b4:	20001784 	.word	0x20001784
 80079b8:	20001798 	.word	0x20001798
 80079bc:	200017ac 	.word	0x200017ac
 80079c0:	200017c0 	.word	0x200017c0
 80079c4:	200017d4 	.word	0x200017d4
 80079c8:	200017e8 	.word	0x200017e8
 80079cc:	200017fc 	.word	0x200017fc
 80079d0:	20001810 	.word	0x20001810
 80079d4:	20001824 	.word	0x20001824
 80079d8:	20001838 	.word	0x20001838
 80079dc:	2000184c 	.word	0x2000184c
 80079e0:	20001860 	.word	0x20001860
 80079e4:	20001874 	.word	0x20001874
 80079e8:	20001888 	.word	0x20001888
 80079ec:	2000189c 	.word	0x2000189c
 80079f0:	200018b0 	.word	0x200018b0
 80079f4:	200018c4 	.word	0x200018c4
 80079f8:	200018d8 	.word	0x200018d8
 80079fc:	200018ec 	.word	0x200018ec
 8007a00:	20001900 	.word	0x20001900

08007a04 <resetMenuTexts>:

void resetMenuTexts() {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007a08:	2211      	movs	r2, #17
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	48d3      	ldr	r0, [pc, #844]	@ (8007d5c <resetMenuTexts+0x358>)
 8007a0e:	f005 ff13 	bl	800d838 <memset>
    memset(ayarlarText, 0, 17);
 8007a12:	2211      	movs	r2, #17
 8007a14:	2100      	movs	r1, #0
 8007a16:	48d2      	ldr	r0, [pc, #840]	@ (8007d60 <resetMenuTexts+0x35c>)
 8007a18:	f005 ff0e 	bl	800d838 <memset>
    memset(hataKayitListText, 0, 17);
 8007a1c:	2211      	movs	r2, #17
 8007a1e:	2100      	movs	r1, #0
 8007a20:	48d0      	ldr	r0, [pc, #832]	@ (8007d64 <resetMenuTexts+0x360>)
 8007a22:	f005 ff09 	bl	800d838 <memset>
    memset(birHataKoduText, 0, 17);
 8007a26:	2211      	movs	r2, #17
 8007a28:	2100      	movs	r1, #0
 8007a2a:	48cf      	ldr	r0, [pc, #828]	@ (8007d68 <resetMenuTexts+0x364>)
 8007a2c:	f005 ff04 	bl	800d838 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007a30:	2211      	movs	r2, #17
 8007a32:	2100      	movs	r1, #0
 8007a34:	48cd      	ldr	r0, [pc, #820]	@ (8007d6c <resetMenuTexts+0x368>)
 8007a36:	f005 feff 	bl	800d838 <memset>
    memset(ucHataKoduText, 0, 17);
 8007a3a:	2211      	movs	r2, #17
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	48cc      	ldr	r0, [pc, #816]	@ (8007d70 <resetMenuTexts+0x36c>)
 8007a40:	f005 fefa 	bl	800d838 <memset>
    memset(dortHataKoduText, 0, 17);
 8007a44:	2211      	movs	r2, #17
 8007a46:	2100      	movs	r1, #0
 8007a48:	48ca      	ldr	r0, [pc, #808]	@ (8007d74 <resetMenuTexts+0x370>)
 8007a4a:	f005 fef5 	bl	800d838 <memset>
    memset(besHataKoduText, 0, 17);
 8007a4e:	2211      	movs	r2, #17
 8007a50:	2100      	movs	r1, #0
 8007a52:	48c9      	ldr	r0, [pc, #804]	@ (8007d78 <resetMenuTexts+0x374>)
 8007a54:	f005 fef0 	bl	800d838 <memset>
    memset(altiHataKoduText, 0, 17);
 8007a58:	2211      	movs	r2, #17
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	48c7      	ldr	r0, [pc, #796]	@ (8007d7c <resetMenuTexts+0x378>)
 8007a5e:	f005 feeb 	bl	800d838 <memset>
    memset(yediHataKoduText, 0, 17);
 8007a62:	2211      	movs	r2, #17
 8007a64:	2100      	movs	r1, #0
 8007a66:	48c6      	ldr	r0, [pc, #792]	@ (8007d80 <resetMenuTexts+0x37c>)
 8007a68:	f005 fee6 	bl	800d838 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007a6c:	2211      	movs	r2, #17
 8007a6e:	2100      	movs	r1, #0
 8007a70:	48c4      	ldr	r0, [pc, #784]	@ (8007d84 <resetMenuTexts+0x380>)
 8007a72:	f005 fee1 	bl	800d838 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007a76:	2211      	movs	r2, #17
 8007a78:	2100      	movs	r1, #0
 8007a7a:	48c3      	ldr	r0, [pc, #780]	@ (8007d88 <resetMenuTexts+0x384>)
 8007a7c:	f005 fedc 	bl	800d838 <memset>
    memset(onHataKoduText, 0, 17);
 8007a80:	2211      	movs	r2, #17
 8007a82:	2100      	movs	r1, #0
 8007a84:	48c1      	ldr	r0, [pc, #772]	@ (8007d8c <resetMenuTexts+0x388>)
 8007a86:	f005 fed7 	bl	800d838 <memset>
    memset(silmekIcinText, 0, 17);
 8007a8a:	2211      	movs	r2, #17
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	48c0      	ldr	r0, [pc, #768]	@ (8007d90 <resetMenuTexts+0x38c>)
 8007a90:	f005 fed2 	bl	800d838 <memset>
    memset(calismaSekliText, 0, 17);
 8007a94:	2211      	movs	r2, #17
 8007a96:	2100      	movs	r1, #0
 8007a98:	48be      	ldr	r0, [pc, #760]	@ (8007d94 <resetMenuTexts+0x390>)
 8007a9a:	f005 fecd 	bl	800d838 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007a9e:	2211      	movs	r2, #17
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	48bd      	ldr	r0, [pc, #756]	@ (8007d98 <resetMenuTexts+0x394>)
 8007aa4:	f005 fec8 	bl	800d838 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007aa8:	2211      	movs	r2, #17
 8007aaa:	2100      	movs	r1, #0
 8007aac:	48bb      	ldr	r0, [pc, #748]	@ (8007d9c <resetMenuTexts+0x398>)
 8007aae:	f005 fec3 	bl	800d838 <memset>
    memset(basGonderText, 0, 17);
 8007ab2:	2211      	movs	r2, #17
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	48ba      	ldr	r0, [pc, #744]	@ (8007da0 <resetMenuTexts+0x39c>)
 8007ab8:	f005 febe 	bl	800d838 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007abc:	2211      	movs	r2, #17
 8007abe:	2100      	movs	r1, #0
 8007ac0:	48b8      	ldr	r0, [pc, #736]	@ (8007da4 <resetMenuTexts+0x3a0>)
 8007ac2:	f005 feb9 	bl	800d838 <memset>
    memset(pasifText, 0, 17);
 8007ac6:	2211      	movs	r2, #17
 8007ac8:	2100      	movs	r1, #0
 8007aca:	48b7      	ldr	r0, [pc, #732]	@ (8007da8 <resetMenuTexts+0x3a4>)
 8007acc:	f005 feb4 	bl	800d838 <memset>
    memset(aktifText, 0, 17);
 8007ad0:	2211      	movs	r2, #17
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	48b5      	ldr	r0, [pc, #724]	@ (8007dac <resetMenuTexts+0x3a8>)
 8007ad6:	f005 feaf 	bl	800d838 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007ada:	2211      	movs	r2, #17
 8007adc:	2100      	movs	r1, #0
 8007ade:	48b4      	ldr	r0, [pc, #720]	@ (8007db0 <resetMenuTexts+0x3ac>)
 8007ae0:	f005 feaa 	bl	800d838 <memset>
    memset(altLimitText, 0, 17);
 8007ae4:	2211      	movs	r2, #17
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	48b2      	ldr	r0, [pc, #712]	@ (8007db4 <resetMenuTexts+0x3b0>)
 8007aea:	f005 fea5 	bl	800d838 <memset>
    memset(basincSalteriText, 0, 17);
 8007aee:	2211      	movs	r2, #17
 8007af0:	2100      	movs	r1, #0
 8007af2:	48b1      	ldr	r0, [pc, #708]	@ (8007db8 <resetMenuTexts+0x3b4>)
 8007af4:	f005 fea0 	bl	800d838 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007af8:	2211      	movs	r2, #17
 8007afa:	2100      	movs	r1, #0
 8007afc:	48af      	ldr	r0, [pc, #700]	@ (8007dbc <resetMenuTexts+0x3b8>)
 8007afe:	f005 fe9b 	bl	800d838 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007b02:	2211      	movs	r2, #17
 8007b04:	2100      	movs	r1, #0
 8007b06:	48ae      	ldr	r0, [pc, #696]	@ (8007dc0 <resetMenuTexts+0x3bc>)
 8007b08:	f005 fe96 	bl	800d838 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007b0c:	2211      	movs	r2, #17
 8007b0e:	2100      	movs	r1, #0
 8007b10:	48ac      	ldr	r0, [pc, #688]	@ (8007dc4 <resetMenuTexts+0x3c0>)
 8007b12:	f005 fe91 	bl	800d838 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007b16:	2211      	movs	r2, #17
 8007b18:	2100      	movs	r1, #0
 8007b1a:	48ab      	ldr	r0, [pc, #684]	@ (8007dc8 <resetMenuTexts+0x3c4>)
 8007b1c:	f005 fe8c 	bl	800d838 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007b20:	2211      	movs	r2, #17
 8007b22:	2100      	movs	r1, #0
 8007b24:	48a9      	ldr	r0, [pc, #676]	@ (8007dcc <resetMenuTexts+0x3c8>)
 8007b26:	f005 fe87 	bl	800d838 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007b2a:	2211      	movs	r2, #17
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	48a8      	ldr	r0, [pc, #672]	@ (8007dd0 <resetMenuTexts+0x3cc>)
 8007b30:	f005 fe82 	bl	800d838 <memset>
    memset(katButonuEXTText, 0, 17);
 8007b34:	2211      	movs	r2, #17
 8007b36:	2100      	movs	r1, #0
 8007b38:	48a6      	ldr	r0, [pc, #664]	@ (8007dd4 <resetMenuTexts+0x3d0>)
 8007b3a:	f005 fe7d 	bl	800d838 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007b3e:	2211      	movs	r2, #17
 8007b40:	2100      	movs	r1, #0
 8007b42:	48a5      	ldr	r0, [pc, #660]	@ (8007dd8 <resetMenuTexts+0x3d4>)
 8007b44:	f005 fe78 	bl	800d838 <memset>
    memset(butonKontrolluText, 0, 17);
 8007b48:	2211      	movs	r2, #17
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	48a3      	ldr	r0, [pc, #652]	@ (8007ddc <resetMenuTexts+0x3d8>)
 8007b4e:	f005 fe73 	bl	800d838 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007b52:	2211      	movs	r2, #17
 8007b54:	2100      	movs	r1, #0
 8007b56:	48a2      	ldr	r0, [pc, #648]	@ (8007de0 <resetMenuTexts+0x3dc>)
 8007b58:	f005 fe6e 	bl	800d838 <memset>
    memset(kacSaniyeText, 0, 17);
 8007b5c:	2211      	movs	r2, #17
 8007b5e:	2100      	movs	r1, #0
 8007b60:	48a0      	ldr	r0, [pc, #640]	@ (8007de4 <resetMenuTexts+0x3e0>)
 8007b62:	f005 fe69 	bl	800d838 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007b66:	2211      	movs	r2, #17
 8007b68:	2100      	movs	r1, #0
 8007b6a:	489f      	ldr	r0, [pc, #636]	@ (8007de8 <resetMenuTexts+0x3e4>)
 8007b6c:	f005 fe64 	bl	800d838 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007b70:	2211      	movs	r2, #17
 8007b72:	2100      	movs	r1, #0
 8007b74:	489d      	ldr	r0, [pc, #628]	@ (8007dec <resetMenuTexts+0x3e8>)
 8007b76:	f005 fe5f 	bl	800d838 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007b7a:	2211      	movs	r2, #17
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	489c      	ldr	r0, [pc, #624]	@ (8007df0 <resetMenuTexts+0x3ec>)
 8007b80:	f005 fe5a 	bl	800d838 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007b84:	2211      	movs	r2, #17
 8007b86:	2100      	movs	r1, #0
 8007b88:	489a      	ldr	r0, [pc, #616]	@ (8007df4 <resetMenuTexts+0x3f0>)
 8007b8a:	f005 fe55 	bl	800d838 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007b8e:	2211      	movs	r2, #17
 8007b90:	2100      	movs	r1, #0
 8007b92:	4899      	ldr	r0, [pc, #612]	@ (8007df8 <resetMenuTexts+0x3f4>)
 8007b94:	f005 fe50 	bl	800d838 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007b98:	2211      	movs	r2, #17
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4897      	ldr	r0, [pc, #604]	@ (8007dfc <resetMenuTexts+0x3f8>)
 8007b9e:	f005 fe4b 	bl	800d838 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007ba2:	2211      	movs	r2, #17
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4896      	ldr	r0, [pc, #600]	@ (8007e00 <resetMenuTexts+0x3fc>)
 8007ba8:	f005 fe46 	bl	800d838 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007bac:	2211      	movs	r2, #17
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4894      	ldr	r0, [pc, #592]	@ (8007e04 <resetMenuTexts+0x400>)
 8007bb2:	f005 fe41 	bl	800d838 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007bb6:	2211      	movs	r2, #17
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4893      	ldr	r0, [pc, #588]	@ (8007e08 <resetMenuTexts+0x404>)
 8007bbc:	f005 fe3c 	bl	800d838 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007bc0:	2211      	movs	r2, #17
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4891      	ldr	r0, [pc, #580]	@ (8007e0c <resetMenuTexts+0x408>)
 8007bc6:	f005 fe37 	bl	800d838 <memset>
    memset(devirmeAktifText, 0, 17);
 8007bca:	2211      	movs	r2, #17
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4890      	ldr	r0, [pc, #576]	@ (8007e10 <resetMenuTexts+0x40c>)
 8007bd0:	f005 fe32 	bl	800d838 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007bd4:	2211      	movs	r2, #17
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	488e      	ldr	r0, [pc, #568]	@ (8007e14 <resetMenuTexts+0x410>)
 8007bda:	f005 fe2d 	bl	800d838 <memset>
    memset(devirmeYukariText, 0, 17);
 8007bde:	2211      	movs	r2, #17
 8007be0:	2100      	movs	r1, #0
 8007be2:	488d      	ldr	r0, [pc, #564]	@ (8007e18 <resetMenuTexts+0x414>)
 8007be4:	f005 fe28 	bl	800d838 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007be8:	2211      	movs	r2, #17
 8007bea:	2100      	movs	r1, #0
 8007bec:	488b      	ldr	r0, [pc, #556]	@ (8007e1c <resetMenuTexts+0x418>)
 8007bee:	f005 fe23 	bl	800d838 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007bf2:	2211      	movs	r2, #17
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	488a      	ldr	r0, [pc, #552]	@ (8007e20 <resetMenuTexts+0x41c>)
 8007bf8:	f005 fe1e 	bl	800d838 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007bfc:	2211      	movs	r2, #17
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4888      	ldr	r0, [pc, #544]	@ (8007e24 <resetMenuTexts+0x420>)
 8007c02:	f005 fe19 	bl	800d838 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007c06:	2211      	movs	r2, #17
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4887      	ldr	r0, [pc, #540]	@ (8007e28 <resetMenuTexts+0x424>)
 8007c0c:	f005 fe14 	bl	800d838 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007c10:	2211      	movs	r2, #17
 8007c12:	2100      	movs	r1, #0
 8007c14:	4885      	ldr	r0, [pc, #532]	@ (8007e2c <resetMenuTexts+0x428>)
 8007c16:	f005 fe0f 	bl	800d838 <memset>
    memset(tekTesirText, 0, 17);
 8007c1a:	2211      	movs	r2, #17
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4884      	ldr	r0, [pc, #528]	@ (8007e30 <resetMenuTexts+0x42c>)
 8007c20:	f005 fe0a 	bl	800d838 <memset>
    memset(ciftTesirText, 0, 17);
 8007c24:	2211      	movs	r2, #17
 8007c26:	2100      	movs	r1, #0
 8007c28:	4882      	ldr	r0, [pc, #520]	@ (8007e34 <resetMenuTexts+0x430>)
 8007c2a:	f005 fe05 	bl	800d838 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007c2e:	2211      	movs	r2, #17
 8007c30:	2100      	movs	r1, #0
 8007c32:	4881      	ldr	r0, [pc, #516]	@ (8007e38 <resetMenuTexts+0x434>)
 8007c34:	f005 fe00 	bl	800d838 <memset>
    memset(yukariValfSureText, 0, 17);
 8007c38:	2211      	movs	r2, #17
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	487f      	ldr	r0, [pc, #508]	@ (8007e3c <resetMenuTexts+0x438>)
 8007c3e:	f005 fdfb 	bl	800d838 <memset>
    memset(asagiValfSureText, 0, 17);
 8007c42:	2211      	movs	r2, #17
 8007c44:	2100      	movs	r1, #0
 8007c46:	487e      	ldr	r0, [pc, #504]	@ (8007e40 <resetMenuTexts+0x43c>)
 8007c48:	f005 fdf6 	bl	800d838 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007c4c:	2211      	movs	r2, #17
 8007c4e:	2100      	movs	r1, #0
 8007c50:	487c      	ldr	r0, [pc, #496]	@ (8007e44 <resetMenuTexts+0x440>)
 8007c52:	f005 fdf1 	bl	800d838 <memset>
    memset(ileriValfSureText, 0, 17);
 8007c56:	2211      	movs	r2, #17
 8007c58:	2100      	movs	r1, #0
 8007c5a:	487b      	ldr	r0, [pc, #492]	@ (8007e48 <resetMenuTexts+0x444>)
 8007c5c:	f005 fdec 	bl	800d838 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007c60:	2211      	movs	r2, #17
 8007c62:	2100      	movs	r1, #0
 8007c64:	4879      	ldr	r0, [pc, #484]	@ (8007e4c <resetMenuTexts+0x448>)
 8007c66:	f005 fde7 	bl	800d838 <memset>
    memset(geriValfSureText, 0, 17);
 8007c6a:	2211      	movs	r2, #17
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4878      	ldr	r0, [pc, #480]	@ (8007e50 <resetMenuTexts+0x44c>)
 8007c70:	f005 fde2 	bl	800d838 <memset>
    memset(calismaSuresiText, 0, 17);
 8007c74:	2211      	movs	r2, #17
 8007c76:	2100      	movs	r1, #0
 8007c78:	4876      	ldr	r0, [pc, #472]	@ (8007e54 <resetMenuTexts+0x450>)
 8007c7a:	f005 fddd 	bl	800d838 <memset>
    memset(calismaSayisiText, 0, 17);
 8007c7e:	2211      	movs	r2, #17
 8007c80:	2100      	movs	r1, #0
 8007c82:	4875      	ldr	r0, [pc, #468]	@ (8007e58 <resetMenuTexts+0x454>)
 8007c84:	f005 fdd8 	bl	800d838 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007c88:	2211      	movs	r2, #17
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4873      	ldr	r0, [pc, #460]	@ (8007e5c <resetMenuTexts+0x458>)
 8007c8e:	f005 fdd3 	bl	800d838 <memset>
    memset(dilSecimText, 0, 17);
 8007c92:	2211      	movs	r2, #17
 8007c94:	2100      	movs	r1, #0
 8007c96:	4872      	ldr	r0, [pc, #456]	@ (8007e60 <resetMenuTexts+0x45c>)
 8007c98:	f005 fdce 	bl	800d838 <memset>
    memset(secilenDilText, 0, 17);
 8007c9c:	2211      	movs	r2, #17
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4870      	ldr	r0, [pc, #448]	@ (8007e64 <resetMenuTexts+0x460>)
 8007ca2:	f005 fdc9 	bl	800d838 <memset>
    memset(menudenCikisText, 0, 17);
 8007ca6:	2211      	movs	r2, #17
 8007ca8:	2100      	movs	r1, #0
 8007caa:	486f      	ldr	r0, [pc, #444]	@ (8007e68 <resetMenuTexts+0x464>)
 8007cac:	f005 fdc4 	bl	800d838 <memset>
    memset(enteraBasinizText, 0, 17);
 8007cb0:	2211      	movs	r2, #17
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	486d      	ldr	r0, [pc, #436]	@ (8007e6c <resetMenuTexts+0x468>)
 8007cb6:	f005 fdbf 	bl	800d838 <memset>
    memset(hataKoduText, 0, 17);
 8007cba:	2211      	movs	r2, #17
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	486c      	ldr	r0, [pc, #432]	@ (8007e70 <resetMenuTexts+0x46c>)
 8007cc0:	f005 fdba 	bl	800d838 <memset>
    memset(dataSynchText, 0, 17);
 8007cc4:	2211      	movs	r2, #17
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	486a      	ldr	r0, [pc, #424]	@ (8007e74 <resetMenuTexts+0x470>)
 8007cca:	f005 fdb5 	bl	800d838 <memset>
    memset(dataSynch2Text, 0, 17);
 8007cce:	2211      	movs	r2, #17
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4869      	ldr	r0, [pc, #420]	@ (8007e78 <resetMenuTexts+0x474>)
 8007cd4:	f005 fdb0 	bl	800d838 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007cd8:	2211      	movs	r2, #17
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4867      	ldr	r0, [pc, #412]	@ (8007e7c <resetMenuTexts+0x478>)
 8007cde:	f005 fdab 	bl	800d838 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007ce2:	2211      	movs	r2, #17
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4866      	ldr	r0, [pc, #408]	@ (8007e80 <resetMenuTexts+0x47c>)
 8007ce8:	f005 fda6 	bl	800d838 <memset>
    memset(mustBe12Text, 0, 17);
 8007cec:	2211      	movs	r2, #17
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4864      	ldr	r0, [pc, #400]	@ (8007e84 <resetMenuTexts+0x480>)
 8007cf2:	f005 fda1 	bl	800d838 <memset>
    memset(mustBe122Text, 0, 17);
 8007cf6:	2211      	movs	r2, #17
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4863      	ldr	r0, [pc, #396]	@ (8007e88 <resetMenuTexts+0x484>)
 8007cfc:	f005 fd9c 	bl	800d838 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007d00:	2211      	movs	r2, #17
 8007d02:	2100      	movs	r1, #0
 8007d04:	4861      	ldr	r0, [pc, #388]	@ (8007e8c <resetMenuTexts+0x488>)
 8007d06:	f005 fd97 	bl	800d838 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007d0a:	2211      	movs	r2, #17
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4860      	ldr	r0, [pc, #384]	@ (8007e90 <resetMenuTexts+0x48c>)
 8007d10:	f005 fd92 	bl	800d838 <memset>
    memset(passExceedErrorText, 0, 17);
 8007d14:	2211      	movs	r2, #17
 8007d16:	2100      	movs	r1, #0
 8007d18:	485e      	ldr	r0, [pc, #376]	@ (8007e94 <resetMenuTexts+0x490>)
 8007d1a:	f005 fd8d 	bl	800d838 <memset>
    memset(passExceedError2Text, 0, 17);
 8007d1e:	2211      	movs	r2, #17
 8007d20:	2100      	movs	r1, #0
 8007d22:	485d      	ldr	r0, [pc, #372]	@ (8007e98 <resetMenuTexts+0x494>)
 8007d24:	f005 fd88 	bl	800d838 <memset>
    memset(dataYazildiText, 0, 17);
 8007d28:	2211      	movs	r2, #17
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	485b      	ldr	r0, [pc, #364]	@ (8007e9c <resetMenuTexts+0x498>)
 8007d2e:	f005 fd83 	bl	800d838 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007d32:	2211      	movs	r2, #17
 8007d34:	2100      	movs	r1, #0
 8007d36:	485a      	ldr	r0, [pc, #360]	@ (8007ea0 <resetMenuTexts+0x49c>)
 8007d38:	f005 fd7e 	bl	800d838 <memset>
    memset(dataOkunduText, 0, 17);
 8007d3c:	2211      	movs	r2, #17
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4858      	ldr	r0, [pc, #352]	@ (8007ea4 <resetMenuTexts+0x4a0>)
 8007d42:	f005 fd79 	bl	800d838 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007d46:	2211      	movs	r2, #17
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4857      	ldr	r0, [pc, #348]	@ (8007ea8 <resetMenuTexts+0x4a4>)
 8007d4c:	f005 fd74 	bl	800d838 <memset>
    memset(errorCodeText, 0, 17);
 8007d50:	2211      	movs	r2, #17
 8007d52:	2100      	movs	r1, #0
 8007d54:	4855      	ldr	r0, [pc, #340]	@ (8007eac <resetMenuTexts+0x4a8>)
 8007d56:	f005 fd6f 	bl	800d838 <memset>
 8007d5a:	e0a9      	b.n	8007eb0 <resetMenuTexts+0x4ac>
 8007d5c:	20001220 	.word	0x20001220
 8007d60:	20001234 	.word	0x20001234
 8007d64:	20001248 	.word	0x20001248
 8007d68:	2000125c 	.word	0x2000125c
 8007d6c:	20001270 	.word	0x20001270
 8007d70:	20001284 	.word	0x20001284
 8007d74:	20001298 	.word	0x20001298
 8007d78:	200012ac 	.word	0x200012ac
 8007d7c:	200012c0 	.word	0x200012c0
 8007d80:	200012d4 	.word	0x200012d4
 8007d84:	200012e8 	.word	0x200012e8
 8007d88:	200012fc 	.word	0x200012fc
 8007d8c:	20001310 	.word	0x20001310
 8007d90:	20001324 	.word	0x20001324
 8007d94:	20001338 	.word	0x20001338
 8007d98:	2000134c 	.word	0x2000134c
 8007d9c:	20001360 	.word	0x20001360
 8007da0:	20001374 	.word	0x20001374
 8007da4:	20001388 	.word	0x20001388
 8007da8:	2000139c 	.word	0x2000139c
 8007dac:	200013b0 	.word	0x200013b0
 8007db0:	200013c4 	.word	0x200013c4
 8007db4:	200013d8 	.word	0x200013d8
 8007db8:	200013ec 	.word	0x200013ec
 8007dbc:	20001400 	.word	0x20001400
 8007dc0:	20001414 	.word	0x20001414
 8007dc4:	20001428 	.word	0x20001428
 8007dc8:	2000143c 	.word	0x2000143c
 8007dcc:	20001450 	.word	0x20001450
 8007dd0:	20001464 	.word	0x20001464
 8007dd4:	20001478 	.word	0x20001478
 8007dd8:	2000148c 	.word	0x2000148c
 8007ddc:	200014a0 	.word	0x200014a0
 8007de0:	200014b4 	.word	0x200014b4
 8007de4:	200014c8 	.word	0x200014c8
 8007de8:	200014dc 	.word	0x200014dc
 8007dec:	200014f0 	.word	0x200014f0
 8007df0:	20001504 	.word	0x20001504
 8007df4:	20001518 	.word	0x20001518
 8007df8:	2000152c 	.word	0x2000152c
 8007dfc:	20001540 	.word	0x20001540
 8007e00:	20001554 	.word	0x20001554
 8007e04:	20001568 	.word	0x20001568
 8007e08:	2000157c 	.word	0x2000157c
 8007e0c:	20001590 	.word	0x20001590
 8007e10:	200015a4 	.word	0x200015a4
 8007e14:	200015b8 	.word	0x200015b8
 8007e18:	200015cc 	.word	0x200015cc
 8007e1c:	200015e0 	.word	0x200015e0
 8007e20:	200015f4 	.word	0x200015f4
 8007e24:	20001608 	.word	0x20001608
 8007e28:	2000161c 	.word	0x2000161c
 8007e2c:	20001630 	.word	0x20001630
 8007e30:	20001644 	.word	0x20001644
 8007e34:	20001658 	.word	0x20001658
 8007e38:	2000166c 	.word	0x2000166c
 8007e3c:	20001680 	.word	0x20001680
 8007e40:	20001694 	.word	0x20001694
 8007e44:	200016a8 	.word	0x200016a8
 8007e48:	200016bc 	.word	0x200016bc
 8007e4c:	200016d0 	.word	0x200016d0
 8007e50:	200016e4 	.word	0x200016e4
 8007e54:	200016f8 	.word	0x200016f8
 8007e58:	2000170c 	.word	0x2000170c
 8007e5c:	20001720 	.word	0x20001720
 8007e60:	20001734 	.word	0x20001734
 8007e64:	20001748 	.word	0x20001748
 8007e68:	2000175c 	.word	0x2000175c
 8007e6c:	20001770 	.word	0x20001770
 8007e70:	20001784 	.word	0x20001784
 8007e74:	20001798 	.word	0x20001798
 8007e78:	200017ac 	.word	0x200017ac
 8007e7c:	200017c0 	.word	0x200017c0
 8007e80:	200017d4 	.word	0x200017d4
 8007e84:	200017e8 	.word	0x200017e8
 8007e88:	200017fc 	.word	0x200017fc
 8007e8c:	20001810 	.word	0x20001810
 8007e90:	20001824 	.word	0x20001824
 8007e94:	20001838 	.word	0x20001838
 8007e98:	2000184c 	.word	0x2000184c
 8007e9c:	20001860 	.word	0x20001860
 8007ea0:	20001874 	.word	0x20001874
 8007ea4:	20001888 	.word	0x20001888
 8007ea8:	2000189c 	.word	0x2000189c
 8007eac:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007eb0:	2211      	movs	r2, #17
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4809      	ldr	r0, [pc, #36]	@ (8007edc <resetMenuTexts+0x4d8>)
 8007eb6:	f005 fcbf 	bl	800d838 <memset>
    memset(idConfirmationText, 0, 17);
 8007eba:	2211      	movs	r2, #17
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4808      	ldr	r0, [pc, #32]	@ (8007ee0 <resetMenuTexts+0x4dc>)
 8007ec0:	f005 fcba 	bl	800d838 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007ec4:	2211      	movs	r2, #17
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4806      	ldr	r0, [pc, #24]	@ (8007ee4 <resetMenuTexts+0x4e0>)
 8007eca:	f005 fcb5 	bl	800d838 <memset>
    memset(wifiConfirmationText, 0, 17);
 8007ece:	2211      	movs	r2, #17
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4805      	ldr	r0, [pc, #20]	@ (8007ee8 <resetMenuTexts+0x4e4>)
 8007ed4:	f005 fcb0 	bl	800d838 <memset>
}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200018c4 	.word	0x200018c4
 8007ee0:	200018d8 	.word	0x200018d8
 8007ee4:	200018ec 	.word	0x200018ec
 8007ee8:	20001900 	.word	0x20001900

08007eec <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007ef2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ef6:	f001 fd89 	bl	8009a0c <HAL_Delay>
	int confirmationVal = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007efe:	e012      	b.n	8007f26 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007f00:	4a12      	ldr	r2, [pc, #72]	@ (8007f4c <takeMachineIDWithConfirmation+0x60>)
 8007f02:	2101      	movs	r1, #1
 8007f04:	2001      	movs	r0, #1
 8007f06:	f001 f827 	bl	8008f58 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007f0a:	4a11      	ldr	r2, [pc, #68]	@ (8007f50 <takeMachineIDWithConfirmation+0x64>)
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f001 f822 	bl	8008f58 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007f14:	2102      	movs	r1, #2
 8007f16:	480f      	ldr	r0, [pc, #60]	@ (8007f54 <takeMachineIDWithConfirmation+0x68>)
 8007f18:	f002 fb48 	bl	800a5ac <HAL_GPIO_ReadPin>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007f22:	2301      	movs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0e9      	beq.n	8007f00 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007f2c:	f000 f814 	bl	8007f58 <takeMachineID>

	convertArrays(1);
 8007f30:	2001      	movs	r0, #1
 8007f32:	f7f8 fcc1 	bl	80008b8 <convertArrays>
	HAL_Delay(50);
 8007f36:	2032      	movs	r0, #50	@ 0x32
 8007f38:	f001 fd68 	bl	8009a0c <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f7f9 fabf 	bl	80014c0 <printCredentials>
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200018d8 	.word	0x200018d8
 8007f50:	200018ec 	.word	0x200018ec
 8007f54:	40010800 	.word	0x40010800

08007f58 <takeMachineID>:

void takeMachineID() {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f001 f858 	bl	8009014 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007f64:	220c      	movs	r2, #12
 8007f66:	2100      	movs	r1, #0
 8007f68:	489b      	ldr	r0, [pc, #620]	@ (80081d8 <takeMachineID+0x280>)
 8007f6a:	f005 fc65 	bl	800d838 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007f6e:	2305      	movs	r3, #5
 8007f70:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007f72:	2303      	movs	r3, #3
 8007f74:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007f7a:	4b98      	ldr	r3, [pc, #608]	@ (80081dc <takeMachineID+0x284>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007f80:	2100      	movs	r1, #0
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7f9 f92c 	bl	80011e0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f88:	2108      	movs	r1, #8
 8007f8a:	4895      	ldr	r0, [pc, #596]	@ (80081e0 <takeMachineID+0x288>)
 8007f8c:	f002 fb0e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d11a      	bne.n	8007fcc <takeMachineID+0x74>
        	lcd_cursor(0);
 8007f96:	2000      	movs	r0, #0
 8007f98:	f001 f83c 	bl	8009014 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007f9c:	f000 fe1e 	bl	8008bdc <checkEEPROM4ID>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d00e      	beq.n	8007fc4 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007fa6:	4a8f      	ldr	r2, [pc, #572]	@ (80081e4 <takeMachineID+0x28c>)
 8007fa8:	2101      	movs	r1, #1
 8007faa:	2001      	movs	r0, #1
 8007fac:	f000 ffd4 	bl	8008f58 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007fb0:	4a8d      	ldr	r2, [pc, #564]	@ (80081e8 <takeMachineID+0x290>)
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	2002      	movs	r0, #2
 8007fb6:	f000 ffcf 	bl	8008f58 <lcd_print>
        		HAL_Delay(1250);
 8007fba:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007fbe:	f001 fd25 	bl	8009a0c <HAL_Delay>

        		goto mainSection;
 8007fc2:	e7cc      	b.n	8007f5e <takeMachineID+0x6>
        	} else {
        		saveEEPROM(1);
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	f7f8 fb75 	bl	80006b4 <saveEEPROM>

            	break;
 8007fca:	e130      	b.n	800822e <takeMachineID+0x2d6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4884      	ldr	r0, [pc, #528]	@ (80081e0 <takeMachineID+0x288>)
 8007fd0:	f002 faec 	bl	800a5ac <HAL_GPIO_ReadPin>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d111      	bne.n	8007ffe <takeMachineID+0xa6>
        	if(cursorPosition == 7) {
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	d102      	bne.n	8007fe6 <takeMachineID+0x8e>
        		cursorPosition = 10;
 8007fe0:	230a      	movs	r3, #10
 8007fe2:	60bb      	str	r3, [r7, #8]
 8007fe4:	e008      	b.n	8007ff8 <takeMachineID+0xa0>
        	} else if (cursorPosition == 14) {
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b0e      	cmp	r3, #14
 8007fea:	d102      	bne.n	8007ff2 <takeMachineID+0x9a>
                cursorPosition = 3;
 8007fec:	2303      	movs	r3, #3
 8007fee:	60bb      	str	r3, [r7, #8]
 8007ff0:	e002      	b.n	8007ff8 <takeMachineID+0xa0>
            } else {
            	cursorPosition++;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007ff8:	2096      	movs	r0, #150	@ 0x96
 8007ffa:	f001 fd07 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007ffe:	2108      	movs	r1, #8
 8008000:	487a      	ldr	r0, [pc, #488]	@ (80081ec <takeMachineID+0x294>)
 8008002:	f002 fad3 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008006:	4603      	mov	r3, r0
 8008008:	2b01      	cmp	r3, #1
 800800a:	d111      	bne.n	8008030 <takeMachineID+0xd8>
            if (cursorPosition == 3) {
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b03      	cmp	r3, #3
 8008010:	d102      	bne.n	8008018 <takeMachineID+0xc0>
                cursorPosition = 14;
 8008012:	230e      	movs	r3, #14
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	e008      	b.n	800802a <takeMachineID+0xd2>
            } else if(cursorPosition == 10) {
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b0a      	cmp	r3, #10
 800801c:	d102      	bne.n	8008024 <takeMachineID+0xcc>
            	cursorPosition = 7;
 800801e:	2307      	movs	r3, #7
 8008020:	60bb      	str	r3, [r7, #8]
 8008022:	e002      	b.n	800802a <takeMachineID+0xd2>
            } else {
            	cursorPosition--;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3b01      	subs	r3, #1
 8008028:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 800802a:	20fa      	movs	r0, #250	@ 0xfa
 800802c:	f001 fcee 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008030:	2102      	movs	r1, #2
 8008032:	486b      	ldr	r0, [pc, #428]	@ (80081e0 <takeMachineID+0x288>)
 8008034:	f002 faba 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	f040 80a1 	bne.w	8008182 <takeMachineID+0x22a>
        	if(cursorPosition == 3) {
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d10a      	bne.n	800805c <takeMachineID+0x104>
        		machineID[arrayPos] = '0';
 8008046:	4a64      	ldr	r2, [pc, #400]	@ (80081d8 <takeMachineID+0x280>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	2230      	movs	r2, #48	@ 0x30
 800804e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008050:	4a67      	ldr	r2, [pc, #412]	@ (80081f0 <takeMachineID+0x298>)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	4413      	add	r3, r2
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e07c      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 4) {
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d10a      	bne.n	8008078 <takeMachineID+0x120>
        		machineID[arrayPos] = '1';
 8008062:	4a5d      	ldr	r2, [pc, #372]	@ (80081d8 <takeMachineID+0x280>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4413      	add	r3, r2
 8008068:	2231      	movs	r2, #49	@ 0x31
 800806a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 800806c:	4a60      	ldr	r2, [pc, #384]	@ (80081f0 <takeMachineID+0x298>)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	4413      	add	r3, r2
 8008072:	2201      	movs	r2, #1
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e06e      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 5) {
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b05      	cmp	r3, #5
 800807c:	d10a      	bne.n	8008094 <takeMachineID+0x13c>
        		machineID[arrayPos] = '2';
 800807e:	4a56      	ldr	r2, [pc, #344]	@ (80081d8 <takeMachineID+0x280>)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	2232      	movs	r2, #50	@ 0x32
 8008086:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008088:	4a59      	ldr	r2, [pc, #356]	@ (80081f0 <takeMachineID+0x298>)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	4413      	add	r3, r2
 800808e:	2202      	movs	r2, #2
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e060      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 6) {
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d10a      	bne.n	80080b0 <takeMachineID+0x158>
        		machineID[arrayPos] = '3';
 800809a:	4a4f      	ldr	r2, [pc, #316]	@ (80081d8 <takeMachineID+0x280>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4413      	add	r3, r2
 80080a0:	2233      	movs	r2, #51	@ 0x33
 80080a2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 80080a4:	4a52      	ldr	r2, [pc, #328]	@ (80081f0 <takeMachineID+0x298>)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	4413      	add	r3, r2
 80080aa:	2203      	movs	r2, #3
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e052      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 7) {
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b07      	cmp	r3, #7
 80080b4:	d10a      	bne.n	80080cc <takeMachineID+0x174>
        		machineID[arrayPos] = '4';
 80080b6:	4a48      	ldr	r2, [pc, #288]	@ (80081d8 <takeMachineID+0x280>)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	2234      	movs	r2, #52	@ 0x34
 80080be:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80080c0:	4a4b      	ldr	r2, [pc, #300]	@ (80081f0 <takeMachineID+0x298>)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	2204      	movs	r2, #4
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e044      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 10) {
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b0a      	cmp	r3, #10
 80080d0:	d10a      	bne.n	80080e8 <takeMachineID+0x190>
        		machineID[arrayPos] = '5';
 80080d2:	4a41      	ldr	r2, [pc, #260]	@ (80081d8 <takeMachineID+0x280>)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4413      	add	r3, r2
 80080d8:	2235      	movs	r2, #53	@ 0x35
 80080da:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80080dc:	4a44      	ldr	r2, [pc, #272]	@ (80081f0 <takeMachineID+0x298>)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	4413      	add	r3, r2
 80080e2:	2205      	movs	r2, #5
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e036      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 11) {
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d10a      	bne.n	8008104 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '6';
 80080ee:	4a3a      	ldr	r2, [pc, #232]	@ (80081d8 <takeMachineID+0x280>)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4413      	add	r3, r2
 80080f4:	2236      	movs	r2, #54	@ 0x36
 80080f6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80080f8:	4a3d      	ldr	r2, [pc, #244]	@ (80081f0 <takeMachineID+0x298>)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	4413      	add	r3, r2
 80080fe:	2206      	movs	r2, #6
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e028      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 12) {
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b0c      	cmp	r3, #12
 8008108:	d10a      	bne.n	8008120 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '7';
 800810a:	4a33      	ldr	r2, [pc, #204]	@ (80081d8 <takeMachineID+0x280>)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4413      	add	r3, r2
 8008110:	2237      	movs	r2, #55	@ 0x37
 8008112:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008114:	4a36      	ldr	r2, [pc, #216]	@ (80081f0 <takeMachineID+0x298>)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	4413      	add	r3, r2
 800811a:	2207      	movs	r2, #7
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e01a      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 13) {
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b0d      	cmp	r3, #13
 8008124:	d10a      	bne.n	800813c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '8';
 8008126:	4a2c      	ldr	r2, [pc, #176]	@ (80081d8 <takeMachineID+0x280>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4413      	add	r3, r2
 800812c:	2238      	movs	r2, #56	@ 0x38
 800812e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008130:	4a2f      	ldr	r2, [pc, #188]	@ (80081f0 <takeMachineID+0x298>)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	4413      	add	r3, r2
 8008136:	2208      	movs	r2, #8
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e00c      	b.n	8008156 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 14) {
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b0e      	cmp	r3, #14
 8008140:	d109      	bne.n	8008156 <takeMachineID+0x1fe>
        		machineID[arrayPos] = '9';
 8008142:	4a25      	ldr	r2, [pc, #148]	@ (80081d8 <takeMachineID+0x280>)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4413      	add	r3, r2
 8008148:	2239      	movs	r2, #57	@ 0x39
 800814a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 800814c:	4a28      	ldr	r2, [pc, #160]	@ (80081f0 <takeMachineID+0x298>)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	4413      	add	r3, r2
 8008152:	2209      	movs	r2, #9
 8008154:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	b2d9      	uxtb	r1, r3
 800815a:	4a1f      	ldr	r2, [pc, #124]	@ (80081d8 <takeMachineID+0x280>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	2001      	movs	r0, #1
 8008166:	f000 ff0c 	bl	8008f82 <lcd_print_char>

        	writeLoc++;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3301      	adds	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3301      	adds	r3, #1
 8008174:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	3301      	adds	r3, #1
 800817a:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 800817c:	2096      	movs	r0, #150	@ 0x96
 800817e:	f001 fc45 	bl	8009a0c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008182:	2104      	movs	r1, #4
 8008184:	4816      	ldr	r0, [pc, #88]	@ (80081e0 <takeMachineID+0x288>)
 8008186:	f002 fa11 	bl	800a5ac <HAL_GPIO_ReadPin>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d147      	bne.n	8008220 <takeMachineID+0x2c8>
            if(strlen(machineID) >= 1) {
 8008190:	4b11      	ldr	r3, [pc, #68]	@ (80081d8 <takeMachineID+0x280>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d040      	beq.n	800821a <takeMachineID+0x2c2>
                machineID[arrayPos] = '\0';
 8008198:	4a0f      	ldr	r2, [pc, #60]	@ (80081d8 <takeMachineID+0x280>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 80081a2:	4a13      	ldr	r2, [pc, #76]	@ (80081f0 <takeMachineID+0x298>)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	4413      	add	r3, r2
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	dd03      	ble.n	80081ba <takeMachineID+0x262>
                	writeLoc--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e004      	b.n	80081c4 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	dc01      	bgt.n	80081c4 <takeMachineID+0x26c>
                	writeLoc = 5;
 80081c0:	2305      	movs	r3, #5
 80081c2:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd14      	ble.n	80081f4 <takeMachineID+0x29c>
                	arrayPos--;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	e015      	b.n	8008204 <takeMachineID+0x2ac>
 80081d8:	20001064 	.word	0x20001064
 80081dc:	20000000 	.word	0x20000000
 80081e0:	40010800 	.word	0x40010800
 80081e4:	200017e8 	.word	0x200017e8
 80081e8:	200017fc 	.word	0x200017fc
 80081ec:	40011000 	.word	0x40011000
 80081f0:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da04      	bge.n	8008204 <takeMachineID+0x2ac>
                	arrayPos = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <takeMachineID+0x2e0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	3305      	adds	r3, #5
 800820a:	b2db      	uxtb	r3, r3
 800820c:	4619      	mov	r1, r3
 800820e:	2001      	movs	r0, #1
 8008210:	f000 fed8 	bl	8008fc4 <lcd_delete_char>
                HAL_Delay(50);
 8008214:	2032      	movs	r0, #50	@ 0x32
 8008216:	f001 fbf9 	bl	8009a0c <HAL_Delay>
            }

            HAL_Delay(150);
 800821a:	2096      	movs	r0, #150	@ 0x96
 800821c:	f001 fbf6 	bl	8009a0c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4619      	mov	r1, r3
 8008226:	2002      	movs	r0, #2
 8008228:	f000 fe77 	bl	8008f1a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800822c:	e6ac      	b.n	8007f88 <takeMachineID+0x30>
    }
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000000 	.word	0x20000000

0800823c <ssidConfirmation>:

uint8_t ssidConfirmation() {
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008246:	4a1e      	ldr	r2, [pc, #120]	@ (80082c0 <ssidConfirmation+0x84>)
 8008248:	2101      	movs	r1, #1
 800824a:	2001      	movs	r0, #1
 800824c:	f000 fe84 	bl	8008f58 <lcd_print>

	while(loopVal == 1) {
 8008250:	e012      	b.n	8008278 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008252:	4a1c      	ldr	r2, [pc, #112]	@ (80082c4 <ssidConfirmation+0x88>)
 8008254:	2101      	movs	r1, #1
 8008256:	2002      	movs	r0, #2
 8008258:	f000 fe7e 	bl	8008f58 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800825c:	2102      	movs	r1, #2
 800825e:	481a      	ldr	r0, [pc, #104]	@ (80082c8 <ssidConfirmation+0x8c>)
 8008260:	f002 f9a4 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008264:	4603      	mov	r3, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <ssidConfirmation+0x32>
			loopVal = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800826e:	4a17      	ldr	r2, [pc, #92]	@ (80082cc <ssidConfirmation+0x90>)
 8008270:	2101      	movs	r1, #1
 8008272:	2001      	movs	r0, #1
 8008274:	f000 fe70 	bl	8008f58 <lcd_print>
	while(loopVal == 1) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d0e9      	beq.n	8008252 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800827e:	2000      	movs	r0, #0
 8008280:	f000 fec8 	bl	8009014 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008284:	4811      	ldr	r0, [pc, #68]	@ (80082cc <ssidConfirmation+0x90>)
 8008286:	f7f7 ffcd 	bl	8000224 <strlen>
 800828a:	4603      	mov	r3, r0
 800828c:	2b14      	cmp	r3, #20
 800828e:	d90f      	bls.n	80082b0 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008290:	4a0f      	ldr	r2, [pc, #60]	@ (80082d0 <ssidConfirmation+0x94>)
 8008292:	2101      	movs	r1, #1
 8008294:	2001      	movs	r0, #1
 8008296:	f000 fe5f 	bl	8008f58 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800829a:	4a0e      	ldr	r2, [pc, #56]	@ (80082d4 <ssidConfirmation+0x98>)
 800829c:	2101      	movs	r1, #1
 800829e:	2002      	movs	r0, #2
 80082a0:	f000 fe5a 	bl	8008f58 <lcd_print>
        HAL_Delay(1250);
 80082a4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80082a8:	f001 fbb0 	bl	8009a0c <HAL_Delay>

        return 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e003      	b.n	80082b8 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7f8 f9ff 	bl	80006b4 <saveEEPROM>

    	return 1;
 80082b6:	2301      	movs	r3, #1
    }
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	0800eb38 	.word	0x0800eb38
 80082c4:	20001900 	.word	0x20001900
 80082c8:	40010800 	.word	0x40010800
 80082cc:	20001070 	.word	0x20001070
 80082d0:	20001810 	.word	0x20001810
 80082d4:	20001824 	.word	0x20001824

080082d8 <takeWifiSSID>:

void takeWifiSSID() {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80082de:	2001      	movs	r0, #1
 80082e0:	f000 fe98 	bl	8009014 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80082e4:	2210      	movs	r2, #16
 80082e6:	2100      	movs	r1, #0
 80082e8:	48a4      	ldr	r0, [pc, #656]	@ (800857c <takeWifiSSID+0x2a4>)
 80082ea:	f005 faa5 	bl	800d838 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80082ee:	2301      	movs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80082f2:	2307      	movs	r3, #7
 80082f4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80082f6:	2301      	movs	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80082fe:	4ba0      	ldr	r3, [pc, #640]	@ (8008580 <takeWifiSSID+0x2a8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8008304:	2101      	movs	r1, #1
 8008306:	2002      	movs	r0, #2
 8008308:	f7f8 ff6a 	bl	80011e0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800830c:	2108      	movs	r1, #8
 800830e:	489d      	ldr	r0, [pc, #628]	@ (8008584 <takeWifiSSID+0x2ac>)
 8008310:	f002 f94c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008314:	4603      	mov	r3, r0
 8008316:	2b01      	cmp	r3, #1
 8008318:	d106      	bne.n	8008328 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 800831a:	f7ff ff8f 	bl	800823c <ssidConfirmation>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 8126 	bne.w	8008572 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8008326:	e7da      	b.n	80082de <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008328:	2101      	movs	r1, #1
 800832a:	4896      	ldr	r0, [pc, #600]	@ (8008584 <takeWifiSSID+0x2ac>)
 800832c:	f002 f93e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d14d      	bne.n	80083d2 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b50      	cmp	r3, #80	@ 0x50
 800833a:	dd01      	ble.n	8008340 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 800833c:	2301      	movs	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b10      	cmp	r3, #16
 8008344:	d13f      	bne.n	80083c6 <takeWifiSSID+0xee>
            	if(page == 1) {
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d109      	bne.n	8008360 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 800834c:	2301      	movs	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3301      	adds	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008356:	2102      	movs	r1, #2
 8008358:	2002      	movs	r0, #2
 800835a:	f7f8 ff41 	bl	80011e0 <printTemplate>
 800835e:	e035      	b.n	80083cc <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d109      	bne.n	800837a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
            		page++;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	3301      	adds	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008370:	2103      	movs	r1, #3
 8008372:	2002      	movs	r0, #2
 8008374:	f7f8 ff34 	bl	80011e0 <printTemplate>
 8008378:	e028      	b.n	80083cc <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d109      	bne.n	8008394 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008380:	2301      	movs	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
            		page++;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800838a:	2104      	movs	r1, #4
 800838c:	2002      	movs	r0, #2
 800838e:	f7f8 ff27 	bl	80011e0 <printTemplate>
 8008392:	e01b      	b.n	80083cc <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b04      	cmp	r3, #4
 8008398:	d109      	bne.n	80083ae <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800839a:	2301      	movs	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
            		page++;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	3301      	adds	r3, #1
 80083a2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80083a4:	2105      	movs	r1, #5
 80083a6:	2002      	movs	r0, #2
 80083a8:	f7f8 ff1a 	bl	80011e0 <printTemplate>
 80083ac:	e00e      	b.n	80083cc <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	d10b      	bne.n	80083cc <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80083b4:	2301      	movs	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80083b8:	2301      	movs	r3, #1
 80083ba:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80083bc:	2101      	movs	r1, #1
 80083be:	2002      	movs	r0, #2
 80083c0:	f7f8 ff0e 	bl	80011e0 <printTemplate>
 80083c4:	e002      	b.n	80083cc <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80083cc:	2096      	movs	r0, #150	@ 0x96
 80083ce:	f001 fb1d 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80083d2:	2108      	movs	r1, #8
 80083d4:	486c      	ldr	r0, [pc, #432]	@ (8008588 <takeWifiSSID+0x2b0>)
 80083d6:	f002 f8e9 	bl	800a5ac <HAL_GPIO_ReadPin>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d149      	bne.n	8008474 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dc01      	bgt.n	80083ea <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80083e6:	2350      	movs	r3, #80	@ 0x50
 80083e8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d13b      	bne.n	8008468 <takeWifiSSID+0x190>
            	if(page == 1) {
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d108      	bne.n	8008408 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80083f6:	2310      	movs	r3, #16
 80083f8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80083fa:	2305      	movs	r3, #5
 80083fc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80083fe:	2105      	movs	r1, #5
 8008400:	2002      	movs	r0, #2
 8008402:	f7f8 feed 	bl	80011e0 <printTemplate>
 8008406:	e032      	b.n	800846e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d108      	bne.n	8008420 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 800840e:	2310      	movs	r3, #16
 8008410:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008416:	2101      	movs	r1, #1
 8008418:	2002      	movs	r0, #2
 800841a:	f7f8 fee1 	bl	80011e0 <printTemplate>
 800841e:	e026      	b.n	800846e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d108      	bne.n	8008438 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8008426:	2310      	movs	r3, #16
 8008428:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800842a:	2302      	movs	r3, #2
 800842c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800842e:	2102      	movs	r1, #2
 8008430:	2002      	movs	r0, #2
 8008432:	f7f8 fed5 	bl	80011e0 <printTemplate>
 8008436:	e01a      	b.n	800846e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b04      	cmp	r3, #4
 800843c:	d108      	bne.n	8008450 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800843e:	2310      	movs	r3, #16
 8008440:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008442:	2303      	movs	r3, #3
 8008444:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008446:	2103      	movs	r1, #3
 8008448:	2002      	movs	r0, #2
 800844a:	f7f8 fec9 	bl	80011e0 <printTemplate>
 800844e:	e00e      	b.n	800846e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b05      	cmp	r3, #5
 8008454:	d10b      	bne.n	800846e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008456:	2310      	movs	r3, #16
 8008458:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800845a:	2304      	movs	r3, #4
 800845c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800845e:	2104      	movs	r1, #4
 8008460:	2002      	movs	r0, #2
 8008462:	f7f8 febd 	bl	80011e0 <printTemplate>
 8008466:	e002      	b.n	800846e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3b01      	subs	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800846e:	2096      	movs	r0, #150	@ 0x96
 8008470:	f001 facc 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008474:	2102      	movs	r1, #2
 8008476:	4843      	ldr	r0, [pc, #268]	@ (8008584 <takeWifiSSID+0x2ac>)
 8008478:	f002 f898 	bl	800a5ac <HAL_GPIO_ReadPin>
 800847c:	4603      	mov	r3, r0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d12f      	bne.n	80084e2 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	b2d9      	uxtb	r1, r3
 8008486:	4a41      	ldr	r2, [pc, #260]	@ (800858c <takeWifiSSID+0x2b4>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	460a      	mov	r2, r1
 800848e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008490:	4a3f      	ldr	r2, [pc, #252]	@ (8008590 <takeWifiSSID+0x2b8>)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	7819      	ldrb	r1, [r3, #0]
 8008498:	4a38      	ldr	r2, [pc, #224]	@ (800857c <takeWifiSSID+0x2a4>)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	460a      	mov	r2, r1
 80084a0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	b2d9      	uxtb	r1, r3
 80084a6:	4a3a      	ldr	r2, [pc, #232]	@ (8008590 <takeWifiSSID+0x2b8>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	2001      	movs	r0, #1
 80084b2:	f000 fd66 	bl	8008f82 <lcd_print_char>

            writeLoc++;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3301      	adds	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3301      	adds	r3, #1
 80084c0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3301      	adds	r3, #1
 80084c6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80084c8:	4a30      	ldr	r2, [pc, #192]	@ (800858c <takeWifiSSID+0x2b4>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80084d2:	4a2a      	ldr	r2, [pc, #168]	@ (800857c <takeWifiSSID+0x2a4>)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4413      	add	r3, r2
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80084dc:	2096      	movs	r0, #150	@ 0x96
 80084de:	f001 fa95 	bl	8009a0c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80084e2:	2104      	movs	r1, #4
 80084e4:	4827      	ldr	r0, [pc, #156]	@ (8008584 <takeWifiSSID+0x2ac>)
 80084e6:	f002 f861 	bl	800a5ac <HAL_GPIO_ReadPin>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d139      	bne.n	8008564 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80084f0:	4b22      	ldr	r3, [pc, #136]	@ (800857c <takeWifiSSID+0x2a4>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d032      	beq.n	800855e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80084f8:	4a24      	ldr	r2, [pc, #144]	@ (800858c <takeWifiSSID+0x2b4>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8008502:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <takeWifiSSID+0x2a4>)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4413      	add	r3, r2
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b07      	cmp	r3, #7
 8008510:	dd03      	ble.n	800851a <takeWifiSSID+0x242>
        			writeLoc--;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3b01      	subs	r3, #1
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e004      	b.n	8008524 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b06      	cmp	r3, #6
 800851e:	dc01      	bgt.n	8008524 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008520:	2307      	movs	r3, #7
 8008522:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dd06      	ble.n	8008538 <takeWifiSSID+0x260>
        			arrayPosition--;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3b01      	subs	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	e007      	b.n	8008548 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da04      	bge.n	8008548 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008542:	4b0f      	ldr	r3, [pc, #60]	@ (8008580 <takeWifiSSID+0x2a8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	3307      	adds	r3, #7
 800854e:	b2db      	uxtb	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	2001      	movs	r0, #1
 8008554:	f000 fd36 	bl	8008fc4 <lcd_delete_char>
        		HAL_Delay(50);
 8008558:	2032      	movs	r0, #50	@ 0x32
 800855a:	f001 fa57 	bl	8009a0c <HAL_Delay>
        	}

        	HAL_Delay(150);
 800855e:	2096      	movs	r0, #150	@ 0x96
 8008560:	f001 fa54 	bl	8009a0c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	2002      	movs	r0, #2
 800856c:	f000 fcd5 	bl	8008f1a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008570:	e6cc      	b.n	800830c <takeWifiSSID+0x34>
        		break;
 8008572:	bf00      	nop
    }
}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20001070 	.word	0x20001070
 8008580:	20000004 	.word	0x20000004
 8008584:	40010800 	.word	0x40010800
 8008588:	40011000 	.word	0x40011000
 800858c:	20000fec 	.word	0x20000fec
 8008590:	20000018 	.word	0x20000018

08008594 <passConfirmation>:

uint8_t passConfirmation() {
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800859a:	2301      	movs	r3, #1
 800859c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800859e:	4a1e      	ldr	r2, [pc, #120]	@ (8008618 <passConfirmation+0x84>)
 80085a0:	2101      	movs	r1, #1
 80085a2:	2001      	movs	r0, #1
 80085a4:	f000 fcd8 	bl	8008f58 <lcd_print>

	while(loopVal == 1) {
 80085a8:	e012      	b.n	80085d0 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80085aa:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <passConfirmation+0x88>)
 80085ac:	2101      	movs	r1, #1
 80085ae:	2002      	movs	r0, #2
 80085b0:	f000 fcd2 	bl	8008f58 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80085b4:	2102      	movs	r1, #2
 80085b6:	481a      	ldr	r0, [pc, #104]	@ (8008620 <passConfirmation+0x8c>)
 80085b8:	f001 fff8 	bl	800a5ac <HAL_GPIO_ReadPin>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <passConfirmation+0x32>
			loopVal = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80085c6:	4a17      	ldr	r2, [pc, #92]	@ (8008624 <passConfirmation+0x90>)
 80085c8:	2101      	movs	r1, #1
 80085ca:	2001      	movs	r0, #1
 80085cc:	f000 fcc4 	bl	8008f58 <lcd_print>
	while(loopVal == 1) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d0e9      	beq.n	80085aa <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80085d6:	2000      	movs	r0, #0
 80085d8:	f000 fd1c 	bl	8009014 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80085dc:	4811      	ldr	r0, [pc, #68]	@ (8008624 <passConfirmation+0x90>)
 80085de:	f7f7 fe21 	bl	8000224 <strlen>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b14      	cmp	r3, #20
 80085e6:	d90f      	bls.n	8008608 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80085e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008628 <passConfirmation+0x94>)
 80085ea:	2101      	movs	r1, #1
 80085ec:	2001      	movs	r0, #1
 80085ee:	f000 fcb3 	bl	8008f58 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80085f2:	4a0e      	ldr	r2, [pc, #56]	@ (800862c <passConfirmation+0x98>)
 80085f4:	2101      	movs	r1, #1
 80085f6:	2002      	movs	r0, #2
 80085f8:	f000 fcae 	bl	8008f58 <lcd_print>
        HAL_Delay(1250);
 80085fc:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008600:	f001 fa04 	bl	8009a0c <HAL_Delay>

        return 0;
 8008604:	2300      	movs	r3, #0
 8008606:	e003      	b.n	8008610 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008608:	2001      	movs	r0, #1
 800860a:	f7f8 f853 	bl	80006b4 <saveEEPROM>

    	return 1;
 800860e:	2301      	movs	r3, #1
    }
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800eb38 	.word	0x0800eb38
 800861c:	20001900 	.word	0x20001900
 8008620:	40010800 	.word	0x40010800
 8008624:	20001080 	.word	0x20001080
 8008628:	20001838 	.word	0x20001838
 800862c:	2000184c 	.word	0x2000184c

08008630 <takeWifiPass>:

void takeWifiPass() {
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8008636:	2001      	movs	r0, #1
 8008638:	f000 fcec 	bl	8009014 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800863c:	2210      	movs	r2, #16
 800863e:	2100      	movs	r1, #0
 8008640:	48a4      	ldr	r0, [pc, #656]	@ (80088d4 <takeWifiPass+0x2a4>)
 8008642:	f005 f8f9 	bl	800d838 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008646:	2301      	movs	r3, #1
 8008648:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800864a:	2307      	movs	r3, #7
 800864c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800864e:	2301      	movs	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008656:	4ba0      	ldr	r3, [pc, #640]	@ (80088d8 <takeWifiPass+0x2a8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800865c:	2101      	movs	r1, #1
 800865e:	2003      	movs	r0, #3
 8008660:	f7f8 fdbe 	bl	80011e0 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008664:	2108      	movs	r1, #8
 8008666:	489d      	ldr	r0, [pc, #628]	@ (80088dc <takeWifiPass+0x2ac>)
 8008668:	f001 ffa0 	bl	800a5ac <HAL_GPIO_ReadPin>
 800866c:	4603      	mov	r3, r0
 800866e:	2b01      	cmp	r3, #1
 8008670:	d106      	bne.n	8008680 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008672:	f7ff ff8f 	bl	8008594 <passConfirmation>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 8126 	bne.w	80088ca <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800867e:	e7da      	b.n	8008636 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008680:	2101      	movs	r1, #1
 8008682:	4896      	ldr	r0, [pc, #600]	@ (80088dc <takeWifiPass+0x2ac>)
 8008684:	f001 ff92 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008688:	4603      	mov	r3, r0
 800868a:	2b01      	cmp	r3, #1
 800868c:	d14d      	bne.n	800872a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b50      	cmp	r3, #80	@ 0x50
 8008692:	dd01      	ble.n	8008698 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b10      	cmp	r3, #16
 800869c:	d13f      	bne.n	800871e <takeWifiPass+0xee>
            	if(page == 1) {
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d109      	bne.n	80086b8 <takeWifiPass+0x88>
            		cursorPosition = 1;
 80086a4:	2301      	movs	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
            		page++;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3301      	adds	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80086ae:	2102      	movs	r1, #2
 80086b0:	2003      	movs	r0, #3
 80086b2:	f7f8 fd95 	bl	80011e0 <printTemplate>
 80086b6:	e035      	b.n	8008724 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d109      	bne.n	80086d2 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
            		page++;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	3301      	adds	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80086c8:	2103      	movs	r1, #3
 80086ca:	2003      	movs	r0, #3
 80086cc:	f7f8 fd88 	bl	80011e0 <printTemplate>
 80086d0:	e028      	b.n	8008724 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d109      	bne.n	80086ec <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80086d8:	2301      	movs	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
            		page++;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3301      	adds	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80086e2:	2104      	movs	r1, #4
 80086e4:	2003      	movs	r0, #3
 80086e6:	f7f8 fd7b 	bl	80011e0 <printTemplate>
 80086ea:	e01b      	b.n	8008724 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d109      	bne.n	8008706 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80086f2:	2301      	movs	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
            		page++;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	3301      	adds	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80086fc:	2105      	movs	r1, #5
 80086fe:	2003      	movs	r0, #3
 8008700:	f7f8 fd6e 	bl	80011e0 <printTemplate>
 8008704:	e00e      	b.n	8008724 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b05      	cmp	r3, #5
 800870a:	d10b      	bne.n	8008724 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800870c:	2301      	movs	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008710:	2301      	movs	r3, #1
 8008712:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008714:	2101      	movs	r1, #1
 8008716:	2003      	movs	r0, #3
 8008718:	f7f8 fd62 	bl	80011e0 <printTemplate>
 800871c:	e002      	b.n	8008724 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008724:	2096      	movs	r0, #150	@ 0x96
 8008726:	f001 f971 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800872a:	2108      	movs	r1, #8
 800872c:	486c      	ldr	r0, [pc, #432]	@ (80088e0 <takeWifiPass+0x2b0>)
 800872e:	f001 ff3d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008732:	4603      	mov	r3, r0
 8008734:	2b01      	cmp	r3, #1
 8008736:	d149      	bne.n	80087cc <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc01      	bgt.n	8008742 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800873e:	2350      	movs	r3, #80	@ 0x50
 8008740:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d13b      	bne.n	80087c0 <takeWifiPass+0x190>
            	if(page == 1) {
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d108      	bne.n	8008760 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800874e:	2310      	movs	r3, #16
 8008750:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008752:	2305      	movs	r3, #5
 8008754:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008756:	2105      	movs	r1, #5
 8008758:	2003      	movs	r0, #3
 800875a:	f7f8 fd41 	bl	80011e0 <printTemplate>
 800875e:	e032      	b.n	80087c6 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d108      	bne.n	8008778 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008766:	2310      	movs	r3, #16
 8008768:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800876e:	2101      	movs	r1, #1
 8008770:	2003      	movs	r0, #3
 8008772:	f7f8 fd35 	bl	80011e0 <printTemplate>
 8008776:	e026      	b.n	80087c6 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b03      	cmp	r3, #3
 800877c:	d108      	bne.n	8008790 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800877e:	2310      	movs	r3, #16
 8008780:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008782:	2302      	movs	r3, #2
 8008784:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008786:	2102      	movs	r1, #2
 8008788:	2003      	movs	r0, #3
 800878a:	f7f8 fd29 	bl	80011e0 <printTemplate>
 800878e:	e01a      	b.n	80087c6 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b04      	cmp	r3, #4
 8008794:	d108      	bne.n	80087a8 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008796:	2310      	movs	r3, #16
 8008798:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800879a:	2303      	movs	r3, #3
 800879c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800879e:	2103      	movs	r1, #3
 80087a0:	2003      	movs	r0, #3
 80087a2:	f7f8 fd1d 	bl	80011e0 <printTemplate>
 80087a6:	e00e      	b.n	80087c6 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d10b      	bne.n	80087c6 <takeWifiPass+0x196>
            		cursorPosition = 16;
 80087ae:	2310      	movs	r3, #16
 80087b0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80087b2:	2304      	movs	r3, #4
 80087b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80087b6:	2104      	movs	r1, #4
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7f8 fd11 	bl	80011e0 <printTemplate>
 80087be:	e002      	b.n	80087c6 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80087c6:	2096      	movs	r0, #150	@ 0x96
 80087c8:	f001 f920 	bl	8009a0c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80087cc:	2102      	movs	r1, #2
 80087ce:	4843      	ldr	r0, [pc, #268]	@ (80088dc <takeWifiPass+0x2ac>)
 80087d0:	f001 feec 	bl	800a5ac <HAL_GPIO_ReadPin>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d12f      	bne.n	800883a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	b2d9      	uxtb	r1, r3
 80087de:	4a41      	ldr	r2, [pc, #260]	@ (80088e4 <takeWifiPass+0x2b4>)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	460a      	mov	r2, r1
 80087e6:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80087e8:	4a3f      	ldr	r2, [pc, #252]	@ (80088e8 <takeWifiPass+0x2b8>)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	7819      	ldrb	r1, [r3, #0]
 80087f0:	4a38      	ldr	r2, [pc, #224]	@ (80088d4 <takeWifiPass+0x2a4>)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4413      	add	r3, r2
 80087f6:	460a      	mov	r2, r1
 80087f8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	b2d9      	uxtb	r1, r3
 80087fe:	4a3a      	ldr	r2, [pc, #232]	@ (80088e8 <takeWifiPass+0x2b8>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4413      	add	r3, r2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	2001      	movs	r0, #1
 800880a:	f000 fbba 	bl	8008f82 <lcd_print_char>

            writeLoc++;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3301      	adds	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	3301      	adds	r3, #1
 8008818:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3301      	adds	r3, #1
 800881e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008820:	4a30      	ldr	r2, [pc, #192]	@ (80088e4 <takeWifiPass+0x2b4>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800882a:	4a2a      	ldr	r2, [pc, #168]	@ (80088d4 <takeWifiPass+0x2a4>)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4413      	add	r3, r2
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008834:	2096      	movs	r0, #150	@ 0x96
 8008836:	f001 f8e9 	bl	8009a0c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800883a:	2104      	movs	r1, #4
 800883c:	4827      	ldr	r0, [pc, #156]	@ (80088dc <takeWifiPass+0x2ac>)
 800883e:	f001 feb5 	bl	800a5ac <HAL_GPIO_ReadPin>
 8008842:	4603      	mov	r3, r0
 8008844:	2b01      	cmp	r3, #1
 8008846:	d139      	bne.n	80088bc <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008848:	4b22      	ldr	r3, [pc, #136]	@ (80088d4 <takeWifiPass+0x2a4>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d032      	beq.n	80088b6 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008850:	4a24      	ldr	r2, [pc, #144]	@ (80088e4 <takeWifiPass+0x2b4>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4413      	add	r3, r2
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800885a:	4a1e      	ldr	r2, [pc, #120]	@ (80088d4 <takeWifiPass+0x2a4>)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4413      	add	r3, r2
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2b07      	cmp	r3, #7
 8008868:	dd03      	ble.n	8008872 <takeWifiPass+0x242>
        			writeLoc--;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3b01      	subs	r3, #1
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	e004      	b.n	800887c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b06      	cmp	r3, #6
 8008876:	dc01      	bgt.n	800887c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008878:	2307      	movs	r3, #7
 800887a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd06      	ble.n	8008890 <takeWifiPass+0x260>
        			arrayPosition--;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3b01      	subs	r3, #1
 8008886:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3b01      	subs	r3, #1
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	e007      	b.n	80088a0 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	da04      	bge.n	80088a0 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800889a:	4b0f      	ldr	r3, [pc, #60]	@ (80088d8 <takeWifiPass+0x2a8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	3307      	adds	r3, #7
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	4619      	mov	r1, r3
 80088aa:	2001      	movs	r0, #1
 80088ac:	f000 fb8a 	bl	8008fc4 <lcd_delete_char>
        		HAL_Delay(50);
 80088b0:	2032      	movs	r0, #50	@ 0x32
 80088b2:	f001 f8ab 	bl	8009a0c <HAL_Delay>
        	}

        	HAL_Delay(150);
 80088b6:	2096      	movs	r0, #150	@ 0x96
 80088b8:	f001 f8a8 	bl	8009a0c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	2002      	movs	r0, #2
 80088c4:	f000 fb29 	bl	8008f1a <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80088c8:	e6cc      	b.n	8008664 <takeWifiPass+0x34>
    	        break;
 80088ca:	bf00      	nop
    }
}
 80088cc:	bf00      	nop
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20001080 	.word	0x20001080
 80088d8:	20000008 	.word	0x20000008
 80088dc:	40010800 	.word	0x40010800
 80088e0:	40011000 	.word	0x40011000
 80088e4:	20000fec 	.word	0x20000fec
 80088e8:	20000018 	.word	0x20000018

080088ec <mergeData>:

char* mergeData() {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b09c      	sub	sp, #112	@ 0x70
 80088f0:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80088f2:	2300      	movs	r3, #0
 80088f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80088fa:	2229      	movs	r2, #41	@ 0x29
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f004 ff9a 	bl	800d838 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008904:	4b5f      	ldr	r3, [pc, #380]	@ (8008a84 <mergeData+0x198>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	703b      	strb	r3, [r7, #0]
 800890a:	4b5f      	ldr	r3, [pc, #380]	@ (8008a88 <mergeData+0x19c>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	707b      	strb	r3, [r7, #1]
 8008910:	4b5e      	ldr	r3, [pc, #376]	@ (8008a8c <mergeData+0x1a0>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	70bb      	strb	r3, [r7, #2]
 8008916:	4b5e      	ldr	r3, [pc, #376]	@ (8008a90 <mergeData+0x1a4>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	70fb      	strb	r3, [r7, #3]
 800891c:	4b5d      	ldr	r3, [pc, #372]	@ (8008a94 <mergeData+0x1a8>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	713b      	strb	r3, [r7, #4]
 8008922:	4b5d      	ldr	r3, [pc, #372]	@ (8008a98 <mergeData+0x1ac>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	717b      	strb	r3, [r7, #5]
 8008928:	4b5c      	ldr	r3, [pc, #368]	@ (8008a9c <mergeData+0x1b0>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	71bb      	strb	r3, [r7, #6]
 800892e:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <mergeData+0x1b4>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa4 <mergeData+0x1b8>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	723b      	strb	r3, [r7, #8]
 800893a:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa8 <mergeData+0x1bc>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	727b      	strb	r3, [r7, #9]
 8008940:	4b5a      	ldr	r3, [pc, #360]	@ (8008aac <mergeData+0x1c0>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	72bb      	strb	r3, [r7, #10]
 8008946:	4b5a      	ldr	r3, [pc, #360]	@ (8008ab0 <mergeData+0x1c4>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	72fb      	strb	r3, [r7, #11]
 800894c:	4b59      	ldr	r3, [pc, #356]	@ (8008ab4 <mergeData+0x1c8>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	733b      	strb	r3, [r7, #12]
 8008952:	4b59      	ldr	r3, [pc, #356]	@ (8008ab8 <mergeData+0x1cc>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	737b      	strb	r3, [r7, #13]
 8008958:	4b58      	ldr	r3, [pc, #352]	@ (8008abc <mergeData+0x1d0>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	73bb      	strb	r3, [r7, #14]
 800895e:	4b58      	ldr	r3, [pc, #352]	@ (8008ac0 <mergeData+0x1d4>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	73fb      	strb	r3, [r7, #15]
 8008964:	4b57      	ldr	r3, [pc, #348]	@ (8008ac4 <mergeData+0x1d8>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	743b      	strb	r3, [r7, #16]
 800896a:	4b57      	ldr	r3, [pc, #348]	@ (8008ac8 <mergeData+0x1dc>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	747b      	strb	r3, [r7, #17]
 8008970:	4b56      	ldr	r3, [pc, #344]	@ (8008acc <mergeData+0x1e0>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	74bb      	strb	r3, [r7, #18]
 8008976:	4b56      	ldr	r3, [pc, #344]	@ (8008ad0 <mergeData+0x1e4>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	74fb      	strb	r3, [r7, #19]
 800897c:	4b55      	ldr	r3, [pc, #340]	@ (8008ad4 <mergeData+0x1e8>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	753b      	strb	r3, [r7, #20]
 8008982:	4b55      	ldr	r3, [pc, #340]	@ (8008ad8 <mergeData+0x1ec>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	757b      	strb	r3, [r7, #21]
 8008988:	4b54      	ldr	r3, [pc, #336]	@ (8008adc <mergeData+0x1f0>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	75bb      	strb	r3, [r7, #22]
 800898e:	4b54      	ldr	r3, [pc, #336]	@ (8008ae0 <mergeData+0x1f4>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	75fb      	strb	r3, [r7, #23]
 8008994:	4b53      	ldr	r3, [pc, #332]	@ (8008ae4 <mergeData+0x1f8>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	763b      	strb	r3, [r7, #24]
 800899a:	4b53      	ldr	r3, [pc, #332]	@ (8008ae8 <mergeData+0x1fc>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	767b      	strb	r3, [r7, #25]
 80089a0:	4b52      	ldr	r3, [pc, #328]	@ (8008aec <mergeData+0x200>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	76bb      	strb	r3, [r7, #26]
 80089a6:	4b52      	ldr	r3, [pc, #328]	@ (8008af0 <mergeData+0x204>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	76fb      	strb	r3, [r7, #27]
 80089ac:	4b51      	ldr	r3, [pc, #324]	@ (8008af4 <mergeData+0x208>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	773b      	strb	r3, [r7, #28]
 80089b2:	4b51      	ldr	r3, [pc, #324]	@ (8008af8 <mergeData+0x20c>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 80089b8:	4b50      	ldr	r3, [pc, #320]	@ (8008afc <mergeData+0x210>)
 80089ba:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80089be:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 80089c0:	4b4e      	ldr	r3, [pc, #312]	@ (8008afc <mergeData+0x210>)
 80089c2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80089c6:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 80089c8:	4b4c      	ldr	r3, [pc, #304]	@ (8008afc <mergeData+0x210>)
 80089ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80089ce:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 80089d2:	4b4a      	ldr	r3, [pc, #296]	@ (8008afc <mergeData+0x210>)
 80089d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80089d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 80089dc:	4b47      	ldr	r3, [pc, #284]	@ (8008afc <mergeData+0x210>)
 80089de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80089e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 80089e6:	4b45      	ldr	r3, [pc, #276]	@ (8008afc <mergeData+0x210>)
 80089e8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80089ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 80089f0:	4b42      	ldr	r3, [pc, #264]	@ (8008afc <mergeData+0x210>)
 80089f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80089f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 80089fa:	4b40      	ldr	r3, [pc, #256]	@ (8008afc <mergeData+0x210>)
 80089fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008a00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008a04:	4b3d      	ldr	r3, [pc, #244]	@ (8008afc <mergeData+0x210>)
 8008a06:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008a0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008afc <mergeData+0x210>)
 8008a10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a18:	233c      	movs	r3, #60	@ 0x3c
 8008a1a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a1e:	2300      	movs	r3, #0
 8008a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a22:	e015      	b.n	8008a50 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008a24:	463a      	mov	r2, r7
 8008a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a28:	4413      	add	r3, r2
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a32:	4933      	ldr	r1, [pc, #204]	@ (8008b00 <mergeData+0x214>)
 8008a34:	4618      	mov	r0, r3
 8008a36:	f004 fedf 	bl	800d7f8 <siprintf>
	    strcat(combinedString, temp);
 8008a3a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008a3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f004 feff 	bl	800d848 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a52:	2b28      	cmp	r3, #40	@ 0x28
 8008a54:	d9e6      	bls.n	8008a24 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008a56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fbe2 	bl	8000224 <strlen>
 8008a60:	4603      	mov	r3, r0
 8008a62:	3301      	adds	r3, #1
 8008a64:	4618      	mov	r0, r3
 8008a66:	f004 fdcf 	bl	800d608 <malloc>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008a6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a72:	4619      	mov	r1, r3
 8008a74:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008a76:	f004 ff45 	bl	800d904 <strcpy>
	return result;
 8008a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3770      	adds	r7, #112	@ 0x70
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200010cb 	.word	0x200010cb
 8008a88:	200010bd 	.word	0x200010bd
 8008a8c:	200010c0 	.word	0x200010c0
 8008a90:	200010c1 	.word	0x200010c1
 8008a94:	200010c2 	.word	0x200010c2
 8008a98:	200010c9 	.word	0x200010c9
 8008a9c:	200010c3 	.word	0x200010c3
 8008aa0:	200010c4 	.word	0x200010c4
 8008aa4:	200010c8 	.word	0x200010c8
 8008aa8:	200010c5 	.word	0x200010c5
 8008aac:	200010d5 	.word	0x200010d5
 8008ab0:	200010c6 	.word	0x200010c6
 8008ab4:	200010d6 	.word	0x200010d6
 8008ab8:	200010c7 	.word	0x200010c7
 8008abc:	200010d7 	.word	0x200010d7
 8008ac0:	200010ca 	.word	0x200010ca
 8008ac4:	200010cc 	.word	0x200010cc
 8008ac8:	200010cd 	.word	0x200010cd
 8008acc:	200010ce 	.word	0x200010ce
 8008ad0:	200010cf 	.word	0x200010cf
 8008ad4:	200010d0 	.word	0x200010d0
 8008ad8:	200010d1 	.word	0x200010d1
 8008adc:	200010d2 	.word	0x200010d2
 8008ae0:	200010d3 	.word	0x200010d3
 8008ae4:	200010d4 	.word	0x200010d4
 8008ae8:	200010d8 	.word	0x200010d8
 8008aec:	200010da 	.word	0x200010da
 8008af0:	200010b4 	.word	0x200010b4
 8008af4:	200010b5 	.word	0x200010b5
 8008af8:	200010dc 	.word	0x200010dc
 8008afc:	20000fec 	.word	0x20000fec
 8008b00:	0800eb4c 	.word	0x0800eb4c

08008b04 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008b0a:	4a13      	ldr	r2, [pc, #76]	@ (8008b58 <convertAndSendData+0x54>)
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	2001      	movs	r0, #1
 8008b10:	f000 fa22 	bl	8008f58 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <convertAndSendData+0x58>)
 8008b16:	2101      	movs	r1, #1
 8008b18:	2002      	movs	r0, #2
 8008b1a:	f000 fa1d 	bl	8008f58 <lcd_print>

	for(int i=0; i<2; i++) {
 8008b1e:	2300      	movs	r3, #0
 8008b20:	607b      	str	r3, [r7, #4]
 8008b22:	e00c      	b.n	8008b3e <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008b24:	f7ff fee2 	bl	80088ec <mergeData>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b60 <convertAndSendData+0x5c>)
 8008b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b64 <convertAndSendData+0x60>)
 8008b30:	490d      	ldr	r1, [pc, #52]	@ (8008b68 <convertAndSendData+0x64>)
 8008b32:	480e      	ldr	r0, [pc, #56]	@ (8008b6c <convertAndSendData+0x68>)
 8008b34:	f7f7 ffec 	bl	8000b10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	ddef      	ble.n	8008b24 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008b44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b48:	f000 ff60 	bl	8009a0c <HAL_Delay>
	lcd_clear();
 8008b4c:	f000 fa30 	bl	8008fb0 <lcd_clear>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20001798 	.word	0x20001798
 8008b5c:	200017ac 	.word	0x200017ac
 8008b60:	20001080 	.word	0x20001080
 8008b64:	20001070 	.word	0x20001070
 8008b68:	20001064 	.word	0x20001064
 8008b6c:	200019d8 	.word	0x200019d8

08008b70 <iotSetup>:

void iotSetup() {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008b74:	4b13      	ldr	r3, [pc, #76]	@ (8008bc4 <iotSetup+0x54>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d021      	beq.n	8008bc0 <iotSetup+0x50>
				HAL_Delay(200);
				goto takeIDSection;
			}
		}*/

		if(checkEEPROM4ID() != 1) {
 8008b7c:	f000 f82e 	bl	8008bdc <checkEEPROM4ID>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d001      	beq.n	8008b8a <iotSetup+0x1a>
			takeMachineID();
 8008b86:	f7ff f9e7 	bl	8007f58 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008b8a:	480f      	ldr	r0, [pc, #60]	@ (8008bc8 <iotSetup+0x58>)
 8008b8c:	f7f7 fb4a 	bl	8000224 <strlen>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d801      	bhi.n	8008b9a <iotSetup+0x2a>
			takeWifiSSID();
 8008b96:	f7ff fb9f 	bl	80082d8 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008b9a:	480c      	ldr	r0, [pc, #48]	@ (8008bcc <iotSetup+0x5c>)
 8008b9c:	f7f7 fb42 	bl	8000224 <strlen>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d801      	bhi.n	8008baa <iotSetup+0x3a>
			takeWifiPass();
 8008ba6:	f7ff fd43 	bl	8008630 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008baa:	4a09      	ldr	r2, [pc, #36]	@ (8008bd0 <iotSetup+0x60>)
 8008bac:	4909      	ldr	r1, [pc, #36]	@ (8008bd4 <iotSetup+0x64>)
 8008bae:	480a      	ldr	r0, [pc, #40]	@ (8008bd8 <iotSetup+0x68>)
 8008bb0:	f7f7 ff04 	bl	80009bc <ESP8266_Init>
		HAL_Delay(500);
 8008bb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bb8:	f000 ff28 	bl	8009a0c <HAL_Delay>
		convertAndSendData();
 8008bbc:	f7ff ffa2 	bl	8008b04 <convertAndSendData>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200010e7 	.word	0x200010e7
 8008bc8:	20001070 	.word	0x20001070
 8008bcc:	20001080 	.word	0x20001080
 8008bd0:	0800eb50 	.word	0x0800eb50
 8008bd4:	0800eb68 	.word	0x0800eb68
 8008bd8:	200019d8 	.word	0x200019d8

08008bdc <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008be2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c20 <checkEEPROM4ID+0x44>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008be8:	2301      	movs	r3, #1
 8008bea:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008bec:	2300      	movs	r3, #0
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	e00d      	b.n	8008c0e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c24 <checkEEPROM4ID+0x48>)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b0b      	cmp	r3, #11
 8008c12:	ddee      	ble.n	8008bf2 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008c14:	68bb      	ldr	r3, [r7, #8]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr
 8008c20:	20000000 	.word	0x20000000
 8008c24:	20000fec 	.word	0x20000fec

08008c28 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	4603      	mov	r3, r0
 8008c30:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	f023 030f 	bic.w	r3, r3, #15
 8008c38:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008c40:	7b7b      	ldrb	r3, [r7, #13]
 8008c42:	f043 030c 	orr.w	r3, r3, #12
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008c4a:	7b7b      	ldrb	r3, [r7, #13]
 8008c4c:	f043 0308 	orr.w	r3, r3, #8
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008c54:	7b3b      	ldrb	r3, [r7, #12]
 8008c56:	f043 030c 	orr.w	r3, r3, #12
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008c5e:	7b3b      	ldrb	r3, [r7, #12]
 8008c60:	f043 0308 	orr.w	r3, r3, #8
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008c68:	bf00      	nop
 8008c6a:	4825      	ldr	r0, [pc, #148]	@ (8008d00 <lcd_send_cmd+0xd8>)
 8008c6c:	f002 fac7 	bl	800b1fe <HAL_I2C_GetError>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d0f9      	beq.n	8008c6a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008c76:	bf00      	nop
 8008c78:	4821      	ldr	r0, [pc, #132]	@ (8008d00 <lcd_send_cmd+0xd8>)
 8008c7a:	f002 fab3 	bl	800b1e4 <HAL_I2C_GetState>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d1f9      	bne.n	8008c78 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008c84:	4b1f      	ldr	r3, [pc, #124]	@ (8008d04 <lcd_send_cmd+0xdc>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d116      	bne.n	8008cba <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	e00f      	b.n	8008cb2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	3310      	adds	r3, #16
 8008c96:	443b      	add	r3, r7
 8008c98:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	f022 0208 	bic.w	r2, r2, #8
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	3310      	adds	r3, #16
 8008ca6:	443b      	add	r3, r7
 8008ca8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d9ec      	bls.n	8008c92 <lcd_send_cmd+0x6a>
 8008cb8:	e015      	b.n	8008ce6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73bb      	strb	r3, [r7, #14]
 8008cbe:	e00f      	b.n	8008ce0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	3310      	adds	r3, #16
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	f042 0208 	orr.w	r2, r2, #8
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	3310      	adds	r3, #16
 8008cd4:	443b      	add	r3, r7
 8008cd6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	73bb      	strb	r3, [r7, #14]
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d9ec      	bls.n	8008cc0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008ce6:	f107 0208 	add.w	r2, r7, #8
 8008cea:	2364      	movs	r3, #100	@ 0x64
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2304      	movs	r3, #4
 8008cf0:	214e      	movs	r1, #78	@ 0x4e
 8008cf2:	4803      	ldr	r0, [pc, #12]	@ (8008d00 <lcd_send_cmd+0xd8>)
 8008cf4:	f001 fe16 	bl	800a924 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	2000193c 	.word	0x2000193c
 8008d04:	20001911 	.word	0x20001911

08008d08 <lcd_send_data>:

void lcd_send_data (char data) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	4603      	mov	r3, r0
 8008d10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	f023 030f 	bic.w	r3, r3, #15
 8008d18:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008d20:	7b7b      	ldrb	r3, [r7, #13]
 8008d22:	f043 030d 	orr.w	r3, r3, #13
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008d2a:	7b7b      	ldrb	r3, [r7, #13]
 8008d2c:	f043 0309 	orr.w	r3, r3, #9
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008d34:	7b3b      	ldrb	r3, [r7, #12]
 8008d36:	f043 030d 	orr.w	r3, r3, #13
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008d3e:	7b3b      	ldrb	r3, [r7, #12]
 8008d40:	f043 0309 	orr.w	r3, r3, #9
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008d48:	bf00      	nop
 8008d4a:	4825      	ldr	r0, [pc, #148]	@ (8008de0 <lcd_send_data+0xd8>)
 8008d4c:	f002 fa57 	bl	800b1fe <HAL_I2C_GetError>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d0f9      	beq.n	8008d4a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008d56:	bf00      	nop
 8008d58:	4821      	ldr	r0, [pc, #132]	@ (8008de0 <lcd_send_data+0xd8>)
 8008d5a:	f002 fa43 	bl	800b1e4 <HAL_I2C_GetState>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d1f9      	bne.n	8008d58 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008d64:	4b1f      	ldr	r3, [pc, #124]	@ (8008de4 <lcd_send_data+0xdc>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d116      	bne.n	8008d9a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e00f      	b.n	8008d92 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	3310      	adds	r3, #16
 8008d76:	443b      	add	r3, r7
 8008d78:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	f022 0208 	bic.w	r2, r2, #8
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	3310      	adds	r3, #16
 8008d86:	443b      	add	r3, r7
 8008d88:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d9ec      	bls.n	8008d72 <lcd_send_data+0x6a>
 8008d98:	e015      	b.n	8008dc6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73bb      	strb	r3, [r7, #14]
 8008d9e:	e00f      	b.n	8008dc0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	3310      	adds	r3, #16
 8008da4:	443b      	add	r3, r7
 8008da6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	f042 0208 	orr.w	r2, r2, #8
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	3310      	adds	r3, #16
 8008db4:	443b      	add	r3, r7
 8008db6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	73bb      	strb	r3, [r7, #14]
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d9ec      	bls.n	8008da0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	2364      	movs	r3, #100	@ 0x64
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2304      	movs	r3, #4
 8008dd0:	214e      	movs	r1, #78	@ 0x4e
 8008dd2:	4803      	ldr	r0, [pc, #12]	@ (8008de0 <lcd_send_data+0xd8>)
 8008dd4:	f001 fda6 	bl	800a924 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	2000193c 	.word	0x2000193c
 8008de4:	20001911 	.word	0x20001911

08008de8 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008df0:	e006      	b.n	8008e00 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff ff84 	bl	8008d08 <lcd_send_data>
	while (*str) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f4      	bne.n	8008df2 <lcd_send_string+0xa>
	}
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	f023 030f 	bic.w	r3, r3, #15
 8008e24:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008e2c:	7b7b      	ldrb	r3, [r7, #13]
 8008e2e:	f043 030d 	orr.w	r3, r3, #13
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008e36:	7b7b      	ldrb	r3, [r7, #13]
 8008e38:	f043 0309 	orr.w	r3, r3, #9
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008e40:	7b3b      	ldrb	r3, [r7, #12]
 8008e42:	f043 030d 	orr.w	r3, r3, #13
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008e4a:	7b3b      	ldrb	r3, [r7, #12]
 8008e4c:	f043 0309 	orr.w	r3, r3, #9
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e54:	bf00      	nop
 8008e56:	4825      	ldr	r0, [pc, #148]	@ (8008eec <lcd_send_char+0xd8>)
 8008e58:	f002 f9d1 	bl	800b1fe <HAL_I2C_GetError>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d0f9      	beq.n	8008e56 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e62:	bf00      	nop
 8008e64:	4821      	ldr	r0, [pc, #132]	@ (8008eec <lcd_send_char+0xd8>)
 8008e66:	f002 f9bd 	bl	800b1e4 <HAL_I2C_GetState>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d1f9      	bne.n	8008e64 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008e70:	4b1f      	ldr	r3, [pc, #124]	@ (8008ef0 <lcd_send_char+0xdc>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d116      	bne.n	8008ea6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
 8008e7c:	e00f      	b.n	8008e9e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	3310      	adds	r3, #16
 8008e82:	443b      	add	r3, r7
 8008e84:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	f022 0208 	bic.w	r2, r2, #8
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	3310      	adds	r3, #16
 8008e92:	443b      	add	r3, r7
 8008e94:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	73fb      	strb	r3, [r7, #15]
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d9ec      	bls.n	8008e7e <lcd_send_char+0x6a>
 8008ea4:	e015      	b.n	8008ed2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73bb      	strb	r3, [r7, #14]
 8008eaa:	e00f      	b.n	8008ecc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	3310      	adds	r3, #16
 8008eb0:	443b      	add	r3, r7
 8008eb2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	f042 0208 	orr.w	r2, r2, #8
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	3310      	adds	r3, #16
 8008ec0:	443b      	add	r3, r7
 8008ec2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	73bb      	strb	r3, [r7, #14]
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d9ec      	bls.n	8008eac <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008ed2:	f107 0208 	add.w	r2, r7, #8
 8008ed6:	2364      	movs	r3, #100	@ 0x64
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	2304      	movs	r3, #4
 8008edc:	214e      	movs	r1, #78	@ 0x4e
 8008ede:	4803      	ldr	r0, [pc, #12]	@ (8008eec <lcd_send_char+0xd8>)
 8008ee0:	f001 fd20 	bl	800a924 <HAL_I2C_Master_Transmit>
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000193c 	.word	0x2000193c
 8008ef0:	20001911 	.word	0x20001911

08008ef4 <lcd_init>:

void lcd_init (void) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008ef8:	2002      	movs	r0, #2
 8008efa:	f7ff fe95 	bl	8008c28 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008efe:	2028      	movs	r0, #40	@ 0x28
 8008f00:	f7ff fe92 	bl	8008c28 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008f04:	200c      	movs	r0, #12
 8008f06:	f7ff fe8f 	bl	8008c28 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008f0a:	2080      	movs	r0, #128	@ 0x80
 8008f0c:	f7ff fe8c 	bl	8008c28 <lcd_send_cmd>
	lcd_backlight(1);
 8008f10:	2001      	movs	r0, #1
 8008f12:	f000 f86d 	bl	8008ff0 <lcd_backlight>
}
 8008f16:	bf00      	nop
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	4603      	mov	r3, r0
 8008f22:	460a      	mov	r2, r1
 8008f24:	71fb      	strb	r3, [r7, #7]
 8008f26:	4613      	mov	r3, r2
 8008f28:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d106      	bne.n	8008f3e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008f30:	79bb      	ldrb	r3, [r7, #6]
 8008f32:	337f      	adds	r3, #127	@ 0x7f
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fe76 	bl	8008c28 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008f3c:	e008      	b.n	8008f50 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d105      	bne.n	8008f50 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008f44:	79bb      	ldrb	r3, [r7, #6]
 8008f46:	3b41      	subs	r3, #65	@ 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fe6c 	bl	8008c28 <lcd_send_cmd>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	603a      	str	r2, [r7, #0]
 8008f62:	71fb      	strb	r3, [r7, #7]
 8008f64:	460b      	mov	r3, r1
 8008f66:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008f68:	79ba      	ldrb	r2, [r7, #6]
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff ffd3 	bl	8008f1a <lcd_gotoxy>
	lcd_send_string(str);
 8008f74:	6838      	ldr	r0, [r7, #0]
 8008f76:	f7ff ff37 	bl	8008de8 <lcd_send_string>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	4603      	mov	r3, r0
 8008f8a:	71fb      	strb	r3, [r7, #7]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	71bb      	strb	r3, [r7, #6]
 8008f90:	4613      	mov	r3, r2
 8008f92:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008f94:	79ba      	ldrb	r2, [r7, #6]
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff ffbd 	bl	8008f1a <lcd_gotoxy>
    lcd_send_char(ch);
 8008fa0:	797b      	ldrb	r3, [r7, #5]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff ff36 	bl	8008e14 <lcd_send_char>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <lcd_clear>:

void lcd_clear(void) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7ff fe37 	bl	8008c28 <lcd_send_cmd>
    HAL_Delay(2);
 8008fba:	2002      	movs	r0, #2
 8008fbc:	f000 fd26 	bl	8009a0c <HAL_Delay>
}
 8008fc0:	bf00      	nop
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	460a      	mov	r2, r1
 8008fce:	71fb      	strb	r3, [r7, #7]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008fd4:	79ba      	ldrb	r2, [r7, #6]
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff ff9d 	bl	8008f1a <lcd_gotoxy>

    lcd_send_char(' ');
 8008fe0:	2020      	movs	r0, #32
 8008fe2:	f7ff ff17 	bl	8008e14 <lcd_send_char>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008ffa:	4a05      	ldr	r2, [pc, #20]	@ (8009010 <lcd_backlight+0x20>)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009000:	2000      	movs	r0, #0
 8009002:	f7ff fe11 	bl	8008c28 <lcd_send_cmd>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20001911 	.word	0x20001911

08009014 <lcd_cursor>:

void lcd_cursor(int state) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d106      	bne.n	8009030 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009022:	200e      	movs	r0, #14
 8009024:	f7ff fe00 	bl	8008c28 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009028:	200f      	movs	r0, #15
 800902a:	f7ff fdfd 	bl	8008c28 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800902e:	e002      	b.n	8009036 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009030:	200c      	movs	r0, #12
 8009032:	f7ff fdf9 	bl	8008c28 <lcd_send_cmd>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009048:	4b04      	ldr	r3, [pc, #16]	@ (800905c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	4a03      	ldr	r2, [pc, #12]	@ (800905c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009050:	6013      	str	r3, [r2, #0]
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	20001094 	.word	0x20001094

08009060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009064:	f000 fc70 	bl	8009948 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009068:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800906c:	f000 fcce 	bl	8009a0c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009070:	f000 f89c 	bl	80091ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009074:	f000 f9be 	bl	80093f4 <MX_GPIO_Init>
  MX_CAN_Init();
 8009078:	f000 f8de 	bl	8009238 <MX_CAN_Init>
  MX_I2C1_Init();
 800907c:	f000 f910 	bl	80092a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009080:	f000 f93c 	bl	80092fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009084:	f000 f98c 	bl	80093a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009088:	2201      	movs	r2, #1
 800908a:	2140      	movs	r1, #64	@ 0x40
 800908c:	483e      	ldr	r0, [pc, #248]	@ (8009188 <main+0x128>)
 800908e:	f001 faa4 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009092:	2201      	movs	r2, #1
 8009094:	2180      	movs	r1, #128	@ 0x80
 8009096:	483c      	ldr	r0, [pc, #240]	@ (8009188 <main+0x128>)
 8009098:	f001 fa9f 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800909c:	200a      	movs	r0, #10
 800909e:	f000 fcb5 	bl	8009a0c <HAL_Delay>
  lcd_init();
 80090a2:	f7ff ff27 	bl	8008ef4 <lcd_init>
  HAL_Delay(10);
 80090a6:	200a      	movs	r0, #10
 80090a8:	f000 fcb0 	bl	8009a0c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80090ac:	4837      	ldr	r0, [pc, #220]	@ (800918c <main+0x12c>)
 80090ae:	f003 f947 	bl	800c340 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80090b2:	bf00      	nop
 80090b4:	4836      	ldr	r0, [pc, #216]	@ (8009190 <main+0x130>)
 80090b6:	f002 f8a2 	bl	800b1fe <HAL_I2C_GetError>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d0f9      	beq.n	80090b4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80090c0:	bf00      	nop
 80090c2:	4833      	ldr	r0, [pc, #204]	@ (8009190 <main+0x130>)
 80090c4:	f002 f88e 	bl	800b1e4 <HAL_I2C_GetState>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	d1f9      	bne.n	80090c2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80090ce:	2200      	movs	r2, #0
 80090d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80090d4:	482c      	ldr	r0, [pc, #176]	@ (8009188 <main+0x128>)
 80090d6:	f001 fa80 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80090da:	2200      	movs	r2, #0
 80090dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80090e0:	4829      	ldr	r0, [pc, #164]	@ (8009188 <main+0x128>)
 80090e2:	f001 fa7a 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2104      	movs	r1, #4
 80090ea:	4827      	ldr	r0, [pc, #156]	@ (8009188 <main+0x128>)
 80090ec:	f001 fa75 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80090f0:	2200      	movs	r2, #0
 80090f2:	2102      	movs	r1, #2
 80090f4:	4824      	ldr	r0, [pc, #144]	@ (8009188 <main+0x128>)
 80090f6:	f001 fa70 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2101      	movs	r1, #1
 80090fe:	4822      	ldr	r0, [pc, #136]	@ (8009188 <main+0x128>)
 8009100:	f001 fa6b 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009104:	2200      	movs	r2, #0
 8009106:	2120      	movs	r1, #32
 8009108:	4822      	ldr	r0, [pc, #136]	@ (8009194 <main+0x134>)
 800910a:	f001 fa66 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800910e:	2200      	movs	r2, #0
 8009110:	2110      	movs	r1, #16
 8009112:	4820      	ldr	r0, [pc, #128]	@ (8009194 <main+0x134>)
 8009114:	f001 fa61 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009118:	2200      	movs	r2, #0
 800911a:	2180      	movs	r1, #128	@ 0x80
 800911c:	481e      	ldr	r0, [pc, #120]	@ (8009198 <main+0x138>)
 800911e:	f001 fa5c 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009122:	2200      	movs	r2, #0
 8009124:	2140      	movs	r1, #64	@ 0x40
 8009126:	481c      	ldr	r0, [pc, #112]	@ (8009198 <main+0x138>)
 8009128:	f001 fa57 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800912c:	2200      	movs	r2, #0
 800912e:	2120      	movs	r1, #32
 8009130:	4819      	ldr	r0, [pc, #100]	@ (8009198 <main+0x138>)
 8009132:	f001 fa52 	bl	800a5da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009136:	2200      	movs	r2, #0
 8009138:	2110      	movs	r1, #16
 800913a:	4817      	ldr	r0, [pc, #92]	@ (8009198 <main+0x138>)
 800913c:	f001 fa4d 	bl	800a5da <HAL_GPIO_WritePin>

  i2cTest();
 8009140:	f7f7 ffa0 	bl	8001084 <i2cTest>
  HAL_Delay(100);
 8009144:	2064      	movs	r0, #100	@ 0x64
 8009146:	f000 fc61 	bl	8009a0c <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800914a:	4a14      	ldr	r2, [pc, #80]	@ (800919c <main+0x13c>)
 800914c:	2101      	movs	r1, #1
 800914e:	2001      	movs	r0, #1
 8009150:	f7ff ff02 	bl	8008f58 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009154:	4a12      	ldr	r2, [pc, #72]	@ (80091a0 <main+0x140>)
 8009156:	2101      	movs	r1, #1
 8009158:	2002      	movs	r0, #2
 800915a:	f7ff fefd 	bl	8008f58 <lcd_print>
  HAL_Delay(1000);
 800915e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009162:	f000 fc53 	bl	8009a0c <HAL_Delay>
  lcd_clear();
 8009166:	f7ff ff23 	bl	8008fb0 <lcd_clear>

  eepromKontrol();
 800916a:	f7f7 f863 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800916e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009172:	f000 fc4b 	bl	8009a0c <HAL_Delay>

  backLightTimer = millis;
 8009176:	4b0b      	ldr	r3, [pc, #44]	@ (80091a4 <main+0x144>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a0b      	ldr	r2, [pc, #44]	@ (80091a8 <main+0x148>)
 800917c:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800917e:	f7ff fcf7 	bl	8008b70 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009182:	f7fc fe6f 	bl	8005e64 <mainLoop>
 8009186:	e7fc      	b.n	8009182 <main+0x122>
 8009188:	40010c00 	.word	0x40010c00
 800918c:	20001990 	.word	0x20001990
 8009190:	2000193c 	.word	0x2000193c
 8009194:	40011000 	.word	0x40011000
 8009198:	40010800 	.word	0x40010800
 800919c:	2000009c 	.word	0x2000009c
 80091a0:	200000b0 	.word	0x200000b0
 80091a4:	20001094 	.word	0x20001094
 80091a8:	200010b0 	.word	0x200010b0

080091ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b090      	sub	sp, #64	@ 0x40
 80091b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091b2:	f107 0318 	add.w	r3, r7, #24
 80091b6:	2228      	movs	r2, #40	@ 0x28
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f004 fb3c 	bl	800d838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091c0:	1d3b      	adds	r3, r7, #4
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	605a      	str	r2, [r3, #4]
 80091c8:	609a      	str	r2, [r3, #8]
 80091ca:	60da      	str	r2, [r3, #12]
 80091cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80091d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80091d8:	2300      	movs	r3, #0
 80091da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091dc:	2301      	movs	r3, #1
 80091de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091e0:	2302      	movs	r3, #2
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80091e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80091ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091f0:	f107 0318 	add.w	r3, r7, #24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 fc43 	bl	800ba80 <HAL_RCC_OscConfig>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009200:	f000 f9a2 	bl	8009548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009204:	230f      	movs	r3, #15
 8009206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009208:	2302      	movs	r3, #2
 800920a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800921a:	1d3b      	adds	r3, r7, #4
 800921c:	2102      	movs	r1, #2
 800921e:	4618      	mov	r0, r3
 8009220:	f002 feb0 	bl	800bf84 <HAL_RCC_ClockConfig>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800922a:	f000 f98d 	bl	8009548 <Error_Handler>
  }
}
 800922e:	bf00      	nop
 8009230:	3740      	adds	r7, #64	@ 0x40
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800923c:	4b16      	ldr	r3, [pc, #88]	@ (8009298 <MX_CAN_Init+0x60>)
 800923e:	4a17      	ldr	r2, [pc, #92]	@ (800929c <MX_CAN_Init+0x64>)
 8009240:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009242:	4b15      	ldr	r3, [pc, #84]	@ (8009298 <MX_CAN_Init+0x60>)
 8009244:	2210      	movs	r2, #16
 8009246:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009248:	4b13      	ldr	r3, [pc, #76]	@ (8009298 <MX_CAN_Init+0x60>)
 800924a:	2200      	movs	r2, #0
 800924c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800924e:	4b12      	ldr	r3, [pc, #72]	@ (8009298 <MX_CAN_Init+0x60>)
 8009250:	2200      	movs	r2, #0
 8009252:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009254:	4b10      	ldr	r3, [pc, #64]	@ (8009298 <MX_CAN_Init+0x60>)
 8009256:	2200      	movs	r2, #0
 8009258:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800925a:	4b0f      	ldr	r3, [pc, #60]	@ (8009298 <MX_CAN_Init+0x60>)
 800925c:	2200      	movs	r2, #0
 800925e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009260:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <MX_CAN_Init+0x60>)
 8009262:	2200      	movs	r2, #0
 8009264:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009266:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <MX_CAN_Init+0x60>)
 8009268:	2200      	movs	r2, #0
 800926a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <MX_CAN_Init+0x60>)
 800926e:	2200      	movs	r2, #0
 8009270:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009272:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <MX_CAN_Init+0x60>)
 8009274:	2200      	movs	r2, #0
 8009276:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009278:	4b07      	ldr	r3, [pc, #28]	@ (8009298 <MX_CAN_Init+0x60>)
 800927a:	2200      	movs	r2, #0
 800927c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800927e:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <MX_CAN_Init+0x60>)
 8009280:	2200      	movs	r2, #0
 8009282:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009284:	4804      	ldr	r0, [pc, #16]	@ (8009298 <MX_CAN_Init+0x60>)
 8009286:	f000 fbe5 	bl	8009a54 <HAL_CAN_Init>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009290:	f000 f95a 	bl	8009548 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009294:	bf00      	nop
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20001914 	.word	0x20001914
 800929c:	40006400 	.word	0x40006400

080092a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80092a4:	4b12      	ldr	r3, [pc, #72]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092a6:	4a13      	ldr	r2, [pc, #76]	@ (80092f4 <MX_I2C1_Init+0x54>)
 80092a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80092aa:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092ac:	4a12      	ldr	r2, [pc, #72]	@ (80092f8 <MX_I2C1_Init+0x58>)
 80092ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80092b0:	4b0f      	ldr	r3, [pc, #60]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80092b6:	4b0e      	ldr	r3, [pc, #56]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80092bc:	4b0c      	ldr	r3, [pc, #48]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80092c4:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80092ca:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80092d0:	4b07      	ldr	r3, [pc, #28]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80092d6:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092d8:	2200      	movs	r2, #0
 80092da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80092dc:	4804      	ldr	r0, [pc, #16]	@ (80092f0 <MX_I2C1_Init+0x50>)
 80092de:	f001 f9ad 	bl	800a63c <HAL_I2C_Init>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80092e8:	f000 f92e 	bl	8009548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	2000193c 	.word	0x2000193c
 80092f4:	40005400 	.word	0x40005400
 80092f8:	00061a80 	.word	0x00061a80

080092fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	605a      	str	r2, [r3, #4]
 800930c:	609a      	str	r2, [r3, #8]
 800930e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009310:	463b      	mov	r3, r7
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009318:	4b1f      	ldr	r3, [pc, #124]	@ (8009398 <MX_TIM1_Init+0x9c>)
 800931a:	4a20      	ldr	r2, [pc, #128]	@ (800939c <MX_TIM1_Init+0xa0>)
 800931c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800931e:	4b1e      	ldr	r3, [pc, #120]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009320:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009326:	4b1c      	ldr	r3, [pc, #112]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009328:	2200      	movs	r2, #0
 800932a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800932c:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <MX_TIM1_Init+0x9c>)
 800932e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009334:	4b18      	ldr	r3, [pc, #96]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009336:	2200      	movs	r2, #0
 8009338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800933a:	4b17      	ldr	r3, [pc, #92]	@ (8009398 <MX_TIM1_Init+0x9c>)
 800933c:	2200      	movs	r2, #0
 800933e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009340:	4b15      	ldr	r3, [pc, #84]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009342:	2200      	movs	r2, #0
 8009344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009346:	4814      	ldr	r0, [pc, #80]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009348:	f002 ffaa 	bl	800c2a0 <HAL_TIM_Base_Init>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009352:	f000 f8f9 	bl	8009548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800935a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	4619      	mov	r1, r3
 8009362:	480d      	ldr	r0, [pc, #52]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009364:	f003 f954 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800936e:	f000 f8eb 	bl	8009548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009372:	2300      	movs	r3, #0
 8009374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800937a:	463b      	mov	r3, r7
 800937c:	4619      	mov	r1, r3
 800937e:	4806      	ldr	r0, [pc, #24]	@ (8009398 <MX_TIM1_Init+0x9c>)
 8009380:	f003 fb42 	bl	800ca08 <HAL_TIMEx_MasterConfigSynchronization>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800938a:	f000 f8dd 	bl	8009548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800938e:	bf00      	nop
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001990 	.word	0x20001990
 800939c:	40012c00 	.word	0x40012c00

080093a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80093a4:	4b11      	ldr	r3, [pc, #68]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093a6:	4a12      	ldr	r2, [pc, #72]	@ (80093f0 <MX_USART1_UART_Init+0x50>)
 80093a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80093aa:	4b10      	ldr	r3, [pc, #64]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80093b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80093b2:	4b0e      	ldr	r3, [pc, #56]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80093b8:	4b0c      	ldr	r3, [pc, #48]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80093be:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80093c4:	4b09      	ldr	r3, [pc, #36]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093c6:	220c      	movs	r2, #12
 80093c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093ca:	4b08      	ldr	r3, [pc, #32]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80093d0:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80093d6:	4805      	ldr	r0, [pc, #20]	@ (80093ec <MX_USART1_UART_Init+0x4c>)
 80093d8:	f003 fb94 	bl	800cb04 <HAL_UART_Init>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80093e2:	f000 f8b1 	bl	8009548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80093e6:	bf00      	nop
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	200019d8 	.word	0x200019d8
 80093f0:	40013800 	.word	0x40013800

080093f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093fa:	f107 0310 	add.w	r3, r7, #16
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	609a      	str	r2, [r3, #8]
 8009406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009408:	4b4b      	ldr	r3, [pc, #300]	@ (8009538 <MX_GPIO_Init+0x144>)
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	4a4a      	ldr	r2, [pc, #296]	@ (8009538 <MX_GPIO_Init+0x144>)
 800940e:	f043 0310 	orr.w	r3, r3, #16
 8009412:	6193      	str	r3, [r2, #24]
 8009414:	4b48      	ldr	r3, [pc, #288]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009420:	4b45      	ldr	r3, [pc, #276]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	4a44      	ldr	r2, [pc, #272]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009426:	f043 0320 	orr.w	r3, r3, #32
 800942a:	6193      	str	r3, [r2, #24]
 800942c:	4b42      	ldr	r3, [pc, #264]	@ (8009538 <MX_GPIO_Init+0x144>)
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009438:	4b3f      	ldr	r3, [pc, #252]	@ (8009538 <MX_GPIO_Init+0x144>)
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4a3e      	ldr	r2, [pc, #248]	@ (8009538 <MX_GPIO_Init+0x144>)
 800943e:	f043 0304 	orr.w	r3, r3, #4
 8009442:	6193      	str	r3, [r2, #24]
 8009444:	4b3c      	ldr	r3, [pc, #240]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009450:	4b39      	ldr	r3, [pc, #228]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	4a38      	ldr	r2, [pc, #224]	@ (8009538 <MX_GPIO_Init+0x144>)
 8009456:	f043 0308 	orr.w	r3, r3, #8
 800945a:	6193      	str	r3, [r2, #24]
 800945c:	4b36      	ldr	r3, [pc, #216]	@ (8009538 <MX_GPIO_Init+0x144>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	603b      	str	r3, [r7, #0]
 8009466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009468:	2200      	movs	r2, #0
 800946a:	21f0      	movs	r1, #240	@ 0xf0
 800946c:	4833      	ldr	r0, [pc, #204]	@ (800953c <MX_GPIO_Init+0x148>)
 800946e:	f001 f8b4 	bl	800a5da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009472:	2200      	movs	r2, #0
 8009474:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009478:	4831      	ldr	r0, [pc, #196]	@ (8009540 <MX_GPIO_Init+0x14c>)
 800947a:	f001 f8ae 	bl	800a5da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800947e:	2200      	movs	r2, #0
 8009480:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009484:	482f      	ldr	r0, [pc, #188]	@ (8009544 <MX_GPIO_Init+0x150>)
 8009486:	f001 f8a8 	bl	800a5da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800948a:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800948e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	4619      	mov	r1, r3
 800949e:	4828      	ldr	r0, [pc, #160]	@ (8009540 <MX_GPIO_Init+0x14c>)
 80094a0:	f000 fe24 	bl	800a0ec <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80094a4:	f248 130f 	movw	r3, #33039	@ 0x810f
 80094a8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b2:	f107 0310 	add.w	r3, r7, #16
 80094b6:	4619      	mov	r1, r3
 80094b8:	4820      	ldr	r0, [pc, #128]	@ (800953c <MX_GPIO_Init+0x148>)
 80094ba:	f000 fe17 	bl	800a0ec <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80094be:	23f0      	movs	r3, #240	@ 0xf0
 80094c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094c2:	2301      	movs	r3, #1
 80094c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ca:	2302      	movs	r3, #2
 80094cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ce:	f107 0310 	add.w	r3, r7, #16
 80094d2:	4619      	mov	r1, r3
 80094d4:	4819      	ldr	r0, [pc, #100]	@ (800953c <MX_GPIO_Init+0x148>)
 80094d6:	f000 fe09 	bl	800a0ec <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80094da:	f241 0330 	movw	r3, #4144	@ 0x1030
 80094de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094e0:	2301      	movs	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e8:	2302      	movs	r3, #2
 80094ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094ec:	f107 0310 	add.w	r3, r7, #16
 80094f0:	4619      	mov	r1, r3
 80094f2:	4813      	ldr	r0, [pc, #76]	@ (8009540 <MX_GPIO_Init+0x14c>)
 80094f4:	f000 fdfa 	bl	800a0ec <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80094f8:	f640 4307 	movw	r3, #3079	@ 0xc07
 80094fc:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094fe:	2301      	movs	r3, #1
 8009500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	2300      	movs	r3, #0
 8009504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009506:	2302      	movs	r3, #2
 8009508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800950a:	f107 0310 	add.w	r3, r7, #16
 800950e:	4619      	mov	r1, r3
 8009510:	480c      	ldr	r0, [pc, #48]	@ (8009544 <MX_GPIO_Init+0x150>)
 8009512:	f000 fdeb 	bl	800a0ec <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009516:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800951a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009520:	2300      	movs	r3, #0
 8009522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009524:	f107 0310 	add.w	r3, r7, #16
 8009528:	4619      	mov	r1, r3
 800952a:	4806      	ldr	r0, [pc, #24]	@ (8009544 <MX_GPIO_Init+0x150>)
 800952c:	f000 fdde 	bl	800a0ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009530:	bf00      	nop
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	40021000 	.word	0x40021000
 800953c:	40010800 	.word	0x40010800
 8009540:	40011000 	.word	0x40011000
 8009544:	40010c00 	.word	0x40010c00

08009548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800954c:	bf00      	nop
 800954e:	46bd      	mov	sp, r7
 8009550:	bc80      	pop	{r7}
 8009552:	4770      	bx	lr

08009554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800955a:	4b15      	ldr	r3, [pc, #84]	@ (80095b0 <HAL_MspInit+0x5c>)
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	4a14      	ldr	r2, [pc, #80]	@ (80095b0 <HAL_MspInit+0x5c>)
 8009560:	f043 0301 	orr.w	r3, r3, #1
 8009564:	6193      	str	r3, [r2, #24]
 8009566:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <HAL_MspInit+0x5c>)
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	60bb      	str	r3, [r7, #8]
 8009570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009572:	4b0f      	ldr	r3, [pc, #60]	@ (80095b0 <HAL_MspInit+0x5c>)
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	4a0e      	ldr	r2, [pc, #56]	@ (80095b0 <HAL_MspInit+0x5c>)
 8009578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800957c:	61d3      	str	r3, [r2, #28]
 800957e:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <HAL_MspInit+0x5c>)
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009586:	607b      	str	r3, [r7, #4]
 8009588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800958a:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <HAL_MspInit+0x60>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	4a04      	ldr	r2, [pc, #16]	@ (80095b4 <HAL_MspInit+0x60>)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr
 80095b0:	40021000 	.word	0x40021000
 80095b4:	40010000 	.word	0x40010000

080095b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095c0:	f107 0310 	add.w	r3, r7, #16
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009644 <HAL_CAN_MspInit+0x8c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d131      	bne.n	800963c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80095d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095e2:	61d3      	str	r3, [r2, #28]
 80095e4:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f0:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	4a14      	ldr	r2, [pc, #80]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095f6:	f043 0304 	orr.w	r3, r3, #4
 80095fa:	6193      	str	r3, [r2, #24]
 80095fc:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <HAL_CAN_MspInit+0x90>)
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	60bb      	str	r3, [r7, #8]
 8009606:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009608:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800960c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009612:	2300      	movs	r3, #0
 8009614:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009616:	f107 0310 	add.w	r3, r7, #16
 800961a:	4619      	mov	r1, r3
 800961c:	480b      	ldr	r0, [pc, #44]	@ (800964c <HAL_CAN_MspInit+0x94>)
 800961e:	f000 fd65 	bl	800a0ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009628:	2302      	movs	r3, #2
 800962a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800962c:	2303      	movs	r3, #3
 800962e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	4619      	mov	r1, r3
 8009636:	4805      	ldr	r0, [pc, #20]	@ (800964c <HAL_CAN_MspInit+0x94>)
 8009638:	f000 fd58 	bl	800a0ec <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800963c:	bf00      	nop
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40006400 	.word	0x40006400
 8009648:	40021000 	.word	0x40021000
 800964c:	40010800 	.word	0x40010800

08009650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009658:	f107 0310 	add.w	r3, r7, #16
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	605a      	str	r2, [r3, #4]
 8009662:	609a      	str	r2, [r3, #8]
 8009664:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a15      	ldr	r2, [pc, #84]	@ (80096c0 <HAL_I2C_MspInit+0x70>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d123      	bne.n	80096b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009670:	4b14      	ldr	r3, [pc, #80]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	4a13      	ldr	r2, [pc, #76]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 8009676:	f043 0308 	orr.w	r3, r3, #8
 800967a:	6193      	str	r3, [r2, #24]
 800967c:	4b11      	ldr	r3, [pc, #68]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009688:	23c0      	movs	r3, #192	@ 0xc0
 800968a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800968c:	2312      	movs	r3, #18
 800968e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009690:	2303      	movs	r3, #3
 8009692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009694:	f107 0310 	add.w	r3, r7, #16
 8009698:	4619      	mov	r1, r3
 800969a:	480b      	ldr	r0, [pc, #44]	@ (80096c8 <HAL_I2C_MspInit+0x78>)
 800969c:	f000 fd26 	bl	800a0ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80096a0:	4b08      	ldr	r3, [pc, #32]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	4a07      	ldr	r2, [pc, #28]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 80096a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096aa:	61d3      	str	r3, [r2, #28]
 80096ac:	4b05      	ldr	r3, [pc, #20]	@ (80096c4 <HAL_I2C_MspInit+0x74>)
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096b4:	60bb      	str	r3, [r7, #8]
 80096b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80096b8:	bf00      	nop
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	40005400 	.word	0x40005400
 80096c4:	40021000 	.word	0x40021000
 80096c8:	40010c00 	.word	0x40010c00

080096cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009704 <HAL_I2C_MspDeInit+0x38>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d10d      	bne.n	80096fa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80096de:	4b0a      	ldr	r3, [pc, #40]	@ (8009708 <HAL_I2C_MspDeInit+0x3c>)
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	4a09      	ldr	r2, [pc, #36]	@ (8009708 <HAL_I2C_MspDeInit+0x3c>)
 80096e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096e8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80096ea:	2140      	movs	r1, #64	@ 0x40
 80096ec:	4807      	ldr	r0, [pc, #28]	@ (800970c <HAL_I2C_MspDeInit+0x40>)
 80096ee:	f000 fe91 	bl	800a414 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80096f2:	2180      	movs	r1, #128	@ 0x80
 80096f4:	4805      	ldr	r0, [pc, #20]	@ (800970c <HAL_I2C_MspDeInit+0x40>)
 80096f6:	f000 fe8d 	bl	800a414 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40005400 	.word	0x40005400
 8009708:	40021000 	.word	0x40021000
 800970c:	40010c00 	.word	0x40010c00

08009710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a0d      	ldr	r2, [pc, #52]	@ (8009754 <HAL_TIM_Base_MspInit+0x44>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d113      	bne.n	800974a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <HAL_TIM_Base_MspInit+0x48>)
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	4a0c      	ldr	r2, [pc, #48]	@ (8009758 <HAL_TIM_Base_MspInit+0x48>)
 8009728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800972c:	6193      	str	r3, [r2, #24]
 800972e:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <HAL_TIM_Base_MspInit+0x48>)
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800973a:	2200      	movs	r2, #0
 800973c:	2100      	movs	r1, #0
 800973e:	2019      	movs	r0, #25
 8009740:	f000 fb5b 	bl	8009dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009744:	2019      	movs	r0, #25
 8009746:	f000 fb74 	bl	8009e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40012c00 	.word	0x40012c00
 8009758:	40021000 	.word	0x40021000

0800975c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a20      	ldr	r2, [pc, #128]	@ (80097f8 <HAL_UART_MspInit+0x9c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d139      	bne.n	80097f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800977c:	4b1f      	ldr	r3, [pc, #124]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	4a1e      	ldr	r2, [pc, #120]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 8009782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009786:	6193      	str	r3, [r2, #24]
 8009788:	4b1c      	ldr	r3, [pc, #112]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009794:	4b19      	ldr	r3, [pc, #100]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 800979a:	f043 0304 	orr.w	r3, r3, #4
 800979e:	6193      	str	r3, [r2, #24]
 80097a0:	4b16      	ldr	r3, [pc, #88]	@ (80097fc <HAL_UART_MspInit+0xa0>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80097ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097b2:	2302      	movs	r3, #2
 80097b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097b6:	2303      	movs	r3, #3
 80097b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	4619      	mov	r1, r3
 80097c0:	480f      	ldr	r0, [pc, #60]	@ (8009800 <HAL_UART_MspInit+0xa4>)
 80097c2:	f000 fc93 	bl	800a0ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80097c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d4:	f107 0310 	add.w	r3, r7, #16
 80097d8:	4619      	mov	r1, r3
 80097da:	4809      	ldr	r0, [pc, #36]	@ (8009800 <HAL_UART_MspInit+0xa4>)
 80097dc:	f000 fc86 	bl	800a0ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80097e0:	2200      	movs	r2, #0
 80097e2:	2100      	movs	r1, #0
 80097e4:	2025      	movs	r0, #37	@ 0x25
 80097e6:	f000 fb08 	bl	8009dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80097ea:	2025      	movs	r0, #37	@ 0x25
 80097ec:	f000 fb21 	bl	8009e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80097f0:	bf00      	nop
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40013800 	.word	0x40013800
 80097fc:	40021000 	.word	0x40021000
 8009800:	40010800 	.word	0x40010800

08009804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <NMI_Handler+0x4>

0800980c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009810:	bf00      	nop
 8009812:	e7fd      	b.n	8009810 <HardFault_Handler+0x4>

08009814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009818:	bf00      	nop
 800981a:	e7fd      	b.n	8009818 <MemManage_Handler+0x4>

0800981c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009820:	bf00      	nop
 8009822:	e7fd      	b.n	8009820 <BusFault_Handler+0x4>

08009824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <UsageFault_Handler+0x4>

0800982c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009830:	bf00      	nop
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800983c:	bf00      	nop
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr

08009844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009848:	bf00      	nop
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr

08009850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009854:	f000 f8be 	bl	80099d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}

0800985c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009860:	4802      	ldr	r0, [pc, #8]	@ (800986c <TIM1_UP_IRQHandler+0x10>)
 8009862:	f002 fdcd 	bl	800c400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009866:	bf00      	nop
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20001990 	.word	0x20001990

08009870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009874:	4802      	ldr	r0, [pc, #8]	@ (8009880 <USART1_IRQHandler+0x10>)
 8009876:	f003 f9cb 	bl	800cc10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800987a:	bf00      	nop
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	200019d8 	.word	0x200019d8

08009884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800988c:	4a14      	ldr	r2, [pc, #80]	@ (80098e0 <_sbrk+0x5c>)
 800988e:	4b15      	ldr	r3, [pc, #84]	@ (80098e4 <_sbrk+0x60>)
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009898:	4b13      	ldr	r3, [pc, #76]	@ (80098e8 <_sbrk+0x64>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80098a0:	4b11      	ldr	r3, [pc, #68]	@ (80098e8 <_sbrk+0x64>)
 80098a2:	4a12      	ldr	r2, [pc, #72]	@ (80098ec <_sbrk+0x68>)
 80098a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098a6:	4b10      	ldr	r3, [pc, #64]	@ (80098e8 <_sbrk+0x64>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d207      	bcs.n	80098c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098b4:	f003 fffa 	bl	800d8ac <__errno>
 80098b8:	4603      	mov	r3, r0
 80098ba:	220c      	movs	r2, #12
 80098bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295
 80098c2:	e009      	b.n	80098d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098c4:	4b08      	ldr	r3, [pc, #32]	@ (80098e8 <_sbrk+0x64>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098ca:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <_sbrk+0x64>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	4a05      	ldr	r2, [pc, #20]	@ (80098e8 <_sbrk+0x64>)
 80098d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	2000c000 	.word	0x2000c000
 80098e4:	00000400 	.word	0x00000400
 80098e8:	20001a20 	.word	0x20001a20
 80098ec:	20001b70 	.word	0x20001b70

080098f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80098f4:	bf00      	nop
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80098fc:	480c      	ldr	r0, [pc, #48]	@ (8009930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80098fe:	490d      	ldr	r1, [pc, #52]	@ (8009934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009900:	4a0d      	ldr	r2, [pc, #52]	@ (8009938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009904:	e002      	b.n	800990c <LoopCopyDataInit>

08009906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800990a:	3304      	adds	r3, #4

0800990c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800990c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800990e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009910:	d3f9      	bcc.n	8009906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009912:	4a0a      	ldr	r2, [pc, #40]	@ (800993c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009914:	4c0a      	ldr	r4, [pc, #40]	@ (8009940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009918:	e001      	b.n	800991e <LoopFillZerobss>

0800991a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800991a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800991c:	3204      	adds	r2, #4

0800991e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800991e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009920:	d3fb      	bcc.n	800991a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009922:	f7ff ffe5 	bl	80098f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009926:	f003 ffc7 	bl	800d8b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800992a:	f7ff fb99 	bl	8009060 <main>
  bx lr
 800992e:	4770      	bx	lr
  ldr r0, =_sdata
 8009930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009934:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009938:	0800ec04 	.word	0x0800ec04
  ldr r2, =_sbss
 800993c:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009940:	20001b70 	.word	0x20001b70

08009944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009944:	e7fe      	b.n	8009944 <ADC1_2_IRQHandler>
	...

08009948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800994c:	4b08      	ldr	r3, [pc, #32]	@ (8009970 <HAL_Init+0x28>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a07      	ldr	r2, [pc, #28]	@ (8009970 <HAL_Init+0x28>)
 8009952:	f043 0310 	orr.w	r3, r3, #16
 8009956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009958:	2003      	movs	r0, #3
 800995a:	f000 fa43 	bl	8009de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800995e:	200f      	movs	r0, #15
 8009960:	f000 f808 	bl	8009974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009964:	f7ff fdf6 	bl	8009554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	40022000 	.word	0x40022000

08009974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800997c:	4b12      	ldr	r3, [pc, #72]	@ (80099c8 <HAL_InitTick+0x54>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	4b12      	ldr	r3, [pc, #72]	@ (80099cc <HAL_InitTick+0x58>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800998a:	fbb3 f3f1 	udiv	r3, r3, r1
 800998e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fa5b 	bl	8009e4e <HAL_SYSTICK_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e00e      	b.n	80099c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d80a      	bhi.n	80099be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099a8:	2200      	movs	r2, #0
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	f000 fa23 	bl	8009dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80099b4:	4a06      	ldr	r2, [pc, #24]	@ (80099d0 <HAL_InitTick+0x5c>)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e000      	b.n	80099c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20000f74 	.word	0x20000f74
 80099cc:	20000f7c 	.word	0x20000f7c
 80099d0:	20000f78 	.word	0x20000f78

080099d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80099d8:	4b05      	ldr	r3, [pc, #20]	@ (80099f0 <HAL_IncTick+0x1c>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	4b05      	ldr	r3, [pc, #20]	@ (80099f4 <HAL_IncTick+0x20>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4413      	add	r3, r2
 80099e4:	4a03      	ldr	r2, [pc, #12]	@ (80099f4 <HAL_IncTick+0x20>)
 80099e6:	6013      	str	r3, [r2, #0]
}
 80099e8:	bf00      	nop
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bc80      	pop	{r7}
 80099ee:	4770      	bx	lr
 80099f0:	20000f7c 	.word	0x20000f7c
 80099f4:	20001a24 	.word	0x20001a24

080099f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80099f8:	b480      	push	{r7}
 80099fa:	af00      	add	r7, sp, #0
  return uwTick;
 80099fc:	4b02      	ldr	r3, [pc, #8]	@ (8009a08 <HAL_GetTick+0x10>)
 80099fe:	681b      	ldr	r3, [r3, #0]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bc80      	pop	{r7}
 8009a06:	4770      	bx	lr
 8009a08:	20001a24 	.word	0x20001a24

08009a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a14:	f7ff fff0 	bl	80099f8 <HAL_GetTick>
 8009a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d005      	beq.n	8009a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a26:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <HAL_Delay+0x44>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009a32:	bf00      	nop
 8009a34:	f7ff ffe0 	bl	80099f8 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d8f7      	bhi.n	8009a34 <HAL_Delay+0x28>
  {
  }
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000f7c 	.word	0x20000f7c

08009a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e0ed      	b.n	8009c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fda0 	bl	80095b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a88:	f7ff ffb6 	bl	80099f8 <HAL_GetTick>
 8009a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009a8e:	e012      	b.n	8009ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a90:	f7ff ffb2 	bl	80099f8 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b0a      	cmp	r3, #10
 8009a9c:	d90b      	bls.n	8009ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2205      	movs	r2, #5
 8009aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e0c5      	b.n	8009c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0e5      	beq.n	8009a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0202 	bic.w	r2, r2, #2
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ad4:	f7ff ff90 	bl	80099f8 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009ada:	e012      	b.n	8009b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009adc:	f7ff ff8c 	bl	80099f8 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b0a      	cmp	r3, #10
 8009ae8:	d90b      	bls.n	8009b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2205      	movs	r2, #5
 8009afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e09f      	b.n	8009c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e5      	bne.n	8009adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7e1b      	ldrb	r3, [r3, #24]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d108      	bne.n	8009b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e007      	b.n	8009b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	7e5b      	ldrb	r3, [r3, #25]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d108      	bne.n	8009b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e007      	b.n	8009b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	7e9b      	ldrb	r3, [r3, #26]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d108      	bne.n	8009b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0220 	orr.w	r2, r2, #32
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e007      	b.n	8009b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0220 	bic.w	r2, r2, #32
 8009b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7edb      	ldrb	r3, [r3, #27]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d108      	bne.n	8009ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0210 	bic.w	r2, r2, #16
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e007      	b.n	8009bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0210 	orr.w	r2, r2, #16
 8009bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	7f1b      	ldrb	r3, [r3, #28]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d108      	bne.n	8009bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0208 	orr.w	r2, r2, #8
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	e007      	b.n	8009be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0208 	bic.w	r2, r2, #8
 8009be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7f5b      	ldrb	r3, [r3, #29]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d108      	bne.n	8009bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0204 	orr.w	r2, r2, #4
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e007      	b.n	8009c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0204 	bic.w	r2, r2, #4
 8009c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	ea42 0103 	orr.w	r1, r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	1e5a      	subs	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <__NVIC_SetPriorityGrouping>:
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f003 0307 	and.w	r3, r3, #7
 8009c5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <__NVIC_SetPriorityGrouping+0x44>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009c68:	4013      	ands	r3, r2
 8009c6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c7e:	4a04      	ldr	r2, [pc, #16]	@ (8009c90 <__NVIC_SetPriorityGrouping+0x44>)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	60d3      	str	r3, [r2, #12]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000ed00 	.word	0xe000ed00

08009c94 <__NVIC_GetPriorityGrouping>:
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c98:	4b04      	ldr	r3, [pc, #16]	@ (8009cac <__NVIC_GetPriorityGrouping+0x18>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	0a1b      	lsrs	r3, r3, #8
 8009c9e:	f003 0307 	and.w	r3, r3, #7
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bc80      	pop	{r7}
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	e000ed00 	.word	0xe000ed00

08009cb0 <__NVIC_EnableIRQ>:
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db0b      	blt.n	8009cda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	f003 021f 	and.w	r2, r3, #31
 8009cc8:	4906      	ldr	r1, [pc, #24]	@ (8009ce4 <__NVIC_EnableIRQ+0x34>)
 8009cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8009cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009cda:	bf00      	nop
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr
 8009ce4:	e000e100 	.word	0xe000e100

08009ce8 <__NVIC_SetPriority>:
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	6039      	str	r1, [r7, #0]
 8009cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db0a      	blt.n	8009d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	490c      	ldr	r1, [pc, #48]	@ (8009d34 <__NVIC_SetPriority+0x4c>)
 8009d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d06:	0112      	lsls	r2, r2, #4
 8009d08:	b2d2      	uxtb	r2, r2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d10:	e00a      	b.n	8009d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	4908      	ldr	r1, [pc, #32]	@ (8009d38 <__NVIC_SetPriority+0x50>)
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	f003 030f 	and.w	r3, r3, #15
 8009d1e:	3b04      	subs	r3, #4
 8009d20:	0112      	lsls	r2, r2, #4
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	440b      	add	r3, r1
 8009d26:	761a      	strb	r2, [r3, #24]
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	e000e100 	.word	0xe000e100
 8009d38:	e000ed00 	.word	0xe000ed00

08009d3c <NVIC_EncodePriority>:
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b089      	sub	sp, #36	@ 0x24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f1c3 0307 	rsb	r3, r3, #7
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	bf28      	it	cs
 8009d5a:	2304      	movcs	r3, #4
 8009d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	3304      	adds	r3, #4
 8009d62:	2b06      	cmp	r3, #6
 8009d64:	d902      	bls.n	8009d6c <NVIC_EncodePriority+0x30>
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3b03      	subs	r3, #3
 8009d6a:	e000      	b.n	8009d6e <NVIC_EncodePriority+0x32>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	43da      	mvns	r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	401a      	ands	r2, r3
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d84:	f04f 31ff 	mov.w	r1, #4294967295
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8e:	43d9      	mvns	r1, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d94:	4313      	orrs	r3, r2
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3724      	adds	r7, #36	@ 0x24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bc80      	pop	{r7}
 8009d9e:	4770      	bx	lr

08009da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009db0:	d301      	bcc.n	8009db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009db2:	2301      	movs	r3, #1
 8009db4:	e00f      	b.n	8009dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009db6:	4a0a      	ldr	r2, [pc, #40]	@ (8009de0 <SysTick_Config+0x40>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009dbe:	210f      	movs	r1, #15
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	f7ff ff90 	bl	8009ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009dc8:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <SysTick_Config+0x40>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009dce:	4b04      	ldr	r3, [pc, #16]	@ (8009de0 <SysTick_Config+0x40>)
 8009dd0:	2207      	movs	r2, #7
 8009dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	e000e010 	.word	0xe000e010

08009de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff2d 	bl	8009c4c <__NVIC_SetPriorityGrouping>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b086      	sub	sp, #24
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	4603      	mov	r3, r0
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
 8009e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e0c:	f7ff ff42 	bl	8009c94 <__NVIC_GetPriorityGrouping>
 8009e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	6978      	ldr	r0, [r7, #20]
 8009e18:	f7ff ff90 	bl	8009d3c <NVIC_EncodePriority>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ff5f 	bl	8009ce8 <__NVIC_SetPriority>
}
 8009e2a:	bf00      	nop
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	4603      	mov	r3, r0
 8009e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff ff35 	bl	8009cb0 <__NVIC_EnableIRQ>
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff ffa2 	bl	8009da0 <SysTick_Config>
 8009e5c:	4603      	mov	r3, r0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d008      	beq.n	8009e90 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2204      	movs	r2, #4
 8009e82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e020      	b.n	8009ed2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 020e 	bic.w	r2, r2, #14
 8009e9e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0201 	bic.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb8:	2101      	movs	r1, #1
 8009eba:	fa01 f202 	lsl.w	r2, r1, r2
 8009ebe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d005      	beq.n	8009f00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	73fb      	strb	r3, [r7, #15]
 8009efe:	e0d6      	b.n	800a0ae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 020e 	bic.w	r2, r2, #14
 8009f0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0201 	bic.w	r2, r2, #1
 8009f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	4b64      	ldr	r3, [pc, #400]	@ (800a0b8 <HAL_DMA_Abort_IT+0x1dc>)
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d958      	bls.n	8009fde <HAL_DMA_Abort_IT+0x102>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a62      	ldr	r2, [pc, #392]	@ (800a0bc <HAL_DMA_Abort_IT+0x1e0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d04f      	beq.n	8009fd6 <HAL_DMA_Abort_IT+0xfa>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a61      	ldr	r2, [pc, #388]	@ (800a0c0 <HAL_DMA_Abort_IT+0x1e4>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d048      	beq.n	8009fd2 <HAL_DMA_Abort_IT+0xf6>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a5f      	ldr	r2, [pc, #380]	@ (800a0c4 <HAL_DMA_Abort_IT+0x1e8>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d040      	beq.n	8009fcc <HAL_DMA_Abort_IT+0xf0>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a5e      	ldr	r2, [pc, #376]	@ (800a0c8 <HAL_DMA_Abort_IT+0x1ec>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d038      	beq.n	8009fc6 <HAL_DMA_Abort_IT+0xea>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a5c      	ldr	r2, [pc, #368]	@ (800a0cc <HAL_DMA_Abort_IT+0x1f0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d030      	beq.n	8009fc0 <HAL_DMA_Abort_IT+0xe4>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a5b      	ldr	r2, [pc, #364]	@ (800a0d0 <HAL_DMA_Abort_IT+0x1f4>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d028      	beq.n	8009fba <HAL_DMA_Abort_IT+0xde>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a52      	ldr	r2, [pc, #328]	@ (800a0b8 <HAL_DMA_Abort_IT+0x1dc>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d020      	beq.n	8009fb4 <HAL_DMA_Abort_IT+0xd8>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a57      	ldr	r2, [pc, #348]	@ (800a0d4 <HAL_DMA_Abort_IT+0x1f8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d019      	beq.n	8009fb0 <HAL_DMA_Abort_IT+0xd4>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a55      	ldr	r2, [pc, #340]	@ (800a0d8 <HAL_DMA_Abort_IT+0x1fc>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d012      	beq.n	8009fac <HAL_DMA_Abort_IT+0xd0>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a54      	ldr	r2, [pc, #336]	@ (800a0dc <HAL_DMA_Abort_IT+0x200>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00a      	beq.n	8009fa6 <HAL_DMA_Abort_IT+0xca>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a52      	ldr	r2, [pc, #328]	@ (800a0e0 <HAL_DMA_Abort_IT+0x204>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d102      	bne.n	8009fa0 <HAL_DMA_Abort_IT+0xc4>
 8009f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f9e:	e01b      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fa4:	e018      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009faa:	e015      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fac:	2310      	movs	r3, #16
 8009fae:	e013      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e011      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fb8:	e00e      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fbe:	e00b      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fc4:	e008      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fca:	e005      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fd0:	e002      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	e000      	b.n	8009fd8 <HAL_DMA_Abort_IT+0xfc>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4a42      	ldr	r2, [pc, #264]	@ (800a0e4 <HAL_DMA_Abort_IT+0x208>)
 8009fda:	6053      	str	r3, [r2, #4]
 8009fdc:	e057      	b.n	800a08e <HAL_DMA_Abort_IT+0x1b2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a36      	ldr	r2, [pc, #216]	@ (800a0bc <HAL_DMA_Abort_IT+0x1e0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d04f      	beq.n	800a088 <HAL_DMA_Abort_IT+0x1ac>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a34      	ldr	r2, [pc, #208]	@ (800a0c0 <HAL_DMA_Abort_IT+0x1e4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d048      	beq.n	800a084 <HAL_DMA_Abort_IT+0x1a8>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a33      	ldr	r2, [pc, #204]	@ (800a0c4 <HAL_DMA_Abort_IT+0x1e8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d040      	beq.n	800a07e <HAL_DMA_Abort_IT+0x1a2>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a31      	ldr	r2, [pc, #196]	@ (800a0c8 <HAL_DMA_Abort_IT+0x1ec>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d038      	beq.n	800a078 <HAL_DMA_Abort_IT+0x19c>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a30      	ldr	r2, [pc, #192]	@ (800a0cc <HAL_DMA_Abort_IT+0x1f0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d030      	beq.n	800a072 <HAL_DMA_Abort_IT+0x196>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a2e      	ldr	r2, [pc, #184]	@ (800a0d0 <HAL_DMA_Abort_IT+0x1f4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d028      	beq.n	800a06c <HAL_DMA_Abort_IT+0x190>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a26      	ldr	r2, [pc, #152]	@ (800a0b8 <HAL_DMA_Abort_IT+0x1dc>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d020      	beq.n	800a066 <HAL_DMA_Abort_IT+0x18a>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a2a      	ldr	r2, [pc, #168]	@ (800a0d4 <HAL_DMA_Abort_IT+0x1f8>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d019      	beq.n	800a062 <HAL_DMA_Abort_IT+0x186>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a29      	ldr	r2, [pc, #164]	@ (800a0d8 <HAL_DMA_Abort_IT+0x1fc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d012      	beq.n	800a05e <HAL_DMA_Abort_IT+0x182>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a27      	ldr	r2, [pc, #156]	@ (800a0dc <HAL_DMA_Abort_IT+0x200>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d00a      	beq.n	800a058 <HAL_DMA_Abort_IT+0x17c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a26      	ldr	r2, [pc, #152]	@ (800a0e0 <HAL_DMA_Abort_IT+0x204>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d102      	bne.n	800a052 <HAL_DMA_Abort_IT+0x176>
 800a04c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a050:	e01b      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a052:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a056:	e018      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a05c:	e015      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a05e:	2310      	movs	r3, #16
 800a060:	e013      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a062:	2301      	movs	r3, #1
 800a064:	e011      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a066:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a06a:	e00e      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a06c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a070:	e00b      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a072:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a076:	e008      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a07c:	e005      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a07e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a082:	e002      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a084:	2310      	movs	r3, #16
 800a086:	e000      	b.n	800a08a <HAL_DMA_Abort_IT+0x1ae>
 800a088:	2301      	movs	r3, #1
 800a08a:	4a17      	ldr	r2, [pc, #92]	@ (800a0e8 <HAL_DMA_Abort_IT+0x20c>)
 800a08c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
    } 
  }
  return status;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40020080 	.word	0x40020080
 800a0bc:	40020008 	.word	0x40020008
 800a0c0:	4002001c 	.word	0x4002001c
 800a0c4:	40020030 	.word	0x40020030
 800a0c8:	40020044 	.word	0x40020044
 800a0cc:	40020058 	.word	0x40020058
 800a0d0:	4002006c 	.word	0x4002006c
 800a0d4:	40020408 	.word	0x40020408
 800a0d8:	4002041c 	.word	0x4002041c
 800a0dc:	40020430 	.word	0x40020430
 800a0e0:	40020444 	.word	0x40020444
 800a0e4:	40020400 	.word	0x40020400
 800a0e8:	40020000 	.word	0x40020000

0800a0ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b08b      	sub	sp, #44	@ 0x2c
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a0fe:	e179      	b.n	800a3f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a100:	2201      	movs	r2, #1
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	fa02 f303 	lsl.w	r3, r2, r3
 800a108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	4013      	ands	r3, r2
 800a112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	429a      	cmp	r2, r3
 800a11a:	f040 8168 	bne.w	800a3ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	4a96      	ldr	r2, [pc, #600]	@ (800a37c <HAL_GPIO_Init+0x290>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d05e      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
 800a128:	4a94      	ldr	r2, [pc, #592]	@ (800a37c <HAL_GPIO_Init+0x290>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d875      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a12e:	4a94      	ldr	r2, [pc, #592]	@ (800a380 <HAL_GPIO_Init+0x294>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d058      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
 800a134:	4a92      	ldr	r2, [pc, #584]	@ (800a380 <HAL_GPIO_Init+0x294>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d86f      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a13a:	4a92      	ldr	r2, [pc, #584]	@ (800a384 <HAL_GPIO_Init+0x298>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d052      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
 800a140:	4a90      	ldr	r2, [pc, #576]	@ (800a384 <HAL_GPIO_Init+0x298>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d869      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a146:	4a90      	ldr	r2, [pc, #576]	@ (800a388 <HAL_GPIO_Init+0x29c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d04c      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
 800a14c:	4a8e      	ldr	r2, [pc, #568]	@ (800a388 <HAL_GPIO_Init+0x29c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d863      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a152:	4a8e      	ldr	r2, [pc, #568]	@ (800a38c <HAL_GPIO_Init+0x2a0>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d046      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
 800a158:	4a8c      	ldr	r2, [pc, #560]	@ (800a38c <HAL_GPIO_Init+0x2a0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d85d      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a15e:	2b12      	cmp	r3, #18
 800a160:	d82a      	bhi.n	800a1b8 <HAL_GPIO_Init+0xcc>
 800a162:	2b12      	cmp	r3, #18
 800a164:	d859      	bhi.n	800a21a <HAL_GPIO_Init+0x12e>
 800a166:	a201      	add	r2, pc, #4	@ (adr r2, 800a16c <HAL_GPIO_Init+0x80>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a1e7 	.word	0x0800a1e7
 800a170:	0800a1c1 	.word	0x0800a1c1
 800a174:	0800a1d3 	.word	0x0800a1d3
 800a178:	0800a215 	.word	0x0800a215
 800a17c:	0800a21b 	.word	0x0800a21b
 800a180:	0800a21b 	.word	0x0800a21b
 800a184:	0800a21b 	.word	0x0800a21b
 800a188:	0800a21b 	.word	0x0800a21b
 800a18c:	0800a21b 	.word	0x0800a21b
 800a190:	0800a21b 	.word	0x0800a21b
 800a194:	0800a21b 	.word	0x0800a21b
 800a198:	0800a21b 	.word	0x0800a21b
 800a19c:	0800a21b 	.word	0x0800a21b
 800a1a0:	0800a21b 	.word	0x0800a21b
 800a1a4:	0800a21b 	.word	0x0800a21b
 800a1a8:	0800a21b 	.word	0x0800a21b
 800a1ac:	0800a21b 	.word	0x0800a21b
 800a1b0:	0800a1c9 	.word	0x0800a1c9
 800a1b4:	0800a1dd 	.word	0x0800a1dd
 800a1b8:	4a75      	ldr	r2, [pc, #468]	@ (800a390 <HAL_GPIO_Init+0x2a4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d013      	beq.n	800a1e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a1be:	e02c      	b.n	800a21a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	623b      	str	r3, [r7, #32]
          break;
 800a1c6:	e029      	b.n	800a21c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	623b      	str	r3, [r7, #32]
          break;
 800a1d0:	e024      	b.n	800a21c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	623b      	str	r3, [r7, #32]
          break;
 800a1da:	e01f      	b.n	800a21c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	330c      	adds	r3, #12
 800a1e2:	623b      	str	r3, [r7, #32]
          break;
 800a1e4:	e01a      	b.n	800a21c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a1ee:	2304      	movs	r3, #4
 800a1f0:	623b      	str	r3, [r7, #32]
          break;
 800a1f2:	e013      	b.n	800a21c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d105      	bne.n	800a208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	611a      	str	r2, [r3, #16]
          break;
 800a206:	e009      	b.n	800a21c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a208:	2308      	movs	r3, #8
 800a20a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	615a      	str	r2, [r3, #20]
          break;
 800a212:	e003      	b.n	800a21c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a214:	2300      	movs	r3, #0
 800a216:	623b      	str	r3, [r7, #32]
          break;
 800a218:	e000      	b.n	800a21c <HAL_GPIO_Init+0x130>
          break;
 800a21a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2bff      	cmp	r3, #255	@ 0xff
 800a220:	d801      	bhi.n	800a226 <HAL_GPIO_Init+0x13a>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	e001      	b.n	800a22a <HAL_GPIO_Init+0x13e>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3304      	adds	r3, #4
 800a22a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	2bff      	cmp	r3, #255	@ 0xff
 800a230:	d802      	bhi.n	800a238 <HAL_GPIO_Init+0x14c>
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	e002      	b.n	800a23e <HAL_GPIO_Init+0x152>
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	3b08      	subs	r3, #8
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	210f      	movs	r1, #15
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	fa01 f303 	lsl.w	r3, r1, r3
 800a24c:	43db      	mvns	r3, r3
 800a24e:	401a      	ands	r2, r3
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	fa01 f303 	lsl.w	r3, r1, r3
 800a258:	431a      	orrs	r2, r3
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80c1 	beq.w	800a3ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a26c:	4b49      	ldr	r3, [pc, #292]	@ (800a394 <HAL_GPIO_Init+0x2a8>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	4a48      	ldr	r2, [pc, #288]	@ (800a394 <HAL_GPIO_Init+0x2a8>)
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	6193      	str	r3, [r2, #24]
 800a278:	4b46      	ldr	r3, [pc, #280]	@ (800a394 <HAL_GPIO_Init+0x2a8>)
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	60bb      	str	r3, [r7, #8]
 800a282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a284:	4a44      	ldr	r2, [pc, #272]	@ (800a398 <HAL_GPIO_Init+0x2ac>)
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	089b      	lsrs	r3, r3, #2
 800a28a:	3302      	adds	r3, #2
 800a28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	220f      	movs	r2, #15
 800a29c:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a3c      	ldr	r2, [pc, #240]	@ (800a39c <HAL_GPIO_Init+0x2b0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d01f      	beq.n	800a2f0 <HAL_GPIO_Init+0x204>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a3b      	ldr	r2, [pc, #236]	@ (800a3a0 <HAL_GPIO_Init+0x2b4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d019      	beq.n	800a2ec <HAL_GPIO_Init+0x200>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a3a      	ldr	r2, [pc, #232]	@ (800a3a4 <HAL_GPIO_Init+0x2b8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <HAL_GPIO_Init+0x1fc>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a39      	ldr	r2, [pc, #228]	@ (800a3a8 <HAL_GPIO_Init+0x2bc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00d      	beq.n	800a2e4 <HAL_GPIO_Init+0x1f8>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a38      	ldr	r2, [pc, #224]	@ (800a3ac <HAL_GPIO_Init+0x2c0>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <HAL_GPIO_Init+0x1f4>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a37      	ldr	r2, [pc, #220]	@ (800a3b0 <HAL_GPIO_Init+0x2c4>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d101      	bne.n	800a2dc <HAL_GPIO_Init+0x1f0>
 800a2d8:	2305      	movs	r3, #5
 800a2da:	e00a      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2dc:	2306      	movs	r3, #6
 800a2de:	e008      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	e006      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e004      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e002      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e000      	b.n	800a2f2 <HAL_GPIO_Init+0x206>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f4:	f002 0203 	and.w	r2, r2, #3
 800a2f8:	0092      	lsls	r2, r2, #2
 800a2fa:	4093      	lsls	r3, r2
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a302:	4925      	ldr	r1, [pc, #148]	@ (800a398 <HAL_GPIO_Init+0x2ac>)
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	3302      	adds	r3, #2
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a31c:	4b25      	ldr	r3, [pc, #148]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	4924      	ldr	r1, [pc, #144]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	4313      	orrs	r3, r2
 800a326:	608b      	str	r3, [r1, #8]
 800a328:	e006      	b.n	800a338 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a32a:	4b22      	ldr	r3, [pc, #136]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	43db      	mvns	r3, r3
 800a332:	4920      	ldr	r1, [pc, #128]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a334:	4013      	ands	r3, r2
 800a336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a344:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	491a      	ldr	r1, [pc, #104]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60cb      	str	r3, [r1, #12]
 800a350:	e006      	b.n	800a360 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a352:	4b18      	ldr	r3, [pc, #96]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	43db      	mvns	r3, r3
 800a35a:	4916      	ldr	r1, [pc, #88]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d025      	beq.n	800a3b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a36c:	4b11      	ldr	r3, [pc, #68]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	4910      	ldr	r1, [pc, #64]	@ (800a3b4 <HAL_GPIO_Init+0x2c8>)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	4313      	orrs	r3, r2
 800a376:	604b      	str	r3, [r1, #4]
 800a378:	e025      	b.n	800a3c6 <HAL_GPIO_Init+0x2da>
 800a37a:	bf00      	nop
 800a37c:	10320000 	.word	0x10320000
 800a380:	10310000 	.word	0x10310000
 800a384:	10220000 	.word	0x10220000
 800a388:	10210000 	.word	0x10210000
 800a38c:	10120000 	.word	0x10120000
 800a390:	10110000 	.word	0x10110000
 800a394:	40021000 	.word	0x40021000
 800a398:	40010000 	.word	0x40010000
 800a39c:	40010800 	.word	0x40010800
 800a3a0:	40010c00 	.word	0x40010c00
 800a3a4:	40011000 	.word	0x40011000
 800a3a8:	40011400 	.word	0x40011400
 800a3ac:	40011800 	.word	0x40011800
 800a3b0:	40011c00 	.word	0x40011c00
 800a3b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a3b8:	4b15      	ldr	r3, [pc, #84]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	4913      	ldr	r1, [pc, #76]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	490e      	ldr	r1, [pc, #56]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	600b      	str	r3, [r1, #0]
 800a3de:	e006      	b.n	800a3ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	4909      	ldr	r1, [pc, #36]	@ (800a410 <HAL_GPIO_Init+0x324>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f47f ae7e 	bne.w	800a100 <HAL_GPIO_Init+0x14>
  }
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	372c      	adds	r7, #44	@ 0x2c
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr
 800a410:	40010400 	.word	0x40010400

0800a414 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a414:	b480      	push	{r7}
 800a416:	b089      	sub	sp, #36	@ 0x24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a41e:	2300      	movs	r3, #0
 800a420:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a422:	e0a6      	b.n	800a572 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a424:	2201      	movs	r2, #1
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	4013      	ands	r3, r2
 800a430:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 8099 	beq.w	800a56c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a43a:	4a54      	ldr	r2, [pc, #336]	@ (800a58c <HAL_GPIO_DeInit+0x178>)
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	089b      	lsrs	r3, r3, #2
 800a440:	3302      	adds	r3, #2
 800a442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a446:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	220f      	movs	r2, #15
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4013      	ands	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a4c      	ldr	r2, [pc, #304]	@ (800a590 <HAL_GPIO_DeInit+0x17c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d01f      	beq.n	800a4a4 <HAL_GPIO_DeInit+0x90>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a4b      	ldr	r2, [pc, #300]	@ (800a594 <HAL_GPIO_DeInit+0x180>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d019      	beq.n	800a4a0 <HAL_GPIO_DeInit+0x8c>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a4a      	ldr	r2, [pc, #296]	@ (800a598 <HAL_GPIO_DeInit+0x184>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_GPIO_DeInit+0x88>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a49      	ldr	r2, [pc, #292]	@ (800a59c <HAL_GPIO_DeInit+0x188>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00d      	beq.n	800a498 <HAL_GPIO_DeInit+0x84>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a48      	ldr	r2, [pc, #288]	@ (800a5a0 <HAL_GPIO_DeInit+0x18c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d007      	beq.n	800a494 <HAL_GPIO_DeInit+0x80>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a47      	ldr	r2, [pc, #284]	@ (800a5a4 <HAL_GPIO_DeInit+0x190>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d101      	bne.n	800a490 <HAL_GPIO_DeInit+0x7c>
 800a48c:	2305      	movs	r3, #5
 800a48e:	e00a      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a490:	2306      	movs	r3, #6
 800a492:	e008      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a494:	2304      	movs	r3, #4
 800a496:	e006      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a498:	2303      	movs	r3, #3
 800a49a:	e004      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a49c:	2302      	movs	r3, #2
 800a49e:	e002      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <HAL_GPIO_DeInit+0x92>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	69fa      	ldr	r2, [r7, #28]
 800a4a8:	f002 0203 	and.w	r2, r2, #3
 800a4ac:	0092      	lsls	r2, r2, #2
 800a4ae:	4093      	lsls	r3, r2
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d132      	bne.n	800a51c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a4b6:	4b3c      	ldr	r3, [pc, #240]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	43db      	mvns	r3, r3
 800a4be:	493a      	ldr	r1, [pc, #232]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a4c4:	4b38      	ldr	r3, [pc, #224]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	43db      	mvns	r3, r3
 800a4cc:	4936      	ldr	r1, [pc, #216]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a4d2:	4b35      	ldr	r3, [pc, #212]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	4933      	ldr	r1, [pc, #204]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a4e0:	4b31      	ldr	r3, [pc, #196]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	492f      	ldr	r1, [pc, #188]	@ (800a5a8 <HAL_GPIO_DeInit+0x194>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f003 0303 	and.w	r3, r3, #3
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	220f      	movs	r2, #15
 800a4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a4fe:	4a23      	ldr	r2, [pc, #140]	@ (800a58c <HAL_GPIO_DeInit+0x178>)
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	089b      	lsrs	r3, r3, #2
 800a504:	3302      	adds	r3, #2
 800a506:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	43da      	mvns	r2, r3
 800a50e:	481f      	ldr	r0, [pc, #124]	@ (800a58c <HAL_GPIO_DeInit+0x178>)
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	089b      	lsrs	r3, r3, #2
 800a514:	400a      	ands	r2, r1
 800a516:	3302      	adds	r3, #2
 800a518:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	2bff      	cmp	r3, #255	@ 0xff
 800a520:	d801      	bhi.n	800a526 <HAL_GPIO_DeInit+0x112>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	e001      	b.n	800a52a <HAL_GPIO_DeInit+0x116>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3304      	adds	r3, #4
 800a52a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2bff      	cmp	r3, #255	@ 0xff
 800a530:	d802      	bhi.n	800a538 <HAL_GPIO_DeInit+0x124>
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	e002      	b.n	800a53e <HAL_GPIO_DeInit+0x12a>
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	3b08      	subs	r3, #8
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	210f      	movs	r1, #15
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	fa01 f303 	lsl.w	r3, r1, r3
 800a54c:	43db      	mvns	r3, r3
 800a54e:	401a      	ands	r2, r3
 800a550:	2104      	movs	r1, #4
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	fa01 f303 	lsl.w	r3, r1, r3
 800a558:	431a      	orrs	r2, r3
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68da      	ldr	r2, [r3, #12]
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	43db      	mvns	r3, r3
 800a566:	401a      	ands	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	3301      	adds	r3, #1
 800a570:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	fa22 f303 	lsr.w	r3, r2, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f47f af52 	bne.w	800a424 <HAL_GPIO_DeInit+0x10>
  }
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	3724      	adds	r7, #36	@ 0x24
 800a586:	46bd      	mov	sp, r7
 800a588:	bc80      	pop	{r7}
 800a58a:	4770      	bx	lr
 800a58c:	40010000 	.word	0x40010000
 800a590:	40010800 	.word	0x40010800
 800a594:	40010c00 	.word	0x40010c00
 800a598:	40011000 	.word	0x40011000
 800a59c:	40011400 	.word	0x40011400
 800a5a0:	40011800 	.word	0x40011800
 800a5a4:	40011c00 	.word	0x40011c00
 800a5a8:	40010400 	.word	0x40010400

0800a5ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	887b      	ldrh	r3, [r7, #2]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	e001      	b.n	800a5ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr

0800a5da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	807b      	strh	r3, [r7, #2]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5ea:	787b      	ldrb	r3, [r7, #1]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5f0:	887a      	ldrh	r2, [r7, #2]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a5f6:	e003      	b.n	800a600 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a5f8:	887b      	ldrh	r3, [r7, #2]
 800a5fa:	041a      	lsls	r2, r3, #16
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	611a      	str	r2, [r3, #16]
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr

0800a60a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a61c:	887a      	ldrh	r2, [r7, #2]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4013      	ands	r3, r2
 800a622:	041a      	lsls	r2, r3, #16
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	43d9      	mvns	r1, r3
 800a628:	887b      	ldrh	r3, [r7, #2]
 800a62a:	400b      	ands	r3, r1
 800a62c:	431a      	orrs	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	611a      	str	r2, [r3, #16]
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e12b      	b.n	800a8a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7fe fff4 	bl	8009650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2224      	movs	r2, #36	@ 0x24
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f022 0201 	bic.w	r2, r2, #1
 800a67e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a68e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a69e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a6a0:	f001 fdb8 	bl	800c214 <HAL_RCC_GetPCLK1Freq>
 800a6a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	4a81      	ldr	r2, [pc, #516]	@ (800a8b0 <HAL_I2C_Init+0x274>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d807      	bhi.n	800a6c0 <HAL_I2C_Init+0x84>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4a80      	ldr	r2, [pc, #512]	@ (800a8b4 <HAL_I2C_Init+0x278>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	bf94      	ite	ls
 800a6b8:	2301      	movls	r3, #1
 800a6ba:	2300      	movhi	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	e006      	b.n	800a6ce <HAL_I2C_Init+0x92>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4a7d      	ldr	r2, [pc, #500]	@ (800a8b8 <HAL_I2C_Init+0x27c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	bf94      	ite	ls
 800a6c8:	2301      	movls	r3, #1
 800a6ca:	2300      	movhi	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e0e7      	b.n	800a8a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4a78      	ldr	r2, [pc, #480]	@ (800a8bc <HAL_I2C_Init+0x280>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	0c9b      	lsrs	r3, r3, #18
 800a6e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4a6a      	ldr	r2, [pc, #424]	@ (800a8b0 <HAL_I2C_Init+0x274>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d802      	bhi.n	800a710 <HAL_I2C_Init+0xd4>
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	3301      	adds	r3, #1
 800a70e:	e009      	b.n	800a724 <HAL_I2C_Init+0xe8>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	4a69      	ldr	r2, [pc, #420]	@ (800a8c0 <HAL_I2C_Init+0x284>)
 800a71c:	fba2 2303 	umull	r2, r3, r2, r3
 800a720:	099b      	lsrs	r3, r3, #6
 800a722:	3301      	adds	r3, #1
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	430b      	orrs	r3, r1
 800a72a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a736:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	495c      	ldr	r1, [pc, #368]	@ (800a8b0 <HAL_I2C_Init+0x274>)
 800a740:	428b      	cmp	r3, r1
 800a742:	d819      	bhi.n	800a778 <HAL_I2C_Init+0x13c>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	1e59      	subs	r1, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a758:	400b      	ands	r3, r1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <HAL_I2C_Init+0x138>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1e59      	subs	r1, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	fbb1 f3f3 	udiv	r3, r1, r3
 800a76c:	3301      	adds	r3, #1
 800a76e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a772:	e051      	b.n	800a818 <HAL_I2C_Init+0x1dc>
 800a774:	2304      	movs	r3, #4
 800a776:	e04f      	b.n	800a818 <HAL_I2C_Init+0x1dc>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d111      	bne.n	800a7a4 <HAL_I2C_Init+0x168>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	1e58      	subs	r0, r3, #1
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6859      	ldr	r1, [r3, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	440b      	add	r3, r1
 800a78e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a792:	3301      	adds	r3, #1
 800a794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf0c      	ite	eq
 800a79c:	2301      	moveq	r3, #1
 800a79e:	2300      	movne	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	e012      	b.n	800a7ca <HAL_I2C_Init+0x18e>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	1e58      	subs	r0, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6859      	ldr	r1, [r3, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	440b      	add	r3, r1
 800a7b2:	0099      	lsls	r1, r3, #2
 800a7b4:	440b      	add	r3, r1
 800a7b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <HAL_I2C_Init+0x196>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e022      	b.n	800a818 <HAL_I2C_Init+0x1dc>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10e      	bne.n	800a7f8 <HAL_I2C_Init+0x1bc>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	1e58      	subs	r0, r3, #1
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6859      	ldr	r1, [r3, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	440b      	add	r3, r1
 800a7e8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7f6:	e00f      	b.n	800a818 <HAL_I2C_Init+0x1dc>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	1e58      	subs	r0, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6859      	ldr	r1, [r3, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	0099      	lsls	r1, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a80e:	3301      	adds	r3, #1
 800a810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	6809      	ldr	r1, [r1, #0]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	69da      	ldr	r2, [r3, #28]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a846:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6911      	ldr	r1, [r2, #16]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	68d2      	ldr	r2, [r2, #12]
 800a852:	4311      	orrs	r1, r2
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6812      	ldr	r2, [r2, #0]
 800a858:	430b      	orrs	r3, r1
 800a85a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	695a      	ldr	r2, [r3, #20]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	431a      	orrs	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0201 	orr.w	r2, r2, #1
 800a886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	000186a0 	.word	0x000186a0
 800a8b4:	001e847f 	.word	0x001e847f
 800a8b8:	003d08ff 	.word	0x003d08ff
 800a8bc:	431bde83 	.word	0x431bde83
 800a8c0:	10624dd3 	.word	0x10624dd3

0800a8c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e021      	b.n	800a91a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2224      	movs	r2, #36	@ 0x24
 800a8da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0201 	bic.w	r2, r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fe feec 	bl	80096cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af02      	add	r7, sp, #8
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	461a      	mov	r2, r3
 800a930:	460b      	mov	r3, r1
 800a932:	817b      	strh	r3, [r7, #10]
 800a934:	4613      	mov	r3, r2
 800a936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a938:	f7ff f85e 	bl	80099f8 <HAL_GetTick>
 800a93c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b20      	cmp	r3, #32
 800a948:	f040 80e0 	bne.w	800ab0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2319      	movs	r3, #25
 800a952:	2201      	movs	r2, #1
 800a954:	4970      	ldr	r1, [pc, #448]	@ (800ab18 <HAL_I2C_Master_Transmit+0x1f4>)
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 fe5c 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a962:	2302      	movs	r3, #2
 800a964:	e0d3      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d101      	bne.n	800a974 <HAL_I2C_Master_Transmit+0x50>
 800a970:	2302      	movs	r3, #2
 800a972:	e0cc      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b01      	cmp	r3, #1
 800a988:	d007      	beq.n	800a99a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f042 0201 	orr.w	r2, r2, #1
 800a998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2221      	movs	r2, #33	@ 0x21
 800a9ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	893a      	ldrh	r2, [r7, #8]
 800a9ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4a50      	ldr	r2, [pc, #320]	@ (800ab1c <HAL_I2C_Master_Transmit+0x1f8>)
 800a9da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a9dc:	8979      	ldrh	r1, [r7, #10]
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6a3a      	ldr	r2, [r7, #32]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 fc16 	bl	800b214 <I2C_MasterRequestWrite>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e08d      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aa08:	e066      	b.n	800aad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	6a39      	ldr	r1, [r7, #32]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 ff1a 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00d      	beq.n	800aa36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d107      	bne.n	800aa32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e06b      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3a:	781a      	ldrb	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	d11b      	bne.n	800aaac <HAL_I2C_Master_Transmit+0x188>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d017      	beq.n	800aaac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	781a      	ldrb	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	6a39      	ldr	r1, [r7, #32]
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 ff11 	bl	800b8d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00d      	beq.n	800aad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	d107      	bne.n	800aad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e01a      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d194      	bne.n	800aa0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e000      	b.n	800ab0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab0c:	2302      	movs	r3, #2
  }
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	00100002 	.word	0x00100002
 800ab1c:	ffff0000 	.word	0xffff0000

0800ab20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	4608      	mov	r0, r1
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	817b      	strh	r3, [r7, #10]
 800ab32:	460b      	mov	r3, r1
 800ab34:	813b      	strh	r3, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab3a:	f7fe ff5d 	bl	80099f8 <HAL_GetTick>
 800ab3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b20      	cmp	r3, #32
 800ab4a:	f040 80d9 	bne.w	800ad00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	2319      	movs	r3, #25
 800ab54:	2201      	movs	r2, #1
 800ab56:	496d      	ldr	r1, [pc, #436]	@ (800ad0c <HAL_I2C_Mem_Write+0x1ec>)
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 fd5b 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ab64:	2302      	movs	r3, #2
 800ab66:	e0cc      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_I2C_Mem_Write+0x56>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e0c5      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d007      	beq.n	800ab9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0201 	orr.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2221      	movs	r2, #33	@ 0x21
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2240      	movs	r2, #64	@ 0x40
 800abb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a3a      	ldr	r2, [r7, #32]
 800abc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4a4d      	ldr	r2, [pc, #308]	@ (800ad10 <HAL_I2C_Mem_Write+0x1f0>)
 800abdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800abde:	88f8      	ldrh	r0, [r7, #6]
 800abe0:	893a      	ldrh	r2, [r7, #8]
 800abe2:	8979      	ldrh	r1, [r7, #10]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fb92 	bl	800b318 <I2C_RequestMemoryWrite>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d052      	beq.n	800aca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e081      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 fe20 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00d      	beq.n	800ac2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d107      	bne.n	800ac26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e06b      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2e:	781a      	ldrb	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac44:	3b01      	subs	r3, #1
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d11b      	bne.n	800aca0 <HAL_I2C_Mem_Write+0x180>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d017      	beq.n	800aca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1aa      	bne.n	800abfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 fe13 	bl	800b8d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00d      	beq.n	800acd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d107      	bne.n	800acd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e016      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ace2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	e000      	b.n	800ad02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ad00:	2302      	movs	r3, #2
  }
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	00100002 	.word	0x00100002
 800ad10:	ffff0000 	.word	0xffff0000

0800ad14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08c      	sub	sp, #48	@ 0x30
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	817b      	strh	r3, [r7, #10]
 800ad26:	460b      	mov	r3, r1
 800ad28:	813b      	strh	r3, [r7, #8]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad32:	f7fe fe61 	bl	80099f8 <HAL_GetTick>
 800ad36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	f040 8244 	bne.w	800b1ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	2319      	movs	r3, #25
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	4982      	ldr	r1, [pc, #520]	@ (800af58 <HAL_I2C_Mem_Read+0x244>)
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fc5f 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e237      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <HAL_I2C_Mem_Read+0x5a>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e230      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d007      	beq.n	800ad94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0201 	orr.w	r2, r2, #1
 800ad92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ada2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2222      	movs	r2, #34	@ 0x22
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2240      	movs	r2, #64	@ 0x40
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800adc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adca:	b29a      	uxth	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a62      	ldr	r2, [pc, #392]	@ (800af5c <HAL_I2C_Mem_Read+0x248>)
 800add4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800add6:	88f8      	ldrh	r0, [r7, #6]
 800add8:	893a      	ldrh	r2, [r7, #8]
 800adda:	8979      	ldrh	r1, [r7, #10]
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	4603      	mov	r3, r0
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fb2c 	bl	800b444 <I2C_RequestMemoryRead>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e1ec      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d113      	bne.n	800ae26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	61fb      	str	r3, [r7, #28]
 800ae12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	e1c0      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d11e      	bne.n	800ae6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae3e:	b672      	cpsid	i
}
 800ae40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae42:	2300      	movs	r3, #0
 800ae44:	61bb      	str	r3, [r7, #24]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ae68:	b662      	cpsie	i
}
 800ae6a:	e035      	b.n	800aed8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d11e      	bne.n	800aeb2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae84:	b672      	cpsid	i
}
 800ae86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae88:	2300      	movs	r3, #0
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aeae:	b662      	cpsie	i
}
 800aeb0:	e012      	b.n	800aed8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aec0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aec2:	2300      	movs	r3, #0
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	613b      	str	r3, [r7, #16]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	613b      	str	r3, [r7, #16]
 800aed6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800aed8:	e166      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aede:	2b03      	cmp	r3, #3
 800aee0:	f200 811f 	bhi.w	800b122 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d123      	bne.n	800af34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 fd39 	bl	800b968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e167      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0a:	b2d2      	uxtb	r2, r2
 800af0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af32:	e139      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d152      	bne.n	800afe2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af42:	2200      	movs	r2, #0
 800af44:	4906      	ldr	r1, [pc, #24]	@ (800af60 <HAL_I2C_Mem_Read+0x24c>)
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 fb64 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e13c      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
 800af56:	bf00      	nop
 800af58:	00100002 	.word	0x00100002
 800af5c:	ffff0000 	.word	0xffff0000
 800af60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800af64:	b672      	cpsid	i
}
 800af66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691a      	ldr	r2, [r3, #16]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af82:	b2d2      	uxtb	r2, r2
 800af84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800afaa:	b662      	cpsie	i
}
 800afac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	b2d2      	uxtb	r2, r2
 800afba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afca:	3b01      	subs	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800afe0:	e0e2      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	2200      	movs	r2, #0
 800afea:	497b      	ldr	r1, [pc, #492]	@ (800b1d8 <HAL_I2C_Mem_Read+0x4c4>)
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 fb11 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e0e9      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b00a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b00c:	b672      	cpsid	i
}
 800b00e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	691a      	ldr	r2, [r3, #16]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01a:	b2d2      	uxtb	r2, r2
 800b01c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b042:	4b66      	ldr	r3, [pc, #408]	@ (800b1dc <HAL_I2C_Mem_Read+0x4c8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	08db      	lsrs	r3, r3, #3
 800b048:	4a65      	ldr	r2, [pc, #404]	@ (800b1e0 <HAL_I2C_Mem_Read+0x4cc>)
 800b04a:	fba2 2303 	umull	r2, r3, r2, r3
 800b04e:	0a1a      	lsrs	r2, r3, #8
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	00da      	lsls	r2, r3, #3
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	3b01      	subs	r3, #1
 800b060:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d118      	bne.n	800b09a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2220      	movs	r2, #32
 800b072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b082:	f043 0220 	orr.w	r2, r3, #32
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b08a:	b662      	cpsie	i
}
 800b08c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e09a      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d1d9      	bne.n	800b05c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691a      	ldr	r2, [r3, #16]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	b2d2      	uxtb	r2, r2
 800b0c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b0ea:	b662      	cpsie	i
}
 800b0ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b10a:	3b01      	subs	r3, #1
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b116:	b29b      	uxth	r3, r3
 800b118:	3b01      	subs	r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b120:	e042      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b124:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 fc1e 	bl	800b968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e04c      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	691a      	ldr	r2, [r3, #16]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b152:	3b01      	subs	r3, #1
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b15e:	b29b      	uxth	r3, r3
 800b160:	3b01      	subs	r3, #1
 800b162:	b29a      	uxth	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b04      	cmp	r3, #4
 800b174:	d118      	bne.n	800b1a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b192:	3b01      	subs	r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f47f ae94 	bne.w	800aeda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e000      	b.n	800b1d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b1ce:	2302      	movs	r3, #2
  }
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3728      	adds	r7, #40	@ 0x28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	00010004 	.word	0x00010004
 800b1dc:	20000f74 	.word	0x20000f74
 800b1e0:	14f8b589 	.word	0x14f8b589

0800b1e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr

0800b1fe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b083      	sub	sp, #12
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	bc80      	pop	{r7}
 800b212:	4770      	bx	lr

0800b214 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	460b      	mov	r3, r1
 800b222:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b08      	cmp	r3, #8
 800b22e:	d006      	beq.n	800b23e <I2C_MasterRequestWrite+0x2a>
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d003      	beq.n	800b23e <I2C_MasterRequestWrite+0x2a>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b23c:	d108      	bne.n	800b250 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	e00b      	b.n	800b268 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	2b12      	cmp	r3, #18
 800b256:	d107      	bne.n	800b268 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f9cd 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00d      	beq.n	800b29c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b28a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b28e:	d103      	bne.n	800b298 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b296:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e035      	b.n	800b308 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2a4:	d108      	bne.n	800b2b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b2a6:	897b      	ldrh	r3, [r7, #10]
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b2b4:	611a      	str	r2, [r3, #16]
 800b2b6:	e01b      	b.n	800b2f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b2b8:	897b      	ldrh	r3, [r7, #10]
 800b2ba:	11db      	asrs	r3, r3, #7
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0306 	and.w	r3, r3, #6
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f063 030f 	orn	r3, r3, #15
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	490e      	ldr	r1, [pc, #56]	@ (800b310 <I2C_MasterRequestWrite+0xfc>)
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 fa16 	bl	800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e010      	b.n	800b308 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b2e6:	897b      	ldrh	r3, [r7, #10]
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	4907      	ldr	r1, [pc, #28]	@ (800b314 <I2C_MasterRequestWrite+0x100>)
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fa06 	bl	800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	00010008 	.word	0x00010008
 800b314:	00010002 	.word	0x00010002

0800b318 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b088      	sub	sp, #32
 800b31c:	af02      	add	r7, sp, #8
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	4608      	mov	r0, r1
 800b322:	4611      	mov	r1, r2
 800b324:	461a      	mov	r2, r3
 800b326:	4603      	mov	r3, r0
 800b328:	817b      	strh	r3, [r7, #10]
 800b32a:	460b      	mov	r3, r1
 800b32c:	813b      	strh	r3, [r7, #8]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	2200      	movs	r2, #0
 800b34a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f000 f960 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00d      	beq.n	800b376 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b368:	d103      	bne.n	800b372 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e05f      	b.n	800b436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b376:	897b      	ldrh	r3, [r7, #10]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	461a      	mov	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	492d      	ldr	r1, [pc, #180]	@ (800b440 <I2C_RequestMemoryWrite+0x128>)
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f9bb 	bl	800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e04c      	b.n	800b436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b39c:	2300      	movs	r3, #0
 800b39e:	617b      	str	r3, [r7, #20]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b4:	6a39      	ldr	r1, [r7, #32]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 fa46 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00d      	beq.n	800b3de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	d107      	bne.n	800b3da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e02b      	b.n	800b436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d105      	bne.n	800b3f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3e4:	893b      	ldrh	r3, [r7, #8]
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	611a      	str	r2, [r3, #16]
 800b3ee:	e021      	b.n	800b434 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b3f0:	893b      	ldrh	r3, [r7, #8]
 800b3f2:	0a1b      	lsrs	r3, r3, #8
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b400:	6a39      	ldr	r1, [r7, #32]
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 fa20 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00d      	beq.n	800b42a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b412:	2b04      	cmp	r3, #4
 800b414:	d107      	bne.n	800b426 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e005      	b.n	800b436 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b42a:	893b      	ldrh	r3, [r7, #8]
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	00010002 	.word	0x00010002

0800b444 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	4608      	mov	r0, r1
 800b44e:	4611      	mov	r1, r2
 800b450:	461a      	mov	r2, r3
 800b452:	4603      	mov	r3, r0
 800b454:	817b      	strh	r3, [r7, #10]
 800b456:	460b      	mov	r3, r1
 800b458:	813b      	strh	r3, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b46c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b47c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	2200      	movs	r2, #0
 800b486:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 f8c2 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00d      	beq.n	800b4b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4a4:	d103      	bne.n	800b4ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e0aa      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b4b2:	897b      	ldrh	r3, [r7, #10]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b4c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	6a3a      	ldr	r2, [r7, #32]
 800b4c6:	4952      	ldr	r1, [pc, #328]	@ (800b610 <I2C_RequestMemoryRead+0x1cc>)
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f91d 	bl	800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e097      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f0:	6a39      	ldr	r1, [r7, #32]
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 f9a8 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b502:	2b04      	cmp	r3, #4
 800b504:	d107      	bne.n	800b516 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e076      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b51a:	88fb      	ldrh	r3, [r7, #6]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d105      	bne.n	800b52c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b520:	893b      	ldrh	r3, [r7, #8]
 800b522:	b2da      	uxtb	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	611a      	str	r2, [r3, #16]
 800b52a:	e021      	b.n	800b570 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b52c:	893b      	ldrh	r3, [r7, #8]
 800b52e:	0a1b      	lsrs	r3, r3, #8
 800b530:	b29b      	uxth	r3, r3
 800b532:	b2da      	uxtb	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b53a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b53c:	6a39      	ldr	r1, [r7, #32]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f000 f982 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00d      	beq.n	800b566 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d107      	bne.n	800b562 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e050      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b566:	893b      	ldrh	r3, [r7, #8]
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b572:	6a39      	ldr	r1, [r7, #32]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 f967 	bl	800b848 <I2C_WaitOnTXEFlagUntilTimeout>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00d      	beq.n	800b59c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b584:	2b04      	cmp	r3, #4
 800b586:	d107      	bne.n	800b598 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b596:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e035      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f82b 	bl	800b614 <I2C_WaitOnFlagUntilTimeout>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00d      	beq.n	800b5e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5d2:	d103      	bne.n	800b5dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e013      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b5e0:	897b      	ldrh	r3, [r7, #10]
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	f043 0301 	orr.w	r3, r3, #1
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	6a3a      	ldr	r2, [r7, #32]
 800b5f4:	4906      	ldr	r1, [pc, #24]	@ (800b610 <I2C_RequestMemoryRead+0x1cc>)
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 f886 	bl	800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	00010002 	.word	0x00010002

0800b614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	603b      	str	r3, [r7, #0]
 800b620:	4613      	mov	r3, r2
 800b622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b624:	e048      	b.n	800b6b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	d044      	beq.n	800b6b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b62e:	f7fe f9e3 	bl	80099f8 <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d302      	bcc.n	800b644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d139      	bne.n	800b6b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	0c1b      	lsrs	r3, r3, #16
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d10d      	bne.n	800b66a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	43da      	mvns	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	4013      	ands	r3, r2
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bf0c      	ite	eq
 800b660:	2301      	moveq	r3, #1
 800b662:	2300      	movne	r3, #0
 800b664:	b2db      	uxtb	r3, r3
 800b666:	461a      	mov	r2, r3
 800b668:	e00c      	b.n	800b684 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	43da      	mvns	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	4013      	ands	r3, r2
 800b676:	b29b      	uxth	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bf0c      	ite	eq
 800b67c:	2301      	moveq	r3, #1
 800b67e:	2300      	movne	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	429a      	cmp	r2, r3
 800b688:	d116      	bne.n	800b6b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a4:	f043 0220 	orr.w	r2, r3, #32
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e023      	b.n	800b700 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	0c1b      	lsrs	r3, r3, #16
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d10d      	bne.n	800b6de <I2C_WaitOnFlagUntilTimeout+0xca>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	43da      	mvns	r2, r3
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bf0c      	ite	eq
 800b6d4:	2301      	moveq	r3, #1
 800b6d6:	2300      	movne	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	e00c      	b.n	800b6f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	43da      	mvns	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2301      	moveq	r3, #1
 800b6f2:	2300      	movne	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d093      	beq.n	800b626 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b716:	e071      	b.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b726:	d123      	bne.n	800b770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b736:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2220      	movs	r2, #32
 800b74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b75c:	f043 0204 	orr.w	r2, r3, #4
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e067      	b.n	800b840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d041      	beq.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b778:	f7fe f93e 	bl	80099f8 <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d302      	bcc.n	800b78e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d136      	bne.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	0c1b      	lsrs	r3, r3, #16
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b01      	cmp	r3, #1
 800b796:	d10c      	bne.n	800b7b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	43da      	mvns	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bf14      	ite	ne
 800b7aa:	2301      	movne	r3, #1
 800b7ac:	2300      	moveq	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	e00b      	b.n	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	43da      	mvns	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	bf14      	ite	ne
 800b7c4:	2301      	movne	r3, #1
 800b7c6:	2300      	moveq	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d016      	beq.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e8:	f043 0220 	orr.w	r2, r3, #32
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e021      	b.n	800b840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	0c1b      	lsrs	r3, r3, #16
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b01      	cmp	r3, #1
 800b804:	d10c      	bne.n	800b820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	43da      	mvns	r2, r3
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	4013      	ands	r3, r2
 800b812:	b29b      	uxth	r3, r3
 800b814:	2b00      	cmp	r3, #0
 800b816:	bf14      	ite	ne
 800b818:	2301      	movne	r3, #1
 800b81a:	2300      	moveq	r3, #0
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	e00b      	b.n	800b838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	43da      	mvns	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4013      	ands	r3, r2
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf14      	ite	ne
 800b832:	2301      	movne	r3, #1
 800b834:	2300      	moveq	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f47f af6d 	bne.w	800b718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b854:	e034      	b.n	800b8c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 f8e3 	bl	800ba22 <I2C_IsAcknowledgeFailed>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e034      	b.n	800b8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d028      	beq.n	800b8c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b86e:	f7fe f8c3 	bl	80099f8 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d302      	bcc.n	800b884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11d      	bne.n	800b8c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b88e:	2b80      	cmp	r3, #128	@ 0x80
 800b890:	d016      	beq.n	800b8c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2220      	movs	r2, #32
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ac:	f043 0220 	orr.w	r2, r3, #32
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e007      	b.n	800b8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ca:	2b80      	cmp	r3, #128	@ 0x80
 800b8cc:	d1c3      	bne.n	800b856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8e4:	e034      	b.n	800b950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f89b 	bl	800ba22 <I2C_IsAcknowledgeFailed>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e034      	b.n	800b960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fc:	d028      	beq.n	800b950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8fe:	f7fe f87b 	bl	80099f8 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d302      	bcc.n	800b914 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d11d      	bne.n	800b950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	f003 0304 	and.w	r3, r3, #4
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d016      	beq.n	800b950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2220      	movs	r2, #32
 800b92c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b93c:	f043 0220 	orr.w	r2, r3, #32
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e007      	b.n	800b960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	2b04      	cmp	r3, #4
 800b95c:	d1c3      	bne.n	800b8e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b974:	e049      	b.n	800ba0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b10      	cmp	r3, #16
 800b982:	d119      	bne.n	800b9b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f06f 0210 	mvn.w	r2, #16
 800b98c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2220      	movs	r2, #32
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e030      	b.n	800ba1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9b8:	f7fe f81e 	bl	80099f8 <HAL_GetTick>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d302      	bcc.n	800b9ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d11d      	bne.n	800ba0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d8:	2b40      	cmp	r3, #64	@ 0x40
 800b9da:	d016      	beq.n	800ba0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f6:	f043 0220 	orr.w	r2, r3, #32
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e007      	b.n	800ba1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba14:	2b40      	cmp	r3, #64	@ 0x40
 800ba16:	d1ae      	bne.n	800b976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba38:	d11b      	bne.n	800ba72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba5e:	f043 0204 	orr.w	r2, r3, #4
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e000      	b.n	800ba74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr
	...

0800ba80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e272      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 8087 	beq.w	800bbae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800baa0:	4b92      	ldr	r3, [pc, #584]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f003 030c 	and.w	r3, r3, #12
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d00c      	beq.n	800bac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800baac:	4b8f      	ldr	r3, [pc, #572]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f003 030c 	and.w	r3, r3, #12
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d112      	bne.n	800bade <HAL_RCC_OscConfig+0x5e>
 800bab8:	4b8c      	ldr	r3, [pc, #560]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bac4:	d10b      	bne.n	800bade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bac6:	4b89      	ldr	r3, [pc, #548]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d06c      	beq.n	800bbac <HAL_RCC_OscConfig+0x12c>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d168      	bne.n	800bbac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e24c      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bae6:	d106      	bne.n	800baf6 <HAL_RCC_OscConfig+0x76>
 800bae8:	4b80      	ldr	r3, [pc, #512]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a7f      	ldr	r2, [pc, #508]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800baee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	e02e      	b.n	800bb54 <HAL_RCC_OscConfig+0xd4>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10c      	bne.n	800bb18 <HAL_RCC_OscConfig+0x98>
 800bafe:	4b7b      	ldr	r3, [pc, #492]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a7a      	ldr	r2, [pc, #488]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	4b78      	ldr	r3, [pc, #480]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a77      	ldr	r2, [pc, #476]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	e01d      	b.n	800bb54 <HAL_RCC_OscConfig+0xd4>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb20:	d10c      	bne.n	800bb3c <HAL_RCC_OscConfig+0xbc>
 800bb22:	4b72      	ldr	r3, [pc, #456]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a71      	ldr	r2, [pc, #452]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	4b6f      	ldr	r3, [pc, #444]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a6e      	ldr	r2, [pc, #440]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	e00b      	b.n	800bb54 <HAL_RCC_OscConfig+0xd4>
 800bb3c:	4b6b      	ldr	r3, [pc, #428]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a6a      	ldr	r2, [pc, #424]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	4b68      	ldr	r3, [pc, #416]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a67      	ldr	r2, [pc, #412]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d013      	beq.n	800bb84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb5c:	f7fd ff4c 	bl	80099f8 <HAL_GetTick>
 800bb60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb64:	f7fd ff48 	bl	80099f8 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b64      	cmp	r3, #100	@ 0x64
 800bb70:	d901      	bls.n	800bb76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e200      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb76:	4b5d      	ldr	r3, [pc, #372]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0f0      	beq.n	800bb64 <HAL_RCC_OscConfig+0xe4>
 800bb82:	e014      	b.n	800bbae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb84:	f7fd ff38 	bl	80099f8 <HAL_GetTick>
 800bb88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb8a:	e008      	b.n	800bb9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb8c:	f7fd ff34 	bl	80099f8 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b64      	cmp	r3, #100	@ 0x64
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e1ec      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb9e:	4b53      	ldr	r3, [pc, #332]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f0      	bne.n	800bb8c <HAL_RCC_OscConfig+0x10c>
 800bbaa:	e000      	b.n	800bbae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d063      	beq.n	800bc82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bbba:	4b4c      	ldr	r3, [pc, #304]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f003 030c 	and.w	r3, r3, #12
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00b      	beq.n	800bbde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bbc6:	4b49      	ldr	r3, [pc, #292]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f003 030c 	and.w	r3, r3, #12
 800bbce:	2b08      	cmp	r3, #8
 800bbd0:	d11c      	bne.n	800bc0c <HAL_RCC_OscConfig+0x18c>
 800bbd2:	4b46      	ldr	r3, [pc, #280]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d116      	bne.n	800bc0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbde:	4b43      	ldr	r3, [pc, #268]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x176>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d001      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e1c0      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbf6:	4b3d      	ldr	r3, [pc, #244]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	00db      	lsls	r3, r3, #3
 800bc04:	4939      	ldr	r1, [pc, #228]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc0a:	e03a      	b.n	800bc82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d020      	beq.n	800bc56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc14:	4b36      	ldr	r3, [pc, #216]	@ (800bcf0 <HAL_RCC_OscConfig+0x270>)
 800bc16:	2201      	movs	r2, #1
 800bc18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc1a:	f7fd feed 	bl	80099f8 <HAL_GetTick>
 800bc1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc20:	e008      	b.n	800bc34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc22:	f7fd fee9 	bl	80099f8 <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d901      	bls.n	800bc34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e1a1      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc34:	4b2d      	ldr	r3, [pc, #180]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0f0      	beq.n	800bc22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc40:	4b2a      	ldr	r3, [pc, #168]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	4927      	ldr	r1, [pc, #156]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	600b      	str	r3, [r1, #0]
 800bc54:	e015      	b.n	800bc82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc56:	4b26      	ldr	r3, [pc, #152]	@ (800bcf0 <HAL_RCC_OscConfig+0x270>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc5c:	f7fd fecc 	bl	80099f8 <HAL_GetTick>
 800bc60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc62:	e008      	b.n	800bc76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc64:	f7fd fec8 	bl	80099f8 <HAL_GetTick>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d901      	bls.n	800bc76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e180      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc76:	4b1d      	ldr	r3, [pc, #116]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1f0      	bne.n	800bc64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d03a      	beq.n	800bd04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d019      	beq.n	800bcca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc96:	4b17      	ldr	r3, [pc, #92]	@ (800bcf4 <HAL_RCC_OscConfig+0x274>)
 800bc98:	2201      	movs	r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc9c:	f7fd feac 	bl	80099f8 <HAL_GetTick>
 800bca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bca2:	e008      	b.n	800bcb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bca4:	f7fd fea8 	bl	80099f8 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d901      	bls.n	800bcb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e160      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcec <HAL_RCC_OscConfig+0x26c>)
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcba:	f003 0302 	and.w	r3, r3, #2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0f0      	beq.n	800bca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	f000 face 	bl	800c264 <RCC_Delay>
 800bcc8:	e01c      	b.n	800bd04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcca:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf4 <HAL_RCC_OscConfig+0x274>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcd0:	f7fd fe92 	bl	80099f8 <HAL_GetTick>
 800bcd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcd6:	e00f      	b.n	800bcf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcd8:	f7fd fe8e 	bl	80099f8 <HAL_GetTick>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d908      	bls.n	800bcf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e146      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
 800bcea:	bf00      	nop
 800bcec:	40021000 	.word	0x40021000
 800bcf0:	42420000 	.word	0x42420000
 800bcf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcf8:	4b92      	ldr	r3, [pc, #584]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcfc:	f003 0302 	and.w	r3, r3, #2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1e9      	bne.n	800bcd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0304 	and.w	r3, r3, #4
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80a6 	beq.w	800be5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd12:	2300      	movs	r3, #0
 800bd14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd16:	4b8b      	ldr	r3, [pc, #556]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10d      	bne.n	800bd3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd22:	4b88      	ldr	r3, [pc, #544]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	4a87      	ldr	r2, [pc, #540]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd2c:	61d3      	str	r3, [r2, #28]
 800bd2e:	4b85      	ldr	r3, [pc, #532]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd36:	60bb      	str	r3, [r7, #8]
 800bd38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd3e:	4b82      	ldr	r3, [pc, #520]	@ (800bf48 <HAL_RCC_OscConfig+0x4c8>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d118      	bne.n	800bd7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd4a:	4b7f      	ldr	r3, [pc, #508]	@ (800bf48 <HAL_RCC_OscConfig+0x4c8>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a7e      	ldr	r2, [pc, #504]	@ (800bf48 <HAL_RCC_OscConfig+0x4c8>)
 800bd50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd56:	f7fd fe4f 	bl	80099f8 <HAL_GetTick>
 800bd5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd5c:	e008      	b.n	800bd70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd5e:	f7fd fe4b 	bl	80099f8 <HAL_GetTick>
 800bd62:	4602      	mov	r2, r0
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	2b64      	cmp	r3, #100	@ 0x64
 800bd6a:	d901      	bls.n	800bd70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e103      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd70:	4b75      	ldr	r3, [pc, #468]	@ (800bf48 <HAL_RCC_OscConfig+0x4c8>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0f0      	beq.n	800bd5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d106      	bne.n	800bd92 <HAL_RCC_OscConfig+0x312>
 800bd84:	4b6f      	ldr	r3, [pc, #444]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	4a6e      	ldr	r2, [pc, #440]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd8a:	f043 0301 	orr.w	r3, r3, #1
 800bd8e:	6213      	str	r3, [r2, #32]
 800bd90:	e02d      	b.n	800bdee <HAL_RCC_OscConfig+0x36e>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10c      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x334>
 800bd9a:	4b6a      	ldr	r3, [pc, #424]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	4a69      	ldr	r2, [pc, #420]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bda0:	f023 0301 	bic.w	r3, r3, #1
 800bda4:	6213      	str	r3, [r2, #32]
 800bda6:	4b67      	ldr	r3, [pc, #412]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	4a66      	ldr	r2, [pc, #408]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdac:	f023 0304 	bic.w	r3, r3, #4
 800bdb0:	6213      	str	r3, [r2, #32]
 800bdb2:	e01c      	b.n	800bdee <HAL_RCC_OscConfig+0x36e>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	2b05      	cmp	r3, #5
 800bdba:	d10c      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x356>
 800bdbc:	4b61      	ldr	r3, [pc, #388]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdbe:	6a1b      	ldr	r3, [r3, #32]
 800bdc0:	4a60      	ldr	r2, [pc, #384]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdc2:	f043 0304 	orr.w	r3, r3, #4
 800bdc6:	6213      	str	r3, [r2, #32]
 800bdc8:	4b5e      	ldr	r3, [pc, #376]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	4a5d      	ldr	r2, [pc, #372]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdce:	f043 0301 	orr.w	r3, r3, #1
 800bdd2:	6213      	str	r3, [r2, #32]
 800bdd4:	e00b      	b.n	800bdee <HAL_RCC_OscConfig+0x36e>
 800bdd6:	4b5b      	ldr	r3, [pc, #364]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	4a5a      	ldr	r2, [pc, #360]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	6213      	str	r3, [r2, #32]
 800bde2:	4b58      	ldr	r3, [pc, #352]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	4a57      	ldr	r2, [pc, #348]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bde8:	f023 0304 	bic.w	r3, r3, #4
 800bdec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d015      	beq.n	800be22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdf6:	f7fd fdff 	bl	80099f8 <HAL_GetTick>
 800bdfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdfc:	e00a      	b.n	800be14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdfe:	f7fd fdfb 	bl	80099f8 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d901      	bls.n	800be14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e0b1      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be14:	4b4b      	ldr	r3, [pc, #300]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d0ee      	beq.n	800bdfe <HAL_RCC_OscConfig+0x37e>
 800be20:	e014      	b.n	800be4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be22:	f7fd fde9 	bl	80099f8 <HAL_GetTick>
 800be26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be28:	e00a      	b.n	800be40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2a:	f7fd fde5 	bl	80099f8 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be38:	4293      	cmp	r3, r2
 800be3a:	d901      	bls.n	800be40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e09b      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be40:	4b40      	ldr	r3, [pc, #256]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1ee      	bne.n	800be2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d105      	bne.n	800be5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be52:	4b3c      	ldr	r3, [pc, #240]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	4a3b      	ldr	r2, [pc, #236]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 8087 	beq.w	800bf76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800be68:	4b36      	ldr	r3, [pc, #216]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	f003 030c 	and.w	r3, r3, #12
 800be70:	2b08      	cmp	r3, #8
 800be72:	d061      	beq.n	800bf38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69db      	ldr	r3, [r3, #28]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d146      	bne.n	800bf0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be7c:	4b33      	ldr	r3, [pc, #204]	@ (800bf4c <HAL_RCC_OscConfig+0x4cc>)
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be82:	f7fd fdb9 	bl	80099f8 <HAL_GetTick>
 800be86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be88:	e008      	b.n	800be9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be8a:	f7fd fdb5 	bl	80099f8 <HAL_GetTick>
 800be8e:	4602      	mov	r2, r0
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	2b02      	cmp	r3, #2
 800be96:	d901      	bls.n	800be9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800be98:	2303      	movs	r3, #3
 800be9a:	e06d      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be9c:	4b29      	ldr	r3, [pc, #164]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1f0      	bne.n	800be8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beb0:	d108      	bne.n	800bec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800beb2:	4b24      	ldr	r3, [pc, #144]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	4921      	ldr	r1, [pc, #132]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bec4:	4b1f      	ldr	r3, [pc, #124]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a19      	ldr	r1, [r3, #32]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed4:	430b      	orrs	r3, r1
 800bed6:	491b      	ldr	r1, [pc, #108]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bed8:	4313      	orrs	r3, r2
 800beda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bedc:	4b1b      	ldr	r3, [pc, #108]	@ (800bf4c <HAL_RCC_OscConfig+0x4cc>)
 800bede:	2201      	movs	r2, #1
 800bee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bee2:	f7fd fd89 	bl	80099f8 <HAL_GetTick>
 800bee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bee8:	e008      	b.n	800befc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beea:	f7fd fd85 	bl	80099f8 <HAL_GetTick>
 800beee:	4602      	mov	r2, r0
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d901      	bls.n	800befc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e03d      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800befc:	4b11      	ldr	r3, [pc, #68]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0f0      	beq.n	800beea <HAL_RCC_OscConfig+0x46a>
 800bf08:	e035      	b.n	800bf76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf0a:	4b10      	ldr	r3, [pc, #64]	@ (800bf4c <HAL_RCC_OscConfig+0x4cc>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf10:	f7fd fd72 	bl	80099f8 <HAL_GetTick>
 800bf14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf16:	e008      	b.n	800bf2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf18:	f7fd fd6e 	bl	80099f8 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d901      	bls.n	800bf2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e026      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf2a:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <HAL_RCC_OscConfig+0x4c4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1f0      	bne.n	800bf18 <HAL_RCC_OscConfig+0x498>
 800bf36:	e01e      	b.n	800bf76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d107      	bne.n	800bf50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e019      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
 800bf44:	40021000 	.word	0x40021000
 800bf48:	40007000 	.word	0x40007000
 800bf4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bf50:	4b0b      	ldr	r3, [pc, #44]	@ (800bf80 <HAL_RCC_OscConfig+0x500>)
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d106      	bne.n	800bf72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d001      	beq.n	800bf76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	40021000 	.word	0x40021000

0800bf84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0d0      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf98:	4b6a      	ldr	r3, [pc, #424]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0307 	and.w	r3, r3, #7
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d910      	bls.n	800bfc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfa6:	4b67      	ldr	r3, [pc, #412]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f023 0207 	bic.w	r2, r3, #7
 800bfae:	4965      	ldr	r1, [pc, #404]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfb6:	4b63      	ldr	r3, [pc, #396]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0307 	and.w	r3, r3, #7
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d001      	beq.n	800bfc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e0b8      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d020      	beq.n	800c016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfe0:	4b59      	ldr	r3, [pc, #356]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	4a58      	ldr	r2, [pc, #352]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800bfe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bfea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0308 	and.w	r3, r3, #8
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bff8:	4b53      	ldr	r3, [pc, #332]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4a52      	ldr	r2, [pc, #328]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800bffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c004:	4b50      	ldr	r3, [pc, #320]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	494d      	ldr	r1, [pc, #308]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c012:	4313      	orrs	r3, r2
 800c014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d040      	beq.n	800c0a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d107      	bne.n	800c03a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c02a:	4b47      	ldr	r3, [pc, #284]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d115      	bne.n	800c062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e07f      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d107      	bne.n	800c052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c042:	4b41      	ldr	r3, [pc, #260]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e073      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c052:	4b3d      	ldr	r3, [pc, #244]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e06b      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c062:	4b39      	ldr	r3, [pc, #228]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f023 0203 	bic.w	r2, r3, #3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	4936      	ldr	r1, [pc, #216]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c070:	4313      	orrs	r3, r2
 800c072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c074:	f7fd fcc0 	bl	80099f8 <HAL_GetTick>
 800c078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c07a:	e00a      	b.n	800c092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c07c:	f7fd fcbc 	bl	80099f8 <HAL_GetTick>
 800c080:	4602      	mov	r2, r0
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d901      	bls.n	800c092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e053      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c092:	4b2d      	ldr	r3, [pc, #180]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f003 020c 	and.w	r2, r3, #12
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d1eb      	bne.n	800c07c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0a4:	4b27      	ldr	r3, [pc, #156]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d210      	bcs.n	800c0d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0b2:	4b24      	ldr	r3, [pc, #144]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f023 0207 	bic.w	r2, r3, #7
 800c0ba:	4922      	ldr	r1, [pc, #136]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0c2:	4b20      	ldr	r3, [pc, #128]	@ (800c144 <HAL_RCC_ClockConfig+0x1c0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d001      	beq.n	800c0d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e032      	b.n	800c13a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0304 	and.w	r3, r3, #4
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0e0:	4b19      	ldr	r3, [pc, #100]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	4916      	ldr	r1, [pc, #88]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0308 	and.w	r3, r3, #8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d009      	beq.n	800c112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c0fe:	4b12      	ldr	r3, [pc, #72]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	490e      	ldr	r1, [pc, #56]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c10e:	4313      	orrs	r3, r2
 800c110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c112:	f000 f821 	bl	800c158 <HAL_RCC_GetSysClockFreq>
 800c116:	4602      	mov	r2, r0
 800c118:	4b0b      	ldr	r3, [pc, #44]	@ (800c148 <HAL_RCC_ClockConfig+0x1c4>)
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	091b      	lsrs	r3, r3, #4
 800c11e:	f003 030f 	and.w	r3, r3, #15
 800c122:	490a      	ldr	r1, [pc, #40]	@ (800c14c <HAL_RCC_ClockConfig+0x1c8>)
 800c124:	5ccb      	ldrb	r3, [r1, r3]
 800c126:	fa22 f303 	lsr.w	r3, r2, r3
 800c12a:	4a09      	ldr	r2, [pc, #36]	@ (800c150 <HAL_RCC_ClockConfig+0x1cc>)
 800c12c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c12e:	4b09      	ldr	r3, [pc, #36]	@ (800c154 <HAL_RCC_ClockConfig+0x1d0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd fc1e 	bl	8009974 <HAL_InitTick>

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	40022000 	.word	0x40022000
 800c148:	40021000 	.word	0x40021000
 800c14c:	0800eb70 	.word	0x0800eb70
 800c150:	20000f74 	.word	0x20000f74
 800c154:	20000f78 	.word	0x20000f78

0800c158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c158:	b480      	push	{r7}
 800c15a:	b087      	sub	sp, #28
 800c15c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
 800c162:	2300      	movs	r3, #0
 800c164:	60bb      	str	r3, [r7, #8]
 800c166:	2300      	movs	r3, #0
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	2300      	movs	r3, #0
 800c16c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c172:	4b1e      	ldr	r3, [pc, #120]	@ (800c1ec <HAL_RCC_GetSysClockFreq+0x94>)
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f003 030c 	and.w	r3, r3, #12
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d002      	beq.n	800c188 <HAL_RCC_GetSysClockFreq+0x30>
 800c182:	2b08      	cmp	r3, #8
 800c184:	d003      	beq.n	800c18e <HAL_RCC_GetSysClockFreq+0x36>
 800c186:	e027      	b.n	800c1d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c188:	4b19      	ldr	r3, [pc, #100]	@ (800c1f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c18a:	613b      	str	r3, [r7, #16]
      break;
 800c18c:	e027      	b.n	800c1de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	0c9b      	lsrs	r3, r3, #18
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	4a17      	ldr	r2, [pc, #92]	@ (800c1f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c198:	5cd3      	ldrb	r3, [r2, r3]
 800c19a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d010      	beq.n	800c1c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c1a6:	4b11      	ldr	r3, [pc, #68]	@ (800c1ec <HAL_RCC_GetSysClockFreq+0x94>)
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	0c5b      	lsrs	r3, r3, #17
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	4a11      	ldr	r2, [pc, #68]	@ (800c1f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c1b2:	5cd3      	ldrb	r3, [r2, r3]
 800c1b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c1f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1ba:	fb03 f202 	mul.w	r2, r3, r2
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c4:	617b      	str	r3, [r7, #20]
 800c1c6:	e004      	b.n	800c1d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1cc:	fb02 f303 	mul.w	r3, r2, r3
 800c1d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	613b      	str	r3, [r7, #16]
      break;
 800c1d6:	e002      	b.n	800c1de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c1d8:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1da:	613b      	str	r3, [r7, #16]
      break;
 800c1dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1de:	693b      	ldr	r3, [r7, #16]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bc80      	pop	{r7}
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	40021000 	.word	0x40021000
 800c1f0:	007a1200 	.word	0x007a1200
 800c1f4:	0800eb88 	.word	0x0800eb88
 800c1f8:	0800eb98 	.word	0x0800eb98
 800c1fc:	003d0900 	.word	0x003d0900

0800c200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c200:	b480      	push	{r7}
 800c202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c204:	4b02      	ldr	r3, [pc, #8]	@ (800c210 <HAL_RCC_GetHCLKFreq+0x10>)
 800c206:	681b      	ldr	r3, [r3, #0]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc80      	pop	{r7}
 800c20e:	4770      	bx	lr
 800c210:	20000f74 	.word	0x20000f74

0800c214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c218:	f7ff fff2 	bl	800c200 <HAL_RCC_GetHCLKFreq>
 800c21c:	4602      	mov	r2, r0
 800c21e:	4b05      	ldr	r3, [pc, #20]	@ (800c234 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	0a1b      	lsrs	r3, r3, #8
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	4903      	ldr	r1, [pc, #12]	@ (800c238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c22a:	5ccb      	ldrb	r3, [r1, r3]
 800c22c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c230:	4618      	mov	r0, r3
 800c232:	bd80      	pop	{r7, pc}
 800c234:	40021000 	.word	0x40021000
 800c238:	0800eb80 	.word	0x0800eb80

0800c23c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c240:	f7ff ffde 	bl	800c200 <HAL_RCC_GetHCLKFreq>
 800c244:	4602      	mov	r2, r0
 800c246:	4b05      	ldr	r3, [pc, #20]	@ (800c25c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	0adb      	lsrs	r3, r3, #11
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	4903      	ldr	r1, [pc, #12]	@ (800c260 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c252:	5ccb      	ldrb	r3, [r1, r3]
 800c254:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c258:	4618      	mov	r0, r3
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	40021000 	.word	0x40021000
 800c260:	0800eb80 	.word	0x0800eb80

0800c264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c26c:	4b0a      	ldr	r3, [pc, #40]	@ (800c298 <RCC_Delay+0x34>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a0a      	ldr	r2, [pc, #40]	@ (800c29c <RCC_Delay+0x38>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	0a5b      	lsrs	r3, r3, #9
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c280:	bf00      	nop
  }
  while (Delay --);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	1e5a      	subs	r2, r3, #1
 800c286:	60fa      	str	r2, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f9      	bne.n	800c280 <RCC_Delay+0x1c>
}
 800c28c:	bf00      	nop
 800c28e:	bf00      	nop
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	bc80      	pop	{r7}
 800c296:	4770      	bx	lr
 800c298:	20000f74 	.word	0x20000f74
 800c29c:	10624dd3 	.word	0x10624dd3

0800c2a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e041      	b.n	800c336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7fd fa22 	bl	8009710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f000 fa82 	bl	800c7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b01      	cmp	r3, #1
 800c352:	d001      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e044      	b.n	800c3e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2202      	movs	r2, #2
 800c35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f042 0201 	orr.w	r2, r2, #1
 800c36e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a1d      	ldr	r2, [pc, #116]	@ (800c3ec <HAL_TIM_Base_Start_IT+0xac>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d018      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x6c>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d013      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x6c>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38c:	d00e      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x6c>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a18      	ldr	r2, [pc, #96]	@ (800c3f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d009      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x6c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a16      	ldr	r2, [pc, #88]	@ (800c3f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d004      	beq.n	800c3ac <HAL_TIM_Base_Start_IT+0x6c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a15      	ldr	r2, [pc, #84]	@ (800c3fc <HAL_TIM_Base_Start_IT+0xbc>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d111      	bne.n	800c3d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b06      	cmp	r3, #6
 800c3bc:	d010      	beq.n	800c3e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f042 0201 	orr.w	r2, r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ce:	e007      	b.n	800c3e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f042 0201 	orr.w	r2, r2, #1
 800c3de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr
 800c3ec:	40012c00 	.word	0x40012c00
 800c3f0:	40013400 	.word	0x40013400
 800c3f4:	40000400 	.word	0x40000400
 800c3f8:	40000800 	.word	0x40000800
 800c3fc:	40000c00 	.word	0x40000c00

0800c400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f003 0302 	and.w	r3, r3, #2
 800c412:	2b02      	cmp	r3, #2
 800c414:	d122      	bne.n	800c45c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b02      	cmp	r3, #2
 800c422:	d11b      	bne.n	800c45c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f06f 0202 	mvn.w	r2, #2
 800c42c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	f003 0303 	and.w	r3, r3, #3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f9b4 	bl	800c7b0 <HAL_TIM_IC_CaptureCallback>
 800c448:	e005      	b.n	800c456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f9a7 	bl	800c79e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f9b6 	bl	800c7c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f003 0304 	and.w	r3, r3, #4
 800c466:	2b04      	cmp	r3, #4
 800c468:	d122      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f003 0304 	and.w	r3, r3, #4
 800c474:	2b04      	cmp	r3, #4
 800c476:	d11b      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f06f 0204 	mvn.w	r2, #4
 800c480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2202      	movs	r2, #2
 800c486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f98a 	bl	800c7b0 <HAL_TIM_IC_CaptureCallback>
 800c49c:	e005      	b.n	800c4aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f97d 	bl	800c79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f98c 	bl	800c7c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0308 	and.w	r3, r3, #8
 800c4ba:	2b08      	cmp	r3, #8
 800c4bc:	d122      	bne.n	800c504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0308 	and.w	r3, r3, #8
 800c4c8:	2b08      	cmp	r3, #8
 800c4ca:	d11b      	bne.n	800c504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f06f 0208 	mvn.w	r2, #8
 800c4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2204      	movs	r2, #4
 800c4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f960 	bl	800c7b0 <HAL_TIM_IC_CaptureCallback>
 800c4f0:	e005      	b.n	800c4fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f953 	bl	800c79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f962 	bl	800c7c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0310 	and.w	r3, r3, #16
 800c50e:	2b10      	cmp	r3, #16
 800c510:	d122      	bne.n	800c558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f003 0310 	and.w	r3, r3, #16
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d11b      	bne.n	800c558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f06f 0210 	mvn.w	r2, #16
 800c528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2208      	movs	r2, #8
 800c52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	69db      	ldr	r3, [r3, #28]
 800c536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d003      	beq.n	800c546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f936 	bl	800c7b0 <HAL_TIM_IC_CaptureCallback>
 800c544:	e005      	b.n	800c552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f929 	bl	800c79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f938 	bl	800c7c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b01      	cmp	r3, #1
 800c564:	d10e      	bne.n	800c584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b01      	cmp	r3, #1
 800c572:	d107      	bne.n	800c584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f06f 0201 	mvn.w	r2, #1
 800c57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7fc fd5e 	bl	8009040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c58e:	2b80      	cmp	r3, #128	@ 0x80
 800c590:	d10e      	bne.n	800c5b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c59c:	2b80      	cmp	r3, #128	@ 0x80
 800c59e:	d107      	bne.n	800c5b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 faa1 	bl	800caf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ba:	2b40      	cmp	r3, #64	@ 0x40
 800c5bc:	d10e      	bne.n	800c5dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5c8:	2b40      	cmp	r3, #64	@ 0x40
 800c5ca:	d107      	bne.n	800c5dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f8fc 	bl	800c7d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b20      	cmp	r3, #32
 800c5e8:	d10e      	bne.n	800c608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b20      	cmp	r3, #32
 800c5f6:	d107      	bne.n	800c608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f06f 0220 	mvn.w	r2, #32
 800c600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa6c 	bl	800cae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <HAL_TIM_ConfigClockSource+0x1c>
 800c628:	2302      	movs	r3, #2
 800c62a:	e0b4      	b.n	800c796 <HAL_TIM_ConfigClockSource+0x186>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c64a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c664:	d03e      	beq.n	800c6e4 <HAL_TIM_ConfigClockSource+0xd4>
 800c666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c66a:	f200 8087 	bhi.w	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c66e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c672:	f000 8086 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x172>
 800c676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c67a:	d87f      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c67c:	2b70      	cmp	r3, #112	@ 0x70
 800c67e:	d01a      	beq.n	800c6b6 <HAL_TIM_ConfigClockSource+0xa6>
 800c680:	2b70      	cmp	r3, #112	@ 0x70
 800c682:	d87b      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c684:	2b60      	cmp	r3, #96	@ 0x60
 800c686:	d050      	beq.n	800c72a <HAL_TIM_ConfigClockSource+0x11a>
 800c688:	2b60      	cmp	r3, #96	@ 0x60
 800c68a:	d877      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c68c:	2b50      	cmp	r3, #80	@ 0x50
 800c68e:	d03c      	beq.n	800c70a <HAL_TIM_ConfigClockSource+0xfa>
 800c690:	2b50      	cmp	r3, #80	@ 0x50
 800c692:	d873      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c694:	2b40      	cmp	r3, #64	@ 0x40
 800c696:	d058      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x13a>
 800c698:	2b40      	cmp	r3, #64	@ 0x40
 800c69a:	d86f      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c69c:	2b30      	cmp	r3, #48	@ 0x30
 800c69e:	d064      	beq.n	800c76a <HAL_TIM_ConfigClockSource+0x15a>
 800c6a0:	2b30      	cmp	r3, #48	@ 0x30
 800c6a2:	d86b      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	d060      	beq.n	800c76a <HAL_TIM_ConfigClockSource+0x15a>
 800c6a8:	2b20      	cmp	r3, #32
 800c6aa:	d867      	bhi.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d05c      	beq.n	800c76a <HAL_TIM_ConfigClockSource+0x15a>
 800c6b0:	2b10      	cmp	r3, #16
 800c6b2:	d05a      	beq.n	800c76a <HAL_TIM_ConfigClockSource+0x15a>
 800c6b4:	e062      	b.n	800c77c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6c6:	f000 f980 	bl	800c9ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c6d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	609a      	str	r2, [r3, #8]
      break;
 800c6e2:	e04f      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6f4:	f000 f969 	bl	800c9ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689a      	ldr	r2, [r3, #8]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c706:	609a      	str	r2, [r3, #8]
      break;
 800c708:	e03c      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c716:	461a      	mov	r2, r3
 800c718:	f000 f8e0 	bl	800c8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2150      	movs	r1, #80	@ 0x50
 800c722:	4618      	mov	r0, r3
 800c724:	f000 f937 	bl	800c996 <TIM_ITRx_SetConfig>
      break;
 800c728:	e02c      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c736:	461a      	mov	r2, r3
 800c738:	f000 f8fe 	bl	800c938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2160      	movs	r1, #96	@ 0x60
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f927 	bl	800c996 <TIM_ITRx_SetConfig>
      break;
 800c748:	e01c      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c756:	461a      	mov	r2, r3
 800c758:	f000 f8c0 	bl	800c8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2140      	movs	r1, #64	@ 0x40
 800c762:	4618      	mov	r0, r3
 800c764:	f000 f917 	bl	800c996 <TIM_ITRx_SetConfig>
      break;
 800c768:	e00c      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4619      	mov	r1, r3
 800c774:	4610      	mov	r0, r2
 800c776:	f000 f90e 	bl	800c996 <TIM_ITRx_SetConfig>
      break;
 800c77a:	e003      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	73fb      	strb	r3, [r7, #15]
      break;
 800c780:	e000      	b.n	800c784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7a6:	bf00      	nop
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bc80      	pop	{r7}
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr

0800c7c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7ca:	bf00      	nop
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bc80      	pop	{r7}
 800c7d2:	4770      	bx	lr

0800c7d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bc80      	pop	{r7}
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a33      	ldr	r2, [pc, #204]	@ (800c8c8 <TIM_Base_SetConfig+0xe0>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d013      	beq.n	800c828 <TIM_Base_SetConfig+0x40>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a32      	ldr	r2, [pc, #200]	@ (800c8cc <TIM_Base_SetConfig+0xe4>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d00f      	beq.n	800c828 <TIM_Base_SetConfig+0x40>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80e:	d00b      	beq.n	800c828 <TIM_Base_SetConfig+0x40>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a2f      	ldr	r2, [pc, #188]	@ (800c8d0 <TIM_Base_SetConfig+0xe8>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d007      	beq.n	800c828 <TIM_Base_SetConfig+0x40>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a2e      	ldr	r2, [pc, #184]	@ (800c8d4 <TIM_Base_SetConfig+0xec>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d003      	beq.n	800c828 <TIM_Base_SetConfig+0x40>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a2d      	ldr	r2, [pc, #180]	@ (800c8d8 <TIM_Base_SetConfig+0xf0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d108      	bne.n	800c83a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c82e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a22      	ldr	r2, [pc, #136]	@ (800c8c8 <TIM_Base_SetConfig+0xe0>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d013      	beq.n	800c86a <TIM_Base_SetConfig+0x82>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a21      	ldr	r2, [pc, #132]	@ (800c8cc <TIM_Base_SetConfig+0xe4>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d00f      	beq.n	800c86a <TIM_Base_SetConfig+0x82>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c850:	d00b      	beq.n	800c86a <TIM_Base_SetConfig+0x82>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a1e      	ldr	r2, [pc, #120]	@ (800c8d0 <TIM_Base_SetConfig+0xe8>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d007      	beq.n	800c86a <TIM_Base_SetConfig+0x82>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a1d      	ldr	r2, [pc, #116]	@ (800c8d4 <TIM_Base_SetConfig+0xec>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d003      	beq.n	800c86a <TIM_Base_SetConfig+0x82>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a1c      	ldr	r2, [pc, #112]	@ (800c8d8 <TIM_Base_SetConfig+0xf0>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d108      	bne.n	800c87c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	4313      	orrs	r3, r2
 800c87a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a09      	ldr	r2, [pc, #36]	@ (800c8c8 <TIM_Base_SetConfig+0xe0>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d003      	beq.n	800c8b0 <TIM_Base_SetConfig+0xc8>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a08      	ldr	r2, [pc, #32]	@ (800c8cc <TIM_Base_SetConfig+0xe4>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d103      	bne.n	800c8b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	615a      	str	r2, [r3, #20]
}
 800c8be:	bf00      	nop
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bc80      	pop	{r7}
 800c8c6:	4770      	bx	lr
 800c8c8:	40012c00 	.word	0x40012c00
 800c8cc:	40013400 	.word	0x40013400
 800c8d0:	40000400 	.word	0x40000400
 800c8d4:	40000800 	.word	0x40000800
 800c8d8:	40000c00 	.word	0x40000c00

0800c8dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b087      	sub	sp, #28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f023 0201 	bic.w	r2, r3, #1
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	4313      	orrs	r3, r2
 800c910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f023 030a 	bic.w	r3, r3, #10
 800c918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	4313      	orrs	r3, r2
 800c920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	bc80      	pop	{r7}
 800c936:	4770      	bx	lr

0800c938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c938:	b480      	push	{r7}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6a1b      	ldr	r3, [r3, #32]
 800c948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	f023 0210 	bic.w	r2, r3, #16
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	031b      	lsls	r3, r3, #12
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	011b      	lsls	r3, r3, #4
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	621a      	str	r2, [r3, #32]
}
 800c98c:	bf00      	nop
 800c98e:	371c      	adds	r7, #28
 800c990:	46bd      	mov	sp, r7
 800c992:	bc80      	pop	{r7}
 800c994:	4770      	bx	lr

0800c996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c996:	b480      	push	{r7}
 800c998:	b085      	sub	sp, #20
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f043 0307 	orr.w	r3, r3, #7
 800c9b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	609a      	str	r2, [r3, #8]
}
 800c9c0:	bf00      	nop
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bc80      	pop	{r7}
 800c9c8:	4770      	bx	lr

0800c9ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b087      	sub	sp, #28
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
 800c9d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	021a      	lsls	r2, r3, #8
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	609a      	str	r2, [r3, #8]
}
 800c9fe:	bf00      	nop
 800ca00:	371c      	adds	r7, #28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bc80      	pop	{r7}
 800ca06:	4770      	bx	lr

0800ca08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d101      	bne.n	800ca20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	e050      	b.n	800cac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cacc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d018      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a19      	ldr	r2, [pc, #100]	@ (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d013      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca76:	d00e      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a15      	ldr	r2, [pc, #84]	@ (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d009      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a14      	ldr	r2, [pc, #80]	@ (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d004      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a12      	ldr	r2, [pc, #72]	@ (800cadc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d10c      	bne.n	800cab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bc80      	pop	{r7}
 800caca:	4770      	bx	lr
 800cacc:	40012c00 	.word	0x40012c00
 800cad0:	40013400 	.word	0x40013400
 800cad4:	40000400 	.word	0x40000400
 800cad8:	40000800 	.word	0x40000800
 800cadc:	40000c00 	.word	0x40000c00

0800cae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	bc80      	pop	{r7}
 800caf0:	4770      	bx	lr

0800caf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b083      	sub	sp, #12
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bc80      	pop	{r7}
 800cb02:	4770      	bx	lr

0800cb04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e042      	b.n	800cb9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d106      	bne.n	800cb30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fc fe16 	bl	800975c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2224      	movs	r2, #36	@ 0x24
 800cb34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68da      	ldr	r2, [r3, #12]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fcb5 	bl	800d4b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	691a      	ldr	r2, [r3, #16]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	695a      	ldr	r2, [r3, #20]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68da      	ldr	r2, [r3, #12]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b20      	cmp	r3, #32
 800cbbc:	d121      	bne.n	800cc02 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <HAL_UART_Transmit_IT+0x26>
 800cbc4:	88fb      	ldrh	r3, [r7, #6]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e01a      	b.n	800cc04 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	88fa      	ldrh	r2, [r7, #6]
 800cbd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	88fa      	ldrh	r2, [r7, #6]
 800cbde:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2221      	movs	r2, #33	@ 0x21
 800cbea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cbfc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e000      	b.n	800cc04 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cc02:	2302      	movs	r3, #2
  }
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bc80      	pop	{r7}
 800cc0c:	4770      	bx	lr
	...

0800cc10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b0ba      	sub	sp, #232	@ 0xe8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc46:	f003 030f 	and.w	r3, r3, #15
 800cc4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cc4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10f      	bne.n	800cc76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc5a:	f003 0320 	and.w	r3, r3, #32
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <HAL_UART_IRQHandler+0x66>
 800cc62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc66:	f003 0320 	and.w	r3, r3, #32
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fb63 	bl	800d33a <UART_Receive_IT>
      return;
 800cc74:	e25b      	b.n	800d12e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cc76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 80de 	beq.w	800ce3c <HAL_UART_IRQHandler+0x22c>
 800cc80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cc8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 80d1 	beq.w	800ce3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00b      	beq.n	800ccbe <HAL_UART_IRQHandler+0xae>
 800cca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d005      	beq.n	800ccbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb6:	f043 0201 	orr.w	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00b      	beq.n	800cce2 <HAL_UART_IRQHandler+0xd2>
 800ccca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d005      	beq.n	800cce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccda:	f043 0202 	orr.w	r2, r3, #2
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00b      	beq.n	800cd06 <HAL_UART_IRQHandler+0xf6>
 800ccee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d005      	beq.n	800cd06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccfe:	f043 0204 	orr.w	r2, r3, #4
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd0a:	f003 0308 	and.w	r3, r3, #8
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d011      	beq.n	800cd36 <HAL_UART_IRQHandler+0x126>
 800cd12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d105      	bne.n	800cd2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd2e:	f043 0208 	orr.w	r2, r3, #8
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 81f2 	beq.w	800d124 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d008      	beq.n	800cd5e <HAL_UART_IRQHandler+0x14e>
 800cd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd50:	f003 0320 	and.w	r3, r3, #32
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 faee 	bl	800d33a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bf14      	ite	ne
 800cd6c:	2301      	movne	r3, #1
 800cd6e:	2300      	moveq	r3, #0
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd7a:	f003 0308 	and.w	r3, r3, #8
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <HAL_UART_IRQHandler+0x17a>
 800cd82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d04f      	beq.n	800ce2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f9f8 	bl	800d180 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d041      	beq.n	800ce22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3314      	adds	r3, #20
 800cda4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	3314      	adds	r3, #20
 800cdc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cdd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdda:	e841 2300 	strex	r3, r2, [r1]
 800cdde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cde2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1d9      	bne.n	800cd9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d013      	beq.n	800ce1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf6:	4a7e      	ldr	r2, [pc, #504]	@ (800cff0 <HAL_UART_IRQHandler+0x3e0>)
 800cdf8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fd f86c 	bl	8009edc <HAL_DMA_Abort_IT>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d016      	beq.n	800ce38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce14:	4610      	mov	r0, r2
 800ce16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce18:	e00e      	b.n	800ce38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f99c 	bl	800d158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce20:	e00a      	b.n	800ce38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f998 	bl	800d158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce28:	e006      	b.n	800ce38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f994 	bl	800d158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce36:	e175      	b.n	800d124 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce38:	bf00      	nop
    return;
 800ce3a:	e173      	b.n	800d124 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	f040 814f 	bne.w	800d0e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce4a:	f003 0310 	and.w	r3, r3, #16
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 8148 	beq.w	800d0e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ce54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 8141 	beq.w	800d0e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce62:	2300      	movs	r3, #0
 800ce64:	60bb      	str	r3, [r7, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	60bb      	str	r3, [r7, #8]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	60bb      	str	r3, [r7, #8]
 800ce76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 80b6 	beq.w	800cff4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f000 8145 	beq.w	800d128 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cea6:	429a      	cmp	r2, r3
 800cea8:	f080 813e 	bcs.w	800d128 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	2b20      	cmp	r3, #32
 800cebc:	f000 8088 	beq.w	800cfd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	330c      	adds	r3, #12
 800cec6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cece:	e853 3f00 	ldrex	r3, [r3]
 800ced2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ced6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ceda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	330c      	adds	r3, #12
 800cee8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ceec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cef8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cefc:	e841 2300 	strex	r3, r2, [r1]
 800cf00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1d9      	bne.n	800cec0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3314      	adds	r3, #20
 800cf12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3314      	adds	r3, #20
 800cf2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf3c:	e841 2300 	strex	r3, r2, [r1]
 800cf40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e1      	bne.n	800cf0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3314      	adds	r3, #20
 800cf4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf52:	e853 3f00 	ldrex	r3, [r3]
 800cf56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3314      	adds	r3, #20
 800cf68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf74:	e841 2300 	strex	r3, r2, [r1]
 800cf78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e3      	bne.n	800cf48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2220      	movs	r2, #32
 800cf84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	330c      	adds	r3, #12
 800cf94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf98:	e853 3f00 	ldrex	r3, [r3]
 800cf9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfa0:	f023 0310 	bic.w	r3, r3, #16
 800cfa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	330c      	adds	r3, #12
 800cfae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cfb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cfb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e3      	bne.n	800cf8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fc ff4b 	bl	8009e66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f8bf 	bl	800d16a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cfec:	e09c      	b.n	800d128 <HAL_UART_IRQHandler+0x518>
 800cfee:	bf00      	nop
 800cff0:	0800d245 	.word	0x0800d245
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d008:	b29b      	uxth	r3, r3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 808e 	beq.w	800d12c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8089 	beq.w	800d12c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	330c      	adds	r3, #12
 800d020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d024:	e853 3f00 	ldrex	r3, [r3]
 800d028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	330c      	adds	r3, #12
 800d03a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d03e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d046:	e841 2300 	strex	r3, r2, [r1]
 800d04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1e3      	bne.n	800d01a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3314      	adds	r3, #20
 800d058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05c:	e853 3f00 	ldrex	r3, [r3]
 800d060:	623b      	str	r3, [r7, #32]
   return(result);
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	f023 0301 	bic.w	r3, r3, #1
 800d068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3314      	adds	r3, #20
 800d072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d076:	633a      	str	r2, [r7, #48]	@ 0x30
 800d078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d07c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d07e:	e841 2300 	strex	r3, r2, [r1]
 800d082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e3      	bne.n	800d052 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	330c      	adds	r3, #12
 800d09e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	e853 3f00 	ldrex	r3, [r3]
 800d0a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f023 0310 	bic.w	r3, r3, #16
 800d0ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	330c      	adds	r3, #12
 800d0b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d0bc:	61fa      	str	r2, [r7, #28]
 800d0be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c0:	69b9      	ldr	r1, [r7, #24]
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	e841 2300 	strex	r3, r2, [r1]
 800d0c8:	617b      	str	r3, [r7, #20]
   return(result);
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e3      	bne.n	800d098 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f844 	bl	800d16a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d0e2:	e023      	b.n	800d12c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d009      	beq.n	800d104 <HAL_UART_IRQHandler+0x4f4>
 800d0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f8b5 	bl	800d26c <UART_Transmit_IT>
    return;
 800d102:	e014      	b.n	800d12e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00e      	beq.n	800d12e <HAL_UART_IRQHandler+0x51e>
 800d110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f8f4 	bl	800d30a <UART_EndTransmit_IT>
    return;
 800d122:	e004      	b.n	800d12e <HAL_UART_IRQHandler+0x51e>
    return;
 800d124:	bf00      	nop
 800d126:	e002      	b.n	800d12e <HAL_UART_IRQHandler+0x51e>
      return;
 800d128:	bf00      	nop
 800d12a:	e000      	b.n	800d12e <HAL_UART_IRQHandler+0x51e>
      return;
 800d12c:	bf00      	nop
  }
}
 800d12e:	37e8      	adds	r7, #232	@ 0xe8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	bc80      	pop	{r7}
 800d144:	4770      	bx	lr

0800d146 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d14e:	bf00      	nop
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	bc80      	pop	{r7}
 800d156:	4770      	bx	lr

0800d158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	bc80      	pop	{r7}
 800d168:	4770      	bx	lr

0800d16a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d16a:	b480      	push	{r7}
 800d16c:	b083      	sub	sp, #12
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	460b      	mov	r3, r1
 800d174:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bc80      	pop	{r7}
 800d17e:	4770      	bx	lr

0800d180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d180:	b480      	push	{r7}
 800d182:	b095      	sub	sp, #84	@ 0x54
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	330c      	adds	r3, #12
 800d18e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	330c      	adds	r3, #12
 800d1a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1a8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1b0:	e841 2300 	strex	r3, r2, [r1]
 800d1b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e5      	bne.n	800d188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3314      	adds	r3, #20
 800d1c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	e853 3f00 	ldrex	r3, [r3]
 800d1ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	f023 0301 	bic.w	r3, r3, #1
 800d1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3314      	adds	r3, #20
 800d1da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e4:	e841 2300 	strex	r3, r2, [r1]
 800d1e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1e5      	bne.n	800d1bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d119      	bne.n	800d22c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	330c      	adds	r3, #12
 800d1fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	60bb      	str	r3, [r7, #8]
   return(result);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f023 0310 	bic.w	r3, r3, #16
 800d20e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	330c      	adds	r3, #12
 800d216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d218:	61ba      	str	r2, [r7, #24]
 800d21a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	6979      	ldr	r1, [r7, #20]
 800d21e:	69ba      	ldr	r2, [r7, #24]
 800d220:	e841 2300 	strex	r3, r2, [r1]
 800d224:	613b      	str	r3, [r7, #16]
   return(result);
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e5      	bne.n	800d1f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2220      	movs	r2, #32
 800d230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d23a:	bf00      	nop
 800d23c:	3754      	adds	r7, #84	@ 0x54
 800d23e:	46bd      	mov	sp, r7
 800d240:	bc80      	pop	{r7}
 800d242:	4770      	bx	lr

0800d244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7ff ff7a 	bl	800d158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d264:	bf00      	nop
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b21      	cmp	r3, #33	@ 0x21
 800d27e:	d13e      	bne.n	800d2fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d288:	d114      	bne.n	800d2b4 <UART_Transmit_IT+0x48>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d110      	bne.n	800d2b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	461a      	mov	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a1b      	ldr	r3, [r3, #32]
 800d2ac:	1c9a      	adds	r2, r3, #2
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	621a      	str	r2, [r3, #32]
 800d2b2:	e008      	b.n	800d2c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	1c59      	adds	r1, r3, #1
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6211      	str	r1, [r2, #32]
 800d2be:	781a      	ldrb	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10f      	bne.n	800d2fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d2e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e000      	b.n	800d300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d2fe:	2302      	movs	r3, #2
  }
}
 800d300:	4618      	mov	r0, r3
 800d302:	3714      	adds	r7, #20
 800d304:	46bd      	mov	sp, r7
 800d306:	bc80      	pop	{r7}
 800d308:	4770      	bx	lr

0800d30a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b082      	sub	sp, #8
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2220      	movs	r2, #32
 800d326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff ff02 	bl	800d134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b08c      	sub	sp, #48	@ 0x30
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b22      	cmp	r3, #34	@ 0x22
 800d34c:	f040 80ae 	bne.w	800d4ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d358:	d117      	bne.n	800d38a <UART_Receive_IT+0x50>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d113      	bne.n	800d38a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d362:	2300      	movs	r3, #0
 800d364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	b29b      	uxth	r3, r3
 800d374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d378:	b29a      	uxth	r2, r3
 800d37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d382:	1c9a      	adds	r2, r3, #2
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	629a      	str	r2, [r3, #40]	@ 0x28
 800d388:	e026      	b.n	800d3d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d390:	2300      	movs	r3, #0
 800d392:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d39c:	d007      	beq.n	800d3ae <UART_Receive_IT+0x74>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10a      	bne.n	800d3bc <UART_Receive_IT+0x82>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	e008      	b.n	800d3ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3d2:	1c5a      	adds	r2, r3, #1
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d15d      	bne.n	800d4a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f022 0220 	bic.w	r2, r2, #32
 800d3fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68da      	ldr	r2, [r3, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d40a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	695a      	ldr	r2, [r3, #20]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f022 0201 	bic.w	r2, r2, #1
 800d41a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2220      	movs	r2, #32
 800d420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d135      	bne.n	800d49e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	330c      	adds	r3, #12
 800d43e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	e853 3f00 	ldrex	r3, [r3]
 800d446:	613b      	str	r3, [r7, #16]
   return(result);
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	f023 0310 	bic.w	r3, r3, #16
 800d44e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	330c      	adds	r3, #12
 800d456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d458:	623a      	str	r2, [r7, #32]
 800d45a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	69f9      	ldr	r1, [r7, #28]
 800d45e:	6a3a      	ldr	r2, [r7, #32]
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	61bb      	str	r3, [r7, #24]
   return(result);
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e5      	bne.n	800d438 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0310 	and.w	r3, r3, #16
 800d476:	2b10      	cmp	r3, #16
 800d478:	d10a      	bne.n	800d490 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d47a:	2300      	movs	r3, #0
 800d47c:	60fb      	str	r3, [r7, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d494:	4619      	mov	r1, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff fe67 	bl	800d16a <HAL_UARTEx_RxEventCallback>
 800d49c:	e002      	b.n	800d4a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7ff fe51 	bl	800d146 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e002      	b.n	800d4ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e000      	b.n	800d4ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4ac:	2302      	movs	r3, #2
  }
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3730      	adds	r7, #48	@ 0x30
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
	...

0800d4b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	430a      	orrs	r2, r1
 800d4d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689a      	ldr	r2, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d4f2:	f023 030c 	bic.w	r3, r3, #12
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	6812      	ldr	r2, [r2, #0]
 800d4fa:	68b9      	ldr	r1, [r7, #8]
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	699a      	ldr	r2, [r3, #24]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	430a      	orrs	r2, r1
 800d514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a2c      	ldr	r2, [pc, #176]	@ (800d5cc <UART_SetConfig+0x114>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d103      	bne.n	800d528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d520:	f7fe fe8c 	bl	800c23c <HAL_RCC_GetPCLK2Freq>
 800d524:	60f8      	str	r0, [r7, #12]
 800d526:	e002      	b.n	800d52e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d528:	f7fe fe74 	bl	800c214 <HAL_RCC_GetPCLK1Freq>
 800d52c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	4613      	mov	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	009a      	lsls	r2, r3, #2
 800d538:	441a      	add	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	fbb2 f3f3 	udiv	r3, r2, r3
 800d544:	4a22      	ldr	r2, [pc, #136]	@ (800d5d0 <UART_SetConfig+0x118>)
 800d546:	fba2 2303 	umull	r2, r3, r2, r3
 800d54a:	095b      	lsrs	r3, r3, #5
 800d54c:	0119      	lsls	r1, r3, #4
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	4613      	mov	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	009a      	lsls	r2, r3, #2
 800d558:	441a      	add	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	fbb2 f2f3 	udiv	r2, r2, r3
 800d564:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d0 <UART_SetConfig+0x118>)
 800d566:	fba3 0302 	umull	r0, r3, r3, r2
 800d56a:	095b      	lsrs	r3, r3, #5
 800d56c:	2064      	movs	r0, #100	@ 0x64
 800d56e:	fb00 f303 	mul.w	r3, r0, r3
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	3332      	adds	r3, #50	@ 0x32
 800d578:	4a15      	ldr	r2, [pc, #84]	@ (800d5d0 <UART_SetConfig+0x118>)
 800d57a:	fba2 2303 	umull	r2, r3, r2, r3
 800d57e:	095b      	lsrs	r3, r3, #5
 800d580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d584:	4419      	add	r1, r3
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	009a      	lsls	r2, r3, #2
 800d590:	441a      	add	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	fbb2 f2f3 	udiv	r2, r2, r3
 800d59c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d0 <UART_SetConfig+0x118>)
 800d59e:	fba3 0302 	umull	r0, r3, r3, r2
 800d5a2:	095b      	lsrs	r3, r3, #5
 800d5a4:	2064      	movs	r0, #100	@ 0x64
 800d5a6:	fb00 f303 	mul.w	r3, r0, r3
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	011b      	lsls	r3, r3, #4
 800d5ae:	3332      	adds	r3, #50	@ 0x32
 800d5b0:	4a07      	ldr	r2, [pc, #28]	@ (800d5d0 <UART_SetConfig+0x118>)
 800d5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b6:	095b      	lsrs	r3, r3, #5
 800d5b8:	f003 020f 	and.w	r2, r3, #15
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	440a      	add	r2, r1
 800d5c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d5c4:	bf00      	nop
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	40013800 	.word	0x40013800
 800d5d0:	51eb851f 	.word	0x51eb851f

0800d5d4 <__itoa>:
 800d5d4:	1e93      	subs	r3, r2, #2
 800d5d6:	2b22      	cmp	r3, #34	@ 0x22
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	460c      	mov	r4, r1
 800d5dc:	d904      	bls.n	800d5e8 <__itoa+0x14>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	700b      	strb	r3, [r1, #0]
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	bd10      	pop	{r4, pc}
 800d5e8:	2a0a      	cmp	r2, #10
 800d5ea:	d109      	bne.n	800d600 <__itoa+0x2c>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	da07      	bge.n	800d600 <__itoa+0x2c>
 800d5f0:	232d      	movs	r3, #45	@ 0x2d
 800d5f2:	700b      	strb	r3, [r1, #0]
 800d5f4:	2101      	movs	r1, #1
 800d5f6:	4240      	negs	r0, r0
 800d5f8:	4421      	add	r1, r4
 800d5fa:	f000 f8bb 	bl	800d774 <__utoa>
 800d5fe:	e7f1      	b.n	800d5e4 <__itoa+0x10>
 800d600:	2100      	movs	r1, #0
 800d602:	e7f9      	b.n	800d5f8 <__itoa+0x24>

0800d604 <itoa>:
 800d604:	f7ff bfe6 	b.w	800d5d4 <__itoa>

0800d608 <malloc>:
 800d608:	4b02      	ldr	r3, [pc, #8]	@ (800d614 <malloc+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f000 b825 	b.w	800d65c <_malloc_r>
 800d612:	bf00      	nop
 800d614:	20000f80 	.word	0x20000f80

0800d618 <sbrk_aligned>:
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	4e0f      	ldr	r6, [pc, #60]	@ (800d658 <sbrk_aligned+0x40>)
 800d61c:	460c      	mov	r4, r1
 800d61e:	6831      	ldr	r1, [r6, #0]
 800d620:	4605      	mov	r5, r0
 800d622:	b911      	cbnz	r1, 800d62a <sbrk_aligned+0x12>
 800d624:	f000 f932 	bl	800d88c <_sbrk_r>
 800d628:	6030      	str	r0, [r6, #0]
 800d62a:	4621      	mov	r1, r4
 800d62c:	4628      	mov	r0, r5
 800d62e:	f000 f92d 	bl	800d88c <_sbrk_r>
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	d103      	bne.n	800d63e <sbrk_aligned+0x26>
 800d636:	f04f 34ff 	mov.w	r4, #4294967295
 800d63a:	4620      	mov	r0, r4
 800d63c:	bd70      	pop	{r4, r5, r6, pc}
 800d63e:	1cc4      	adds	r4, r0, #3
 800d640:	f024 0403 	bic.w	r4, r4, #3
 800d644:	42a0      	cmp	r0, r4
 800d646:	d0f8      	beq.n	800d63a <sbrk_aligned+0x22>
 800d648:	1a21      	subs	r1, r4, r0
 800d64a:	4628      	mov	r0, r5
 800d64c:	f000 f91e 	bl	800d88c <_sbrk_r>
 800d650:	3001      	adds	r0, #1
 800d652:	d1f2      	bne.n	800d63a <sbrk_aligned+0x22>
 800d654:	e7ef      	b.n	800d636 <sbrk_aligned+0x1e>
 800d656:	bf00      	nop
 800d658:	20001a28 	.word	0x20001a28

0800d65c <_malloc_r>:
 800d65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d660:	1ccd      	adds	r5, r1, #3
 800d662:	f025 0503 	bic.w	r5, r5, #3
 800d666:	3508      	adds	r5, #8
 800d668:	2d0c      	cmp	r5, #12
 800d66a:	bf38      	it	cc
 800d66c:	250c      	movcc	r5, #12
 800d66e:	2d00      	cmp	r5, #0
 800d670:	4606      	mov	r6, r0
 800d672:	db01      	blt.n	800d678 <_malloc_r+0x1c>
 800d674:	42a9      	cmp	r1, r5
 800d676:	d904      	bls.n	800d682 <_malloc_r+0x26>
 800d678:	230c      	movs	r3, #12
 800d67a:	6033      	str	r3, [r6, #0]
 800d67c:	2000      	movs	r0, #0
 800d67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d758 <_malloc_r+0xfc>
 800d686:	f000 f869 	bl	800d75c <__malloc_lock>
 800d68a:	f8d8 3000 	ldr.w	r3, [r8]
 800d68e:	461c      	mov	r4, r3
 800d690:	bb44      	cbnz	r4, 800d6e4 <_malloc_r+0x88>
 800d692:	4629      	mov	r1, r5
 800d694:	4630      	mov	r0, r6
 800d696:	f7ff ffbf 	bl	800d618 <sbrk_aligned>
 800d69a:	1c43      	adds	r3, r0, #1
 800d69c:	4604      	mov	r4, r0
 800d69e:	d158      	bne.n	800d752 <_malloc_r+0xf6>
 800d6a0:	f8d8 4000 	ldr.w	r4, [r8]
 800d6a4:	4627      	mov	r7, r4
 800d6a6:	2f00      	cmp	r7, #0
 800d6a8:	d143      	bne.n	800d732 <_malloc_r+0xd6>
 800d6aa:	2c00      	cmp	r4, #0
 800d6ac:	d04b      	beq.n	800d746 <_malloc_r+0xea>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	eb04 0903 	add.w	r9, r4, r3
 800d6b8:	f000 f8e8 	bl	800d88c <_sbrk_r>
 800d6bc:	4581      	cmp	r9, r0
 800d6be:	d142      	bne.n	800d746 <_malloc_r+0xea>
 800d6c0:	6821      	ldr	r1, [r4, #0]
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	1a6d      	subs	r5, r5, r1
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7ff ffa6 	bl	800d618 <sbrk_aligned>
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d03a      	beq.n	800d746 <_malloc_r+0xea>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	442b      	add	r3, r5
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	bb62      	cbnz	r2, 800d738 <_malloc_r+0xdc>
 800d6de:	f8c8 7000 	str.w	r7, [r8]
 800d6e2:	e00f      	b.n	800d704 <_malloc_r+0xa8>
 800d6e4:	6822      	ldr	r2, [r4, #0]
 800d6e6:	1b52      	subs	r2, r2, r5
 800d6e8:	d420      	bmi.n	800d72c <_malloc_r+0xd0>
 800d6ea:	2a0b      	cmp	r2, #11
 800d6ec:	d917      	bls.n	800d71e <_malloc_r+0xc2>
 800d6ee:	1961      	adds	r1, r4, r5
 800d6f0:	42a3      	cmp	r3, r4
 800d6f2:	6025      	str	r5, [r4, #0]
 800d6f4:	bf18      	it	ne
 800d6f6:	6059      	strne	r1, [r3, #4]
 800d6f8:	6863      	ldr	r3, [r4, #4]
 800d6fa:	bf08      	it	eq
 800d6fc:	f8c8 1000 	streq.w	r1, [r8]
 800d700:	5162      	str	r2, [r4, r5]
 800d702:	604b      	str	r3, [r1, #4]
 800d704:	4630      	mov	r0, r6
 800d706:	f000 f82f 	bl	800d768 <__malloc_unlock>
 800d70a:	f104 000b 	add.w	r0, r4, #11
 800d70e:	1d23      	adds	r3, r4, #4
 800d710:	f020 0007 	bic.w	r0, r0, #7
 800d714:	1ac2      	subs	r2, r0, r3
 800d716:	bf1c      	itt	ne
 800d718:	1a1b      	subne	r3, r3, r0
 800d71a:	50a3      	strne	r3, [r4, r2]
 800d71c:	e7af      	b.n	800d67e <_malloc_r+0x22>
 800d71e:	6862      	ldr	r2, [r4, #4]
 800d720:	42a3      	cmp	r3, r4
 800d722:	bf0c      	ite	eq
 800d724:	f8c8 2000 	streq.w	r2, [r8]
 800d728:	605a      	strne	r2, [r3, #4]
 800d72a:	e7eb      	b.n	800d704 <_malloc_r+0xa8>
 800d72c:	4623      	mov	r3, r4
 800d72e:	6864      	ldr	r4, [r4, #4]
 800d730:	e7ae      	b.n	800d690 <_malloc_r+0x34>
 800d732:	463c      	mov	r4, r7
 800d734:	687f      	ldr	r7, [r7, #4]
 800d736:	e7b6      	b.n	800d6a6 <_malloc_r+0x4a>
 800d738:	461a      	mov	r2, r3
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	d1fb      	bne.n	800d738 <_malloc_r+0xdc>
 800d740:	2300      	movs	r3, #0
 800d742:	6053      	str	r3, [r2, #4]
 800d744:	e7de      	b.n	800d704 <_malloc_r+0xa8>
 800d746:	230c      	movs	r3, #12
 800d748:	4630      	mov	r0, r6
 800d74a:	6033      	str	r3, [r6, #0]
 800d74c:	f000 f80c 	bl	800d768 <__malloc_unlock>
 800d750:	e794      	b.n	800d67c <_malloc_r+0x20>
 800d752:	6005      	str	r5, [r0, #0]
 800d754:	e7d6      	b.n	800d704 <_malloc_r+0xa8>
 800d756:	bf00      	nop
 800d758:	20001a2c 	.word	0x20001a2c

0800d75c <__malloc_lock>:
 800d75c:	4801      	ldr	r0, [pc, #4]	@ (800d764 <__malloc_lock+0x8>)
 800d75e:	f000 b8cf 	b.w	800d900 <__retarget_lock_acquire_recursive>
 800d762:	bf00      	nop
 800d764:	20001b6c 	.word	0x20001b6c

0800d768 <__malloc_unlock>:
 800d768:	4801      	ldr	r0, [pc, #4]	@ (800d770 <__malloc_unlock+0x8>)
 800d76a:	f000 b8ca 	b.w	800d902 <__retarget_lock_release_recursive>
 800d76e:	bf00      	nop
 800d770:	20001b6c 	.word	0x20001b6c

0800d774 <__utoa>:
 800d774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d776:	b08b      	sub	sp, #44	@ 0x2c
 800d778:	4605      	mov	r5, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	466e      	mov	r6, sp
 800d77e:	4c1d      	ldr	r4, [pc, #116]	@ (800d7f4 <__utoa+0x80>)
 800d780:	f104 0c20 	add.w	ip, r4, #32
 800d784:	4637      	mov	r7, r6
 800d786:	6820      	ldr	r0, [r4, #0]
 800d788:	6861      	ldr	r1, [r4, #4]
 800d78a:	3408      	adds	r4, #8
 800d78c:	c703      	stmia	r7!, {r0, r1}
 800d78e:	4564      	cmp	r4, ip
 800d790:	463e      	mov	r6, r7
 800d792:	d1f7      	bne.n	800d784 <__utoa+0x10>
 800d794:	7921      	ldrb	r1, [r4, #4]
 800d796:	6820      	ldr	r0, [r4, #0]
 800d798:	7139      	strb	r1, [r7, #4]
 800d79a:	1e91      	subs	r1, r2, #2
 800d79c:	2922      	cmp	r1, #34	@ 0x22
 800d79e:	6038      	str	r0, [r7, #0]
 800d7a0:	f04f 0100 	mov.w	r1, #0
 800d7a4:	d904      	bls.n	800d7b0 <__utoa+0x3c>
 800d7a6:	7019      	strb	r1, [r3, #0]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	b00b      	add	sp, #44	@ 0x2c
 800d7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b0:	1e58      	subs	r0, r3, #1
 800d7b2:	4684      	mov	ip, r0
 800d7b4:	fbb5 f7f2 	udiv	r7, r5, r2
 800d7b8:	fb02 5617 	mls	r6, r2, r7, r5
 800d7bc:	3628      	adds	r6, #40	@ 0x28
 800d7be:	446e      	add	r6, sp
 800d7c0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d7ca:	462e      	mov	r6, r5
 800d7cc:	42b2      	cmp	r2, r6
 800d7ce:	463d      	mov	r5, r7
 800d7d0:	f101 0101 	add.w	r1, r1, #1
 800d7d4:	d9ee      	bls.n	800d7b4 <__utoa+0x40>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	545a      	strb	r2, [r3, r1]
 800d7da:	1919      	adds	r1, r3, r4
 800d7dc:	1aa5      	subs	r5, r4, r2
 800d7de:	42aa      	cmp	r2, r5
 800d7e0:	dae3      	bge.n	800d7aa <__utoa+0x36>
 800d7e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d7e6:	780e      	ldrb	r6, [r1, #0]
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	7006      	strb	r6, [r0, #0]
 800d7ec:	f801 5901 	strb.w	r5, [r1], #-1
 800d7f0:	e7f4      	b.n	800d7dc <__utoa+0x68>
 800d7f2:	bf00      	nop
 800d7f4:	0800eb9a 	.word	0x0800eb9a

0800d7f8 <siprintf>:
 800d7f8:	b40e      	push	{r1, r2, r3}
 800d7fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7fe:	b500      	push	{lr}
 800d800:	b09c      	sub	sp, #112	@ 0x70
 800d802:	ab1d      	add	r3, sp, #116	@ 0x74
 800d804:	9002      	str	r0, [sp, #8]
 800d806:	9006      	str	r0, [sp, #24]
 800d808:	9107      	str	r1, [sp, #28]
 800d80a:	9104      	str	r1, [sp, #16]
 800d80c:	4808      	ldr	r0, [pc, #32]	@ (800d830 <siprintf+0x38>)
 800d80e:	4909      	ldr	r1, [pc, #36]	@ (800d834 <siprintf+0x3c>)
 800d810:	f853 2b04 	ldr.w	r2, [r3], #4
 800d814:	9105      	str	r1, [sp, #20]
 800d816:	6800      	ldr	r0, [r0, #0]
 800d818:	a902      	add	r1, sp, #8
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	f000 f91e 	bl	800da5c <_svfiprintf_r>
 800d820:	2200      	movs	r2, #0
 800d822:	9b02      	ldr	r3, [sp, #8]
 800d824:	701a      	strb	r2, [r3, #0]
 800d826:	b01c      	add	sp, #112	@ 0x70
 800d828:	f85d eb04 	ldr.w	lr, [sp], #4
 800d82c:	b003      	add	sp, #12
 800d82e:	4770      	bx	lr
 800d830:	20000f80 	.word	0x20000f80
 800d834:	ffff0208 	.word	0xffff0208

0800d838 <memset>:
 800d838:	4603      	mov	r3, r0
 800d83a:	4402      	add	r2, r0
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d100      	bne.n	800d842 <memset+0xa>
 800d840:	4770      	bx	lr
 800d842:	f803 1b01 	strb.w	r1, [r3], #1
 800d846:	e7f9      	b.n	800d83c <memset+0x4>

0800d848 <strcat>:
 800d848:	4602      	mov	r2, r0
 800d84a:	b510      	push	{r4, lr}
 800d84c:	7814      	ldrb	r4, [r2, #0]
 800d84e:	4613      	mov	r3, r2
 800d850:	3201      	adds	r2, #1
 800d852:	2c00      	cmp	r4, #0
 800d854:	d1fa      	bne.n	800d84c <strcat+0x4>
 800d856:	3b01      	subs	r3, #1
 800d858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d85c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d860:	2a00      	cmp	r2, #0
 800d862:	d1f9      	bne.n	800d858 <strcat+0x10>
 800d864:	bd10      	pop	{r4, pc}

0800d866 <strncpy>:
 800d866:	4603      	mov	r3, r0
 800d868:	b510      	push	{r4, lr}
 800d86a:	3901      	subs	r1, #1
 800d86c:	b132      	cbz	r2, 800d87c <strncpy+0x16>
 800d86e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d872:	3a01      	subs	r2, #1
 800d874:	f803 4b01 	strb.w	r4, [r3], #1
 800d878:	2c00      	cmp	r4, #0
 800d87a:	d1f7      	bne.n	800d86c <strncpy+0x6>
 800d87c:	2100      	movs	r1, #0
 800d87e:	441a      	add	r2, r3
 800d880:	4293      	cmp	r3, r2
 800d882:	d100      	bne.n	800d886 <strncpy+0x20>
 800d884:	bd10      	pop	{r4, pc}
 800d886:	f803 1b01 	strb.w	r1, [r3], #1
 800d88a:	e7f9      	b.n	800d880 <strncpy+0x1a>

0800d88c <_sbrk_r>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	2300      	movs	r3, #0
 800d890:	4d05      	ldr	r5, [pc, #20]	@ (800d8a8 <_sbrk_r+0x1c>)
 800d892:	4604      	mov	r4, r0
 800d894:	4608      	mov	r0, r1
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	f7fb fff4 	bl	8009884 <_sbrk>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d102      	bne.n	800d8a6 <_sbrk_r+0x1a>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	b103      	cbz	r3, 800d8a6 <_sbrk_r+0x1a>
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	20001b68 	.word	0x20001b68

0800d8ac <__errno>:
 800d8ac:	4b01      	ldr	r3, [pc, #4]	@ (800d8b4 <__errno+0x8>)
 800d8ae:	6818      	ldr	r0, [r3, #0]
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	20000f80 	.word	0x20000f80

0800d8b8 <__libc_init_array>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	2600      	movs	r6, #0
 800d8bc:	4d0c      	ldr	r5, [pc, #48]	@ (800d8f0 <__libc_init_array+0x38>)
 800d8be:	4c0d      	ldr	r4, [pc, #52]	@ (800d8f4 <__libc_init_array+0x3c>)
 800d8c0:	1b64      	subs	r4, r4, r5
 800d8c2:	10a4      	asrs	r4, r4, #2
 800d8c4:	42a6      	cmp	r6, r4
 800d8c6:	d109      	bne.n	800d8dc <__libc_init_array+0x24>
 800d8c8:	f000 fbc2 	bl	800e050 <_init>
 800d8cc:	2600      	movs	r6, #0
 800d8ce:	4d0a      	ldr	r5, [pc, #40]	@ (800d8f8 <__libc_init_array+0x40>)
 800d8d0:	4c0a      	ldr	r4, [pc, #40]	@ (800d8fc <__libc_init_array+0x44>)
 800d8d2:	1b64      	subs	r4, r4, r5
 800d8d4:	10a4      	asrs	r4, r4, #2
 800d8d6:	42a6      	cmp	r6, r4
 800d8d8:	d105      	bne.n	800d8e6 <__libc_init_array+0x2e>
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e0:	4798      	blx	r3
 800d8e2:	3601      	adds	r6, #1
 800d8e4:	e7ee      	b.n	800d8c4 <__libc_init_array+0xc>
 800d8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ea:	4798      	blx	r3
 800d8ec:	3601      	adds	r6, #1
 800d8ee:	e7f2      	b.n	800d8d6 <__libc_init_array+0x1e>
 800d8f0:	0800ebfc 	.word	0x0800ebfc
 800d8f4:	0800ebfc 	.word	0x0800ebfc
 800d8f8:	0800ebfc 	.word	0x0800ebfc
 800d8fc:	0800ec00 	.word	0x0800ec00

0800d900 <__retarget_lock_acquire_recursive>:
 800d900:	4770      	bx	lr

0800d902 <__retarget_lock_release_recursive>:
 800d902:	4770      	bx	lr

0800d904 <strcpy>:
 800d904:	4603      	mov	r3, r0
 800d906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d90a:	f803 2b01 	strb.w	r2, [r3], #1
 800d90e:	2a00      	cmp	r2, #0
 800d910:	d1f9      	bne.n	800d906 <strcpy+0x2>
 800d912:	4770      	bx	lr

0800d914 <_free_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4605      	mov	r5, r0
 800d918:	2900      	cmp	r1, #0
 800d91a:	d040      	beq.n	800d99e <_free_r+0x8a>
 800d91c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d920:	1f0c      	subs	r4, r1, #4
 800d922:	2b00      	cmp	r3, #0
 800d924:	bfb8      	it	lt
 800d926:	18e4      	addlt	r4, r4, r3
 800d928:	f7ff ff18 	bl	800d75c <__malloc_lock>
 800d92c:	4a1c      	ldr	r2, [pc, #112]	@ (800d9a0 <_free_r+0x8c>)
 800d92e:	6813      	ldr	r3, [r2, #0]
 800d930:	b933      	cbnz	r3, 800d940 <_free_r+0x2c>
 800d932:	6063      	str	r3, [r4, #4]
 800d934:	6014      	str	r4, [r2, #0]
 800d936:	4628      	mov	r0, r5
 800d938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d93c:	f7ff bf14 	b.w	800d768 <__malloc_unlock>
 800d940:	42a3      	cmp	r3, r4
 800d942:	d908      	bls.n	800d956 <_free_r+0x42>
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	1821      	adds	r1, r4, r0
 800d948:	428b      	cmp	r3, r1
 800d94a:	bf01      	itttt	eq
 800d94c:	6819      	ldreq	r1, [r3, #0]
 800d94e:	685b      	ldreq	r3, [r3, #4]
 800d950:	1809      	addeq	r1, r1, r0
 800d952:	6021      	streq	r1, [r4, #0]
 800d954:	e7ed      	b.n	800d932 <_free_r+0x1e>
 800d956:	461a      	mov	r2, r3
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	b10b      	cbz	r3, 800d960 <_free_r+0x4c>
 800d95c:	42a3      	cmp	r3, r4
 800d95e:	d9fa      	bls.n	800d956 <_free_r+0x42>
 800d960:	6811      	ldr	r1, [r2, #0]
 800d962:	1850      	adds	r0, r2, r1
 800d964:	42a0      	cmp	r0, r4
 800d966:	d10b      	bne.n	800d980 <_free_r+0x6c>
 800d968:	6820      	ldr	r0, [r4, #0]
 800d96a:	4401      	add	r1, r0
 800d96c:	1850      	adds	r0, r2, r1
 800d96e:	4283      	cmp	r3, r0
 800d970:	6011      	str	r1, [r2, #0]
 800d972:	d1e0      	bne.n	800d936 <_free_r+0x22>
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4408      	add	r0, r1
 800d97a:	6010      	str	r0, [r2, #0]
 800d97c:	6053      	str	r3, [r2, #4]
 800d97e:	e7da      	b.n	800d936 <_free_r+0x22>
 800d980:	d902      	bls.n	800d988 <_free_r+0x74>
 800d982:	230c      	movs	r3, #12
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	e7d6      	b.n	800d936 <_free_r+0x22>
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	1821      	adds	r1, r4, r0
 800d98c:	428b      	cmp	r3, r1
 800d98e:	bf01      	itttt	eq
 800d990:	6819      	ldreq	r1, [r3, #0]
 800d992:	685b      	ldreq	r3, [r3, #4]
 800d994:	1809      	addeq	r1, r1, r0
 800d996:	6021      	streq	r1, [r4, #0]
 800d998:	6063      	str	r3, [r4, #4]
 800d99a:	6054      	str	r4, [r2, #4]
 800d99c:	e7cb      	b.n	800d936 <_free_r+0x22>
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	20001a2c 	.word	0x20001a2c

0800d9a4 <__ssputs_r>:
 800d9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a8:	461f      	mov	r7, r3
 800d9aa:	688e      	ldr	r6, [r1, #8]
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	42be      	cmp	r6, r7
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	4690      	mov	r8, r2
 800d9b4:	680b      	ldr	r3, [r1, #0]
 800d9b6:	d82d      	bhi.n	800da14 <__ssputs_r+0x70>
 800d9b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9c0:	d026      	beq.n	800da10 <__ssputs_r+0x6c>
 800d9c2:	6965      	ldr	r5, [r4, #20]
 800d9c4:	6909      	ldr	r1, [r1, #16]
 800d9c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9ca:	eba3 0901 	sub.w	r9, r3, r1
 800d9ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9d2:	1c7b      	adds	r3, r7, #1
 800d9d4:	444b      	add	r3, r9
 800d9d6:	106d      	asrs	r5, r5, #1
 800d9d8:	429d      	cmp	r5, r3
 800d9da:	bf38      	it	cc
 800d9dc:	461d      	movcc	r5, r3
 800d9de:	0553      	lsls	r3, r2, #21
 800d9e0:	d527      	bpl.n	800da32 <__ssputs_r+0x8e>
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	f7ff fe3a 	bl	800d65c <_malloc_r>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	b360      	cbz	r0, 800da46 <__ssputs_r+0xa2>
 800d9ec:	464a      	mov	r2, r9
 800d9ee:	6921      	ldr	r1, [r4, #16]
 800d9f0:	f000 faea 	bl	800dfc8 <memcpy>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	6126      	str	r6, [r4, #16]
 800da02:	444e      	add	r6, r9
 800da04:	6026      	str	r6, [r4, #0]
 800da06:	463e      	mov	r6, r7
 800da08:	6165      	str	r5, [r4, #20]
 800da0a:	eba5 0509 	sub.w	r5, r5, r9
 800da0e:	60a5      	str	r5, [r4, #8]
 800da10:	42be      	cmp	r6, r7
 800da12:	d900      	bls.n	800da16 <__ssputs_r+0x72>
 800da14:	463e      	mov	r6, r7
 800da16:	4632      	mov	r2, r6
 800da18:	4641      	mov	r1, r8
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	f000 faac 	bl	800df78 <memmove>
 800da20:	2000      	movs	r0, #0
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	1b9b      	subs	r3, r3, r6
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	4433      	add	r3, r6
 800da2c:	6023      	str	r3, [r4, #0]
 800da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da32:	462a      	mov	r2, r5
 800da34:	f000 fad6 	bl	800dfe4 <_realloc_r>
 800da38:	4606      	mov	r6, r0
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d1e0      	bne.n	800da00 <__ssputs_r+0x5c>
 800da3e:	4650      	mov	r0, sl
 800da40:	6921      	ldr	r1, [r4, #16]
 800da42:	f7ff ff67 	bl	800d914 <_free_r>
 800da46:	230c      	movs	r3, #12
 800da48:	f8ca 3000 	str.w	r3, [sl]
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	e7e9      	b.n	800da2e <__ssputs_r+0x8a>
	...

0800da5c <_svfiprintf_r>:
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	4698      	mov	r8, r3
 800da62:	898b      	ldrh	r3, [r1, #12]
 800da64:	4607      	mov	r7, r0
 800da66:	061b      	lsls	r3, r3, #24
 800da68:	460d      	mov	r5, r1
 800da6a:	4614      	mov	r4, r2
 800da6c:	b09d      	sub	sp, #116	@ 0x74
 800da6e:	d510      	bpl.n	800da92 <_svfiprintf_r+0x36>
 800da70:	690b      	ldr	r3, [r1, #16]
 800da72:	b973      	cbnz	r3, 800da92 <_svfiprintf_r+0x36>
 800da74:	2140      	movs	r1, #64	@ 0x40
 800da76:	f7ff fdf1 	bl	800d65c <_malloc_r>
 800da7a:	6028      	str	r0, [r5, #0]
 800da7c:	6128      	str	r0, [r5, #16]
 800da7e:	b930      	cbnz	r0, 800da8e <_svfiprintf_r+0x32>
 800da80:	230c      	movs	r3, #12
 800da82:	603b      	str	r3, [r7, #0]
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	b01d      	add	sp, #116	@ 0x74
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8e:	2340      	movs	r3, #64	@ 0x40
 800da90:	616b      	str	r3, [r5, #20]
 800da92:	2300      	movs	r3, #0
 800da94:	9309      	str	r3, [sp, #36]	@ 0x24
 800da96:	2320      	movs	r3, #32
 800da98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da9c:	2330      	movs	r3, #48	@ 0x30
 800da9e:	f04f 0901 	mov.w	r9, #1
 800daa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800daa6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dc40 <_svfiprintf_r+0x1e4>
 800daaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800daae:	4623      	mov	r3, r4
 800dab0:	469a      	mov	sl, r3
 800dab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dab6:	b10a      	cbz	r2, 800dabc <_svfiprintf_r+0x60>
 800dab8:	2a25      	cmp	r2, #37	@ 0x25
 800daba:	d1f9      	bne.n	800dab0 <_svfiprintf_r+0x54>
 800dabc:	ebba 0b04 	subs.w	fp, sl, r4
 800dac0:	d00b      	beq.n	800dada <_svfiprintf_r+0x7e>
 800dac2:	465b      	mov	r3, fp
 800dac4:	4622      	mov	r2, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	4638      	mov	r0, r7
 800daca:	f7ff ff6b 	bl	800d9a4 <__ssputs_r>
 800dace:	3001      	adds	r0, #1
 800dad0:	f000 80a7 	beq.w	800dc22 <_svfiprintf_r+0x1c6>
 800dad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dad6:	445a      	add	r2, fp
 800dad8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dada:	f89a 3000 	ldrb.w	r3, [sl]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 809f 	beq.w	800dc22 <_svfiprintf_r+0x1c6>
 800dae4:	2300      	movs	r3, #0
 800dae6:	f04f 32ff 	mov.w	r2, #4294967295
 800daea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daee:	f10a 0a01 	add.w	sl, sl, #1
 800daf2:	9304      	str	r3, [sp, #16]
 800daf4:	9307      	str	r3, [sp, #28]
 800daf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dafa:	931a      	str	r3, [sp, #104]	@ 0x68
 800dafc:	4654      	mov	r4, sl
 800dafe:	2205      	movs	r2, #5
 800db00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db04:	484e      	ldr	r0, [pc, #312]	@ (800dc40 <_svfiprintf_r+0x1e4>)
 800db06:	f000 fa51 	bl	800dfac <memchr>
 800db0a:	9a04      	ldr	r2, [sp, #16]
 800db0c:	b9d8      	cbnz	r0, 800db46 <_svfiprintf_r+0xea>
 800db0e:	06d0      	lsls	r0, r2, #27
 800db10:	bf44      	itt	mi
 800db12:	2320      	movmi	r3, #32
 800db14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db18:	0711      	lsls	r1, r2, #28
 800db1a:	bf44      	itt	mi
 800db1c:	232b      	movmi	r3, #43	@ 0x2b
 800db1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db22:	f89a 3000 	ldrb.w	r3, [sl]
 800db26:	2b2a      	cmp	r3, #42	@ 0x2a
 800db28:	d015      	beq.n	800db56 <_svfiprintf_r+0xfa>
 800db2a:	4654      	mov	r4, sl
 800db2c:	2000      	movs	r0, #0
 800db2e:	f04f 0c0a 	mov.w	ip, #10
 800db32:	9a07      	ldr	r2, [sp, #28]
 800db34:	4621      	mov	r1, r4
 800db36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db3a:	3b30      	subs	r3, #48	@ 0x30
 800db3c:	2b09      	cmp	r3, #9
 800db3e:	d94b      	bls.n	800dbd8 <_svfiprintf_r+0x17c>
 800db40:	b1b0      	cbz	r0, 800db70 <_svfiprintf_r+0x114>
 800db42:	9207      	str	r2, [sp, #28]
 800db44:	e014      	b.n	800db70 <_svfiprintf_r+0x114>
 800db46:	eba0 0308 	sub.w	r3, r0, r8
 800db4a:	fa09 f303 	lsl.w	r3, r9, r3
 800db4e:	4313      	orrs	r3, r2
 800db50:	46a2      	mov	sl, r4
 800db52:	9304      	str	r3, [sp, #16]
 800db54:	e7d2      	b.n	800dafc <_svfiprintf_r+0xa0>
 800db56:	9b03      	ldr	r3, [sp, #12]
 800db58:	1d19      	adds	r1, r3, #4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	9103      	str	r1, [sp, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bfbb      	ittet	lt
 800db62:	425b      	neglt	r3, r3
 800db64:	f042 0202 	orrlt.w	r2, r2, #2
 800db68:	9307      	strge	r3, [sp, #28]
 800db6a:	9307      	strlt	r3, [sp, #28]
 800db6c:	bfb8      	it	lt
 800db6e:	9204      	strlt	r2, [sp, #16]
 800db70:	7823      	ldrb	r3, [r4, #0]
 800db72:	2b2e      	cmp	r3, #46	@ 0x2e
 800db74:	d10a      	bne.n	800db8c <_svfiprintf_r+0x130>
 800db76:	7863      	ldrb	r3, [r4, #1]
 800db78:	2b2a      	cmp	r3, #42	@ 0x2a
 800db7a:	d132      	bne.n	800dbe2 <_svfiprintf_r+0x186>
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	3402      	adds	r4, #2
 800db80:	1d1a      	adds	r2, r3, #4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	9203      	str	r2, [sp, #12]
 800db86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dc44 <_svfiprintf_r+0x1e8>
 800db90:	2203      	movs	r2, #3
 800db92:	4650      	mov	r0, sl
 800db94:	7821      	ldrb	r1, [r4, #0]
 800db96:	f000 fa09 	bl	800dfac <memchr>
 800db9a:	b138      	cbz	r0, 800dbac <_svfiprintf_r+0x150>
 800db9c:	2240      	movs	r2, #64	@ 0x40
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	eba0 000a 	sub.w	r0, r0, sl
 800dba4:	4082      	lsls	r2, r0
 800dba6:	4313      	orrs	r3, r2
 800dba8:	3401      	adds	r4, #1
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb0:	2206      	movs	r2, #6
 800dbb2:	4825      	ldr	r0, [pc, #148]	@ (800dc48 <_svfiprintf_r+0x1ec>)
 800dbb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbb8:	f000 f9f8 	bl	800dfac <memchr>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d036      	beq.n	800dc2e <_svfiprintf_r+0x1d2>
 800dbc0:	4b22      	ldr	r3, [pc, #136]	@ (800dc4c <_svfiprintf_r+0x1f0>)
 800dbc2:	bb1b      	cbnz	r3, 800dc0c <_svfiprintf_r+0x1b0>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	3307      	adds	r3, #7
 800dbc8:	f023 0307 	bic.w	r3, r3, #7
 800dbcc:	3308      	adds	r3, #8
 800dbce:	9303      	str	r3, [sp, #12]
 800dbd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd2:	4433      	add	r3, r6
 800dbd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbd6:	e76a      	b.n	800daae <_svfiprintf_r+0x52>
 800dbd8:	460c      	mov	r4, r1
 800dbda:	2001      	movs	r0, #1
 800dbdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbe0:	e7a8      	b.n	800db34 <_svfiprintf_r+0xd8>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f04f 0c0a 	mov.w	ip, #10
 800dbe8:	4619      	mov	r1, r3
 800dbea:	3401      	adds	r4, #1
 800dbec:	9305      	str	r3, [sp, #20]
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf4:	3a30      	subs	r2, #48	@ 0x30
 800dbf6:	2a09      	cmp	r2, #9
 800dbf8:	d903      	bls.n	800dc02 <_svfiprintf_r+0x1a6>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0c6      	beq.n	800db8c <_svfiprintf_r+0x130>
 800dbfe:	9105      	str	r1, [sp, #20]
 800dc00:	e7c4      	b.n	800db8c <_svfiprintf_r+0x130>
 800dc02:	4604      	mov	r4, r0
 800dc04:	2301      	movs	r3, #1
 800dc06:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc0a:	e7f0      	b.n	800dbee <_svfiprintf_r+0x192>
 800dc0c:	ab03      	add	r3, sp, #12
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	462a      	mov	r2, r5
 800dc12:	4638      	mov	r0, r7
 800dc14:	4b0e      	ldr	r3, [pc, #56]	@ (800dc50 <_svfiprintf_r+0x1f4>)
 800dc16:	a904      	add	r1, sp, #16
 800dc18:	f3af 8000 	nop.w
 800dc1c:	1c42      	adds	r2, r0, #1
 800dc1e:	4606      	mov	r6, r0
 800dc20:	d1d6      	bne.n	800dbd0 <_svfiprintf_r+0x174>
 800dc22:	89ab      	ldrh	r3, [r5, #12]
 800dc24:	065b      	lsls	r3, r3, #25
 800dc26:	f53f af2d 	bmi.w	800da84 <_svfiprintf_r+0x28>
 800dc2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc2c:	e72c      	b.n	800da88 <_svfiprintf_r+0x2c>
 800dc2e:	ab03      	add	r3, sp, #12
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	462a      	mov	r2, r5
 800dc34:	4638      	mov	r0, r7
 800dc36:	4b06      	ldr	r3, [pc, #24]	@ (800dc50 <_svfiprintf_r+0x1f4>)
 800dc38:	a904      	add	r1, sp, #16
 800dc3a:	f000 f87d 	bl	800dd38 <_printf_i>
 800dc3e:	e7ed      	b.n	800dc1c <_svfiprintf_r+0x1c0>
 800dc40:	0800ebbf 	.word	0x0800ebbf
 800dc44:	0800ebc5 	.word	0x0800ebc5
 800dc48:	0800ebc9 	.word	0x0800ebc9
 800dc4c:	00000000 	.word	0x00000000
 800dc50:	0800d9a5 	.word	0x0800d9a5

0800dc54 <_printf_common>:
 800dc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc58:	4616      	mov	r6, r2
 800dc5a:	4698      	mov	r8, r3
 800dc5c:	688a      	ldr	r2, [r1, #8]
 800dc5e:	690b      	ldr	r3, [r1, #16]
 800dc60:	4607      	mov	r7, r0
 800dc62:	4293      	cmp	r3, r2
 800dc64:	bfb8      	it	lt
 800dc66:	4613      	movlt	r3, r2
 800dc68:	6033      	str	r3, [r6, #0]
 800dc6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc6e:	460c      	mov	r4, r1
 800dc70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc74:	b10a      	cbz	r2, 800dc7a <_printf_common+0x26>
 800dc76:	3301      	adds	r3, #1
 800dc78:	6033      	str	r3, [r6, #0]
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	0699      	lsls	r1, r3, #26
 800dc7e:	bf42      	ittt	mi
 800dc80:	6833      	ldrmi	r3, [r6, #0]
 800dc82:	3302      	addmi	r3, #2
 800dc84:	6033      	strmi	r3, [r6, #0]
 800dc86:	6825      	ldr	r5, [r4, #0]
 800dc88:	f015 0506 	ands.w	r5, r5, #6
 800dc8c:	d106      	bne.n	800dc9c <_printf_common+0x48>
 800dc8e:	f104 0a19 	add.w	sl, r4, #25
 800dc92:	68e3      	ldr	r3, [r4, #12]
 800dc94:	6832      	ldr	r2, [r6, #0]
 800dc96:	1a9b      	subs	r3, r3, r2
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	dc2b      	bgt.n	800dcf4 <_printf_common+0xa0>
 800dc9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dca0:	6822      	ldr	r2, [r4, #0]
 800dca2:	3b00      	subs	r3, #0
 800dca4:	bf18      	it	ne
 800dca6:	2301      	movne	r3, #1
 800dca8:	0692      	lsls	r2, r2, #26
 800dcaa:	d430      	bmi.n	800dd0e <_printf_common+0xba>
 800dcac:	4641      	mov	r1, r8
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dcb4:	47c8      	blx	r9
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	d023      	beq.n	800dd02 <_printf_common+0xae>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	6922      	ldr	r2, [r4, #16]
 800dcbe:	f003 0306 	and.w	r3, r3, #6
 800dcc2:	2b04      	cmp	r3, #4
 800dcc4:	bf14      	ite	ne
 800dcc6:	2500      	movne	r5, #0
 800dcc8:	6833      	ldreq	r3, [r6, #0]
 800dcca:	f04f 0600 	mov.w	r6, #0
 800dcce:	bf08      	it	eq
 800dcd0:	68e5      	ldreq	r5, [r4, #12]
 800dcd2:	f104 041a 	add.w	r4, r4, #26
 800dcd6:	bf08      	it	eq
 800dcd8:	1aed      	subeq	r5, r5, r3
 800dcda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dcde:	bf08      	it	eq
 800dce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dce4:	4293      	cmp	r3, r2
 800dce6:	bfc4      	itt	gt
 800dce8:	1a9b      	subgt	r3, r3, r2
 800dcea:	18ed      	addgt	r5, r5, r3
 800dcec:	42b5      	cmp	r5, r6
 800dcee:	d11a      	bne.n	800dd26 <_printf_common+0xd2>
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e008      	b.n	800dd06 <_printf_common+0xb2>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4641      	mov	r1, r8
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	47c8      	blx	r9
 800dcfe:	3001      	adds	r0, #1
 800dd00:	d103      	bne.n	800dd0a <_printf_common+0xb6>
 800dd02:	f04f 30ff 	mov.w	r0, #4294967295
 800dd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0a:	3501      	adds	r5, #1
 800dd0c:	e7c1      	b.n	800dc92 <_printf_common+0x3e>
 800dd0e:	2030      	movs	r0, #48	@ 0x30
 800dd10:	18e1      	adds	r1, r4, r3
 800dd12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd1c:	4422      	add	r2, r4
 800dd1e:	3302      	adds	r3, #2
 800dd20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd24:	e7c2      	b.n	800dcac <_printf_common+0x58>
 800dd26:	2301      	movs	r3, #1
 800dd28:	4622      	mov	r2, r4
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	47c8      	blx	r9
 800dd30:	3001      	adds	r0, #1
 800dd32:	d0e6      	beq.n	800dd02 <_printf_common+0xae>
 800dd34:	3601      	adds	r6, #1
 800dd36:	e7d9      	b.n	800dcec <_printf_common+0x98>

0800dd38 <_printf_i>:
 800dd38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd3c:	7e0f      	ldrb	r7, [r1, #24]
 800dd3e:	4691      	mov	r9, r2
 800dd40:	2f78      	cmp	r7, #120	@ 0x78
 800dd42:	4680      	mov	r8, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	469a      	mov	sl, r3
 800dd48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd4e:	d807      	bhi.n	800dd60 <_printf_i+0x28>
 800dd50:	2f62      	cmp	r7, #98	@ 0x62
 800dd52:	d80a      	bhi.n	800dd6a <_printf_i+0x32>
 800dd54:	2f00      	cmp	r7, #0
 800dd56:	f000 80d3 	beq.w	800df00 <_printf_i+0x1c8>
 800dd5a:	2f58      	cmp	r7, #88	@ 0x58
 800dd5c:	f000 80ba 	beq.w	800ded4 <_printf_i+0x19c>
 800dd60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd68:	e03a      	b.n	800dde0 <_printf_i+0xa8>
 800dd6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd6e:	2b15      	cmp	r3, #21
 800dd70:	d8f6      	bhi.n	800dd60 <_printf_i+0x28>
 800dd72:	a101      	add	r1, pc, #4	@ (adr r1, 800dd78 <_printf_i+0x40>)
 800dd74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd78:	0800ddd1 	.word	0x0800ddd1
 800dd7c:	0800dde5 	.word	0x0800dde5
 800dd80:	0800dd61 	.word	0x0800dd61
 800dd84:	0800dd61 	.word	0x0800dd61
 800dd88:	0800dd61 	.word	0x0800dd61
 800dd8c:	0800dd61 	.word	0x0800dd61
 800dd90:	0800dde5 	.word	0x0800dde5
 800dd94:	0800dd61 	.word	0x0800dd61
 800dd98:	0800dd61 	.word	0x0800dd61
 800dd9c:	0800dd61 	.word	0x0800dd61
 800dda0:	0800dd61 	.word	0x0800dd61
 800dda4:	0800dee7 	.word	0x0800dee7
 800dda8:	0800de0f 	.word	0x0800de0f
 800ddac:	0800dea1 	.word	0x0800dea1
 800ddb0:	0800dd61 	.word	0x0800dd61
 800ddb4:	0800dd61 	.word	0x0800dd61
 800ddb8:	0800df09 	.word	0x0800df09
 800ddbc:	0800dd61 	.word	0x0800dd61
 800ddc0:	0800de0f 	.word	0x0800de0f
 800ddc4:	0800dd61 	.word	0x0800dd61
 800ddc8:	0800dd61 	.word	0x0800dd61
 800ddcc:	0800dea9 	.word	0x0800dea9
 800ddd0:	6833      	ldr	r3, [r6, #0]
 800ddd2:	1d1a      	adds	r2, r3, #4
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6032      	str	r2, [r6, #0]
 800ddd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dde0:	2301      	movs	r3, #1
 800dde2:	e09e      	b.n	800df22 <_printf_i+0x1ea>
 800dde4:	6833      	ldr	r3, [r6, #0]
 800dde6:	6820      	ldr	r0, [r4, #0]
 800dde8:	1d19      	adds	r1, r3, #4
 800ddea:	6031      	str	r1, [r6, #0]
 800ddec:	0606      	lsls	r6, r0, #24
 800ddee:	d501      	bpl.n	800ddf4 <_printf_i+0xbc>
 800ddf0:	681d      	ldr	r5, [r3, #0]
 800ddf2:	e003      	b.n	800ddfc <_printf_i+0xc4>
 800ddf4:	0645      	lsls	r5, r0, #25
 800ddf6:	d5fb      	bpl.n	800ddf0 <_printf_i+0xb8>
 800ddf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ddfc:	2d00      	cmp	r5, #0
 800ddfe:	da03      	bge.n	800de08 <_printf_i+0xd0>
 800de00:	232d      	movs	r3, #45	@ 0x2d
 800de02:	426d      	negs	r5, r5
 800de04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de08:	230a      	movs	r3, #10
 800de0a:	4859      	ldr	r0, [pc, #356]	@ (800df70 <_printf_i+0x238>)
 800de0c:	e011      	b.n	800de32 <_printf_i+0xfa>
 800de0e:	6821      	ldr	r1, [r4, #0]
 800de10:	6833      	ldr	r3, [r6, #0]
 800de12:	0608      	lsls	r0, r1, #24
 800de14:	f853 5b04 	ldr.w	r5, [r3], #4
 800de18:	d402      	bmi.n	800de20 <_printf_i+0xe8>
 800de1a:	0649      	lsls	r1, r1, #25
 800de1c:	bf48      	it	mi
 800de1e:	b2ad      	uxthmi	r5, r5
 800de20:	2f6f      	cmp	r7, #111	@ 0x6f
 800de22:	6033      	str	r3, [r6, #0]
 800de24:	bf14      	ite	ne
 800de26:	230a      	movne	r3, #10
 800de28:	2308      	moveq	r3, #8
 800de2a:	4851      	ldr	r0, [pc, #324]	@ (800df70 <_printf_i+0x238>)
 800de2c:	2100      	movs	r1, #0
 800de2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de32:	6866      	ldr	r6, [r4, #4]
 800de34:	2e00      	cmp	r6, #0
 800de36:	bfa8      	it	ge
 800de38:	6821      	ldrge	r1, [r4, #0]
 800de3a:	60a6      	str	r6, [r4, #8]
 800de3c:	bfa4      	itt	ge
 800de3e:	f021 0104 	bicge.w	r1, r1, #4
 800de42:	6021      	strge	r1, [r4, #0]
 800de44:	b90d      	cbnz	r5, 800de4a <_printf_i+0x112>
 800de46:	2e00      	cmp	r6, #0
 800de48:	d04b      	beq.n	800dee2 <_printf_i+0x1aa>
 800de4a:	4616      	mov	r6, r2
 800de4c:	fbb5 f1f3 	udiv	r1, r5, r3
 800de50:	fb03 5711 	mls	r7, r3, r1, r5
 800de54:	5dc7      	ldrb	r7, [r0, r7]
 800de56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de5a:	462f      	mov	r7, r5
 800de5c:	42bb      	cmp	r3, r7
 800de5e:	460d      	mov	r5, r1
 800de60:	d9f4      	bls.n	800de4c <_printf_i+0x114>
 800de62:	2b08      	cmp	r3, #8
 800de64:	d10b      	bne.n	800de7e <_printf_i+0x146>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	07df      	lsls	r7, r3, #31
 800de6a:	d508      	bpl.n	800de7e <_printf_i+0x146>
 800de6c:	6923      	ldr	r3, [r4, #16]
 800de6e:	6861      	ldr	r1, [r4, #4]
 800de70:	4299      	cmp	r1, r3
 800de72:	bfde      	ittt	le
 800de74:	2330      	movle	r3, #48	@ 0x30
 800de76:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de7e:	1b92      	subs	r2, r2, r6
 800de80:	6122      	str	r2, [r4, #16]
 800de82:	464b      	mov	r3, r9
 800de84:	4621      	mov	r1, r4
 800de86:	4640      	mov	r0, r8
 800de88:	f8cd a000 	str.w	sl, [sp]
 800de8c:	aa03      	add	r2, sp, #12
 800de8e:	f7ff fee1 	bl	800dc54 <_printf_common>
 800de92:	3001      	adds	r0, #1
 800de94:	d14a      	bne.n	800df2c <_printf_i+0x1f4>
 800de96:	f04f 30ff 	mov.w	r0, #4294967295
 800de9a:	b004      	add	sp, #16
 800de9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	f043 0320 	orr.w	r3, r3, #32
 800dea6:	6023      	str	r3, [r4, #0]
 800dea8:	2778      	movs	r7, #120	@ 0x78
 800deaa:	4832      	ldr	r0, [pc, #200]	@ (800df74 <_printf_i+0x23c>)
 800deac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	6831      	ldr	r1, [r6, #0]
 800deb4:	061f      	lsls	r7, r3, #24
 800deb6:	f851 5b04 	ldr.w	r5, [r1], #4
 800deba:	d402      	bmi.n	800dec2 <_printf_i+0x18a>
 800debc:	065f      	lsls	r7, r3, #25
 800debe:	bf48      	it	mi
 800dec0:	b2ad      	uxthmi	r5, r5
 800dec2:	6031      	str	r1, [r6, #0]
 800dec4:	07d9      	lsls	r1, r3, #31
 800dec6:	bf44      	itt	mi
 800dec8:	f043 0320 	orrmi.w	r3, r3, #32
 800decc:	6023      	strmi	r3, [r4, #0]
 800dece:	b11d      	cbz	r5, 800ded8 <_printf_i+0x1a0>
 800ded0:	2310      	movs	r3, #16
 800ded2:	e7ab      	b.n	800de2c <_printf_i+0xf4>
 800ded4:	4826      	ldr	r0, [pc, #152]	@ (800df70 <_printf_i+0x238>)
 800ded6:	e7e9      	b.n	800deac <_printf_i+0x174>
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	f023 0320 	bic.w	r3, r3, #32
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	e7f6      	b.n	800ded0 <_printf_i+0x198>
 800dee2:	4616      	mov	r6, r2
 800dee4:	e7bd      	b.n	800de62 <_printf_i+0x12a>
 800dee6:	6833      	ldr	r3, [r6, #0]
 800dee8:	6825      	ldr	r5, [r4, #0]
 800deea:	1d18      	adds	r0, r3, #4
 800deec:	6961      	ldr	r1, [r4, #20]
 800deee:	6030      	str	r0, [r6, #0]
 800def0:	062e      	lsls	r6, r5, #24
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	d501      	bpl.n	800defa <_printf_i+0x1c2>
 800def6:	6019      	str	r1, [r3, #0]
 800def8:	e002      	b.n	800df00 <_printf_i+0x1c8>
 800defa:	0668      	lsls	r0, r5, #25
 800defc:	d5fb      	bpl.n	800def6 <_printf_i+0x1be>
 800defe:	8019      	strh	r1, [r3, #0]
 800df00:	2300      	movs	r3, #0
 800df02:	4616      	mov	r6, r2
 800df04:	6123      	str	r3, [r4, #16]
 800df06:	e7bc      	b.n	800de82 <_printf_i+0x14a>
 800df08:	6833      	ldr	r3, [r6, #0]
 800df0a:	2100      	movs	r1, #0
 800df0c:	1d1a      	adds	r2, r3, #4
 800df0e:	6032      	str	r2, [r6, #0]
 800df10:	681e      	ldr	r6, [r3, #0]
 800df12:	6862      	ldr	r2, [r4, #4]
 800df14:	4630      	mov	r0, r6
 800df16:	f000 f849 	bl	800dfac <memchr>
 800df1a:	b108      	cbz	r0, 800df20 <_printf_i+0x1e8>
 800df1c:	1b80      	subs	r0, r0, r6
 800df1e:	6060      	str	r0, [r4, #4]
 800df20:	6863      	ldr	r3, [r4, #4]
 800df22:	6123      	str	r3, [r4, #16]
 800df24:	2300      	movs	r3, #0
 800df26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df2a:	e7aa      	b.n	800de82 <_printf_i+0x14a>
 800df2c:	4632      	mov	r2, r6
 800df2e:	4649      	mov	r1, r9
 800df30:	4640      	mov	r0, r8
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	47d0      	blx	sl
 800df36:	3001      	adds	r0, #1
 800df38:	d0ad      	beq.n	800de96 <_printf_i+0x15e>
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	079b      	lsls	r3, r3, #30
 800df3e:	d413      	bmi.n	800df68 <_printf_i+0x230>
 800df40:	68e0      	ldr	r0, [r4, #12]
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	4298      	cmp	r0, r3
 800df46:	bfb8      	it	lt
 800df48:	4618      	movlt	r0, r3
 800df4a:	e7a6      	b.n	800de9a <_printf_i+0x162>
 800df4c:	2301      	movs	r3, #1
 800df4e:	4632      	mov	r2, r6
 800df50:	4649      	mov	r1, r9
 800df52:	4640      	mov	r0, r8
 800df54:	47d0      	blx	sl
 800df56:	3001      	adds	r0, #1
 800df58:	d09d      	beq.n	800de96 <_printf_i+0x15e>
 800df5a:	3501      	adds	r5, #1
 800df5c:	68e3      	ldr	r3, [r4, #12]
 800df5e:	9903      	ldr	r1, [sp, #12]
 800df60:	1a5b      	subs	r3, r3, r1
 800df62:	42ab      	cmp	r3, r5
 800df64:	dcf2      	bgt.n	800df4c <_printf_i+0x214>
 800df66:	e7eb      	b.n	800df40 <_printf_i+0x208>
 800df68:	2500      	movs	r5, #0
 800df6a:	f104 0619 	add.w	r6, r4, #25
 800df6e:	e7f5      	b.n	800df5c <_printf_i+0x224>
 800df70:	0800ebd0 	.word	0x0800ebd0
 800df74:	0800ebe1 	.word	0x0800ebe1

0800df78 <memmove>:
 800df78:	4288      	cmp	r0, r1
 800df7a:	b510      	push	{r4, lr}
 800df7c:	eb01 0402 	add.w	r4, r1, r2
 800df80:	d902      	bls.n	800df88 <memmove+0x10>
 800df82:	4284      	cmp	r4, r0
 800df84:	4623      	mov	r3, r4
 800df86:	d807      	bhi.n	800df98 <memmove+0x20>
 800df88:	1e43      	subs	r3, r0, #1
 800df8a:	42a1      	cmp	r1, r4
 800df8c:	d008      	beq.n	800dfa0 <memmove+0x28>
 800df8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df96:	e7f8      	b.n	800df8a <memmove+0x12>
 800df98:	4601      	mov	r1, r0
 800df9a:	4402      	add	r2, r0
 800df9c:	428a      	cmp	r2, r1
 800df9e:	d100      	bne.n	800dfa2 <memmove+0x2a>
 800dfa0:	bd10      	pop	{r4, pc}
 800dfa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfaa:	e7f7      	b.n	800df9c <memmove+0x24>

0800dfac <memchr>:
 800dfac:	4603      	mov	r3, r0
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	b2c9      	uxtb	r1, r1
 800dfb2:	4402      	add	r2, r0
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	d101      	bne.n	800dfbe <memchr+0x12>
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e003      	b.n	800dfc6 <memchr+0x1a>
 800dfbe:	7804      	ldrb	r4, [r0, #0]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	428c      	cmp	r4, r1
 800dfc4:	d1f6      	bne.n	800dfb4 <memchr+0x8>
 800dfc6:	bd10      	pop	{r4, pc}

0800dfc8 <memcpy>:
 800dfc8:	440a      	add	r2, r1
 800dfca:	4291      	cmp	r1, r2
 800dfcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfd0:	d100      	bne.n	800dfd4 <memcpy+0xc>
 800dfd2:	4770      	bx	lr
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfda:	4291      	cmp	r1, r2
 800dfdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfe0:	d1f9      	bne.n	800dfd6 <memcpy+0xe>
 800dfe2:	bd10      	pop	{r4, pc}

0800dfe4 <_realloc_r>:
 800dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe8:	4680      	mov	r8, r0
 800dfea:	4615      	mov	r5, r2
 800dfec:	460c      	mov	r4, r1
 800dfee:	b921      	cbnz	r1, 800dffa <_realloc_r+0x16>
 800dff0:	4611      	mov	r1, r2
 800dff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff6:	f7ff bb31 	b.w	800d65c <_malloc_r>
 800dffa:	b92a      	cbnz	r2, 800e008 <_realloc_r+0x24>
 800dffc:	f7ff fc8a 	bl	800d914 <_free_r>
 800e000:	2400      	movs	r4, #0
 800e002:	4620      	mov	r0, r4
 800e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e008:	f000 f81a 	bl	800e040 <_malloc_usable_size_r>
 800e00c:	4285      	cmp	r5, r0
 800e00e:	4606      	mov	r6, r0
 800e010:	d802      	bhi.n	800e018 <_realloc_r+0x34>
 800e012:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e016:	d8f4      	bhi.n	800e002 <_realloc_r+0x1e>
 800e018:	4629      	mov	r1, r5
 800e01a:	4640      	mov	r0, r8
 800e01c:	f7ff fb1e 	bl	800d65c <_malloc_r>
 800e020:	4607      	mov	r7, r0
 800e022:	2800      	cmp	r0, #0
 800e024:	d0ec      	beq.n	800e000 <_realloc_r+0x1c>
 800e026:	42b5      	cmp	r5, r6
 800e028:	462a      	mov	r2, r5
 800e02a:	4621      	mov	r1, r4
 800e02c:	bf28      	it	cs
 800e02e:	4632      	movcs	r2, r6
 800e030:	f7ff ffca 	bl	800dfc8 <memcpy>
 800e034:	4621      	mov	r1, r4
 800e036:	4640      	mov	r0, r8
 800e038:	f7ff fc6c 	bl	800d914 <_free_r>
 800e03c:	463c      	mov	r4, r7
 800e03e:	e7e0      	b.n	800e002 <_realloc_r+0x1e>

0800e040 <_malloc_usable_size_r>:
 800e040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e044:	1f18      	subs	r0, r3, #4
 800e046:	2b00      	cmp	r3, #0
 800e048:	bfbc      	itt	lt
 800e04a:	580b      	ldrlt	r3, [r1, r0]
 800e04c:	18c0      	addlt	r0, r0, r3
 800e04e:	4770      	bx	lr

0800e050 <_init>:
 800e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e052:	bf00      	nop
 800e054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e056:	bc08      	pop	{r3}
 800e058:	469e      	mov	lr, r3
 800e05a:	4770      	bx	lr

0800e05c <_fini>:
 800e05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05e:	bf00      	nop
 800e060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e062:	bc08      	pop	{r3}
 800e064:	469e      	mov	lr, r3
 800e066:	4770      	bx	lr
