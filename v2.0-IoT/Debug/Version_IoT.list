
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dac0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  0800dca4  0800dca4  0000eca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e984  0800e984  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e984  0800e984  0000f984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e98c  0800e98c  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e98c  0800e98c  0000f98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e990  0800e990  0000f990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800e994  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  20000fd0  0800f964  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  0800f964  00011c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001942c  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385b  00000000  00000000  0002a425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0002dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef7  00000000  00000000  0002efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8d9  00000000  00000000  0002fed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7ed  00000000  00000000  0004c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0790  00000000  00000000  00069f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a72d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  0010a770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800dc8c 	.word	0x0800dc8c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800dc8c 	.word	0x0800dc8c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200010bd 	.word	0x200010bd
 80004bc:	200010c0 	.word	0x200010c0
 80004c0:	200010c1 	.word	0x200010c1
 80004c4:	200010c2 	.word	0x200010c2
 80004c8:	200010c3 	.word	0x200010c3
 80004cc:	200010c4 	.word	0x200010c4
 80004d0:	200010c5 	.word	0x200010c5
 80004d4:	200010d5 	.word	0x200010d5
 80004d8:	200010c6 	.word	0x200010c6
 80004dc:	200010d6 	.word	0x200010d6
 80004e0:	200010c7 	.word	0x200010c7
 80004e4:	200010d7 	.word	0x200010d7
 80004e8:	200010ca 	.word	0x200010ca
 80004ec:	200010cb 	.word	0x200010cb
 80004f0:	200010cc 	.word	0x200010cc
 80004f4:	200010cd 	.word	0x200010cd
 80004f8:	200010ce 	.word	0x200010ce
 80004fc:	200010cf 	.word	0x200010cf
 8000500:	200010d0 	.word	0x200010d0
 8000504:	200010d1 	.word	0x200010d1
 8000508:	200010d2 	.word	0x200010d2
 800050c:	200010d3 	.word	0x200010d3
 8000510:	200010d4 	.word	0x200010d4
 8000514:	200010d8 	.word	0x200010d8
 8000518:	200010da 	.word	0x200010da
 800051c:	200010b4 	.word	0x200010b4
 8000520:	200010b5 	.word	0x200010b5
 8000524:	200010b6 	.word	0x200010b6
 8000528:	200010b7 	.word	0x200010b7
 800052c:	200010dc 	.word	0x200010dc
 8000530:	200010c9 	.word	0x200010c9
 8000534:	200010db 	.word	0x200010db
 8000538:	200010c8 	.word	0x200010c8
 800053c:	200010dd 	.word	0x200010dd
 8000540:	200010de 	.word	0x200010de
 8000544:	200010df 	.word	0x200010df
 8000548:	200010e0 	.word	0x200010e0
 800054c:	200010e1 	.word	0x200010e1
 8000550:	200010e2 	.word	0x200010e2
 8000554:	200010e3 	.word	0x200010e3
 8000558:	200010e4 	.word	0x200010e4
 800055c:	200010e5 	.word	0x200010e5
 8000560:	200010e6 	.word	0x200010e6
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f008 ffb3 	bl	80095a8 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f008 ffad 	bl	80095a8 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f008 ffa7 	bl	80095a8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc2c 	bl	8005ebc <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200010cb 	.word	0x200010cb
 800066c:	200010cc 	.word	0x200010cc
 8000670:	200010cd 	.word	0x200010cd
 8000674:	200010ce 	.word	0x200010ce
 8000678:	200010cf 	.word	0x200010cf
 800067c:	200010d0 	.word	0x200010d0
 8000680:	200010d1 	.word	0x200010d1
 8000684:	200010d2 	.word	0x200010d2
 8000688:	200010d3 	.word	0x200010d3
 800068c:	200010d4 	.word	0x200010d4
 8000690:	200010d8 	.word	0x200010d8
 8000694:	200010da 	.word	0x200010da
 8000698:	200010db 	.word	0x200010db
 800069c:	200010dc 	.word	0x200010dc
 80006a0:	200010e7 	.word	0x200010e7

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fa04 	bl	8008ad0 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f008 ff6c 	bl	80095a8 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fa2a 	bl	8008b28 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	2000195c 	.word	0x2000195c

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f009 ffa3 	bl	800a6bc <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 f9a3 	bl	8008ad0 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f008 fefe 	bl	80095a8 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001a38 	.word	0x20001a38
 80007c4:	0800dca4 	.word	0x0800dca4

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a f82b 	bl	800a8b0 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 f931 	bl	8008ad0 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001a38 	.word	0x20001a38
 80008a4:	0800dcb8 	.word	0x0800dcb8

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <ESP8266_Init>:

#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009b8:	4948      	ldr	r1, [pc, #288]	@ (8000adc <ESP8266_Init+0x130>)
 80009ba:	4849      	ldr	r0, [pc, #292]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009bc:	f00c fd3e 	bl	800d43c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009c0:	4847      	ldr	r0, [pc, #284]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4944      	ldr	r1, [pc, #272]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f00b feb6 	bl	800c740 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d8:	f008 fde6 	bl	80095a8 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009dc:	4941      	ldr	r1, [pc, #260]	@ (8000ae4 <ESP8266_Init+0x138>)
 80009de:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e0:	f00c fd2c 	bl	800d43c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e6:	f7ff fc1d 	bl	8000224 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	493b      	ldr	r1, [pc, #236]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f00b fea4 	bl	800c740 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fc:	f008 fdd4 	bl	80095a8 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a00:	4939      	ldr	r1, [pc, #228]	@ (8000ae8 <ESP8266_Init+0x13c>)
 8000a02:	4837      	ldr	r0, [pc, #220]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a04:	f00c fd1a 	bl	800d43c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a08:	4835      	ldr	r0, [pc, #212]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a0a:	f7ff fc0b 	bl	8000224 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4932      	ldr	r1, [pc, #200]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f00b fe92 	bl	800c740 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a20:	f008 fdc2 	bl	80095a8 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a24:	4931      	ldr	r1, [pc, #196]	@ (8000aec <ESP8266_Init+0x140>)
 8000a26:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a28:	f00c fd08 	bl	800d43c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a2c:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a2e:	f7ff fbf9 	bl	8000224 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4929      	ldr	r1, [pc, #164]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f00b fe80 	bl	800c740 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a44:	f008 fdb0 	bl	80095a8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <ESP8266_Init+0x144>)
 8000a4e:	461c      	mov	r4, r3
 8000a50:	4613      	mov	r3, r2
 8000a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a54:	c407      	stmia	r4!, {r0, r1, r2}
 8000a56:	8023      	strh	r3, [r4, #0]
 8000a58:	3402      	adds	r4, #2
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00c fd11 	bl	800d48c <strcat>
	strcat(str, "\",\"");
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbd8 	bl	8000224 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <ESP8266_Init+0x148>)
 8000a80:	6810      	ldr	r0, [r2, #0]
 8000a82:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00c fcfe 	bl	800d48c <strcat>
	strcat(str, "\"\r\n");
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbc5 	bl	8000224 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <ESP8266_Init+0x14c>)
 8000aa6:	6810      	ldr	r0, [r2, #0]
 8000aa8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4912      	ldr	r1, [pc, #72]	@ (8000afc <ESP8266_Init+0x150>)
 8000ab2:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ab4:	f00c fcc2 	bl	800d43c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000aba:	f7ff fbb3 	bl	8000224 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f00b fe3a 	bl	800c740 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000acc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad0:	f008 fd6a 	bl	80095a8 <HAL_Delay>
}
 8000ad4:	bf00      	nop
 8000ad6:	377c      	adds	r7, #124	@ 0x7c
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	0800dccc 	.word	0x0800dccc
 8000ae0:	20001124 	.word	0x20001124
 8000ae4:	0800dcdc 	.word	0x0800dcdc
 8000ae8:	0800dce8 	.word	0x0800dce8
 8000aec:	0800dcf0 	.word	0x0800dcf0
 8000af0:	0800dd00 	.word	0x0800dd00
 8000af4:	0800dd10 	.word	0x0800dd10
 8000af8:	0800dd14 	.word	0x0800dd14
 8000afc:	0800dd18 	.word	0x0800dd18

08000b00 <checkForUpdates>:
    } else {
        return 0;  // Başarısız
    }
}

void checkForUpdates(UART_HandleTypeDef *huart, const char *currentVersion) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0a8      	sub	sp, #160	@ 0xa0
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    char checkUpdateCommand[150];
    sprintf(checkUpdateCommand, "GET /api/v2/updateChecker/checkUpdatesRaw?currentVersion=%s HTTP/1.0\r\nHost: %s\r\n\r\n", currentVersion, mainServerWithPort);
 8000b0a:	f107 0008 	add.w	r0, r7, #8
 8000b0e:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <checkForUpdates+0x110>)
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	4940      	ldr	r1, [pc, #256]	@ (8000c14 <checkForUpdates+0x114>)
 8000b14:	f00c fc92 	bl	800d43c <siprintf>

    // ESP8266 AT komutları ile sunucuya bağlan
    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b18:	4a3f      	ldr	r2, [pc, #252]	@ (8000c18 <checkForUpdates+0x118>)
 8000b1a:	4940      	ldr	r1, [pc, #256]	@ (8000c1c <checkForUpdates+0x11c>)
 8000b1c:	4840      	ldr	r0, [pc, #256]	@ (8000c20 <checkForUpdates+0x120>)
 8000b1e:	f00c fc8d 	bl	800d43c <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t*)bufferTX, strlen(bufferTX));
 8000b22:	483f      	ldr	r0, [pc, #252]	@ (8000c20 <checkForUpdates+0x120>)
 8000b24:	f7ff fb7e 	bl	8000224 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	493c      	ldr	r1, [pc, #240]	@ (8000c20 <checkForUpdates+0x120>)
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f00b fe05 	bl	800c740 <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000b36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b3a:	f008 fd35 	bl	80095a8 <HAL_Delay>

    // Güncelleme kontrol isteğini gönder
    sprintf(bufferTX, "AT+CIPSEND=%d\r\n", strlen(checkUpdateCommand));
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb6e 	bl	8000224 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4935      	ldr	r1, [pc, #212]	@ (8000c24 <checkForUpdates+0x124>)
 8000b4e:	4834      	ldr	r0, [pc, #208]	@ (8000c20 <checkForUpdates+0x120>)
 8000b50:	f00c fc74 	bl	800d43c <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t*)bufferTX, strlen(bufferTX));
 8000b54:	4832      	ldr	r0, [pc, #200]	@ (8000c20 <checkForUpdates+0x120>)
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	492f      	ldr	r1, [pc, #188]	@ (8000c20 <checkForUpdates+0x120>)
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f00b fdec 	bl	800c740 <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000b68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b6c:	f008 fd1c 	bl	80095a8 <HAL_Delay>
    HAL_UART_Transmit_IT(huart, (uint8_t*)checkUpdateCommand, strlen(checkUpdateCommand));
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb55 	bl	8000224 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f00b fddb 	bl	800c740 <HAL_UART_Transmit_IT>
    HAL_Delay(5000);
 8000b8a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b8e:	f008 fd0b 	bl	80095a8 <HAL_Delay>

    // Cevabı al ve işle
    HAL_UART_Receive_IT(huart, bufferRX, sizeof(bufferRX));
 8000b92:	22fa      	movs	r2, #250	@ 0xfa
 8000b94:	4924      	ldr	r1, [pc, #144]	@ (8000c28 <checkForUpdates+0x128>)
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f00b fe07 	bl	800c7aa <HAL_UART_Receive_IT>
    HAL_Delay(5000);
 8000b9c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ba0:	f008 fd02 	bl	80095a8 <HAL_Delay>

    // Gelen veriyi işleyin ve güncelleme var mı kontrol edin
    if (strstr(bufferRX, "HTTP/1.1 200 OK")) {
 8000ba4:	4921      	ldr	r1, [pc, #132]	@ (8000c2c <checkForUpdates+0x12c>)
 8000ba6:	4820      	ldr	r0, [pc, #128]	@ (8000c28 <checkForUpdates+0x128>)
 8000ba8:	f00c fc7f 	bl	800d4aa <strstr>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01e      	beq.n	8000bf0 <checkForUpdates+0xf0>
        // Yanıt başarılı, güncelleme bilgilerini kontrol et
        if (strstr(bufferRX, "\"updateAvailable\":true")) {
 8000bb2:	491f      	ldr	r1, [pc, #124]	@ (8000c30 <checkForUpdates+0x130>)
 8000bb4:	481c      	ldr	r0, [pc, #112]	@ (8000c28 <checkForUpdates+0x128>)
 8000bb6:	f00c fc78 	bl	800d4aa <strstr>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00b      	beq.n	8000bd8 <checkForUpdates+0xd8>
            lcd_print(1, 1, "New Update Available");
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c34 <checkForUpdates+0x134>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f007 ff83 	bl	8008ad0 <lcd_print>
            HAL_Delay(2000);
 8000bca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bce:	f008 fceb 	bl	80095a8 <HAL_Delay>
            lcd_clear();
 8000bd2:	f007 ffa9 	bl	8008b28 <lcd_clear>
        // Yanıt başarısız, hata mesajı göster
        lcd_print(1, 1, "Update Check Failed");
        HAL_Delay(2000);
        lcd_clear();
    }
}
 8000bd6:	e016      	b.n	8000c06 <checkForUpdates+0x106>
            lcd_print(1, 1, "No Update Available");
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <checkForUpdates+0x138>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f007 ff77 	bl	8008ad0 <lcd_print>
            HAL_Delay(2000);
 8000be2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000be6:	f008 fcdf 	bl	80095a8 <HAL_Delay>
            lcd_clear();
 8000bea:	f007 ff9d 	bl	8008b28 <lcd_clear>
}
 8000bee:	e00a      	b.n	8000c06 <checkForUpdates+0x106>
        lcd_print(1, 1, "Update Check Failed");
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <checkForUpdates+0x13c>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f007 ff6b 	bl	8008ad0 <lcd_print>
        HAL_Delay(2000);
 8000bfa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bfe:	f008 fcd3 	bl	80095a8 <HAL_Delay>
        lcd_clear();
 8000c02:	f007 ff91 	bl	8008b28 <lcd_clear>
}
 8000c06:	bf00      	nop
 8000c08:	37a0      	adds	r7, #160	@ 0xa0
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	0800e168 	.word	0x0800e168
 8000c14:	0800e610 	.word	0x0800e610
 8000c18:	0800de08 	.word	0x0800de08
 8000c1c:	0800de18 	.word	0x0800de18
 8000c20:	20001124 	.word	0x20001124
 8000c24:	0800e17c 	.word	0x0800e17c
 8000c28:	20001220 	.word	0x20001220
 8000c2c:	0800e600 	.word	0x0800e600
 8000c30:	0800e664 	.word	0x0800e664
 8000c34:	0800e67c 	.word	0x0800e67c
 8000c38:	0800e694 	.word	0x0800e694
 8000c3c:	0800e6a8 	.word	0x0800e6a8

08000c40 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <hata2EEPROM+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <hata2EEPROM+0xa4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a24      	ldr	r2, [pc, #144]	@ (8000ce8 <hata2EEPROM+0xa8>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c5e:	f000 f8d1 	bl	8000e04 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c62:	e000      	b.n	8000c66 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c64:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e012      	b.n	8000c92 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <hata2EEPROM+0xa4>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <hata2EEPROM+0xa8>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d107      	bne.n	8000c8c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <hata2EEPROM+0xa4>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	4918      	ldr	r1, [pc, #96]	@ (8000ce8 <hata2EEPROM+0xa8>)
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	54ca      	strb	r2, [r1, r3]
					break;
 8000c8a:	e007      	b.n	8000c9c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <hata2EEPROM+0xa0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbe7      	blt.n	8000c6c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <hata2EEPROM+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <hata2EEPROM+0xa0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	b298      	uxth	r0, r3
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <hata2EEPROM+0xa4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <hata2EEPROM+0xa8>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <hata2EEPROM+0xa0>)
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	b292      	uxth	r2, r2
 8000cb6:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000cba:	9402      	str	r4, [sp, #8]
 8000cbc:	9201      	str	r2, [sp, #4]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	21a0      	movs	r1, #160	@ 0xa0
 8000cc6:	4809      	ldr	r0, [pc, #36]	@ (8000cec <hata2EEPROM+0xac>)
 8000cc8:	f009 fcf8 	bl	800a6bc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000ccc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cd0:	f008 fc6a 	bl	80095a8 <HAL_Delay>
	eepromKontrol();
 8000cd4:	f7ff faae 	bl	8000234 <eepromKontrol>
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	20000094 	.word	0x20000094
 8000ce4:	20000098 	.word	0x20000098
 8000ce8:	20000fec 	.word	0x20000fec
 8000cec:	20001a38 	.word	0x20001a38

08000cf0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10f      	bne.n	8000d20 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000d00:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	2001      	movs	r0, #1
 8000d06:	f007 fee3 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, "1");
 8000d0a:	4a37      	ldr	r2, [pc, #220]	@ (8000de8 <hataKoduLcdGoster+0xf8>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f007 fede 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d14:	4a35      	ldr	r2, [pc, #212]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000d16:	2107      	movs	r1, #7
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f007 fed9 	bl	8008ad0 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d1e:	e05d      	b.n	8000ddc <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d10f      	bne.n	8000d46 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000d26:	4a2f      	ldr	r2, [pc, #188]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f007 fed0 	bl	8008ad0 <lcd_print>
		lcd_print(2, 2, "2");
 8000d30:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <hataKoduLcdGoster+0x100>)
 8000d32:	2102      	movs	r1, #2
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fecb 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fec6 	bl	8008ad0 <lcd_print>
}
 8000d44:	e04a      	b.n	8000ddc <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d10f      	bne.n	8000d6c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2001      	movs	r0, #1
 8000d52:	f007 febd 	bl	8008ad0 <lcd_print>
		lcd_print(2, 3, "3");
 8000d56:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <hataKoduLcdGoster+0x104>)
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f007 feb8 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d60:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000d62:	2107      	movs	r1, #7
 8000d64:	2002      	movs	r0, #2
 8000d66:	f007 feb3 	bl	8008ad0 <lcd_print>
}
 8000d6a:	e037      	b.n	8000ddc <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d10f      	bne.n	8000d92 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2001      	movs	r0, #1
 8000d78:	f007 feaa 	bl	8008ad0 <lcd_print>
		lcd_print(2, 4, "4");
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000df8 <hataKoduLcdGoster+0x108>)
 8000d7e:	2104      	movs	r1, #4
 8000d80:	2002      	movs	r0, #2
 8000d82:	f007 fea5 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d86:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f007 fea0 	bl	8008ad0 <lcd_print>
}
 8000d90:	e024      	b.n	8000ddc <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d10f      	bne.n	8000db8 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000d98:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f007 fe97 	bl	8008ad0 <lcd_print>
		lcd_print(2, 5, "5");
 8000da2:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <hataKoduLcdGoster+0x10c>)
 8000da4:	2105      	movs	r1, #5
 8000da6:	2002      	movs	r0, #2
 8000da8:	f007 fe92 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dac:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000dae:	2107      	movs	r1, #7
 8000db0:	2002      	movs	r0, #2
 8000db2:	f007 fe8d 	bl	8008ad0 <lcd_print>
}
 8000db6:	e011      	b.n	8000ddc <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d10e      	bne.n	8000ddc <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <hataKoduLcdGoster+0xf4>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f007 fe84 	bl	8008ad0 <lcd_print>
		lcd_print(2, 6, "6");
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <hataKoduLcdGoster+0x110>)
 8000dca:	2106      	movs	r1, #6
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f007 fe7f 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dd2:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <hataKoduLcdGoster+0xfc>)
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f007 fe7a 	bl	8008ad0 <lcd_print>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200019ac 	.word	0x200019ac
 8000de8:	0800e764 	.word	0x0800e764
 8000dec:	0800e768 	.word	0x0800e768
 8000df0:	0800e774 	.word	0x0800e774
 8000df4:	0800e778 	.word	0x0800e778
 8000df8:	0800e77c 	.word	0x0800e77c
 8000dfc:	0800e780 	.word	0x0800e780
 8000e00:	0800e784 	.word	0x0800e784

08000e04 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e009      	b.n	8000e24 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <eepromDataFillWithEmpty+0x38>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <eepromDataFillWithEmpty+0x3c>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <eepromDataFillWithEmpty+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbf0      	blt.n	8000e10 <eepromDataFillWithEmpty+0xc>
	}
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000006c 	.word	0x2000006c
 8000e40:	20000fec 	.word	0x20000fec
 8000e44:	20000094 	.word	0x20000094

08000e48 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000e5a:	4b50      	ldr	r3, [pc, #320]	@ (8000f9c <i2cTest+0x154>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b4e      	ldr	r3, [pc, #312]	@ (8000f9c <i2cTest+0x154>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000e6a:	484c      	ldr	r0, [pc, #304]	@ (8000f9c <i2cTest+0x154>)
 8000e6c:	f009 faf8 	bl	800a460 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e70:	23c0      	movs	r3, #192	@ 0xc0
 8000e72:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000e74:	2311      	movs	r3, #17
 8000e76:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4846      	ldr	r0, [pc, #280]	@ (8000fa0 <i2cTest+0x158>)
 8000e86:	f008 feff 	bl	8009c88 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2140      	movs	r1, #64	@ 0x40
 8000e8e:	4844      	ldr	r0, [pc, #272]	@ (8000fa0 <i2cTest+0x158>)
 8000e90:	f009 f971 	bl	800a176 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	4841      	ldr	r0, [pc, #260]	@ (8000fa0 <i2cTest+0x158>)
 8000e9a:	f009 f96c 	bl	800a176 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f008 fb82 	bl	80095a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ea4:	bf00      	nop
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	483d      	ldr	r0, [pc, #244]	@ (8000fa0 <i2cTest+0x158>)
 8000eaa:	f009 f94d 	bl	800a148 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d006      	beq.n	8000ec2 <i2cTest+0x7a>
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	483a      	ldr	r0, [pc, #232]	@ (8000fa0 <i2cTest+0x158>)
 8000eb8:	f009 f946 	bl	800a148 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d1f1      	bne.n	8000ea6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	4836      	ldr	r0, [pc, #216]	@ (8000fa0 <i2cTest+0x158>)
 8000ec8:	f009 f955 	bl	800a176 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f008 fb6b 	bl	80095a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000ed2:	bf00      	nop
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	4832      	ldr	r0, [pc, #200]	@ (8000fa0 <i2cTest+0x158>)
 8000ed8:	f009 f936 	bl	800a148 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d0f8      	beq.n	8000ed4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2140      	movs	r1, #64	@ 0x40
 8000ee6:	482e      	ldr	r0, [pc, #184]	@ (8000fa0 <i2cTest+0x158>)
 8000ee8:	f009 f945 	bl	800a176 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f008 fb5b 	bl	80095a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ef2:	bf00      	nop
 8000ef4:	2140      	movs	r1, #64	@ 0x40
 8000ef6:	482a      	ldr	r0, [pc, #168]	@ (8000fa0 <i2cTest+0x158>)
 8000ef8:	f009 f926 	bl	800a148 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d0f8      	beq.n	8000ef4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2140      	movs	r1, #64	@ 0x40
 8000f06:	4826      	ldr	r0, [pc, #152]	@ (8000fa0 <i2cTest+0x158>)
 8000f08:	f009 f935 	bl	800a176 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f008 fb4b 	bl	80095a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000f12:	bf00      	nop
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	4822      	ldr	r0, [pc, #136]	@ (8000fa0 <i2cTest+0x158>)
 8000f18:	f009 f916 	bl	800a148 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d1f8      	bne.n	8000f14 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <i2cTest+0x158>)
 8000f28:	f009 f925 	bl	800a176 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f008 fb3b 	bl	80095a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f32:	bf00      	nop
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	481a      	ldr	r0, [pc, #104]	@ (8000fa0 <i2cTest+0x158>)
 8000f38:	f009 f906 	bl	800a148 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1f8      	bne.n	8000f34 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f42:	23c0      	movs	r3, #192	@ 0xc0
 8000f44:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000f46:	2312      	movs	r3, #18
 8000f48:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4812      	ldr	r0, [pc, #72]	@ (8000fa0 <i2cTest+0x158>)
 8000f58:	f008 fe96 	bl	8009c88 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <i2cTest+0x154>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <i2cTest+0x154>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f6a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <i2cTest+0x154>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <i2cTest+0x154>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f7a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <i2cTest+0x154>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <i2cTest+0x154>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <i2cTest+0x154>)
 8000f8e:	f009 f923 	bl	800a1d8 <HAL_I2C_Init>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001a38 	.word	0x20001a38
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000fae:	20c8      	movs	r0, #200	@ 0xc8
 8000fb0:	f008 fafa 	bl	80095a8 <HAL_Delay>
	lcd_clear();
 8000fb4:	f007 fdb8 	bl	8008b28 <lcd_clear>
	if(type == 1 && page == 0) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d13e      	bne.n	800103c <printTemplate+0x98>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d13b      	bne.n	800103c <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000fc4:	4a9a      	ldr	r2, [pc, #616]	@ (8001230 <printTemplate+0x28c>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f007 fd81 	bl	8008ad0 <lcd_print>
		lcd_print(2, 3, "0");
 8000fce:	4a99      	ldr	r2, [pc, #612]	@ (8001234 <printTemplate+0x290>)
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f007 fd7c 	bl	8008ad0 <lcd_print>
		lcd_print(2, 4, "1");
 8000fd8:	4a97      	ldr	r2, [pc, #604]	@ (8001238 <printTemplate+0x294>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f007 fd77 	bl	8008ad0 <lcd_print>
		lcd_print(2, 5, "2");
 8000fe2:	4a96      	ldr	r2, [pc, #600]	@ (800123c <printTemplate+0x298>)
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f007 fd72 	bl	8008ad0 <lcd_print>
		lcd_print(2, 6, "3");
 8000fec:	4a94      	ldr	r2, [pc, #592]	@ (8001240 <printTemplate+0x29c>)
 8000fee:	2106      	movs	r1, #6
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f007 fd6d 	bl	8008ad0 <lcd_print>
		lcd_print(2, 7, "4");
 8000ff6:	4a93      	ldr	r2, [pc, #588]	@ (8001244 <printTemplate+0x2a0>)
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f007 fd68 	bl	8008ad0 <lcd_print>
		lcd_print(2, 10, "5");
 8001000:	4a91      	ldr	r2, [pc, #580]	@ (8001248 <printTemplate+0x2a4>)
 8001002:	210a      	movs	r1, #10
 8001004:	2002      	movs	r0, #2
 8001006:	f007 fd63 	bl	8008ad0 <lcd_print>
		lcd_print(2, 11, "6");
 800100a:	4a90      	ldr	r2, [pc, #576]	@ (800124c <printTemplate+0x2a8>)
 800100c:	210b      	movs	r1, #11
 800100e:	2002      	movs	r0, #2
 8001010:	f007 fd5e 	bl	8008ad0 <lcd_print>
		lcd_print(2, 12, "7");
 8001014:	4a8e      	ldr	r2, [pc, #568]	@ (8001250 <printTemplate+0x2ac>)
 8001016:	210c      	movs	r1, #12
 8001018:	2002      	movs	r0, #2
 800101a:	f007 fd59 	bl	8008ad0 <lcd_print>
		lcd_print(2, 13, "8");
 800101e:	4a8d      	ldr	r2, [pc, #564]	@ (8001254 <printTemplate+0x2b0>)
 8001020:	210d      	movs	r1, #13
 8001022:	2002      	movs	r0, #2
 8001024:	f007 fd54 	bl	8008ad0 <lcd_print>
		lcd_print(2, 14, "9");
 8001028:	4a8b      	ldr	r2, [pc, #556]	@ (8001258 <printTemplate+0x2b4>)
 800102a:	210e      	movs	r1, #14
 800102c:	2002      	movs	r0, #2
 800102e:	f007 fd4f 	bl	8008ad0 <lcd_print>
		lcd_gotoxy(2, 3);
 8001032:	2103      	movs	r1, #3
 8001034:	2002      	movs	r0, #2
 8001036:	f007 fd2c 	bl	8008a92 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 800103a:	e0f5      	b.n	8001228 <printTemplate+0x284>
	} else if(type == 2) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d178      	bne.n	8001134 <printTemplate+0x190>
		if(page == 1) {
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d114      	bne.n	8001072 <printTemplate+0xce>
			lcd_clear();
 8001048:	f007 fd6e 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f008 faab 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001052:	4a82      	ldr	r2, [pc, #520]	@ (800125c <printTemplate+0x2b8>)
 8001054:	2101      	movs	r1, #1
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fd3a 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800105c:	4a80      	ldr	r2, [pc, #512]	@ (8001260 <printTemplate+0x2bc>)
 800105e:	2107      	movs	r1, #7
 8001060:	2001      	movs	r0, #1
 8001062:	f007 fd35 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001066:	4a7f      	ldr	r2, [pc, #508]	@ (8001264 <printTemplate+0x2c0>)
 8001068:	2101      	movs	r1, #1
 800106a:	2002      	movs	r0, #2
 800106c:	f007 fd30 	bl	8008ad0 <lcd_print>
}
 8001070:	e0da      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 2) {
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d114      	bne.n	80010a2 <printTemplate+0xfe>
			lcd_clear();
 8001078:	f007 fd56 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	@ 0x64
 800107e:	f008 fa93 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001082:	4a79      	ldr	r2, [pc, #484]	@ (8001268 <printTemplate+0x2c4>)
 8001084:	2101      	movs	r1, #1
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fd22 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800108c:	4a74      	ldr	r2, [pc, #464]	@ (8001260 <printTemplate+0x2bc>)
 800108e:	2107      	movs	r1, #7
 8001090:	2001      	movs	r0, #1
 8001092:	f007 fd1d 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001096:	4a75      	ldr	r2, [pc, #468]	@ (800126c <printTemplate+0x2c8>)
 8001098:	2101      	movs	r1, #1
 800109a:	2002      	movs	r0, #2
 800109c:	f007 fd18 	bl	8008ad0 <lcd_print>
}
 80010a0:	e0c2      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 3) {
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d114      	bne.n	80010d2 <printTemplate+0x12e>
			lcd_clear();
 80010a8:	f007 fd3e 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f008 fa7b 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80010b2:	4a6a      	ldr	r2, [pc, #424]	@ (800125c <printTemplate+0x2b8>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fd0a 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010bc:	4a68      	ldr	r2, [pc, #416]	@ (8001260 <printTemplate+0x2bc>)
 80010be:	2107      	movs	r1, #7
 80010c0:	2001      	movs	r0, #1
 80010c2:	f007 fd05 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80010c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001270 <printTemplate+0x2cc>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	2002      	movs	r0, #2
 80010cc:	f007 fd00 	bl	8008ad0 <lcd_print>
}
 80010d0:	e0aa      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 4) {
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d114      	bne.n	8001102 <printTemplate+0x15e>
			lcd_clear();
 80010d8:	f007 fd26 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f008 fa63 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80010e2:	4a5e      	ldr	r2, [pc, #376]	@ (800125c <printTemplate+0x2b8>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f007 fcf2 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001260 <printTemplate+0x2bc>)
 80010ee:	2107      	movs	r1, #7
 80010f0:	2001      	movs	r0, #1
 80010f2:	f007 fced 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80010f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001274 <printTemplate+0x2d0>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2002      	movs	r0, #2
 80010fc:	f007 fce8 	bl	8008ad0 <lcd_print>
}
 8001100:	e092      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 5) {
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b05      	cmp	r3, #5
 8001106:	f040 808f 	bne.w	8001228 <printTemplate+0x284>
			lcd_clear();
 800110a:	f007 fd0d 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	@ 0x64
 8001110:	f008 fa4a 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001114:	4a51      	ldr	r2, [pc, #324]	@ (800125c <printTemplate+0x2b8>)
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f007 fcd9 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800111e:	4a50      	ldr	r2, [pc, #320]	@ (8001260 <printTemplate+0x2bc>)
 8001120:	2107      	movs	r1, #7
 8001122:	2001      	movs	r0, #1
 8001124:	f007 fcd4 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001128:	4a53      	ldr	r2, [pc, #332]	@ (8001278 <printTemplate+0x2d4>)
 800112a:	2101      	movs	r1, #1
 800112c:	2002      	movs	r0, #2
 800112e:	f007 fccf 	bl	8008ad0 <lcd_print>
}
 8001132:	e079      	b.n	8001228 <printTemplate+0x284>
	} else if(type == 3) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d176      	bne.n	8001228 <printTemplate+0x284>
		if(page == 1) {
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d114      	bne.n	800116a <printTemplate+0x1c6>
			lcd_clear();
 8001140:	f007 fcf2 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	@ 0x64
 8001146:	f008 fa2f 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800114a:	4a4c      	ldr	r2, [pc, #304]	@ (800127c <printTemplate+0x2d8>)
 800114c:	2101      	movs	r1, #1
 800114e:	2001      	movs	r0, #1
 8001150:	f007 fcbe 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001154:	4a4a      	ldr	r2, [pc, #296]	@ (8001280 <printTemplate+0x2dc>)
 8001156:	2107      	movs	r1, #7
 8001158:	2001      	movs	r0, #1
 800115a:	f007 fcb9 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800115e:	4a41      	ldr	r2, [pc, #260]	@ (8001264 <printTemplate+0x2c0>)
 8001160:	2101      	movs	r1, #1
 8001162:	2002      	movs	r0, #2
 8001164:	f007 fcb4 	bl	8008ad0 <lcd_print>
}
 8001168:	e05e      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 2) {
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d114      	bne.n	800119a <printTemplate+0x1f6>
			lcd_clear();
 8001170:	f007 fcda 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 8001174:	2064      	movs	r0, #100	@ 0x64
 8001176:	f008 fa17 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800117a:	4a40      	ldr	r2, [pc, #256]	@ (800127c <printTemplate+0x2d8>)
 800117c:	2101      	movs	r1, #1
 800117e:	2001      	movs	r0, #1
 8001180:	f007 fca6 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001184:	4a3e      	ldr	r2, [pc, #248]	@ (8001280 <printTemplate+0x2dc>)
 8001186:	2107      	movs	r1, #7
 8001188:	2001      	movs	r0, #1
 800118a:	f007 fca1 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <printTemplate+0x2c8>)
 8001190:	2101      	movs	r1, #1
 8001192:	2002      	movs	r0, #2
 8001194:	f007 fc9c 	bl	8008ad0 <lcd_print>
}
 8001198:	e046      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 3) {
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d114      	bne.n	80011ca <printTemplate+0x226>
			lcd_clear();
 80011a0:	f007 fcc2 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 80011a4:	2064      	movs	r0, #100	@ 0x64
 80011a6:	f008 f9ff 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80011aa:	4a34      	ldr	r2, [pc, #208]	@ (800127c <printTemplate+0x2d8>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	2001      	movs	r0, #1
 80011b0:	f007 fc8e 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011b4:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <printTemplate+0x2dc>)
 80011b6:	2107      	movs	r1, #7
 80011b8:	2001      	movs	r0, #1
 80011ba:	f007 fc89 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80011be:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <printTemplate+0x2cc>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	2002      	movs	r0, #2
 80011c4:	f007 fc84 	bl	8008ad0 <lcd_print>
}
 80011c8:	e02e      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 4) {
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d114      	bne.n	80011fa <printTemplate+0x256>
			lcd_clear();
 80011d0:	f007 fcaa 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	@ 0x64
 80011d6:	f008 f9e7 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80011da:	4a28      	ldr	r2, [pc, #160]	@ (800127c <printTemplate+0x2d8>)
 80011dc:	2101      	movs	r1, #1
 80011de:	2001      	movs	r0, #1
 80011e0:	f007 fc76 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011e4:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <printTemplate+0x2dc>)
 80011e6:	2107      	movs	r1, #7
 80011e8:	2001      	movs	r0, #1
 80011ea:	f007 fc71 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80011ee:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <printTemplate+0x2d0>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2002      	movs	r0, #2
 80011f4:	f007 fc6c 	bl	8008ad0 <lcd_print>
}
 80011f8:	e016      	b.n	8001228 <printTemplate+0x284>
		} else if(page == 5) {
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d113      	bne.n	8001228 <printTemplate+0x284>
			lcd_clear();
 8001200:	f007 fc92 	bl	8008b28 <lcd_clear>
			HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	@ 0x64
 8001206:	f008 f9cf 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <printTemplate+0x2d8>)
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f007 fc5e 	bl	8008ad0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001214:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <printTemplate+0x2dc>)
 8001216:	2107      	movs	r1, #7
 8001218:	2001      	movs	r0, #1
 800121a:	f007 fc59 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800121e:	4a16      	ldr	r2, [pc, #88]	@ (8001278 <printTemplate+0x2d4>)
 8001220:	2101      	movs	r1, #1
 8001222:	2002      	movs	r0, #2
 8001224:	f007 fc54 	bl	8008ad0 <lcd_print>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800e788 	.word	0x0800e788
 8001234:	0800e790 	.word	0x0800e790
 8001238:	0800e794 	.word	0x0800e794
 800123c:	0800e798 	.word	0x0800e798
 8001240:	0800e79c 	.word	0x0800e79c
 8001244:	0800e7a0 	.word	0x0800e7a0
 8001248:	0800e7a4 	.word	0x0800e7a4
 800124c:	0800e7a8 	.word	0x0800e7a8
 8001250:	0800e7ac 	.word	0x0800e7ac
 8001254:	0800e7b0 	.word	0x0800e7b0
 8001258:	0800e7b4 	.word	0x0800e7b4
 800125c:	0800e7b8 	.word	0x0800e7b8
 8001260:	20001070 	.word	0x20001070
 8001264:	0800e7cc 	.word	0x0800e7cc
 8001268:	0800e7e0 	.word	0x0800e7e0
 800126c:	0800e7e8 	.word	0x0800e7e8
 8001270:	0800e7fc 	.word	0x0800e7fc
 8001274:	0800e810 	.word	0x0800e810
 8001278:	0800e824 	.word	0x0800e824
 800127c:	0800e838 	.word	0x0800e838
 8001280:	20001080 	.word	0x20001080

08001284 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d10a      	bne.n	80012a8 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8001292:	4a18      	ldr	r2, [pc, #96]	@ (80012f4 <printCredentials+0x70>)
 8001294:	2101      	movs	r1, #1
 8001296:	2002      	movs	r0, #2
 8001298:	f007 fc1a 	bl	8008ad0 <lcd_print>
		lcd_print(2, 13, "    ");
 800129c:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <printCredentials+0x74>)
 800129e:	210d      	movs	r1, #13
 80012a0:	2002      	movs	r0, #2
 80012a2:	f007 fc15 	bl	8008ad0 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80012a6:	e021      	b.n	80012ec <printCredentials+0x68>
	} else if(type == 2) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d10f      	bne.n	80012ce <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80012ae:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <printCredentials+0x78>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	2001      	movs	r0, #1
 80012b4:	f007 fc0c 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, "                ");
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <printCredentials+0x7c>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	2002      	movs	r0, #2
 80012be:	f007 fc07 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <printCredentials+0x80>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	2002      	movs	r0, #2
 80012c8:	f007 fc02 	bl	8008ad0 <lcd_print>
}
 80012cc:	e00e      	b.n	80012ec <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <printCredentials+0x84>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	2001      	movs	r0, #1
 80012d4:	f007 fbfc 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, "                ");
 80012d8:	4a09      	ldr	r2, [pc, #36]	@ (8001300 <printCredentials+0x7c>)
 80012da:	2101      	movs	r1, #1
 80012dc:	2002      	movs	r0, #2
 80012de:	f007 fbf7 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, wifiPass);
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <printCredentials+0x88>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	2002      	movs	r0, #2
 80012e8:	f007 fbf2 	bl	8008ad0 <lcd_print>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20001064 	.word	0x20001064
 80012f8:	0800e84c 	.word	0x0800e84c
 80012fc:	0800e854 	.word	0x0800e854
 8001300:	0800e868 	.word	0x0800e868
 8001304:	20001070 	.word	0x20001070
 8001308:	0800e87c 	.word	0x0800e87c
 800130c:	20001080 	.word	0x20001080

08001310 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001314:	f3bf 8f4f 	dsb	sy
}
 8001318:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <__NVIC_SystemReset+0x24>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001322:	4904      	ldr	r1, [pc, #16]	@ (8001334 <__NVIC_SystemReset+0x24>)
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <__NVIC_SystemReset+0x28>)
 8001326:	4313      	orrs	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <__NVIC_SystemReset+0x20>
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	05fa0004 	.word	0x05fa0004

0800133c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001342:	2101      	movs	r1, #1
 8001344:	488e      	ldr	r0, [pc, #568]	@ (8001580 <menu+0x244>)
 8001346:	f008 feff 	bl	800a148 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8099 	bne.w	8001484 <menu+0x148>
 8001352:	4b8c      	ldr	r3, [pc, #560]	@ (8001584 <menu+0x248>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f083 0301 	eor.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8091 	beq.w	8001484 <menu+0x148>
		menuSayac = menuSayac+1;
 8001362:	4b89      	ldr	r3, [pc, #548]	@ (8001588 <menu+0x24c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b87      	ldr	r3, [pc, #540]	@ (8001588 <menu+0x24c>)
 800136c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800136e:	4b86      	ldr	r3, [pc, #536]	@ (8001588 <menu+0x24c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b24      	cmp	r3, #36	@ 0x24
 8001374:	d102      	bne.n	800137c <menu+0x40>
			menuSayac = 1;
 8001376:	4b84      	ldr	r3, [pc, #528]	@ (8001588 <menu+0x24c>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800137c:	4b82      	ldr	r3, [pc, #520]	@ (8001588 <menu+0x24c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d106      	bne.n	8001392 <menu+0x56>
 8001384:	4b81      	ldr	r3, [pc, #516]	@ (800158c <menu+0x250>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <menu+0x56>
			menuSayac = 21;
 800138c:	4b7e      	ldr	r3, [pc, #504]	@ (8001588 <menu+0x24c>)
 800138e:	2215      	movs	r2, #21
 8001390:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001392:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <menu+0x24c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d106      	bne.n	80013a8 <menu+0x6c>
 800139a:	4b7d      	ldr	r3, [pc, #500]	@ (8001590 <menu+0x254>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <menu+0x6c>
			menuSayac = 16;
 80013a2:	4b79      	ldr	r3, [pc, #484]	@ (8001588 <menu+0x24c>)
 80013a4:	2210      	movs	r2, #16
 80013a6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013a8:	4b77      	ldr	r3, [pc, #476]	@ (8001588 <menu+0x24c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b0d      	cmp	r3, #13
 80013ae:	d106      	bne.n	80013be <menu+0x82>
 80013b0:	4b77      	ldr	r3, [pc, #476]	@ (8001590 <menu+0x254>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <menu+0x82>
			menuSayac = 16;
 80013b8:	4b73      	ldr	r3, [pc, #460]	@ (8001588 <menu+0x24c>)
 80013ba:	2210      	movs	r2, #16
 80013bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013be:	4b72      	ldr	r3, [pc, #456]	@ (8001588 <menu+0x24c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	d106      	bne.n	80013d4 <menu+0x98>
 80013c6:	4b72      	ldr	r3, [pc, #456]	@ (8001590 <menu+0x254>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d102      	bne.n	80013d4 <menu+0x98>
			menuSayac = 13;
 80013ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001588 <menu+0x24c>)
 80013d0:	220d      	movs	r2, #13
 80013d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001588 <menu+0x24c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b0a      	cmp	r3, #10
 80013da:	d10a      	bne.n	80013f2 <menu+0xb6>
 80013dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001594 <menu+0x258>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d003      	beq.n	80013ec <menu+0xb0>
 80013e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001594 <menu+0x258>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d102      	bne.n	80013f2 <menu+0xb6>
			menuSayac = 11;
 80013ec:	4b66      	ldr	r3, [pc, #408]	@ (8001588 <menu+0x24c>)
 80013ee:	220b      	movs	r2, #11
 80013f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013f2:	4b65      	ldr	r3, [pc, #404]	@ (8001588 <menu+0x24c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d10e      	bne.n	8001418 <menu+0xdc>
 80013fa:	4b67      	ldr	r3, [pc, #412]	@ (8001598 <menu+0x25c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d003      	beq.n	800140a <menu+0xce>
 8001402:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <menu+0x25c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d106      	bne.n	8001418 <menu+0xdc>
 800140a:	4b61      	ldr	r3, [pc, #388]	@ (8001590 <menu+0x254>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <menu+0xdc>
			menuSayac = 16;
 8001412:	4b5d      	ldr	r3, [pc, #372]	@ (8001588 <menu+0x24c>)
 8001414:	2210      	movs	r2, #16
 8001416:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001418:	4b5b      	ldr	r3, [pc, #364]	@ (8001588 <menu+0x24c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d10e      	bne.n	800143e <menu+0x102>
 8001420:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <menu+0x25c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d003      	beq.n	8001430 <menu+0xf4>
 8001428:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <menu+0x25c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d106      	bne.n	800143e <menu+0x102>
 8001430:	4b57      	ldr	r3, [pc, #348]	@ (8001590 <menu+0x254>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d102      	bne.n	800143e <menu+0x102>
			menuSayac = 13;
 8001438:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <menu+0x24c>)
 800143a:	220d      	movs	r2, #13
 800143c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800143e:	4b52      	ldr	r3, [pc, #328]	@ (8001588 <menu+0x24c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	d106      	bne.n	8001454 <menu+0x118>
 8001446:	4b55      	ldr	r3, [pc, #340]	@ (800159c <menu+0x260>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <menu+0x118>
			menuSayac = 16;
 800144e:	4b4e      	ldr	r3, [pc, #312]	@ (8001588 <menu+0x24c>)
 8001450:	2210      	movs	r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001454:	4b4c      	ldr	r3, [pc, #304]	@ (8001588 <menu+0x24c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b18      	cmp	r3, #24
 800145a:	d106      	bne.n	800146a <menu+0x12e>
 800145c:	4b4b      	ldr	r3, [pc, #300]	@ (800158c <menu+0x250>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <menu+0x12e>
			menuSayac = 26;
 8001464:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <menu+0x24c>)
 8001466:	221a      	movs	r2, #26
 8001468:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800146a:	4b47      	ldr	r3, [pc, #284]	@ (8001588 <menu+0x24c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b21      	cmp	r3, #33	@ 0x21
 8001470:	d106      	bne.n	8001480 <menu+0x144>
 8001472:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <menu+0x264>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <menu+0x144>
			menuSayac = 35;
 800147a:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <menu+0x24c>)
 800147c:	2223      	movs	r2, #35	@ 0x23
 800147e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001480:	f002 fca2 	bl	8003dc8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001484:	2108      	movs	r1, #8
 8001486:	4847      	ldr	r0, [pc, #284]	@ (80015a4 <menu+0x268>)
 8001488:	f008 fe5e 	bl	800a148 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	2b01      	cmp	r3, #1
 8001490:	f040 8097 	bne.w	80015c2 <menu+0x286>
 8001494:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <menu+0x248>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 808f 	beq.w	80015c2 <menu+0x286>
		if (menuSayac <= 1) {
 80014a4:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <menu+0x24c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d802      	bhi.n	80014b2 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <menu+0x24c>)
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014b2:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <menu+0x24c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <menu+0x24c>)
 80014bc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014be:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <menu+0x24c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b14      	cmp	r3, #20
 80014c4:	d106      	bne.n	80014d4 <menu+0x198>
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <menu+0x250>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <menu+0x198>
			menuSayac = 17;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <menu+0x24c>)
 80014d0:	2211      	movs	r2, #17
 80014d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <menu+0x24c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d106      	bne.n	80014ea <menu+0x1ae>
 80014dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <menu+0x254>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <menu+0x1ae>
			menuSayac = 7;
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <menu+0x24c>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <menu+0x24c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	d106      	bne.n	8001500 <menu+0x1c4>
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <menu+0x254>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d102      	bne.n	8001500 <menu+0x1c4>
			menuSayac = 12;
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <menu+0x24c>)
 80014fc:	220c      	movs	r2, #12
 80014fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <menu+0x24c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d106      	bne.n	8001516 <menu+0x1da>
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <menu+0x254>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d102      	bne.n	8001516 <menu+0x1da>
			menuSayac = 8;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <menu+0x24c>)
 8001512:	2208      	movs	r2, #8
 8001514:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <menu+0x24c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d10a      	bne.n	8001534 <menu+0x1f8>
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <menu+0x258>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <menu+0x1f2>
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <menu+0x258>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d102      	bne.n	8001534 <menu+0x1f8>
			menuSayac = 9;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <menu+0x24c>)
 8001530:	2209      	movs	r2, #9
 8001532:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <menu+0x24c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d10a      	bne.n	8001552 <menu+0x216>
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <menu+0x25c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d003      	beq.n	800154c <menu+0x210>
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <menu+0x25c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d102      	bne.n	8001552 <menu+0x216>
			menuSayac = 11;
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <menu+0x24c>)
 800154e:	220b      	movs	r2, #11
 8001550:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <menu+0x24c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d106      	bne.n	8001568 <menu+0x22c>
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <menu+0x260>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <menu+0x22c>
			menuSayac = 14;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <menu+0x24c>)
 8001564:	220e      	movs	r2, #14
 8001566:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <menu+0x24c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b19      	cmp	r3, #25
 800156e:	d11b      	bne.n	80015a8 <menu+0x26c>
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <menu+0x250>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d117      	bne.n	80015a8 <menu+0x26c>
			menuSayac = 23;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <menu+0x24c>)
 800157a:	2217      	movs	r2, #23
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e013      	b.n	80015a8 <menu+0x26c>
 8001580:	40010800 	.word	0x40010800
 8001584:	200010eb 	.word	0x200010eb
 8001588:	200010bc 	.word	0x200010bc
 800158c:	200010cb 	.word	0x200010cb
 8001590:	200010c4 	.word	0x200010c4
 8001594:	200010c5 	.word	0x200010c5
 8001598:	200010c6 	.word	0x200010c6
 800159c:	200010c7 	.word	0x200010c7
 80015a0:	200010e7 	.word	0x200010e7
 80015a4:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80015a8:	4bb0      	ldr	r3, [pc, #704]	@ (800186c <menu+0x530>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b22      	cmp	r3, #34	@ 0x22
 80015ae:	d106      	bne.n	80015be <menu+0x282>
 80015b0:	4baf      	ldr	r3, [pc, #700]	@ (8001870 <menu+0x534>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <menu+0x282>
			menuSayac = 32;
 80015b8:	4bac      	ldr	r3, [pc, #688]	@ (800186c <menu+0x530>)
 80015ba:	2220      	movs	r2, #32
 80015bc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015be:	f002 fc03 	bl	8003dc8 <bekle>
	}

	if (menuSayac == 0) {
 80015c2:	4baa      	ldr	r3, [pc, #680]	@ (800186c <menu+0x530>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80015ca:	4aaa      	ldr	r2, [pc, #680]	@ (8001874 <menu+0x538>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	2001      	movs	r0, #1
 80015d0:	f007 fa7e 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80015d4:	4aa8      	ldr	r2, [pc, #672]	@ (8001878 <menu+0x53c>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	2002      	movs	r0, #2
 80015da:	f007 fa79 	bl	8008ad0 <lcd_print>
	}

	if (menuSayac == 1) {
 80015de:	4ba3      	ldr	r3, [pc, #652]	@ (800186c <menu+0x530>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	f040 81f4 	bne.w	80019d0 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 80015e8:	4aa4      	ldr	r2, [pc, #656]	@ (800187c <menu+0x540>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	2001      	movs	r0, #1
 80015ee:	f007 fa6f 	bl	8008ad0 <lcd_print>

		if(hataGostermeSirasi == 0) {
 80015f2:	4ba3      	ldr	r3, [pc, #652]	@ (8001880 <menu+0x544>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 80015fa:	4aa2      	ldr	r2, [pc, #648]	@ (8001884 <menu+0x548>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	2002      	movs	r0, #2
 8001600:	f007 fa66 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "   ");
 8001604:	4aa0      	ldr	r2, [pc, #640]	@ (8001888 <menu+0x54c>)
 8001606:	210f      	movs	r1, #15
 8001608:	2002      	movs	r0, #2
 800160a:	f007 fa61 	bl	8008ad0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800160e:	4b9f      	ldr	r3, [pc, #636]	@ (800188c <menu+0x550>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	220a      	movs	r2, #10
 8001614:	499e      	ldr	r1, [pc, #632]	@ (8001890 <menu+0x554>)
 8001616:	4618      	mov	r0, r3
 8001618:	f00b fe1e 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 800161c:	4a9c      	ldr	r2, [pc, #624]	@ (8001890 <menu+0x554>)
 800161e:	210e      	movs	r1, #14
 8001620:	2002      	movs	r0, #2
 8001622:	f007 fa55 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001626:	4b96      	ldr	r3, [pc, #600]	@ (8001880 <menu+0x544>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d115      	bne.n	800165a <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800162e:	4a99      	ldr	r2, [pc, #612]	@ (8001894 <menu+0x558>)
 8001630:	2101      	movs	r1, #1
 8001632:	2002      	movs	r0, #2
 8001634:	f007 fa4c 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001638:	4a97      	ldr	r2, [pc, #604]	@ (8001898 <menu+0x55c>)
 800163a:	210f      	movs	r1, #15
 800163c:	2002      	movs	r0, #2
 800163e:	f007 fa47 	bl	8008ad0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001642:	4b96      	ldr	r3, [pc, #600]	@ (800189c <menu+0x560>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	220a      	movs	r2, #10
 8001648:	4991      	ldr	r1, [pc, #580]	@ (8001890 <menu+0x554>)
 800164a:	4618      	mov	r0, r3
 800164c:	f00b fe04 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 8001650:	4a8f      	ldr	r2, [pc, #572]	@ (8001890 <menu+0x554>)
 8001652:	210e      	movs	r1, #14
 8001654:	2002      	movs	r0, #2
 8001656:	f007 fa3b 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800165a:	4b89      	ldr	r3, [pc, #548]	@ (8001880 <menu+0x544>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d115      	bne.n	800168e <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001662:	4a8f      	ldr	r2, [pc, #572]	@ (80018a0 <menu+0x564>)
 8001664:	2101      	movs	r1, #1
 8001666:	2002      	movs	r0, #2
 8001668:	f007 fa32 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 800166c:	4a8a      	ldr	r2, [pc, #552]	@ (8001898 <menu+0x55c>)
 800166e:	210f      	movs	r1, #15
 8001670:	2002      	movs	r0, #2
 8001672:	f007 fa2d 	bl	8008ad0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001676:	4b8b      	ldr	r3, [pc, #556]	@ (80018a4 <menu+0x568>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	220a      	movs	r2, #10
 800167c:	4984      	ldr	r1, [pc, #528]	@ (8001890 <menu+0x554>)
 800167e:	4618      	mov	r0, r3
 8001680:	f00b fdea 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 8001684:	4a82      	ldr	r2, [pc, #520]	@ (8001890 <menu+0x554>)
 8001686:	210e      	movs	r1, #14
 8001688:	2002      	movs	r0, #2
 800168a:	f007 fa21 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800168e:	4b7c      	ldr	r3, [pc, #496]	@ (8001880 <menu+0x544>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d115      	bne.n	80016c2 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001696:	4a84      	ldr	r2, [pc, #528]	@ (80018a8 <menu+0x56c>)
 8001698:	2101      	movs	r1, #1
 800169a:	2002      	movs	r0, #2
 800169c:	f007 fa18 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 80016a0:	4a7d      	ldr	r2, [pc, #500]	@ (8001898 <menu+0x55c>)
 80016a2:	210f      	movs	r1, #15
 80016a4:	2002      	movs	r0, #2
 80016a6:	f007 fa13 	bl	8008ad0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80016aa:	4b80      	ldr	r3, [pc, #512]	@ (80018ac <menu+0x570>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	220a      	movs	r2, #10
 80016b0:	4977      	ldr	r1, [pc, #476]	@ (8001890 <menu+0x554>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00b fdd0 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 80016b8:	4a75      	ldr	r2, [pc, #468]	@ (8001890 <menu+0x554>)
 80016ba:	210e      	movs	r1, #14
 80016bc:	2002      	movs	r0, #2
 80016be:	f007 fa07 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <menu+0x544>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d115      	bne.n	80016f6 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80016ca:	4a79      	ldr	r2, [pc, #484]	@ (80018b0 <menu+0x574>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	2002      	movs	r0, #2
 80016d0:	f007 f9fe 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 80016d4:	4a70      	ldr	r2, [pc, #448]	@ (8001898 <menu+0x55c>)
 80016d6:	210f      	movs	r1, #15
 80016d8:	2002      	movs	r0, #2
 80016da:	f007 f9f9 	bl	8008ad0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016de:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <menu+0x578>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	220a      	movs	r2, #10
 80016e4:	496a      	ldr	r1, [pc, #424]	@ (8001890 <menu+0x554>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00b fdb6 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 80016ec:	4a68      	ldr	r2, [pc, #416]	@ (8001890 <menu+0x554>)
 80016ee:	210e      	movs	r1, #14
 80016f0:	2002      	movs	r0, #2
 80016f2:	f007 f9ed 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80016f6:	4b62      	ldr	r3, [pc, #392]	@ (8001880 <menu+0x544>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d115      	bne.n	800172a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 80016fe:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <menu+0x57c>)
 8001700:	2101      	movs	r1, #1
 8001702:	2002      	movs	r0, #2
 8001704:	f007 f9e4 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001708:	4a63      	ldr	r2, [pc, #396]	@ (8001898 <menu+0x55c>)
 800170a:	210f      	movs	r1, #15
 800170c:	2002      	movs	r0, #2
 800170e:	f007 f9df 	bl	8008ad0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001712:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <menu+0x580>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	220a      	movs	r2, #10
 8001718:	495d      	ldr	r1, [pc, #372]	@ (8001890 <menu+0x554>)
 800171a:	4618      	mov	r0, r3
 800171c:	f00b fd9c 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 8001720:	4a5b      	ldr	r2, [pc, #364]	@ (8001890 <menu+0x554>)
 8001722:	210e      	movs	r1, #14
 8001724:	2002      	movs	r0, #2
 8001726:	f007 f9d3 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800172a:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <menu+0x544>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b06      	cmp	r3, #6
 8001730:	d115      	bne.n	800175e <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001732:	4a63      	ldr	r2, [pc, #396]	@ (80018c0 <menu+0x584>)
 8001734:	2101      	movs	r1, #1
 8001736:	2002      	movs	r0, #2
 8001738:	f007 f9ca 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 800173c:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <menu+0x55c>)
 800173e:	210f      	movs	r1, #15
 8001740:	2002      	movs	r0, #2
 8001742:	f007 f9c5 	bl	8008ad0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <menu+0x588>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	220a      	movs	r2, #10
 800174c:	4950      	ldr	r1, [pc, #320]	@ (8001890 <menu+0x554>)
 800174e:	4618      	mov	r0, r3
 8001750:	f00b fd82 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 8001754:	4a4e      	ldr	r2, [pc, #312]	@ (8001890 <menu+0x554>)
 8001756:	210e      	movs	r1, #14
 8001758:	2002      	movs	r0, #2
 800175a:	f007 f9b9 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800175e:	4b48      	ldr	r3, [pc, #288]	@ (8001880 <menu+0x544>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b07      	cmp	r3, #7
 8001764:	d115      	bne.n	8001792 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001766:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <menu+0x58c>)
 8001768:	2101      	movs	r1, #1
 800176a:	2002      	movs	r0, #2
 800176c:	f007 f9b0 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 8001770:	4a49      	ldr	r2, [pc, #292]	@ (8001898 <menu+0x55c>)
 8001772:	210f      	movs	r1, #15
 8001774:	2002      	movs	r0, #2
 8001776:	f007 f9ab 	bl	8008ad0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800177a:	4b54      	ldr	r3, [pc, #336]	@ (80018cc <menu+0x590>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	220a      	movs	r2, #10
 8001780:	4943      	ldr	r1, [pc, #268]	@ (8001890 <menu+0x554>)
 8001782:	4618      	mov	r0, r3
 8001784:	f00b fd68 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 8001788:	4a41      	ldr	r2, [pc, #260]	@ (8001890 <menu+0x554>)
 800178a:	210e      	movs	r1, #14
 800178c:	2002      	movs	r0, #2
 800178e:	f007 f99f 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001792:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <menu+0x544>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d115      	bne.n	80017c6 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 800179a:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <menu+0x594>)
 800179c:	2101      	movs	r1, #1
 800179e:	2002      	movs	r0, #2
 80017a0:	f007 f996 	bl	8008ad0 <lcd_print>
			lcd_print(2, 15, "  ");
 80017a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001898 <menu+0x55c>)
 80017a6:	210f      	movs	r1, #15
 80017a8:	2002      	movs	r0, #2
 80017aa:	f007 f991 	bl	8008ad0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017ae:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <menu+0x598>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	220a      	movs	r2, #10
 80017b4:	4936      	ldr	r1, [pc, #216]	@ (8001890 <menu+0x554>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00b fd4e 	bl	800d258 <itoa>
			lcd_print(2, 14, snum);
 80017bc:	4a34      	ldr	r2, [pc, #208]	@ (8001890 <menu+0x554>)
 80017be:	210e      	movs	r1, #14
 80017c0:	2002      	movs	r0, #2
 80017c2:	f007 f985 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001880 <menu+0x544>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	d115      	bne.n	80017fa <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80017ce:	4a42      	ldr	r2, [pc, #264]	@ (80018d8 <menu+0x59c>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	2002      	movs	r0, #2
 80017d4:	f007 f97c 	bl	8008ad0 <lcd_print>
			lcd_print(2, 16, " ");
 80017d8:	4a40      	ldr	r2, [pc, #256]	@ (80018dc <menu+0x5a0>)
 80017da:	2110      	movs	r1, #16
 80017dc:	2002      	movs	r0, #2
 80017de:	f007 f977 	bl	8008ad0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <menu+0x5a4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	220a      	movs	r2, #10
 80017e8:	4929      	ldr	r1, [pc, #164]	@ (8001890 <menu+0x554>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00b fd34 	bl	800d258 <itoa>
			lcd_print(2, 15, snum);
 80017f0:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <menu+0x554>)
 80017f2:	210f      	movs	r1, #15
 80017f4:	2002      	movs	r0, #2
 80017f6:	f007 f96b 	bl	8008ad0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <menu+0x544>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d104      	bne.n	800180c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001802:	4a38      	ldr	r2, [pc, #224]	@ (80018e4 <menu+0x5a8>)
 8001804:	2101      	movs	r1, #1
 8001806:	2002      	movs	r0, #2
 8001808:	f007 f962 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800180c:	2102      	movs	r1, #2
 800180e:	4836      	ldr	r0, [pc, #216]	@ (80018e8 <menu+0x5ac>)
 8001810:	f008 fc9a 	bl	800a148 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d119      	bne.n	800184e <menu+0x512>
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <menu+0x5b0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d012      	beq.n	800184e <menu+0x512>
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <menu+0x5b4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10e      	bne.n	800184e <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <menu+0x544>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <menu+0x544>)
 800183a:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <menu+0x544>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0a      	cmp	r3, #10
 8001842:	d902      	bls.n	800184a <menu+0x50e>
				hataGostermeSirasi = 0;
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <menu+0x544>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800184a:	f002 fabd 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800184e:	2104      	movs	r1, #4
 8001850:	4825      	ldr	r0, [pc, #148]	@ (80018e8 <menu+0x5ac>)
 8001852:	f008 fc79 	bl	800a148 <HAL_GPIO_ReadPin>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d15e      	bne.n	800191a <menu+0x5de>
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <menu+0x5b0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d057      	beq.n	800191a <menu+0x5de>
 800186a:	e043      	b.n	80018f4 <menu+0x5b8>
 800186c:	200010bc 	.word	0x200010bc
 8001870:	200010e7 	.word	0x200010e7
 8001874:	2000131c 	.word	0x2000131c
 8001878:	20001330 	.word	0x20001330
 800187c:	20001344 	.word	0x20001344
 8001880:	200010be 	.word	0x200010be
 8001884:	20001358 	.word	0x20001358
 8001888:	0800e890 	.word	0x0800e890
 800188c:	200010dd 	.word	0x200010dd
 8001890:	2000105c 	.word	0x2000105c
 8001894:	2000136c 	.word	0x2000136c
 8001898:	0800e894 	.word	0x0800e894
 800189c:	200010de 	.word	0x200010de
 80018a0:	20001380 	.word	0x20001380
 80018a4:	200010df 	.word	0x200010df
 80018a8:	20001394 	.word	0x20001394
 80018ac:	200010e0 	.word	0x200010e0
 80018b0:	200013a8 	.word	0x200013a8
 80018b4:	200010e1 	.word	0x200010e1
 80018b8:	200013bc 	.word	0x200013bc
 80018bc:	200010e2 	.word	0x200010e2
 80018c0:	200013d0 	.word	0x200013d0
 80018c4:	200010e3 	.word	0x200010e3
 80018c8:	200013e4 	.word	0x200013e4
 80018cc:	200010e4 	.word	0x200010e4
 80018d0:	200013f8 	.word	0x200013f8
 80018d4:	200010e5 	.word	0x200010e5
 80018d8:	2000140c 	.word	0x2000140c
 80018dc:	0800e898 	.word	0x0800e898
 80018e0:	200010e6 	.word	0x200010e6
 80018e4:	20001420 	.word	0x20001420
 80018e8:	40010800 	.word	0x40010800
 80018ec:	200010eb 	.word	0x200010eb
 80018f0:	200010cb 	.word	0x200010cb
 80018f4:	4b8a      	ldr	r3, [pc, #552]	@ (8001b20 <menu+0x7e4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10e      	bne.n	800191a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018fc:	4b89      	ldr	r3, [pc, #548]	@ (8001b24 <menu+0x7e8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b87      	ldr	r3, [pc, #540]	@ (8001b24 <menu+0x7e8>)
 8001906:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001908:	4b86      	ldr	r3, [pc, #536]	@ (8001b24 <menu+0x7e8>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b0b      	cmp	r3, #11
 800190e:	d902      	bls.n	8001916 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001910:	4b84      	ldr	r3, [pc, #528]	@ (8001b24 <menu+0x7e8>)
 8001912:	220a      	movs	r2, #10
 8001914:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001916:	f002 fa57 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800191a:	2108      	movs	r1, #8
 800191c:	4882      	ldr	r0, [pc, #520]	@ (8001b28 <menu+0x7ec>)
 800191e:	f008 fc13 	bl	800a148 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d153      	bne.n	80019d0 <menu+0x694>
 8001928:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <menu+0x7f0>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d04c      	beq.n	80019d0 <menu+0x694>
 8001936:	4b7b      	ldr	r3, [pc, #492]	@ (8001b24 <menu+0x7e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d148      	bne.n	80019d0 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800193e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <menu+0x7f4>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b7b      	ldr	r3, [pc, #492]	@ (8001b34 <menu+0x7f8>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800194c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b38 <menu+0x7fc>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	4b78      	ldr	r3, [pc, #480]	@ (8001b34 <menu+0x7f8>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800195a:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <menu+0x800>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <menu+0x7f8>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001968:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <menu+0x804>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	4b71      	ldr	r3, [pc, #452]	@ (8001b34 <menu+0x7f8>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001976:	4b73      	ldr	r3, [pc, #460]	@ (8001b44 <menu+0x808>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <menu+0x7f8>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001984:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <menu+0x80c>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <menu+0x7f8>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001992:	4b6e      	ldr	r3, [pc, #440]	@ (8001b4c <menu+0x810>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <menu+0x7f8>)
 800199a:	2200      	movs	r2, #0
 800199c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b50 <menu+0x814>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <menu+0x7f8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019ae:	4b69      	ldr	r3, [pc, #420]	@ (8001b54 <menu+0x818>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <menu+0x7f8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019bc:	4b66      	ldr	r3, [pc, #408]	@ (8001b58 <menu+0x81c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b34 <menu+0x7f8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80019ca:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <menu+0x820>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019d0:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <menu+0x824>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 808e 	bne.w	8001af6 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80019da:	4a62      	ldr	r2, [pc, #392]	@ (8001b64 <menu+0x828>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f007 f876 	bl	8008ad0 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b20 <menu+0x7e4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <menu+0x6b8>
 80019ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <menu+0x7e4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d104      	bne.n	80019fe <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 80019f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001b68 <menu+0x82c>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	2002      	movs	r0, #2
 80019fa:	f007 f869 	bl	8008ad0 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80019fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001b6c <menu+0x830>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <menu+0x6dc>
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <menu+0x7e4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d104      	bne.n	8001a18 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001a0e:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <menu+0x834>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	2002      	movs	r0, #2
 8001a14:	f007 f85c 	bl	8008ad0 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a18:	4b54      	ldr	r3, [pc, #336]	@ (8001b6c <menu+0x830>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <menu+0x6f6>
 8001a20:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <menu+0x7e4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <menu+0x838>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f007 f84f 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a32:	2102      	movs	r1, #2
 8001a34:	483c      	ldr	r0, [pc, #240]	@ (8001b28 <menu+0x7ec>)
 8001a36:	f008 fb87 	bl	800a148 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d119      	bne.n	8001a74 <menu+0x738>
 8001a40:	4b3a      	ldr	r3, [pc, #232]	@ (8001b2c <menu+0x7f0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f083 0301 	eor.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <menu+0x738>
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <menu+0x7e4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001a56:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <menu+0x830>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <menu+0x830>)
 8001a60:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a62:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <menu+0x830>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d902      	bls.n	8001a70 <menu+0x734>
				calismaSekli = 0;
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <menu+0x830>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a70:	f002 f9aa 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a74:	2104      	movs	r1, #4
 8001a76:	482c      	ldr	r0, [pc, #176]	@ (8001b28 <menu+0x7ec>)
 8001a78:	f008 fb66 	bl	800a148 <HAL_GPIO_ReadPin>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d119      	bne.n	8001ab6 <menu+0x77a>
 8001a82:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <menu+0x7f0>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d012      	beq.n	8001ab6 <menu+0x77a>
 8001a90:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <menu+0x7e4>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10e      	bne.n	8001ab6 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001a98:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <menu+0x830>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <menu+0x830>)
 8001aa2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001aa4:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <menu+0x830>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <menu+0x776>
	    		calismaSekli = 1;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <menu+0x830>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ab2:	f002 f989 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	481b      	ldr	r0, [pc, #108]	@ (8001b28 <menu+0x7ec>)
 8001aba:	f008 fb45 	bl	800a148 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d118      	bne.n	8001af6 <menu+0x7ba>
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <menu+0x7f0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f083 0301 	eor.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d011      	beq.n	8001af6 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <menu+0x830>)
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <menu+0x7f8>)
 8001ad8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <menu+0x830>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <menu+0x7b4>
				altLimit = 1;
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <menu+0x83c>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	@ (8001b78 <menu+0x83c>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <menu+0x7f8>)
 8001aee:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <menu+0x820>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <menu+0x824>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	f040 809c 	bne.w	8001c38 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001b00:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <menu+0x840>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	2001      	movs	r0, #1
 8001b06:	f006 ffe3 	bl	8008ad0 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <menu+0x844>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d13a      	bne.n	8001b88 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001b12:	4a1c      	ldr	r2, [pc, #112]	@ (8001b84 <menu+0x848>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	2002      	movs	r0, #2
 8001b18:	f006 ffda 	bl	8008ad0 <lcd_print>
 8001b1c:	e03d      	b.n	8001b9a <menu+0x85e>
 8001b1e:	bf00      	nop
 8001b20:	200010cb 	.word	0x200010cb
 8001b24:	200010be 	.word	0x200010be
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	200010eb 	.word	0x200010eb
 8001b30:	200010dd 	.word	0x200010dd
 8001b34:	20000fec 	.word	0x20000fec
 8001b38:	200010de 	.word	0x200010de
 8001b3c:	200010df 	.word	0x200010df
 8001b40:	200010e0 	.word	0x200010e0
 8001b44:	200010e1 	.word	0x200010e1
 8001b48:	200010e2 	.word	0x200010e2
 8001b4c:	200010e3 	.word	0x200010e3
 8001b50:	200010e4 	.word	0x200010e4
 8001b54:	200010e5 	.word	0x200010e5
 8001b58:	200010e6 	.word	0x200010e6
 8001b5c:	200010e8 	.word	0x200010e8
 8001b60:	200010bc 	.word	0x200010bc
 8001b64:	20001434 	.word	0x20001434
 8001b68:	20001448 	.word	0x20001448
 8001b6c:	200010bd 	.word	0x200010bd
 8001b70:	2000145c 	.word	0x2000145c
 8001b74:	20001470 	.word	0x20001470
 8001b78:	200010c2 	.word	0x200010c2
 8001b7c:	20001484 	.word	0x20001484
 8001b80:	200010c0 	.word	0x200010c0
 8001b84:	20001498 	.word	0x20001498
		} else if(emniyetCercevesi == 1) {
 8001b88:	4b6b      	ldr	r3, [pc, #428]	@ (8001d38 <menu+0x9fc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d104      	bne.n	8001b9a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b90:	4a6a      	ldr	r2, [pc, #424]	@ (8001d3c <menu+0xa00>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f006 ff9b 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4868      	ldr	r0, [pc, #416]	@ (8001d40 <menu+0xa04>)
 8001b9e:	f008 fad3 	bl	800a148 <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d115      	bne.n	8001bd4 <menu+0x898>
 8001ba8:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <menu+0xa08>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00e      	beq.n	8001bd4 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bb6:	4b60      	ldr	r3, [pc, #384]	@ (8001d38 <menu+0x9fc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8001d38 <menu+0x9fc>)
 8001bc0:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <menu+0x9fc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d902      	bls.n	8001bd0 <menu+0x894>
				emniyetCercevesi = 0;
 8001bca:	4b5b      	ldr	r3, [pc, #364]	@ (8001d38 <menu+0x9fc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd0:	f002 f8fa 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	485a      	ldr	r0, [pc, #360]	@ (8001d40 <menu+0xa04>)
 8001bd8:	f008 fab6 	bl	800a148 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d115      	bne.n	8001c0e <menu+0x8d2>
 8001be2:	4b58      	ldr	r3, [pc, #352]	@ (8001d44 <menu+0xa08>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00e      	beq.n	8001c0e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bf0:	4b51      	ldr	r3, [pc, #324]	@ (8001d38 <menu+0x9fc>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d38 <menu+0x9fc>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d38 <menu+0x9fc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001c04:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <menu+0x9fc>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c0a:	f002 f8dd 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c0e:	2108      	movs	r1, #8
 8001c10:	484b      	ldr	r0, [pc, #300]	@ (8001d40 <menu+0xa04>)
 8001c12:	f008 fa99 	bl	800a148 <HAL_GPIO_ReadPin>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10d      	bne.n	8001c38 <menu+0x8fc>
 8001c1c:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <menu+0xa08>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001c2a:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <menu+0x9fc>)
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	4b46      	ldr	r3, [pc, #280]	@ (8001d48 <menu+0xa0c>)
 8001c30:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c32:	4b46      	ldr	r3, [pc, #280]	@ (8001d4c <menu+0xa10>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c38:	4b45      	ldr	r3, [pc, #276]	@ (8001d50 <menu+0xa14>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d166      	bne.n	8001d0e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001c40:	4a44      	ldr	r2, [pc, #272]	@ (8001d54 <menu+0xa18>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	2001      	movs	r0, #1
 8001c46:	f006 ff43 	bl	8008ad0 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001c4a:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <menu+0xa1c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001c52:	4a42      	ldr	r2, [pc, #264]	@ (8001d5c <menu+0xa20>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f006 ff3a 	bl	8008ad0 <lcd_print>
 8001c5c:	e008      	b.n	8001c70 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <menu+0xa1c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d104      	bne.n	8001c70 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001c66:	4a3e      	ldr	r2, [pc, #248]	@ (8001d60 <menu+0xa24>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f006 ff30 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c70:	2102      	movs	r1, #2
 8001c72:	4833      	ldr	r0, [pc, #204]	@ (8001d40 <menu+0xa04>)
 8001c74:	f008 fa68 	bl	800a148 <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d115      	bne.n	8001caa <menu+0x96e>
 8001c7e:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <menu+0xa08>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001c8c:	4b32      	ldr	r3, [pc, #200]	@ (8001d58 <menu+0xa1c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b30      	ldr	r3, [pc, #192]	@ (8001d58 <menu+0xa1c>)
 8001c96:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001c98:	4b2f      	ldr	r3, [pc, #188]	@ (8001d58 <menu+0xa1c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d902      	bls.n	8001ca6 <menu+0x96a>
				yavaslamaLimit = 0;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <menu+0xa1c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ca6:	f002 f88f 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001caa:	2104      	movs	r1, #4
 8001cac:	4824      	ldr	r0, [pc, #144]	@ (8001d40 <menu+0xa04>)
 8001cae:	f008 fa4b 	bl	800a148 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d115      	bne.n	8001ce4 <menu+0x9a8>
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <menu+0xa08>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00e      	beq.n	8001ce4 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001cc6:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <menu+0xa1c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <menu+0xa1c>)
 8001cd0:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001cd2:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <menu+0xa1c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001cda:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <menu+0xa1c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ce0:	f002 f872 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	4816      	ldr	r0, [pc, #88]	@ (8001d40 <menu+0xa04>)
 8001ce8:	f008 fa2e 	bl	800a148 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <menu+0x9d2>
 8001cf2:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <menu+0xa08>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <menu+0xa1c>)
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <menu+0xa0c>)
 8001d06:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <menu+0xa10>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <menu+0xa14>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	f040 80aa 	bne.w	8001e6c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001d18:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <menu+0xa28>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f006 fed7 	bl	8008ad0 <lcd_print>

		if(altLimit == 0) {
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <menu+0xa2c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d120      	bne.n	8001d6c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <menu+0xa20>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f006 fece 	bl	8008ad0 <lcd_print>
 8001d34:	e023      	b.n	8001d7e <menu+0xa42>
 8001d36:	bf00      	nop
 8001d38:	200010c0 	.word	0x200010c0
 8001d3c:	200000ec 	.word	0x200000ec
 8001d40:	40010800 	.word	0x40010800
 8001d44:	200010eb 	.word	0x200010eb
 8001d48:	20000fec 	.word	0x20000fec
 8001d4c:	200010e8 	.word	0x200010e8
 8001d50:	200010bc 	.word	0x200010bc
 8001d54:	200014c0 	.word	0x200014c0
 8001d58:	200010c1 	.word	0x200010c1
 8001d5c:	20001498 	.word	0x20001498
 8001d60:	200014ac 	.word	0x200014ac
 8001d64:	200014d4 	.word	0x200014d4
 8001d68:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001d6c:	4b89      	ldr	r3, [pc, #548]	@ (8001f94 <menu+0xc58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d104      	bne.n	8001d7e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001d74:	4a88      	ldr	r2, [pc, #544]	@ (8001f98 <menu+0xc5c>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f006 fea9 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4886      	ldr	r0, [pc, #536]	@ (8001f9c <menu+0xc60>)
 8001d82:	f008 f9e1 	bl	800a148 <HAL_GPIO_ReadPin>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <menu+0xa84>
 8001d8c:	4b84      	ldr	r3, [pc, #528]	@ (8001fa0 <menu+0xc64>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <menu+0xa84>
 8001d9a:	4b82      	ldr	r3, [pc, #520]	@ (8001fa4 <menu+0xc68>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10e      	bne.n	8001dc0 <menu+0xa84>
			altLimit = altLimit + 1;
 8001da2:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <menu+0xc58>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <menu+0xc58>)
 8001dac:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001dae:	4b79      	ldr	r3, [pc, #484]	@ (8001f94 <menu+0xc58>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d902      	bls.n	8001dbc <menu+0xa80>
				altLimit = 0;
 8001db6:	4b77      	ldr	r3, [pc, #476]	@ (8001f94 <menu+0xc58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dbc:	f002 f804 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4876      	ldr	r0, [pc, #472]	@ (8001f9c <menu+0xc60>)
 8001dc4:	f008 f9c0 	bl	800a148 <HAL_GPIO_ReadPin>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d119      	bne.n	8001e02 <menu+0xac6>
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <menu+0xc64>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d012      	beq.n	8001e02 <menu+0xac6>
 8001ddc:	4b71      	ldr	r3, [pc, #452]	@ (8001fa4 <menu+0xc68>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10e      	bne.n	8001e02 <menu+0xac6>
			altLimit = altLimit - 1;
 8001de4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f94 <menu+0xc58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b69      	ldr	r3, [pc, #420]	@ (8001f94 <menu+0xc58>)
 8001dee:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001df0:	4b68      	ldr	r3, [pc, #416]	@ (8001f94 <menu+0xc58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <menu+0xac2>
		   		altLimit = 1;
 8001df8:	4b66      	ldr	r3, [pc, #408]	@ (8001f94 <menu+0xc58>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dfe:	f001 ffe3 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e02:	2108      	movs	r1, #8
 8001e04:	4865      	ldr	r0, [pc, #404]	@ (8001f9c <menu+0xc60>)
 8001e06:	f008 f99f 	bl	800a148 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d12d      	bne.n	8001e6c <menu+0xb30>
 8001e10:	4b63      	ldr	r3, [pc, #396]	@ (8001fa0 <menu+0xc64>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d026      	beq.n	8001e6c <menu+0xb30>
			eepromData[5] = altLimit;
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f94 <menu+0xc58>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <menu+0xc6c>)
 8001e24:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e26:	4b5b      	ldr	r3, [pc, #364]	@ (8001f94 <menu+0xc58>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <menu+0xb14>
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fac <menu+0xc70>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <menu+0xb02>
 8001e36:	4b5d      	ldr	r3, [pc, #372]	@ (8001fac <menu+0xc70>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d108      	bne.n	8001e50 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <menu+0xc70>)
 8001e40:	2203      	movs	r2, #3
 8001e42:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e44:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <menu+0xc70>)
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	4b57      	ldr	r3, [pc, #348]	@ (8001fa8 <menu+0xc6c>)
 8001e4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001e4e:	e00a      	b.n	8001e66 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001e50:	4b50      	ldr	r3, [pc, #320]	@ (8001f94 <menu+0xc58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001e58:	4b55      	ldr	r3, [pc, #340]	@ (8001fb0 <menu+0xc74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e5e:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <menu+0xc74>)
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <menu+0xc6c>)
 8001e64:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e66:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <menu+0xc78>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001e6c:	4b52      	ldr	r3, [pc, #328]	@ (8001fb8 <menu+0xc7c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d166      	bne.n	8001f42 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001e74:	4a51      	ldr	r2, [pc, #324]	@ (8001fbc <menu+0xc80>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f006 fe29 	bl	8008ad0 <lcd_print>

		if(basincSalteri == 0) {
 8001e7e:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <menu+0xc84>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001e86:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc4 <menu+0xc88>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f006 fe20 	bl	8008ad0 <lcd_print>
 8001e90:	e008      	b.n	8001ea4 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001e92:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc0 <menu+0xc84>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d104      	bne.n	8001ea4 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f98 <menu+0xc5c>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f006 fe16 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	483d      	ldr	r0, [pc, #244]	@ (8001f9c <menu+0xc60>)
 8001ea8:	f008 f94e 	bl	800a148 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d115      	bne.n	8001ede <menu+0xba2>
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <menu+0xc64>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00e      	beq.n	8001ede <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <menu+0xc84>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc0 <menu+0xc84>)
 8001eca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <menu+0xc84>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d902      	bls.n	8001eda <menu+0xb9e>
				basincSalteri = 0;
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <menu+0xc84>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eda:	f001 ff75 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ede:	2104      	movs	r1, #4
 8001ee0:	482e      	ldr	r0, [pc, #184]	@ (8001f9c <menu+0xc60>)
 8001ee2:	f008 f931 	bl	800a148 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d115      	bne.n	8001f18 <menu+0xbdc>
 8001eec:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <menu+0xc64>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001efa:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <menu+0xc84>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <menu+0xc84>)
 8001f04:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001f06:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <menu+0xc84>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <menu+0xbd8>
		   		basincSalteri = 1;
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <menu+0xc84>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f14:	f001 ff58 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f18:	2108      	movs	r1, #8
 8001f1a:	4820      	ldr	r0, [pc, #128]	@ (8001f9c <menu+0xc60>)
 8001f1c:	f008 f914 	bl	800a148 <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d10d      	bne.n	8001f42 <menu+0xc06>
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <menu+0xc64>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <menu+0xc84>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <menu+0xc6c>)
 8001f3a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <menu+0xc78>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <menu+0xc7c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	f040 80a9 	bne.w	800209e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <menu+0xc8c>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2001      	movs	r0, #1
 8001f52:	f006 fdbd 	bl	8008ad0 <lcd_print>

		if(kapiSecimleri == 0) {
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <menu+0xc90>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001f5e:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <menu+0xc88>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2002      	movs	r0, #2
 8001f64:	f006 fdb4 	bl	8008ad0 <lcd_print>
 8001f68:	e03f      	b.n	8001fea <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <menu+0xc90>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001f72:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <menu+0xc94>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	2002      	movs	r0, #2
 8001f78:	f006 fdaa 	bl	8008ad0 <lcd_print>
 8001f7c:	e035      	b.n	8001fea <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <menu+0xc90>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d128      	bne.n	8001fd8 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001f86:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <menu+0xc98>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	f006 fda0 	bl	8008ad0 <lcd_print>
 8001f90:	e02b      	b.n	8001fea <menu+0xcae>
 8001f92:	bf00      	nop
 8001f94:	200010c2 	.word	0x200010c2
 8001f98:	200014ac 	.word	0x200014ac
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	200010eb 	.word	0x200010eb
 8001fa4:	200010bd 	.word	0x200010bd
 8001fa8:	20000fec 	.word	0x20000fec
 8001fac:	200010c9 	.word	0x200010c9
 8001fb0:	200010cf 	.word	0x200010cf
 8001fb4:	200010e8 	.word	0x200010e8
 8001fb8:	200010bc 	.word	0x200010bc
 8001fbc:	200014e8 	.word	0x200014e8
 8001fc0:	200010c3 	.word	0x200010c3
 8001fc4:	20001498 	.word	0x20001498
 8001fc8:	200014fc 	.word	0x200014fc
 8001fcc:	200010c4 	.word	0x200010c4
 8001fd0:	20001510 	.word	0x20001510
 8001fd4:	20001524 	.word	0x20001524
		} else if(kapiSecimleri == 3) {
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <menu+0xe78>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d104      	bne.n	8001fea <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001fe0:	4a75      	ldr	r2, [pc, #468]	@ (80021b8 <menu+0xe7c>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f006 fd73 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fea:	2102      	movs	r1, #2
 8001fec:	4873      	ldr	r0, [pc, #460]	@ (80021bc <menu+0xe80>)
 8001fee:	f008 f8ab 	bl	800a148 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d115      	bne.n	8002024 <menu+0xce8>
 8001ff8:	4b71      	ldr	r3, [pc, #452]	@ (80021c0 <menu+0xe84>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f083 0301 	eor.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00e      	beq.n	8002024 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002006:	4b6b      	ldr	r3, [pc, #428]	@ (80021b4 <menu+0xe78>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b69      	ldr	r3, [pc, #420]	@ (80021b4 <menu+0xe78>)
 8002010:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002012:	4b68      	ldr	r3, [pc, #416]	@ (80021b4 <menu+0xe78>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d902      	bls.n	8002020 <menu+0xce4>
				kapiSecimleri = 0;
 800201a:	4b66      	ldr	r3, [pc, #408]	@ (80021b4 <menu+0xe78>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002020:	f001 fed2 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002024:	2104      	movs	r1, #4
 8002026:	4865      	ldr	r0, [pc, #404]	@ (80021bc <menu+0xe80>)
 8002028:	f008 f88e 	bl	800a148 <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b01      	cmp	r3, #1
 8002030:	d115      	bne.n	800205e <menu+0xd22>
 8002032:	4b63      	ldr	r3, [pc, #396]	@ (80021c0 <menu+0xe84>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002040:	4b5c      	ldr	r3, [pc, #368]	@ (80021b4 <menu+0xe78>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b5a      	ldr	r3, [pc, #360]	@ (80021b4 <menu+0xe78>)
 800204a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <menu+0xe78>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d902      	bls.n	800205a <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002054:	4b57      	ldr	r3, [pc, #348]	@ (80021b4 <menu+0xe78>)
 8002056:	2203      	movs	r2, #3
 8002058:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800205a:	f001 feb5 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800205e:	2108      	movs	r1, #8
 8002060:	4856      	ldr	r0, [pc, #344]	@ (80021bc <menu+0xe80>)
 8002062:	f008 f871 	bl	800a148 <HAL_GPIO_ReadPin>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	d118      	bne.n	800209e <menu+0xd62>
 800206c:	4b54      	ldr	r3, [pc, #336]	@ (80021c0 <menu+0xe84>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d011      	beq.n	800209e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800207a:	4b4e      	ldr	r3, [pc, #312]	@ (80021b4 <menu+0xe78>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b51      	ldr	r3, [pc, #324]	@ (80021c4 <menu+0xe88>)
 8002080:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002082:	4b4c      	ldr	r3, [pc, #304]	@ (80021b4 <menu+0xe78>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <menu+0xd5c>
				altLimit = 1;
 800208a:	4b4f      	ldr	r3, [pc, #316]	@ (80021c8 <menu+0xe8c>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002090:	4b4d      	ldr	r3, [pc, #308]	@ (80021c8 <menu+0xe8c>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	4b4b      	ldr	r3, [pc, #300]	@ (80021c4 <menu+0xe88>)
 8002096:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002098:	4b4c      	ldr	r3, [pc, #304]	@ (80021cc <menu+0xe90>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <menu+0xe94>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d167      	bne.n	8002176 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80020a6:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <menu+0xe98>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2001      	movs	r0, #1
 80020ac:	f006 fd10 	bl	8008ad0 <lcd_print>

		if(kapiAcTipi == 0) {
 80020b0:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <menu+0xe9c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80020b8:	4a48      	ldr	r2, [pc, #288]	@ (80021dc <menu+0xea0>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	2002      	movs	r0, #2
 80020be:	f006 fd07 	bl	8008ad0 <lcd_print>
 80020c2:	e008      	b.n	80020d6 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80020c4:	4b44      	ldr	r3, [pc, #272]	@ (80021d8 <menu+0xe9c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d104      	bne.n	80020d6 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80020cc:	4a44      	ldr	r2, [pc, #272]	@ (80021e0 <menu+0xea4>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2002      	movs	r0, #2
 80020d2:	f006 fcfd 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d6:	2102      	movs	r1, #2
 80020d8:	4838      	ldr	r0, [pc, #224]	@ (80021bc <menu+0xe80>)
 80020da:	f008 f835 	bl	800a148 <HAL_GPIO_ReadPin>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d115      	bne.n	8002110 <menu+0xdd4>
 80020e4:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <menu+0xe84>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00e      	beq.n	8002110 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80020f2:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <menu+0xe9c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <menu+0xe9c>)
 80020fc:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80020fe:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <menu+0xe9c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d902      	bls.n	800210c <menu+0xdd0>
				kapiAcTipi = 0;
 8002106:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <menu+0xe9c>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800210c:	f001 fe5c 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002110:	2104      	movs	r1, #4
 8002112:	482a      	ldr	r0, [pc, #168]	@ (80021bc <menu+0xe80>)
 8002114:	f008 f818 	bl	800a148 <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d115      	bne.n	800214a <menu+0xe0e>
 800211e:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <menu+0xe84>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f083 0301 	eor.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <menu+0xe9c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <menu+0xe9c>)
 8002136:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <menu+0xe9c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <menu+0xe9c>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002146:	f001 fe3f 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800214a:	2108      	movs	r1, #8
 800214c:	481b      	ldr	r0, [pc, #108]	@ (80021bc <menu+0xe80>)
 800214e:	f007 fffb 	bl	800a148 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10e      	bne.n	8002176 <menu+0xe3a>
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <menu+0xe84>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8002166:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <menu+0xe9c>)
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <menu+0xe88>)
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <menu+0xe90>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <menu+0xe94>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b09      	cmp	r3, #9
 800217c:	f040 8092 	bne.w	80022a4 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002180:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <menu+0xea8>)
 8002182:	2101      	movs	r1, #1
 8002184:	2001      	movs	r0, #1
 8002186:	f006 fca3 	bl	8008ad0 <lcd_print>

		if(kapi1Tip == 0) {
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <menu+0xeac>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002192:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <menu+0xeb0>)
 8002194:	2101      	movs	r1, #1
 8002196:	2002      	movs	r0, #2
 8002198:	f006 fc9a 	bl	8008ad0 <lcd_print>
 800219c:	e033      	b.n	8002206 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <menu+0xeac>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d126      	bne.n	80021f4 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <menu+0xeb4>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	2002      	movs	r0, #2
 80021ac:	f006 fc90 	bl	8008ad0 <lcd_print>
 80021b0:	e029      	b.n	8002206 <menu+0xeca>
 80021b2:	bf00      	nop
 80021b4:	200010c4 	.word	0x200010c4
 80021b8:	20001538 	.word	0x20001538
 80021bc:	40010800 	.word	0x40010800
 80021c0:	200010eb 	.word	0x200010eb
 80021c4:	20000fec 	.word	0x20000fec
 80021c8:	200010c2 	.word	0x200010c2
 80021cc:	200010e8 	.word	0x200010e8
 80021d0:	200010bc 	.word	0x200010bc
 80021d4:	2000154c 	.word	0x2000154c
 80021d8:	200010c8 	.word	0x200010c8
 80021dc:	20001560 	.word	0x20001560
 80021e0:	20001574 	.word	0x20001574
 80021e4:	20001588 	.word	0x20001588
 80021e8:	200010c5 	.word	0x200010c5
 80021ec:	20000100 	.word	0x20000100
 80021f0:	2000159c 	.word	0x2000159c
		} else if(kapi1Tip == 2) {
 80021f4:	4b73      	ldr	r3, [pc, #460]	@ (80023c4 <menu+0x1088>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d104      	bne.n	8002206 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 80021fc:	4a72      	ldr	r2, [pc, #456]	@ (80023c8 <menu+0x108c>)
 80021fe:	2101      	movs	r1, #1
 8002200:	2002      	movs	r0, #2
 8002202:	f006 fc65 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002206:	2102      	movs	r1, #2
 8002208:	4870      	ldr	r0, [pc, #448]	@ (80023cc <menu+0x1090>)
 800220a:	f007 ff9d 	bl	800a148 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d115      	bne.n	8002240 <menu+0xf04>
 8002214:	4b6e      	ldr	r3, [pc, #440]	@ (80023d0 <menu+0x1094>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00e      	beq.n	8002240 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002222:	4b68      	ldr	r3, [pc, #416]	@ (80023c4 <menu+0x1088>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <menu+0x1088>)
 800222c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800222e:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <menu+0x1088>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d902      	bls.n	800223c <menu+0xf00>
				kapi1Tip = 0;
 8002236:	4b63      	ldr	r3, [pc, #396]	@ (80023c4 <menu+0x1088>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800223c:	f001 fdc4 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002240:	2104      	movs	r1, #4
 8002242:	4862      	ldr	r0, [pc, #392]	@ (80023cc <menu+0x1090>)
 8002244:	f007 ff80 	bl	800a148 <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d115      	bne.n	800227a <menu+0xf3e>
 800224e:	4b60      	ldr	r3, [pc, #384]	@ (80023d0 <menu+0x1094>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 800225c:	4b59      	ldr	r3, [pc, #356]	@ (80023c4 <menu+0x1088>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b57      	ldr	r3, [pc, #348]	@ (80023c4 <menu+0x1088>)
 8002266:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002268:	4b56      	ldr	r3, [pc, #344]	@ (80023c4 <menu+0x1088>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d902      	bls.n	8002276 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002270:	4b54      	ldr	r3, [pc, #336]	@ (80023c4 <menu+0x1088>)
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002276:	f001 fda7 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800227a:	2108      	movs	r1, #8
 800227c:	4853      	ldr	r0, [pc, #332]	@ (80023cc <menu+0x1090>)
 800227e:	f007 ff63 	bl	800a148 <HAL_GPIO_ReadPin>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10d      	bne.n	80022a4 <menu+0xf68>
 8002288:	4b51      	ldr	r3, [pc, #324]	@ (80023d0 <menu+0x1094>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002296:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <menu+0x1088>)
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <menu+0x1098>)
 800229c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800229e:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <menu+0x109c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80022a4:	4b4d      	ldr	r3, [pc, #308]	@ (80023dc <menu+0x10a0>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b0a      	cmp	r3, #10
 80022aa:	d16c      	bne.n	8002386 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80022ac:	4a4c      	ldr	r2, [pc, #304]	@ (80023e0 <menu+0x10a4>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	2001      	movs	r0, #1
 80022b2:	f006 fc0d 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022b6:	4a4b      	ldr	r2, [pc, #300]	@ (80023e4 <menu+0x10a8>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	2002      	movs	r0, #2
 80022bc:	f006 fc08 	bl	8008ad0 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80022c0:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <menu+0x10ac>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	220a      	movs	r2, #10
 80022c6:	4949      	ldr	r1, [pc, #292]	@ (80023ec <menu+0x10b0>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00a ffc5 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 80022ce:	4a47      	ldr	r2, [pc, #284]	@ (80023ec <menu+0x10b0>)
 80022d0:	2110      	movs	r1, #16
 80022d2:	2002      	movs	r0, #2
 80022d4:	f006 fbfc 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022d8:	2102      	movs	r1, #2
 80022da:	483c      	ldr	r0, [pc, #240]	@ (80023cc <menu+0x1090>)
 80022dc:	f007 ff34 	bl	800a148 <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d119      	bne.n	800231a <menu+0xfde>
 80022e6:	4b3a      	ldr	r3, [pc, #232]	@ (80023d0 <menu+0x1094>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d012      	beq.n	800231a <menu+0xfde>
 80022f4:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <menu+0x1088>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10e      	bne.n	800231a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80022fc:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <menu+0x10ac>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <menu+0x10ac>)
 8002306:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002308:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <menu+0x10ac>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d902      	bls.n	8002316 <menu+0xfda>
				kapi1AcSure = 0;
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <menu+0x10ac>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002316:	f001 fd57 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800231a:	2104      	movs	r1, #4
 800231c:	482b      	ldr	r0, [pc, #172]	@ (80023cc <menu+0x1090>)
 800231e:	f007 ff13 	bl	800a148 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d119      	bne.n	800235c <menu+0x1020>
 8002328:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <menu+0x1094>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f083 0301 	eor.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <menu+0x1020>
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <menu+0x1088>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10e      	bne.n	800235c <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800233e:	4b2a      	ldr	r3, [pc, #168]	@ (80023e8 <menu+0x10ac>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	3b01      	subs	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <menu+0x10ac>)
 8002348:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800234a:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <menu+0x10ac>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <menu+0x101c>
		   		kapi1AcSure = 5;
 8002352:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <menu+0x10ac>)
 8002354:	2205      	movs	r2, #5
 8002356:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002358:	f001 fd36 	bl	8003dc8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800235c:	2108      	movs	r1, #8
 800235e:	481b      	ldr	r0, [pc, #108]	@ (80023cc <menu+0x1090>)
 8002360:	f007 fef2 	bl	800a148 <HAL_GPIO_ReadPin>
 8002364:	4603      	mov	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <menu+0x104a>
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <menu+0x1094>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <menu+0x10ac>)
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <menu+0x1098>)
 800237e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <menu+0x109c>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <menu+0x10a0>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b0b      	cmp	r3, #11
 800238c:	f040 8090 	bne.w	80024b0 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002390:	4a17      	ldr	r2, [pc, #92]	@ (80023f0 <menu+0x10b4>)
 8002392:	2101      	movs	r1, #1
 8002394:	2001      	movs	r0, #1
 8002396:	f006 fb9b 	bl	8008ad0 <lcd_print>

		if(kapi2Tip == 0) {
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <menu+0x10b8>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80023a2:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <menu+0x10bc>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f006 fb92 	bl	8008ad0 <lcd_print>
 80023ac:	e031      	b.n	8002412 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <menu+0x10b8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d124      	bne.n	8002400 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80023b6:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <menu+0x10c0>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f006 fb88 	bl	8008ad0 <lcd_print>
 80023c0:	e027      	b.n	8002412 <menu+0x10d6>
 80023c2:	bf00      	nop
 80023c4:	200010c5 	.word	0x200010c5
 80023c8:	20000114 	.word	0x20000114
 80023cc:	40010800 	.word	0x40010800
 80023d0:	200010eb 	.word	0x200010eb
 80023d4:	20000fec 	.word	0x20000fec
 80023d8:	200010e8 	.word	0x200010e8
 80023dc:	200010bc 	.word	0x200010bc
 80023e0:	200015b0 	.word	0x200015b0
 80023e4:	200015c4 	.word	0x200015c4
 80023e8:	200010d5 	.word	0x200010d5
 80023ec:	2000105c 	.word	0x2000105c
 80023f0:	200015d8 	.word	0x200015d8
 80023f4:	200010c6 	.word	0x200010c6
 80023f8:	20000100 	.word	0x20000100
 80023fc:	2000159c 	.word	0x2000159c
		} else if(kapi2Tip == 2) {
 8002400:	4b73      	ldr	r3, [pc, #460]	@ (80025d0 <menu+0x1294>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d104      	bne.n	8002412 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002408:	4a72      	ldr	r2, [pc, #456]	@ (80025d4 <menu+0x1298>)
 800240a:	2101      	movs	r1, #1
 800240c:	2002      	movs	r0, #2
 800240e:	f006 fb5f 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002412:	2102      	movs	r1, #2
 8002414:	4870      	ldr	r0, [pc, #448]	@ (80025d8 <menu+0x129c>)
 8002416:	f007 fe97 	bl	800a148 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b01      	cmp	r3, #1
 800241e:	d115      	bne.n	800244c <menu+0x1110>
 8002420:	4b6e      	ldr	r3, [pc, #440]	@ (80025dc <menu+0x12a0>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00e      	beq.n	800244c <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800242e:	4b68      	ldr	r3, [pc, #416]	@ (80025d0 <menu+0x1294>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b66      	ldr	r3, [pc, #408]	@ (80025d0 <menu+0x1294>)
 8002438:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800243a:	4b65      	ldr	r3, [pc, #404]	@ (80025d0 <menu+0x1294>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <menu+0x110c>
				kapi2Tip = 0;
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <menu+0x1294>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002448:	f001 fcbe 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800244c:	2104      	movs	r1, #4
 800244e:	4862      	ldr	r0, [pc, #392]	@ (80025d8 <menu+0x129c>)
 8002450:	f007 fe7a 	bl	800a148 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d115      	bne.n	8002486 <menu+0x114a>
 800245a:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <menu+0x12a0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <menu+0x1294>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	3b01      	subs	r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <menu+0x1294>)
 8002472:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002474:	4b56      	ldr	r3, [pc, #344]	@ (80025d0 <menu+0x1294>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d902      	bls.n	8002482 <menu+0x1146>
		   		kapi2Tip = 2;
 800247c:	4b54      	ldr	r3, [pc, #336]	@ (80025d0 <menu+0x1294>)
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002482:	f001 fca1 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002486:	2108      	movs	r1, #8
 8002488:	4853      	ldr	r0, [pc, #332]	@ (80025d8 <menu+0x129c>)
 800248a:	f007 fe5d 	bl	800a148 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <menu+0x1174>
 8002494:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <menu+0x12a0>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80024a2:	4b4b      	ldr	r3, [pc, #300]	@ (80025d0 <menu+0x1294>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b4e      	ldr	r3, [pc, #312]	@ (80025e0 <menu+0x12a4>)
 80024a8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80024aa:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <menu+0x12a8>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80024b0:	4b4d      	ldr	r3, [pc, #308]	@ (80025e8 <menu+0x12ac>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d16c      	bne.n	8002592 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80024b8:	4a4c      	ldr	r2, [pc, #304]	@ (80025ec <menu+0x12b0>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2001      	movs	r0, #1
 80024be:	f006 fb07 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024c2:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <menu+0x12b4>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	2002      	movs	r0, #2
 80024c8:	f006 fb02 	bl	8008ad0 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80024cc:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <menu+0x12b8>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	220a      	movs	r2, #10
 80024d2:	4949      	ldr	r1, [pc, #292]	@ (80025f8 <menu+0x12bc>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00a febf 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 80024da:	4a47      	ldr	r2, [pc, #284]	@ (80025f8 <menu+0x12bc>)
 80024dc:	2110      	movs	r1, #16
 80024de:	2002      	movs	r0, #2
 80024e0:	f006 faf6 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024e4:	2102      	movs	r1, #2
 80024e6:	483c      	ldr	r0, [pc, #240]	@ (80025d8 <menu+0x129c>)
 80024e8:	f007 fe2e 	bl	800a148 <HAL_GPIO_ReadPin>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d119      	bne.n	8002526 <menu+0x11ea>
 80024f2:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <menu+0x12a0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <menu+0x11ea>
 8002500:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <menu+0x1294>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002508:	4b3a      	ldr	r3, [pc, #232]	@ (80025f4 <menu+0x12b8>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b38      	ldr	r3, [pc, #224]	@ (80025f4 <menu+0x12b8>)
 8002512:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002514:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <menu+0x12b8>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d902      	bls.n	8002522 <menu+0x11e6>
				kapi2AcSure = 0;
 800251c:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <menu+0x12b8>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002522:	f001 fc51 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002526:	2104      	movs	r1, #4
 8002528:	482b      	ldr	r0, [pc, #172]	@ (80025d8 <menu+0x129c>)
 800252a:	f007 fe0d 	bl	800a148 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d119      	bne.n	8002568 <menu+0x122c>
 8002534:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <menu+0x12a0>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f083 0301 	eor.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <menu+0x122c>
 8002542:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <menu+0x1294>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <menu+0x12b8>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <menu+0x12b8>)
 8002554:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002556:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <menu+0x12b8>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <menu+0x1228>
		   		kapi2AcSure = 5;
 800255e:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <menu+0x12b8>)
 8002560:	2205      	movs	r2, #5
 8002562:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002564:	f001 fc30 	bl	8003dc8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002568:	2108      	movs	r1, #8
 800256a:	481b      	ldr	r0, [pc, #108]	@ (80025d8 <menu+0x129c>)
 800256c:	f007 fdec 	bl	800a148 <HAL_GPIO_ReadPin>
 8002570:	4603      	mov	r3, r0
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10d      	bne.n	8002592 <menu+0x1256>
 8002576:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <menu+0x12a0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f083 0301 	eor.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <menu+0x12b8>)
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <menu+0x12a4>)
 800258a:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800258c:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <menu+0x12a8>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <menu+0x12ac>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b0d      	cmp	r3, #13
 8002598:	f040 8090 	bne.w	80026bc <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800259c:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <menu+0x12c0>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2001      	movs	r0, #1
 80025a2:	f006 fa95 	bl	8008ad0 <lcd_print>

		if(kapitablaTip == 0) {
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <menu+0x12c4>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80025ae:	4a15      	ldr	r2, [pc, #84]	@ (8002604 <menu+0x12c8>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	2002      	movs	r0, #2
 80025b4:	f006 fa8c 	bl	8008ad0 <lcd_print>
 80025b8:	e031      	b.n	800261e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <menu+0x12c4>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d124      	bne.n	800260c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80025c2:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <menu+0x12cc>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	2002      	movs	r0, #2
 80025c8:	f006 fa82 	bl	8008ad0 <lcd_print>
 80025cc:	e027      	b.n	800261e <menu+0x12e2>
 80025ce:	bf00      	nop
 80025d0:	200010c6 	.word	0x200010c6
 80025d4:	20000114 	.word	0x20000114
 80025d8:	40010800 	.word	0x40010800
 80025dc:	200010eb 	.word	0x200010eb
 80025e0:	20000fec 	.word	0x20000fec
 80025e4:	200010e8 	.word	0x200010e8
 80025e8:	200010bc 	.word	0x200010bc
 80025ec:	200015ec 	.word	0x200015ec
 80025f0:	200015c4 	.word	0x200015c4
 80025f4:	200010d6 	.word	0x200010d6
 80025f8:	2000105c 	.word	0x2000105c
 80025fc:	20001600 	.word	0x20001600
 8002600:	200010c7 	.word	0x200010c7
 8002604:	20000100 	.word	0x20000100
 8002608:	2000159c 	.word	0x2000159c
		} else if(kapitablaTip == 2) {
 800260c:	4b3f      	ldr	r3, [pc, #252]	@ (800270c <menu+0x13d0>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d104      	bne.n	800261e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002614:	4a3e      	ldr	r2, [pc, #248]	@ (8002710 <menu+0x13d4>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f006 fa59 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800261e:	2102      	movs	r1, #2
 8002620:	483c      	ldr	r0, [pc, #240]	@ (8002714 <menu+0x13d8>)
 8002622:	f007 fd91 	bl	800a148 <HAL_GPIO_ReadPin>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d115      	bne.n	8002658 <menu+0x131c>
 800262c:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <menu+0x13dc>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00e      	beq.n	8002658 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800263a:	4b34      	ldr	r3, [pc, #208]	@ (800270c <menu+0x13d0>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b32      	ldr	r3, [pc, #200]	@ (800270c <menu+0x13d0>)
 8002644:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <menu+0x13d0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <menu+0x1318>
				kapitablaTip = 0;
 800264e:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <menu+0x13d0>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002654:	f001 fbb8 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002658:	2104      	movs	r1, #4
 800265a:	482e      	ldr	r0, [pc, #184]	@ (8002714 <menu+0x13d8>)
 800265c:	f007 fd74 	bl	800a148 <HAL_GPIO_ReadPin>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d115      	bne.n	8002692 <menu+0x1356>
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <menu+0x13dc>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <menu+0x13d0>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	3b01      	subs	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b23      	ldr	r3, [pc, #140]	@ (800270c <menu+0x13d0>)
 800267e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002680:	4b22      	ldr	r3, [pc, #136]	@ (800270c <menu+0x13d0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d902      	bls.n	800268e <menu+0x1352>
		   		kapitablaTip = 2;
 8002688:	4b20      	ldr	r3, [pc, #128]	@ (800270c <menu+0x13d0>)
 800268a:	2202      	movs	r2, #2
 800268c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800268e:	f001 fb9b 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002692:	2108      	movs	r1, #8
 8002694:	481f      	ldr	r0, [pc, #124]	@ (8002714 <menu+0x13d8>)
 8002696:	f007 fd57 	bl	800a148 <HAL_GPIO_ReadPin>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <menu+0x1380>
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <menu+0x13dc>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80026ae:	4b17      	ldr	r3, [pc, #92]	@ (800270c <menu+0x13d0>)
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <menu+0x13e0>)
 80026b4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <menu+0x13e4>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <menu+0x13e8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b0e      	cmp	r3, #14
 80026c2:	f040 80a3 	bne.w	800280c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026c6:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <menu+0x13ec>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2001      	movs	r0, #1
 80026cc:	f006 fa00 	bl	8008ad0 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026d0:	4b16      	ldr	r3, [pc, #88]	@ (800272c <menu+0x13f0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <menu+0x13f4>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2002      	movs	r0, #2
 80026de:	f006 f9f7 	bl	8008ad0 <lcd_print>
 80026e2:	e034      	b.n	800274e <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <menu+0x13f0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <menu+0x13f8>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	2002      	movs	r0, #2
 80026f2:	f006 f9ed 	bl	8008ad0 <lcd_print>
 80026f6:	e02a      	b.n	800274e <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <menu+0x13f0>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11d      	bne.n	800273c <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <menu+0x13fc>)
 8002702:	2101      	movs	r1, #1
 8002704:	2002      	movs	r0, #2
 8002706:	f006 f9e3 	bl	8008ad0 <lcd_print>
 800270a:	e020      	b.n	800274e <menu+0x1412>
 800270c:	200010c7 	.word	0x200010c7
 8002710:	20000114 	.word	0x20000114
 8002714:	40010800 	.word	0x40010800
 8002718:	200010eb 	.word	0x200010eb
 800271c:	20000fec 	.word	0x20000fec
 8002720:	200010e8 	.word	0x200010e8
 8002724:	200010bc 	.word	0x200010bc
 8002728:	20001614 	.word	0x20001614
 800272c:	200010c9 	.word	0x200010c9
 8002730:	20001628 	.word	0x20001628
 8002734:	2000163c 	.word	0x2000163c
 8002738:	20001650 	.word	0x20001650
		} else if(kapiTablaAcKonum == 3) {
 800273c:	4b76      	ldr	r3, [pc, #472]	@ (8002918 <menu+0x15dc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d104      	bne.n	800274e <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002744:	4a75      	ldr	r2, [pc, #468]	@ (800291c <menu+0x15e0>)
 8002746:	2101      	movs	r1, #1
 8002748:	2002      	movs	r0, #2
 800274a:	f006 f9c1 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800274e:	2102      	movs	r1, #2
 8002750:	4873      	ldr	r0, [pc, #460]	@ (8002920 <menu+0x15e4>)
 8002752:	f007 fcf9 	bl	800a148 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d115      	bne.n	8002788 <menu+0x144c>
 800275c:	4b71      	ldr	r3, [pc, #452]	@ (8002924 <menu+0x15e8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800276a:	4b6b      	ldr	r3, [pc, #428]	@ (8002918 <menu+0x15dc>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b69      	ldr	r3, [pc, #420]	@ (8002918 <menu+0x15dc>)
 8002774:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002776:	4b68      	ldr	r3, [pc, #416]	@ (8002918 <menu+0x15dc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800277e:	4b66      	ldr	r3, [pc, #408]	@ (8002918 <menu+0x15dc>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002784:	f001 fb20 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002788:	2104      	movs	r1, #4
 800278a:	4865      	ldr	r0, [pc, #404]	@ (8002920 <menu+0x15e4>)
 800278c:	f007 fcdc 	bl	800a148 <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d115      	bne.n	80027c2 <menu+0x1486>
 8002796:	4b63      	ldr	r3, [pc, #396]	@ (8002924 <menu+0x15e8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80027a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002918 <menu+0x15dc>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002918 <menu+0x15dc>)
 80027ae:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80027b0:	4b59      	ldr	r3, [pc, #356]	@ (8002918 <menu+0x15dc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d902      	bls.n	80027be <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80027b8:	4b57      	ldr	r3, [pc, #348]	@ (8002918 <menu+0x15dc>)
 80027ba:	2202      	movs	r2, #2
 80027bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027be:	f001 fb03 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c2:	2108      	movs	r1, #8
 80027c4:	4856      	ldr	r0, [pc, #344]	@ (8002920 <menu+0x15e4>)
 80027c6:	f007 fcbf 	bl	800a148 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d11d      	bne.n	800280c <menu+0x14d0>
 80027d0:	4b54      	ldr	r3, [pc, #336]	@ (8002924 <menu+0x15e8>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80027de:	4b4e      	ldr	r3, [pc, #312]	@ (8002918 <menu+0x15dc>)
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	4b51      	ldr	r3, [pc, #324]	@ (8002928 <menu+0x15ec>)
 80027e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80027e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002918 <menu+0x15dc>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <menu+0x14bc>
 80027f0:	4b49      	ldr	r3, [pc, #292]	@ (8002918 <menu+0x15dc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d106      	bne.n	8002806 <menu+0x14ca>
				altLimit = 1;
 80027f8:	4b4c      	ldr	r3, [pc, #304]	@ (800292c <menu+0x15f0>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80027fe:	4b4b      	ldr	r3, [pc, #300]	@ (800292c <menu+0x15f0>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <menu+0x15ec>)
 8002804:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002806:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <menu+0x15f4>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800280c:	4b49      	ldr	r3, [pc, #292]	@ (8002934 <menu+0x15f8>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d16c      	bne.n	80028ee <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <menu+0x15fc>)
 8002816:	2101      	movs	r1, #1
 8002818:	2001      	movs	r0, #1
 800281a:	f006 f959 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800281e:	4a47      	ldr	r2, [pc, #284]	@ (800293c <menu+0x1600>)
 8002820:	2101      	movs	r1, #1
 8002822:	2002      	movs	r0, #2
 8002824:	f006 f954 	bl	8008ad0 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002828:	4b45      	ldr	r3, [pc, #276]	@ (8002940 <menu+0x1604>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	220a      	movs	r2, #10
 800282e:	4945      	ldr	r1, [pc, #276]	@ (8002944 <menu+0x1608>)
 8002830:	4618      	mov	r0, r3
 8002832:	f00a fd11 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 8002836:	4a43      	ldr	r2, [pc, #268]	@ (8002944 <menu+0x1608>)
 8002838:	2110      	movs	r1, #16
 800283a:	2002      	movs	r0, #2
 800283c:	f006 f948 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002840:	2102      	movs	r1, #2
 8002842:	4837      	ldr	r0, [pc, #220]	@ (8002920 <menu+0x15e4>)
 8002844:	f007 fc80 	bl	800a148 <HAL_GPIO_ReadPin>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d119      	bne.n	8002882 <menu+0x1546>
 800284e:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <menu+0x15e8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f083 0301 	eor.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <menu+0x1546>
 800285c:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <menu+0x160c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10e      	bne.n	8002882 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002864:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <menu+0x1604>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <menu+0x1604>)
 800286e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <menu+0x1604>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d902      	bls.n	800287e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002878:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <menu+0x1604>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800287e:	f001 faa3 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002882:	2104      	movs	r1, #4
 8002884:	4826      	ldr	r0, [pc, #152]	@ (8002920 <menu+0x15e4>)
 8002886:	f007 fc5f 	bl	800a148 <HAL_GPIO_ReadPin>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d119      	bne.n	80028c4 <menu+0x1588>
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <menu+0x15e8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <menu+0x1588>
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <menu+0x160c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80028a6:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <menu+0x1604>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <menu+0x1604>)
 80028b0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80028b2:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <menu+0x1604>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <menu+0x1604>)
 80028bc:	2205      	movs	r2, #5
 80028be:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80028c0:	f001 fa82 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c4:	2108      	movs	r1, #8
 80028c6:	4816      	ldr	r0, [pc, #88]	@ (8002920 <menu+0x15e4>)
 80028c8:	f007 fc3e 	bl	800a148 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10d      	bne.n	80028ee <menu+0x15b2>
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <menu+0x15e8>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <menu+0x1604>)
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <menu+0x15ec>)
 80028e6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <menu+0x15f4>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <menu+0x15f8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	f040 8086 	bne.w	8002a04 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <menu+0x1610>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	2001      	movs	r0, #1
 80028fe:	f006 f8e7 	bl	8008ad0 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <menu+0x1614>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d124      	bne.n	8002954 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <menu+0x15e0>)
 800290c:	2101      	movs	r1, #1
 800290e:	2002      	movs	r0, #2
 8002910:	f006 f8de 	bl	8008ad0 <lcd_print>
 8002914:	e027      	b.n	8002966 <menu+0x162a>
 8002916:	bf00      	nop
 8002918:	200010c9 	.word	0x200010c9
 800291c:	20001498 	.word	0x20001498
 8002920:	40010800 	.word	0x40010800
 8002924:	200010eb 	.word	0x200010eb
 8002928:	20000fec 	.word	0x20000fec
 800292c:	200010c2 	.word	0x200010c2
 8002930:	200010e8 	.word	0x200010e8
 8002934:	200010bc 	.word	0x200010bc
 8002938:	20001664 	.word	0x20001664
 800293c:	200015c4 	.word	0x200015c4
 8002940:	200010d7 	.word	0x200010d7
 8002944:	2000105c 	.word	0x2000105c
 8002948:	200010c7 	.word	0x200010c7
 800294c:	20001678 	.word	0x20001678
 8002950:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002954:	4b84      	ldr	r3, [pc, #528]	@ (8002b68 <menu+0x182c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d104      	bne.n	8002966 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 800295c:	4a83      	ldr	r2, [pc, #524]	@ (8002b6c <menu+0x1830>)
 800295e:	2101      	movs	r1, #1
 8002960:	2002      	movs	r0, #2
 8002962:	f006 f8b5 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002966:	2102      	movs	r1, #2
 8002968:	4881      	ldr	r0, [pc, #516]	@ (8002b70 <menu+0x1834>)
 800296a:	f007 fbed 	bl	800a148 <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d115      	bne.n	80029a0 <menu+0x1664>
 8002974:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <menu+0x1838>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f083 0301 	eor.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002982:	4b79      	ldr	r3, [pc, #484]	@ (8002b68 <menu+0x182c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b77      	ldr	r3, [pc, #476]	@ (8002b68 <menu+0x182c>)
 800298c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800298e:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <menu+0x182c>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d902      	bls.n	800299c <menu+0x1660>
				yukariYavasLimit = 0;
 8002996:	4b74      	ldr	r3, [pc, #464]	@ (8002b68 <menu+0x182c>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800299c:	f001 fa14 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a0:	2104      	movs	r1, #4
 80029a2:	4873      	ldr	r0, [pc, #460]	@ (8002b70 <menu+0x1834>)
 80029a4:	f007 fbd0 	bl	800a148 <HAL_GPIO_ReadPin>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d115      	bne.n	80029da <menu+0x169e>
 80029ae:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <menu+0x1838>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80029bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b68 <menu+0x182c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <menu+0x182c>)
 80029c6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80029c8:	4b67      	ldr	r3, [pc, #412]	@ (8002b68 <menu+0x182c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <menu+0x169a>
		   		yukariYavasLimit = 1;
 80029d0:	4b65      	ldr	r3, [pc, #404]	@ (8002b68 <menu+0x182c>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029d6:	f001 f9f7 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029da:	2108      	movs	r1, #8
 80029dc:	4864      	ldr	r0, [pc, #400]	@ (8002b70 <menu+0x1834>)
 80029de:	f007 fbb3 	bl	800a148 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10d      	bne.n	8002a04 <menu+0x16c8>
 80029e8:	4b62      	ldr	r3, [pc, #392]	@ (8002b74 <menu+0x1838>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 80029f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b68 <menu+0x182c>)
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b78 <menu+0x183c>)
 80029fc:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80029fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002b7c <menu+0x1840>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <menu+0x1844>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b11      	cmp	r3, #17
 8002a0a:	f040 808b 	bne.w	8002b24 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b84 <menu+0x1848>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f006 f85c 	bl	8008ad0 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002a18:	4b5b      	ldr	r3, [pc, #364]	@ (8002b88 <menu+0x184c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d105      	bne.n	8002a2c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002a20:	4a5a      	ldr	r2, [pc, #360]	@ (8002b8c <menu+0x1850>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f006 f853 	bl	8008ad0 <lcd_print>
 8002a2a:	e012      	b.n	8002a52 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002a2c:	4b56      	ldr	r3, [pc, #344]	@ (8002b88 <menu+0x184c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002a34:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <menu+0x1854>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f006 f849 	bl	8008ad0 <lcd_print>
 8002a3e:	e008      	b.n	8002a52 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002a40:	4b51      	ldr	r3, [pc, #324]	@ (8002b88 <menu+0x184c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002a48:	4a52      	ldr	r2, [pc, #328]	@ (8002b94 <menu+0x1858>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f006 f83f 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a52:	2102      	movs	r1, #2
 8002a54:	4846      	ldr	r0, [pc, #280]	@ (8002b70 <menu+0x1834>)
 8002a56:	f007 fb77 	bl	800a148 <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d115      	bne.n	8002a8c <menu+0x1750>
 8002a60:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <menu+0x1838>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f083 0301 	eor.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002a6e:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <menu+0x184c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b44      	ldr	r3, [pc, #272]	@ (8002b88 <menu+0x184c>)
 8002a78:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002a7a:	4b43      	ldr	r3, [pc, #268]	@ (8002b88 <menu+0x184c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d902      	bls.n	8002a88 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002a82:	4b41      	ldr	r3, [pc, #260]	@ (8002b88 <menu+0x184c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a88:	f001 f99e 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	4838      	ldr	r0, [pc, #224]	@ (8002b70 <menu+0x1834>)
 8002a90:	f007 fb5a 	bl	800a148 <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d115      	bne.n	8002ac6 <menu+0x178a>
 8002a9a:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <menu+0x1838>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002aa8:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <menu+0x184c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	4b35      	ldr	r3, [pc, #212]	@ (8002b88 <menu+0x184c>)
 8002ab2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002ab4:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <menu+0x184c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d902      	bls.n	8002ac2 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002abc:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <menu+0x184c>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ac2:	f001 f981 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	4829      	ldr	r0, [pc, #164]	@ (8002b70 <menu+0x1834>)
 8002aca:	f007 fb3d 	bl	800a148 <HAL_GPIO_ReadPin>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d127      	bne.n	8002b24 <menu+0x17e8>
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <menu+0x1838>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f083 0301 	eor.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <menu+0x184c>)
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <menu+0x183c>)
 8002ae8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002aea:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <menu+0x184c>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <menu+0x17be>
 8002af2:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <menu+0x184c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d106      	bne.n	8002b08 <menu+0x17cc>
				calismaSekli = 0;
 8002afa:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <menu+0x185c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <menu+0x185c>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <menu+0x183c>)
 8002b06:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002b08:	4b1f      	ldr	r3, [pc, #124]	@ (8002b88 <menu+0x184c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002b10:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <menu+0x1860>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002b16:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <menu+0x1860>)
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <menu+0x183c>)
 8002b1c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <menu+0x1840>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <menu+0x1844>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	f040 8097 	bne.w	8002c5c <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002b2e:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <menu+0x184c>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d105      	bne.n	8002b42 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <menu+0x1864>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f005 ffc8 	bl	8008ad0 <lcd_print>
 8002b40:	e008      	b.n	8002b54 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002b42:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <menu+0x184c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d104      	bne.n	8002b54 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002b4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <menu+0x1868>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f005 ffbe 	bl	8008ad0 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002b54:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <menu+0x186c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d127      	bne.n	8002bac <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <menu+0x1858>)
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2002      	movs	r0, #2
 8002b62:	f005 ffb5 	bl	8008ad0 <lcd_print>
 8002b66:	e02a      	b.n	8002bbe <menu+0x1882>
 8002b68:	200010ca 	.word	0x200010ca
 8002b6c:	200014ac 	.word	0x200014ac
 8002b70:	40010800 	.word	0x40010800
 8002b74:	200010eb 	.word	0x200010eb
 8002b78:	20000fec 	.word	0x20000fec
 8002b7c:	200010e8 	.word	0x200010e8
 8002b80:	200010bc 	.word	0x200010bc
 8002b84:	2000168c 	.word	0x2000168c
 8002b88:	200010cb 	.word	0x200010cb
 8002b8c:	200016a0 	.word	0x200016a0
 8002b90:	200016b4 	.word	0x200016b4
 8002b94:	20001498 	.word	0x20001498
 8002b98:	200010bd 	.word	0x200010bd
 8002b9c:	200010ce 	.word	0x200010ce
 8002ba0:	200016c8 	.word	0x200016c8
 8002ba4:	200016dc 	.word	0x200016dc
 8002ba8:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002bac:	4b79      	ldr	r3, [pc, #484]	@ (8002d94 <menu+0x1a58>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d104      	bne.n	8002bbe <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002bb4:	4a78      	ldr	r2, [pc, #480]	@ (8002d98 <menu+0x1a5c>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f005 ff89 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4876      	ldr	r0, [pc, #472]	@ (8002d9c <menu+0x1a60>)
 8002bc2:	f007 fac1 	bl	800a148 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d115      	bne.n	8002bf8 <menu+0x18bc>
 8002bcc:	4b74      	ldr	r3, [pc, #464]	@ (8002da0 <menu+0x1a64>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002bda:	4b6e      	ldr	r3, [pc, #440]	@ (8002d94 <menu+0x1a58>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <menu+0x1a58>)
 8002be4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002be6:	4b6b      	ldr	r3, [pc, #428]	@ (8002d94 <menu+0x1a58>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d902      	bls.n	8002bf4 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002bee:	4b69      	ldr	r3, [pc, #420]	@ (8002d94 <menu+0x1a58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bf4:	f001 f8e8 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4868      	ldr	r0, [pc, #416]	@ (8002d9c <menu+0x1a60>)
 8002bfc:	f007 faa4 	bl	800a148 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d115      	bne.n	8002c32 <menu+0x18f6>
 8002c06:	4b66      	ldr	r3, [pc, #408]	@ (8002da0 <menu+0x1a64>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002c14:	4b5f      	ldr	r3, [pc, #380]	@ (8002d94 <menu+0x1a58>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <menu+0x1a58>)
 8002c1e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002c20:	4b5c      	ldr	r3, [pc, #368]	@ (8002d94 <menu+0x1a58>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002c28:	4b5a      	ldr	r3, [pc, #360]	@ (8002d94 <menu+0x1a58>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c2e:	f001 f8cb 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c32:	2108      	movs	r1, #8
 8002c34:	4859      	ldr	r0, [pc, #356]	@ (8002d9c <menu+0x1a60>)
 8002c36:	f007 fa87 	bl	800a148 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10d      	bne.n	8002c5c <menu+0x1920>
 8002c40:	4b57      	ldr	r3, [pc, #348]	@ (8002da0 <menu+0x1a64>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002c4e:	4b51      	ldr	r3, [pc, #324]	@ (8002d94 <menu+0x1a58>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <menu+0x1a68>)
 8002c54:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002c56:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <menu+0x1a6c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002c5c:	4b53      	ldr	r3, [pc, #332]	@ (8002dac <menu+0x1a70>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b13      	cmp	r3, #19
 8002c62:	d174      	bne.n	8002d4e <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002c64:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <menu+0x1a74>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d105      	bne.n	8002c78 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002c6c:	4a51      	ldr	r2, [pc, #324]	@ (8002db4 <menu+0x1a78>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2001      	movs	r0, #1
 8002c72:	f005 ff2d 	bl	8008ad0 <lcd_print>
 8002c76:	e008      	b.n	8002c8a <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <menu+0x1a74>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d104      	bne.n	8002c8a <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002c80:	4a4d      	ldr	r2, [pc, #308]	@ (8002db8 <menu+0x1a7c>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	2001      	movs	r0, #1
 8002c86:	f005 ff23 	bl	8008ad0 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dbc <menu+0x1a80>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002c92:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc0 <menu+0x1a84>)
 8002c94:	2101      	movs	r1, #1
 8002c96:	2002      	movs	r0, #2
 8002c98:	f005 ff1a 	bl	8008ad0 <lcd_print>
 8002c9c:	e008      	b.n	8002cb0 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002c9e:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <menu+0x1a80>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d104      	bne.n	8002cb0 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8002d98 <menu+0x1a5c>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2002      	movs	r0, #2
 8002cac:	f005 ff10 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	483a      	ldr	r0, [pc, #232]	@ (8002d9c <menu+0x1a60>)
 8002cb4:	f007 fa48 	bl	800a148 <HAL_GPIO_ReadPin>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d115      	bne.n	8002cea <menu+0x19ae>
 8002cbe:	4b38      	ldr	r3, [pc, #224]	@ (8002da0 <menu+0x1a64>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dbc <menu+0x1a80>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <menu+0x1a80>)
 8002cd6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002cd8:	4b38      	ldr	r3, [pc, #224]	@ (8002dbc <menu+0x1a80>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d902      	bls.n	8002ce6 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002ce0:	4b36      	ldr	r3, [pc, #216]	@ (8002dbc <menu+0x1a80>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce6:	f001 f86f 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2104      	movs	r1, #4
 8002cec:	482b      	ldr	r0, [pc, #172]	@ (8002d9c <menu+0x1a60>)
 8002cee:	f007 fa2b 	bl	800a148 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d115      	bne.n	8002d24 <menu+0x19e8>
 8002cf8:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <menu+0x1a64>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002d06:	4b2d      	ldr	r3, [pc, #180]	@ (8002dbc <menu+0x1a80>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <menu+0x1a80>)
 8002d10:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002d12:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <menu+0x1a80>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002d1a:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <menu+0x1a80>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d20:	f001 f852 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d24:	2108      	movs	r1, #8
 8002d26:	481d      	ldr	r0, [pc, #116]	@ (8002d9c <menu+0x1a60>)
 8002d28:	f007 fa0e 	bl	800a148 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10d      	bne.n	8002d4e <menu+0x1a12>
 8002d32:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <menu+0x1a64>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	@ (8002dbc <menu+0x1a80>)
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <menu+0x1a68>)
 8002d46:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <menu+0x1a6c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002d4e:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <menu+0x1a70>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b14      	cmp	r3, #20
 8002d54:	f040 809e 	bne.w	8002e94 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002d58:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <menu+0x1a74>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002d60:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <menu+0x1a88>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	2001      	movs	r0, #1
 8002d66:	f005 feb3 	bl	8008ad0 <lcd_print>
 8002d6a:	e008      	b.n	8002d7e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <menu+0x1a74>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d104      	bne.n	8002d7e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002d74:	4a14      	ldr	r2, [pc, #80]	@ (8002dc8 <menu+0x1a8c>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f005 fea9 	bl	8008ad0 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002d7e:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <menu+0x1a90>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d126      	bne.n	8002dd4 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <menu+0x1a94>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2002      	movs	r0, #2
 8002d8c:	f005 fea0 	bl	8008ad0 <lcd_print>
 8002d90:	e029      	b.n	8002de6 <menu+0x1aaa>
 8002d92:	bf00      	nop
 8002d94:	200010cc 	.word	0x200010cc
 8002d98:	200014ac 	.word	0x200014ac
 8002d9c:	40010800 	.word	0x40010800
 8002da0:	200010eb 	.word	0x200010eb
 8002da4:	20000fec 	.word	0x20000fec
 8002da8:	200010e8 	.word	0x200010e8
 8002dac:	200010bc 	.word	0x200010bc
 8002db0:	200010cb 	.word	0x200010cb
 8002db4:	200016f0 	.word	0x200016f0
 8002db8:	20001704 	.word	0x20001704
 8002dbc:	200010cd 	.word	0x200010cd
 8002dc0:	20001498 	.word	0x20001498
 8002dc4:	20001718 	.word	0x20001718
 8002dc8:	2000172c 	.word	0x2000172c
 8002dcc:	200010ce 	.word	0x200010ce
 8002dd0:	20001740 	.word	0x20001740
		} else if(devirmeSilindirTipi == 1) {
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <menu+0x1b80>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d104      	bne.n	8002de6 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002ddc:	4a38      	ldr	r2, [pc, #224]	@ (8002ec0 <menu+0x1b84>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2002      	movs	r0, #2
 8002de2:	f005 fe75 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002de6:	2102      	movs	r1, #2
 8002de8:	4836      	ldr	r0, [pc, #216]	@ (8002ec4 <menu+0x1b88>)
 8002dea:	f007 f9ad 	bl	800a148 <HAL_GPIO_ReadPin>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d119      	bne.n	8002e28 <menu+0x1aec>
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <menu+0x1b8c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f083 0301 	eor.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <menu+0x1aec>
 8002e02:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <menu+0x1b90>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d10e      	bne.n	8002e28 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ebc <menu+0x1b80>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b2a      	ldr	r3, [pc, #168]	@ (8002ebc <menu+0x1b80>)
 8002e14:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002e16:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <menu+0x1b80>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d902      	bls.n	8002e24 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002e1e:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <menu+0x1b80>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e24:	f000 ffd0 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4826      	ldr	r0, [pc, #152]	@ (8002ec4 <menu+0x1b88>)
 8002e2c:	f007 f98c 	bl	800a148 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d119      	bne.n	8002e6a <menu+0x1b2e>
 8002e36:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <menu+0x1b8c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f083 0301 	eor.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <menu+0x1b2e>
 8002e44:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <menu+0x1b90>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10e      	bne.n	8002e6a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <menu+0x1b80>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <menu+0x1b80>)
 8002e56:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <menu+0x1b80>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <menu+0x1b80>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e66:	f000 ffaf 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6a:	2108      	movs	r1, #8
 8002e6c:	4815      	ldr	r0, [pc, #84]	@ (8002ec4 <menu+0x1b88>)
 8002e6e:	f007 f96b 	bl	800a148 <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10d      	bne.n	8002e94 <menu+0x1b58>
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <menu+0x1b8c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <menu+0x1b80>)
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <menu+0x1b94>)
 8002e8c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <menu+0x1b98>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <menu+0x1b9c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b15      	cmp	r3, #21
 8002e9a:	f040 8088 	bne.w	8002fae <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002edc <menu+0x1ba0>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f005 fe14 	bl	8008ad0 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <menu+0x1ba4>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11b      	bne.n	8002ee8 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <menu+0x1ba8>)
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	f005 fe0b 	bl	8008ad0 <lcd_print>
 8002eba:	e01e      	b.n	8002efa <menu+0x1bbe>
 8002ebc:	200010ce 	.word	0x200010ce
 8002ec0:	20001754 	.word	0x20001754
 8002ec4:	40010800 	.word	0x40010800
 8002ec8:	200010eb 	.word	0x200010eb
 8002ecc:	200010cb 	.word	0x200010cb
 8002ed0:	20000fec 	.word	0x20000fec
 8002ed4:	200010e8 	.word	0x200010e8
 8002ed8:	200010bc 	.word	0x200010bc
 8002edc:	20001768 	.word	0x20001768
 8002ee0:	200010cf 	.word	0x200010cf
 8002ee4:	20001740 	.word	0x20001740
		} else if(platformSilindirTipi == 1) {
 8002ee8:	4ba1      	ldr	r3, [pc, #644]	@ (8003170 <menu+0x1e34>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d104      	bne.n	8002efa <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002ef0:	4aa0      	ldr	r2, [pc, #640]	@ (8003174 <menu+0x1e38>)
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f005 fdeb 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002efa:	2102      	movs	r1, #2
 8002efc:	489e      	ldr	r0, [pc, #632]	@ (8003178 <menu+0x1e3c>)
 8002efe:	f007 f923 	bl	800a148 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d115      	bne.n	8002f34 <menu+0x1bf8>
 8002f08:	4b9c      	ldr	r3, [pc, #624]	@ (800317c <menu+0x1e40>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	f083 0301 	eor.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002f16:	4b96      	ldr	r3, [pc, #600]	@ (8003170 <menu+0x1e34>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b94      	ldr	r3, [pc, #592]	@ (8003170 <menu+0x1e34>)
 8002f20:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002f22:	4b93      	ldr	r3, [pc, #588]	@ (8003170 <menu+0x1e34>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d902      	bls.n	8002f30 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002f2a:	4b91      	ldr	r3, [pc, #580]	@ (8003170 <menu+0x1e34>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f30:	f000 ff4a 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f34:	2104      	movs	r1, #4
 8002f36:	4890      	ldr	r0, [pc, #576]	@ (8003178 <menu+0x1e3c>)
 8002f38:	f007 f906 	bl	800a148 <HAL_GPIO_ReadPin>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d115      	bne.n	8002f6e <menu+0x1c32>
 8002f42:	4b8e      	ldr	r3, [pc, #568]	@ (800317c <menu+0x1e40>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002f50:	4b87      	ldr	r3, [pc, #540]	@ (8003170 <menu+0x1e34>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b85      	ldr	r3, [pc, #532]	@ (8003170 <menu+0x1e34>)
 8002f5a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002f5c:	4b84      	ldr	r3, [pc, #528]	@ (8003170 <menu+0x1e34>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002f64:	4b82      	ldr	r3, [pc, #520]	@ (8003170 <menu+0x1e34>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f6a:	f000 ff2d 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f6e:	2108      	movs	r1, #8
 8002f70:	4881      	ldr	r0, [pc, #516]	@ (8003178 <menu+0x1e3c>)
 8002f72:	f007 f8e9 	bl	800a148 <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d118      	bne.n	8002fae <menu+0x1c72>
 8002f7c:	4b7f      	ldr	r3, [pc, #508]	@ (800317c <menu+0x1e40>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d011      	beq.n	8002fae <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002f8a:	4b79      	ldr	r3, [pc, #484]	@ (8003170 <menu+0x1e34>)
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003180 <menu+0x1e44>)
 8002f90:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f92:	4b77      	ldr	r3, [pc, #476]	@ (8003170 <menu+0x1e34>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d106      	bne.n	8002fa8 <menu+0x1c6c>
				altLimit = 1;
 8002f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003184 <menu+0x1e48>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fa0:	4b78      	ldr	r3, [pc, #480]	@ (8003184 <menu+0x1e48>)
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <menu+0x1e44>)
 8002fa6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002fa8:	4b77      	ldr	r3, [pc, #476]	@ (8003188 <menu+0x1e4c>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002fae:	4b77      	ldr	r3, [pc, #476]	@ (800318c <menu+0x1e50>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b16      	cmp	r3, #22
 8002fb4:	d164      	bne.n	8003080 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002fb6:	4a76      	ldr	r2, [pc, #472]	@ (8003190 <menu+0x1e54>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f005 fd88 	bl	8008ad0 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fc0:	4a74      	ldr	r2, [pc, #464]	@ (8003194 <menu+0x1e58>)
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f005 fd83 	bl	8008ad0 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002fca:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <menu+0x1e5c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	220a      	movs	r2, #10
 8002fd0:	4972      	ldr	r1, [pc, #456]	@ (800319c <menu+0x1e60>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00a f940 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 8002fd8:	4a70      	ldr	r2, [pc, #448]	@ (800319c <menu+0x1e60>)
 8002fda:	2110      	movs	r1, #16
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f005 fd77 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4864      	ldr	r0, [pc, #400]	@ (8003178 <menu+0x1e3c>)
 8002fe6:	f007 f8af 	bl	800a148 <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d115      	bne.n	800301c <menu+0x1ce0>
 8002ff0:	4b62      	ldr	r3, [pc, #392]	@ (800317c <menu+0x1e40>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002ffe:	4b66      	ldr	r3, [pc, #408]	@ (8003198 <menu+0x1e5c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b64      	ldr	r3, [pc, #400]	@ (8003198 <menu+0x1e5c>)
 8003008:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800300a:	4b63      	ldr	r3, [pc, #396]	@ (8003198 <menu+0x1e5c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d902      	bls.n	8003018 <menu+0x1cdc>
				yukariValfTmr = 0;
 8003012:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <menu+0x1e5c>)
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003018:	f000 fed6 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800301c:	2104      	movs	r1, #4
 800301e:	4856      	ldr	r0, [pc, #344]	@ (8003178 <menu+0x1e3c>)
 8003020:	f007 f892 	bl	800a148 <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d115      	bne.n	8003056 <menu+0x1d1a>
 800302a:	4b54      	ldr	r3, [pc, #336]	@ (800317c <menu+0x1e40>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003038:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <menu+0x1e5c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	4b55      	ldr	r3, [pc, #340]	@ (8003198 <menu+0x1e5c>)
 8003042:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003044:	4b54      	ldr	r3, [pc, #336]	@ (8003198 <menu+0x1e5c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b06      	cmp	r3, #6
 800304a:	d902      	bls.n	8003052 <menu+0x1d16>
		   		yukariValfTmr = 5;
 800304c:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <menu+0x1e5c>)
 800304e:	2205      	movs	r2, #5
 8003050:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003052:	f000 feb9 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003056:	2108      	movs	r1, #8
 8003058:	4847      	ldr	r0, [pc, #284]	@ (8003178 <menu+0x1e3c>)
 800305a:	f007 f875 	bl	800a148 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10d      	bne.n	8003080 <menu+0x1d44>
 8003064:	4b45      	ldr	r3, [pc, #276]	@ (800317c <menu+0x1e40>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003072:	4b49      	ldr	r3, [pc, #292]	@ (8003198 <menu+0x1e5c>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <menu+0x1e44>)
 8003078:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800307a:	4b43      	ldr	r3, [pc, #268]	@ (8003188 <menu+0x1e4c>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003080:	4b42      	ldr	r3, [pc, #264]	@ (800318c <menu+0x1e50>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b17      	cmp	r3, #23
 8003086:	d164      	bne.n	8003152 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003088:	4a45      	ldr	r2, [pc, #276]	@ (80031a0 <menu+0x1e64>)
 800308a:	2101      	movs	r1, #1
 800308c:	2001      	movs	r0, #1
 800308e:	f005 fd1f 	bl	8008ad0 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003092:	4a40      	ldr	r2, [pc, #256]	@ (8003194 <menu+0x1e58>)
 8003094:	2101      	movs	r1, #1
 8003096:	2002      	movs	r0, #2
 8003098:	f005 fd1a 	bl	8008ad0 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <menu+0x1e68>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	220a      	movs	r2, #10
 80030a2:	493e      	ldr	r1, [pc, #248]	@ (800319c <menu+0x1e60>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f00a f8d7 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 80030aa:	4a3c      	ldr	r2, [pc, #240]	@ (800319c <menu+0x1e60>)
 80030ac:	2110      	movs	r1, #16
 80030ae:	2002      	movs	r0, #2
 80030b0:	f005 fd0e 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b4:	2102      	movs	r1, #2
 80030b6:	4830      	ldr	r0, [pc, #192]	@ (8003178 <menu+0x1e3c>)
 80030b8:	f007 f846 	bl	800a148 <HAL_GPIO_ReadPin>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d115      	bne.n	80030ee <menu+0x1db2>
 80030c2:	4b2e      	ldr	r3, [pc, #184]	@ (800317c <menu+0x1e40>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80030d0:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <menu+0x1e68>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <menu+0x1e68>)
 80030da:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80030dc:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <menu+0x1e68>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d902      	bls.n	80030ea <menu+0x1dae>
				asagiValfTmr = 0;
 80030e4:	4b2f      	ldr	r3, [pc, #188]	@ (80031a4 <menu+0x1e68>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030ea:	f000 fe6d 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ee:	2104      	movs	r1, #4
 80030f0:	4821      	ldr	r0, [pc, #132]	@ (8003178 <menu+0x1e3c>)
 80030f2:	f007 f829 	bl	800a148 <HAL_GPIO_ReadPin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d115      	bne.n	8003128 <menu+0x1dec>
 80030fc:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <menu+0x1e40>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 800310a:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <menu+0x1e68>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	3b01      	subs	r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <menu+0x1e68>)
 8003114:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003116:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <menu+0x1e68>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800311e:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <menu+0x1e68>)
 8003120:	2205      	movs	r2, #5
 8003122:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003124:	f000 fe50 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003128:	2108      	movs	r1, #8
 800312a:	4813      	ldr	r0, [pc, #76]	@ (8003178 <menu+0x1e3c>)
 800312c:	f007 f80c 	bl	800a148 <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10d      	bne.n	8003152 <menu+0x1e16>
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <menu+0x1e40>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8003144:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <menu+0x1e68>)
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <menu+0x1e44>)
 800314a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800314c:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <menu+0x1e4c>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <menu+0x1e50>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b18      	cmp	r3, #24
 8003158:	f040 8093 	bne.w	8003282 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <menu+0x1e6c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d125      	bne.n	80031b0 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <menu+0x1e70>)
 8003166:	2101      	movs	r1, #1
 8003168:	2001      	movs	r0, #1
 800316a:	f005 fcb1 	bl	8008ad0 <lcd_print>
 800316e:	e028      	b.n	80031c2 <menu+0x1e86>
 8003170:	200010cf 	.word	0x200010cf
 8003174:	20001754 	.word	0x20001754
 8003178:	40010800 	.word	0x40010800
 800317c:	200010eb 	.word	0x200010eb
 8003180:	20000fec 	.word	0x20000fec
 8003184:	200010c2 	.word	0x200010c2
 8003188:	200010e8 	.word	0x200010e8
 800318c:	200010bc 	.word	0x200010bc
 8003190:	2000177c 	.word	0x2000177c
 8003194:	200015c4 	.word	0x200015c4
 8003198:	200010d0 	.word	0x200010d0
 800319c:	2000105c 	.word	0x2000105c
 80031a0:	20001790 	.word	0x20001790
 80031a4:	200010d1 	.word	0x200010d1
 80031a8:	200010cb 	.word	0x200010cb
 80031ac:	200017a4 	.word	0x200017a4
		} else if(devirmeYuruyusSecim == 1) {
 80031b0:	4b8c      	ldr	r3, [pc, #560]	@ (80033e4 <menu+0x20a8>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d104      	bne.n	80031c2 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80031b8:	4a8b      	ldr	r2, [pc, #556]	@ (80033e8 <menu+0x20ac>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2001      	movs	r0, #1
 80031be:	f005 fc87 	bl	8008ad0 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031c2:	4a8a      	ldr	r2, [pc, #552]	@ (80033ec <menu+0x20b0>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	2002      	movs	r0, #2
 80031c8:	f005 fc82 	bl	8008ad0 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80031cc:	4b88      	ldr	r3, [pc, #544]	@ (80033f0 <menu+0x20b4>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	220a      	movs	r2, #10
 80031d2:	4988      	ldr	r1, [pc, #544]	@ (80033f4 <menu+0x20b8>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f00a f83f 	bl	800d258 <itoa>
		lcd_print(2, 16, snum);
 80031da:	4a86      	ldr	r2, [pc, #536]	@ (80033f4 <menu+0x20b8>)
 80031dc:	2110      	movs	r1, #16
 80031de:	2002      	movs	r0, #2
 80031e0:	f005 fc76 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031e4:	2102      	movs	r1, #2
 80031e6:	4884      	ldr	r0, [pc, #528]	@ (80033f8 <menu+0x20bc>)
 80031e8:	f006 ffae 	bl	800a148 <HAL_GPIO_ReadPin>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d115      	bne.n	800321e <menu+0x1ee2>
 80031f2:	4b82      	ldr	r3, [pc, #520]	@ (80033fc <menu+0x20c0>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003200:	4b7b      	ldr	r3, [pc, #492]	@ (80033f0 <menu+0x20b4>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b79      	ldr	r3, [pc, #484]	@ (80033f0 <menu+0x20b4>)
 800320a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800320c:	4b78      	ldr	r3, [pc, #480]	@ (80033f0 <menu+0x20b4>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d902      	bls.n	800321a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003214:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <menu+0x20b4>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800321a:	f000 fdd5 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800321e:	2104      	movs	r1, #4
 8003220:	4875      	ldr	r0, [pc, #468]	@ (80033f8 <menu+0x20bc>)
 8003222:	f006 ff91 	bl	800a148 <HAL_GPIO_ReadPin>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d115      	bne.n	8003258 <menu+0x1f1c>
 800322c:	4b73      	ldr	r3, [pc, #460]	@ (80033fc <menu+0x20c0>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	f083 0301 	eor.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00e      	beq.n	8003258 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800323a:	4b6d      	ldr	r3, [pc, #436]	@ (80033f0 <menu+0x20b4>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	3b01      	subs	r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b6b      	ldr	r3, [pc, #428]	@ (80033f0 <menu+0x20b4>)
 8003244:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003246:	4b6a      	ldr	r3, [pc, #424]	@ (80033f0 <menu+0x20b4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800324e:	4b68      	ldr	r3, [pc, #416]	@ (80033f0 <menu+0x20b4>)
 8003250:	2205      	movs	r2, #5
 8003252:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003254:	f000 fdb8 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003258:	2108      	movs	r1, #8
 800325a:	4867      	ldr	r0, [pc, #412]	@ (80033f8 <menu+0x20bc>)
 800325c:	f006 ff74 	bl	800a148 <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10d      	bne.n	8003282 <menu+0x1f46>
 8003266:	4b65      	ldr	r3, [pc, #404]	@ (80033fc <menu+0x20c0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003274:	4b5e      	ldr	r3, [pc, #376]	@ (80033f0 <menu+0x20b4>)
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	4b61      	ldr	r3, [pc, #388]	@ (8003400 <menu+0x20c4>)
 800327a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800327c:	4b61      	ldr	r3, [pc, #388]	@ (8003404 <menu+0x20c8>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003282:	4b61      	ldr	r3, [pc, #388]	@ (8003408 <menu+0x20cc>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b19      	cmp	r3, #25
 8003288:	d172      	bne.n	8003370 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800328a:	4b56      	ldr	r3, [pc, #344]	@ (80033e4 <menu+0x20a8>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d105      	bne.n	800329e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003292:	4a5e      	ldr	r2, [pc, #376]	@ (800340c <menu+0x20d0>)
 8003294:	2101      	movs	r1, #1
 8003296:	2001      	movs	r0, #1
 8003298:	f005 fc1a 	bl	8008ad0 <lcd_print>
 800329c:	e008      	b.n	80032b0 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800329e:	4b51      	ldr	r3, [pc, #324]	@ (80033e4 <menu+0x20a8>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d104      	bne.n	80032b0 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80032a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003410 <menu+0x20d4>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	2001      	movs	r0, #1
 80032ac:	f005 fc10 	bl	8008ad0 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032b0:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <menu+0x20b0>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f005 fc0b 	bl	8008ad0 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80032ba:	4b56      	ldr	r3, [pc, #344]	@ (8003414 <menu+0x20d8>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	220a      	movs	r2, #10
 80032c0:	494c      	ldr	r1, [pc, #304]	@ (80033f4 <menu+0x20b8>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f009 ffc8 	bl	800d258 <itoa>
		lcd_print(2,16,snum);
 80032c8:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <menu+0x20b8>)
 80032ca:	2110      	movs	r1, #16
 80032cc:	2002      	movs	r0, #2
 80032ce:	f005 fbff 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d2:	2102      	movs	r1, #2
 80032d4:	4848      	ldr	r0, [pc, #288]	@ (80033f8 <menu+0x20bc>)
 80032d6:	f006 ff37 	bl	800a148 <HAL_GPIO_ReadPin>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d115      	bne.n	800330c <menu+0x1fd0>
 80032e0:	4b46      	ldr	r3, [pc, #280]	@ (80033fc <menu+0x20c0>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f083 0301 	eor.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80032ee:	4b49      	ldr	r3, [pc, #292]	@ (8003414 <menu+0x20d8>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <menu+0x20d8>)
 80032f8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80032fa:	4b46      	ldr	r3, [pc, #280]	@ (8003414 <menu+0x20d8>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d902      	bls.n	8003308 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003302:	4b44      	ldr	r3, [pc, #272]	@ (8003414 <menu+0x20d8>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003308:	f000 fd5e 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800330c:	2104      	movs	r1, #4
 800330e:	483a      	ldr	r0, [pc, #232]	@ (80033f8 <menu+0x20bc>)
 8003310:	f006 ff1a 	bl	800a148 <HAL_GPIO_ReadPin>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d115      	bne.n	8003346 <menu+0x200a>
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <menu+0x20c0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	f083 0301 	eor.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003328:	4b3a      	ldr	r3, [pc, #232]	@ (8003414 <menu+0x20d8>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <menu+0x20d8>)
 8003332:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003334:	4b37      	ldr	r3, [pc, #220]	@ (8003414 <menu+0x20d8>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d902      	bls.n	8003342 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 800333c:	4b35      	ldr	r3, [pc, #212]	@ (8003414 <menu+0x20d8>)
 800333e:	2205      	movs	r2, #5
 8003340:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003342:	f000 fd41 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003346:	2108      	movs	r1, #8
 8003348:	482b      	ldr	r0, [pc, #172]	@ (80033f8 <menu+0x20bc>)
 800334a:	f006 fefd 	bl	800a148 <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10d      	bne.n	8003370 <menu+0x2034>
 8003354:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <menu+0x20c0>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	f083 0301 	eor.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003362:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <menu+0x20d8>)
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <menu+0x20c4>)
 8003368:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800336a:	4b26      	ldr	r3, [pc, #152]	@ (8003404 <menu+0x20c8>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <menu+0x20cc>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b1a      	cmp	r3, #26
 8003376:	f040 80b7 	bne.w	80034e8 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800337a:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <menu+0x20dc>)
 800337c:	2101      	movs	r1, #1
 800337e:	2001      	movs	r0, #1
 8003380:	f005 fba6 	bl	8008ad0 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003384:	4b25      	ldr	r3, [pc, #148]	@ (800341c <menu+0x20e0>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b63      	cmp	r3, #99	@ 0x63
 800338a:	d911      	bls.n	80033b0 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 800338c:	4a17      	ldr	r2, [pc, #92]	@ (80033ec <menu+0x20b0>)
 800338e:	2101      	movs	r1, #1
 8003390:	2002      	movs	r0, #2
 8003392:	f005 fb9d 	bl	8008ad0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003396:	4b21      	ldr	r3, [pc, #132]	@ (800341c <menu+0x20e0>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	220a      	movs	r2, #10
 800339c:	4915      	ldr	r1, [pc, #84]	@ (80033f4 <menu+0x20b8>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f009 ff5a 	bl	800d258 <itoa>
			lcd_print(2,14,snum);
 80033a4:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <menu+0x20b8>)
 80033a6:	210e      	movs	r1, #14
 80033a8:	2002      	movs	r0, #2
 80033aa:	f005 fb91 	bl	8008ad0 <lcd_print>
 80033ae:	e04c      	b.n	800344a <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80033b0:	4b1a      	ldr	r3, [pc, #104]	@ (800341c <menu+0x20e0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d933      	bls.n	8003420 <menu+0x20e4>
 80033b8:	4b18      	ldr	r3, [pc, #96]	@ (800341c <menu+0x20e0>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b63      	cmp	r3, #99	@ 0x63
 80033be:	d82f      	bhi.n	8003420 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <menu+0x20b0>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	2002      	movs	r0, #2
 80033c6:	f005 fb83 	bl	8008ad0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <menu+0x20e0>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	220a      	movs	r2, #10
 80033d0:	4908      	ldr	r1, [pc, #32]	@ (80033f4 <menu+0x20b8>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f009 ff40 	bl	800d258 <itoa>
			lcd_print(2, 15, snum);
 80033d8:	4a06      	ldr	r2, [pc, #24]	@ (80033f4 <menu+0x20b8>)
 80033da:	210f      	movs	r1, #15
 80033dc:	2002      	movs	r0, #2
 80033de:	f005 fb77 	bl	8008ad0 <lcd_print>
 80033e2:	e032      	b.n	800344a <menu+0x210e>
 80033e4:	200010cb 	.word	0x200010cb
 80033e8:	200017b8 	.word	0x200017b8
 80033ec:	200015c4 	.word	0x200015c4
 80033f0:	200010d2 	.word	0x200010d2
 80033f4:	2000105c 	.word	0x2000105c
 80033f8:	40010800 	.word	0x40010800
 80033fc:	200010eb 	.word	0x200010eb
 8003400:	20000fec 	.word	0x20000fec
 8003404:	200010e8 	.word	0x200010e8
 8003408:	200010bc 	.word	0x200010bc
 800340c:	200017cc 	.word	0x200017cc
 8003410:	200017e0 	.word	0x200017e0
 8003414:	200010d3 	.word	0x200010d3
 8003418:	200017f4 	.word	0x200017f4
 800341c:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 8003420:	4b72      	ldr	r3, [pc, #456]	@ (80035ec <menu+0x22b0>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b09      	cmp	r3, #9
 8003426:	d810      	bhi.n	800344a <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003428:	4a71      	ldr	r2, [pc, #452]	@ (80035f0 <menu+0x22b4>)
 800342a:	2101      	movs	r1, #1
 800342c:	2002      	movs	r0, #2
 800342e:	f005 fb4f 	bl	8008ad0 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003432:	4b6e      	ldr	r3, [pc, #440]	@ (80035ec <menu+0x22b0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	220a      	movs	r2, #10
 8003438:	496e      	ldr	r1, [pc, #440]	@ (80035f4 <menu+0x22b8>)
 800343a:	4618      	mov	r0, r3
 800343c:	f009 ff0c 	bl	800d258 <itoa>
			lcd_print(2, 16, snum);
 8003440:	4a6c      	ldr	r2, [pc, #432]	@ (80035f4 <menu+0x22b8>)
 8003442:	2110      	movs	r1, #16
 8003444:	2002      	movs	r0, #2
 8003446:	f005 fb43 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800344a:	2102      	movs	r1, #2
 800344c:	486a      	ldr	r0, [pc, #424]	@ (80035f8 <menu+0x22bc>)
 800344e:	f006 fe7b 	bl	800a148 <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	d115      	bne.n	8003484 <menu+0x2148>
 8003458:	4b68      	ldr	r3, [pc, #416]	@ (80035fc <menu+0x22c0>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f083 0301 	eor.w	r3, r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00e      	beq.n	8003484 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003466:	4b61      	ldr	r3, [pc, #388]	@ (80035ec <menu+0x22b0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ec <menu+0x22b0>)
 8003470:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003472:	4b5e      	ldr	r3, [pc, #376]	@ (80035ec <menu+0x22b0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2bb4      	cmp	r3, #180	@ 0xb4
 8003478:	d902      	bls.n	8003480 <menu+0x2144>
				makineCalismaTmr = 0;
 800347a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ec <menu+0x22b0>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003480:	f000 fca2 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003484:	2104      	movs	r1, #4
 8003486:	485c      	ldr	r0, [pc, #368]	@ (80035f8 <menu+0x22bc>)
 8003488:	f006 fe5e 	bl	800a148 <HAL_GPIO_ReadPin>
 800348c:	4603      	mov	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d115      	bne.n	80034be <menu+0x2182>
 8003492:	4b5a      	ldr	r3, [pc, #360]	@ (80035fc <menu+0x22c0>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80034a0:	4b52      	ldr	r3, [pc, #328]	@ (80035ec <menu+0x22b0>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <menu+0x22b0>)
 80034aa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80034ac:	4b4f      	ldr	r3, [pc, #316]	@ (80035ec <menu+0x22b0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2bb5      	cmp	r3, #181	@ 0xb5
 80034b2:	d902      	bls.n	80034ba <menu+0x217e>
		   		makineCalismaTmr = 180;
 80034b4:	4b4d      	ldr	r3, [pc, #308]	@ (80035ec <menu+0x22b0>)
 80034b6:	22b4      	movs	r2, #180	@ 0xb4
 80034b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ba:	f000 fc85 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034be:	2108      	movs	r1, #8
 80034c0:	484d      	ldr	r0, [pc, #308]	@ (80035f8 <menu+0x22bc>)
 80034c2:	f006 fe41 	bl	800a148 <HAL_GPIO_ReadPin>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10d      	bne.n	80034e8 <menu+0x21ac>
 80034cc:	4b4b      	ldr	r3, [pc, #300]	@ (80035fc <menu+0x22c0>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80034da:	4b44      	ldr	r3, [pc, #272]	@ (80035ec <menu+0x22b0>)
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	4b48      	ldr	r3, [pc, #288]	@ (8003600 <menu+0x22c4>)
 80034e0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80034e2:	4b48      	ldr	r3, [pc, #288]	@ (8003604 <menu+0x22c8>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80034e8:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <menu+0x22cc>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b1b      	cmp	r3, #27
 80034ee:	d166      	bne.n	80035be <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80034f0:	4a46      	ldr	r2, [pc, #280]	@ (800360c <menu+0x22d0>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f005 faeb 	bl	8008ad0 <lcd_print>

		if(buzzer == 0) {
 80034fa:	4b45      	ldr	r3, [pc, #276]	@ (8003610 <menu+0x22d4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003502:	4a44      	ldr	r2, [pc, #272]	@ (8003614 <menu+0x22d8>)
 8003504:	2101      	movs	r1, #1
 8003506:	2002      	movs	r0, #2
 8003508:	f005 fae2 	bl	8008ad0 <lcd_print>
 800350c:	e008      	b.n	8003520 <menu+0x21e4>
		} else if(buzzer == 1) {
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <menu+0x22d4>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d104      	bne.n	8003520 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003516:	4a40      	ldr	r2, [pc, #256]	@ (8003618 <menu+0x22dc>)
 8003518:	2101      	movs	r1, #1
 800351a:	2002      	movs	r0, #2
 800351c:	f005 fad8 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003520:	2102      	movs	r1, #2
 8003522:	4835      	ldr	r0, [pc, #212]	@ (80035f8 <menu+0x22bc>)
 8003524:	f006 fe10 	bl	800a148 <HAL_GPIO_ReadPin>
 8003528:	4603      	mov	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d115      	bne.n	800355a <menu+0x221e>
 800352e:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <menu+0x22c0>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	f083 0301 	eor.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <menu+0x221e>
			buzzer = buzzer + 1;
 800353c:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <menu+0x22d4>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b32      	ldr	r3, [pc, #200]	@ (8003610 <menu+0x22d4>)
 8003546:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003548:	4b31      	ldr	r3, [pc, #196]	@ (8003610 <menu+0x22d4>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d902      	bls.n	8003556 <menu+0x221a>
				buzzer = 0;
 8003550:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <menu+0x22d4>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003556:	f000 fc37 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800355a:	2104      	movs	r1, #4
 800355c:	4826      	ldr	r0, [pc, #152]	@ (80035f8 <menu+0x22bc>)
 800355e:	f006 fdf3 	bl	800a148 <HAL_GPIO_ReadPin>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d115      	bne.n	8003594 <menu+0x2258>
 8003568:	4b24      	ldr	r3, [pc, #144]	@ (80035fc <menu+0x22c0>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	f083 0301 	eor.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <menu+0x2258>
			buzzer = buzzer - 1;
 8003576:	4b26      	ldr	r3, [pc, #152]	@ (8003610 <menu+0x22d4>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	3b01      	subs	r3, #1
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <menu+0x22d4>)
 8003580:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003582:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <menu+0x22d4>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <menu+0x2254>
		   		buzzer = 1;
 800358a:	4b21      	ldr	r3, [pc, #132]	@ (8003610 <menu+0x22d4>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003590:	f000 fc1a 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003594:	2108      	movs	r1, #8
 8003596:	4818      	ldr	r0, [pc, #96]	@ (80035f8 <menu+0x22bc>)
 8003598:	f006 fdd6 	bl	800a148 <HAL_GPIO_ReadPin>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10d      	bne.n	80035be <menu+0x2282>
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <menu+0x22c0>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <menu+0x2282>
			eepromData[25] = buzzer;
 80035b0:	4b17      	ldr	r3, [pc, #92]	@ (8003610 <menu+0x22d4>)
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <menu+0x22c4>)
 80035b6:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80035b8:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <menu+0x22c8>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80035be:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <menu+0x22cc>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b1c      	cmp	r3, #28
 80035c4:	f040 8088 	bne.w	80036d8 <menu+0x239c>
		calismaSayModu = 0;
 80035c8:	4b14      	ldr	r3, [pc, #80]	@ (800361c <menu+0x22e0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80035ce:	4a14      	ldr	r2, [pc, #80]	@ (8003620 <menu+0x22e4>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	2001      	movs	r0, #1
 80035d4:	f005 fa7c 	bl	8008ad0 <lcd_print>

		if(demoMode == 0) {
 80035d8:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <menu+0x22e8>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d123      	bne.n	8003628 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <menu+0x22d8>)
 80035e2:	2101      	movs	r1, #1
 80035e4:	2002      	movs	r0, #2
 80035e6:	f005 fa73 	bl	8008ad0 <lcd_print>
 80035ea:	e026      	b.n	800363a <menu+0x22fe>
 80035ec:	200010d4 	.word	0x200010d4
 80035f0:	200015c4 	.word	0x200015c4
 80035f4:	2000105c 	.word	0x2000105c
 80035f8:	40010800 	.word	0x40010800
 80035fc:	200010eb 	.word	0x200010eb
 8003600:	20000fec 	.word	0x20000fec
 8003604:	200010e8 	.word	0x200010e8
 8003608:	200010bc 	.word	0x200010bc
 800360c:	20000128 	.word	0x20000128
 8003610:	200010d8 	.word	0x200010d8
 8003614:	20001498 	.word	0x20001498
 8003618:	200014ac 	.word	0x200014ac
 800361c:	200010db 	.word	0x200010db
 8003620:	2000013c 	.word	0x2000013c
 8003624:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003628:	4b80      	ldr	r3, [pc, #512]	@ (800382c <menu+0x24f0>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d104      	bne.n	800363a <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003630:	4a7f      	ldr	r2, [pc, #508]	@ (8003830 <menu+0x24f4>)
 8003632:	2101      	movs	r1, #1
 8003634:	2002      	movs	r0, #2
 8003636:	f005 fa4b 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800363a:	2102      	movs	r1, #2
 800363c:	487d      	ldr	r0, [pc, #500]	@ (8003834 <menu+0x24f8>)
 800363e:	f006 fd83 	bl	800a148 <HAL_GPIO_ReadPin>
 8003642:	4603      	mov	r3, r0
 8003644:	2b01      	cmp	r3, #1
 8003646:	d115      	bne.n	8003674 <menu+0x2338>
 8003648:	4b7b      	ldr	r3, [pc, #492]	@ (8003838 <menu+0x24fc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <menu+0x2338>
			demoMode = demoMode + 1;
 8003656:	4b75      	ldr	r3, [pc, #468]	@ (800382c <menu+0x24f0>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b73      	ldr	r3, [pc, #460]	@ (800382c <menu+0x24f0>)
 8003660:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003662:	4b72      	ldr	r3, [pc, #456]	@ (800382c <menu+0x24f0>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d902      	bls.n	8003670 <menu+0x2334>
				demoMode = 0;
 800366a:	4b70      	ldr	r3, [pc, #448]	@ (800382c <menu+0x24f0>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003670:	f000 fbaa 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003674:	2104      	movs	r1, #4
 8003676:	486f      	ldr	r0, [pc, #444]	@ (8003834 <menu+0x24f8>)
 8003678:	f006 fd66 	bl	800a148 <HAL_GPIO_ReadPin>
 800367c:	4603      	mov	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d115      	bne.n	80036ae <menu+0x2372>
 8003682:	4b6d      	ldr	r3, [pc, #436]	@ (8003838 <menu+0x24fc>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	f083 0301 	eor.w	r3, r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <menu+0x2372>
			demoMode = demoMode - 1;
 8003690:	4b66      	ldr	r3, [pc, #408]	@ (800382c <menu+0x24f0>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b64      	ldr	r3, [pc, #400]	@ (800382c <menu+0x24f0>)
 800369a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800369c:	4b63      	ldr	r3, [pc, #396]	@ (800382c <menu+0x24f0>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <menu+0x236e>
		   		demoMode = 1;
 80036a4:	4b61      	ldr	r3, [pc, #388]	@ (800382c <menu+0x24f0>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036aa:	f000 fb8d 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ae:	2108      	movs	r1, #8
 80036b0:	4860      	ldr	r0, [pc, #384]	@ (8003834 <menu+0x24f8>)
 80036b2:	f006 fd49 	bl	800a148 <HAL_GPIO_ReadPin>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10d      	bne.n	80036d8 <menu+0x239c>
 80036bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003838 <menu+0x24fc>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <menu+0x239c>
			eepromData[26] = demoMode;
 80036ca:	4b58      	ldr	r3, [pc, #352]	@ (800382c <menu+0x24f0>)
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	4b5b      	ldr	r3, [pc, #364]	@ (800383c <menu+0x2500>)
 80036d0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003840 <menu+0x2504>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003844 <menu+0x2508>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b1d      	cmp	r3, #29
 80036de:	f040 80d5 	bne.w	800388c <menu+0x2550>
		finalCount=0;
 80036e2:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <menu+0x250c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 80036e8:	4b58      	ldr	r3, [pc, #352]	@ (800384c <menu+0x2510>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d135      	bne.n	800375c <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 80036f0:	4a57      	ldr	r2, [pc, #348]	@ (8003850 <menu+0x2514>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2001      	movs	r0, #1
 80036f6:	f005 f9eb 	bl	8008ad0 <lcd_print>

			if(demoMode == 1) {
 80036fa:	4b4c      	ldr	r3, [pc, #304]	@ (800382c <menu+0x24f0>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d113      	bne.n	800372a <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003702:	4b54      	ldr	r3, [pc, #336]	@ (8003854 <menu+0x2518>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	4613      	mov	r3, r2
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	1a9a      	subs	r2, r3, r2
 800370e:	4b4e      	ldr	r3, [pc, #312]	@ (8003848 <menu+0x250c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4413      	add	r3, r2
 8003714:	4a4c      	ldr	r2, [pc, #304]	@ (8003848 <menu+0x250c>)
 8003716:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003718:	4b4f      	ldr	r3, [pc, #316]	@ (8003858 <menu+0x251c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <menu+0x250c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a48      	ldr	r2, [pc, #288]	@ (8003848 <menu+0x250c>)
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e012      	b.n	8003750 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 800372a:	4b4c      	ldr	r3, [pc, #304]	@ (800385c <menu+0x2520>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4613      	mov	r3, r2
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	1a9a      	subs	r2, r3, r2
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <menu+0x250c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4413      	add	r3, r2
 800373c:	4a42      	ldr	r2, [pc, #264]	@ (8003848 <menu+0x250c>)
 800373e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003740:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <menu+0x2524>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b40      	ldr	r3, [pc, #256]	@ (8003848 <menu+0x250c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <menu+0x250c>)
 800374e:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003750:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <menu+0x250c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa89 	bl	8003c6c <displayCycleOnLCD>
 800375a:	e00d      	b.n	8003778 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 800375c:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <menu+0x2510>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d109      	bne.n	8003778 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <menu+0x2514>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f005 f9b1 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 800376e:	4a3d      	ldr	r2, [pc, #244]	@ (8003864 <menu+0x2528>)
 8003770:	2101      	movs	r1, #1
 8003772:	2002      	movs	r0, #2
 8003774:	f005 f9ac 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003778:	2102      	movs	r1, #2
 800377a:	482e      	ldr	r0, [pc, #184]	@ (8003834 <menu+0x24f8>)
 800377c:	f006 fce4 	bl	800a148 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d115      	bne.n	80037b2 <menu+0x2476>
 8003786:	4b2c      	ldr	r3, [pc, #176]	@ (8003838 <menu+0x24fc>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <menu+0x2510>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <menu+0x2510>)
 800379e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80037a0:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <menu+0x2510>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d902      	bls.n	80037ae <menu+0x2472>
				calismaSayModu = 0;
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <menu+0x2510>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037ae:	f000 fb0b 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037b2:	2104      	movs	r1, #4
 80037b4:	481f      	ldr	r0, [pc, #124]	@ (8003834 <menu+0x24f8>)
 80037b6:	f006 fcc7 	bl	800a148 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d115      	bne.n	80037ec <menu+0x24b0>
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <menu+0x24fc>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00e      	beq.n	80037ec <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <menu+0x2510>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <menu+0x2510>)
 80037d8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80037da:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <menu+0x2510>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <menu+0x24ac>
		   		calismaSayModu = 1;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <menu+0x2510>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037e8:	f000 faee 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ec:	2108      	movs	r1, #8
 80037ee:	4811      	ldr	r0, [pc, #68]	@ (8003834 <menu+0x24f8>)
 80037f0:	f006 fcaa 	bl	800a148 <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d148      	bne.n	800388c <menu+0x2550>
 80037fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003838 <menu+0x24fc>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	f083 0301 	eor.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d041      	beq.n	800388c <menu+0x2550>
			if(demoMode == 1) {
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <menu+0x24f0>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d12b      	bne.n	8003868 <menu+0x252c>
				eepromData[28] = 0;
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <menu+0x2500>)
 8003812:	2200      	movs	r2, #0
 8003814:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <menu+0x2500>)
 8003818:	2200      	movs	r2, #0
 800381a:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 800381c:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <menu+0x251c>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <menu+0x2518>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e02a      	b.n	8003880 <menu+0x2544>
 800382a:	bf00      	nop
 800382c:	200010da 	.word	0x200010da
 8003830:	200014ac 	.word	0x200014ac
 8003834:	40010800 	.word	0x40010800
 8003838:	200010eb 	.word	0x200010eb
 800383c:	20000fec 	.word	0x20000fec
 8003840:	200010e8 	.word	0x200010e8
 8003844:	200010bc 	.word	0x200010bc
 8003848:	200010b8 	.word	0x200010b8
 800384c:	200010db 	.word	0x200010db
 8003850:	20001808 	.word	0x20001808
 8003854:	200010b7 	.word	0x200010b7
 8003858:	200010b5 	.word	0x200010b5
 800385c:	200010b6 	.word	0x200010b6
 8003860:	200010b4 	.word	0x200010b4
 8003864:	2000181c 	.word	0x2000181c
			} else {
				eepromData[27] = 0;
 8003868:	4b4b      	ldr	r3, [pc, #300]	@ (8003998 <menu+0x265c>)
 800386a:	2200      	movs	r2, #0
 800386c:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <menu+0x265c>)
 8003870:	2200      	movs	r2, #0
 8003872:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003874:	4b49      	ldr	r3, [pc, #292]	@ (800399c <menu+0x2660>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <menu+0x2664>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003880:	4b48      	ldr	r3, [pc, #288]	@ (80039a4 <menu+0x2668>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003886:	4b48      	ldr	r3, [pc, #288]	@ (80039a8 <menu+0x266c>)
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800388c:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <menu+0x2670>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b1e      	cmp	r3, #30
 8003892:	d16a      	bne.n	800396a <menu+0x262e>
		calismaSayModu = 0;
 8003894:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <menu+0x2668>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 800389a:	4a45      	ldr	r2, [pc, #276]	@ (80039b0 <menu+0x2674>)
 800389c:	2101      	movs	r1, #1
 800389e:	2001      	movs	r0, #1
 80038a0:	f005 f916 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80038a4:	4a43      	ldr	r2, [pc, #268]	@ (80039b4 <menu+0x2678>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	2002      	movs	r0, #2
 80038aa:	f005 f911 	bl	8008ad0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ae:	2102      	movs	r1, #2
 80038b0:	4841      	ldr	r0, [pc, #260]	@ (80039b8 <menu+0x267c>)
 80038b2:	f006 fc49 	bl	800a148 <HAL_GPIO_ReadPin>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d11c      	bne.n	80038f6 <menu+0x25ba>
 80038bc:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <menu+0x2680>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f083 0301 	eor.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 80038ca:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <menu+0x2684>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <menu+0x2684>)
 80038d4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80038d6:	4b3a      	ldr	r3, [pc, #232]	@ (80039c0 <menu+0x2684>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d902      	bls.n	80038e4 <menu+0x25a8>
				dilSecim = 0;
 80038de:	4b38      	ldr	r3, [pc, #224]	@ (80039c0 <menu+0x2684>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80038e4:	f003 ff70 	bl	80077c8 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 80038e8:	4b35      	ldr	r3, [pc, #212]	@ (80039c0 <menu+0x2684>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fae5 	bl	8005ebc <loadMenuTexts>

			bekle();
 80038f2:	f000 fa69 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f6:	2104      	movs	r1, #4
 80038f8:	482f      	ldr	r0, [pc, #188]	@ (80039b8 <menu+0x267c>)
 80038fa:	f006 fc25 	bl	800a148 <HAL_GPIO_ReadPin>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d11c      	bne.n	800393e <menu+0x2602>
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <menu+0x2680>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	f083 0301 	eor.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003912:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <menu+0x2684>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4b29      	ldr	r3, [pc, #164]	@ (80039c0 <menu+0x2684>)
 800391c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800391e:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <menu+0x2684>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <menu+0x25f0>
		   		dilSecim = 1;
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <menu+0x2684>)
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 800392c:	f003 ff4c 	bl	80077c8 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003930:	4b23      	ldr	r3, [pc, #140]	@ (80039c0 <menu+0x2684>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fac1 	bl	8005ebc <loadMenuTexts>

			bekle();
 800393a:	f000 fa45 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800393e:	2108      	movs	r1, #8
 8003940:	481d      	ldr	r0, [pc, #116]	@ (80039b8 <menu+0x267c>)
 8003942:	f006 fc01 	bl	800a148 <HAL_GPIO_ReadPin>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10e      	bne.n	800396a <menu+0x262e>
 800394c:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <menu+0x2680>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <menu+0x262e>
			eepromData[33] = dilSecim;
 800395a:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <menu+0x2684>)
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <menu+0x265c>)
 8003960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <menu+0x266c>)
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <menu+0x2670>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b1f      	cmp	r3, #31
 8003970:	f040 8087 	bne.w	8003a82 <menu+0x2746>
		calismaSayModu = 0;
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <menu+0x2668>)
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <menu+0x2688>)
 800397c:	2101      	movs	r1, #1
 800397e:	2001      	movs	r0, #1
 8003980:	f005 f8a6 	bl	8008ad0 <lcd_print>

		if(iotMode == 0) {
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <menu+0x268c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d121      	bne.n	80039d0 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 800398c:	4a0f      	ldr	r2, [pc, #60]	@ (80039cc <menu+0x2690>)
 800398e:	2101      	movs	r1, #1
 8003990:	2002      	movs	r0, #2
 8003992:	f005 f89d 	bl	8008ad0 <lcd_print>
 8003996:	e024      	b.n	80039e2 <menu+0x26a6>
 8003998:	20000fec 	.word	0x20000fec
 800399c:	200010b4 	.word	0x200010b4
 80039a0:	200010b6 	.word	0x200010b6
 80039a4:	200010db 	.word	0x200010db
 80039a8:	200010e8 	.word	0x200010e8
 80039ac:	200010bc 	.word	0x200010bc
 80039b0:	20001830 	.word	0x20001830
 80039b4:	20001844 	.word	0x20001844
 80039b8:	40010800 	.word	0x40010800
 80039bc:	200010eb 	.word	0x200010eb
 80039c0:	200010dc 	.word	0x200010dc
 80039c4:	20000150 	.word	0x20000150
 80039c8:	200010e7 	.word	0x200010e7
 80039cc:	20001498 	.word	0x20001498
		} else if(iotMode == 1) {
 80039d0:	4b99      	ldr	r3, [pc, #612]	@ (8003c38 <menu+0x28fc>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d104      	bne.n	80039e2 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 80039d8:	4a98      	ldr	r2, [pc, #608]	@ (8003c3c <menu+0x2900>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2002      	movs	r0, #2
 80039de:	f005 f877 	bl	8008ad0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e2:	2102      	movs	r1, #2
 80039e4:	4896      	ldr	r0, [pc, #600]	@ (8003c40 <menu+0x2904>)
 80039e6:	f006 fbaf 	bl	800a148 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d115      	bne.n	8003a1c <menu+0x26e0>
 80039f0:	4b94      	ldr	r3, [pc, #592]	@ (8003c44 <menu+0x2908>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <menu+0x26e0>
			iotMode = iotMode + 1;
 80039fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003c38 <menu+0x28fc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b8c      	ldr	r3, [pc, #560]	@ (8003c38 <menu+0x28fc>)
 8003a08:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c38 <menu+0x28fc>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d902      	bls.n	8003a18 <menu+0x26dc>
				iotMode = 0;
 8003a12:	4b89      	ldr	r3, [pc, #548]	@ (8003c38 <menu+0x28fc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a18:	f000 f9d6 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	4888      	ldr	r0, [pc, #544]	@ (8003c40 <menu+0x2904>)
 8003a20:	f006 fb92 	bl	800a148 <HAL_GPIO_ReadPin>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d115      	bne.n	8003a56 <menu+0x271a>
 8003a2a:	4b86      	ldr	r3, [pc, #536]	@ (8003c44 <menu+0x2908>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	f083 0301 	eor.w	r3, r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00e      	beq.n	8003a56 <menu+0x271a>
			iotMode = iotMode - 1;
 8003a38:	4b7f      	ldr	r3, [pc, #508]	@ (8003c38 <menu+0x28fc>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	4b7d      	ldr	r3, [pc, #500]	@ (8003c38 <menu+0x28fc>)
 8003a42:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a44:	4b7c      	ldr	r3, [pc, #496]	@ (8003c38 <menu+0x28fc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <menu+0x2716>
		   		iotMode = 1;
 8003a4c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c38 <menu+0x28fc>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a52:	f000 f9b9 	bl	8003dc8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a56:	2108      	movs	r1, #8
 8003a58:	4879      	ldr	r0, [pc, #484]	@ (8003c40 <menu+0x2904>)
 8003a5a:	f006 fb75 	bl	800a148 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10e      	bne.n	8003a82 <menu+0x2746>
 8003a64:	4b77      	ldr	r3, [pc, #476]	@ (8003c44 <menu+0x2908>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <menu+0x2746>
			eepromData[48] = iotMode;
 8003a72:	4b71      	ldr	r3, [pc, #452]	@ (8003c38 <menu+0x28fc>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b74      	ldr	r3, [pc, #464]	@ (8003c48 <menu+0x290c>)
 8003a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <menu+0x2910>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003a82:	4b73      	ldr	r3, [pc, #460]	@ (8003c50 <menu+0x2914>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d127      	bne.n	8003ada <menu+0x279e>
		calismaSayModu = 0;
 8003a8a:	4b72      	ldr	r3, [pc, #456]	@ (8003c54 <menu+0x2918>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003a90:	4a71      	ldr	r2, [pc, #452]	@ (8003c58 <menu+0x291c>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2001      	movs	r0, #1
 8003a96:	f005 f81b 	bl	8008ad0 <lcd_print>

		convertArrays(1);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7fc ff04 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003aa0:	2032      	movs	r0, #50	@ 0x32
 8003aa2:	f005 fd81 	bl	80095a8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f7fd fbec 	bl	8001284 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aac:	2102      	movs	r1, #2
 8003aae:	4864      	ldr	r0, [pc, #400]	@ (8003c40 <menu+0x2904>)
 8003ab0:	f006 fb4a 	bl	800a148 <HAL_GPIO_ReadPin>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10f      	bne.n	8003ada <menu+0x279e>
 8003aba:	2104      	movs	r1, #4
 8003abc:	4860      	ldr	r0, [pc, #384]	@ (8003c40 <menu+0x2904>)
 8003abe:	f006 fb43 	bl	800a148 <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <menu+0x279e>
 8003ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c44 <menu+0x2908>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003ad6:	f004 f8eb 	bl	8007cb0 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003ada:	4b5d      	ldr	r3, [pc, #372]	@ (8003c50 <menu+0x2914>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b21      	cmp	r3, #33	@ 0x21
 8003ae0:	d12b      	bne.n	8003b3a <menu+0x27fe>
		calismaSayModu = 0;
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <menu+0x2918>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f7fc fedd 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003aee:	2032      	movs	r0, #50	@ 0x32
 8003af0:	f005 fd5a 	bl	80095a8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003af4:	2002      	movs	r0, #2
 8003af6:	f7fd fbc5 	bl	8001284 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afa:	2102      	movs	r1, #2
 8003afc:	4850      	ldr	r0, [pc, #320]	@ (8003c40 <menu+0x2904>)
 8003afe:	f006 fb23 	bl	800a148 <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d118      	bne.n	8003b3a <menu+0x27fe>
 8003b08:	2104      	movs	r1, #4
 8003b0a:	484d      	ldr	r0, [pc, #308]	@ (8003c40 <menu+0x2904>)
 8003b0c:	f006 fb1c 	bl	800a148 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d111      	bne.n	8003b3a <menu+0x27fe>
 8003b16:	4b4b      	ldr	r3, [pc, #300]	@ (8003c44 <menu+0x2908>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	f083 0301 	eor.w	r3, r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <menu+0x27fe>
			takeWifiSSID();
 8003b24:	f004 fad0 	bl	80080c8 <takeWifiSSID>

			convertArrays(2);
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fc febd 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003b2e:	2032      	movs	r0, #50	@ 0x32
 8003b30:	f005 fd3a 	bl	80095a8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b34:	2002      	movs	r0, #2
 8003b36:	f7fd fba5 	bl	8001284 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b3a:	4b45      	ldr	r3, [pc, #276]	@ (8003c50 <menu+0x2914>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b22      	cmp	r3, #34	@ 0x22
 8003b40:	d12b      	bne.n	8003b9a <menu+0x285e>
		calismaSayModu = 0;
 8003b42:	4b44      	ldr	r3, [pc, #272]	@ (8003c54 <menu+0x2918>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f7fc fead 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003b4e:	2032      	movs	r0, #50	@ 0x32
 8003b50:	f005 fd2a 	bl	80095a8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b54:	2003      	movs	r0, #3
 8003b56:	f7fd fb95 	bl	8001284 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4838      	ldr	r0, [pc, #224]	@ (8003c40 <menu+0x2904>)
 8003b5e:	f006 faf3 	bl	800a148 <HAL_GPIO_ReadPin>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d118      	bne.n	8003b9a <menu+0x285e>
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4835      	ldr	r0, [pc, #212]	@ (8003c40 <menu+0x2904>)
 8003b6c:	f006 faec 	bl	800a148 <HAL_GPIO_ReadPin>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d111      	bne.n	8003b9a <menu+0x285e>
 8003b76:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <menu+0x2908>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <menu+0x285e>
			takeWifiPass();
 8003b84:	f004 fc4c 	bl	8008420 <takeWifiPass>

			convertArrays(3);
 8003b88:	2003      	movs	r0, #3
 8003b8a:	f7fc fe8d 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003b8e:	2032      	movs	r0, #50	@ 0x32
 8003b90:	f005 fd0a 	bl	80095a8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003b94:	2003      	movs	r0, #3
 8003b96:	f7fd fb75 	bl	8001284 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <menu+0x2914>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b23      	cmp	r3, #35	@ 0x23
 8003ba0:	d146      	bne.n	8003c30 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c5c <menu+0x2920>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f004 ff92 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003bac:	4a2c      	ldr	r2, [pc, #176]	@ (8003c60 <menu+0x2924>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f004 ff8d 	bl	8008ad0 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	4821      	ldr	r0, [pc, #132]	@ (8003c40 <menu+0x2904>)
 8003bba:	f006 fac5 	bl	800a148 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d135      	bne.n	8003c30 <menu+0x28f4>
			menuGiris = 0;
 8003bc4:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <menu+0x2928>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003bca:	f005 fce3 	bl	8009594 <HAL_GetTick>
 8003bce:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003bd0:	e007      	b.n	8003be2 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003bd2:	f005 fcdf 	bl	8009594 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003be0:	d806      	bhi.n	8003bf0 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003be2:	4821      	ldr	r0, [pc, #132]	@ (8003c68 <menu+0x292c>)
 8003be4:	f007 f8d9 	bl	800ad9a <HAL_I2C_GetError>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d0f1      	beq.n	8003bd2 <menu+0x2896>
 8003bee:	e000      	b.n	8003bf2 <menu+0x28b6>
			        break;
 8003bf0:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003bf2:	f005 fccf 	bl	8009594 <HAL_GetTick>
 8003bf6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003bf8:	e007      	b.n	8003c0a <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003bfa:	f005 fccb 	bl	8009594 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c08:	d806      	bhi.n	8003c18 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003c0a:	4817      	ldr	r0, [pc, #92]	@ (8003c68 <menu+0x292c>)
 8003c0c:	f007 f8b8 	bl	800ad80 <HAL_I2C_GetState>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d1f1      	bne.n	8003bfa <menu+0x28be>
 8003c16:	e000      	b.n	8003c1a <menu+0x28de>
			        break;
 8003c18:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7fc fd42 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003c20:	f004 ff82 	bl	8008b28 <lcd_clear>
			HAL_Delay(500);
 8003c24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c28:	f005 fcbe 	bl	80095a8 <HAL_Delay>
			NVIC_SystemReset();
 8003c2c:	f7fd fb70 	bl	8001310 <__NVIC_SystemReset>
		}
	}
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200010e7 	.word	0x200010e7
 8003c3c:	200014ac 	.word	0x200014ac
 8003c40:	40010800 	.word	0x40010800
 8003c44:	200010eb 	.word	0x200010eb
 8003c48:	20000fec 	.word	0x20000fec
 8003c4c:	200010e8 	.word	0x200010e8
 8003c50:	200010bc 	.word	0x200010bc
 8003c54:	200010db 	.word	0x200010db
 8003c58:	200019c0 	.word	0x200019c0
 8003c5c:	20001858 	.word	0x20001858
 8003c60:	2000186c 	.word	0x2000186c
 8003c64:	200010d9 	.word	0x200010d9
 8003c68:	20001a38 	.word	0x20001a38

08003c6c <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	@ 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003c74:	220a      	movs	r2, #10
 8003c76:	491c      	ldr	r1, [pc, #112]	@ (8003ce8 <displayCycleOnLCD+0x7c>)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f009 faed 	bl	800d258 <itoa>

    int length = strlen(snum);
 8003c7e:	481a      	ldr	r0, [pc, #104]	@ (8003ce8 <displayCycleOnLCD+0x7c>)
 8003c80:	f7fc fad0 	bl	8000224 <strlen>
 8003c84:	4603      	mov	r3, r0
 8003c86:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f1c3 0310 	rsb	r3, r3, #16
 8003c8e:	0fda      	lsrs	r2, r3, #31
 8003c90:	4413      	add	r3, r2
 8003c92:	105b      	asrs	r3, r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f009 fbec 	bl	800d47c <memset>
    displayLine[16] = '\0'; // Null terminator
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cac:	e00d      	b.n	8003cca <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	4413      	add	r3, r2
 8003cb4:	490c      	ldr	r1, [pc, #48]	@ (8003ce8 <displayCycleOnLCD+0x7c>)
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	440a      	add	r2, r1
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	3328      	adds	r3, #40	@ 0x28
 8003cbe:	443b      	add	r3, r7
 8003cc0:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dbed      	blt.n	8003cae <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2101      	movs	r1, #1
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f004 fef8 	bl	8008ad0 <lcd_print>
}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	2000105c 	.word	0x2000105c

08003cec <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <lcdUpdate+0xa4>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	2002      	movs	r0, #2
 8003d02:	f004 fee5 	bl	8008ad0 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003d06:	e03e      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d105      	bne.n	8003d1a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003d0e:	4a20      	ldr	r2, [pc, #128]	@ (8003d90 <lcdUpdate+0xa4>)
 8003d10:	2102      	movs	r1, #2
 8003d12:	2002      	movs	r0, #2
 8003d14:	f004 fedc 	bl	8008ad0 <lcd_print>
}
 8003d18:	e035      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d105      	bne.n	8003d2c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003d20:	4a1b      	ldr	r2, [pc, #108]	@ (8003d90 <lcdUpdate+0xa4>)
 8003d22:	2103      	movs	r1, #3
 8003d24:	2002      	movs	r0, #2
 8003d26:	f004 fed3 	bl	8008ad0 <lcd_print>
}
 8003d2a:	e02c      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d105      	bne.n	8003d3e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003d32:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <lcdUpdate+0xa4>)
 8003d34:	2104      	movs	r1, #4
 8003d36:	2002      	movs	r0, #2
 8003d38:	f004 feca 	bl	8008ad0 <lcd_print>
}
 8003d3c:	e023      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d105      	bne.n	8003d50 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003d44:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <lcdUpdate+0xa4>)
 8003d46:	2105      	movs	r1, #5
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f004 fec1 	bl	8008ad0 <lcd_print>
}
 8003d4e:	e01a      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d105      	bne.n	8003d62 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003d56:	4a0e      	ldr	r2, [pc, #56]	@ (8003d90 <lcdUpdate+0xa4>)
 8003d58:	2106      	movs	r1, #6
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	f004 feb8 	bl	8008ad0 <lcd_print>
}
 8003d60:	e011      	b.n	8003d86 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	d10e      	bne.n	8003d86 <lcdUpdate+0x9a>
		lcd_clear();
 8003d68:	f004 fede 	bl	8008b28 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003d6c:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <lcdUpdate+0xa8>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	2001      	movs	r0, #1
 8003d72:	f004 fead 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <lcdUpdate+0xac>)
 8003d78:	2101      	movs	r1, #1
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f004 fea8 	bl	8008ad0 <lcd_print>
		HAL_Delay(10);
 8003d80:	200a      	movs	r0, #10
 8003d82:	f005 fc11 	bl	80095a8 <HAL_Delay>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	0800e89c 	.word	0x0800e89c
 8003d94:	200000c4 	.word	0x200000c4
 8003d98:	200000d8 	.word	0x200000d8

08003d9c <checkLCDBacklight>:

void checkLCDBacklight() {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8003da0:	4b07      	ldr	r3, [pc, #28]	@ (8003dc0 <checkLCDBacklight+0x24>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <checkLCDBacklight+0x28>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b3b      	cmp	r3, #59	@ 0x3b
 8003dac:	d903      	bls.n	8003db6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f004 feda 	bl	8008b68 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003db4:	e002      	b.n	8003dbc <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f004 fed6 	bl	8008b68 <lcd_backlight>
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20001094 	.word	0x20001094
 8003dc4:	200010b0 	.word	0x200010b0

08003dc8 <bekle>:

void bekle() {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	timer1=millis;
 8003dcc:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <bekle+0x124>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a47      	ldr	r2, [pc, #284]	@ (8003ef0 <bekle+0x128>)
 8003dd2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dd4:	e002      	b.n	8003ddc <bekle+0x14>
    	butonKontrol = 1;
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <bekle+0x12c>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4846      	ldr	r0, [pc, #280]	@ (8003ef8 <bekle+0x130>)
 8003de0:	f006 f9b2 	bl	800a148 <HAL_GPIO_ReadPin>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d109      	bne.n	8003dfe <bekle+0x36>
 8003dea:	4b40      	ldr	r3, [pc, #256]	@ (8003eec <bekle+0x124>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b40      	ldr	r3, [pc, #256]	@ (8003ef0 <bekle+0x128>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d0ef      	beq.n	8003dd6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df6:	e002      	b.n	8003dfe <bekle+0x36>
    	butonKontrol = 1;
 8003df8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef4 <bekle+0x12c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dfe:	2108      	movs	r1, #8
 8003e00:	483e      	ldr	r0, [pc, #248]	@ (8003efc <bekle+0x134>)
 8003e02:	f006 f9a1 	bl	800a148 <HAL_GPIO_ReadPin>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d109      	bne.n	8003e20 <bekle+0x58>
 8003e0c:	4b37      	ldr	r3, [pc, #220]	@ (8003eec <bekle+0x124>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <bekle+0x128>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d0ef      	beq.n	8003df8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e18:	e002      	b.n	8003e20 <bekle+0x58>
    	butonKontrol = 1;
 8003e1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <bekle+0x12c>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e20:	2102      	movs	r1, #2
 8003e22:	4835      	ldr	r0, [pc, #212]	@ (8003ef8 <bekle+0x130>)
 8003e24:	f006 f990 	bl	800a148 <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d109      	bne.n	8003e42 <bekle+0x7a>
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <bekle+0x124>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <bekle+0x128>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d0ef      	beq.n	8003e1a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e3a:	e002      	b.n	8003e42 <bekle+0x7a>
    	butonKontrol = 1;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <bekle+0x12c>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e42:	2104      	movs	r1, #4
 8003e44:	482c      	ldr	r0, [pc, #176]	@ (8003ef8 <bekle+0x130>)
 8003e46:	f006 f97f 	bl	800a148 <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d109      	bne.n	8003e64 <bekle+0x9c>
 8003e50:	4b26      	ldr	r3, [pc, #152]	@ (8003eec <bekle+0x124>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b26      	ldr	r3, [pc, #152]	@ (8003ef0 <bekle+0x128>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0ef      	beq.n	8003e3c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e5c:	e002      	b.n	8003e64 <bekle+0x9c>
    	butonKontrol = 1;
 8003e5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <bekle+0x12c>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e64:	2108      	movs	r1, #8
 8003e66:	4824      	ldr	r0, [pc, #144]	@ (8003ef8 <bekle+0x130>)
 8003e68:	f006 f96e 	bl	800a148 <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d109      	bne.n	8003e86 <bekle+0xbe>
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <bekle+0x124>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <bekle+0x128>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d0ef      	beq.n	8003e5e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e7e:	e002      	b.n	8003e86 <bekle+0xbe>
    	butonKontrol = 1;
 8003e80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef4 <bekle+0x12c>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	481c      	ldr	r0, [pc, #112]	@ (8003efc <bekle+0x134>)
 8003e8a:	f006 f95d 	bl	800a148 <HAL_GPIO_ReadPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <bekle+0xe0>
 8003e94:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <bekle+0x124>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <bekle+0x128>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d0ef      	beq.n	8003e80 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ea0:	e002      	b.n	8003ea8 <bekle+0xe0>
    	butonKontrol = 1;
 8003ea2:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <bekle+0x12c>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003eac:	4813      	ldr	r0, [pc, #76]	@ (8003efc <bekle+0x134>)
 8003eae:	f006 f94b 	bl	800a148 <HAL_GPIO_ReadPin>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <bekle+0x104>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <bekle+0x124>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <bekle+0x128>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0ee      	beq.n	8003ea2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ec4:	e002      	b.n	8003ecc <bekle+0x104>
    	butonKontrol = 1;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <bekle+0x12c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ed0:	480a      	ldr	r0, [pc, #40]	@ (8003efc <bekle+0x134>)
 8003ed2:	f006 f939 	bl	800a148 <HAL_GPIO_ReadPin>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d105      	bne.n	8003ee8 <bekle+0x120>
 8003edc:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <bekle+0x124>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <bekle+0x128>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d0ee      	beq.n	8003ec6 <bekle+0xfe>
    }

}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20001094 	.word	0x20001094
 8003ef0:	2000109c 	.word	0x2000109c
 8003ef4:	200010eb 	.word	0x200010eb
 8003ef8:	40010800 	.word	0x40010800
 8003efc:	40011000 	.word	0x40011000

08003f00 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003f04:	2101      	movs	r1, #1
 8003f06:	4815      	ldr	r0, [pc, #84]	@ (8003f5c <buttonCheck+0x5c>)
 8003f08:	f006 f91e 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d01b      	beq.n	8003f4a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003f12:	2108      	movs	r1, #8
 8003f14:	4812      	ldr	r0, [pc, #72]	@ (8003f60 <buttonCheck+0x60>)
 8003f16:	f006 f917 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d014      	beq.n	8003f4a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003f20:	2102      	movs	r1, #2
 8003f22:	480e      	ldr	r0, [pc, #56]	@ (8003f5c <buttonCheck+0x5c>)
 8003f24:	f006 f910 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d00d      	beq.n	8003f4a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003f2e:	2104      	movs	r1, #4
 8003f30:	480a      	ldr	r0, [pc, #40]	@ (8003f5c <buttonCheck+0x5c>)
 8003f32:	f006 f909 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d006      	beq.n	8003f4a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	4807      	ldr	r0, [pc, #28]	@ (8003f5c <buttonCheck+0x5c>)
 8003f40:	f006 f902 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d104      	bne.n	8003f54 <buttonCheck+0x54>
		backLightTimer = 0;
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <buttonCheck+0x64>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
		return 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <buttonCheck+0x56>
	}
	return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40010800 	.word	0x40010800
 8003f60:	40011000 	.word	0x40011000
 8003f64:	200010b0 	.word	0x200010b0

08003f68 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003f6c:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <checkBasincSalteri+0x54>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <checkBasincSalteri+0x12>
		basincVar=1;
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <checkBasincSalteri+0x58>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003f7a:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <checkBasincSalteri+0x54>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d119      	bne.n	8003fb6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f86:	480f      	ldr	r0, [pc, #60]	@ (8003fc4 <checkBasincSalteri+0x5c>)
 8003f88:	f006 f8de 	bl	800a148 <HAL_GPIO_ReadPin>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <checkBasincSalteri+0x60>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <checkBasincSalteri+0x64>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d90a      	bls.n	8003fb6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <checkBasincSalteri+0x58>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003fa6:	e006      	b.n	8003fb6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <checkBasincSalteri+0x60>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a07      	ldr	r2, [pc, #28]	@ (8003fcc <checkBasincSalteri+0x64>)
 8003fae:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <checkBasincSalteri+0x58>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200010c3 	.word	0x200010c3
 8003fc0:	200010bf 	.word	0x200010bf
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	20001094 	.word	0x20001094
 8003fcc:	200010ac 	.word	0x200010ac

08003fd0 <checkBasGonder>:

void checkBasGonder() {
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <checkBasGonder+0x74>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10b      	bne.n	8003ff4 <checkBasGonder+0x24>
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <checkBasGonder+0x78>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <checkBasGonder+0x24>
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <checkBasGonder+0x7c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <checkBasGonder+0x80>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e009      	b.n	8004008 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003ff4:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <checkBasGonder+0x78>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004002:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <checkBasGonder+0x80>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004008:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <checkBasGonder+0x74>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10b      	bne.n	8004028 <checkBasGonder+0x58>
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <checkBasGonder+0x84>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <checkBasGonder+0x58>
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <checkBasGonder+0x7c>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004020:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <checkBasGonder+0x88>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004026:	e009      	b.n	800403c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004028:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <checkBasGonder+0x84>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <checkBasGonder+0x88>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	200010bd 	.word	0x200010bd
 8004048:	200010f1 	.word	0x200010f1
 800404c:	200010cb 	.word	0x200010cb
 8004050:	200010f8 	.word	0x200010f8
 8004054:	200010f4 	.word	0x200010f4
 8004058:	200010f9 	.word	0x200010f9

0800405c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004060:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <checkKapiSecimleri+0x98>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004068:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800406e:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <checkKapiSecimleri+0x98>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10e      	bne.n	8004094 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800407a:	4820      	ldr	r0, [pc, #128]	@ (80040fc <checkKapiSecimleri+0xa0>)
 800407c:	f006 f864 	bl	800a148 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004086:	4b1c      	ldr	r3, [pc, #112]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e002      	b.n	8004094 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800408e:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004094:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <checkKapiSecimleri+0x98>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d10e      	bne.n	80040ba <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800409c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040a0:	4816      	ldr	r0, [pc, #88]	@ (80040fc <checkKapiSecimleri+0xa0>)
 80040a2:	f006 f851 	bl	800a148 <HAL_GPIO_ReadPin>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80040ac:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e002      	b.n	80040ba <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80040b4:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <checkKapiSecimleri+0x98>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d116      	bne.n	80040f0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80040c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040c6:	480d      	ldr	r0, [pc, #52]	@ (80040fc <checkKapiSecimleri+0xa0>)
 80040c8:	f006 f83e 	bl	800a148 <HAL_GPIO_ReadPin>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <checkKapiSecimleri+0x8e>
 80040d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040d6:	4809      	ldr	r0, [pc, #36]	@ (80040fc <checkKapiSecimleri+0xa0>)
 80040d8:	f006 f836 	bl	800a148 <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80040e8:	e002      	b.n	80040f0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80040ea:	4b03      	ldr	r3, [pc, #12]	@ (80040f8 <checkKapiSecimleri+0x9c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200010c4 	.word	0x200010c4
 80040f8:	2000110e 	.word	0x2000110e
 80040fc:	40010800 	.word	0x40010800

08004100 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004104:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <checkAktifCalisma+0x1a0>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f041 8343 	bne.w	8005794 <checkAktifCalisma+0x1694>
 800410e:	4b65      	ldr	r3, [pc, #404]	@ (80042a4 <checkAktifCalisma+0x1a4>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f041 833e 	bne.w	8005794 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004118:	4b63      	ldr	r3, [pc, #396]	@ (80042a8 <checkAktifCalisma+0x1a8>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11a      	bne.n	8004156 <checkAktifCalisma+0x56>
 8004120:	4b62      	ldr	r3, [pc, #392]	@ (80042ac <checkAktifCalisma+0x1ac>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <checkAktifCalisma+0x56>
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <checkAktifCalisma+0x1b0>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <checkAktifCalisma+0x46>
 8004130:	4b60      	ldr	r3, [pc, #384]	@ (80042b4 <checkAktifCalisma+0x1b4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <checkAktifCalisma+0x46>
 800413e:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <checkAktifCalisma+0x1b8>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d007      	beq.n	8004156 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004146:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <checkAktifCalisma+0x1bc>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01c      	beq.n	8004188 <checkAktifCalisma+0x88>
 800414e:	4b5c      	ldr	r3, [pc, #368]	@ (80042c0 <checkAktifCalisma+0x1c0>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d118      	bne.n	8004188 <checkAktifCalisma+0x88>
 8004156:	4b5b      	ldr	r3, [pc, #364]	@ (80042c4 <checkAktifCalisma+0x1c4>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <checkAktifCalisma+0x66>
 800415e:	4b5a      	ldr	r3, [pc, #360]	@ (80042c8 <checkAktifCalisma+0x1c8>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d010      	beq.n	8004188 <checkAktifCalisma+0x88>
 8004166:	4b59      	ldr	r3, [pc, #356]	@ (80042cc <checkAktifCalisma+0x1cc>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800416e:	2201      	movs	r2, #1
 8004170:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004174:	4856      	ldr	r0, [pc, #344]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 8004176:	f005 fffe 	bl	800a176 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800417a:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <checkAktifCalisma+0x1d4>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004180:	4b55      	ldr	r3, [pc, #340]	@ (80042d8 <checkAktifCalisma+0x1d8>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e008      	b.n	800419a <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004188:	2200      	movs	r2, #0
 800418a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800418e:	4850      	ldr	r0, [pc, #320]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 8004190:	f005 fff1 	bl	800a176 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004194:	4b4f      	ldr	r3, [pc, #316]	@ (80042d4 <checkAktifCalisma+0x1d4>)
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800419a:	4b42      	ldr	r3, [pc, #264]	@ (80042a4 <checkAktifCalisma+0x1a4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d164      	bne.n	800426c <checkAktifCalisma+0x16c>
 80041a2:	4b49      	ldr	r3, [pc, #292]	@ (80042c8 <checkAktifCalisma+0x1c8>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <checkAktifCalisma+0xb2>
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <checkAktifCalisma+0x1c4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d05c      	beq.n	800426c <checkAktifCalisma+0x16c>
 80041b2:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <checkAktifCalisma+0x1cc>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d058      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80041ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041be:	4844      	ldr	r0, [pc, #272]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 80041c0:	f005 ffc2 	bl	800a148 <HAL_GPIO_ReadPin>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <checkAktifCalisma+0xd2>
 80041ca:	4b44      	ldr	r3, [pc, #272]	@ (80042dc <checkAktifCalisma+0x1dc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04c      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80041d2:	2102      	movs	r1, #2
 80041d4:	4842      	ldr	r0, [pc, #264]	@ (80042e0 <checkAktifCalisma+0x1e0>)
 80041d6:	f005 ffb7 	bl	800a148 <HAL_GPIO_ReadPin>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d145      	bne.n	800426c <checkAktifCalisma+0x16c>
							&& (basincVar)
 80041e0:	4b40      	ldr	r3, [pc, #256]	@ (80042e4 <checkAktifCalisma+0x1e4>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d041      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80041e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ec:	4838      	ldr	r0, [pc, #224]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 80041ee:	f005 ffab 	bl	800a148 <HAL_GPIO_ReadPin>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10e      	bne.n	8004216 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80041f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041fc:	4834      	ldr	r0, [pc, #208]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 80041fe:	f005 ffa3 	bl	800a148 <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004208:	2140      	movs	r1, #64	@ 0x40
 800420a:	4835      	ldr	r0, [pc, #212]	@ (80042e0 <checkAktifCalisma+0x1e0>)
 800420c:	f005 ff9c 	bl	800a148 <HAL_GPIO_ReadPin>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d003      	beq.n	800421e <checkAktifCalisma+0x11e>
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <checkAktifCalisma+0x1a8>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d026      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800421e:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <checkAktifCalisma+0x1b0>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f083 0301 	eor.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01f      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 800422c:	4b1f      	ldr	r3, [pc, #124]	@ (80042ac <checkAktifCalisma+0x1ac>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f083 0301 	eor.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <checkAktifCalisma+0x1bc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f083 0301 	eor.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004248:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <checkAktifCalisma+0x1e8>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004256:	4b25      	ldr	r3, [pc, #148]	@ (80042ec <checkAktifCalisma+0x1ec>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004264:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <checkAktifCalisma+0x1a8>)
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e002      	b.n	8004272 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <checkAktifCalisma+0x1a8>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <checkAktifCalisma+0x1a8>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03c      	beq.n	80042f4 <checkAktifCalisma+0x1f4>
 800427a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800427e:	4818      	ldr	r0, [pc, #96]	@ (80042e0 <checkAktifCalisma+0x1e0>)
 8004280:	f005 ff62 	bl	800a148 <HAL_GPIO_ReadPin>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d134      	bne.n	80042f4 <checkAktifCalisma+0x1f4>
 800428a:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <checkAktifCalisma+0x1f0>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d030      	beq.n	80042f4 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004292:	2201      	movs	r2, #1
 8004294:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004298:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <checkAktifCalisma+0x1d0>)
 800429a:	f005 ff6c 	bl	800a176 <HAL_GPIO_WritePin>
 800429e:	e02f      	b.n	8004300 <checkAktifCalisma+0x200>
 80042a0:	200010da 	.word	0x200010da
 80042a4:	200010d9 	.word	0x200010d9
 80042a8:	200010f1 	.word	0x200010f1
 80042ac:	200010f2 	.word	0x200010f2
 80042b0:	200010f4 	.word	0x200010f4
 80042b4:	200010ec 	.word	0x200010ec
 80042b8:	200010cf 	.word	0x200010cf
 80042bc:	200010f3 	.word	0x200010f3
 80042c0:	200010ce 	.word	0x200010ce
 80042c4:	2000110d 	.word	0x2000110d
 80042c8:	20001120 	.word	0x20001120
 80042cc:	2000110e 	.word	0x2000110e
 80042d0:	40010c00 	.word	0x40010c00
 80042d4:	2000110f 	.word	0x2000110f
 80042d8:	200010fb 	.word	0x200010fb
 80042dc:	200010f8 	.word	0x200010f8
 80042e0:	40011000 	.word	0x40011000
 80042e4:	200010bf 	.word	0x200010bf
 80042e8:	200010f6 	.word	0x200010f6
 80042ec:	200010f7 	.word	0x200010f7
 80042f0:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042fa:	4865      	ldr	r0, [pc, #404]	@ (8004490 <checkAktifCalisma+0x390>)
 80042fc:	f005 ff3b 	bl	800a176 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004300:	4b64      	ldr	r3, [pc, #400]	@ (8004494 <checkAktifCalisma+0x394>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <checkAktifCalisma+0x230>
 8004308:	4b63      	ldr	r3, [pc, #396]	@ (8004498 <checkAktifCalisma+0x398>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <checkAktifCalisma+0x220>
 8004310:	4b61      	ldr	r3, [pc, #388]	@ (8004498 <checkAktifCalisma+0x398>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d003      	beq.n	8004320 <checkAktifCalisma+0x220>
 8004318:	4b60      	ldr	r3, [pc, #384]	@ (800449c <checkAktifCalisma+0x39c>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004320:	2201      	movs	r2, #1
 8004322:	2104      	movs	r1, #4
 8004324:	485a      	ldr	r0, [pc, #360]	@ (8004490 <checkAktifCalisma+0x390>)
 8004326:	f005 ff26 	bl	800a176 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800432a:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <checkAktifCalisma+0x3a0>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004330:	4b5b      	ldr	r3, [pc, #364]	@ (80044a0 <checkAktifCalisma+0x3a0>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d033      	beq.n	80043a0 <checkAktifCalisma+0x2a0>
 8004338:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800433c:	4854      	ldr	r0, [pc, #336]	@ (8004490 <checkAktifCalisma+0x390>)
 800433e:	f005 ff03 	bl	800a148 <HAL_GPIO_ReadPin>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <checkAktifCalisma+0x256>
 8004348:	4b56      	ldr	r3, [pc, #344]	@ (80044a4 <checkAktifCalisma+0x3a4>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f083 0301 	eor.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <checkAktifCalisma+0x264>
 8004356:	2102      	movs	r1, #2
 8004358:	4853      	ldr	r0, [pc, #332]	@ (80044a8 <checkAktifCalisma+0x3a8>)
 800435a:	f005 fef5 	bl	800a148 <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d11d      	bne.n	80043a0 <checkAktifCalisma+0x2a0>
 8004364:	4b51      	ldr	r3, [pc, #324]	@ (80044ac <checkAktifCalisma+0x3ac>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <checkAktifCalisma+0x274>
 800436c:	4b50      	ldr	r3, [pc, #320]	@ (80044b0 <checkAktifCalisma+0x3b0>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <checkAktifCalisma+0x2a0>
 8004374:	4b4f      	ldr	r3, [pc, #316]	@ (80044b4 <checkAktifCalisma+0x3b4>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <checkAktifCalisma+0x2a0>
 800437c:	4b4e      	ldr	r3, [pc, #312]	@ (80044b8 <checkAktifCalisma+0x3b8>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <checkAktifCalisma+0x2a0>
 8004384:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <checkAktifCalisma+0x3bc>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f083 0301 	eor.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d006      	beq.n	80043a0 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004392:	4b4b      	ldr	r3, [pc, #300]	@ (80044c0 <checkAktifCalisma+0x3c0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a4b      	ldr	r2, [pc, #300]	@ (80044c4 <checkAktifCalisma+0x3c4>)
 8004398:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800439a:	4b48      	ldr	r3, [pc, #288]	@ (80044bc <checkAktifCalisma+0x3bc>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80043a0:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <checkAktifCalisma+0x3c0>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <checkAktifCalisma+0x3c4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <checkAktifCalisma+0x3c8>)
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d303      	bcc.n	80043ba <checkAktifCalisma+0x2ba>
 80043b2:	4b42      	ldr	r3, [pc, #264]	@ (80044bc <checkAktifCalisma+0x3bc>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <checkAktifCalisma+0x2ec>
 80043ba:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <checkAktifCalisma+0x3ac>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f083 0301 	eor.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <checkAktifCalisma+0x2d6>
 80043c8:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <checkAktifCalisma+0x3b0>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f083 0301 	eor.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <checkAktifCalisma+0x2ec>
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <checkAktifCalisma+0x3b4>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	f083 0301 	eor.w	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <checkAktifCalisma+0x2ec>
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <checkAktifCalisma+0x3b8>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80043ec:	2200      	movs	r2, #0
 80043ee:	2104      	movs	r1, #4
 80043f0:	4827      	ldr	r0, [pc, #156]	@ (8004490 <checkAktifCalisma+0x390>)
 80043f2:	f005 fec0 	bl	800a176 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80043f6:	4b2a      	ldr	r3, [pc, #168]	@ (80044a0 <checkAktifCalisma+0x3a0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80043fc:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <checkAktifCalisma+0x3bc>)
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8004402:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <checkAktifCalisma+0x3cc>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <checkAktifCalisma+0x310>
					cerceveVar=1;
 800440a:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <checkAktifCalisma+0x3d0>)
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004410:	4b2e      	ldr	r3, [pc, #184]	@ (80044cc <checkAktifCalisma+0x3cc>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d116      	bne.n	8004446 <checkAktifCalisma+0x346>
 8004418:	4b2e      	ldr	r3, [pc, #184]	@ (80044d4 <checkAktifCalisma+0x3d4>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d112      	bne.n	8004446 <checkAktifCalisma+0x346>
 8004420:	2101      	movs	r1, #1
 8004422:	4821      	ldr	r0, [pc, #132]	@ (80044a8 <checkAktifCalisma+0x3a8>)
 8004424:	f005 fe90 	bl	800a148 <HAL_GPIO_ReadPin>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <checkAktifCalisma+0x346>
 800442e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004432:	4817      	ldr	r0, [pc, #92]	@ (8004490 <checkAktifCalisma+0x390>)
 8004434:	f005 fe88 	bl	800a148 <HAL_GPIO_ReadPin>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <checkAktifCalisma+0x3d0>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e011      	b.n	800446a <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004446:	4b21      	ldr	r3, [pc, #132]	@ (80044cc <checkAktifCalisma+0x3cc>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10d      	bne.n	800446a <checkAktifCalisma+0x36a>
 800444e:	2101      	movs	r1, #1
 8004450:	4815      	ldr	r0, [pc, #84]	@ (80044a8 <checkAktifCalisma+0x3a8>)
 8004452:	f005 fe79 	bl	800a148 <HAL_GPIO_ReadPin>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <checkAktifCalisma+0x36a>
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <checkAktifCalisma+0x3d4>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004464:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <checkAktifCalisma+0x3d0>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800446a:	4b18      	ldr	r3, [pc, #96]	@ (80044cc <checkAktifCalisma+0x3cc>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d135      	bne.n	80044de <checkAktifCalisma+0x3de>
 8004472:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <checkAktifCalisma+0x3d4>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d131      	bne.n	80044de <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800447a:	2101      	movs	r1, #1
 800447c:	480a      	ldr	r0, [pc, #40]	@ (80044a8 <checkAktifCalisma+0x3a8>)
 800447e:	f005 fe63 	bl	800a148 <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d127      	bne.n	80044d8 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004488:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <checkAktifCalisma+0x3d0>)
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e026      	b.n	80044de <checkAktifCalisma+0x3de>
 8004490:	40010c00 	.word	0x40010c00
 8004494:	200010f1 	.word	0x200010f1
 8004498:	200010cb 	.word	0x200010cb
 800449c:	200010cf 	.word	0x200010cf
 80044a0:	200010f5 	.word	0x200010f5
 80044a4:	200010f8 	.word	0x200010f8
 80044a8:	40011000 	.word	0x40011000
 80044ac:	2000110d 	.word	0x2000110d
 80044b0:	20001120 	.word	0x20001120
 80044b4:	2000110e 	.word	0x2000110e
 80044b8:	200010bf 	.word	0x200010bf
 80044bc:	200010ed 	.word	0x200010ed
 80044c0:	20001094 	.word	0x20001094
 80044c4:	200010a0 	.word	0x200010a0
 80044c8:	200010d0 	.word	0x200010d0
 80044cc:	200010c0 	.word	0x200010c0
 80044d0:	20001112 	.word	0x20001112
 80044d4:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 80044d8:	4b7f      	ldr	r3, [pc, #508]	@ (80046d8 <checkAktifCalisma+0x5d8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80044de:	4b7f      	ldr	r3, [pc, #508]	@ (80046dc <checkAktifCalisma+0x5dc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d17c      	bne.n	80045e0 <checkAktifCalisma+0x4e0>
 80044e6:	4b7e      	ldr	r3, [pc, #504]	@ (80046e0 <checkAktifCalisma+0x5e0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d078      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
 80044ee:	4b7d      	ldr	r3, [pc, #500]	@ (80046e4 <checkAktifCalisma+0x5e4>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d074      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80044f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044fa:	487b      	ldr	r0, [pc, #492]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 80044fc:	f005 fe24 	bl	800a148 <HAL_GPIO_ReadPin>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <checkAktifCalisma+0x40e>
 8004506:	4b79      	ldr	r3, [pc, #484]	@ (80046ec <checkAktifCalisma+0x5ec>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d068      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800450e:	4b72      	ldr	r3, [pc, #456]	@ (80046d8 <checkAktifCalisma+0x5d8>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d064      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <checkAktifCalisma+0x5f0>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05d      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004524:	2104      	movs	r1, #4
 8004526:	4873      	ldr	r0, [pc, #460]	@ (80046f4 <checkAktifCalisma+0x5f4>)
 8004528:	f005 fe0e 	bl	800a148 <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <checkAktifCalisma+0x43a>
 8004532:	4b71      	ldr	r3, [pc, #452]	@ (80046f8 <checkAktifCalisma+0x5f8>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d152      	bne.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800453a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800453e:	486a      	ldr	r0, [pc, #424]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 8004540:	f005 fe02 	bl	800a148 <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10e      	bne.n	8004568 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800454a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800454e:	4866      	ldr	r0, [pc, #408]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 8004550:	f005 fdfa 	bl	800a148 <HAL_GPIO_ReadPin>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d106      	bne.n	8004568 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800455a:	2140      	movs	r1, #64	@ 0x40
 800455c:	4865      	ldr	r0, [pc, #404]	@ (80046f4 <checkAktifCalisma+0x5f4>)
 800455e:	f005 fdf3 	bl	800a148 <HAL_GPIO_ReadPin>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d003      	beq.n	8004570 <checkAktifCalisma+0x470>
 8004568:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <checkAktifCalisma+0x5fc>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d037      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004570:	4b63      	ldr	r3, [pc, #396]	@ (8004700 <checkAktifCalisma+0x600>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d030      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800457e:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <checkAktifCalisma+0x604>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f083 0301 	eor.w	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d029      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 800458c:	4b5e      	ldr	r3, [pc, #376]	@ (8004708 <checkAktifCalisma+0x608>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f083 0301 	eor.w	r3, r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d022      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800459a:	4b5c      	ldr	r3, [pc, #368]	@ (800470c <checkAktifCalisma+0x60c>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80045a8:	4b59      	ldr	r3, [pc, #356]	@ (8004710 <checkAktifCalisma+0x610>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d014      	beq.n	80045e0 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80045b6:	4b57      	ldr	r3, [pc, #348]	@ (8004714 <checkAktifCalisma+0x614>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80045c4:	2201      	movs	r2, #1
 80045c6:	2102      	movs	r1, #2
 80045c8:	4847      	ldr	r0, [pc, #284]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 80045ca:	f005 fdd4 	bl	800a176 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80045ce:	4b4b      	ldr	r3, [pc, #300]	@ (80046fc <checkAktifCalisma+0x5fc>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <checkAktifCalisma+0x618>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80045da:	4b50      	ldr	r3, [pc, #320]	@ (800471c <checkAktifCalisma+0x61c>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80045e0:	4b46      	ldr	r3, [pc, #280]	@ (80046fc <checkAktifCalisma+0x5fc>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d033      	beq.n	8004650 <checkAktifCalisma+0x550>
 80045e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045ec:	483e      	ldr	r0, [pc, #248]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 80045ee:	f005 fdab 	bl	800a148 <HAL_GPIO_ReadPin>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <checkAktifCalisma+0x506>
 80045f8:	4b3c      	ldr	r3, [pc, #240]	@ (80046ec <checkAktifCalisma+0x5ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f083 0301 	eor.w	r3, r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <checkAktifCalisma+0x51c>
 8004606:	2104      	movs	r1, #4
 8004608:	483a      	ldr	r0, [pc, #232]	@ (80046f4 <checkAktifCalisma+0x5f4>)
 800460a:	f005 fd9d 	bl	800a148 <HAL_GPIO_ReadPin>
 800460e:	4603      	mov	r3, r0
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11d      	bne.n	8004650 <checkAktifCalisma+0x550>
 8004614:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <checkAktifCalisma+0x5f8>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d019      	beq.n	8004650 <checkAktifCalisma+0x550>
 800461c:	4b30      	ldr	r3, [pc, #192]	@ (80046e0 <checkAktifCalisma+0x5e0>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d015      	beq.n	8004650 <checkAktifCalisma+0x550>
 8004624:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <checkAktifCalisma+0x5e4>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <checkAktifCalisma+0x550>
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <checkAktifCalisma+0x5d8>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <checkAktifCalisma+0x550>
 8004634:	4b3a      	ldr	r3, [pc, #232]	@ (8004720 <checkAktifCalisma+0x620>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f083 0301 	eor.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <checkAktifCalisma+0x550>
					timer2=millis;
 8004642:	4b38      	ldr	r3, [pc, #224]	@ (8004724 <checkAktifCalisma+0x624>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a38      	ldr	r2, [pc, #224]	@ (8004728 <checkAktifCalisma+0x628>)
 8004648:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800464a:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <checkAktifCalisma+0x620>)
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004650:	4b34      	ldr	r3, [pc, #208]	@ (8004724 <checkAktifCalisma+0x624>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b34      	ldr	r3, [pc, #208]	@ (8004728 <checkAktifCalisma+0x628>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	4a34      	ldr	r2, [pc, #208]	@ (800472c <checkAktifCalisma+0x62c>)
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	4293      	cmp	r3, r2
 8004660:	d303      	bcc.n	800466a <checkAktifCalisma+0x56a>
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <checkAktifCalisma+0x620>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d114      	bne.n	8004694 <checkAktifCalisma+0x594>
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <checkAktifCalisma+0x5e0>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10d      	bne.n	8004694 <checkAktifCalisma+0x594>
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <checkAktifCalisma+0x5e4>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f083 0301 	eor.w	r3, r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <checkAktifCalisma+0x594>
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <checkAktifCalisma+0x5d8>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f083 0301 	eor.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004694:	2200      	movs	r2, #0
 8004696:	2102      	movs	r1, #2
 8004698:	4813      	ldr	r0, [pc, #76]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 800469a:	f005 fd6c 	bl	800a176 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800469e:	4b17      	ldr	r3, [pc, #92]	@ (80046fc <checkAktifCalisma+0x5fc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004720 <checkAktifCalisma+0x620>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80046aa:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <checkAktifCalisma+0x5fc>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d040      	beq.n	8004734 <checkAktifCalisma+0x634>
 80046b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046b6:	480f      	ldr	r0, [pc, #60]	@ (80046f4 <checkAktifCalisma+0x5f4>)
 80046b8:	f005 fd46 	bl	800a148 <HAL_GPIO_ReadPin>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d138      	bne.n	8004734 <checkAktifCalisma+0x634>
 80046c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <checkAktifCalisma+0x630>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d034      	beq.n	8004734 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80046ca:	2201      	movs	r2, #1
 80046cc:	2101      	movs	r1, #1
 80046ce:	4806      	ldr	r0, [pc, #24]	@ (80046e8 <checkAktifCalisma+0x5e8>)
 80046d0:	f005 fd51 	bl	800a176 <HAL_GPIO_WritePin>
 80046d4:	e033      	b.n	800473e <checkAktifCalisma+0x63e>
 80046d6:	bf00      	nop
 80046d8:	20001112 	.word	0x20001112
 80046dc:	200010d9 	.word	0x200010d9
 80046e0:	2000110d 	.word	0x2000110d
 80046e4:	2000110e 	.word	0x2000110e
 80046e8:	40010c00 	.word	0x40010c00
 80046ec:	200010f9 	.word	0x200010f9
 80046f0:	2000110c 	.word	0x2000110c
 80046f4:	40011000 	.word	0x40011000
 80046f8:	200010c2 	.word	0x200010c2
 80046fc:	200010f4 	.word	0x200010f4
 8004700:	200010f1 	.word	0x200010f1
 8004704:	200010f5 	.word	0x200010f5
 8004708:	200010f2 	.word	0x200010f2
 800470c:	200010f3 	.word	0x200010f3
 8004710:	200010f6 	.word	0x200010f6
 8004714:	200010f7 	.word	0x200010f7
 8004718:	200010fc 	.word	0x200010fc
 800471c:	2000111c 	.word	0x2000111c
 8004720:	200010ec 	.word	0x200010ec
 8004724:	20001094 	.word	0x20001094
 8004728:	200010a0 	.word	0x200010a0
 800472c:	200010d1 	.word	0x200010d1
 8004730:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004734:	2200      	movs	r2, #0
 8004736:	2101      	movs	r1, #1
 8004738:	4836      	ldr	r0, [pc, #216]	@ (8004814 <checkAktifCalisma+0x714>)
 800473a:	f005 fd1c 	bl	800a176 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800473e:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <checkAktifCalisma+0x718>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 8080 	bne.w	8004848 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004748:	4b34      	ldr	r3, [pc, #208]	@ (800481c <checkAktifCalisma+0x71c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d003      	beq.n	8004758 <checkAktifCalisma+0x658>
 8004750:	4b32      	ldr	r3, [pc, #200]	@ (800481c <checkAktifCalisma+0x71c>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d177      	bne.n	8004848 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004758:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <checkAktifCalisma+0x720>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d073      	beq.n	8004848 <checkAktifCalisma+0x748>
 8004760:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <checkAktifCalisma+0x724>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d06f      	beq.n	8004848 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800476c:	4829      	ldr	r0, [pc, #164]	@ (8004814 <checkAktifCalisma+0x714>)
 800476e:	f005 fceb 	bl	800a148 <HAL_GPIO_ReadPin>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d167      	bne.n	8004848 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800477c:	482a      	ldr	r0, [pc, #168]	@ (8004828 <checkAktifCalisma+0x728>)
 800477e:	f005 fce3 	bl	800a148 <HAL_GPIO_ReadPin>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <checkAktifCalisma+0x690>
 8004788:	4b28      	ldr	r3, [pc, #160]	@ (800482c <checkAktifCalisma+0x72c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d15b      	bne.n	8004848 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004790:	2140      	movs	r1, #64	@ 0x40
 8004792:	4825      	ldr	r0, [pc, #148]	@ (8004828 <checkAktifCalisma+0x728>)
 8004794:	f005 fcd8 	bl	800a148 <HAL_GPIO_ReadPin>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10f      	bne.n	80047be <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800479e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047a2:	481c      	ldr	r0, [pc, #112]	@ (8004814 <checkAktifCalisma+0x714>)
 80047a4:	f005 fcd0 	bl	800a148 <HAL_GPIO_ReadPin>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80047ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047b2:	4818      	ldr	r0, [pc, #96]	@ (8004814 <checkAktifCalisma+0x714>)
 80047b4:	f005 fcc8 	bl	800a148 <HAL_GPIO_ReadPin>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d003      	beq.n	80047c6 <checkAktifCalisma+0x6c6>
 80047be:	4b1c      	ldr	r3, [pc, #112]	@ (8004830 <checkAktifCalisma+0x730>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d040      	beq.n	8004848 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80047c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <checkAktifCalisma+0x734>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f083 0301 	eor.w	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d039      	beq.n	8004848 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80047d4:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <checkAktifCalisma+0x738>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f083 0301 	eor.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d032      	beq.n	8004848 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80047e2:	4b16      	ldr	r3, [pc, #88]	@ (800483c <checkAktifCalisma+0x73c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02b      	beq.n	8004848 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80047f0:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <checkAktifCalisma+0x740>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f083 0301 	eor.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d024      	beq.n	8004848 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80047fe:	4b11      	ldr	r3, [pc, #68]	@ (8004844 <checkAktifCalisma+0x744>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01d      	beq.n	8004848 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 800480c:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <checkAktifCalisma+0x730>)
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e01c      	b.n	800484e <checkAktifCalisma+0x74e>
 8004814:	40010c00 	.word	0x40010c00
 8004818:	200010d9 	.word	0x200010d9
 800481c:	200010cb 	.word	0x200010cb
 8004820:	2000110d 	.word	0x2000110d
 8004824:	2000110e 	.word	0x2000110e
 8004828:	40011000 	.word	0x40011000
 800482c:	200010cc 	.word	0x200010cc
 8004830:	200010f2 	.word	0x200010f2
 8004834:	200010f1 	.word	0x200010f1
 8004838:	200010f5 	.word	0x200010f5
 800483c:	200010f4 	.word	0x200010f4
 8004840:	200010f3 	.word	0x200010f3
 8004844:	200010f7 	.word	0x200010f7
				} else {
					devmotoryukaricalisiyor=0;
 8004848:	4b64      	ldr	r3, [pc, #400]	@ (80049dc <checkAktifCalisma+0x8dc>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800484e:	4b63      	ldr	r3, [pc, #396]	@ (80049dc <checkAktifCalisma+0x8dc>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004856:	2201      	movs	r2, #1
 8004858:	2120      	movs	r1, #32
 800485a:	4861      	ldr	r0, [pc, #388]	@ (80049e0 <checkAktifCalisma+0x8e0>)
 800485c:	f005 fc8b 	bl	800a176 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004860:	4b60      	ldr	r3, [pc, #384]	@ (80049e4 <checkAktifCalisma+0x8e4>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004866:	4b5f      	ldr	r3, [pc, #380]	@ (80049e4 <checkAktifCalisma+0x8e4>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d025      	beq.n	80048ba <checkAktifCalisma+0x7ba>
 800486e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004872:	485d      	ldr	r0, [pc, #372]	@ (80049e8 <checkAktifCalisma+0x8e8>)
 8004874:	f005 fc68 	bl	800a148 <HAL_GPIO_ReadPin>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d007      	beq.n	800488e <checkAktifCalisma+0x78e>
 800487e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004882:	4857      	ldr	r0, [pc, #348]	@ (80049e0 <checkAktifCalisma+0x8e0>)
 8004884:	f005 fc60 	bl	800a148 <HAL_GPIO_ReadPin>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d115      	bne.n	80048ba <checkAktifCalisma+0x7ba>
 800488e:	4b57      	ldr	r3, [pc, #348]	@ (80049ec <checkAktifCalisma+0x8ec>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d011      	beq.n	80048ba <checkAktifCalisma+0x7ba>
 8004896:	4b56      	ldr	r3, [pc, #344]	@ (80049f0 <checkAktifCalisma+0x8f0>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <checkAktifCalisma+0x7ba>
 800489e:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <checkAktifCalisma+0x8f4>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f083 0301 	eor.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <checkAktifCalisma+0x7ba>
					timer2=millis;
 80048ac:	4b52      	ldr	r3, [pc, #328]	@ (80049f8 <checkAktifCalisma+0x8f8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <checkAktifCalisma+0x8fc>)
 80048b2:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80048b4:	4b4f      	ldr	r3, [pc, #316]	@ (80049f4 <checkAktifCalisma+0x8f4>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80048ba:	4b4f      	ldr	r3, [pc, #316]	@ (80049f8 <checkAktifCalisma+0x8f8>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b4f      	ldr	r3, [pc, #316]	@ (80049fc <checkAktifCalisma+0x8fc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a00 <checkAktifCalisma+0x900>)
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d303      	bcc.n	80048d4 <checkAktifCalisma+0x7d4>
 80048cc:	4b49      	ldr	r3, [pc, #292]	@ (80049f4 <checkAktifCalisma+0x8f4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10d      	bne.n	80048f0 <checkAktifCalisma+0x7f0>
 80048d4:	4b45      	ldr	r3, [pc, #276]	@ (80049ec <checkAktifCalisma+0x8ec>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f083 0301 	eor.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <checkAktifCalisma+0x7f0>
 80048e2:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <checkAktifCalisma+0x8f0>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f083 0301 	eor.w	r3, r3, #1
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80048f0:	2200      	movs	r2, #0
 80048f2:	2120      	movs	r1, #32
 80048f4:	483a      	ldr	r0, [pc, #232]	@ (80049e0 <checkAktifCalisma+0x8e0>)
 80048f6:	f005 fc3e 	bl	800a176 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80048fa:	4b3a      	ldr	r3, [pc, #232]	@ (80049e4 <checkAktifCalisma+0x8e4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004900:	4b3c      	ldr	r3, [pc, #240]	@ (80049f4 <checkAktifCalisma+0x8f4>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004906:	4b3f      	ldr	r3, [pc, #252]	@ (8004a04 <checkAktifCalisma+0x904>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 8088 	bne.w	8004a20 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004910:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <checkAktifCalisma+0x908>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d003      	beq.n	8004920 <checkAktifCalisma+0x820>
 8004918:	4b3b      	ldr	r3, [pc, #236]	@ (8004a08 <checkAktifCalisma+0x908>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d17f      	bne.n	8004a20 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004920:	4b32      	ldr	r3, [pc, #200]	@ (80049ec <checkAktifCalisma+0x8ec>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d07b      	beq.n	8004a20 <checkAktifCalisma+0x920>
 8004928:	4b31      	ldr	r3, [pc, #196]	@ (80049f0 <checkAktifCalisma+0x8f0>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d077      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004930:	2140      	movs	r1, #64	@ 0x40
 8004932:	482b      	ldr	r0, [pc, #172]	@ (80049e0 <checkAktifCalisma+0x8e0>)
 8004934:	f005 fc08 	bl	800a148 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d170      	bne.n	8004a20 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800493e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004942:	4827      	ldr	r0, [pc, #156]	@ (80049e0 <checkAktifCalisma+0x8e0>)
 8004944:	f005 fc00 	bl	800a148 <HAL_GPIO_ReadPin>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <checkAktifCalisma+0x856>
 800494e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <checkAktifCalisma+0x90c>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d164      	bne.n	8004a20 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004956:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800495a:	4823      	ldr	r0, [pc, #140]	@ (80049e8 <checkAktifCalisma+0x8e8>)
 800495c:	f005 fbf4 	bl	800a148 <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10f      	bne.n	8004986 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004966:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800496a:	481f      	ldr	r0, [pc, #124]	@ (80049e8 <checkAktifCalisma+0x8e8>)
 800496c:	f005 fbec 	bl	800a148 <HAL_GPIO_ReadPin>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800497a:	481b      	ldr	r0, [pc, #108]	@ (80049e8 <checkAktifCalisma+0x8e8>)
 800497c:	f005 fbe4 	bl	800a148 <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b01      	cmp	r3, #1
 8004984:	d003      	beq.n	800498e <checkAktifCalisma+0x88e>
 8004986:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <checkAktifCalisma+0x910>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d048      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 800498e:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <checkAktifCalisma+0x914>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f083 0301 	eor.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d041      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <checkAktifCalisma+0x918>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f083 0301 	eor.w	r3, r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03a      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 80049aa:	4b1c      	ldr	r3, [pc, #112]	@ (8004a1c <checkAktifCalisma+0x91c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d033      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <checkAktifCalisma+0x8e4>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f083 0301 	eor.w	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d02c      	beq.n	8004a20 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <checkAktifCalisma+0x8dc>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f083 0301 	eor.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d025      	beq.n	8004a20 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 80049d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <checkAktifCalisma+0x910>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e024      	b.n	8004a26 <checkAktifCalisma+0x926>
 80049dc:	200010f2 	.word	0x200010f2
 80049e0:	40011000 	.word	0x40011000
 80049e4:	200010f6 	.word	0x200010f6
 80049e8:	40010c00 	.word	0x40010c00
 80049ec:	2000110d 	.word	0x2000110d
 80049f0:	2000110e 	.word	0x2000110e
 80049f4:	200010ee 	.word	0x200010ee
 80049f8:	20001094 	.word	0x20001094
 80049fc:	200010a0 	.word	0x200010a0
 8004a00:	200010d2 	.word	0x200010d2
 8004a04:	200010d9 	.word	0x200010d9
 8004a08:	200010cb 	.word	0x200010cb
 8004a0c:	200010cd 	.word	0x200010cd
 8004a10:	200010f3 	.word	0x200010f3
 8004a14:	200010f1 	.word	0x200010f1
 8004a18:	200010f5 	.word	0x200010f5
 8004a1c:	200010f4 	.word	0x200010f4
				} else {
					devmotorasagicalisiyor=0;
 8004a20:	4b96      	ldr	r3, [pc, #600]	@ (8004c7c <checkAktifCalisma+0xb7c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004a26:	4b95      	ldr	r3, [pc, #596]	@ (8004c7c <checkAktifCalisma+0xb7c>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2110      	movs	r1, #16
 8004a32:	4893      	ldr	r0, [pc, #588]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004a34:	f005 fb9f 	bl	800a176 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004a38:	4b92      	ldr	r3, [pc, #584]	@ (8004c84 <checkAktifCalisma+0xb84>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004a3e:	4b91      	ldr	r3, [pc, #580]	@ (8004c84 <checkAktifCalisma+0xb84>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d024      	beq.n	8004a90 <checkAktifCalisma+0x990>
 8004a46:	2140      	movs	r1, #64	@ 0x40
 8004a48:	488d      	ldr	r0, [pc, #564]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004a4a:	f005 fb7d 	bl	800a148 <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d007      	beq.n	8004a64 <checkAktifCalisma+0x964>
 8004a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a58:	4889      	ldr	r0, [pc, #548]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004a5a:	f005 fb75 	bl	800a148 <HAL_GPIO_ReadPin>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d115      	bne.n	8004a90 <checkAktifCalisma+0x990>
 8004a64:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <checkAktifCalisma+0xb88>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <checkAktifCalisma+0x990>
 8004a6c:	4b87      	ldr	r3, [pc, #540]	@ (8004c8c <checkAktifCalisma+0xb8c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <checkAktifCalisma+0x990>
 8004a74:	4b86      	ldr	r3, [pc, #536]	@ (8004c90 <checkAktifCalisma+0xb90>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f083 0301 	eor.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <checkAktifCalisma+0x990>
					timer2=millis;
 8004a82:	4b84      	ldr	r3, [pc, #528]	@ (8004c94 <checkAktifCalisma+0xb94>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a84      	ldr	r2, [pc, #528]	@ (8004c98 <checkAktifCalisma+0xb98>)
 8004a88:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004a8a:	4b81      	ldr	r3, [pc, #516]	@ (8004c90 <checkAktifCalisma+0xb90>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004a90:	4b80      	ldr	r3, [pc, #512]	@ (8004c94 <checkAktifCalisma+0xb94>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b80      	ldr	r3, [pc, #512]	@ (8004c98 <checkAktifCalisma+0xb98>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	4a80      	ldr	r2, [pc, #512]	@ (8004c9c <checkAktifCalisma+0xb9c>)
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d303      	bcc.n	8004aaa <checkAktifCalisma+0x9aa>
 8004aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8004c90 <checkAktifCalisma+0xb90>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <checkAktifCalisma+0x9c6>
 8004aaa:	4b77      	ldr	r3, [pc, #476]	@ (8004c88 <checkAktifCalisma+0xb88>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f083 0301 	eor.w	r3, r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <checkAktifCalisma+0x9c6>
 8004ab8:	4b74      	ldr	r3, [pc, #464]	@ (8004c8c <checkAktifCalisma+0xb8c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f083 0301 	eor.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2110      	movs	r1, #16
 8004aca:	486d      	ldr	r0, [pc, #436]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004acc:	f005 fb53 	bl	800a176 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c84 <checkAktifCalisma+0xb84>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8004c90 <checkAktifCalisma+0xb90>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004adc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ae0:	486f      	ldr	r0, [pc, #444]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004ae2:	f005 fb31 	bl	800a148 <HAL_GPIO_ReadPin>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d120      	bne.n	8004b2e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004af0:	486b      	ldr	r0, [pc, #428]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004af2:	f005 fb29 	bl	800a148 <HAL_GPIO_ReadPin>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d118      	bne.n	8004b2e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004afc:	2104      	movs	r1, #4
 8004afe:	4868      	ldr	r0, [pc, #416]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004b00:	f005 fb22 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d111      	bne.n	8004b2e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4864      	ldr	r0, [pc, #400]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004b0e:	f005 fb1b 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4861      	ldr	r0, [pc, #388]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004b1c:	f005 fb14 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004b26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca4 <checkAktifCalisma+0xba4>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <checkAktifCalisma+0xba4>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca8 <checkAktifCalisma+0xba8>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d144      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <checkAktifCalisma+0xbac>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d003      	beq.n	8004b4c <checkAktifCalisma+0xa4c>
 8004b44:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <checkAktifCalisma+0xbac>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d13c      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b4c:	2180      	movs	r1, #128	@ 0x80
 8004b4e:	484c      	ldr	r0, [pc, #304]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004b50:	f005 fafa 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <checkAktifCalisma+0xa62>
 8004b5a:	4b55      	ldr	r3, [pc, #340]	@ (8004cb0 <checkAktifCalisma+0xbb0>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <checkAktifCalisma+0xa7a>
 8004b62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b66:	484e      	ldr	r0, [pc, #312]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004b68:	f005 faee 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d129      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
 8004b72:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb0 <checkAktifCalisma+0xbb0>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d125      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	4840      	ldr	r0, [pc, #256]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004b7e:	f005 fae3 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d003      	beq.n	8004b90 <checkAktifCalisma+0xa90>
 8004b88:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <checkAktifCalisma+0xbb4>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11a      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b90:	2102      	movs	r1, #2
 8004b92:	483b      	ldr	r0, [pc, #236]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004b94:	f005 fad8 	bl	800a148 <HAL_GPIO_ReadPin>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004b9e:	4b46      	ldr	r3, [pc, #280]	@ (8004cb8 <checkAktifCalisma+0xbb8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f083 0301 	eor.w	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004bac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca4 <checkAktifCalisma+0xba4>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004bb4:	4b41      	ldr	r3, [pc, #260]	@ (8004cbc <checkAktifCalisma+0xbbc>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004bba:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <checkAktifCalisma+0xb94>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a40      	ldr	r2, [pc, #256]	@ (8004cc0 <checkAktifCalisma+0xbc0>)
 8004bc0:	6013      	str	r3, [r2, #0]
					bekle();
 8004bc2:	f7ff f901 	bl	8003dc8 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004bc6:	4b33      	ldr	r3, [pc, #204]	@ (8004c94 <checkAktifCalisma+0xb94>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <checkAktifCalisma+0xbc0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc4 <checkAktifCalisma+0xbc4>)
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d211      	bcs.n	8004bfc <checkAktifCalisma+0xafc>
 8004bd8:	2104      	movs	r1, #4
 8004bda:	4829      	ldr	r0, [pc, #164]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004bdc:	f005 fab4 	bl	800a148 <HAL_GPIO_ReadPin>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <checkAktifCalisma+0xafc>
 8004be6:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <checkAktifCalisma+0xbb4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <checkAktifCalisma+0xafc>
 8004bee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <checkAktifCalisma+0xba4>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	f083 0301 	eor.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <checkAktifCalisma+0xbbc>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c02:	4b29      	ldr	r3, [pc, #164]	@ (8004ca8 <checkAktifCalisma+0xba8>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d160      	bne.n	8004ccc <checkAktifCalisma+0xbcc>
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <checkAktifCalisma+0xbac>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d003      	beq.n	8004c1a <checkAktifCalisma+0xb1a>
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <checkAktifCalisma+0xbac>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d158      	bne.n	8004ccc <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	4818      	ldr	r0, [pc, #96]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004c1e:	f005 fa93 	bl	800a148 <HAL_GPIO_ReadPin>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d003      	beq.n	8004c30 <checkAktifCalisma+0xb30>
 8004c28:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <checkAktifCalisma+0xbb4>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d14d      	bne.n	8004ccc <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c30:	2102      	movs	r1, #2
 8004c32:	4813      	ldr	r0, [pc, #76]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004c34:	f005 fa88 	bl	800a148 <HAL_GPIO_ReadPin>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d146      	bne.n	8004ccc <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	480f      	ldr	r0, [pc, #60]	@ (8004c80 <checkAktifCalisma+0xb80>)
 8004c42:	f005 fa81 	bl	800a148 <HAL_GPIO_ReadPin>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <checkAktifCalisma+0xb54>
 8004c4c:	4b18      	ldr	r3, [pc, #96]	@ (8004cb0 <checkAktifCalisma+0xbb0>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <checkAktifCalisma+0xb6c>
 8004c54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c58:	4811      	ldr	r0, [pc, #68]	@ (8004ca0 <checkAktifCalisma+0xba0>)
 8004c5a:	f005 fa75 	bl	800a148 <HAL_GPIO_ReadPin>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d133      	bne.n	8004ccc <checkAktifCalisma+0xbcc>
 8004c64:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <checkAktifCalisma+0xbb0>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d12f      	bne.n	8004ccc <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <checkAktifCalisma+0xba4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02b      	beq.n	8004ccc <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004c74:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <checkAktifCalisma+0xbc8>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e02a      	b.n	8004cd2 <checkAktifCalisma+0xbd2>
 8004c7c:	200010f3 	.word	0x200010f3
 8004c80:	40011000 	.word	0x40011000
 8004c84:	200010f7 	.word	0x200010f7
 8004c88:	2000110d 	.word	0x2000110d
 8004c8c:	2000110e 	.word	0x2000110e
 8004c90:	200010ef 	.word	0x200010ef
 8004c94:	20001094 	.word	0x20001094
 8004c98:	200010a0 	.word	0x200010a0
 8004c9c:	200010d2 	.word	0x200010d2
 8004ca0:	40010c00 	.word	0x40010c00
 8004ca4:	200010fd 	.word	0x200010fd
 8004ca8:	200010c5 	.word	0x200010c5
 8004cac:	200010c4 	.word	0x200010c4
 8004cb0:	200010c8 	.word	0x200010c8
 8004cb4:	200010c2 	.word	0x200010c2
 8004cb8:	200010eb 	.word	0x200010eb
 8004cbc:	200010fe 	.word	0x200010fe
 8004cc0:	20001098 	.word	0x20001098
 8004cc4:	200010d5 	.word	0x200010d5
 8004cc8:	200010ff 	.word	0x200010ff
				} else {
					kapi1butonkontrol=0;
 8004ccc:	4b8b      	ldr	r3, [pc, #556]	@ (8004efc <checkAktifCalisma+0xdfc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004f00 <checkAktifCalisma+0xe00>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d121      	bne.n	8004d1e <checkAktifCalisma+0xc1e>
 8004cda:	4b8a      	ldr	r3, [pc, #552]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d003      	beq.n	8004cea <checkAktifCalisma+0xbea>
 8004ce2:	4b88      	ldr	r3, [pc, #544]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d119      	bne.n	8004d1e <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004cea:	2104      	movs	r1, #4
 8004cec:	4886      	ldr	r0, [pc, #536]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004cee:	f005 fa2b 	bl	800a148 <HAL_GPIO_ReadPin>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d003      	beq.n	8004d00 <checkAktifCalisma+0xc00>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	@ (8004f0c <checkAktifCalisma+0xe0c>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d00:	2102      	movs	r1, #2
 8004d02:	4881      	ldr	r0, [pc, #516]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004d04:	f005 fa20 	bl	800a148 <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004d0e:	4b80      	ldr	r3, [pc, #512]	@ (8004f10 <checkAktifCalisma+0xe10>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004d16:	4b7f      	ldr	r3, [pc, #508]	@ (8004f14 <checkAktifCalisma+0xe14>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e002      	b.n	8004d24 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f14 <checkAktifCalisma+0xe14>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004d24:	4b75      	ldr	r3, [pc, #468]	@ (8004efc <checkAktifCalisma+0xdfc>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <checkAktifCalisma+0xc3c>
 8004d2c:	4b79      	ldr	r3, [pc, #484]	@ (8004f14 <checkAktifCalisma+0xe14>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <checkAktifCalisma+0xc3c>
 8004d34:	4b78      	ldr	r3, [pc, #480]	@ (8004f18 <checkAktifCalisma+0xe18>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	4876      	ldr	r0, [pc, #472]	@ (8004f1c <checkAktifCalisma+0xe1c>)
 8004d42:	f005 fa18 	bl	800a176 <HAL_GPIO_WritePin>
 8004d46:	e004      	b.n	8004d52 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	4873      	ldr	r0, [pc, #460]	@ (8004f1c <checkAktifCalisma+0xe1c>)
 8004d4e:	f005 fa12 	bl	800a176 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d52:	4b73      	ldr	r3, [pc, #460]	@ (8004f20 <checkAktifCalisma+0xe20>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d141      	bne.n	8004dde <checkAktifCalisma+0xcde>
 8004d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d003      	beq.n	8004d6a <checkAktifCalisma+0xc6a>
 8004d62:	4b68      	ldr	r3, [pc, #416]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d139      	bne.n	8004dde <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d6e:	4866      	ldr	r0, [pc, #408]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004d70:	f005 f9ea 	bl	800a148 <HAL_GPIO_ReadPin>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <checkAktifCalisma+0xc82>
 8004d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f24 <checkAktifCalisma+0xe24>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <checkAktifCalisma+0xc9a>
 8004d82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d86:	4868      	ldr	r0, [pc, #416]	@ (8004f28 <checkAktifCalisma+0xe28>)
 8004d88:	f005 f9de 	bl	800a148 <HAL_GPIO_ReadPin>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d125      	bne.n	8004dde <checkAktifCalisma+0xcde>
 8004d92:	4b64      	ldr	r3, [pc, #400]	@ (8004f24 <checkAktifCalisma+0xe24>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d121      	bne.n	8004dde <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	485a      	ldr	r0, [pc, #360]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004d9e:	f005 f9d3 	bl	800a148 <HAL_GPIO_ReadPin>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11a      	bne.n	8004dde <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004da8:	2104      	movs	r1, #4
 8004daa:	4857      	ldr	r0, [pc, #348]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004dac:	f005 f9cc 	bl	800a148 <HAL_GPIO_ReadPin>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d113      	bne.n	8004dde <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004db6:	4b56      	ldr	r3, [pc, #344]	@ (8004f10 <checkAktifCalisma+0xe10>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00f      	beq.n	8004dde <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004f2c <checkAktifCalisma+0xe2c>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f083 0301 	eor.w	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004dcc:	4b58      	ldr	r3, [pc, #352]	@ (8004f30 <checkAktifCalisma+0xe30>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004dd2:	4b58      	ldr	r3, [pc, #352]	@ (8004f34 <checkAktifCalisma+0xe34>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a58      	ldr	r2, [pc, #352]	@ (8004f38 <checkAktifCalisma+0xe38>)
 8004dd8:	6013      	str	r3, [r2, #0]
					bekle();
 8004dda:	f7fe fff5 	bl	8003dc8 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004dde:	4b55      	ldr	r3, [pc, #340]	@ (8004f34 <checkAktifCalisma+0xe34>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b55      	ldr	r3, [pc, #340]	@ (8004f38 <checkAktifCalisma+0xe38>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	4a54      	ldr	r2, [pc, #336]	@ (8004f3c <checkAktifCalisma+0xe3c>)
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d20d      	bcs.n	8004e0c <checkAktifCalisma+0xd0c>
 8004df0:	2102      	movs	r1, #2
 8004df2:	4845      	ldr	r0, [pc, #276]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004df4:	f005 f9a8 	bl	800a148 <HAL_GPIO_ReadPin>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <checkAktifCalisma+0xd0c>
 8004dfe:	4b44      	ldr	r3, [pc, #272]	@ (8004f10 <checkAktifCalisma+0xe10>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f083 0301 	eor.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004e0c:	4b48      	ldr	r3, [pc, #288]	@ (8004f30 <checkAktifCalisma+0xe30>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e12:	4b43      	ldr	r3, [pc, #268]	@ (8004f20 <checkAktifCalisma+0xe20>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d135      	bne.n	8004e86 <checkAktifCalisma+0xd86>
 8004e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <checkAktifCalisma+0xd2a>
 8004e22:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d12d      	bne.n	8004e86 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e2e:	4836      	ldr	r0, [pc, #216]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004e30:	f005 f98a 	bl	800a148 <HAL_GPIO_ReadPin>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <checkAktifCalisma+0xd42>
 8004e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f24 <checkAktifCalisma+0xe24>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <checkAktifCalisma+0xd5a>
 8004e42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e46:	4838      	ldr	r0, [pc, #224]	@ (8004f28 <checkAktifCalisma+0xe28>)
 8004e48:	f005 f97e 	bl	800a148 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d119      	bne.n	8004e86 <checkAktifCalisma+0xd86>
 8004e52:	4b34      	ldr	r3, [pc, #208]	@ (8004f24 <checkAktifCalisma+0xe24>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d115      	bne.n	8004e86 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	482a      	ldr	r0, [pc, #168]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004e5e:	f005 f973 	bl	800a148 <HAL_GPIO_ReadPin>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10e      	bne.n	8004e86 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4827      	ldr	r0, [pc, #156]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004e6c:	f005 f96c 	bl	800a148 <HAL_GPIO_ReadPin>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004e76:	4b26      	ldr	r3, [pc, #152]	@ (8004f10 <checkAktifCalisma+0xe10>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004e7e:	4b30      	ldr	r3, [pc, #192]	@ (8004f40 <checkAktifCalisma+0xe40>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e002      	b.n	8004e8c <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004e86:	4b2e      	ldr	r3, [pc, #184]	@ (8004f40 <checkAktifCalisma+0xe40>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e8c:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <checkAktifCalisma+0xe20>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d11d      	bne.n	8004ed0 <checkAktifCalisma+0xdd0>
 8004e94:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d003      	beq.n	8004ea4 <checkAktifCalisma+0xda4>
 8004e9c:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <checkAktifCalisma+0xe04>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d115      	bne.n	8004ed0 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4818      	ldr	r0, [pc, #96]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004ea8:	f005 f94e 	bl	800a148 <HAL_GPIO_ReadPin>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10e      	bne.n	8004ed0 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	4814      	ldr	r0, [pc, #80]	@ (8004f08 <checkAktifCalisma+0xe08>)
 8004eb6:	f005 f947 	bl	800a148 <HAL_GPIO_ReadPin>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004ec0:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <checkAktifCalisma+0xe10>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <checkAktifCalisma+0xe44>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f44 <checkAktifCalisma+0xe44>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <checkAktifCalisma+0xe40>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <checkAktifCalisma+0xdee>
 8004ede:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <checkAktifCalisma+0xe44>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <checkAktifCalisma+0xdee>
 8004ee6:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <checkAktifCalisma+0xe30>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02c      	beq.n	8004f48 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2140      	movs	r1, #64	@ 0x40
 8004ef2:	480a      	ldr	r0, [pc, #40]	@ (8004f1c <checkAktifCalisma+0xe1c>)
 8004ef4:	f005 f93f 	bl	800a176 <HAL_GPIO_WritePin>
 8004ef8:	e02b      	b.n	8004f52 <checkAktifCalisma+0xe52>
 8004efa:	bf00      	nop
 8004efc:	200010ff 	.word	0x200010ff
 8004f00:	200010c5 	.word	0x200010c5
 8004f04:	200010c4 	.word	0x200010c4
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	200010c2 	.word	0x200010c2
 8004f10:	200010fd 	.word	0x200010fd
 8004f14:	20001100 	.word	0x20001100
 8004f18:	200010fe 	.word	0x200010fe
 8004f1c:	40010800 	.word	0x40010800
 8004f20:	200010c6 	.word	0x200010c6
 8004f24:	200010c8 	.word	0x200010c8
 8004f28:	40010c00 	.word	0x40010c00
 8004f2c:	200010eb 	.word	0x200010eb
 8004f30:	20001101 	.word	0x20001101
 8004f34:	20001094 	.word	0x20001094
 8004f38:	20001098 	.word	0x20001098
 8004f3c:	200010d6 	.word	0x200010d6
 8004f40:	20001102 	.word	0x20001102
 8004f44:	20001103 	.word	0x20001103
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2140      	movs	r1, #64	@ 0x40
 8004f4c:	4889      	ldr	r0, [pc, #548]	@ (8005174 <checkAktifCalisma+0x1074>)
 8004f4e:	f005 f912 	bl	800a176 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004f52:	4b89      	ldr	r3, [pc, #548]	@ (8005178 <checkAktifCalisma+0x1078>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <checkAktifCalisma+0xe62>
 8004f5a:	4b87      	ldr	r3, [pc, #540]	@ (8005178 <checkAktifCalisma+0x1078>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d115      	bne.n	8004f8e <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f62:	2104      	movs	r1, #4
 8004f64:	4885      	ldr	r0, [pc, #532]	@ (800517c <checkAktifCalisma+0x107c>)
 8004f66:	f005 f8ef 	bl	800a148 <HAL_GPIO_ReadPin>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d003      	beq.n	8004f78 <checkAktifCalisma+0xe78>
 8004f70:	4b83      	ldr	r3, [pc, #524]	@ (8005180 <checkAktifCalisma+0x1080>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4880      	ldr	r0, [pc, #512]	@ (800517c <checkAktifCalisma+0x107c>)
 8004f7c:	f005 f8e4 	bl	800a148 <HAL_GPIO_ReadPin>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <checkAktifCalisma+0x1084>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e002      	b.n	8004f94 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005184 <checkAktifCalisma+0x1084>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004f94:	4b78      	ldr	r3, [pc, #480]	@ (8005178 <checkAktifCalisma+0x1078>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d003      	beq.n	8004fa4 <checkAktifCalisma+0xea4>
 8004f9c:	4b76      	ldr	r3, [pc, #472]	@ (8005178 <checkAktifCalisma+0x1078>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d111      	bne.n	8004fc8 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4875      	ldr	r0, [pc, #468]	@ (800517c <checkAktifCalisma+0x107c>)
 8004fa8:	f005 f8ce 	bl	800a148 <HAL_GPIO_ReadPin>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10a      	bne.n	8004fc8 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	4871      	ldr	r0, [pc, #452]	@ (800517c <checkAktifCalisma+0x107c>)
 8004fb6:	f005 f8c7 	bl	800a148 <HAL_GPIO_ReadPin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004fc0:	4b71      	ldr	r3, [pc, #452]	@ (8005188 <checkAktifCalisma+0x1088>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8005188 <checkAktifCalisma+0x1088>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004fce:	4b6d      	ldr	r3, [pc, #436]	@ (8005184 <checkAktifCalisma+0x1084>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800518c <checkAktifCalisma+0x108c>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10b      	bne.n	8004ff6 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fe2:	486b      	ldr	r0, [pc, #428]	@ (8005190 <checkAktifCalisma+0x1090>)
 8004fe4:	f005 f8b0 	bl	800a148 <HAL_GPIO_ReadPin>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004fee:	4b69      	ldr	r3, [pc, #420]	@ (8005194 <checkAktifCalisma+0x1094>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e002      	b.n	8004ffc <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004ff6:	4b67      	ldr	r3, [pc, #412]	@ (8005194 <checkAktifCalisma+0x1094>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004ffc:	4b62      	ldr	r3, [pc, #392]	@ (8005188 <checkAktifCalisma+0x1088>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00f      	beq.n	8005024 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005004:	4b61      	ldr	r3, [pc, #388]	@ (800518c <checkAktifCalisma+0x108c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10b      	bne.n	8005024 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800500c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005010:	485f      	ldr	r0, [pc, #380]	@ (8005190 <checkAktifCalisma+0x1090>)
 8005012:	f005 f899 	bl	800a148 <HAL_GPIO_ReadPin>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 800501c:	4b5e      	ldr	r3, [pc, #376]	@ (8005198 <checkAktifCalisma+0x1098>)
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e002      	b.n	800502a <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005024:	4b5c      	ldr	r3, [pc, #368]	@ (8005198 <checkAktifCalisma+0x1098>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800502a:	4b5c      	ldr	r3, [pc, #368]	@ (800519c <checkAktifCalisma+0x109c>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11b      	bne.n	800506a <checkAktifCalisma+0xf6a>
 8005032:	4b5b      	ldr	r3, [pc, #364]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d003      	beq.n	8005042 <checkAktifCalisma+0xf42>
 800503a:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d113      	bne.n	800506a <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 8005042:	4b50      	ldr	r3, [pc, #320]	@ (8005184 <checkAktifCalisma+0x1084>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <checkAktifCalisma+0xf52>
 800504a:	4b4f      	ldr	r3, [pc, #316]	@ (8005188 <checkAktifCalisma+0x1088>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <checkAktifCalisma+0xf6a>
 8005052:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <checkAktifCalisma+0x10a4>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <checkAktifCalisma+0xf62>
 800505a:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <checkAktifCalisma+0x10a8>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 8005062:	4b52      	ldr	r3, [pc, #328]	@ (80051ac <checkAktifCalisma+0x10ac>)
 8005064:	2201      	movs	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e002      	b.n	8005070 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 800506a:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <checkAktifCalisma+0x10ac>)
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005070:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <checkAktifCalisma+0x109c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d148      	bne.n	800510a <checkAktifCalisma+0x100a>
 8005078:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d003      	beq.n	8005088 <checkAktifCalisma+0xf88>
 8005080:	4b47      	ldr	r3, [pc, #284]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d140      	bne.n	800510a <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005088:	4b3e      	ldr	r3, [pc, #248]	@ (8005184 <checkAktifCalisma+0x1084>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <checkAktifCalisma+0xf98>
 8005090:	4b3d      	ldr	r3, [pc, #244]	@ (8005188 <checkAktifCalisma+0x1088>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d038      	beq.n	800510a <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800509c:	4837      	ldr	r0, [pc, #220]	@ (800517c <checkAktifCalisma+0x107c>)
 800509e:	f005 f853 	bl	800a148 <HAL_GPIO_ReadPin>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01c      	beq.n	80050e2 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80050a8:	2180      	movs	r1, #128	@ 0x80
 80050aa:	4834      	ldr	r0, [pc, #208]	@ (800517c <checkAktifCalisma+0x107c>)
 80050ac:	f005 f84c 	bl	800a148 <HAL_GPIO_ReadPin>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80050b6:	2104      	movs	r1, #4
 80050b8:	4830      	ldr	r0, [pc, #192]	@ (800517c <checkAktifCalisma+0x107c>)
 80050ba:	f005 f845 	bl	800a148 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d00e      	beq.n	80050e2 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80050c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050c8:	482c      	ldr	r0, [pc, #176]	@ (800517c <checkAktifCalisma+0x107c>)
 80050ca:	f005 f83d 	bl	800a148 <HAL_GPIO_ReadPin>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80050d4:	2102      	movs	r1, #2
 80050d6:	4829      	ldr	r0, [pc, #164]	@ (800517c <checkAktifCalisma+0x107c>)
 80050d8:	f005 f836 	bl	800a148 <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d103      	bne.n	80050ea <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80050e2:	4b2a      	ldr	r3, [pc, #168]	@ (800518c <checkAktifCalisma+0x108c>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <checkAktifCalisma+0xffa>
 80050ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005194 <checkAktifCalisma+0x1094>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <checkAktifCalisma+0xffa>
 80050f2:	4b29      	ldr	r3, [pc, #164]	@ (8005198 <checkAktifCalisma+0x1098>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 80050fa:	4b2d      	ldr	r3, [pc, #180]	@ (80051b0 <checkAktifCalisma+0x10b0>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 8005102:	4b2c      	ldr	r3, [pc, #176]	@ (80051b4 <checkAktifCalisma+0x10b4>)
 8005104:	2201      	movs	r2, #1
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	e002      	b.n	8005110 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 800510a:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <checkAktifCalisma+0x10b4>)
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005110:	4b22      	ldr	r3, [pc, #136]	@ (800519c <checkAktifCalisma+0x109c>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d117      	bne.n	8005148 <checkAktifCalisma+0x1048>
 8005118:	4b21      	ldr	r3, [pc, #132]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d003      	beq.n	8005128 <checkAktifCalisma+0x1028>
 8005120:	4b1f      	ldr	r3, [pc, #124]	@ (80051a0 <checkAktifCalisma+0x10a0>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d10f      	bne.n	8005148 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005128:	4b16      	ldr	r3, [pc, #88]	@ (8005184 <checkAktifCalisma+0x1084>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d103      	bne.n	8005138 <checkAktifCalisma+0x1038>
 8005130:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <checkAktifCalisma+0x1088>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005138:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <checkAktifCalisma+0x10b0>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8005140:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <checkAktifCalisma+0x10b8>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e002      	b.n	800514e <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005148:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <checkAktifCalisma+0x10b8>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800514e:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <checkAktifCalisma+0x10b4>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <checkAktifCalisma+0x1066>
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <checkAktifCalisma+0x10ac>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <checkAktifCalisma+0x1066>
 800515e:	4b16      	ldr	r3, [pc, #88]	@ (80051b8 <checkAktifCalisma+0x10b8>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02a      	beq.n	80051bc <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005166:	2201      	movs	r2, #1
 8005168:	2120      	movs	r1, #32
 800516a:	4802      	ldr	r0, [pc, #8]	@ (8005174 <checkAktifCalisma+0x1074>)
 800516c:	f005 f803 	bl	800a176 <HAL_GPIO_WritePin>
 8005170:	e029      	b.n	80051c6 <checkAktifCalisma+0x10c6>
 8005172:	bf00      	nop
 8005174:	40010800 	.word	0x40010800
 8005178:	200010c9 	.word	0x200010c9
 800517c:	40011000 	.word	0x40011000
 8005180:	200010c2 	.word	0x200010c2
 8005184:	20001107 	.word	0x20001107
 8005188:	20001108 	.word	0x20001108
 800518c:	200010c8 	.word	0x200010c8
 8005190:	40010c00 	.word	0x40010c00
 8005194:	20001117 	.word	0x20001117
 8005198:	20001118 	.word	0x20001118
 800519c:	200010c7 	.word	0x200010c7
 80051a0:	200010c4 	.word	0x200010c4
 80051a4:	200010fe 	.word	0x200010fe
 80051a8:	20001101 	.word	0x20001101
 80051ac:	20001104 	.word	0x20001104
 80051b0:	200010fd 	.word	0x200010fd
 80051b4:	20001105 	.word	0x20001105
 80051b8:	20001106 	.word	0x20001106
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80051bc:	2200      	movs	r2, #0
 80051be:	2120      	movs	r1, #32
 80051c0:	4887      	ldr	r0, [pc, #540]	@ (80053e0 <checkAktifCalisma+0x12e0>)
 80051c2:	f004 ffd8 	bl	800a176 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80051c6:	4b87      	ldr	r3, [pc, #540]	@ (80053e4 <checkAktifCalisma+0x12e4>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <checkAktifCalisma+0x10ec>
 80051ce:	2102      	movs	r1, #2
 80051d0:	4885      	ldr	r0, [pc, #532]	@ (80053e8 <checkAktifCalisma+0x12e8>)
 80051d2:	f004 ffb9 	bl	800a148 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d107      	bne.n	80051ec <checkAktifCalisma+0x10ec>
 80051dc:	4b83      	ldr	r3, [pc, #524]	@ (80053ec <checkAktifCalisma+0x12ec>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <checkAktifCalisma+0x10ec>
 80051e4:	4b82      	ldr	r3, [pc, #520]	@ (80053f0 <checkAktifCalisma+0x12f0>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d112      	bne.n	8005212 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80051ec:	4b81      	ldr	r3, [pc, #516]	@ (80053f4 <checkAktifCalisma+0x12f4>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d032      	beq.n	800525a <checkAktifCalisma+0x115a>
 80051f4:	2104      	movs	r1, #4
 80051f6:	487c      	ldr	r0, [pc, #496]	@ (80053e8 <checkAktifCalisma+0x12e8>)
 80051f8:	f004 ffa6 	bl	800a148 <HAL_GPIO_ReadPin>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d12b      	bne.n	800525a <checkAktifCalisma+0x115a>
 8005202:	4b7a      	ldr	r3, [pc, #488]	@ (80053ec <checkAktifCalisma+0x12ec>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d027      	beq.n	800525a <checkAktifCalisma+0x115a>
 800520a:	4b79      	ldr	r3, [pc, #484]	@ (80053f0 <checkAktifCalisma+0x12f0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d023      	beq.n	800525a <checkAktifCalisma+0x115a>



					calismaSayisi++;
 8005212:	4b79      	ldr	r3, [pc, #484]	@ (80053f8 <checkAktifCalisma+0x12f8>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b77      	ldr	r3, [pc, #476]	@ (80053f8 <checkAktifCalisma+0x12f8>)
 800521c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800521e:	4b76      	ldr	r3, [pc, #472]	@ (80053f8 <checkAktifCalisma+0x12f8>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2bff      	cmp	r3, #255	@ 0xff
 8005224:	d108      	bne.n	8005238 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005226:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <checkAktifCalisma+0x12f8>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 800522c:	4b73      	ldr	r3, [pc, #460]	@ (80053fc <checkAktifCalisma+0x12fc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b71      	ldr	r3, [pc, #452]	@ (80053fc <checkAktifCalisma+0x12fc>)
 8005236:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005238:	4b6f      	ldr	r3, [pc, #444]	@ (80053f8 <checkAktifCalisma+0x12f8>)
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	4b70      	ldr	r3, [pc, #448]	@ (8005400 <checkAktifCalisma+0x1300>)
 800523e:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005240:	4b6e      	ldr	r3, [pc, #440]	@ (80053fc <checkAktifCalisma+0x12fc>)
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	4b6e      	ldr	r3, [pc, #440]	@ (8005400 <checkAktifCalisma+0x1300>)
 8005246:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005248:	4b6e      	ldr	r3, [pc, #440]	@ (8005404 <checkAktifCalisma+0x1304>)
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800524e:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <checkAktifCalisma+0x12e4>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005254:	4b67      	ldr	r3, [pc, #412]	@ (80053f4 <checkAktifCalisma+0x12f4>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800525a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800525e:	486a      	ldr	r0, [pc, #424]	@ (8005408 <checkAktifCalisma+0x1308>)
 8005260:	f004 ff72 	bl	800a148 <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800526a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800526e:	4866      	ldr	r0, [pc, #408]	@ (8005408 <checkAktifCalisma+0x1308>)
 8005270:	f004 ff6a 	bl	800a148 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800527a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800527e:	4862      	ldr	r0, [pc, #392]	@ (8005408 <checkAktifCalisma+0x1308>)
 8005280:	f004 ff62 	bl	800a148 <HAL_GPIO_ReadPin>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d006      	beq.n	8005298 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800528a:	2140      	movs	r1, #64	@ 0x40
 800528c:	4856      	ldr	r0, [pc, #344]	@ (80053e8 <checkAktifCalisma+0x12e8>)
 800528e:	f004 ff5b 	bl	800a148 <HAL_GPIO_ReadPin>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005298:	4b5c      	ldr	r3, [pc, #368]	@ (800540c <checkAktifCalisma+0x130c>)
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e002      	b.n	80052a6 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80052a0:	4b5a      	ldr	r3, [pc, #360]	@ (800540c <checkAktifCalisma+0x130c>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80052a6:	4b59      	ldr	r3, [pc, #356]	@ (800540c <checkAktifCalisma+0x130c>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d014      	beq.n	80052d8 <checkAktifCalisma+0x11d8>
 80052ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052b2:	4855      	ldr	r0, [pc, #340]	@ (8005408 <checkAktifCalisma+0x1308>)
 80052b4:	f004 ff48 	bl	800a148 <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10c      	bne.n	80052d8 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80052be:	4b54      	ldr	r3, [pc, #336]	@ (8005410 <checkAktifCalisma+0x1310>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80052c4:	2001      	movs	r0, #1
 80052c6:	f7fb fd13 	bl	8000cf0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80052ca:	2001      	movs	r0, #1
 80052cc:	f7fb fcb8 	bl	8000c40 <hata2EEPROM>
					acilstophatasi=1;
 80052d0:	4b50      	ldr	r3, [pc, #320]	@ (8005414 <checkAktifCalisma+0x1314>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e018      	b.n	800530a <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80052d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005414 <checkAktifCalisma+0x1314>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d014      	beq.n	800530a <checkAktifCalisma+0x120a>
 80052e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052e4:	4848      	ldr	r0, [pc, #288]	@ (8005408 <checkAktifCalisma+0x1308>)
 80052e6:	f004 ff2f 	bl	800a148 <HAL_GPIO_ReadPin>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <checkAktifCalisma+0x120a>
 80052f0:	4b46      	ldr	r3, [pc, #280]	@ (800540c <checkAktifCalisma+0x130c>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	f083 0301 	eor.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 80052fe:	4b45      	ldr	r3, [pc, #276]	@ (8005414 <checkAktifCalisma+0x1314>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005304:	2001      	movs	r0, #1
 8005306:	f7fe fcf1 	bl	8003cec <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800530a:	4b43      	ldr	r3, [pc, #268]	@ (8005418 <checkAktifCalisma+0x1318>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <checkAktifCalisma+0x1260>
 8005318:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800531c:	483a      	ldr	r0, [pc, #232]	@ (8005408 <checkAktifCalisma+0x1308>)
 800531e:	f004 ff13 	bl	800a148 <HAL_GPIO_ReadPin>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <checkAktifCalisma+0x1230>
 8005328:	4b3c      	ldr	r3, [pc, #240]	@ (800541c <checkAktifCalisma+0x131c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d017      	beq.n	8005360 <checkAktifCalisma+0x1260>
 8005330:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <checkAktifCalisma+0x1320>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d113      	bne.n	8005360 <checkAktifCalisma+0x1260>
 8005338:	4b3a      	ldr	r3, [pc, #232]	@ (8005424 <checkAktifCalisma+0x1324>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <checkAktifCalisma+0x1260>
					hataVar=1;
 8005346:	4b32      	ldr	r3, [pc, #200]	@ (8005410 <checkAktifCalisma+0x1310>)
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800534c:	2002      	movs	r0, #2
 800534e:	f7fb fccf 	bl	8000cf0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8005352:	2002      	movs	r0, #2
 8005354:	f7fb fc74 	bl	8000c40 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005358:	4b32      	ldr	r3, [pc, #200]	@ (8005424 <checkAktifCalisma+0x1324>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e017      	b.n	8005390 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005360:	4b30      	ldr	r3, [pc, #192]	@ (8005424 <checkAktifCalisma+0x1324>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <checkAktifCalisma+0x1290>
 8005368:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <checkAktifCalisma+0x1318>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <checkAktifCalisma+0x1290>
 8005370:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <checkAktifCalisma+0x1328>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f083 0301 	eor.w	r3, r3, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 800537e:	4b29      	ldr	r3, [pc, #164]	@ (8005424 <checkAktifCalisma+0x1324>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005384:	4b25      	ldr	r3, [pc, #148]	@ (800541c <checkAktifCalisma+0x131c>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800538a:	2002      	movs	r0, #2
 800538c:	f7fe fcae 	bl	8003cec <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005390:	4b26      	ldr	r3, [pc, #152]	@ (800542c <checkAktifCalisma+0x132c>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d151      	bne.n	800543c <checkAktifCalisma+0x133c>
 8005398:	4b25      	ldr	r3, [pc, #148]	@ (8005430 <checkAktifCalisma+0x1330>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d14d      	bne.n	800543c <checkAktifCalisma+0x133c>
 80053a0:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <checkAktifCalisma+0x1334>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d049      	beq.n	800543c <checkAktifCalisma+0x133c>
 80053a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053ac:	480e      	ldr	r0, [pc, #56]	@ (80053e8 <checkAktifCalisma+0x12e8>)
 80053ae:	f004 fecb 	bl	800a148 <HAL_GPIO_ReadPin>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d141      	bne.n	800543c <checkAktifCalisma+0x133c>
 80053b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005438 <checkAktifCalisma+0x1338>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f083 0301 	eor.w	r3, r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d03a      	beq.n	800543c <checkAktifCalisma+0x133c>
					hataVar=1;
 80053c6:	4b12      	ldr	r3, [pc, #72]	@ (8005410 <checkAktifCalisma+0x1310>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80053cc:	2003      	movs	r0, #3
 80053ce:	f7fb fc8f 	bl	8000cf0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80053d2:	2003      	movs	r0, #3
 80053d4:	f7fb fc34 	bl	8000c40 <hata2EEPROM>
					basinchatasi=1;
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <checkAktifCalisma+0x1338>)
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e043      	b.n	8005468 <checkAktifCalisma+0x1368>
 80053e0:	40010800 	.word	0x40010800
 80053e4:	200010fb 	.word	0x200010fb
 80053e8:	40011000 	.word	0x40011000
 80053ec:	200010c2 	.word	0x200010c2
 80053f0:	200010fd 	.word	0x200010fd
 80053f4:	200010fc 	.word	0x200010fc
 80053f8:	200010b4 	.word	0x200010b4
 80053fc:	200010b6 	.word	0x200010b6
 8005400:	20000fec 	.word	0x20000fec
 8005404:	200010e8 	.word	0x200010e8
 8005408:	40010c00 	.word	0x40010c00
 800540c:	20001109 	.word	0x20001109
 8005410:	20001110 	.word	0x20001110
 8005414:	2000110b 	.word	0x2000110b
 8005418:	20001112 	.word	0x20001112
 800541c:	2000111c 	.word	0x2000111c
 8005420:	200010c0 	.word	0x200010c0
 8005424:	2000110c 	.word	0x2000110c
 8005428:	200010f4 	.word	0x200010f4
 800542c:	200010bf 	.word	0x200010bf
 8005430:	200010c3 	.word	0x200010c3
 8005434:	2000110f 	.word	0x2000110f
 8005438:	20001119 	.word	0x20001119
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800543c:	4b85      	ldr	r3, [pc, #532]	@ (8005654 <checkAktifCalisma+0x1554>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <checkAktifCalisma+0x1368>
 8005444:	4b84      	ldr	r3, [pc, #528]	@ (8005658 <checkAktifCalisma+0x1558>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10d      	bne.n	8005468 <checkAktifCalisma+0x1368>
 800544c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005450:	4882      	ldr	r0, [pc, #520]	@ (800565c <checkAktifCalisma+0x155c>)
 8005452:	f004 fe79 	bl	800a148 <HAL_GPIO_ReadPin>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 800545c:	4b7d      	ldr	r3, [pc, #500]	@ (8005654 <checkAktifCalisma+0x1554>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8005462:	2003      	movs	r0, #3
 8005464:	f7fe fc42 	bl	8003cec <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005468:	4b7d      	ldr	r3, [pc, #500]	@ (8005660 <checkAktifCalisma+0x1560>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <checkAktifCalisma+0x1378>
 8005470:	4b7c      	ldr	r3, [pc, #496]	@ (8005664 <checkAktifCalisma+0x1564>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d023      	beq.n	80054c0 <checkAktifCalisma+0x13c0>
 8005478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800547c:	487a      	ldr	r0, [pc, #488]	@ (8005668 <checkAktifCalisma+0x1568>)
 800547e:	f004 fe63 	bl	800a148 <HAL_GPIO_ReadPin>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d11b      	bne.n	80054c0 <checkAktifCalisma+0x13c0>
 8005488:	4b78      	ldr	r3, [pc, #480]	@ (800566c <checkAktifCalisma+0x156c>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d003      	beq.n	8005498 <checkAktifCalisma+0x1398>
 8005490:	4b76      	ldr	r3, [pc, #472]	@ (800566c <checkAktifCalisma+0x156c>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d113      	bne.n	80054c0 <checkAktifCalisma+0x13c0>
 8005498:	4b75      	ldr	r3, [pc, #468]	@ (8005670 <checkAktifCalisma+0x1570>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f083 0301 	eor.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <checkAktifCalisma+0x13c0>
					hataVar=1;
 80054a6:	4b73      	ldr	r3, [pc, #460]	@ (8005674 <checkAktifCalisma+0x1574>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80054ac:	2004      	movs	r0, #4
 80054ae:	f7fb fc1f 	bl	8000cf0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80054b2:	2004      	movs	r0, #4
 80054b4:	f7fb fbc4 	bl	8000c40 <hata2EEPROM>
					katkapisivicihatasi=1;
 80054b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <checkAktifCalisma+0x1570>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e01f      	b.n	8005500 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80054c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005670 <checkAktifCalisma+0x1570>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <checkAktifCalisma+0x1400>
 80054c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005678 <checkAktifCalisma+0x1578>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d017      	beq.n	8005500 <checkAktifCalisma+0x1400>
 80054d0:	4b63      	ldr	r3, [pc, #396]	@ (8005660 <checkAktifCalisma+0x1560>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f083 0301 	eor.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <checkAktifCalisma+0x1400>
 80054de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054e2:	4861      	ldr	r0, [pc, #388]	@ (8005668 <checkAktifCalisma+0x1568>)
 80054e4:	f004 fe30 	bl	800a148 <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 80054ee:	4b60      	ldr	r3, [pc, #384]	@ (8005670 <checkAktifCalisma+0x1570>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80054f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <checkAktifCalisma+0x1564>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80054fa:	2004      	movs	r0, #4
 80054fc:	f7fe fbf6 	bl	8003cec <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005500:	4b57      	ldr	r3, [pc, #348]	@ (8005660 <checkAktifCalisma+0x1560>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <checkAktifCalisma+0x1410>
 8005508:	4b5c      	ldr	r3, [pc, #368]	@ (800567c <checkAktifCalisma+0x157c>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d023      	beq.n	8005558 <checkAktifCalisma+0x1458>
 8005510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005514:	4854      	ldr	r0, [pc, #336]	@ (8005668 <checkAktifCalisma+0x1568>)
 8005516:	f004 fe17 	bl	800a148 <HAL_GPIO_ReadPin>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d11b      	bne.n	8005558 <checkAktifCalisma+0x1458>
 8005520:	4b52      	ldr	r3, [pc, #328]	@ (800566c <checkAktifCalisma+0x156c>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d003      	beq.n	8005530 <checkAktifCalisma+0x1430>
 8005528:	4b50      	ldr	r3, [pc, #320]	@ (800566c <checkAktifCalisma+0x156c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d113      	bne.n	8005558 <checkAktifCalisma+0x1458>
 8005530:	4b53      	ldr	r3, [pc, #332]	@ (8005680 <checkAktifCalisma+0x1580>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f083 0301 	eor.w	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00c      	beq.n	8005558 <checkAktifCalisma+0x1458>

					hataVar=1;
 800553e:	4b4d      	ldr	r3, [pc, #308]	@ (8005674 <checkAktifCalisma+0x1574>)
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005544:	2005      	movs	r0, #5
 8005546:	f7fb fbd3 	bl	8000cf0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 800554a:	2005      	movs	r0, #5
 800554c:	f7fb fb78 	bl	8000c40 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005550:	4b4b      	ldr	r3, [pc, #300]	@ (8005680 <checkAktifCalisma+0x1580>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e023      	b.n	80055a0 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005558:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <checkAktifCalisma+0x1580>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01f      	beq.n	80055a0 <checkAktifCalisma+0x14a0>
 8005560:	4b45      	ldr	r3, [pc, #276]	@ (8005678 <checkAktifCalisma+0x1578>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <checkAktifCalisma+0x14a0>
 8005568:	4b3d      	ldr	r3, [pc, #244]	@ (8005660 <checkAktifCalisma+0x1560>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f083 0301 	eor.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d014      	beq.n	80055a0 <checkAktifCalisma+0x14a0>
 8005576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800557a:	483b      	ldr	r0, [pc, #236]	@ (8005668 <checkAktifCalisma+0x1568>)
 800557c:	f004 fde4 	bl	800a148 <HAL_GPIO_ReadPin>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10c      	bne.n	80055a0 <checkAktifCalisma+0x14a0>
 8005586:	4b3c      	ldr	r3, [pc, #240]	@ (8005678 <checkAktifCalisma+0x1578>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 800558e:	4b3c      	ldr	r3, [pc, #240]	@ (8005680 <checkAktifCalisma+0x1580>)
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005594:	4b39      	ldr	r3, [pc, #228]	@ (800567c <checkAktifCalisma+0x157c>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800559a:	2005      	movs	r0, #5
 800559c:	f7fe fba6 	bl	8003cec <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80055a0:	4b38      	ldr	r3, [pc, #224]	@ (8005684 <checkAktifCalisma+0x1584>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <checkAktifCalisma+0x14b8>
 80055a8:	4b37      	ldr	r3, [pc, #220]	@ (8005688 <checkAktifCalisma+0x1588>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d103      	bne.n	80055b8 <checkAktifCalisma+0x14b8>
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <checkAktifCalisma+0x158c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <checkAktifCalisma+0x14f0>
 80055b8:	4b35      	ldr	r3, [pc, #212]	@ (8005690 <checkAktifCalisma+0x1590>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d014      	beq.n	80055f0 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 80055c6:	4b33      	ldr	r3, [pc, #204]	@ (8005694 <checkAktifCalisma+0x1594>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b33      	ldr	r3, [pc, #204]	@ (8005698 <checkAktifCalisma+0x1598>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	4a32      	ldr	r2, [pc, #200]	@ (800569c <checkAktifCalisma+0x159c>)
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d30b      	bcc.n	80055f0 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 80055d8:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <checkAktifCalisma+0x1574>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80055de:	2006      	movs	r0, #6
 80055e0:	f7fb fb86 	bl	8000cf0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80055e4:	2006      	movs	r0, #6
 80055e6:	f7fb fb2b 	bl	8000c40 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80055ea:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <checkAktifCalisma+0x1590>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80055f0:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <checkAktifCalisma+0x1590>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <checkAktifCalisma+0x1520>
 80055f8:	2108      	movs	r1, #8
 80055fa:	481b      	ldr	r0, [pc, #108]	@ (8005668 <checkAktifCalisma+0x1568>)
 80055fc:	f004 fda4 	bl	800a148 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <checkAktifCalisma+0x1520>
 8005606:	4b16      	ldr	r3, [pc, #88]	@ (8005660 <checkAktifCalisma+0x1560>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005614:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <checkAktifCalisma+0x1590>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800561a:	2006      	movs	r0, #6
 800561c:	f7fe fb66 	bl	8003cec <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005620:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <checkAktifCalisma+0x15a0>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <checkAktifCalisma+0x1540>
 8005628:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <checkAktifCalisma+0x1588>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <checkAktifCalisma+0x1540>
 8005630:	4b1c      	ldr	r3, [pc, #112]	@ (80056a4 <checkAktifCalisma+0x15a4>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <checkAktifCalisma+0x1540>
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <checkAktifCalisma+0x158c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d035      	beq.n	80056ac <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <checkAktifCalisma+0x15a8>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005646:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <checkAktifCalisma+0x1564>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <checkAktifCalisma+0x157c>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e032      	b.n	80056ba <checkAktifCalisma+0x15ba>
 8005654:	20001119 	.word	0x20001119
 8005658:	200010bf 	.word	0x200010bf
 800565c:	40010c00 	.word	0x40010c00
 8005660:	20001109 	.word	0x20001109
 8005664:	2000111d 	.word	0x2000111d
 8005668:	40010800 	.word	0x40010800
 800566c:	200010c4 	.word	0x200010c4
 8005670:	2000111a 	.word	0x2000111a
 8005674:	20001110 	.word	0x20001110
 8005678:	200010fd 	.word	0x200010fd
 800567c:	2000111e 	.word	0x2000111e
 8005680:	2000111b 	.word	0x2000111b
 8005684:	2000110f 	.word	0x2000110f
 8005688:	200010f4 	.word	0x200010f4
 800568c:	200010f3 	.word	0x200010f3
 8005690:	2000110a 	.word	0x2000110a
 8005694:	20001094 	.word	0x20001094
 8005698:	200010a8 	.word	0x200010a8
 800569c:	200010d4 	.word	0x200010d4
 80056a0:	200010f1 	.word	0x200010f1
 80056a4:	200010f2 	.word	0x200010f2
 80056a8:	20001111 	.word	0x20001111
				} else {
					makineCalisiyor=1;
 80056ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005798 <checkAktifCalisma+0x1698>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80056b2:	4b3a      	ldr	r3, [pc, #232]	@ (800579c <checkAktifCalisma+0x169c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	@ (80057a0 <checkAktifCalisma+0x16a0>)
 80056b8:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80056ba:	4b3a      	ldr	r3, [pc, #232]	@ (80057a4 <checkAktifCalisma+0x16a4>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02f      	beq.n	8005722 <checkAktifCalisma+0x1622>
 80056c2:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <checkAktifCalisma+0x16a8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d028      	beq.n	8005722 <checkAktifCalisma+0x1622>
 80056d0:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <checkAktifCalisma+0x16ac>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d021      	beq.n	8005722 <checkAktifCalisma+0x1622>
 80056de:	4b34      	ldr	r3, [pc, #208]	@ (80057b0 <checkAktifCalisma+0x16b0>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80056ec:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <checkAktifCalisma+0x16b4>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f083 0301 	eor.w	r3, r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d013      	beq.n	8005722 <checkAktifCalisma+0x1622>
 80056fa:	4b2f      	ldr	r3, [pc, #188]	@ (80057b8 <checkAktifCalisma+0x16b8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <checkAktifCalisma+0x1622>
 8005708:	4b2c      	ldr	r3, [pc, #176]	@ (80057bc <checkAktifCalisma+0x16bc>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005716:	4b23      	ldr	r3, [pc, #140]	@ (80057a4 <checkAktifCalisma+0x16a4>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 800571c:	2007      	movs	r0, #7
 800571e:	f7fe fae5 	bl	8003cec <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005722:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <checkAktifCalisma+0x16a4>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02a      	beq.n	8005780 <checkAktifCalisma+0x1680>
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <checkAktifCalisma+0x16a8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d023      	beq.n	8005780 <checkAktifCalisma+0x1680>
 8005738:	4b1c      	ldr	r3, [pc, #112]	@ (80057ac <checkAktifCalisma+0x16ac>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01f      	beq.n	8005780 <checkAktifCalisma+0x1680>
 8005740:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <checkAktifCalisma+0x16b0>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800574e:	4b19      	ldr	r3, [pc, #100]	@ (80057b4 <checkAktifCalisma+0x16b4>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	f083 0301 	eor.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d011      	beq.n	8005780 <checkAktifCalisma+0x1680>
 800575c:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <checkAktifCalisma+0x16b8>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <checkAktifCalisma+0x1680>
 800576a:	4b14      	ldr	r3, [pc, #80]	@ (80057bc <checkAktifCalisma+0x16bc>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f083 0301 	eor.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005778:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <checkAktifCalisma+0x16c0>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 800577e:	e009      	b.n	8005794 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005780:	4b0a      	ldr	r3, [pc, #40]	@ (80057ac <checkAktifCalisma+0x16ac>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f083 0301 	eor.w	r3, r3, #1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 800578e:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <checkAktifCalisma+0x16c0>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20001111 	.word	0x20001111
 800579c:	20001094 	.word	0x20001094
 80057a0:	200010a8 	.word	0x200010a8
 80057a4:	20001110 	.word	0x20001110
 80057a8:	2000110b 	.word	0x2000110b
 80057ac:	2000110c 	.word	0x2000110c
 80057b0:	20001119 	.word	0x20001119
 80057b4:	2000111a 	.word	0x2000111a
 80057b8:	2000111b 	.word	0x2000111b
 80057bc:	2000110a 	.word	0x2000110a
 80057c0:	2000111f 	.word	0x2000111f

080057c4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80057c8:	4b8b      	ldr	r3, [pc, #556]	@ (80059f8 <checkDemoModCalisma+0x234>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 81c4 	bne.w	8005b5a <checkDemoModCalisma+0x396>
 80057d2:	4b8a      	ldr	r3, [pc, #552]	@ (80059fc <checkDemoModCalisma+0x238>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 81bf 	beq.w	8005b5a <checkDemoModCalisma+0x396>
 80057dc:	4b88      	ldr	r3, [pc, #544]	@ (8005a00 <checkDemoModCalisma+0x23c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f040 81ba 	bne.w	8005b5a <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057e6:	2102      	movs	r1, #2
 80057e8:	4886      	ldr	r0, [pc, #536]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80057ea:	f004 fcad 	bl	800a148 <HAL_GPIO_ReadPin>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11d      	bne.n	8005830 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 80057f4:	4b84      	ldr	r3, [pc, #528]	@ (8005a08 <checkDemoModCalisma+0x244>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005802:	4b82      	ldr	r3, [pc, #520]	@ (8005a0c <checkDemoModCalisma+0x248>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f083 0301 	eor.w	r3, r3, #1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005810:	4b7f      	ldr	r3, [pc, #508]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f083 0301 	eor.w	r3, r3, #1
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800581e:	2201      	movs	r2, #1
 8005820:	2104      	movs	r1, #4
 8005822:	487c      	ldr	r0, [pc, #496]	@ (8005a14 <checkDemoModCalisma+0x250>)
 8005824:	f004 fca7 	bl	800a176 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005828:	4b7b      	ldr	r3, [pc, #492]	@ (8005a18 <checkDemoModCalisma+0x254>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e00e      	b.n	800584e <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005830:	2102      	movs	r1, #2
 8005832:	4874      	ldr	r0, [pc, #464]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005834:	f004 fc88 	bl	800a148 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800583e:	2200      	movs	r2, #0
 8005840:	2104      	movs	r1, #4
 8005842:	4874      	ldr	r0, [pc, #464]	@ (8005a14 <checkDemoModCalisma+0x250>)
 8005844:	f004 fc97 	bl	800a176 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005848:	4b73      	ldr	r3, [pc, #460]	@ (8005a18 <checkDemoModCalisma+0x254>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800584e:	4b72      	ldr	r3, [pc, #456]	@ (8005a18 <checkDemoModCalisma+0x254>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <checkDemoModCalisma+0xaa>
 8005856:	4b6d      	ldr	r3, [pc, #436]	@ (8005a0c <checkDemoModCalisma+0x248>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <checkDemoModCalisma+0xaa>
 800585e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <checkDemoModCalisma+0xaa>
 8005866:	4b68      	ldr	r3, [pc, #416]	@ (8005a08 <checkDemoModCalisma+0x244>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800586e:	2201      	movs	r2, #1
 8005870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005874:	4867      	ldr	r0, [pc, #412]	@ (8005a14 <checkDemoModCalisma+0x250>)
 8005876:	f004 fc7e 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800587a:	2201      	movs	r2, #1
 800587c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005880:	4864      	ldr	r0, [pc, #400]	@ (8005a14 <checkDemoModCalisma+0x250>)
 8005882:	f004 fc78 	bl	800a176 <HAL_GPIO_WritePin>
 8005886:	e00b      	b.n	80058a0 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005888:	2200      	movs	r2, #0
 800588a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800588e:	4861      	ldr	r0, [pc, #388]	@ (8005a14 <checkDemoModCalisma+0x250>)
 8005890:	f004 fc71 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800589a:	485e      	ldr	r0, [pc, #376]	@ (8005a14 <checkDemoModCalisma+0x250>)
 800589c:	f004 fc6b 	bl	800a176 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058a0:	2102      	movs	r1, #2
 80058a2:	4858      	ldr	r0, [pc, #352]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80058a4:	f004 fc50 	bl	800a148 <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d10d      	bne.n	80058ca <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058b2:	4854      	ldr	r0, [pc, #336]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80058b4:	f004 fc48 	bl	800a148 <HAL_GPIO_ReadPin>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 80058be:	4b56      	ldr	r3, [pc, #344]	@ (8005a18 <checkDemoModCalisma+0x254>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	f083 0301 	eor.w	r3, r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058ca:	2102      	movs	r1, #2
 80058cc:	484d      	ldr	r0, [pc, #308]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80058ce:	f004 fc3b 	bl	800a148 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d125      	bne.n	8005924 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058dc:	4849      	ldr	r0, [pc, #292]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80058de:	f004 fc33 	bl	800a148 <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11d      	bne.n	8005924 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 80058e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a18 <checkDemoModCalisma+0x254>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f083 0301 	eor.w	r3, r3, #1
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 80058f6:	4b44      	ldr	r3, [pc, #272]	@ (8005a08 <checkDemoModCalisma+0x244>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f083 0301 	eor.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00f      	beq.n	8005924 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005904:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f083 0301 	eor.w	r3, r3, #1
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005912:	2201      	movs	r2, #1
 8005914:	2120      	movs	r1, #32
 8005916:	483b      	ldr	r0, [pc, #236]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005918:	f004 fc2d 	bl	800a176 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 800591c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a0c <checkDemoModCalisma+0x248>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e007      	b.n	8005934 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005924:	2200      	movs	r2, #0
 8005926:	2120      	movs	r1, #32
 8005928:	4836      	ldr	r0, [pc, #216]	@ (8005a04 <checkDemoModCalisma+0x240>)
 800592a:	f004 fc24 	bl	800a176 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 800592e:	4b37      	ldr	r3, [pc, #220]	@ (8005a0c <checkDemoModCalisma+0x248>)
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005934:	2102      	movs	r1, #2
 8005936:	4833      	ldr	r0, [pc, #204]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005938:	f004 fc06 	bl	800a148 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d125      	bne.n	800598e <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005946:	482f      	ldr	r0, [pc, #188]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005948:	f004 fbfe 	bl	800a148 <HAL_GPIO_ReadPin>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11d      	bne.n	800598e <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <checkDemoModCalisma+0x254>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f083 0301 	eor.w	r3, r3, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d016      	beq.n	800598e <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005960:	4b2a      	ldr	r3, [pc, #168]	@ (8005a0c <checkDemoModCalisma+0x248>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f083 0301 	eor.w	r3, r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 800596e:	4b26      	ldr	r3, [pc, #152]	@ (8005a08 <checkDemoModCalisma+0x244>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f083 0301 	eor.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800597c:	2201      	movs	r2, #1
 800597e:	2110      	movs	r1, #16
 8005980:	4820      	ldr	r0, [pc, #128]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005982:	f004 fbf8 	bl	800a176 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005986:	4b22      	ldr	r3, [pc, #136]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 8005988:	2201      	movs	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e007      	b.n	800599e <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800598e:	2200      	movs	r2, #0
 8005990:	2110      	movs	r1, #16
 8005992:	481c      	ldr	r0, [pc, #112]	@ (8005a04 <checkDemoModCalisma+0x240>)
 8005994:	f004 fbef 	bl	800a176 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005998:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800599e:	2104      	movs	r1, #4
 80059a0:	4818      	ldr	r0, [pc, #96]	@ (8005a04 <checkDemoModCalisma+0x240>)
 80059a2:	f004 fbd1 	bl	800a148 <HAL_GPIO_ReadPin>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d139      	bne.n	8005a20 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 80059ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <checkDemoModCalisma+0x254>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f083 0301 	eor.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d032      	beq.n	8005a20 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <checkDemoModCalisma+0x24c>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f083 0301 	eor.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02b      	beq.n	8005a20 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 80059c8:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <checkDemoModCalisma+0x248>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f083 0301 	eor.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d024      	beq.n	8005a20 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059d6:	2201      	movs	r2, #1
 80059d8:	2102      	movs	r1, #2
 80059da:	480e      	ldr	r0, [pc, #56]	@ (8005a14 <checkDemoModCalisma+0x250>)
 80059dc:	f004 fbcb 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059e0:	2201      	movs	r2, #1
 80059e2:	2101      	movs	r1, #1
 80059e4:	480b      	ldr	r0, [pc, #44]	@ (8005a14 <checkDemoModCalisma+0x250>)
 80059e6:	f004 fbc6 	bl	800a176 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 80059ea:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <checkDemoModCalisma+0x244>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <checkDemoModCalisma+0x258>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e027      	b.n	8005a48 <checkDemoModCalisma+0x284>
 80059f8:	200010da 	.word	0x200010da
 80059fc:	2000110d 	.word	0x2000110d
 8005a00:	200010d9 	.word	0x200010d9
 8005a04:	40011000 	.word	0x40011000
 8005a08:	20001114 	.word	0x20001114
 8005a0c:	20001115 	.word	0x20001115
 8005a10:	20001116 	.word	0x20001116
 8005a14:	40010c00 	.word	0x40010c00
 8005a18:	20001113 	.word	0x20001113
 8005a1c:	200010fa 	.word	0x200010fa
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005a20:	2104      	movs	r1, #4
 8005a22:	486d      	ldr	r0, [pc, #436]	@ (8005bd8 <checkDemoModCalisma+0x414>)
 8005a24:	f004 fb90 	bl	800a148 <HAL_GPIO_ReadPin>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d10c      	bne.n	8005a48 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2102      	movs	r1, #2
 8005a32:	486a      	ldr	r0, [pc, #424]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005a34:	f004 fb9f 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4867      	ldr	r0, [pc, #412]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005a3e:	f004 fb9a 	bl	800a176 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005a42:	4b67      	ldr	r3, [pc, #412]	@ (8005be0 <checkDemoModCalisma+0x41c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4863      	ldr	r0, [pc, #396]	@ (8005bd8 <checkDemoModCalisma+0x414>)
 8005a4c:	f004 fb7c 	bl	800a148 <HAL_GPIO_ReadPin>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10d      	bne.n	8005a72 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a56:	2201      	movs	r2, #1
 8005a58:	2180      	movs	r1, #128	@ 0x80
 8005a5a:	4862      	ldr	r0, [pc, #392]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005a5c:	f004 fb8b 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005a60:	2201      	movs	r2, #1
 8005a62:	2120      	movs	r1, #32
 8005a64:	485f      	ldr	r0, [pc, #380]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005a66:	f004 fb86 	bl	800a176 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005be8 <checkDemoModCalisma+0x424>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8005bec <checkDemoModCalisma+0x428>)
 8005a70:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005a72:	4b5d      	ldr	r3, [pc, #372]	@ (8005be8 <checkDemoModCalisma+0x424>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b5d      	ldr	r3, [pc, #372]	@ (8005bec <checkDemoModCalisma+0x428>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d909      	bls.n	8005a94 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	4857      	ldr	r0, [pc, #348]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005a86:	f004 fb76 	bl	800a176 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2120      	movs	r1, #32
 8005a8e:	4855      	ldr	r0, [pc, #340]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005a90:	f004 fb71 	bl	800a176 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a94:	2102      	movs	r1, #2
 8005a96:	4850      	ldr	r0, [pc, #320]	@ (8005bd8 <checkDemoModCalisma+0x414>)
 8005a98:	f004 fb56 	bl	800a148 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d108      	bne.n	8005ab4 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	2140      	movs	r1, #64	@ 0x40
 8005aa6:	484f      	ldr	r0, [pc, #316]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005aa8:	f004 fb65 	bl	800a176 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005aac:	4b4e      	ldr	r3, [pc, #312]	@ (8005be8 <checkDemoModCalisma+0x424>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8005bec <checkDemoModCalisma+0x428>)
 8005ab2:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8005be8 <checkDemoModCalisma+0x424>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8005bec <checkDemoModCalisma+0x428>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d904      	bls.n	8005acc <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2140      	movs	r1, #64	@ 0x40
 8005ac6:	4847      	ldr	r0, [pc, #284]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005ac8:	f004 fb55 	bl	800a176 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005acc:	4b48      	ldr	r3, [pc, #288]	@ (8005bf0 <checkDemoModCalisma+0x42c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d024      	beq.n	8005b1e <checkDemoModCalisma+0x35a>
 8005ad4:	4b47      	ldr	r3, [pc, #284]	@ (8005bf4 <checkDemoModCalisma+0x430>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d020      	beq.n	8005b1e <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005adc:	4b46      	ldr	r3, [pc, #280]	@ (8005bf8 <checkDemoModCalisma+0x434>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b44      	ldr	r3, [pc, #272]	@ (8005bf8 <checkDemoModCalisma+0x434>)
 8005ae6:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005ae8:	4b44      	ldr	r3, [pc, #272]	@ (8005bfc <checkDemoModCalisma+0x438>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2bff      	cmp	r3, #255	@ 0xff
 8005aee:	d108      	bne.n	8005b02 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005af0:	4b42      	ldr	r3, [pc, #264]	@ (8005bfc <checkDemoModCalisma+0x438>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005af6:	4b42      	ldr	r3, [pc, #264]	@ (8005c00 <checkDemoModCalisma+0x43c>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b40      	ldr	r3, [pc, #256]	@ (8005c00 <checkDemoModCalisma+0x43c>)
 8005b00:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005b02:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <checkDemoModCalisma+0x434>)
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b3f      	ldr	r3, [pc, #252]	@ (8005c04 <checkDemoModCalisma+0x440>)
 8005b08:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c08 <checkDemoModCalisma+0x444>)
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <checkDemoModCalisma+0x440>)
 8005b10:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005b12:	4b3e      	ldr	r3, [pc, #248]	@ (8005c0c <checkDemoModCalisma+0x448>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005b18:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <checkDemoModCalisma+0x430>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005c10 <checkDemoModCalisma+0x44c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d156      	bne.n	8005bd4 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005b26:	4a3b      	ldr	r2, [pc, #236]	@ (8005c14 <checkDemoModCalisma+0x450>)
 8005b28:	2101      	movs	r1, #1
 8005b2a:	2002      	movs	r0, #2
 8005b2c:	f002 ffd0 	bl	8008ad0 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005b30:	4a39      	ldr	r2, [pc, #228]	@ (8005c18 <checkDemoModCalisma+0x454>)
 8005b32:	2101      	movs	r1, #1
 8005b34:	2001      	movs	r0, #1
 8005b36:	f002 ffcb 	bl	8008ad0 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf8 <checkDemoModCalisma+0x434>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	220a      	movs	r2, #10
 8005b40:	4936      	ldr	r1, [pc, #216]	@ (8005c1c <checkDemoModCalisma+0x458>)
 8005b42:	4618      	mov	r0, r3
 8005b44:	f007 fb88 	bl	800d258 <itoa>
					lcd_print(2,11,snum);
 8005b48:	4a34      	ldr	r2, [pc, #208]	@ (8005c1c <checkDemoModCalisma+0x458>)
 8005b4a:	210b      	movs	r1, #11
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f002 ffbf 	bl	8008ad0 <lcd_print>
					mesajYazildi=1;
 8005b52:	4b33      	ldr	r3, [pc, #204]	@ (8005c20 <checkDemoModCalisma+0x45c>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005b58:	e03c      	b.n	8005bd4 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005b5a:	4b32      	ldr	r3, [pc, #200]	@ (8005c24 <checkDemoModCalisma+0x460>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d003      	beq.n	8005b6a <checkDemoModCalisma+0x3a6>
 8005b62:	4b2b      	ldr	r3, [pc, #172]	@ (8005c10 <checkDemoModCalisma+0x44c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d134      	bne.n	8005bd4 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b70:	481a      	ldr	r0, [pc, #104]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005b72:	f004 fb00 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b76:	2200      	movs	r2, #0
 8005b78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b7c:	4817      	ldr	r0, [pc, #92]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005b7e:	f004 fafa 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2104      	movs	r1, #4
 8005b86:	4815      	ldr	r0, [pc, #84]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005b88:	f004 faf5 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4812      	ldr	r0, [pc, #72]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005b92:	f004 faf0 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4810      	ldr	r0, [pc, #64]	@ (8005bdc <checkDemoModCalisma+0x418>)
 8005b9c:	f004 faeb 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2120      	movs	r1, #32
 8005ba4:	480c      	ldr	r0, [pc, #48]	@ (8005bd8 <checkDemoModCalisma+0x414>)
 8005ba6:	f004 fae6 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2110      	movs	r1, #16
 8005bae:	480a      	ldr	r0, [pc, #40]	@ (8005bd8 <checkDemoModCalisma+0x414>)
 8005bb0:	f004 fae1 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2180      	movs	r1, #128	@ 0x80
 8005bb8:	480a      	ldr	r0, [pc, #40]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005bba:	f004 fadc 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2140      	movs	r1, #64	@ 0x40
 8005bc2:	4808      	ldr	r0, [pc, #32]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005bc4:	f004 fad7 	bl	800a176 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2120      	movs	r1, #32
 8005bcc:	4805      	ldr	r0, [pc, #20]	@ (8005be4 <checkDemoModCalisma+0x420>)
 8005bce:	f004 fad2 	bl	800a176 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005bd2:	e7ff      	b.n	8005bd4 <checkDemoModCalisma+0x410>
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40010c00 	.word	0x40010c00
 8005be0:	20001114 	.word	0x20001114
 8005be4:	40010800 	.word	0x40010800
 8005be8:	20001094 	.word	0x20001094
 8005bec:	200010a4 	.word	0x200010a4
 8005bf0:	20001113 	.word	0x20001113
 8005bf4:	200010fa 	.word	0x200010fa
 8005bf8:	200010b5 	.word	0x200010b5
 8005bfc:	200010b4 	.word	0x200010b4
 8005c00:	200010b6 	.word	0x200010b6
 8005c04:	20000fec 	.word	0x20000fec
 8005c08:	200010b7 	.word	0x200010b7
 8005c0c:	200010e8 	.word	0x200010e8
 8005c10:	200010d9 	.word	0x200010d9
 8005c14:	0800e8a0 	.word	0x0800e8a0
 8005c18:	0800e8ac 	.word	0x0800e8ac
 8005c1c:	2000105c 	.word	0x2000105c
 8005c20:	200010f0 	.word	0x200010f0
 8005c24:	200010da 	.word	0x200010da

08005c28 <mainLoop>:

void mainLoop() {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005c2c:	f7fe f8b6 	bl	8003d9c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c30:	2101      	movs	r1, #1
 8005c32:	488b      	ldr	r0, [pc, #556]	@ (8005e60 <mainLoop+0x238>)
 8005c34:	f004 fa88 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d136      	bne.n	8005cac <mainLoop+0x84>
 8005c3e:	2108      	movs	r1, #8
 8005c40:	4888      	ldr	r0, [pc, #544]	@ (8005e64 <mainLoop+0x23c>)
 8005c42:	f004 fa81 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d12f      	bne.n	8005cac <mainLoop+0x84>
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4884      	ldr	r0, [pc, #528]	@ (8005e60 <mainLoop+0x238>)
 8005c50:	f004 fa7a 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d128      	bne.n	8005cac <mainLoop+0x84>
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	4880      	ldr	r0, [pc, #512]	@ (8005e60 <mainLoop+0x238>)
 8005c5e:	f004 fa73 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d121      	bne.n	8005cac <mainLoop+0x84>
 8005c68:	2108      	movs	r1, #8
 8005c6a:	487d      	ldr	r0, [pc, #500]	@ (8005e60 <mainLoop+0x238>)
 8005c6c:	f004 fa6c 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11a      	bne.n	8005cac <mainLoop+0x84>
 8005c76:	2180      	movs	r1, #128	@ 0x80
 8005c78:	487a      	ldr	r0, [pc, #488]	@ (8005e64 <mainLoop+0x23c>)
 8005c7a:	f004 fa65 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d113      	bne.n	8005cac <mainLoop+0x84>
 8005c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c88:	4876      	ldr	r0, [pc, #472]	@ (8005e64 <mainLoop+0x23c>)
 8005c8a:	f004 fa5d 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10b      	bne.n	8005cac <mainLoop+0x84>
 8005c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c98:	4872      	ldr	r0, [pc, #456]	@ (8005e64 <mainLoop+0x23c>)
 8005c9a:	f004 fa55 	bl	800a148 <HAL_GPIO_ReadPin>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d103      	bne.n	8005cac <mainLoop+0x84>
			butonKontrol=0;
 8005ca4:	4b70      	ldr	r3, [pc, #448]	@ (8005e68 <mainLoop+0x240>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e003      	b.n	8005cb4 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005cac:	4b6f      	ldr	r3, [pc, #444]	@ (8005e6c <mainLoop+0x244>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6f      	ldr	r2, [pc, #444]	@ (8005e70 <mainLoop+0x248>)
 8005cb2:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005cb4:	f7fe f924 	bl	8003f00 <buttonCheck>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d103      	bne.n	8005cc6 <mainLoop+0x9e>
			backLightTimer = millis;
 8005cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8005e6c <mainLoop+0x244>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8005e70 <mainLoop+0x248>)
 8005cc4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8005e74 <mainLoop+0x24c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <mainLoop+0xb2>
			hafizaYaz = 0;
 8005cce:	4b69      	ldr	r3, [pc, #420]	@ (8005e74 <mainLoop+0x24c>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	f7fa fce5 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005cda:	4b67      	ldr	r3, [pc, #412]	@ (8005e78 <mainLoop+0x250>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f083 0301 	eor.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d043      	beq.n	8005d70 <mainLoop+0x148>
 8005ce8:	4864      	ldr	r0, [pc, #400]	@ (8005e7c <mainLoop+0x254>)
 8005cea:	f005 f849 	bl	800ad80 <HAL_I2C_GetState>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d13d      	bne.n	8005d70 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005cf4:	4b62      	ldr	r3, [pc, #392]	@ (8005e80 <mainLoop+0x258>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f083 0301 	eor.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d028      	beq.n	8005d54 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005d02:	4a60      	ldr	r2, [pc, #384]	@ (8005e84 <mainLoop+0x25c>)
 8005d04:	2101      	movs	r1, #1
 8005d06:	2001      	movs	r0, #1
 8005d08:	f002 fee2 	bl	8008ad0 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005e88 <mainLoop+0x260>)
 8005d0e:	2101      	movs	r1, #1
 8005d10:	2002      	movs	r0, #2
 8005d12:	f002 fedd 	bl	8008ad0 <lcd_print>
			  HAL_Delay(1000);
 8005d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d1a:	f003 fc45 	bl	80095a8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d1e:	bf00      	nop
 8005d20:	4856      	ldr	r0, [pc, #344]	@ (8005e7c <mainLoop+0x254>)
 8005d22:	f005 f83a 	bl	800ad9a <HAL_I2C_GetError>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d0f9      	beq.n	8005d20 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d2c:	e003      	b.n	8005d36 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d32:	f003 fc39 	bl	80095a8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d36:	4851      	ldr	r0, [pc, #324]	@ (8005e7c <mainLoop+0x254>)
 8005d38:	f005 f822 	bl	800ad80 <HAL_I2C_GetState>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d1f5      	bne.n	8005d2e <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005d42:	4a52      	ldr	r2, [pc, #328]	@ (8005e8c <mainLoop+0x264>)
 8005d44:	2101      	movs	r1, #1
 8005d46:	2002      	movs	r0, #2
 8005d48:	f002 fec2 	bl	8008ad0 <lcd_print>

			  ilkOkuma=1;
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e80 <mainLoop+0x258>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e006      	b.n	8005d62 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005d54:	4a4e      	ldr	r2, [pc, #312]	@ (8005e90 <mainLoop+0x268>)
 8005d56:	2101      	movs	r1, #1
 8005d58:	2002      	movs	r0, #2
 8005d5a:	f002 feb9 	bl	8008ad0 <lcd_print>
			  lcd_clear();
 8005d5e:	f002 fee3 	bl	8008b28 <lcd_clear>
		  }

		  lcd_clear();
 8005d62:	f002 fee1 	bl	8008b28 <lcd_clear>

		  eepromKontrol();
 8005d66:	f7fa fa65 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005d6a:	4b43      	ldr	r3, [pc, #268]	@ (8005e78 <mainLoop+0x250>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005d70:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <mainLoop+0x26c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11c      	bne.n	8005db2 <mainLoop+0x18a>
 8005d78:	4b47      	ldr	r3, [pc, #284]	@ (8005e98 <mainLoop+0x270>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f083 0301 	eor.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d015      	beq.n	8005db2 <mainLoop+0x18a>
 8005d86:	4b45      	ldr	r3, [pc, #276]	@ (8005e9c <mainLoop+0x274>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d111      	bne.n	8005db2 <mainLoop+0x18a>
			lcd_clear();
 8005d8e:	f002 fecb 	bl	8008b28 <lcd_clear>
			HAL_Delay(10);
 8005d92:	200a      	movs	r0, #10
 8005d94:	f003 fc08 	bl	80095a8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005d98:	4a41      	ldr	r2, [pc, #260]	@ (8005ea0 <mainLoop+0x278>)
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	f002 fe97 	bl	8008ad0 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005da2:	4a40      	ldr	r2, [pc, #256]	@ (8005ea4 <mainLoop+0x27c>)
 8005da4:	2101      	movs	r1, #1
 8005da6:	2002      	movs	r0, #2
 8005da8:	f002 fe92 	bl	8008ad0 <lcd_print>
			mesajYazildi=1;
 8005dac:	4b3a      	ldr	r3, [pc, #232]	@ (8005e98 <mainLoop+0x270>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005db2:	4b38      	ldr	r3, [pc, #224]	@ (8005e94 <mainLoop+0x26c>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d112      	bne.n	8005de0 <mainLoop+0x1b8>
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4828      	ldr	r0, [pc, #160]	@ (8005e60 <mainLoop+0x238>)
 8005dbe:	f004 f9c3 	bl	800a148 <HAL_GPIO_ReadPin>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10b      	bne.n	8005de0 <mainLoop+0x1b8>
 8005dc8:	2104      	movs	r1, #4
 8005dca:	4825      	ldr	r0, [pc, #148]	@ (8005e60 <mainLoop+0x238>)
 8005dcc:	f004 f9bc 	bl	800a148 <HAL_GPIO_ReadPin>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d104      	bne.n	8005de0 <mainLoop+0x1b8>
			menuGiris=1;
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <mainLoop+0x26c>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005ddc:	f002 fea4 	bl	8008b28 <lcd_clear>
		}

		if(menuGiris==1) {
 8005de0:	4b2c      	ldr	r3, [pc, #176]	@ (8005e94 <mainLoop+0x26c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <mainLoop+0x1c4>
			menu();
 8005de8:	f7fb faa8 	bl	800133c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005df0:	481c      	ldr	r0, [pc, #112]	@ (8005e64 <mainLoop+0x23c>)
 8005df2:	f004 f9d8 	bl	800a1a6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005df6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005dfa:	482b      	ldr	r0, [pc, #172]	@ (8005ea8 <mainLoop+0x280>)
 8005dfc:	f004 f9a4 	bl	800a148 <HAL_GPIO_ReadPin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <mainLoop+0x1f4>
 8005e06:	4b29      	ldr	r3, [pc, #164]	@ (8005eac <mainLoop+0x284>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <mainLoop+0x1f4>
			stopVar=1;
 8005e14:	4b26      	ldr	r3, [pc, #152]	@ (8005eb0 <mainLoop+0x288>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <mainLoop+0x288>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005e22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e26:	4820      	ldr	r0, [pc, #128]	@ (8005ea8 <mainLoop+0x280>)
 8005e28:	f004 f98e 	bl	800a148 <HAL_GPIO_ReadPin>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d107      	bne.n	8005e42 <mainLoop+0x21a>
 8005e32:	4b20      	ldr	r3, [pc, #128]	@ (8005eb4 <mainLoop+0x28c>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <mainLoop+0x21a>
			EmnStopVar=1;
 8005e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb8 <mainLoop+0x290>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e002      	b.n	8005e48 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <mainLoop+0x290>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005e48:	f7fe f88e 	bl	8003f68 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005e4c:	f7fe f8c0 	bl	8003fd0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005e50:	f7fe f904 	bl	800405c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005e54:	f7fe f954 	bl	8004100 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005e58:	f7ff fcb4 	bl	80057c4 <checkDemoModCalisma>
		checkLCDBacklight();
 8005e5c:	e6e6      	b.n	8005c2c <mainLoop+0x4>
 8005e5e:	bf00      	nop
 8005e60:	40010800 	.word	0x40010800
 8005e64:	40011000 	.word	0x40011000
 8005e68:	200010eb 	.word	0x200010eb
 8005e6c:	20001094 	.word	0x20001094
 8005e70:	200010b0 	.word	0x200010b0
 8005e74:	200010e8 	.word	0x200010e8
 8005e78:	200010e9 	.word	0x200010e9
 8005e7c:	20001a38 	.word	0x20001a38
 8005e80:	200010ea 	.word	0x200010ea
 8005e84:	20000178 	.word	0x20000178
 8005e88:	20001970 	.word	0x20001970
 8005e8c:	20001984 	.word	0x20001984
 8005e90:	20001998 	.word	0x20001998
 8005e94:	200010d9 	.word	0x200010d9
 8005e98:	200010f0 	.word	0x200010f0
 8005e9c:	200010da 	.word	0x200010da
 8005ea0:	200000c4 	.word	0x200000c4
 8005ea4:	200000d8 	.word	0x200000d8
 8005ea8:	40010c00 	.word	0x40010c00
 8005eac:	20001110 	.word	0x20001110
 8005eb0:	2000110d 	.word	0x2000110d
 8005eb4:	2000111f 	.word	0x2000111f
 8005eb8:	20001120 	.word	0x20001120

08005ebc <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005ebc:	b5b0      	push	{r4, r5, r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 853d 	bne.w	8006948 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005ece:	4ac7      	ldr	r2, [pc, #796]	@ (80061ec <loadMenuTexts+0x330>)
 8005ed0:	4bc7      	ldr	r3, [pc, #796]	@ (80061f0 <loadMenuTexts+0x334>)
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	6828      	ldr	r0, [r5, #0]
 8005ed8:	6869      	ldr	r1, [r5, #4]
 8005eda:	68aa      	ldr	r2, [r5, #8]
 8005edc:	68eb      	ldr	r3, [r5, #12]
 8005ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee0:	7c2b      	ldrb	r3, [r5, #16]
 8005ee2:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005ee4:	4ac3      	ldr	r2, [pc, #780]	@ (80061f4 <loadMenuTexts+0x338>)
 8005ee6:	4bc4      	ldr	r3, [pc, #784]	@ (80061f8 <loadMenuTexts+0x33c>)
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	6828      	ldr	r0, [r5, #0]
 8005eee:	6869      	ldr	r1, [r5, #4]
 8005ef0:	68aa      	ldr	r2, [r5, #8]
 8005ef2:	68eb      	ldr	r3, [r5, #12]
 8005ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef6:	7c2b      	ldrb	r3, [r5, #16]
 8005ef8:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005efa:	4ac0      	ldr	r2, [pc, #768]	@ (80061fc <loadMenuTexts+0x340>)
 8005efc:	4bc0      	ldr	r3, [pc, #768]	@ (8006200 <loadMenuTexts+0x344>)
 8005efe:	4614      	mov	r4, r2
 8005f00:	461d      	mov	r5, r3
 8005f02:	6828      	ldr	r0, [r5, #0]
 8005f04:	6869      	ldr	r1, [r5, #4]
 8005f06:	68aa      	ldr	r2, [r5, #8]
 8005f08:	68eb      	ldr	r3, [r5, #12]
 8005f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0c:	7c2b      	ldrb	r3, [r5, #16]
 8005f0e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f10:	4abc      	ldr	r2, [pc, #752]	@ (8006204 <loadMenuTexts+0x348>)
 8005f12:	4bbd      	ldr	r3, [pc, #756]	@ (8006208 <loadMenuTexts+0x34c>)
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	6828      	ldr	r0, [r5, #0]
 8005f1a:	6869      	ldr	r1, [r5, #4]
 8005f1c:	68aa      	ldr	r2, [r5, #8]
 8005f1e:	68eb      	ldr	r3, [r5, #12]
 8005f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f22:	7c2b      	ldrb	r3, [r5, #16]
 8005f24:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005f26:	4ab9      	ldr	r2, [pc, #740]	@ (800620c <loadMenuTexts+0x350>)
 8005f28:	4bb9      	ldr	r3, [pc, #740]	@ (8006210 <loadMenuTexts+0x354>)
 8005f2a:	4614      	mov	r4, r2
 8005f2c:	461d      	mov	r5, r3
 8005f2e:	6828      	ldr	r0, [r5, #0]
 8005f30:	6869      	ldr	r1, [r5, #4]
 8005f32:	68aa      	ldr	r2, [r5, #8]
 8005f34:	68eb      	ldr	r3, [r5, #12]
 8005f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f38:	7c2b      	ldrb	r3, [r5, #16]
 8005f3a:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005f3c:	4ab5      	ldr	r2, [pc, #724]	@ (8006214 <loadMenuTexts+0x358>)
 8005f3e:	4bb6      	ldr	r3, [pc, #728]	@ (8006218 <loadMenuTexts+0x35c>)
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	6828      	ldr	r0, [r5, #0]
 8005f46:	6869      	ldr	r1, [r5, #4]
 8005f48:	68aa      	ldr	r2, [r5, #8]
 8005f4a:	68eb      	ldr	r3, [r5, #12]
 8005f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f4e:	7c2b      	ldrb	r3, [r5, #16]
 8005f50:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005f52:	4ab2      	ldr	r2, [pc, #712]	@ (800621c <loadMenuTexts+0x360>)
 8005f54:	4bb2      	ldr	r3, [pc, #712]	@ (8006220 <loadMenuTexts+0x364>)
 8005f56:	4614      	mov	r4, r2
 8005f58:	461d      	mov	r5, r3
 8005f5a:	6828      	ldr	r0, [r5, #0]
 8005f5c:	6869      	ldr	r1, [r5, #4]
 8005f5e:	68aa      	ldr	r2, [r5, #8]
 8005f60:	68eb      	ldr	r3, [r5, #12]
 8005f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f64:	7c2b      	ldrb	r3, [r5, #16]
 8005f66:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005f68:	4aae      	ldr	r2, [pc, #696]	@ (8006224 <loadMenuTexts+0x368>)
 8005f6a:	4baf      	ldr	r3, [pc, #700]	@ (8006228 <loadMenuTexts+0x36c>)
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	461d      	mov	r5, r3
 8005f70:	6828      	ldr	r0, [r5, #0]
 8005f72:	6869      	ldr	r1, [r5, #4]
 8005f74:	68aa      	ldr	r2, [r5, #8]
 8005f76:	68eb      	ldr	r3, [r5, #12]
 8005f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f7a:	7c2b      	ldrb	r3, [r5, #16]
 8005f7c:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005f7e:	4aab      	ldr	r2, [pc, #684]	@ (800622c <loadMenuTexts+0x370>)
 8005f80:	4bab      	ldr	r3, [pc, #684]	@ (8006230 <loadMenuTexts+0x374>)
 8005f82:	4614      	mov	r4, r2
 8005f84:	461d      	mov	r5, r3
 8005f86:	6828      	ldr	r0, [r5, #0]
 8005f88:	6869      	ldr	r1, [r5, #4]
 8005f8a:	68aa      	ldr	r2, [r5, #8]
 8005f8c:	68eb      	ldr	r3, [r5, #12]
 8005f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f90:	7c2b      	ldrb	r3, [r5, #16]
 8005f92:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005f94:	4aa7      	ldr	r2, [pc, #668]	@ (8006234 <loadMenuTexts+0x378>)
 8005f96:	4ba8      	ldr	r3, [pc, #672]	@ (8006238 <loadMenuTexts+0x37c>)
 8005f98:	4614      	mov	r4, r2
 8005f9a:	461d      	mov	r5, r3
 8005f9c:	6828      	ldr	r0, [r5, #0]
 8005f9e:	6869      	ldr	r1, [r5, #4]
 8005fa0:	68aa      	ldr	r2, [r5, #8]
 8005fa2:	68eb      	ldr	r3, [r5, #12]
 8005fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa6:	7c2b      	ldrb	r3, [r5, #16]
 8005fa8:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005faa:	4aa4      	ldr	r2, [pc, #656]	@ (800623c <loadMenuTexts+0x380>)
 8005fac:	4ba4      	ldr	r3, [pc, #656]	@ (8006240 <loadMenuTexts+0x384>)
 8005fae:	4614      	mov	r4, r2
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	6828      	ldr	r0, [r5, #0]
 8005fb4:	6869      	ldr	r1, [r5, #4]
 8005fb6:	68aa      	ldr	r2, [r5, #8]
 8005fb8:	68eb      	ldr	r3, [r5, #12]
 8005fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fbc:	7c2b      	ldrb	r3, [r5, #16]
 8005fbe:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8005fc0:	4aa0      	ldr	r2, [pc, #640]	@ (8006244 <loadMenuTexts+0x388>)
 8005fc2:	4ba1      	ldr	r3, [pc, #644]	@ (8006248 <loadMenuTexts+0x38c>)
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	6828      	ldr	r0, [r5, #0]
 8005fca:	6869      	ldr	r1, [r5, #4]
 8005fcc:	68aa      	ldr	r2, [r5, #8]
 8005fce:	68eb      	ldr	r3, [r5, #12]
 8005fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd2:	7c2b      	ldrb	r3, [r5, #16]
 8005fd4:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8005fd6:	4a9d      	ldr	r2, [pc, #628]	@ (800624c <loadMenuTexts+0x390>)
 8005fd8:	4b9d      	ldr	r3, [pc, #628]	@ (8006250 <loadMenuTexts+0x394>)
 8005fda:	4614      	mov	r4, r2
 8005fdc:	461d      	mov	r5, r3
 8005fde:	6828      	ldr	r0, [r5, #0]
 8005fe0:	6869      	ldr	r1, [r5, #4]
 8005fe2:	68aa      	ldr	r2, [r5, #8]
 8005fe4:	68eb      	ldr	r3, [r5, #12]
 8005fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe8:	7c2b      	ldrb	r3, [r5, #16]
 8005fea:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8005fec:	4a99      	ldr	r2, [pc, #612]	@ (8006254 <loadMenuTexts+0x398>)
 8005fee:	4b9a      	ldr	r3, [pc, #616]	@ (8006258 <loadMenuTexts+0x39c>)
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	6828      	ldr	r0, [r5, #0]
 8005ff6:	6869      	ldr	r1, [r5, #4]
 8005ff8:	68aa      	ldr	r2, [r5, #8]
 8005ffa:	68eb      	ldr	r3, [r5, #12]
 8005ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ffe:	7c2b      	ldrb	r3, [r5, #16]
 8006000:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006002:	4a96      	ldr	r2, [pc, #600]	@ (800625c <loadMenuTexts+0x3a0>)
 8006004:	4b96      	ldr	r3, [pc, #600]	@ (8006260 <loadMenuTexts+0x3a4>)
 8006006:	4614      	mov	r4, r2
 8006008:	461d      	mov	r5, r3
 800600a:	6828      	ldr	r0, [r5, #0]
 800600c:	6869      	ldr	r1, [r5, #4]
 800600e:	68aa      	ldr	r2, [r5, #8]
 8006010:	68eb      	ldr	r3, [r5, #12]
 8006012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006014:	7c2b      	ldrb	r3, [r5, #16]
 8006016:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006018:	4a92      	ldr	r2, [pc, #584]	@ (8006264 <loadMenuTexts+0x3a8>)
 800601a:	4b93      	ldr	r3, [pc, #588]	@ (8006268 <loadMenuTexts+0x3ac>)
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	6828      	ldr	r0, [r5, #0]
 8006022:	6869      	ldr	r1, [r5, #4]
 8006024:	68aa      	ldr	r2, [r5, #8]
 8006026:	68eb      	ldr	r3, [r5, #12]
 8006028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800602a:	7c2b      	ldrb	r3, [r5, #16]
 800602c:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800602e:	4a8f      	ldr	r2, [pc, #572]	@ (800626c <loadMenuTexts+0x3b0>)
 8006030:	4b8f      	ldr	r3, [pc, #572]	@ (8006270 <loadMenuTexts+0x3b4>)
 8006032:	4614      	mov	r4, r2
 8006034:	461d      	mov	r5, r3
 8006036:	6828      	ldr	r0, [r5, #0]
 8006038:	6869      	ldr	r1, [r5, #4]
 800603a:	68aa      	ldr	r2, [r5, #8]
 800603c:	68eb      	ldr	r3, [r5, #12]
 800603e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006040:	7c2b      	ldrb	r3, [r5, #16]
 8006042:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006044:	4a8b      	ldr	r2, [pc, #556]	@ (8006274 <loadMenuTexts+0x3b8>)
 8006046:	4b8c      	ldr	r3, [pc, #560]	@ (8006278 <loadMenuTexts+0x3bc>)
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	6828      	ldr	r0, [r5, #0]
 800604e:	6869      	ldr	r1, [r5, #4]
 8006050:	68aa      	ldr	r2, [r5, #8]
 8006052:	68eb      	ldr	r3, [r5, #12]
 8006054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006056:	7c2b      	ldrb	r3, [r5, #16]
 8006058:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 800605a:	4a88      	ldr	r2, [pc, #544]	@ (800627c <loadMenuTexts+0x3c0>)
 800605c:	4b88      	ldr	r3, [pc, #544]	@ (8006280 <loadMenuTexts+0x3c4>)
 800605e:	4614      	mov	r4, r2
 8006060:	461d      	mov	r5, r3
 8006062:	6828      	ldr	r0, [r5, #0]
 8006064:	6869      	ldr	r1, [r5, #4]
 8006066:	68aa      	ldr	r2, [r5, #8]
 8006068:	68eb      	ldr	r3, [r5, #12]
 800606a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800606c:	7c2b      	ldrb	r3, [r5, #16]
 800606e:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006070:	4a84      	ldr	r2, [pc, #528]	@ (8006284 <loadMenuTexts+0x3c8>)
 8006072:	4b85      	ldr	r3, [pc, #532]	@ (8006288 <loadMenuTexts+0x3cc>)
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	6828      	ldr	r0, [r5, #0]
 800607a:	6869      	ldr	r1, [r5, #4]
 800607c:	68aa      	ldr	r2, [r5, #8]
 800607e:	68eb      	ldr	r3, [r5, #12]
 8006080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006082:	7c2b      	ldrb	r3, [r5, #16]
 8006084:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006086:	4a81      	ldr	r2, [pc, #516]	@ (800628c <loadMenuTexts+0x3d0>)
 8006088:	4b81      	ldr	r3, [pc, #516]	@ (8006290 <loadMenuTexts+0x3d4>)
 800608a:	4614      	mov	r4, r2
 800608c:	461d      	mov	r5, r3
 800608e:	6828      	ldr	r0, [r5, #0]
 8006090:	6869      	ldr	r1, [r5, #4]
 8006092:	68aa      	ldr	r2, [r5, #8]
 8006094:	68eb      	ldr	r3, [r5, #12]
 8006096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006098:	7c2b      	ldrb	r3, [r5, #16]
 800609a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800609c:	4a7d      	ldr	r2, [pc, #500]	@ (8006294 <loadMenuTexts+0x3d8>)
 800609e:	4b7e      	ldr	r3, [pc, #504]	@ (8006298 <loadMenuTexts+0x3dc>)
 80060a0:	4614      	mov	r4, r2
 80060a2:	461d      	mov	r5, r3
 80060a4:	6828      	ldr	r0, [r5, #0]
 80060a6:	6869      	ldr	r1, [r5, #4]
 80060a8:	68aa      	ldr	r2, [r5, #8]
 80060aa:	68eb      	ldr	r3, [r5, #12]
 80060ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ae:	7c2b      	ldrb	r3, [r5, #16]
 80060b0:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80060b2:	4a7a      	ldr	r2, [pc, #488]	@ (800629c <loadMenuTexts+0x3e0>)
 80060b4:	4b7a      	ldr	r3, [pc, #488]	@ (80062a0 <loadMenuTexts+0x3e4>)
 80060b6:	4614      	mov	r4, r2
 80060b8:	461d      	mov	r5, r3
 80060ba:	6828      	ldr	r0, [r5, #0]
 80060bc:	6869      	ldr	r1, [r5, #4]
 80060be:	68aa      	ldr	r2, [r5, #8]
 80060c0:	68eb      	ldr	r3, [r5, #12]
 80060c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060c4:	7c2b      	ldrb	r3, [r5, #16]
 80060c6:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80060c8:	4a76      	ldr	r2, [pc, #472]	@ (80062a4 <loadMenuTexts+0x3e8>)
 80060ca:	4b77      	ldr	r3, [pc, #476]	@ (80062a8 <loadMenuTexts+0x3ec>)
 80060cc:	4614      	mov	r4, r2
 80060ce:	461d      	mov	r5, r3
 80060d0:	6828      	ldr	r0, [r5, #0]
 80060d2:	6869      	ldr	r1, [r5, #4]
 80060d4:	68aa      	ldr	r2, [r5, #8]
 80060d6:	68eb      	ldr	r3, [r5, #12]
 80060d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060da:	7c2b      	ldrb	r3, [r5, #16]
 80060dc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80060de:	4a73      	ldr	r2, [pc, #460]	@ (80062ac <loadMenuTexts+0x3f0>)
 80060e0:	4b73      	ldr	r3, [pc, #460]	@ (80062b0 <loadMenuTexts+0x3f4>)
 80060e2:	4614      	mov	r4, r2
 80060e4:	461d      	mov	r5, r3
 80060e6:	6828      	ldr	r0, [r5, #0]
 80060e8:	6869      	ldr	r1, [r5, #4]
 80060ea:	68aa      	ldr	r2, [r5, #8]
 80060ec:	68eb      	ldr	r3, [r5, #12]
 80060ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060f0:	7c2b      	ldrb	r3, [r5, #16]
 80060f2:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80060f4:	4a6f      	ldr	r2, [pc, #444]	@ (80062b4 <loadMenuTexts+0x3f8>)
 80060f6:	4b70      	ldr	r3, [pc, #448]	@ (80062b8 <loadMenuTexts+0x3fc>)
 80060f8:	4614      	mov	r4, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	6828      	ldr	r0, [r5, #0]
 80060fe:	6869      	ldr	r1, [r5, #4]
 8006100:	68aa      	ldr	r2, [r5, #8]
 8006102:	68eb      	ldr	r3, [r5, #12]
 8006104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006106:	7c2b      	ldrb	r3, [r5, #16]
 8006108:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800610a:	4a6c      	ldr	r2, [pc, #432]	@ (80062bc <loadMenuTexts+0x400>)
 800610c:	4b6c      	ldr	r3, [pc, #432]	@ (80062c0 <loadMenuTexts+0x404>)
 800610e:	4614      	mov	r4, r2
 8006110:	461d      	mov	r5, r3
 8006112:	6828      	ldr	r0, [r5, #0]
 8006114:	6869      	ldr	r1, [r5, #4]
 8006116:	68aa      	ldr	r2, [r5, #8]
 8006118:	68eb      	ldr	r3, [r5, #12]
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	7c2b      	ldrb	r3, [r5, #16]
 800611e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006120:	4a68      	ldr	r2, [pc, #416]	@ (80062c4 <loadMenuTexts+0x408>)
 8006122:	4b69      	ldr	r3, [pc, #420]	@ (80062c8 <loadMenuTexts+0x40c>)
 8006124:	4614      	mov	r4, r2
 8006126:	461d      	mov	r5, r3
 8006128:	6828      	ldr	r0, [r5, #0]
 800612a:	6869      	ldr	r1, [r5, #4]
 800612c:	68aa      	ldr	r2, [r5, #8]
 800612e:	68eb      	ldr	r3, [r5, #12]
 8006130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006132:	7c2b      	ldrb	r3, [r5, #16]
 8006134:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006136:	4a65      	ldr	r2, [pc, #404]	@ (80062cc <loadMenuTexts+0x410>)
 8006138:	4b65      	ldr	r3, [pc, #404]	@ (80062d0 <loadMenuTexts+0x414>)
 800613a:	4614      	mov	r4, r2
 800613c:	461d      	mov	r5, r3
 800613e:	6828      	ldr	r0, [r5, #0]
 8006140:	6869      	ldr	r1, [r5, #4]
 8006142:	68aa      	ldr	r2, [r5, #8]
 8006144:	68eb      	ldr	r3, [r5, #12]
 8006146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006148:	7c2b      	ldrb	r3, [r5, #16]
 800614a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 800614c:	4a61      	ldr	r2, [pc, #388]	@ (80062d4 <loadMenuTexts+0x418>)
 800614e:	4b62      	ldr	r3, [pc, #392]	@ (80062d8 <loadMenuTexts+0x41c>)
 8006150:	4614      	mov	r4, r2
 8006152:	461d      	mov	r5, r3
 8006154:	6828      	ldr	r0, [r5, #0]
 8006156:	6869      	ldr	r1, [r5, #4]
 8006158:	68aa      	ldr	r2, [r5, #8]
 800615a:	68eb      	ldr	r3, [r5, #12]
 800615c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615e:	7c2b      	ldrb	r3, [r5, #16]
 8006160:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006162:	4a5e      	ldr	r2, [pc, #376]	@ (80062dc <loadMenuTexts+0x420>)
 8006164:	4b5e      	ldr	r3, [pc, #376]	@ (80062e0 <loadMenuTexts+0x424>)
 8006166:	4614      	mov	r4, r2
 8006168:	461d      	mov	r5, r3
 800616a:	6828      	ldr	r0, [r5, #0]
 800616c:	6869      	ldr	r1, [r5, #4]
 800616e:	68aa      	ldr	r2, [r5, #8]
 8006170:	68eb      	ldr	r3, [r5, #12]
 8006172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006174:	7c2b      	ldrb	r3, [r5, #16]
 8006176:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006178:	4a5a      	ldr	r2, [pc, #360]	@ (80062e4 <loadMenuTexts+0x428>)
 800617a:	4b5b      	ldr	r3, [pc, #364]	@ (80062e8 <loadMenuTexts+0x42c>)
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	6828      	ldr	r0, [r5, #0]
 8006182:	6869      	ldr	r1, [r5, #4]
 8006184:	68aa      	ldr	r2, [r5, #8]
 8006186:	68eb      	ldr	r3, [r5, #12]
 8006188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618a:	7c2b      	ldrb	r3, [r5, #16]
 800618c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800618e:	4a57      	ldr	r2, [pc, #348]	@ (80062ec <loadMenuTexts+0x430>)
 8006190:	4b57      	ldr	r3, [pc, #348]	@ (80062f0 <loadMenuTexts+0x434>)
 8006192:	4614      	mov	r4, r2
 8006194:	461d      	mov	r5, r3
 8006196:	6828      	ldr	r0, [r5, #0]
 8006198:	6869      	ldr	r1, [r5, #4]
 800619a:	68aa      	ldr	r2, [r5, #8]
 800619c:	68eb      	ldr	r3, [r5, #12]
 800619e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a0:	7c2b      	ldrb	r3, [r5, #16]
 80061a2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80061a4:	4a53      	ldr	r2, [pc, #332]	@ (80062f4 <loadMenuTexts+0x438>)
 80061a6:	4b54      	ldr	r3, [pc, #336]	@ (80062f8 <loadMenuTexts+0x43c>)
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	6828      	ldr	r0, [r5, #0]
 80061ae:	6869      	ldr	r1, [r5, #4]
 80061b0:	68aa      	ldr	r2, [r5, #8]
 80061b2:	68eb      	ldr	r3, [r5, #12]
 80061b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b6:	7c2b      	ldrb	r3, [r5, #16]
 80061b8:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80061ba:	4a50      	ldr	r2, [pc, #320]	@ (80062fc <loadMenuTexts+0x440>)
 80061bc:	4b50      	ldr	r3, [pc, #320]	@ (8006300 <loadMenuTexts+0x444>)
 80061be:	4614      	mov	r4, r2
 80061c0:	461d      	mov	r5, r3
 80061c2:	6828      	ldr	r0, [r5, #0]
 80061c4:	6869      	ldr	r1, [r5, #4]
 80061c6:	68aa      	ldr	r2, [r5, #8]
 80061c8:	68eb      	ldr	r3, [r5, #12]
 80061ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061cc:	7c2b      	ldrb	r3, [r5, #16]
 80061ce:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80061d0:	4a4c      	ldr	r2, [pc, #304]	@ (8006304 <loadMenuTexts+0x448>)
 80061d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006308 <loadMenuTexts+0x44c>)
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	6828      	ldr	r0, [r5, #0]
 80061da:	6869      	ldr	r1, [r5, #4]
 80061dc:	68aa      	ldr	r2, [r5, #8]
 80061de:	68eb      	ldr	r3, [r5, #12]
 80061e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e2:	7c2b      	ldrb	r3, [r5, #16]
 80061e4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80061e6:	4a49      	ldr	r2, [pc, #292]	@ (800630c <loadMenuTexts+0x450>)
 80061e8:	e092      	b.n	8006310 <loadMenuTexts+0x454>
 80061ea:	bf00      	nop
 80061ec:	2000131c 	.word	0x2000131c
 80061f0:	2000018c 	.word	0x2000018c
 80061f4:	20001330 	.word	0x20001330
 80061f8:	200001a0 	.word	0x200001a0
 80061fc:	20001344 	.word	0x20001344
 8006200:	200001b4 	.word	0x200001b4
 8006204:	20001358 	.word	0x20001358
 8006208:	200001c8 	.word	0x200001c8
 800620c:	2000136c 	.word	0x2000136c
 8006210:	200001dc 	.word	0x200001dc
 8006214:	20001380 	.word	0x20001380
 8006218:	200001f0 	.word	0x200001f0
 800621c:	20001394 	.word	0x20001394
 8006220:	20000204 	.word	0x20000204
 8006224:	200013a8 	.word	0x200013a8
 8006228:	20000218 	.word	0x20000218
 800622c:	200013bc 	.word	0x200013bc
 8006230:	2000022c 	.word	0x2000022c
 8006234:	200013d0 	.word	0x200013d0
 8006238:	20000240 	.word	0x20000240
 800623c:	200013e4 	.word	0x200013e4
 8006240:	20000254 	.word	0x20000254
 8006244:	200013f8 	.word	0x200013f8
 8006248:	20000268 	.word	0x20000268
 800624c:	2000140c 	.word	0x2000140c
 8006250:	2000027c 	.word	0x2000027c
 8006254:	20001420 	.word	0x20001420
 8006258:	20000290 	.word	0x20000290
 800625c:	20001434 	.word	0x20001434
 8006260:	200002a4 	.word	0x200002a4
 8006264:	20001448 	.word	0x20001448
 8006268:	200002b8 	.word	0x200002b8
 800626c:	2000145c 	.word	0x2000145c
 8006270:	200002cc 	.word	0x200002cc
 8006274:	20001470 	.word	0x20001470
 8006278:	200002e0 	.word	0x200002e0
 800627c:	20001484 	.word	0x20001484
 8006280:	200002f4 	.word	0x200002f4
 8006284:	20001498 	.word	0x20001498
 8006288:	20000308 	.word	0x20000308
 800628c:	200014ac 	.word	0x200014ac
 8006290:	2000031c 	.word	0x2000031c
 8006294:	200014c0 	.word	0x200014c0
 8006298:	20000330 	.word	0x20000330
 800629c:	200014d4 	.word	0x200014d4
 80062a0:	20000344 	.word	0x20000344
 80062a4:	200014e8 	.word	0x200014e8
 80062a8:	20000358 	.word	0x20000358
 80062ac:	200014fc 	.word	0x200014fc
 80062b0:	2000036c 	.word	0x2000036c
 80062b4:	20001510 	.word	0x20001510
 80062b8:	20000380 	.word	0x20000380
 80062bc:	20001524 	.word	0x20001524
 80062c0:	20000394 	.word	0x20000394
 80062c4:	20001538 	.word	0x20001538
 80062c8:	200003a8 	.word	0x200003a8
 80062cc:	2000154c 	.word	0x2000154c
 80062d0:	200003bc 	.word	0x200003bc
 80062d4:	20001560 	.word	0x20001560
 80062d8:	200003d0 	.word	0x200003d0
 80062dc:	20001574 	.word	0x20001574
 80062e0:	200003e4 	.word	0x200003e4
 80062e4:	20001588 	.word	0x20001588
 80062e8:	200003f8 	.word	0x200003f8
 80062ec:	2000159c 	.word	0x2000159c
 80062f0:	2000040c 	.word	0x2000040c
 80062f4:	200015b0 	.word	0x200015b0
 80062f8:	20000420 	.word	0x20000420
 80062fc:	200015c4 	.word	0x200015c4
 8006300:	20000434 	.word	0x20000434
 8006304:	200015d8 	.word	0x200015d8
 8006308:	20000448 	.word	0x20000448
 800630c:	200015ec 	.word	0x200015ec
 8006310:	4bc7      	ldr	r3, [pc, #796]	@ (8006630 <loadMenuTexts+0x774>)
 8006312:	4614      	mov	r4, r2
 8006314:	461d      	mov	r5, r3
 8006316:	6828      	ldr	r0, [r5, #0]
 8006318:	6869      	ldr	r1, [r5, #4]
 800631a:	68aa      	ldr	r2, [r5, #8]
 800631c:	68eb      	ldr	r3, [r5, #12]
 800631e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006320:	7c2b      	ldrb	r3, [r5, #16]
 8006322:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006324:	4ac3      	ldr	r2, [pc, #780]	@ (8006634 <loadMenuTexts+0x778>)
 8006326:	4bc4      	ldr	r3, [pc, #784]	@ (8006638 <loadMenuTexts+0x77c>)
 8006328:	4614      	mov	r4, r2
 800632a:	461d      	mov	r5, r3
 800632c:	6828      	ldr	r0, [r5, #0]
 800632e:	6869      	ldr	r1, [r5, #4]
 8006330:	68aa      	ldr	r2, [r5, #8]
 8006332:	68eb      	ldr	r3, [r5, #12]
 8006334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006336:	7c2b      	ldrb	r3, [r5, #16]
 8006338:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 800633a:	4ac0      	ldr	r2, [pc, #768]	@ (800663c <loadMenuTexts+0x780>)
 800633c:	4bc0      	ldr	r3, [pc, #768]	@ (8006640 <loadMenuTexts+0x784>)
 800633e:	4614      	mov	r4, r2
 8006340:	461d      	mov	r5, r3
 8006342:	6828      	ldr	r0, [r5, #0]
 8006344:	6869      	ldr	r1, [r5, #4]
 8006346:	68aa      	ldr	r2, [r5, #8]
 8006348:	68eb      	ldr	r3, [r5, #12]
 800634a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800634c:	7c2b      	ldrb	r3, [r5, #16]
 800634e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006350:	4abc      	ldr	r2, [pc, #752]	@ (8006644 <loadMenuTexts+0x788>)
 8006352:	4bbd      	ldr	r3, [pc, #756]	@ (8006648 <loadMenuTexts+0x78c>)
 8006354:	4614      	mov	r4, r2
 8006356:	461d      	mov	r5, r3
 8006358:	6828      	ldr	r0, [r5, #0]
 800635a:	6869      	ldr	r1, [r5, #4]
 800635c:	68aa      	ldr	r2, [r5, #8]
 800635e:	68eb      	ldr	r3, [r5, #12]
 8006360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006362:	7c2b      	ldrb	r3, [r5, #16]
 8006364:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8006366:	4ab9      	ldr	r2, [pc, #740]	@ (800664c <loadMenuTexts+0x790>)
 8006368:	4bb9      	ldr	r3, [pc, #740]	@ (8006650 <loadMenuTexts+0x794>)
 800636a:	4614      	mov	r4, r2
 800636c:	461d      	mov	r5, r3
 800636e:	6828      	ldr	r0, [r5, #0]
 8006370:	6869      	ldr	r1, [r5, #4]
 8006372:	68aa      	ldr	r2, [r5, #8]
 8006374:	68eb      	ldr	r3, [r5, #12]
 8006376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006378:	7c2b      	ldrb	r3, [r5, #16]
 800637a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 800637c:	4ab5      	ldr	r2, [pc, #724]	@ (8006654 <loadMenuTexts+0x798>)
 800637e:	4bb6      	ldr	r3, [pc, #728]	@ (8006658 <loadMenuTexts+0x79c>)
 8006380:	4614      	mov	r4, r2
 8006382:	461d      	mov	r5, r3
 8006384:	6828      	ldr	r0, [r5, #0]
 8006386:	6869      	ldr	r1, [r5, #4]
 8006388:	68aa      	ldr	r2, [r5, #8]
 800638a:	68eb      	ldr	r3, [r5, #12]
 800638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638e:	7c2b      	ldrb	r3, [r5, #16]
 8006390:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006392:	4ab2      	ldr	r2, [pc, #712]	@ (800665c <loadMenuTexts+0x7a0>)
 8006394:	4bb2      	ldr	r3, [pc, #712]	@ (8006660 <loadMenuTexts+0x7a4>)
 8006396:	4614      	mov	r4, r2
 8006398:	461d      	mov	r5, r3
 800639a:	6828      	ldr	r0, [r5, #0]
 800639c:	6869      	ldr	r1, [r5, #4]
 800639e:	68aa      	ldr	r2, [r5, #8]
 80063a0:	68eb      	ldr	r3, [r5, #12]
 80063a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063a4:	7c2b      	ldrb	r3, [r5, #16]
 80063a6:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80063a8:	4aae      	ldr	r2, [pc, #696]	@ (8006664 <loadMenuTexts+0x7a8>)
 80063aa:	4baf      	ldr	r3, [pc, #700]	@ (8006668 <loadMenuTexts+0x7ac>)
 80063ac:	4614      	mov	r4, r2
 80063ae:	461d      	mov	r5, r3
 80063b0:	6828      	ldr	r0, [r5, #0]
 80063b2:	6869      	ldr	r1, [r5, #4]
 80063b4:	68aa      	ldr	r2, [r5, #8]
 80063b6:	68eb      	ldr	r3, [r5, #12]
 80063b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ba:	7c2b      	ldrb	r3, [r5, #16]
 80063bc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80063be:	4aab      	ldr	r2, [pc, #684]	@ (800666c <loadMenuTexts+0x7b0>)
 80063c0:	4bab      	ldr	r3, [pc, #684]	@ (8006670 <loadMenuTexts+0x7b4>)
 80063c2:	4614      	mov	r4, r2
 80063c4:	461d      	mov	r5, r3
 80063c6:	6828      	ldr	r0, [r5, #0]
 80063c8:	6869      	ldr	r1, [r5, #4]
 80063ca:	68aa      	ldr	r2, [r5, #8]
 80063cc:	68eb      	ldr	r3, [r5, #12]
 80063ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d0:	7c2b      	ldrb	r3, [r5, #16]
 80063d2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80063d4:	4aa7      	ldr	r2, [pc, #668]	@ (8006674 <loadMenuTexts+0x7b8>)
 80063d6:	4ba8      	ldr	r3, [pc, #672]	@ (8006678 <loadMenuTexts+0x7bc>)
 80063d8:	4614      	mov	r4, r2
 80063da:	461d      	mov	r5, r3
 80063dc:	6828      	ldr	r0, [r5, #0]
 80063de:	6869      	ldr	r1, [r5, #4]
 80063e0:	68aa      	ldr	r2, [r5, #8]
 80063e2:	68eb      	ldr	r3, [r5, #12]
 80063e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e6:	7c2b      	ldrb	r3, [r5, #16]
 80063e8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80063ea:	4aa4      	ldr	r2, [pc, #656]	@ (800667c <loadMenuTexts+0x7c0>)
 80063ec:	4ba4      	ldr	r3, [pc, #656]	@ (8006680 <loadMenuTexts+0x7c4>)
 80063ee:	4614      	mov	r4, r2
 80063f0:	461d      	mov	r5, r3
 80063f2:	6828      	ldr	r0, [r5, #0]
 80063f4:	6869      	ldr	r1, [r5, #4]
 80063f6:	68aa      	ldr	r2, [r5, #8]
 80063f8:	68eb      	ldr	r3, [r5, #12]
 80063fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063fc:	7c2b      	ldrb	r3, [r5, #16]
 80063fe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006400:	4aa0      	ldr	r2, [pc, #640]	@ (8006684 <loadMenuTexts+0x7c8>)
 8006402:	4ba1      	ldr	r3, [pc, #644]	@ (8006688 <loadMenuTexts+0x7cc>)
 8006404:	4614      	mov	r4, r2
 8006406:	461d      	mov	r5, r3
 8006408:	6828      	ldr	r0, [r5, #0]
 800640a:	6869      	ldr	r1, [r5, #4]
 800640c:	68aa      	ldr	r2, [r5, #8]
 800640e:	68eb      	ldr	r3, [r5, #12]
 8006410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006412:	7c2b      	ldrb	r3, [r5, #16]
 8006414:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006416:	4a9d      	ldr	r2, [pc, #628]	@ (800668c <loadMenuTexts+0x7d0>)
 8006418:	4b9d      	ldr	r3, [pc, #628]	@ (8006690 <loadMenuTexts+0x7d4>)
 800641a:	4614      	mov	r4, r2
 800641c:	461d      	mov	r5, r3
 800641e:	6828      	ldr	r0, [r5, #0]
 8006420:	6869      	ldr	r1, [r5, #4]
 8006422:	68aa      	ldr	r2, [r5, #8]
 8006424:	68eb      	ldr	r3, [r5, #12]
 8006426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006428:	7c2b      	ldrb	r3, [r5, #16]
 800642a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 800642c:	4a99      	ldr	r2, [pc, #612]	@ (8006694 <loadMenuTexts+0x7d8>)
 800642e:	4b9a      	ldr	r3, [pc, #616]	@ (8006698 <loadMenuTexts+0x7dc>)
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	6828      	ldr	r0, [r5, #0]
 8006436:	6869      	ldr	r1, [r5, #4]
 8006438:	68aa      	ldr	r2, [r5, #8]
 800643a:	68eb      	ldr	r3, [r5, #12]
 800643c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643e:	7c2b      	ldrb	r3, [r5, #16]
 8006440:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8006442:	4a96      	ldr	r2, [pc, #600]	@ (800669c <loadMenuTexts+0x7e0>)
 8006444:	4b96      	ldr	r3, [pc, #600]	@ (80066a0 <loadMenuTexts+0x7e4>)
 8006446:	4614      	mov	r4, r2
 8006448:	461d      	mov	r5, r3
 800644a:	6828      	ldr	r0, [r5, #0]
 800644c:	6869      	ldr	r1, [r5, #4]
 800644e:	68aa      	ldr	r2, [r5, #8]
 8006450:	68eb      	ldr	r3, [r5, #12]
 8006452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006454:	7c2b      	ldrb	r3, [r5, #16]
 8006456:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006458:	4a92      	ldr	r2, [pc, #584]	@ (80066a4 <loadMenuTexts+0x7e8>)
 800645a:	4b93      	ldr	r3, [pc, #588]	@ (80066a8 <loadMenuTexts+0x7ec>)
 800645c:	4614      	mov	r4, r2
 800645e:	461d      	mov	r5, r3
 8006460:	6828      	ldr	r0, [r5, #0]
 8006462:	6869      	ldr	r1, [r5, #4]
 8006464:	68aa      	ldr	r2, [r5, #8]
 8006466:	68eb      	ldr	r3, [r5, #12]
 8006468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646a:	7c2b      	ldrb	r3, [r5, #16]
 800646c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800646e:	4a8f      	ldr	r2, [pc, #572]	@ (80066ac <loadMenuTexts+0x7f0>)
 8006470:	4b8f      	ldr	r3, [pc, #572]	@ (80066b0 <loadMenuTexts+0x7f4>)
 8006472:	4614      	mov	r4, r2
 8006474:	461d      	mov	r5, r3
 8006476:	6828      	ldr	r0, [r5, #0]
 8006478:	6869      	ldr	r1, [r5, #4]
 800647a:	68aa      	ldr	r2, [r5, #8]
 800647c:	68eb      	ldr	r3, [r5, #12]
 800647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006480:	7c2b      	ldrb	r3, [r5, #16]
 8006482:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006484:	4a8b      	ldr	r2, [pc, #556]	@ (80066b4 <loadMenuTexts+0x7f8>)
 8006486:	4b8c      	ldr	r3, [pc, #560]	@ (80066b8 <loadMenuTexts+0x7fc>)
 8006488:	4614      	mov	r4, r2
 800648a:	461d      	mov	r5, r3
 800648c:	6828      	ldr	r0, [r5, #0]
 800648e:	6869      	ldr	r1, [r5, #4]
 8006490:	68aa      	ldr	r2, [r5, #8]
 8006492:	68eb      	ldr	r3, [r5, #12]
 8006494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006496:	7c2b      	ldrb	r3, [r5, #16]
 8006498:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800649a:	4a88      	ldr	r2, [pc, #544]	@ (80066bc <loadMenuTexts+0x800>)
 800649c:	4b88      	ldr	r3, [pc, #544]	@ (80066c0 <loadMenuTexts+0x804>)
 800649e:	4614      	mov	r4, r2
 80064a0:	461d      	mov	r5, r3
 80064a2:	6828      	ldr	r0, [r5, #0]
 80064a4:	6869      	ldr	r1, [r5, #4]
 80064a6:	68aa      	ldr	r2, [r5, #8]
 80064a8:	68eb      	ldr	r3, [r5, #12]
 80064aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ac:	7c2b      	ldrb	r3, [r5, #16]
 80064ae:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80064b0:	4a84      	ldr	r2, [pc, #528]	@ (80066c4 <loadMenuTexts+0x808>)
 80064b2:	4b85      	ldr	r3, [pc, #532]	@ (80066c8 <loadMenuTexts+0x80c>)
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	6828      	ldr	r0, [r5, #0]
 80064ba:	6869      	ldr	r1, [r5, #4]
 80064bc:	68aa      	ldr	r2, [r5, #8]
 80064be:	68eb      	ldr	r3, [r5, #12]
 80064c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c2:	7c2b      	ldrb	r3, [r5, #16]
 80064c4:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80064c6:	4a81      	ldr	r2, [pc, #516]	@ (80066cc <loadMenuTexts+0x810>)
 80064c8:	4b81      	ldr	r3, [pc, #516]	@ (80066d0 <loadMenuTexts+0x814>)
 80064ca:	4614      	mov	r4, r2
 80064cc:	461d      	mov	r5, r3
 80064ce:	6828      	ldr	r0, [r5, #0]
 80064d0:	6869      	ldr	r1, [r5, #4]
 80064d2:	68aa      	ldr	r2, [r5, #8]
 80064d4:	68eb      	ldr	r3, [r5, #12]
 80064d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d8:	7c2b      	ldrb	r3, [r5, #16]
 80064da:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80064dc:	4a7d      	ldr	r2, [pc, #500]	@ (80066d4 <loadMenuTexts+0x818>)
 80064de:	4b7e      	ldr	r3, [pc, #504]	@ (80066d8 <loadMenuTexts+0x81c>)
 80064e0:	4614      	mov	r4, r2
 80064e2:	461d      	mov	r5, r3
 80064e4:	6828      	ldr	r0, [r5, #0]
 80064e6:	6869      	ldr	r1, [r5, #4]
 80064e8:	68aa      	ldr	r2, [r5, #8]
 80064ea:	68eb      	ldr	r3, [r5, #12]
 80064ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ee:	7c2b      	ldrb	r3, [r5, #16]
 80064f0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80064f2:	4a7a      	ldr	r2, [pc, #488]	@ (80066dc <loadMenuTexts+0x820>)
 80064f4:	4b7a      	ldr	r3, [pc, #488]	@ (80066e0 <loadMenuTexts+0x824>)
 80064f6:	4614      	mov	r4, r2
 80064f8:	461d      	mov	r5, r3
 80064fa:	6828      	ldr	r0, [r5, #0]
 80064fc:	6869      	ldr	r1, [r5, #4]
 80064fe:	68aa      	ldr	r2, [r5, #8]
 8006500:	68eb      	ldr	r3, [r5, #12]
 8006502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006504:	7c2b      	ldrb	r3, [r5, #16]
 8006506:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006508:	4a76      	ldr	r2, [pc, #472]	@ (80066e4 <loadMenuTexts+0x828>)
 800650a:	4b77      	ldr	r3, [pc, #476]	@ (80066e8 <loadMenuTexts+0x82c>)
 800650c:	4614      	mov	r4, r2
 800650e:	461d      	mov	r5, r3
 8006510:	6828      	ldr	r0, [r5, #0]
 8006512:	6869      	ldr	r1, [r5, #4]
 8006514:	68aa      	ldr	r2, [r5, #8]
 8006516:	68eb      	ldr	r3, [r5, #12]
 8006518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651a:	7c2b      	ldrb	r3, [r5, #16]
 800651c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800651e:	4a73      	ldr	r2, [pc, #460]	@ (80066ec <loadMenuTexts+0x830>)
 8006520:	4b73      	ldr	r3, [pc, #460]	@ (80066f0 <loadMenuTexts+0x834>)
 8006522:	4614      	mov	r4, r2
 8006524:	461d      	mov	r5, r3
 8006526:	6828      	ldr	r0, [r5, #0]
 8006528:	6869      	ldr	r1, [r5, #4]
 800652a:	68aa      	ldr	r2, [r5, #8]
 800652c:	68eb      	ldr	r3, [r5, #12]
 800652e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006530:	7c2b      	ldrb	r3, [r5, #16]
 8006532:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006534:	4a6f      	ldr	r2, [pc, #444]	@ (80066f4 <loadMenuTexts+0x838>)
 8006536:	4b70      	ldr	r3, [pc, #448]	@ (80066f8 <loadMenuTexts+0x83c>)
 8006538:	4614      	mov	r4, r2
 800653a:	461d      	mov	r5, r3
 800653c:	6828      	ldr	r0, [r5, #0]
 800653e:	6869      	ldr	r1, [r5, #4]
 8006540:	68aa      	ldr	r2, [r5, #8]
 8006542:	68eb      	ldr	r3, [r5, #12]
 8006544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006546:	7c2b      	ldrb	r3, [r5, #16]
 8006548:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800654a:	4a6c      	ldr	r2, [pc, #432]	@ (80066fc <loadMenuTexts+0x840>)
 800654c:	4b6c      	ldr	r3, [pc, #432]	@ (8006700 <loadMenuTexts+0x844>)
 800654e:	4614      	mov	r4, r2
 8006550:	461d      	mov	r5, r3
 8006552:	6828      	ldr	r0, [r5, #0]
 8006554:	6869      	ldr	r1, [r5, #4]
 8006556:	68aa      	ldr	r2, [r5, #8]
 8006558:	68eb      	ldr	r3, [r5, #12]
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	7c2b      	ldrb	r3, [r5, #16]
 800655e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006560:	4a68      	ldr	r2, [pc, #416]	@ (8006704 <loadMenuTexts+0x848>)
 8006562:	4b69      	ldr	r3, [pc, #420]	@ (8006708 <loadMenuTexts+0x84c>)
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	6828      	ldr	r0, [r5, #0]
 800656a:	6869      	ldr	r1, [r5, #4]
 800656c:	68aa      	ldr	r2, [r5, #8]
 800656e:	68eb      	ldr	r3, [r5, #12]
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	7c2b      	ldrb	r3, [r5, #16]
 8006574:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006576:	4a65      	ldr	r2, [pc, #404]	@ (800670c <loadMenuTexts+0x850>)
 8006578:	4b65      	ldr	r3, [pc, #404]	@ (8006710 <loadMenuTexts+0x854>)
 800657a:	4614      	mov	r4, r2
 800657c:	461d      	mov	r5, r3
 800657e:	6828      	ldr	r0, [r5, #0]
 8006580:	6869      	ldr	r1, [r5, #4]
 8006582:	68aa      	ldr	r2, [r5, #8]
 8006584:	68eb      	ldr	r3, [r5, #12]
 8006586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006588:	7c2b      	ldrb	r3, [r5, #16]
 800658a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 800658c:	4a61      	ldr	r2, [pc, #388]	@ (8006714 <loadMenuTexts+0x858>)
 800658e:	4b62      	ldr	r3, [pc, #392]	@ (8006718 <loadMenuTexts+0x85c>)
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	6828      	ldr	r0, [r5, #0]
 8006596:	6869      	ldr	r1, [r5, #4]
 8006598:	68aa      	ldr	r2, [r5, #8]
 800659a:	68eb      	ldr	r3, [r5, #12]
 800659c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659e:	7c2b      	ldrb	r3, [r5, #16]
 80065a0:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80065a2:	4a5e      	ldr	r2, [pc, #376]	@ (800671c <loadMenuTexts+0x860>)
 80065a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006720 <loadMenuTexts+0x864>)
 80065a6:	4614      	mov	r4, r2
 80065a8:	461d      	mov	r5, r3
 80065aa:	6828      	ldr	r0, [r5, #0]
 80065ac:	6869      	ldr	r1, [r5, #4]
 80065ae:	68aa      	ldr	r2, [r5, #8]
 80065b0:	68eb      	ldr	r3, [r5, #12]
 80065b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b4:	7c2b      	ldrb	r3, [r5, #16]
 80065b6:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80065b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006724 <loadMenuTexts+0x868>)
 80065ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006728 <loadMenuTexts+0x86c>)
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	6828      	ldr	r0, [r5, #0]
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	68aa      	ldr	r2, [r5, #8]
 80065c6:	68eb      	ldr	r3, [r5, #12]
 80065c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ca:	7c2b      	ldrb	r3, [r5, #16]
 80065cc:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80065ce:	4a57      	ldr	r2, [pc, #348]	@ (800672c <loadMenuTexts+0x870>)
 80065d0:	4b57      	ldr	r3, [pc, #348]	@ (8006730 <loadMenuTexts+0x874>)
 80065d2:	4614      	mov	r4, r2
 80065d4:	461d      	mov	r5, r3
 80065d6:	6828      	ldr	r0, [r5, #0]
 80065d8:	6869      	ldr	r1, [r5, #4]
 80065da:	68aa      	ldr	r2, [r5, #8]
 80065dc:	68eb      	ldr	r3, [r5, #12]
 80065de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e0:	7c2b      	ldrb	r3, [r5, #16]
 80065e2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80065e4:	4a53      	ldr	r2, [pc, #332]	@ (8006734 <loadMenuTexts+0x878>)
 80065e6:	4b54      	ldr	r3, [pc, #336]	@ (8006738 <loadMenuTexts+0x87c>)
 80065e8:	4614      	mov	r4, r2
 80065ea:	461d      	mov	r5, r3
 80065ec:	6828      	ldr	r0, [r5, #0]
 80065ee:	6869      	ldr	r1, [r5, #4]
 80065f0:	68aa      	ldr	r2, [r5, #8]
 80065f2:	68eb      	ldr	r3, [r5, #12]
 80065f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f6:	7c2b      	ldrb	r3, [r5, #16]
 80065f8:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 80065fa:	4a50      	ldr	r2, [pc, #320]	@ (800673c <loadMenuTexts+0x880>)
 80065fc:	4b50      	ldr	r3, [pc, #320]	@ (8006740 <loadMenuTexts+0x884>)
 80065fe:	4614      	mov	r4, r2
 8006600:	461d      	mov	r5, r3
 8006602:	6828      	ldr	r0, [r5, #0]
 8006604:	6869      	ldr	r1, [r5, #4]
 8006606:	68aa      	ldr	r2, [r5, #8]
 8006608:	68eb      	ldr	r3, [r5, #12]
 800660a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660c:	7c2b      	ldrb	r3, [r5, #16]
 800660e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006610:	4a4c      	ldr	r2, [pc, #304]	@ (8006744 <loadMenuTexts+0x888>)
 8006612:	4b4d      	ldr	r3, [pc, #308]	@ (8006748 <loadMenuTexts+0x88c>)
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	6828      	ldr	r0, [r5, #0]
 800661a:	6869      	ldr	r1, [r5, #4]
 800661c:	68aa      	ldr	r2, [r5, #8]
 800661e:	68eb      	ldr	r3, [r5, #12]
 8006620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006622:	7c2b      	ldrb	r3, [r5, #16]
 8006624:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006626:	4a49      	ldr	r2, [pc, #292]	@ (800674c <loadMenuTexts+0x890>)
 8006628:	4b49      	ldr	r3, [pc, #292]	@ (8006750 <loadMenuTexts+0x894>)
 800662a:	4614      	mov	r4, r2
 800662c:	461d      	mov	r5, r3
 800662e:	e091      	b.n	8006754 <loadMenuTexts+0x898>
 8006630:	2000045c 	.word	0x2000045c
 8006634:	20001600 	.word	0x20001600
 8006638:	20000470 	.word	0x20000470
 800663c:	20001614 	.word	0x20001614
 8006640:	20000484 	.word	0x20000484
 8006644:	20001628 	.word	0x20001628
 8006648:	20000498 	.word	0x20000498
 800664c:	2000163c 	.word	0x2000163c
 8006650:	200004ac 	.word	0x200004ac
 8006654:	20001650 	.word	0x20001650
 8006658:	200004c0 	.word	0x200004c0
 800665c:	20001664 	.word	0x20001664
 8006660:	200004d4 	.word	0x200004d4
 8006664:	20001678 	.word	0x20001678
 8006668:	200004e8 	.word	0x200004e8
 800666c:	2000168c 	.word	0x2000168c
 8006670:	200004fc 	.word	0x200004fc
 8006674:	200016a0 	.word	0x200016a0
 8006678:	20000510 	.word	0x20000510
 800667c:	200016b4 	.word	0x200016b4
 8006680:	20000524 	.word	0x20000524
 8006684:	200016c8 	.word	0x200016c8
 8006688:	20000538 	.word	0x20000538
 800668c:	200016dc 	.word	0x200016dc
 8006690:	2000054c 	.word	0x2000054c
 8006694:	200016f0 	.word	0x200016f0
 8006698:	20000560 	.word	0x20000560
 800669c:	20001704 	.word	0x20001704
 80066a0:	20000574 	.word	0x20000574
 80066a4:	20001718 	.word	0x20001718
 80066a8:	20000588 	.word	0x20000588
 80066ac:	2000172c 	.word	0x2000172c
 80066b0:	2000059c 	.word	0x2000059c
 80066b4:	20001740 	.word	0x20001740
 80066b8:	200005b0 	.word	0x200005b0
 80066bc:	20001754 	.word	0x20001754
 80066c0:	200005c4 	.word	0x200005c4
 80066c4:	20001768 	.word	0x20001768
 80066c8:	200005d8 	.word	0x200005d8
 80066cc:	2000177c 	.word	0x2000177c
 80066d0:	200005ec 	.word	0x200005ec
 80066d4:	20001790 	.word	0x20001790
 80066d8:	20000600 	.word	0x20000600
 80066dc:	200017a4 	.word	0x200017a4
 80066e0:	20000614 	.word	0x20000614
 80066e4:	200017b8 	.word	0x200017b8
 80066e8:	20000628 	.word	0x20000628
 80066ec:	200017cc 	.word	0x200017cc
 80066f0:	2000063c 	.word	0x2000063c
 80066f4:	200017e0 	.word	0x200017e0
 80066f8:	20000650 	.word	0x20000650
 80066fc:	200017f4 	.word	0x200017f4
 8006700:	20000664 	.word	0x20000664
 8006704:	20001808 	.word	0x20001808
 8006708:	20000678 	.word	0x20000678
 800670c:	2000181c 	.word	0x2000181c
 8006710:	2000068c 	.word	0x2000068c
 8006714:	20001830 	.word	0x20001830
 8006718:	200006a0 	.word	0x200006a0
 800671c:	20001844 	.word	0x20001844
 8006720:	200006b4 	.word	0x200006b4
 8006724:	20001858 	.word	0x20001858
 8006728:	200006c8 	.word	0x200006c8
 800672c:	2000186c 	.word	0x2000186c
 8006730:	200006dc 	.word	0x200006dc
 8006734:	20001880 	.word	0x20001880
 8006738:	200006f0 	.word	0x200006f0
 800673c:	20001894 	.word	0x20001894
 8006740:	20000c7c 	.word	0x20000c7c
 8006744:	200018a8 	.word	0x200018a8
 8006748:	20000c90 	.word	0x20000c90
 800674c:	200018bc 	.word	0x200018bc
 8006750:	20000ca4 	.word	0x20000ca4
 8006754:	6828      	ldr	r0, [r5, #0]
 8006756:	6869      	ldr	r1, [r5, #4]
 8006758:	68aa      	ldr	r2, [r5, #8]
 800675a:	68eb      	ldr	r3, [r5, #12]
 800675c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675e:	7c2b      	ldrb	r3, [r5, #16]
 8006760:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006762:	4a59      	ldr	r2, [pc, #356]	@ (80068c8 <loadMenuTexts+0xa0c>)
 8006764:	4b59      	ldr	r3, [pc, #356]	@ (80068cc <loadMenuTexts+0xa10>)
 8006766:	4614      	mov	r4, r2
 8006768:	461d      	mov	r5, r3
 800676a:	6828      	ldr	r0, [r5, #0]
 800676c:	6869      	ldr	r1, [r5, #4]
 800676e:	68aa      	ldr	r2, [r5, #8]
 8006770:	68eb      	ldr	r3, [r5, #12]
 8006772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006774:	7c2b      	ldrb	r3, [r5, #16]
 8006776:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006778:	4a55      	ldr	r2, [pc, #340]	@ (80068d0 <loadMenuTexts+0xa14>)
 800677a:	4b56      	ldr	r3, [pc, #344]	@ (80068d4 <loadMenuTexts+0xa18>)
 800677c:	4614      	mov	r4, r2
 800677e:	461d      	mov	r5, r3
 8006780:	6828      	ldr	r0, [r5, #0]
 8006782:	6869      	ldr	r1, [r5, #4]
 8006784:	68aa      	ldr	r2, [r5, #8]
 8006786:	68eb      	ldr	r3, [r5, #12]
 8006788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678a:	7c2b      	ldrb	r3, [r5, #16]
 800678c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 800678e:	4a52      	ldr	r2, [pc, #328]	@ (80068d8 <loadMenuTexts+0xa1c>)
 8006790:	4b52      	ldr	r3, [pc, #328]	@ (80068dc <loadMenuTexts+0xa20>)
 8006792:	4614      	mov	r4, r2
 8006794:	461d      	mov	r5, r3
 8006796:	6828      	ldr	r0, [r5, #0]
 8006798:	6869      	ldr	r1, [r5, #4]
 800679a:	68aa      	ldr	r2, [r5, #8]
 800679c:	68eb      	ldr	r3, [r5, #12]
 800679e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a0:	7c2b      	ldrb	r3, [r5, #16]
 80067a2:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80067a4:	4a4e      	ldr	r2, [pc, #312]	@ (80068e0 <loadMenuTexts+0xa24>)
 80067a6:	4b4f      	ldr	r3, [pc, #316]	@ (80068e4 <loadMenuTexts+0xa28>)
 80067a8:	4614      	mov	r4, r2
 80067aa:	461d      	mov	r5, r3
 80067ac:	6828      	ldr	r0, [r5, #0]
 80067ae:	6869      	ldr	r1, [r5, #4]
 80067b0:	68aa      	ldr	r2, [r5, #8]
 80067b2:	68eb      	ldr	r3, [r5, #12]
 80067b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b6:	7c2b      	ldrb	r3, [r5, #16]
 80067b8:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80067ba:	4a4b      	ldr	r2, [pc, #300]	@ (80068e8 <loadMenuTexts+0xa2c>)
 80067bc:	4b4b      	ldr	r3, [pc, #300]	@ (80068ec <loadMenuTexts+0xa30>)
 80067be:	4614      	mov	r4, r2
 80067c0:	461d      	mov	r5, r3
 80067c2:	6828      	ldr	r0, [r5, #0]
 80067c4:	6869      	ldr	r1, [r5, #4]
 80067c6:	68aa      	ldr	r2, [r5, #8]
 80067c8:	68eb      	ldr	r3, [r5, #12]
 80067ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067cc:	7c2b      	ldrb	r3, [r5, #16]
 80067ce:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80067d0:	4a47      	ldr	r2, [pc, #284]	@ (80068f0 <loadMenuTexts+0xa34>)
 80067d2:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <loadMenuTexts+0xa38>)
 80067d4:	4614      	mov	r4, r2
 80067d6:	461d      	mov	r5, r3
 80067d8:	6828      	ldr	r0, [r5, #0]
 80067da:	6869      	ldr	r1, [r5, #4]
 80067dc:	68aa      	ldr	r2, [r5, #8]
 80067de:	68eb      	ldr	r3, [r5, #12]
 80067e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e2:	7c2b      	ldrb	r3, [r5, #16]
 80067e4:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80067e6:	4a44      	ldr	r2, [pc, #272]	@ (80068f8 <loadMenuTexts+0xa3c>)
 80067e8:	4b44      	ldr	r3, [pc, #272]	@ (80068fc <loadMenuTexts+0xa40>)
 80067ea:	4614      	mov	r4, r2
 80067ec:	461d      	mov	r5, r3
 80067ee:	6828      	ldr	r0, [r5, #0]
 80067f0:	6869      	ldr	r1, [r5, #4]
 80067f2:	68aa      	ldr	r2, [r5, #8]
 80067f4:	68eb      	ldr	r3, [r5, #12]
 80067f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f8:	7c2b      	ldrb	r3, [r5, #16]
 80067fa:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80067fc:	4a40      	ldr	r2, [pc, #256]	@ (8006900 <loadMenuTexts+0xa44>)
 80067fe:	4b41      	ldr	r3, [pc, #260]	@ (8006904 <loadMenuTexts+0xa48>)
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	6828      	ldr	r0, [r5, #0]
 8006806:	6869      	ldr	r1, [r5, #4]
 8006808:	68aa      	ldr	r2, [r5, #8]
 800680a:	68eb      	ldr	r3, [r5, #12]
 800680c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800680e:	7c2b      	ldrb	r3, [r5, #16]
 8006810:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006812:	4a3d      	ldr	r2, [pc, #244]	@ (8006908 <loadMenuTexts+0xa4c>)
 8006814:	4b3d      	ldr	r3, [pc, #244]	@ (800690c <loadMenuTexts+0xa50>)
 8006816:	4614      	mov	r4, r2
 8006818:	461d      	mov	r5, r3
 800681a:	6828      	ldr	r0, [r5, #0]
 800681c:	6869      	ldr	r1, [r5, #4]
 800681e:	68aa      	ldr	r2, [r5, #8]
 8006820:	68eb      	ldr	r3, [r5, #12]
 8006822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006824:	7c2b      	ldrb	r3, [r5, #16]
 8006826:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006828:	4a39      	ldr	r2, [pc, #228]	@ (8006910 <loadMenuTexts+0xa54>)
 800682a:	4b3a      	ldr	r3, [pc, #232]	@ (8006914 <loadMenuTexts+0xa58>)
 800682c:	4614      	mov	r4, r2
 800682e:	461d      	mov	r5, r3
 8006830:	6828      	ldr	r0, [r5, #0]
 8006832:	6869      	ldr	r1, [r5, #4]
 8006834:	68aa      	ldr	r2, [r5, #8]
 8006836:	68eb      	ldr	r3, [r5, #12]
 8006838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683a:	7c2b      	ldrb	r3, [r5, #16]
 800683c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800683e:	4a36      	ldr	r2, [pc, #216]	@ (8006918 <loadMenuTexts+0xa5c>)
 8006840:	4b36      	ldr	r3, [pc, #216]	@ (800691c <loadMenuTexts+0xa60>)
 8006842:	4614      	mov	r4, r2
 8006844:	461d      	mov	r5, r3
 8006846:	6828      	ldr	r0, [r5, #0]
 8006848:	6869      	ldr	r1, [r5, #4]
 800684a:	68aa      	ldr	r2, [r5, #8]
 800684c:	68eb      	ldr	r3, [r5, #12]
 800684e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006850:	7c2b      	ldrb	r3, [r5, #16]
 8006852:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006854:	4a32      	ldr	r2, [pc, #200]	@ (8006920 <loadMenuTexts+0xa64>)
 8006856:	4b33      	ldr	r3, [pc, #204]	@ (8006924 <loadMenuTexts+0xa68>)
 8006858:	4614      	mov	r4, r2
 800685a:	461d      	mov	r5, r3
 800685c:	6828      	ldr	r0, [r5, #0]
 800685e:	6869      	ldr	r1, [r5, #4]
 8006860:	68aa      	ldr	r2, [r5, #8]
 8006862:	68eb      	ldr	r3, [r5, #12]
 8006864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006866:	7c2b      	ldrb	r3, [r5, #16]
 8006868:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 800686a:	4a2f      	ldr	r2, [pc, #188]	@ (8006928 <loadMenuTexts+0xa6c>)
 800686c:	4b2f      	ldr	r3, [pc, #188]	@ (800692c <loadMenuTexts+0xa70>)
 800686e:	4614      	mov	r4, r2
 8006870:	461d      	mov	r5, r3
 8006872:	6828      	ldr	r0, [r5, #0]
 8006874:	6869      	ldr	r1, [r5, #4]
 8006876:	68aa      	ldr	r2, [r5, #8]
 8006878:	68eb      	ldr	r3, [r5, #12]
 800687a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800687c:	7c2b      	ldrb	r3, [r5, #16]
 800687e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006880:	4a2b      	ldr	r2, [pc, #172]	@ (8006930 <loadMenuTexts+0xa74>)
 8006882:	4b2c      	ldr	r3, [pc, #176]	@ (8006934 <loadMenuTexts+0xa78>)
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	6828      	ldr	r0, [r5, #0]
 800688a:	6869      	ldr	r1, [r5, #4]
 800688c:	68aa      	ldr	r2, [r5, #8]
 800688e:	68eb      	ldr	r3, [r5, #12]
 8006890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006892:	7c2b      	ldrb	r3, [r5, #16]
 8006894:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006896:	4a28      	ldr	r2, [pc, #160]	@ (8006938 <loadMenuTexts+0xa7c>)
 8006898:	4b28      	ldr	r3, [pc, #160]	@ (800693c <loadMenuTexts+0xa80>)
 800689a:	4614      	mov	r4, r2
 800689c:	461d      	mov	r5, r3
 800689e:	6828      	ldr	r0, [r5, #0]
 80068a0:	6869      	ldr	r1, [r5, #4]
 80068a2:	68aa      	ldr	r2, [r5, #8]
 80068a4:	68eb      	ldr	r3, [r5, #12]
 80068a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a8:	7c2b      	ldrb	r3, [r5, #16]
 80068aa:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80068ac:	4a24      	ldr	r2, [pc, #144]	@ (8006940 <loadMenuTexts+0xa84>)
 80068ae:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <loadMenuTexts+0xa88>)
 80068b0:	4614      	mov	r4, r2
 80068b2:	461d      	mov	r5, r3
 80068b4:	6828      	ldr	r0, [r5, #0]
 80068b6:	6869      	ldr	r1, [r5, #4]
 80068b8:	68aa      	ldr	r2, [r5, #8]
 80068ba:	68eb      	ldr	r3, [r5, #12]
 80068bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068be:	7c2b      	ldrb	r3, [r5, #16]
 80068c0:	7023      	strb	r3, [r4, #0]
 80068c2:	f000 bd3a 	b.w	800733a <loadMenuTexts+0x147e>
 80068c6:	bf00      	nop
 80068c8:	200018d0 	.word	0x200018d0
 80068cc:	20000cb8 	.word	0x20000cb8
 80068d0:	200018e4 	.word	0x200018e4
 80068d4:	20000d1c 	.word	0x20000d1c
 80068d8:	200018f8 	.word	0x200018f8
 80068dc:	20000d30 	.word	0x20000d30
 80068e0:	2000190c 	.word	0x2000190c
 80068e4:	20000d6c 	.word	0x20000d6c
 80068e8:	20001920 	.word	0x20001920
 80068ec:	20000d80 	.word	0x20000d80
 80068f0:	20001934 	.word	0x20001934
 80068f4:	20000dbc 	.word	0x20000dbc
 80068f8:	20001948 	.word	0x20001948
 80068fc:	20000dd0 	.word	0x20000dd0
 8006900:	2000195c 	.word	0x2000195c
 8006904:	20000e0c 	.word	0x20000e0c
 8006908:	20001970 	.word	0x20001970
 800690c:	20000e34 	.word	0x20000e34
 8006910:	20001984 	.word	0x20001984
 8006914:	20000e5c 	.word	0x20000e5c
 8006918:	20001998 	.word	0x20001998
 800691c:	20000e84 	.word	0x20000e84
 8006920:	200019ac 	.word	0x200019ac
 8006924:	20000eac 	.word	0x20000eac
 8006928:	200019c0 	.word	0x200019c0
 800692c:	20000ed4 	.word	0x20000ed4
 8006930:	200019d4 	.word	0x200019d4
 8006934:	20000efc 	.word	0x20000efc
 8006938:	200019e8 	.word	0x200019e8
 800693c:	20000f24 	.word	0x20000f24
 8006940:	200019fc 	.word	0x200019fc
 8006944:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006948:	4ac6      	ldr	r2, [pc, #792]	@ (8006c64 <loadMenuTexts+0xda8>)
 800694a:	4bc7      	ldr	r3, [pc, #796]	@ (8006c68 <loadMenuTexts+0xdac>)
 800694c:	4614      	mov	r4, r2
 800694e:	461d      	mov	r5, r3
 8006950:	6828      	ldr	r0, [r5, #0]
 8006952:	6869      	ldr	r1, [r5, #4]
 8006954:	68aa      	ldr	r2, [r5, #8]
 8006956:	68eb      	ldr	r3, [r5, #12]
 8006958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695a:	7c2b      	ldrb	r3, [r5, #16]
 800695c:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800695e:	4ac3      	ldr	r2, [pc, #780]	@ (8006c6c <loadMenuTexts+0xdb0>)
 8006960:	4bc3      	ldr	r3, [pc, #780]	@ (8006c70 <loadMenuTexts+0xdb4>)
 8006962:	4614      	mov	r4, r2
 8006964:	461d      	mov	r5, r3
 8006966:	6828      	ldr	r0, [r5, #0]
 8006968:	6869      	ldr	r1, [r5, #4]
 800696a:	68aa      	ldr	r2, [r5, #8]
 800696c:	68eb      	ldr	r3, [r5, #12]
 800696e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006970:	7c2b      	ldrb	r3, [r5, #16]
 8006972:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006974:	4abf      	ldr	r2, [pc, #764]	@ (8006c74 <loadMenuTexts+0xdb8>)
 8006976:	4bc0      	ldr	r3, [pc, #768]	@ (8006c78 <loadMenuTexts+0xdbc>)
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	6828      	ldr	r0, [r5, #0]
 800697e:	6869      	ldr	r1, [r5, #4]
 8006980:	68aa      	ldr	r2, [r5, #8]
 8006982:	68eb      	ldr	r3, [r5, #12]
 8006984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006986:	7c2b      	ldrb	r3, [r5, #16]
 8006988:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 800698a:	4abc      	ldr	r2, [pc, #752]	@ (8006c7c <loadMenuTexts+0xdc0>)
 800698c:	4bbc      	ldr	r3, [pc, #752]	@ (8006c80 <loadMenuTexts+0xdc4>)
 800698e:	4614      	mov	r4, r2
 8006990:	461d      	mov	r5, r3
 8006992:	6828      	ldr	r0, [r5, #0]
 8006994:	6869      	ldr	r1, [r5, #4]
 8006996:	68aa      	ldr	r2, [r5, #8]
 8006998:	68eb      	ldr	r3, [r5, #12]
 800699a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699c:	7c2b      	ldrb	r3, [r5, #16]
 800699e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80069a0:	4ab8      	ldr	r2, [pc, #736]	@ (8006c84 <loadMenuTexts+0xdc8>)
 80069a2:	4bb9      	ldr	r3, [pc, #740]	@ (8006c88 <loadMenuTexts+0xdcc>)
 80069a4:	4614      	mov	r4, r2
 80069a6:	461d      	mov	r5, r3
 80069a8:	6828      	ldr	r0, [r5, #0]
 80069aa:	6869      	ldr	r1, [r5, #4]
 80069ac:	68aa      	ldr	r2, [r5, #8]
 80069ae:	68eb      	ldr	r3, [r5, #12]
 80069b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b2:	7c2b      	ldrb	r3, [r5, #16]
 80069b4:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069b6:	4ab5      	ldr	r2, [pc, #724]	@ (8006c8c <loadMenuTexts+0xdd0>)
 80069b8:	4bb5      	ldr	r3, [pc, #724]	@ (8006c90 <loadMenuTexts+0xdd4>)
 80069ba:	4614      	mov	r4, r2
 80069bc:	461d      	mov	r5, r3
 80069be:	6828      	ldr	r0, [r5, #0]
 80069c0:	6869      	ldr	r1, [r5, #4]
 80069c2:	68aa      	ldr	r2, [r5, #8]
 80069c4:	68eb      	ldr	r3, [r5, #12]
 80069c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c8:	7c2b      	ldrb	r3, [r5, #16]
 80069ca:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80069cc:	4ab1      	ldr	r2, [pc, #708]	@ (8006c94 <loadMenuTexts+0xdd8>)
 80069ce:	4bb2      	ldr	r3, [pc, #712]	@ (8006c98 <loadMenuTexts+0xddc>)
 80069d0:	4614      	mov	r4, r2
 80069d2:	461d      	mov	r5, r3
 80069d4:	6828      	ldr	r0, [r5, #0]
 80069d6:	6869      	ldr	r1, [r5, #4]
 80069d8:	68aa      	ldr	r2, [r5, #8]
 80069da:	68eb      	ldr	r3, [r5, #12]
 80069dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069de:	7c2b      	ldrb	r3, [r5, #16]
 80069e0:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80069e2:	4aae      	ldr	r2, [pc, #696]	@ (8006c9c <loadMenuTexts+0xde0>)
 80069e4:	4bae      	ldr	r3, [pc, #696]	@ (8006ca0 <loadMenuTexts+0xde4>)
 80069e6:	4614      	mov	r4, r2
 80069e8:	461d      	mov	r5, r3
 80069ea:	6828      	ldr	r0, [r5, #0]
 80069ec:	6869      	ldr	r1, [r5, #4]
 80069ee:	68aa      	ldr	r2, [r5, #8]
 80069f0:	68eb      	ldr	r3, [r5, #12]
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	7c2b      	ldrb	r3, [r5, #16]
 80069f6:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80069f8:	4aaa      	ldr	r2, [pc, #680]	@ (8006ca4 <loadMenuTexts+0xde8>)
 80069fa:	4bab      	ldr	r3, [pc, #684]	@ (8006ca8 <loadMenuTexts+0xdec>)
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	6828      	ldr	r0, [r5, #0]
 8006a02:	6869      	ldr	r1, [r5, #4]
 8006a04:	68aa      	ldr	r2, [r5, #8]
 8006a06:	68eb      	ldr	r3, [r5, #12]
 8006a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0a:	7c2b      	ldrb	r3, [r5, #16]
 8006a0c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a0e:	4aa7      	ldr	r2, [pc, #668]	@ (8006cac <loadMenuTexts+0xdf0>)
 8006a10:	4ba7      	ldr	r3, [pc, #668]	@ (8006cb0 <loadMenuTexts+0xdf4>)
 8006a12:	4614      	mov	r4, r2
 8006a14:	461d      	mov	r5, r3
 8006a16:	6828      	ldr	r0, [r5, #0]
 8006a18:	6869      	ldr	r1, [r5, #4]
 8006a1a:	68aa      	ldr	r2, [r5, #8]
 8006a1c:	68eb      	ldr	r3, [r5, #12]
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a20:	7c2b      	ldrb	r3, [r5, #16]
 8006a22:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a24:	4aa3      	ldr	r2, [pc, #652]	@ (8006cb4 <loadMenuTexts+0xdf8>)
 8006a26:	4ba4      	ldr	r3, [pc, #656]	@ (8006cb8 <loadMenuTexts+0xdfc>)
 8006a28:	4614      	mov	r4, r2
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	6828      	ldr	r0, [r5, #0]
 8006a2e:	6869      	ldr	r1, [r5, #4]
 8006a30:	68aa      	ldr	r2, [r5, #8]
 8006a32:	68eb      	ldr	r3, [r5, #12]
 8006a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a36:	7c2b      	ldrb	r3, [r5, #16]
 8006a38:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a3a:	4aa0      	ldr	r2, [pc, #640]	@ (8006cbc <loadMenuTexts+0xe00>)
 8006a3c:	4ba0      	ldr	r3, [pc, #640]	@ (8006cc0 <loadMenuTexts+0xe04>)
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	6828      	ldr	r0, [r5, #0]
 8006a44:	6869      	ldr	r1, [r5, #4]
 8006a46:	68aa      	ldr	r2, [r5, #8]
 8006a48:	68eb      	ldr	r3, [r5, #12]
 8006a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4c:	7c2b      	ldrb	r3, [r5, #16]
 8006a4e:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a50:	4a9c      	ldr	r2, [pc, #624]	@ (8006cc4 <loadMenuTexts+0xe08>)
 8006a52:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc8 <loadMenuTexts+0xe0c>)
 8006a54:	4614      	mov	r4, r2
 8006a56:	461d      	mov	r5, r3
 8006a58:	6828      	ldr	r0, [r5, #0]
 8006a5a:	6869      	ldr	r1, [r5, #4]
 8006a5c:	68aa      	ldr	r2, [r5, #8]
 8006a5e:	68eb      	ldr	r3, [r5, #12]
 8006a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a62:	7c2b      	ldrb	r3, [r5, #16]
 8006a64:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006a66:	4a99      	ldr	r2, [pc, #612]	@ (8006ccc <loadMenuTexts+0xe10>)
 8006a68:	4b99      	ldr	r3, [pc, #612]	@ (8006cd0 <loadMenuTexts+0xe14>)
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	461d      	mov	r5, r3
 8006a6e:	6828      	ldr	r0, [r5, #0]
 8006a70:	6869      	ldr	r1, [r5, #4]
 8006a72:	68aa      	ldr	r2, [r5, #8]
 8006a74:	68eb      	ldr	r3, [r5, #12]
 8006a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a78:	7c2b      	ldrb	r3, [r5, #16]
 8006a7a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006a7c:	4a95      	ldr	r2, [pc, #596]	@ (8006cd4 <loadMenuTexts+0xe18>)
 8006a7e:	4b96      	ldr	r3, [pc, #600]	@ (8006cd8 <loadMenuTexts+0xe1c>)
 8006a80:	4614      	mov	r4, r2
 8006a82:	461d      	mov	r5, r3
 8006a84:	6828      	ldr	r0, [r5, #0]
 8006a86:	6869      	ldr	r1, [r5, #4]
 8006a88:	68aa      	ldr	r2, [r5, #8]
 8006a8a:	68eb      	ldr	r3, [r5, #12]
 8006a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8e:	7c2b      	ldrb	r3, [r5, #16]
 8006a90:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006a92:	4a92      	ldr	r2, [pc, #584]	@ (8006cdc <loadMenuTexts+0xe20>)
 8006a94:	4b92      	ldr	r3, [pc, #584]	@ (8006ce0 <loadMenuTexts+0xe24>)
 8006a96:	4614      	mov	r4, r2
 8006a98:	461d      	mov	r5, r3
 8006a9a:	6828      	ldr	r0, [r5, #0]
 8006a9c:	6869      	ldr	r1, [r5, #4]
 8006a9e:	68aa      	ldr	r2, [r5, #8]
 8006aa0:	68eb      	ldr	r3, [r5, #12]
 8006aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa4:	7c2b      	ldrb	r3, [r5, #16]
 8006aa6:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006aa8:	4a8e      	ldr	r2, [pc, #568]	@ (8006ce4 <loadMenuTexts+0xe28>)
 8006aaa:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce8 <loadMenuTexts+0xe2c>)
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	6828      	ldr	r0, [r5, #0]
 8006ab2:	6869      	ldr	r1, [r5, #4]
 8006ab4:	68aa      	ldr	r2, [r5, #8]
 8006ab6:	68eb      	ldr	r3, [r5, #12]
 8006ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aba:	7c2b      	ldrb	r3, [r5, #16]
 8006abc:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006abe:	4a8b      	ldr	r2, [pc, #556]	@ (8006cec <loadMenuTexts+0xe30>)
 8006ac0:	4b8b      	ldr	r3, [pc, #556]	@ (8006cf0 <loadMenuTexts+0xe34>)
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	6828      	ldr	r0, [r5, #0]
 8006ac8:	6869      	ldr	r1, [r5, #4]
 8006aca:	68aa      	ldr	r2, [r5, #8]
 8006acc:	68eb      	ldr	r3, [r5, #12]
 8006ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad0:	7c2b      	ldrb	r3, [r5, #16]
 8006ad2:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006ad4:	4a87      	ldr	r2, [pc, #540]	@ (8006cf4 <loadMenuTexts+0xe38>)
 8006ad6:	4b88      	ldr	r3, [pc, #544]	@ (8006cf8 <loadMenuTexts+0xe3c>)
 8006ad8:	4614      	mov	r4, r2
 8006ada:	461d      	mov	r5, r3
 8006adc:	6828      	ldr	r0, [r5, #0]
 8006ade:	6869      	ldr	r1, [r5, #4]
 8006ae0:	68aa      	ldr	r2, [r5, #8]
 8006ae2:	68eb      	ldr	r3, [r5, #12]
 8006ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae6:	7c2b      	ldrb	r3, [r5, #16]
 8006ae8:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006aea:	4a84      	ldr	r2, [pc, #528]	@ (8006cfc <loadMenuTexts+0xe40>)
 8006aec:	4b84      	ldr	r3, [pc, #528]	@ (8006d00 <loadMenuTexts+0xe44>)
 8006aee:	4614      	mov	r4, r2
 8006af0:	461d      	mov	r5, r3
 8006af2:	6828      	ldr	r0, [r5, #0]
 8006af4:	6869      	ldr	r1, [r5, #4]
 8006af6:	68aa      	ldr	r2, [r5, #8]
 8006af8:	68eb      	ldr	r3, [r5, #12]
 8006afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afc:	7c2b      	ldrb	r3, [r5, #16]
 8006afe:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b00:	4a80      	ldr	r2, [pc, #512]	@ (8006d04 <loadMenuTexts+0xe48>)
 8006b02:	4b81      	ldr	r3, [pc, #516]	@ (8006d08 <loadMenuTexts+0xe4c>)
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	6869      	ldr	r1, [r5, #4]
 8006b0c:	68aa      	ldr	r2, [r5, #8]
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b12:	7c2b      	ldrb	r3, [r5, #16]
 8006b14:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b16:	4a7d      	ldr	r2, [pc, #500]	@ (8006d0c <loadMenuTexts+0xe50>)
 8006b18:	4b7d      	ldr	r3, [pc, #500]	@ (8006d10 <loadMenuTexts+0xe54>)
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	6828      	ldr	r0, [r5, #0]
 8006b20:	6869      	ldr	r1, [r5, #4]
 8006b22:	68aa      	ldr	r2, [r5, #8]
 8006b24:	68eb      	ldr	r3, [r5, #12]
 8006b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b28:	7c2b      	ldrb	r3, [r5, #16]
 8006b2a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b2c:	4a79      	ldr	r2, [pc, #484]	@ (8006d14 <loadMenuTexts+0xe58>)
 8006b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d18 <loadMenuTexts+0xe5c>)
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
 8006b34:	6828      	ldr	r0, [r5, #0]
 8006b36:	6869      	ldr	r1, [r5, #4]
 8006b38:	68aa      	ldr	r2, [r5, #8]
 8006b3a:	68eb      	ldr	r3, [r5, #12]
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	7c2b      	ldrb	r3, [r5, #16]
 8006b40:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b42:	4a76      	ldr	r2, [pc, #472]	@ (8006d1c <loadMenuTexts+0xe60>)
 8006b44:	4b76      	ldr	r3, [pc, #472]	@ (8006d20 <loadMenuTexts+0xe64>)
 8006b46:	4614      	mov	r4, r2
 8006b48:	461d      	mov	r5, r3
 8006b4a:	6828      	ldr	r0, [r5, #0]
 8006b4c:	6869      	ldr	r1, [r5, #4]
 8006b4e:	68aa      	ldr	r2, [r5, #8]
 8006b50:	68eb      	ldr	r3, [r5, #12]
 8006b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b54:	7c2b      	ldrb	r3, [r5, #16]
 8006b56:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b58:	4a72      	ldr	r2, [pc, #456]	@ (8006d24 <loadMenuTexts+0xe68>)
 8006b5a:	4b73      	ldr	r3, [pc, #460]	@ (8006d28 <loadMenuTexts+0xe6c>)
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	461d      	mov	r5, r3
 8006b60:	6828      	ldr	r0, [r5, #0]
 8006b62:	6869      	ldr	r1, [r5, #4]
 8006b64:	68aa      	ldr	r2, [r5, #8]
 8006b66:	68eb      	ldr	r3, [r5, #12]
 8006b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6a:	7c2b      	ldrb	r3, [r5, #16]
 8006b6c:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8006d2c <loadMenuTexts+0xe70>)
 8006b70:	4b6f      	ldr	r3, [pc, #444]	@ (8006d30 <loadMenuTexts+0xe74>)
 8006b72:	4614      	mov	r4, r2
 8006b74:	461d      	mov	r5, r3
 8006b76:	6828      	ldr	r0, [r5, #0]
 8006b78:	6869      	ldr	r1, [r5, #4]
 8006b7a:	68aa      	ldr	r2, [r5, #8]
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b80:	7c2b      	ldrb	r3, [r5, #16]
 8006b82:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006b84:	4a6b      	ldr	r2, [pc, #428]	@ (8006d34 <loadMenuTexts+0xe78>)
 8006b86:	4b6c      	ldr	r3, [pc, #432]	@ (8006d38 <loadMenuTexts+0xe7c>)
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	6869      	ldr	r1, [r5, #4]
 8006b90:	68aa      	ldr	r2, [r5, #8]
 8006b92:	68eb      	ldr	r3, [r5, #12]
 8006b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b96:	7c2b      	ldrb	r3, [r5, #16]
 8006b98:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006b9a:	4a68      	ldr	r2, [pc, #416]	@ (8006d3c <loadMenuTexts+0xe80>)
 8006b9c:	4b68      	ldr	r3, [pc, #416]	@ (8006d40 <loadMenuTexts+0xe84>)
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	68aa      	ldr	r2, [r5, #8]
 8006ba8:	68eb      	ldr	r3, [r5, #12]
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	7c2b      	ldrb	r3, [r5, #16]
 8006bae:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006bb0:	4a64      	ldr	r2, [pc, #400]	@ (8006d44 <loadMenuTexts+0xe88>)
 8006bb2:	4b65      	ldr	r3, [pc, #404]	@ (8006d48 <loadMenuTexts+0xe8c>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	6828      	ldr	r0, [r5, #0]
 8006bba:	6869      	ldr	r1, [r5, #4]
 8006bbc:	68aa      	ldr	r2, [r5, #8]
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc2:	7c2b      	ldrb	r3, [r5, #16]
 8006bc4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006bc6:	4a61      	ldr	r2, [pc, #388]	@ (8006d4c <loadMenuTexts+0xe90>)
 8006bc8:	4b61      	ldr	r3, [pc, #388]	@ (8006d50 <loadMenuTexts+0xe94>)
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	6828      	ldr	r0, [r5, #0]
 8006bd0:	6869      	ldr	r1, [r5, #4]
 8006bd2:	68aa      	ldr	r2, [r5, #8]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd8:	7c2b      	ldrb	r3, [r5, #16]
 8006bda:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8006d54 <loadMenuTexts+0xe98>)
 8006bde:	4b5e      	ldr	r3, [pc, #376]	@ (8006d58 <loadMenuTexts+0xe9c>)
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	6828      	ldr	r0, [r5, #0]
 8006be6:	6869      	ldr	r1, [r5, #4]
 8006be8:	68aa      	ldr	r2, [r5, #8]
 8006bea:	68eb      	ldr	r3, [r5, #12]
 8006bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bee:	7c2b      	ldrb	r3, [r5, #16]
 8006bf0:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8006d5c <loadMenuTexts+0xea0>)
 8006bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8006d60 <loadMenuTexts+0xea4>)
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	6869      	ldr	r1, [r5, #4]
 8006bfe:	68aa      	ldr	r2, [r5, #8]
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c04:	7c2b      	ldrb	r3, [r5, #16]
 8006c06:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c08:	4a56      	ldr	r2, [pc, #344]	@ (8006d64 <loadMenuTexts+0xea8>)
 8006c0a:	4b57      	ldr	r3, [pc, #348]	@ (8006d68 <loadMenuTexts+0xeac>)
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	6828      	ldr	r0, [r5, #0]
 8006c12:	6869      	ldr	r1, [r5, #4]
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	7c2b      	ldrb	r3, [r5, #16]
 8006c1c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c1e:	4a53      	ldr	r2, [pc, #332]	@ (8006d6c <loadMenuTexts+0xeb0>)
 8006c20:	4b53      	ldr	r3, [pc, #332]	@ (8006d70 <loadMenuTexts+0xeb4>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	6869      	ldr	r1, [r5, #4]
 8006c2a:	68aa      	ldr	r2, [r5, #8]
 8006c2c:	68eb      	ldr	r3, [r5, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	7c2b      	ldrb	r3, [r5, #16]
 8006c32:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c34:	4a4f      	ldr	r2, [pc, #316]	@ (8006d74 <loadMenuTexts+0xeb8>)
 8006c36:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <loadMenuTexts+0xebc>)
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	6869      	ldr	r1, [r5, #4]
 8006c40:	68aa      	ldr	r2, [r5, #8]
 8006c42:	68eb      	ldr	r3, [r5, #12]
 8006c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c46:	7c2b      	ldrb	r3, [r5, #16]
 8006c48:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8006d7c <loadMenuTexts+0xec0>)
 8006c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <loadMenuTexts+0xec4>)
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461d      	mov	r5, r3
 8006c52:	6828      	ldr	r0, [r5, #0]
 8006c54:	6869      	ldr	r1, [r5, #4]
 8006c56:	68aa      	ldr	r2, [r5, #8]
 8006c58:	68eb      	ldr	r3, [r5, #12]
 8006c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5c:	7c2b      	ldrb	r3, [r5, #16]
 8006c5e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006c60:	4a48      	ldr	r2, [pc, #288]	@ (8006d84 <loadMenuTexts+0xec8>)
 8006c62:	e091      	b.n	8006d88 <loadMenuTexts+0xecc>
 8006c64:	2000131c 	.word	0x2000131c
 8006c68:	20000704 	.word	0x20000704
 8006c6c:	20001330 	.word	0x20001330
 8006c70:	20000718 	.word	0x20000718
 8006c74:	20001344 	.word	0x20001344
 8006c78:	2000072c 	.word	0x2000072c
 8006c7c:	20001358 	.word	0x20001358
 8006c80:	20000740 	.word	0x20000740
 8006c84:	2000136c 	.word	0x2000136c
 8006c88:	20000754 	.word	0x20000754
 8006c8c:	20001380 	.word	0x20001380
 8006c90:	20000768 	.word	0x20000768
 8006c94:	20001394 	.word	0x20001394
 8006c98:	2000077c 	.word	0x2000077c
 8006c9c:	200013a8 	.word	0x200013a8
 8006ca0:	20000790 	.word	0x20000790
 8006ca4:	200013bc 	.word	0x200013bc
 8006ca8:	200007a4 	.word	0x200007a4
 8006cac:	200013d0 	.word	0x200013d0
 8006cb0:	200007b8 	.word	0x200007b8
 8006cb4:	200013e4 	.word	0x200013e4
 8006cb8:	200007cc 	.word	0x200007cc
 8006cbc:	200013f8 	.word	0x200013f8
 8006cc0:	200007e0 	.word	0x200007e0
 8006cc4:	2000140c 	.word	0x2000140c
 8006cc8:	200007f4 	.word	0x200007f4
 8006ccc:	20001420 	.word	0x20001420
 8006cd0:	20000808 	.word	0x20000808
 8006cd4:	20001434 	.word	0x20001434
 8006cd8:	2000081c 	.word	0x2000081c
 8006cdc:	20001448 	.word	0x20001448
 8006ce0:	20000830 	.word	0x20000830
 8006ce4:	2000145c 	.word	0x2000145c
 8006ce8:	20000844 	.word	0x20000844
 8006cec:	20001470 	.word	0x20001470
 8006cf0:	20000858 	.word	0x20000858
 8006cf4:	20001484 	.word	0x20001484
 8006cf8:	2000086c 	.word	0x2000086c
 8006cfc:	20001498 	.word	0x20001498
 8006d00:	20000880 	.word	0x20000880
 8006d04:	200014ac 	.word	0x200014ac
 8006d08:	20000894 	.word	0x20000894
 8006d0c:	200014c0 	.word	0x200014c0
 8006d10:	200008a8 	.word	0x200008a8
 8006d14:	200014d4 	.word	0x200014d4
 8006d18:	200008bc 	.word	0x200008bc
 8006d1c:	200014e8 	.word	0x200014e8
 8006d20:	200008d0 	.word	0x200008d0
 8006d24:	200014fc 	.word	0x200014fc
 8006d28:	200008e4 	.word	0x200008e4
 8006d2c:	20001510 	.word	0x20001510
 8006d30:	200008f8 	.word	0x200008f8
 8006d34:	20001524 	.word	0x20001524
 8006d38:	2000090c 	.word	0x2000090c
 8006d3c:	20001538 	.word	0x20001538
 8006d40:	20000920 	.word	0x20000920
 8006d44:	2000154c 	.word	0x2000154c
 8006d48:	20000934 	.word	0x20000934
 8006d4c:	20001560 	.word	0x20001560
 8006d50:	20000948 	.word	0x20000948
 8006d54:	20001574 	.word	0x20001574
 8006d58:	2000095c 	.word	0x2000095c
 8006d5c:	20001588 	.word	0x20001588
 8006d60:	20000970 	.word	0x20000970
 8006d64:	2000159c 	.word	0x2000159c
 8006d68:	20000984 	.word	0x20000984
 8006d6c:	200015b0 	.word	0x200015b0
 8006d70:	20000998 	.word	0x20000998
 8006d74:	200015c4 	.word	0x200015c4
 8006d78:	200009ac 	.word	0x200009ac
 8006d7c:	200015d8 	.word	0x200015d8
 8006d80:	200009c0 	.word	0x200009c0
 8006d84:	200015ec 	.word	0x200015ec
 8006d88:	4bc7      	ldr	r3, [pc, #796]	@ (80070a8 <loadMenuTexts+0x11ec>)
 8006d8a:	4614      	mov	r4, r2
 8006d8c:	461d      	mov	r5, r3
 8006d8e:	6828      	ldr	r0, [r5, #0]
 8006d90:	6869      	ldr	r1, [r5, #4]
 8006d92:	68aa      	ldr	r2, [r5, #8]
 8006d94:	68eb      	ldr	r3, [r5, #12]
 8006d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d98:	7c2b      	ldrb	r3, [r5, #16]
 8006d9a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006d9c:	4ac3      	ldr	r2, [pc, #780]	@ (80070ac <loadMenuTexts+0x11f0>)
 8006d9e:	4bc4      	ldr	r3, [pc, #784]	@ (80070b0 <loadMenuTexts+0x11f4>)
 8006da0:	4614      	mov	r4, r2
 8006da2:	461d      	mov	r5, r3
 8006da4:	6828      	ldr	r0, [r5, #0]
 8006da6:	6869      	ldr	r1, [r5, #4]
 8006da8:	68aa      	ldr	r2, [r5, #8]
 8006daa:	68eb      	ldr	r3, [r5, #12]
 8006dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dae:	7c2b      	ldrb	r3, [r5, #16]
 8006db0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006db2:	4ac0      	ldr	r2, [pc, #768]	@ (80070b4 <loadMenuTexts+0x11f8>)
 8006db4:	4bc0      	ldr	r3, [pc, #768]	@ (80070b8 <loadMenuTexts+0x11fc>)
 8006db6:	4614      	mov	r4, r2
 8006db8:	461d      	mov	r5, r3
 8006dba:	6828      	ldr	r0, [r5, #0]
 8006dbc:	6869      	ldr	r1, [r5, #4]
 8006dbe:	68aa      	ldr	r2, [r5, #8]
 8006dc0:	68eb      	ldr	r3, [r5, #12]
 8006dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc4:	7c2b      	ldrb	r3, [r5, #16]
 8006dc6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006dc8:	4abc      	ldr	r2, [pc, #752]	@ (80070bc <loadMenuTexts+0x1200>)
 8006dca:	4bbd      	ldr	r3, [pc, #756]	@ (80070c0 <loadMenuTexts+0x1204>)
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	6828      	ldr	r0, [r5, #0]
 8006dd2:	6869      	ldr	r1, [r5, #4]
 8006dd4:	68aa      	ldr	r2, [r5, #8]
 8006dd6:	68eb      	ldr	r3, [r5, #12]
 8006dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dda:	7c2b      	ldrb	r3, [r5, #16]
 8006ddc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006dde:	4ab9      	ldr	r2, [pc, #740]	@ (80070c4 <loadMenuTexts+0x1208>)
 8006de0:	4bb9      	ldr	r3, [pc, #740]	@ (80070c8 <loadMenuTexts+0x120c>)
 8006de2:	4614      	mov	r4, r2
 8006de4:	461d      	mov	r5, r3
 8006de6:	6828      	ldr	r0, [r5, #0]
 8006de8:	6869      	ldr	r1, [r5, #4]
 8006dea:	68aa      	ldr	r2, [r5, #8]
 8006dec:	68eb      	ldr	r3, [r5, #12]
 8006dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df0:	7c2b      	ldrb	r3, [r5, #16]
 8006df2:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006df4:	4ab5      	ldr	r2, [pc, #724]	@ (80070cc <loadMenuTexts+0x1210>)
 8006df6:	4bb6      	ldr	r3, [pc, #728]	@ (80070d0 <loadMenuTexts+0x1214>)
 8006df8:	4614      	mov	r4, r2
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	6828      	ldr	r0, [r5, #0]
 8006dfe:	6869      	ldr	r1, [r5, #4]
 8006e00:	68aa      	ldr	r2, [r5, #8]
 8006e02:	68eb      	ldr	r3, [r5, #12]
 8006e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e06:	7c2b      	ldrb	r3, [r5, #16]
 8006e08:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e0a:	4ab2      	ldr	r2, [pc, #712]	@ (80070d4 <loadMenuTexts+0x1218>)
 8006e0c:	4bb2      	ldr	r3, [pc, #712]	@ (80070d8 <loadMenuTexts+0x121c>)
 8006e0e:	4614      	mov	r4, r2
 8006e10:	461d      	mov	r5, r3
 8006e12:	6828      	ldr	r0, [r5, #0]
 8006e14:	6869      	ldr	r1, [r5, #4]
 8006e16:	68aa      	ldr	r2, [r5, #8]
 8006e18:	68eb      	ldr	r3, [r5, #12]
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	7c2b      	ldrb	r3, [r5, #16]
 8006e1e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e20:	4aae      	ldr	r2, [pc, #696]	@ (80070dc <loadMenuTexts+0x1220>)
 8006e22:	4baf      	ldr	r3, [pc, #700]	@ (80070e0 <loadMenuTexts+0x1224>)
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	6828      	ldr	r0, [r5, #0]
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	68aa      	ldr	r2, [r5, #8]
 8006e2e:	68eb      	ldr	r3, [r5, #12]
 8006e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e32:	7c2b      	ldrb	r3, [r5, #16]
 8006e34:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e36:	4aab      	ldr	r2, [pc, #684]	@ (80070e4 <loadMenuTexts+0x1228>)
 8006e38:	4bab      	ldr	r3, [pc, #684]	@ (80070e8 <loadMenuTexts+0x122c>)
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	6828      	ldr	r0, [r5, #0]
 8006e40:	6869      	ldr	r1, [r5, #4]
 8006e42:	68aa      	ldr	r2, [r5, #8]
 8006e44:	68eb      	ldr	r3, [r5, #12]
 8006e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e48:	7c2b      	ldrb	r3, [r5, #16]
 8006e4a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e4c:	4aa7      	ldr	r2, [pc, #668]	@ (80070ec <loadMenuTexts+0x1230>)
 8006e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80070f0 <loadMenuTexts+0x1234>)
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	6828      	ldr	r0, [r5, #0]
 8006e56:	6869      	ldr	r1, [r5, #4]
 8006e58:	68aa      	ldr	r2, [r5, #8]
 8006e5a:	68eb      	ldr	r3, [r5, #12]
 8006e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5e:	7c2b      	ldrb	r3, [r5, #16]
 8006e60:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006e62:	4aa4      	ldr	r2, [pc, #656]	@ (80070f4 <loadMenuTexts+0x1238>)
 8006e64:	4ba4      	ldr	r3, [pc, #656]	@ (80070f8 <loadMenuTexts+0x123c>)
 8006e66:	4614      	mov	r4, r2
 8006e68:	461d      	mov	r5, r3
 8006e6a:	6828      	ldr	r0, [r5, #0]
 8006e6c:	6869      	ldr	r1, [r5, #4]
 8006e6e:	68aa      	ldr	r2, [r5, #8]
 8006e70:	68eb      	ldr	r3, [r5, #12]
 8006e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e74:	7c2b      	ldrb	r3, [r5, #16]
 8006e76:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006e78:	4aa0      	ldr	r2, [pc, #640]	@ (80070fc <loadMenuTexts+0x1240>)
 8006e7a:	4ba1      	ldr	r3, [pc, #644]	@ (8007100 <loadMenuTexts+0x1244>)
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	6828      	ldr	r0, [r5, #0]
 8006e82:	6869      	ldr	r1, [r5, #4]
 8006e84:	68aa      	ldr	r2, [r5, #8]
 8006e86:	68eb      	ldr	r3, [r5, #12]
 8006e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8a:	7c2b      	ldrb	r3, [r5, #16]
 8006e8c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006e8e:	4a9d      	ldr	r2, [pc, #628]	@ (8007104 <loadMenuTexts+0x1248>)
 8006e90:	4b9d      	ldr	r3, [pc, #628]	@ (8007108 <loadMenuTexts+0x124c>)
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	6828      	ldr	r0, [r5, #0]
 8006e98:	6869      	ldr	r1, [r5, #4]
 8006e9a:	68aa      	ldr	r2, [r5, #8]
 8006e9c:	68eb      	ldr	r3, [r5, #12]
 8006e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea0:	7c2b      	ldrb	r3, [r5, #16]
 8006ea2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006ea4:	4a99      	ldr	r2, [pc, #612]	@ (800710c <loadMenuTexts+0x1250>)
 8006ea6:	4b9a      	ldr	r3, [pc, #616]	@ (8007110 <loadMenuTexts+0x1254>)
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	6828      	ldr	r0, [r5, #0]
 8006eae:	6869      	ldr	r1, [r5, #4]
 8006eb0:	68aa      	ldr	r2, [r5, #8]
 8006eb2:	68eb      	ldr	r3, [r5, #12]
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb6:	7c2b      	ldrb	r3, [r5, #16]
 8006eb8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006eba:	4a96      	ldr	r2, [pc, #600]	@ (8007114 <loadMenuTexts+0x1258>)
 8006ebc:	4b96      	ldr	r3, [pc, #600]	@ (8007118 <loadMenuTexts+0x125c>)
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	6828      	ldr	r0, [r5, #0]
 8006ec4:	6869      	ldr	r1, [r5, #4]
 8006ec6:	68aa      	ldr	r2, [r5, #8]
 8006ec8:	68eb      	ldr	r3, [r5, #12]
 8006eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ecc:	7c2b      	ldrb	r3, [r5, #16]
 8006ece:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006ed0:	4a92      	ldr	r2, [pc, #584]	@ (800711c <loadMenuTexts+0x1260>)
 8006ed2:	4b93      	ldr	r3, [pc, #588]	@ (8007120 <loadMenuTexts+0x1264>)
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	6828      	ldr	r0, [r5, #0]
 8006eda:	6869      	ldr	r1, [r5, #4]
 8006edc:	68aa      	ldr	r2, [r5, #8]
 8006ede:	68eb      	ldr	r3, [r5, #12]
 8006ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee2:	7c2b      	ldrb	r3, [r5, #16]
 8006ee4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006ee6:	4a8f      	ldr	r2, [pc, #572]	@ (8007124 <loadMenuTexts+0x1268>)
 8006ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8007128 <loadMenuTexts+0x126c>)
 8006eea:	4614      	mov	r4, r2
 8006eec:	461d      	mov	r5, r3
 8006eee:	6828      	ldr	r0, [r5, #0]
 8006ef0:	6869      	ldr	r1, [r5, #4]
 8006ef2:	68aa      	ldr	r2, [r5, #8]
 8006ef4:	68eb      	ldr	r3, [r5, #12]
 8006ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef8:	7c2b      	ldrb	r3, [r5, #16]
 8006efa:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006efc:	4a8b      	ldr	r2, [pc, #556]	@ (800712c <loadMenuTexts+0x1270>)
 8006efe:	4b8c      	ldr	r3, [pc, #560]	@ (8007130 <loadMenuTexts+0x1274>)
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	6828      	ldr	r0, [r5, #0]
 8006f06:	6869      	ldr	r1, [r5, #4]
 8006f08:	68aa      	ldr	r2, [r5, #8]
 8006f0a:	68eb      	ldr	r3, [r5, #12]
 8006f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f0e:	7c2b      	ldrb	r3, [r5, #16]
 8006f10:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f12:	4a88      	ldr	r2, [pc, #544]	@ (8007134 <loadMenuTexts+0x1278>)
 8006f14:	4b88      	ldr	r3, [pc, #544]	@ (8007138 <loadMenuTexts+0x127c>)
 8006f16:	4614      	mov	r4, r2
 8006f18:	461d      	mov	r5, r3
 8006f1a:	6828      	ldr	r0, [r5, #0]
 8006f1c:	6869      	ldr	r1, [r5, #4]
 8006f1e:	68aa      	ldr	r2, [r5, #8]
 8006f20:	68eb      	ldr	r3, [r5, #12]
 8006f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f24:	7c2b      	ldrb	r3, [r5, #16]
 8006f26:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f28:	4a84      	ldr	r2, [pc, #528]	@ (800713c <loadMenuTexts+0x1280>)
 8006f2a:	4b85      	ldr	r3, [pc, #532]	@ (8007140 <loadMenuTexts+0x1284>)
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	461d      	mov	r5, r3
 8006f30:	6828      	ldr	r0, [r5, #0]
 8006f32:	6869      	ldr	r1, [r5, #4]
 8006f34:	68aa      	ldr	r2, [r5, #8]
 8006f36:	68eb      	ldr	r3, [r5, #12]
 8006f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3a:	7c2b      	ldrb	r3, [r5, #16]
 8006f3c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f3e:	4a81      	ldr	r2, [pc, #516]	@ (8007144 <loadMenuTexts+0x1288>)
 8006f40:	4b81      	ldr	r3, [pc, #516]	@ (8007148 <loadMenuTexts+0x128c>)
 8006f42:	4614      	mov	r4, r2
 8006f44:	461d      	mov	r5, r3
 8006f46:	6828      	ldr	r0, [r5, #0]
 8006f48:	6869      	ldr	r1, [r5, #4]
 8006f4a:	68aa      	ldr	r2, [r5, #8]
 8006f4c:	68eb      	ldr	r3, [r5, #12]
 8006f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f50:	7c2b      	ldrb	r3, [r5, #16]
 8006f52:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f54:	4a7d      	ldr	r2, [pc, #500]	@ (800714c <loadMenuTexts+0x1290>)
 8006f56:	4b7e      	ldr	r3, [pc, #504]	@ (8007150 <loadMenuTexts+0x1294>)
 8006f58:	4614      	mov	r4, r2
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	6828      	ldr	r0, [r5, #0]
 8006f5e:	6869      	ldr	r1, [r5, #4]
 8006f60:	68aa      	ldr	r2, [r5, #8]
 8006f62:	68eb      	ldr	r3, [r5, #12]
 8006f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f66:	7c2b      	ldrb	r3, [r5, #16]
 8006f68:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8007154 <loadMenuTexts+0x1298>)
 8006f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8007158 <loadMenuTexts+0x129c>)
 8006f6e:	4614      	mov	r4, r2
 8006f70:	461d      	mov	r5, r3
 8006f72:	6828      	ldr	r0, [r5, #0]
 8006f74:	6869      	ldr	r1, [r5, #4]
 8006f76:	68aa      	ldr	r2, [r5, #8]
 8006f78:	68eb      	ldr	r3, [r5, #12]
 8006f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7c:	7c2b      	ldrb	r3, [r5, #16]
 8006f7e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006f80:	4a76      	ldr	r2, [pc, #472]	@ (800715c <loadMenuTexts+0x12a0>)
 8006f82:	4b77      	ldr	r3, [pc, #476]	@ (8007160 <loadMenuTexts+0x12a4>)
 8006f84:	4614      	mov	r4, r2
 8006f86:	461d      	mov	r5, r3
 8006f88:	6828      	ldr	r0, [r5, #0]
 8006f8a:	6869      	ldr	r1, [r5, #4]
 8006f8c:	68aa      	ldr	r2, [r5, #8]
 8006f8e:	68eb      	ldr	r3, [r5, #12]
 8006f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f92:	7c2b      	ldrb	r3, [r5, #16]
 8006f94:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006f96:	4a73      	ldr	r2, [pc, #460]	@ (8007164 <loadMenuTexts+0x12a8>)
 8006f98:	4b73      	ldr	r3, [pc, #460]	@ (8007168 <loadMenuTexts+0x12ac>)
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	6828      	ldr	r0, [r5, #0]
 8006fa0:	6869      	ldr	r1, [r5, #4]
 8006fa2:	68aa      	ldr	r2, [r5, #8]
 8006fa4:	68eb      	ldr	r3, [r5, #12]
 8006fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa8:	7c2b      	ldrb	r3, [r5, #16]
 8006faa:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006fac:	4a6f      	ldr	r2, [pc, #444]	@ (800716c <loadMenuTexts+0x12b0>)
 8006fae:	4b70      	ldr	r3, [pc, #448]	@ (8007170 <loadMenuTexts+0x12b4>)
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	6828      	ldr	r0, [r5, #0]
 8006fb6:	6869      	ldr	r1, [r5, #4]
 8006fb8:	68aa      	ldr	r2, [r5, #8]
 8006fba:	68eb      	ldr	r3, [r5, #12]
 8006fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fbe:	7c2b      	ldrb	r3, [r5, #16]
 8006fc0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8007174 <loadMenuTexts+0x12b8>)
 8006fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8007178 <loadMenuTexts+0x12bc>)
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461d      	mov	r5, r3
 8006fca:	6828      	ldr	r0, [r5, #0]
 8006fcc:	6869      	ldr	r1, [r5, #4]
 8006fce:	68aa      	ldr	r2, [r5, #8]
 8006fd0:	68eb      	ldr	r3, [r5, #12]
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd4:	7c2b      	ldrb	r3, [r5, #16]
 8006fd6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8006fd8:	4a68      	ldr	r2, [pc, #416]	@ (800717c <loadMenuTexts+0x12c0>)
 8006fda:	4b69      	ldr	r3, [pc, #420]	@ (8007180 <loadMenuTexts+0x12c4>)
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	6828      	ldr	r0, [r5, #0]
 8006fe2:	6869      	ldr	r1, [r5, #4]
 8006fe4:	68aa      	ldr	r2, [r5, #8]
 8006fe6:	68eb      	ldr	r3, [r5, #12]
 8006fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fea:	7c2b      	ldrb	r3, [r5, #16]
 8006fec:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8006fee:	4a65      	ldr	r2, [pc, #404]	@ (8007184 <loadMenuTexts+0x12c8>)
 8006ff0:	4b65      	ldr	r3, [pc, #404]	@ (8007188 <loadMenuTexts+0x12cc>)
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	6828      	ldr	r0, [r5, #0]
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	68aa      	ldr	r2, [r5, #8]
 8006ffc:	68eb      	ldr	r3, [r5, #12]
 8006ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007000:	7c2b      	ldrb	r3, [r5, #16]
 8007002:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007004:	4a61      	ldr	r2, [pc, #388]	@ (800718c <loadMenuTexts+0x12d0>)
 8007006:	4b62      	ldr	r3, [pc, #392]	@ (8007190 <loadMenuTexts+0x12d4>)
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	6828      	ldr	r0, [r5, #0]
 800700e:	6869      	ldr	r1, [r5, #4]
 8007010:	68aa      	ldr	r2, [r5, #8]
 8007012:	68eb      	ldr	r3, [r5, #12]
 8007014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007016:	7c2b      	ldrb	r3, [r5, #16]
 8007018:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800701a:	4a5e      	ldr	r2, [pc, #376]	@ (8007194 <loadMenuTexts+0x12d8>)
 800701c:	4b5e      	ldr	r3, [pc, #376]	@ (8007198 <loadMenuTexts+0x12dc>)
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	6828      	ldr	r0, [r5, #0]
 8007024:	6869      	ldr	r1, [r5, #4]
 8007026:	68aa      	ldr	r2, [r5, #8]
 8007028:	68eb      	ldr	r3, [r5, #12]
 800702a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702c:	7c2b      	ldrb	r3, [r5, #16]
 800702e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007030:	4a5a      	ldr	r2, [pc, #360]	@ (800719c <loadMenuTexts+0x12e0>)
 8007032:	4b5b      	ldr	r3, [pc, #364]	@ (80071a0 <loadMenuTexts+0x12e4>)
 8007034:	4614      	mov	r4, r2
 8007036:	461d      	mov	r5, r3
 8007038:	6828      	ldr	r0, [r5, #0]
 800703a:	6869      	ldr	r1, [r5, #4]
 800703c:	68aa      	ldr	r2, [r5, #8]
 800703e:	68eb      	ldr	r3, [r5, #12]
 8007040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007042:	7c2b      	ldrb	r3, [r5, #16]
 8007044:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007046:	4a57      	ldr	r2, [pc, #348]	@ (80071a4 <loadMenuTexts+0x12e8>)
 8007048:	4b57      	ldr	r3, [pc, #348]	@ (80071a8 <loadMenuTexts+0x12ec>)
 800704a:	4614      	mov	r4, r2
 800704c:	461d      	mov	r5, r3
 800704e:	6828      	ldr	r0, [r5, #0]
 8007050:	6869      	ldr	r1, [r5, #4]
 8007052:	68aa      	ldr	r2, [r5, #8]
 8007054:	68eb      	ldr	r3, [r5, #12]
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	7c2b      	ldrb	r3, [r5, #16]
 800705a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 800705c:	4a53      	ldr	r2, [pc, #332]	@ (80071ac <loadMenuTexts+0x12f0>)
 800705e:	4b54      	ldr	r3, [pc, #336]	@ (80071b0 <loadMenuTexts+0x12f4>)
 8007060:	4614      	mov	r4, r2
 8007062:	461d      	mov	r5, r3
 8007064:	6828      	ldr	r0, [r5, #0]
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	68aa      	ldr	r2, [r5, #8]
 800706a:	68eb      	ldr	r3, [r5, #12]
 800706c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706e:	7c2b      	ldrb	r3, [r5, #16]
 8007070:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8007072:	4a50      	ldr	r2, [pc, #320]	@ (80071b4 <loadMenuTexts+0x12f8>)
 8007074:	4b50      	ldr	r3, [pc, #320]	@ (80071b8 <loadMenuTexts+0x12fc>)
 8007076:	4614      	mov	r4, r2
 8007078:	461d      	mov	r5, r3
 800707a:	6828      	ldr	r0, [r5, #0]
 800707c:	6869      	ldr	r1, [r5, #4]
 800707e:	68aa      	ldr	r2, [r5, #8]
 8007080:	68eb      	ldr	r3, [r5, #12]
 8007082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007084:	7c2b      	ldrb	r3, [r5, #16]
 8007086:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007088:	4a4c      	ldr	r2, [pc, #304]	@ (80071bc <loadMenuTexts+0x1300>)
 800708a:	4b4d      	ldr	r3, [pc, #308]	@ (80071c0 <loadMenuTexts+0x1304>)
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	6828      	ldr	r0, [r5, #0]
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	68aa      	ldr	r2, [r5, #8]
 8007096:	68eb      	ldr	r3, [r5, #12]
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709a:	7c2b      	ldrb	r3, [r5, #16]
 800709c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800709e:	4a49      	ldr	r2, [pc, #292]	@ (80071c4 <loadMenuTexts+0x1308>)
 80070a0:	4b49      	ldr	r3, [pc, #292]	@ (80071c8 <loadMenuTexts+0x130c>)
 80070a2:	4614      	mov	r4, r2
 80070a4:	461d      	mov	r5, r3
 80070a6:	e091      	b.n	80071cc <loadMenuTexts+0x1310>
 80070a8:	200009d4 	.word	0x200009d4
 80070ac:	20001600 	.word	0x20001600
 80070b0:	200009e8 	.word	0x200009e8
 80070b4:	20001614 	.word	0x20001614
 80070b8:	200009fc 	.word	0x200009fc
 80070bc:	20001628 	.word	0x20001628
 80070c0:	20000a10 	.word	0x20000a10
 80070c4:	2000163c 	.word	0x2000163c
 80070c8:	20000a24 	.word	0x20000a24
 80070cc:	20001650 	.word	0x20001650
 80070d0:	20000a38 	.word	0x20000a38
 80070d4:	20001664 	.word	0x20001664
 80070d8:	20000a4c 	.word	0x20000a4c
 80070dc:	20001678 	.word	0x20001678
 80070e0:	20000a60 	.word	0x20000a60
 80070e4:	2000168c 	.word	0x2000168c
 80070e8:	20000a74 	.word	0x20000a74
 80070ec:	200016a0 	.word	0x200016a0
 80070f0:	20000a88 	.word	0x20000a88
 80070f4:	200016b4 	.word	0x200016b4
 80070f8:	20000a9c 	.word	0x20000a9c
 80070fc:	200016c8 	.word	0x200016c8
 8007100:	20000ab0 	.word	0x20000ab0
 8007104:	200016dc 	.word	0x200016dc
 8007108:	20000ac4 	.word	0x20000ac4
 800710c:	200016f0 	.word	0x200016f0
 8007110:	20000ad8 	.word	0x20000ad8
 8007114:	20001704 	.word	0x20001704
 8007118:	20000aec 	.word	0x20000aec
 800711c:	20001718 	.word	0x20001718
 8007120:	20000b00 	.word	0x20000b00
 8007124:	2000172c 	.word	0x2000172c
 8007128:	20000b14 	.word	0x20000b14
 800712c:	20001740 	.word	0x20001740
 8007130:	20000b28 	.word	0x20000b28
 8007134:	20001754 	.word	0x20001754
 8007138:	20000b3c 	.word	0x20000b3c
 800713c:	20001768 	.word	0x20001768
 8007140:	20000b50 	.word	0x20000b50
 8007144:	2000177c 	.word	0x2000177c
 8007148:	20000b64 	.word	0x20000b64
 800714c:	20001790 	.word	0x20001790
 8007150:	20000b78 	.word	0x20000b78
 8007154:	200017a4 	.word	0x200017a4
 8007158:	20000b8c 	.word	0x20000b8c
 800715c:	200017b8 	.word	0x200017b8
 8007160:	20000ba0 	.word	0x20000ba0
 8007164:	200017cc 	.word	0x200017cc
 8007168:	20000bb4 	.word	0x20000bb4
 800716c:	200017e0 	.word	0x200017e0
 8007170:	20000bc8 	.word	0x20000bc8
 8007174:	200017f4 	.word	0x200017f4
 8007178:	20000bdc 	.word	0x20000bdc
 800717c:	20001808 	.word	0x20001808
 8007180:	20000bf0 	.word	0x20000bf0
 8007184:	2000181c 	.word	0x2000181c
 8007188:	20000c04 	.word	0x20000c04
 800718c:	20001830 	.word	0x20001830
 8007190:	20000c18 	.word	0x20000c18
 8007194:	20001844 	.word	0x20001844
 8007198:	20000c2c 	.word	0x20000c2c
 800719c:	20001858 	.word	0x20001858
 80071a0:	20000c40 	.word	0x20000c40
 80071a4:	2000186c 	.word	0x2000186c
 80071a8:	20000c54 	.word	0x20000c54
 80071ac:	20001880 	.word	0x20001880
 80071b0:	20000c68 	.word	0x20000c68
 80071b4:	20001894 	.word	0x20001894
 80071b8:	20000cf4 	.word	0x20000cf4
 80071bc:	200018a8 	.word	0x200018a8
 80071c0:	20000d08 	.word	0x20000d08
 80071c4:	200018bc 	.word	0x200018bc
 80071c8:	20000ccc 	.word	0x20000ccc
 80071cc:	6828      	ldr	r0, [r5, #0]
 80071ce:	6869      	ldr	r1, [r5, #4]
 80071d0:	68aa      	ldr	r2, [r5, #8]
 80071d2:	68eb      	ldr	r3, [r5, #12]
 80071d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d6:	7c2b      	ldrb	r3, [r5, #16]
 80071d8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80071da:	4a5b      	ldr	r2, [pc, #364]	@ (8007348 <loadMenuTexts+0x148c>)
 80071dc:	4b5b      	ldr	r3, [pc, #364]	@ (800734c <loadMenuTexts+0x1490>)
 80071de:	4614      	mov	r4, r2
 80071e0:	461d      	mov	r5, r3
 80071e2:	6828      	ldr	r0, [r5, #0]
 80071e4:	6869      	ldr	r1, [r5, #4]
 80071e6:	68aa      	ldr	r2, [r5, #8]
 80071e8:	68eb      	ldr	r3, [r5, #12]
 80071ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ec:	7c2b      	ldrb	r3, [r5, #16]
 80071ee:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80071f0:	4a57      	ldr	r2, [pc, #348]	@ (8007350 <loadMenuTexts+0x1494>)
 80071f2:	4b58      	ldr	r3, [pc, #352]	@ (8007354 <loadMenuTexts+0x1498>)
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	6828      	ldr	r0, [r5, #0]
 80071fa:	6869      	ldr	r1, [r5, #4]
 80071fc:	68aa      	ldr	r2, [r5, #8]
 80071fe:	68eb      	ldr	r3, [r5, #12]
 8007200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007202:	7c2b      	ldrb	r3, [r5, #16]
 8007204:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007206:	4a54      	ldr	r2, [pc, #336]	@ (8007358 <loadMenuTexts+0x149c>)
 8007208:	4b54      	ldr	r3, [pc, #336]	@ (800735c <loadMenuTexts+0x14a0>)
 800720a:	4614      	mov	r4, r2
 800720c:	461d      	mov	r5, r3
 800720e:	6828      	ldr	r0, [r5, #0]
 8007210:	6869      	ldr	r1, [r5, #4]
 8007212:	68aa      	ldr	r2, [r5, #8]
 8007214:	68eb      	ldr	r3, [r5, #12]
 8007216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007218:	7c2b      	ldrb	r3, [r5, #16]
 800721a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 800721c:	4a50      	ldr	r2, [pc, #320]	@ (8007360 <loadMenuTexts+0x14a4>)
 800721e:	4b51      	ldr	r3, [pc, #324]	@ (8007364 <loadMenuTexts+0x14a8>)
 8007220:	4614      	mov	r4, r2
 8007222:	461d      	mov	r5, r3
 8007224:	6828      	ldr	r0, [r5, #0]
 8007226:	6869      	ldr	r1, [r5, #4]
 8007228:	68aa      	ldr	r2, [r5, #8]
 800722a:	68eb      	ldr	r3, [r5, #12]
 800722c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722e:	7c2b      	ldrb	r3, [r5, #16]
 8007230:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 8007232:	4a4d      	ldr	r2, [pc, #308]	@ (8007368 <loadMenuTexts+0x14ac>)
 8007234:	4b4d      	ldr	r3, [pc, #308]	@ (800736c <loadMenuTexts+0x14b0>)
 8007236:	4614      	mov	r4, r2
 8007238:	461d      	mov	r5, r3
 800723a:	6828      	ldr	r0, [r5, #0]
 800723c:	6869      	ldr	r1, [r5, #4]
 800723e:	68aa      	ldr	r2, [r5, #8]
 8007240:	68eb      	ldr	r3, [r5, #12]
 8007242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007244:	7c2b      	ldrb	r3, [r5, #16]
 8007246:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007248:	4a49      	ldr	r2, [pc, #292]	@ (8007370 <loadMenuTexts+0x14b4>)
 800724a:	4b4a      	ldr	r3, [pc, #296]	@ (8007374 <loadMenuTexts+0x14b8>)
 800724c:	4614      	mov	r4, r2
 800724e:	461d      	mov	r5, r3
 8007250:	6828      	ldr	r0, [r5, #0]
 8007252:	6869      	ldr	r1, [r5, #4]
 8007254:	68aa      	ldr	r2, [r5, #8]
 8007256:	68eb      	ldr	r3, [r5, #12]
 8007258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725a:	7c2b      	ldrb	r3, [r5, #16]
 800725c:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800725e:	4a46      	ldr	r2, [pc, #280]	@ (8007378 <loadMenuTexts+0x14bc>)
 8007260:	4b46      	ldr	r3, [pc, #280]	@ (800737c <loadMenuTexts+0x14c0>)
 8007262:	4614      	mov	r4, r2
 8007264:	461d      	mov	r5, r3
 8007266:	6828      	ldr	r0, [r5, #0]
 8007268:	6869      	ldr	r1, [r5, #4]
 800726a:	68aa      	ldr	r2, [r5, #8]
 800726c:	68eb      	ldr	r3, [r5, #12]
 800726e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007270:	7c2b      	ldrb	r3, [r5, #16]
 8007272:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007274:	4a42      	ldr	r2, [pc, #264]	@ (8007380 <loadMenuTexts+0x14c4>)
 8007276:	4b43      	ldr	r3, [pc, #268]	@ (8007384 <loadMenuTexts+0x14c8>)
 8007278:	4614      	mov	r4, r2
 800727a:	461d      	mov	r5, r3
 800727c:	6828      	ldr	r0, [r5, #0]
 800727e:	6869      	ldr	r1, [r5, #4]
 8007280:	68aa      	ldr	r2, [r5, #8]
 8007282:	68eb      	ldr	r3, [r5, #12]
 8007284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007286:	7c2b      	ldrb	r3, [r5, #16]
 8007288:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800728a:	4a3f      	ldr	r2, [pc, #252]	@ (8007388 <loadMenuTexts+0x14cc>)
 800728c:	4b3f      	ldr	r3, [pc, #252]	@ (800738c <loadMenuTexts+0x14d0>)
 800728e:	4614      	mov	r4, r2
 8007290:	461d      	mov	r5, r3
 8007292:	6828      	ldr	r0, [r5, #0]
 8007294:	6869      	ldr	r1, [r5, #4]
 8007296:	68aa      	ldr	r2, [r5, #8]
 8007298:	68eb      	ldr	r3, [r5, #12]
 800729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729c:	7c2b      	ldrb	r3, [r5, #16]
 800729e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80072a0:	4a3b      	ldr	r2, [pc, #236]	@ (8007390 <loadMenuTexts+0x14d4>)
 80072a2:	4b3c      	ldr	r3, [pc, #240]	@ (8007394 <loadMenuTexts+0x14d8>)
 80072a4:	4614      	mov	r4, r2
 80072a6:	461d      	mov	r5, r3
 80072a8:	6828      	ldr	r0, [r5, #0]
 80072aa:	6869      	ldr	r1, [r5, #4]
 80072ac:	68aa      	ldr	r2, [r5, #8]
 80072ae:	68eb      	ldr	r3, [r5, #12]
 80072b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b2:	7c2b      	ldrb	r3, [r5, #16]
 80072b4:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80072b6:	4a38      	ldr	r2, [pc, #224]	@ (8007398 <loadMenuTexts+0x14dc>)
 80072b8:	4b38      	ldr	r3, [pc, #224]	@ (800739c <loadMenuTexts+0x14e0>)
 80072ba:	4614      	mov	r4, r2
 80072bc:	461d      	mov	r5, r3
 80072be:	6828      	ldr	r0, [r5, #0]
 80072c0:	6869      	ldr	r1, [r5, #4]
 80072c2:	68aa      	ldr	r2, [r5, #8]
 80072c4:	68eb      	ldr	r3, [r5, #12]
 80072c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c8:	7c2b      	ldrb	r3, [r5, #16]
 80072ca:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80072cc:	4a34      	ldr	r2, [pc, #208]	@ (80073a0 <loadMenuTexts+0x14e4>)
 80072ce:	4b35      	ldr	r3, [pc, #212]	@ (80073a4 <loadMenuTexts+0x14e8>)
 80072d0:	4614      	mov	r4, r2
 80072d2:	461d      	mov	r5, r3
 80072d4:	6828      	ldr	r0, [r5, #0]
 80072d6:	6869      	ldr	r1, [r5, #4]
 80072d8:	68aa      	ldr	r2, [r5, #8]
 80072da:	68eb      	ldr	r3, [r5, #12]
 80072dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072de:	7c2b      	ldrb	r3, [r5, #16]
 80072e0:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80072e2:	4a31      	ldr	r2, [pc, #196]	@ (80073a8 <loadMenuTexts+0x14ec>)
 80072e4:	4b31      	ldr	r3, [pc, #196]	@ (80073ac <loadMenuTexts+0x14f0>)
 80072e6:	4614      	mov	r4, r2
 80072e8:	461d      	mov	r5, r3
 80072ea:	6828      	ldr	r0, [r5, #0]
 80072ec:	6869      	ldr	r1, [r5, #4]
 80072ee:	68aa      	ldr	r2, [r5, #8]
 80072f0:	68eb      	ldr	r3, [r5, #12]
 80072f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f4:	7c2b      	ldrb	r3, [r5, #16]
 80072f6:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80072f8:	4a2d      	ldr	r2, [pc, #180]	@ (80073b0 <loadMenuTexts+0x14f4>)
 80072fa:	4b2e      	ldr	r3, [pc, #184]	@ (80073b4 <loadMenuTexts+0x14f8>)
 80072fc:	4614      	mov	r4, r2
 80072fe:	461d      	mov	r5, r3
 8007300:	6828      	ldr	r0, [r5, #0]
 8007302:	6869      	ldr	r1, [r5, #4]
 8007304:	68aa      	ldr	r2, [r5, #8]
 8007306:	68eb      	ldr	r3, [r5, #12]
 8007308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730a:	7c2b      	ldrb	r3, [r5, #16]
 800730c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800730e:	4a2a      	ldr	r2, [pc, #168]	@ (80073b8 <loadMenuTexts+0x14fc>)
 8007310:	4b2a      	ldr	r3, [pc, #168]	@ (80073bc <loadMenuTexts+0x1500>)
 8007312:	4614      	mov	r4, r2
 8007314:	461d      	mov	r5, r3
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	6869      	ldr	r1, [r5, #4]
 800731a:	68aa      	ldr	r2, [r5, #8]
 800731c:	68eb      	ldr	r3, [r5, #12]
 800731e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007320:	7c2b      	ldrb	r3, [r5, #16]
 8007322:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007324:	4a26      	ldr	r2, [pc, #152]	@ (80073c0 <loadMenuTexts+0x1504>)
 8007326:	4b27      	ldr	r3, [pc, #156]	@ (80073c4 <loadMenuTexts+0x1508>)
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	6828      	ldr	r0, [r5, #0]
 800732e:	6869      	ldr	r1, [r5, #4]
 8007330:	68aa      	ldr	r2, [r5, #8]
 8007332:	68eb      	ldr	r3, [r5, #12]
 8007334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007336:	7c2b      	ldrb	r3, [r5, #16]
 8007338:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 800733a:	f000 f845 	bl	80073c8 <menuVariableFinisher>
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bdb0      	pop	{r4, r5, r7, pc}
 8007346:	bf00      	nop
 8007348:	200018d0 	.word	0x200018d0
 800734c:	20000ce0 	.word	0x20000ce0
 8007350:	200018e4 	.word	0x200018e4
 8007354:	20000d44 	.word	0x20000d44
 8007358:	200018f8 	.word	0x200018f8
 800735c:	20000d58 	.word	0x20000d58
 8007360:	2000190c 	.word	0x2000190c
 8007364:	20000d94 	.word	0x20000d94
 8007368:	20001920 	.word	0x20001920
 800736c:	20000da8 	.word	0x20000da8
 8007370:	20001934 	.word	0x20001934
 8007374:	20000de4 	.word	0x20000de4
 8007378:	20001948 	.word	0x20001948
 800737c:	20000df8 	.word	0x20000df8
 8007380:	2000195c 	.word	0x2000195c
 8007384:	20000e20 	.word	0x20000e20
 8007388:	20001970 	.word	0x20001970
 800738c:	20000e48 	.word	0x20000e48
 8007390:	20001984 	.word	0x20001984
 8007394:	20000e70 	.word	0x20000e70
 8007398:	20001998 	.word	0x20001998
 800739c:	20000e98 	.word	0x20000e98
 80073a0:	200019ac 	.word	0x200019ac
 80073a4:	20000ec0 	.word	0x20000ec0
 80073a8:	200019c0 	.word	0x200019c0
 80073ac:	20000ee8 	.word	0x20000ee8
 80073b0:	200019d4 	.word	0x200019d4
 80073b4:	20000f10 	.word	0x20000f10
 80073b8:	200019e8 	.word	0x200019e8
 80073bc:	20000f38 	.word	0x20000f38
 80073c0:	200019fc 	.word	0x200019fc
 80073c4:	20000f60 	.word	0x20000f60

080073c8 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80073cc:	4b99      	ldr	r3, [pc, #612]	@ (8007634 <menuVariableFinisher+0x26c>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80073d2:	4b99      	ldr	r3, [pc, #612]	@ (8007638 <menuVariableFinisher+0x270>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80073d8:	4b98      	ldr	r3, [pc, #608]	@ (800763c <menuVariableFinisher+0x274>)
 80073da:	2200      	movs	r2, #0
 80073dc:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80073de:	4b98      	ldr	r3, [pc, #608]	@ (8007640 <menuVariableFinisher+0x278>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80073e4:	4b97      	ldr	r3, [pc, #604]	@ (8007644 <menuVariableFinisher+0x27c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80073ea:	4b97      	ldr	r3, [pc, #604]	@ (8007648 <menuVariableFinisher+0x280>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80073f0:	4b96      	ldr	r3, [pc, #600]	@ (800764c <menuVariableFinisher+0x284>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80073f6:	4b96      	ldr	r3, [pc, #600]	@ (8007650 <menuVariableFinisher+0x288>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80073fc:	4b95      	ldr	r3, [pc, #596]	@ (8007654 <menuVariableFinisher+0x28c>)
 80073fe:	2200      	movs	r2, #0
 8007400:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007402:	4b95      	ldr	r3, [pc, #596]	@ (8007658 <menuVariableFinisher+0x290>)
 8007404:	2200      	movs	r2, #0
 8007406:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007408:	4b94      	ldr	r3, [pc, #592]	@ (800765c <menuVariableFinisher+0x294>)
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800740e:	4b94      	ldr	r3, [pc, #592]	@ (8007660 <menuVariableFinisher+0x298>)
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007414:	4b93      	ldr	r3, [pc, #588]	@ (8007664 <menuVariableFinisher+0x29c>)
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800741a:	4b93      	ldr	r3, [pc, #588]	@ (8007668 <menuVariableFinisher+0x2a0>)
 800741c:	2200      	movs	r2, #0
 800741e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007420:	4b92      	ldr	r3, [pc, #584]	@ (800766c <menuVariableFinisher+0x2a4>)
 8007422:	2200      	movs	r2, #0
 8007424:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007426:	4b92      	ldr	r3, [pc, #584]	@ (8007670 <menuVariableFinisher+0x2a8>)
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 800742c:	4b91      	ldr	r3, [pc, #580]	@ (8007674 <menuVariableFinisher+0x2ac>)
 800742e:	2200      	movs	r2, #0
 8007430:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007432:	4b91      	ldr	r3, [pc, #580]	@ (8007678 <menuVariableFinisher+0x2b0>)
 8007434:	2200      	movs	r2, #0
 8007436:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007438:	4b90      	ldr	r3, [pc, #576]	@ (800767c <menuVariableFinisher+0x2b4>)
 800743a:	2200      	movs	r2, #0
 800743c:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800743e:	4b90      	ldr	r3, [pc, #576]	@ (8007680 <menuVariableFinisher+0x2b8>)
 8007440:	2200      	movs	r2, #0
 8007442:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007444:	4b8f      	ldr	r3, [pc, #572]	@ (8007684 <menuVariableFinisher+0x2bc>)
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 800744a:	4b8f      	ldr	r3, [pc, #572]	@ (8007688 <menuVariableFinisher+0x2c0>)
 800744c:	2200      	movs	r2, #0
 800744e:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007450:	4b8e      	ldr	r3, [pc, #568]	@ (800768c <menuVariableFinisher+0x2c4>)
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007456:	4b8e      	ldr	r3, [pc, #568]	@ (8007690 <menuVariableFinisher+0x2c8>)
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 800745c:	4b8d      	ldr	r3, [pc, #564]	@ (8007694 <menuVariableFinisher+0x2cc>)
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007462:	4b8d      	ldr	r3, [pc, #564]	@ (8007698 <menuVariableFinisher+0x2d0>)
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007468:	4b8c      	ldr	r3, [pc, #560]	@ (800769c <menuVariableFinisher+0x2d4>)
 800746a:	2200      	movs	r2, #0
 800746c:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800746e:	4b8c      	ldr	r3, [pc, #560]	@ (80076a0 <menuVariableFinisher+0x2d8>)
 8007470:	2200      	movs	r2, #0
 8007472:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007474:	4b8b      	ldr	r3, [pc, #556]	@ (80076a4 <menuVariableFinisher+0x2dc>)
 8007476:	2200      	movs	r2, #0
 8007478:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 800747a:	4b8b      	ldr	r3, [pc, #556]	@ (80076a8 <menuVariableFinisher+0x2e0>)
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007480:	4b8a      	ldr	r3, [pc, #552]	@ (80076ac <menuVariableFinisher+0x2e4>)
 8007482:	2200      	movs	r2, #0
 8007484:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007486:	4b8a      	ldr	r3, [pc, #552]	@ (80076b0 <menuVariableFinisher+0x2e8>)
 8007488:	2200      	movs	r2, #0
 800748a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 800748c:	4b89      	ldr	r3, [pc, #548]	@ (80076b4 <menuVariableFinisher+0x2ec>)
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007492:	4b89      	ldr	r3, [pc, #548]	@ (80076b8 <menuVariableFinisher+0x2f0>)
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007498:	4b88      	ldr	r3, [pc, #544]	@ (80076bc <menuVariableFinisher+0x2f4>)
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800749e:	4b88      	ldr	r3, [pc, #544]	@ (80076c0 <menuVariableFinisher+0x2f8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80074a4:	4b87      	ldr	r3, [pc, #540]	@ (80076c4 <menuVariableFinisher+0x2fc>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80074aa:	4b87      	ldr	r3, [pc, #540]	@ (80076c8 <menuVariableFinisher+0x300>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80074b0:	4b86      	ldr	r3, [pc, #536]	@ (80076cc <menuVariableFinisher+0x304>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80074b6:	4b86      	ldr	r3, [pc, #536]	@ (80076d0 <menuVariableFinisher+0x308>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80074bc:	4b85      	ldr	r3, [pc, #532]	@ (80076d4 <menuVariableFinisher+0x30c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80074c2:	4b85      	ldr	r3, [pc, #532]	@ (80076d8 <menuVariableFinisher+0x310>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80074c8:	4b84      	ldr	r3, [pc, #528]	@ (80076dc <menuVariableFinisher+0x314>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80074ce:	4b84      	ldr	r3, [pc, #528]	@ (80076e0 <menuVariableFinisher+0x318>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80074d4:	4b83      	ldr	r3, [pc, #524]	@ (80076e4 <menuVariableFinisher+0x31c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80074da:	4b83      	ldr	r3, [pc, #524]	@ (80076e8 <menuVariableFinisher+0x320>)
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80074e0:	4b82      	ldr	r3, [pc, #520]	@ (80076ec <menuVariableFinisher+0x324>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80074e6:	4b82      	ldr	r3, [pc, #520]	@ (80076f0 <menuVariableFinisher+0x328>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80074ec:	4b81      	ldr	r3, [pc, #516]	@ (80076f4 <menuVariableFinisher+0x32c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80074f2:	4b81      	ldr	r3, [pc, #516]	@ (80076f8 <menuVariableFinisher+0x330>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80074f8:	4b80      	ldr	r3, [pc, #512]	@ (80076fc <menuVariableFinisher+0x334>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80074fe:	4b80      	ldr	r3, [pc, #512]	@ (8007700 <menuVariableFinisher+0x338>)
 8007500:	2200      	movs	r2, #0
 8007502:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007504:	4b7f      	ldr	r3, [pc, #508]	@ (8007704 <menuVariableFinisher+0x33c>)
 8007506:	2200      	movs	r2, #0
 8007508:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800750a:	4b7f      	ldr	r3, [pc, #508]	@ (8007708 <menuVariableFinisher+0x340>)
 800750c:	2200      	movs	r2, #0
 800750e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007510:	4b7e      	ldr	r3, [pc, #504]	@ (800770c <menuVariableFinisher+0x344>)
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007516:	4b7e      	ldr	r3, [pc, #504]	@ (8007710 <menuVariableFinisher+0x348>)
 8007518:	2200      	movs	r2, #0
 800751a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800751c:	4b7d      	ldr	r3, [pc, #500]	@ (8007714 <menuVariableFinisher+0x34c>)
 800751e:	2200      	movs	r2, #0
 8007520:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007522:	4b7d      	ldr	r3, [pc, #500]	@ (8007718 <menuVariableFinisher+0x350>)
 8007524:	2200      	movs	r2, #0
 8007526:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007528:	4b7c      	ldr	r3, [pc, #496]	@ (800771c <menuVariableFinisher+0x354>)
 800752a:	2200      	movs	r2, #0
 800752c:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800752e:	4b7c      	ldr	r3, [pc, #496]	@ (8007720 <menuVariableFinisher+0x358>)
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007534:	4b7b      	ldr	r3, [pc, #492]	@ (8007724 <menuVariableFinisher+0x35c>)
 8007536:	2200      	movs	r2, #0
 8007538:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800753a:	4b7b      	ldr	r3, [pc, #492]	@ (8007728 <menuVariableFinisher+0x360>)
 800753c:	2200      	movs	r2, #0
 800753e:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007540:	4b7a      	ldr	r3, [pc, #488]	@ (800772c <menuVariableFinisher+0x364>)
 8007542:	2200      	movs	r2, #0
 8007544:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007546:	4b7a      	ldr	r3, [pc, #488]	@ (8007730 <menuVariableFinisher+0x368>)
 8007548:	2200      	movs	r2, #0
 800754a:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 800754c:	4b79      	ldr	r3, [pc, #484]	@ (8007734 <menuVariableFinisher+0x36c>)
 800754e:	2200      	movs	r2, #0
 8007550:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007552:	4b79      	ldr	r3, [pc, #484]	@ (8007738 <menuVariableFinisher+0x370>)
 8007554:	2200      	movs	r2, #0
 8007556:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007558:	4b78      	ldr	r3, [pc, #480]	@ (800773c <menuVariableFinisher+0x374>)
 800755a:	2200      	movs	r2, #0
 800755c:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800755e:	4b78      	ldr	r3, [pc, #480]	@ (8007740 <menuVariableFinisher+0x378>)
 8007560:	2200      	movs	r2, #0
 8007562:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007564:	4b77      	ldr	r3, [pc, #476]	@ (8007744 <menuVariableFinisher+0x37c>)
 8007566:	2200      	movs	r2, #0
 8007568:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 800756a:	4b77      	ldr	r3, [pc, #476]	@ (8007748 <menuVariableFinisher+0x380>)
 800756c:	2200      	movs	r2, #0
 800756e:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007570:	4b76      	ldr	r3, [pc, #472]	@ (800774c <menuVariableFinisher+0x384>)
 8007572:	2200      	movs	r2, #0
 8007574:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007576:	4b76      	ldr	r3, [pc, #472]	@ (8007750 <menuVariableFinisher+0x388>)
 8007578:	2200      	movs	r2, #0
 800757a:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 800757c:	4b75      	ldr	r3, [pc, #468]	@ (8007754 <menuVariableFinisher+0x38c>)
 800757e:	2200      	movs	r2, #0
 8007580:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007582:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <menuVariableFinisher+0x390>)
 8007584:	2200      	movs	r2, #0
 8007586:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007588:	4b74      	ldr	r3, [pc, #464]	@ (800775c <menuVariableFinisher+0x394>)
 800758a:	2200      	movs	r2, #0
 800758c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800758e:	4b74      	ldr	r3, [pc, #464]	@ (8007760 <menuVariableFinisher+0x398>)
 8007590:	2200      	movs	r2, #0
 8007592:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007594:	4b73      	ldr	r3, [pc, #460]	@ (8007764 <menuVariableFinisher+0x39c>)
 8007596:	2200      	movs	r2, #0
 8007598:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800759a:	4b73      	ldr	r3, [pc, #460]	@ (8007768 <menuVariableFinisher+0x3a0>)
 800759c:	2200      	movs	r2, #0
 800759e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80075a0:	4b72      	ldr	r3, [pc, #456]	@ (800776c <menuVariableFinisher+0x3a4>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80075a6:	4b72      	ldr	r3, [pc, #456]	@ (8007770 <menuVariableFinisher+0x3a8>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80075ac:	4b71      	ldr	r3, [pc, #452]	@ (8007774 <menuVariableFinisher+0x3ac>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80075b2:	4b71      	ldr	r3, [pc, #452]	@ (8007778 <menuVariableFinisher+0x3b0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80075b8:	4b70      	ldr	r3, [pc, #448]	@ (800777c <menuVariableFinisher+0x3b4>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80075be:	4b70      	ldr	r3, [pc, #448]	@ (8007780 <menuVariableFinisher+0x3b8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80075c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007784 <menuVariableFinisher+0x3bc>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80075ca:	4b6f      	ldr	r3, [pc, #444]	@ (8007788 <menuVariableFinisher+0x3c0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80075d0:	4b6e      	ldr	r3, [pc, #440]	@ (800778c <menuVariableFinisher+0x3c4>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80075d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007790 <menuVariableFinisher+0x3c8>)
 80075d8:	2200      	movs	r2, #0
 80075da:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80075dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007794 <menuVariableFinisher+0x3cc>)
 80075de:	2200      	movs	r2, #0
 80075e0:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80075e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007798 <menuVariableFinisher+0x3d0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80075e8:	4b6c      	ldr	r3, [pc, #432]	@ (800779c <menuVariableFinisher+0x3d4>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80075ee:	4b6c      	ldr	r3, [pc, #432]	@ (80077a0 <menuVariableFinisher+0x3d8>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 80075f4:	4b6b      	ldr	r3, [pc, #428]	@ (80077a4 <menuVariableFinisher+0x3dc>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 80075fa:	4b6b      	ldr	r3, [pc, #428]	@ (80077a8 <menuVariableFinisher+0x3e0>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007600:	4b6a      	ldr	r3, [pc, #424]	@ (80077ac <menuVariableFinisher+0x3e4>)
 8007602:	2200      	movs	r2, #0
 8007604:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007606:	4b6a      	ldr	r3, [pc, #424]	@ (80077b0 <menuVariableFinisher+0x3e8>)
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800760c:	4b69      	ldr	r3, [pc, #420]	@ (80077b4 <menuVariableFinisher+0x3ec>)
 800760e:	2200      	movs	r2, #0
 8007610:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007612:	4b69      	ldr	r3, [pc, #420]	@ (80077b8 <menuVariableFinisher+0x3f0>)
 8007614:	2200      	movs	r2, #0
 8007616:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007618:	4b68      	ldr	r3, [pc, #416]	@ (80077bc <menuVariableFinisher+0x3f4>)
 800761a:	2200      	movs	r2, #0
 800761c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800761e:	4b68      	ldr	r3, [pc, #416]	@ (80077c0 <menuVariableFinisher+0x3f8>)
 8007620:	2200      	movs	r2, #0
 8007622:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007624:	4b67      	ldr	r3, [pc, #412]	@ (80077c4 <menuVariableFinisher+0x3fc>)
 8007626:	2200      	movs	r2, #0
 8007628:	741a      	strb	r2, [r3, #16]
}
 800762a:	bf00      	nop
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000009c 	.word	0x2000009c
 8007638:	200000b0 	.word	0x200000b0
 800763c:	200000c4 	.word	0x200000c4
 8007640:	200000d8 	.word	0x200000d8
 8007644:	200000ec 	.word	0x200000ec
 8007648:	20000100 	.word	0x20000100
 800764c:	20000114 	.word	0x20000114
 8007650:	20000128 	.word	0x20000128
 8007654:	2000013c 	.word	0x2000013c
 8007658:	20000150 	.word	0x20000150
 800765c:	20000164 	.word	0x20000164
 8007660:	20000178 	.word	0x20000178
 8007664:	2000131c 	.word	0x2000131c
 8007668:	20001330 	.word	0x20001330
 800766c:	20001344 	.word	0x20001344
 8007670:	20001358 	.word	0x20001358
 8007674:	2000136c 	.word	0x2000136c
 8007678:	20001380 	.word	0x20001380
 800767c:	20001394 	.word	0x20001394
 8007680:	200013a8 	.word	0x200013a8
 8007684:	200013bc 	.word	0x200013bc
 8007688:	200013d0 	.word	0x200013d0
 800768c:	200013e4 	.word	0x200013e4
 8007690:	200013f8 	.word	0x200013f8
 8007694:	2000140c 	.word	0x2000140c
 8007698:	20001420 	.word	0x20001420
 800769c:	20001434 	.word	0x20001434
 80076a0:	20001448 	.word	0x20001448
 80076a4:	2000145c 	.word	0x2000145c
 80076a8:	20001470 	.word	0x20001470
 80076ac:	20001484 	.word	0x20001484
 80076b0:	20001498 	.word	0x20001498
 80076b4:	200014ac 	.word	0x200014ac
 80076b8:	200014c0 	.word	0x200014c0
 80076bc:	200014d4 	.word	0x200014d4
 80076c0:	200014e8 	.word	0x200014e8
 80076c4:	200014fc 	.word	0x200014fc
 80076c8:	20001510 	.word	0x20001510
 80076cc:	20001524 	.word	0x20001524
 80076d0:	20001538 	.word	0x20001538
 80076d4:	2000154c 	.word	0x2000154c
 80076d8:	20001560 	.word	0x20001560
 80076dc:	20001574 	.word	0x20001574
 80076e0:	20001588 	.word	0x20001588
 80076e4:	2000159c 	.word	0x2000159c
 80076e8:	200015b0 	.word	0x200015b0
 80076ec:	200015c4 	.word	0x200015c4
 80076f0:	200015d8 	.word	0x200015d8
 80076f4:	200015ec 	.word	0x200015ec
 80076f8:	20001600 	.word	0x20001600
 80076fc:	20001614 	.word	0x20001614
 8007700:	20001628 	.word	0x20001628
 8007704:	2000163c 	.word	0x2000163c
 8007708:	20001650 	.word	0x20001650
 800770c:	20001664 	.word	0x20001664
 8007710:	20001678 	.word	0x20001678
 8007714:	2000168c 	.word	0x2000168c
 8007718:	200016a0 	.word	0x200016a0
 800771c:	200016b4 	.word	0x200016b4
 8007720:	200016c8 	.word	0x200016c8
 8007724:	200016dc 	.word	0x200016dc
 8007728:	200016f0 	.word	0x200016f0
 800772c:	20001704 	.word	0x20001704
 8007730:	20001718 	.word	0x20001718
 8007734:	2000172c 	.word	0x2000172c
 8007738:	20001740 	.word	0x20001740
 800773c:	20001754 	.word	0x20001754
 8007740:	20001768 	.word	0x20001768
 8007744:	2000177c 	.word	0x2000177c
 8007748:	20001790 	.word	0x20001790
 800774c:	200017a4 	.word	0x200017a4
 8007750:	200017b8 	.word	0x200017b8
 8007754:	200017cc 	.word	0x200017cc
 8007758:	200017e0 	.word	0x200017e0
 800775c:	200017f4 	.word	0x200017f4
 8007760:	20001808 	.word	0x20001808
 8007764:	2000181c 	.word	0x2000181c
 8007768:	20001830 	.word	0x20001830
 800776c:	20001844 	.word	0x20001844
 8007770:	20001858 	.word	0x20001858
 8007774:	2000186c 	.word	0x2000186c
 8007778:	20001880 	.word	0x20001880
 800777c:	20001894 	.word	0x20001894
 8007780:	200018a8 	.word	0x200018a8
 8007784:	200018bc 	.word	0x200018bc
 8007788:	200018d0 	.word	0x200018d0
 800778c:	200018e4 	.word	0x200018e4
 8007790:	200018f8 	.word	0x200018f8
 8007794:	2000190c 	.word	0x2000190c
 8007798:	20001920 	.word	0x20001920
 800779c:	20001934 	.word	0x20001934
 80077a0:	20001948 	.word	0x20001948
 80077a4:	2000195c 	.word	0x2000195c
 80077a8:	20001970 	.word	0x20001970
 80077ac:	20001984 	.word	0x20001984
 80077b0:	20001998 	.word	0x20001998
 80077b4:	200019ac 	.word	0x200019ac
 80077b8:	200019c0 	.word	0x200019c0
 80077bc:	200019d4 	.word	0x200019d4
 80077c0:	200019e8 	.word	0x200019e8
 80077c4:	200019fc 	.word	0x200019fc

080077c8 <resetMenuTexts>:

void resetMenuTexts() {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80077cc:	2211      	movs	r2, #17
 80077ce:	2100      	movs	r1, #0
 80077d0:	48d3      	ldr	r0, [pc, #844]	@ (8007b20 <resetMenuTexts+0x358>)
 80077d2:	f005 fe53 	bl	800d47c <memset>
    memset(ayarlarText, 0, 17);
 80077d6:	2211      	movs	r2, #17
 80077d8:	2100      	movs	r1, #0
 80077da:	48d2      	ldr	r0, [pc, #840]	@ (8007b24 <resetMenuTexts+0x35c>)
 80077dc:	f005 fe4e 	bl	800d47c <memset>
    memset(hataKayitListText, 0, 17);
 80077e0:	2211      	movs	r2, #17
 80077e2:	2100      	movs	r1, #0
 80077e4:	48d0      	ldr	r0, [pc, #832]	@ (8007b28 <resetMenuTexts+0x360>)
 80077e6:	f005 fe49 	bl	800d47c <memset>
    memset(birHataKoduText, 0, 17);
 80077ea:	2211      	movs	r2, #17
 80077ec:	2100      	movs	r1, #0
 80077ee:	48cf      	ldr	r0, [pc, #828]	@ (8007b2c <resetMenuTexts+0x364>)
 80077f0:	f005 fe44 	bl	800d47c <memset>
    memset(ikiHataKoduText, 0, 17);
 80077f4:	2211      	movs	r2, #17
 80077f6:	2100      	movs	r1, #0
 80077f8:	48cd      	ldr	r0, [pc, #820]	@ (8007b30 <resetMenuTexts+0x368>)
 80077fa:	f005 fe3f 	bl	800d47c <memset>
    memset(ucHataKoduText, 0, 17);
 80077fe:	2211      	movs	r2, #17
 8007800:	2100      	movs	r1, #0
 8007802:	48cc      	ldr	r0, [pc, #816]	@ (8007b34 <resetMenuTexts+0x36c>)
 8007804:	f005 fe3a 	bl	800d47c <memset>
    memset(dortHataKoduText, 0, 17);
 8007808:	2211      	movs	r2, #17
 800780a:	2100      	movs	r1, #0
 800780c:	48ca      	ldr	r0, [pc, #808]	@ (8007b38 <resetMenuTexts+0x370>)
 800780e:	f005 fe35 	bl	800d47c <memset>
    memset(besHataKoduText, 0, 17);
 8007812:	2211      	movs	r2, #17
 8007814:	2100      	movs	r1, #0
 8007816:	48c9      	ldr	r0, [pc, #804]	@ (8007b3c <resetMenuTexts+0x374>)
 8007818:	f005 fe30 	bl	800d47c <memset>
    memset(altiHataKoduText, 0, 17);
 800781c:	2211      	movs	r2, #17
 800781e:	2100      	movs	r1, #0
 8007820:	48c7      	ldr	r0, [pc, #796]	@ (8007b40 <resetMenuTexts+0x378>)
 8007822:	f005 fe2b 	bl	800d47c <memset>
    memset(yediHataKoduText, 0, 17);
 8007826:	2211      	movs	r2, #17
 8007828:	2100      	movs	r1, #0
 800782a:	48c6      	ldr	r0, [pc, #792]	@ (8007b44 <resetMenuTexts+0x37c>)
 800782c:	f005 fe26 	bl	800d47c <memset>
    memset(sekizHataKoduText, 0, 17);
 8007830:	2211      	movs	r2, #17
 8007832:	2100      	movs	r1, #0
 8007834:	48c4      	ldr	r0, [pc, #784]	@ (8007b48 <resetMenuTexts+0x380>)
 8007836:	f005 fe21 	bl	800d47c <memset>
    memset(dokuzHataKoduText, 0, 17);
 800783a:	2211      	movs	r2, #17
 800783c:	2100      	movs	r1, #0
 800783e:	48c3      	ldr	r0, [pc, #780]	@ (8007b4c <resetMenuTexts+0x384>)
 8007840:	f005 fe1c 	bl	800d47c <memset>
    memset(onHataKoduText, 0, 17);
 8007844:	2211      	movs	r2, #17
 8007846:	2100      	movs	r1, #0
 8007848:	48c1      	ldr	r0, [pc, #772]	@ (8007b50 <resetMenuTexts+0x388>)
 800784a:	f005 fe17 	bl	800d47c <memset>
    memset(silmekIcinText, 0, 17);
 800784e:	2211      	movs	r2, #17
 8007850:	2100      	movs	r1, #0
 8007852:	48c0      	ldr	r0, [pc, #768]	@ (8007b54 <resetMenuTexts+0x38c>)
 8007854:	f005 fe12 	bl	800d47c <memset>
    memset(calismaSekliText, 0, 17);
 8007858:	2211      	movs	r2, #17
 800785a:	2100      	movs	r1, #0
 800785c:	48be      	ldr	r0, [pc, #760]	@ (8007b58 <resetMenuTexts+0x390>)
 800785e:	f005 fe0d 	bl	800d47c <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007862:	2211      	movs	r2, #17
 8007864:	2100      	movs	r1, #0
 8007866:	48bd      	ldr	r0, [pc, #756]	@ (8007b5c <resetMenuTexts+0x394>)
 8007868:	f005 fe08 	bl	800d47c <memset>
    memset(bastikcaCalisanText, 0, 17);
 800786c:	2211      	movs	r2, #17
 800786e:	2100      	movs	r1, #0
 8007870:	48bb      	ldr	r0, [pc, #748]	@ (8007b60 <resetMenuTexts+0x398>)
 8007872:	f005 fe03 	bl	800d47c <memset>
    memset(basGonderText, 0, 17);
 8007876:	2211      	movs	r2, #17
 8007878:	2100      	movs	r1, #0
 800787a:	48ba      	ldr	r0, [pc, #744]	@ (8007b64 <resetMenuTexts+0x39c>)
 800787c:	f005 fdfe 	bl	800d47c <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007880:	2211      	movs	r2, #17
 8007882:	2100      	movs	r1, #0
 8007884:	48b8      	ldr	r0, [pc, #736]	@ (8007b68 <resetMenuTexts+0x3a0>)
 8007886:	f005 fdf9 	bl	800d47c <memset>
    memset(pasifText, 0, 17);
 800788a:	2211      	movs	r2, #17
 800788c:	2100      	movs	r1, #0
 800788e:	48b7      	ldr	r0, [pc, #732]	@ (8007b6c <resetMenuTexts+0x3a4>)
 8007890:	f005 fdf4 	bl	800d47c <memset>
    memset(aktifText, 0, 17);
 8007894:	2211      	movs	r2, #17
 8007896:	2100      	movs	r1, #0
 8007898:	48b5      	ldr	r0, [pc, #724]	@ (8007b70 <resetMenuTexts+0x3a8>)
 800789a:	f005 fdef 	bl	800d47c <memset>
    memset(yavaslamaLimitText, 0, 17);
 800789e:	2211      	movs	r2, #17
 80078a0:	2100      	movs	r1, #0
 80078a2:	48b4      	ldr	r0, [pc, #720]	@ (8007b74 <resetMenuTexts+0x3ac>)
 80078a4:	f005 fdea 	bl	800d47c <memset>
    memset(altLimitText, 0, 17);
 80078a8:	2211      	movs	r2, #17
 80078aa:	2100      	movs	r1, #0
 80078ac:	48b2      	ldr	r0, [pc, #712]	@ (8007b78 <resetMenuTexts+0x3b0>)
 80078ae:	f005 fde5 	bl	800d47c <memset>
    memset(basincSalteriText, 0, 17);
 80078b2:	2211      	movs	r2, #17
 80078b4:	2100      	movs	r1, #0
 80078b6:	48b1      	ldr	r0, [pc, #708]	@ (8007b7c <resetMenuTexts+0x3b4>)
 80078b8:	f005 fde0 	bl	800d47c <memset>
    memset(kapiSecimleriText, 0, 17);
 80078bc:	2211      	movs	r2, #17
 80078be:	2100      	movs	r1, #0
 80078c0:	48af      	ldr	r0, [pc, #700]	@ (8007b80 <resetMenuTexts+0x3b8>)
 80078c2:	f005 fddb 	bl	800d47c <memset>
    memset(katKapisiAktifText, 0, 17);
 80078c6:	2211      	movs	r2, #17
 80078c8:	2100      	movs	r1, #0
 80078ca:	48ae      	ldr	r0, [pc, #696]	@ (8007b84 <resetMenuTexts+0x3bc>)
 80078cc:	f005 fdd6 	bl	800d47c <memset>
    memset(tablaKapiAktifText, 0, 17);
 80078d0:	2211      	movs	r2, #17
 80078d2:	2100      	movs	r1, #0
 80078d4:	48ac      	ldr	r0, [pc, #688]	@ (8007b88 <resetMenuTexts+0x3c0>)
 80078d6:	f005 fdd1 	bl	800d47c <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80078da:	2211      	movs	r2, #17
 80078dc:	2100      	movs	r1, #0
 80078de:	48ab      	ldr	r0, [pc, #684]	@ (8007b8c <resetMenuTexts+0x3c4>)
 80078e0:	f005 fdcc 	bl	800d47c <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80078e4:	2211      	movs	r2, #17
 80078e6:	2100      	movs	r1, #0
 80078e8:	48a9      	ldr	r0, [pc, #676]	@ (8007b90 <resetMenuTexts+0x3c8>)
 80078ea:	f005 fdc7 	bl	800d47c <memset>
    memset(kapiButonuESPText, 0, 17);
 80078ee:	2211      	movs	r2, #17
 80078f0:	2100      	movs	r1, #0
 80078f2:	48a8      	ldr	r0, [pc, #672]	@ (8007b94 <resetMenuTexts+0x3cc>)
 80078f4:	f005 fdc2 	bl	800d47c <memset>
    memset(katButonuEXTText, 0, 17);
 80078f8:	2211      	movs	r2, #17
 80078fa:	2100      	movs	r1, #0
 80078fc:	48a6      	ldr	r0, [pc, #664]	@ (8007b98 <resetMenuTexts+0x3d0>)
 80078fe:	f005 fdbd 	bl	800d47c <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007902:	2211      	movs	r2, #17
 8007904:	2100      	movs	r1, #0
 8007906:	48a5      	ldr	r0, [pc, #660]	@ (8007b9c <resetMenuTexts+0x3d4>)
 8007908:	f005 fdb8 	bl	800d47c <memset>
    memset(butonKontrolluText, 0, 17);
 800790c:	2211      	movs	r2, #17
 800790e:	2100      	movs	r1, #0
 8007910:	48a3      	ldr	r0, [pc, #652]	@ (8007ba0 <resetMenuTexts+0x3d8>)
 8007912:	f005 fdb3 	bl	800d47c <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007916:	2211      	movs	r2, #17
 8007918:	2100      	movs	r1, #0
 800791a:	48a2      	ldr	r0, [pc, #648]	@ (8007ba4 <resetMenuTexts+0x3dc>)
 800791c:	f005 fdae 	bl	800d47c <memset>
    memset(kacSaniyeText, 0, 17);
 8007920:	2211      	movs	r2, #17
 8007922:	2100      	movs	r1, #0
 8007924:	48a0      	ldr	r0, [pc, #640]	@ (8007ba8 <resetMenuTexts+0x3e0>)
 8007926:	f005 fda9 	bl	800d47c <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 800792a:	2211      	movs	r2, #17
 800792c:	2100      	movs	r1, #0
 800792e:	489f      	ldr	r0, [pc, #636]	@ (8007bac <resetMenuTexts+0x3e4>)
 8007930:	f005 fda4 	bl	800d47c <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007934:	2211      	movs	r2, #17
 8007936:	2100      	movs	r1, #0
 8007938:	489d      	ldr	r0, [pc, #628]	@ (8007bb0 <resetMenuTexts+0x3e8>)
 800793a:	f005 fd9f 	bl	800d47c <memset>
    memset(tablaKapiTipiText, 0, 17);
 800793e:	2211      	movs	r2, #17
 8007940:	2100      	movs	r1, #0
 8007942:	489c      	ldr	r0, [pc, #624]	@ (8007bb4 <resetMenuTexts+0x3ec>)
 8007944:	f005 fd9a 	bl	800d47c <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007948:	2211      	movs	r2, #17
 800794a:	2100      	movs	r1, #0
 800794c:	489a      	ldr	r0, [pc, #616]	@ (8007bb8 <resetMenuTexts+0x3f0>)
 800794e:	f005 fd95 	bl	800d47c <memset>
    memset(birinciKattaAcText, 0, 17);
 8007952:	2211      	movs	r2, #17
 8007954:	2100      	movs	r1, #0
 8007956:	4899      	ldr	r0, [pc, #612]	@ (8007bbc <resetMenuTexts+0x3f4>)
 8007958:	f005 fd90 	bl	800d47c <memset>
    memset(ikinciKattaAcText, 0, 17);
 800795c:	2211      	movs	r2, #17
 800795e:	2100      	movs	r1, #0
 8007960:	4897      	ldr	r0, [pc, #604]	@ (8007bc0 <resetMenuTexts+0x3f8>)
 8007962:	f005 fd8b 	bl	800d47c <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007966:	2211      	movs	r2, #17
 8007968:	2100      	movs	r1, #0
 800796a:	4896      	ldr	r0, [pc, #600]	@ (8007bc4 <resetMenuTexts+0x3fc>)
 800796c:	f005 fd86 	bl	800d47c <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007970:	2211      	movs	r2, #17
 8007972:	2100      	movs	r1, #0
 8007974:	4894      	ldr	r0, [pc, #592]	@ (8007bc8 <resetMenuTexts+0x400>)
 8007976:	f005 fd81 	bl	800d47c <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 800797a:	2211      	movs	r2, #17
 800797c:	2100      	movs	r1, #0
 800797e:	4893      	ldr	r0, [pc, #588]	@ (8007bcc <resetMenuTexts+0x404>)
 8007980:	f005 fd7c 	bl	800d47c <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007984:	2211      	movs	r2, #17
 8007986:	2100      	movs	r1, #0
 8007988:	4891      	ldr	r0, [pc, #580]	@ (8007bd0 <resetMenuTexts+0x408>)
 800798a:	f005 fd77 	bl	800d47c <memset>
    memset(devirmeAktifText, 0, 17);
 800798e:	2211      	movs	r2, #17
 8007990:	2100      	movs	r1, #0
 8007992:	4890      	ldr	r0, [pc, #576]	@ (8007bd4 <resetMenuTexts+0x40c>)
 8007994:	f005 fd72 	bl	800d47c <memset>
    memset(yuruyusAktifText, 0, 17);
 8007998:	2211      	movs	r2, #17
 800799a:	2100      	movs	r1, #0
 800799c:	488e      	ldr	r0, [pc, #568]	@ (8007bd8 <resetMenuTexts+0x410>)
 800799e:	f005 fd6d 	bl	800d47c <memset>
    memset(devirmeYukariText, 0, 17);
 80079a2:	2211      	movs	r2, #17
 80079a4:	2100      	movs	r1, #0
 80079a6:	488d      	ldr	r0, [pc, #564]	@ (8007bdc <resetMenuTexts+0x414>)
 80079a8:	f005 fd68 	bl	800d47c <memset>
    memset(yuruyusIleriText, 0, 17);
 80079ac:	2211      	movs	r2, #17
 80079ae:	2100      	movs	r1, #0
 80079b0:	488b      	ldr	r0, [pc, #556]	@ (8007be0 <resetMenuTexts+0x418>)
 80079b2:	f005 fd63 	bl	800d47c <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 80079b6:	2211      	movs	r2, #17
 80079b8:	2100      	movs	r1, #0
 80079ba:	488a      	ldr	r0, [pc, #552]	@ (8007be4 <resetMenuTexts+0x41c>)
 80079bc:	f005 fd5e 	bl	800d47c <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 80079c0:	2211      	movs	r2, #17
 80079c2:	2100      	movs	r1, #0
 80079c4:	4888      	ldr	r0, [pc, #544]	@ (8007be8 <resetMenuTexts+0x420>)
 80079c6:	f005 fd59 	bl	800d47c <memset>
    memset(yuruyusSecildiText, 0, 17);
 80079ca:	2211      	movs	r2, #17
 80079cc:	2100      	movs	r1, #0
 80079ce:	4887      	ldr	r0, [pc, #540]	@ (8007bec <resetMenuTexts+0x424>)
 80079d0:	f005 fd54 	bl	800d47c <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 80079d4:	2211      	movs	r2, #17
 80079d6:	2100      	movs	r1, #0
 80079d8:	4885      	ldr	r0, [pc, #532]	@ (8007bf0 <resetMenuTexts+0x428>)
 80079da:	f005 fd4f 	bl	800d47c <memset>
    memset(tekTesirText, 0, 17);
 80079de:	2211      	movs	r2, #17
 80079e0:	2100      	movs	r1, #0
 80079e2:	4884      	ldr	r0, [pc, #528]	@ (8007bf4 <resetMenuTexts+0x42c>)
 80079e4:	f005 fd4a 	bl	800d47c <memset>
    memset(ciftTesirText, 0, 17);
 80079e8:	2211      	movs	r2, #17
 80079ea:	2100      	movs	r1, #0
 80079ec:	4882      	ldr	r0, [pc, #520]	@ (8007bf8 <resetMenuTexts+0x430>)
 80079ee:	f005 fd45 	bl	800d47c <memset>
    memset(platformSilindirTipiText, 0, 17);
 80079f2:	2211      	movs	r2, #17
 80079f4:	2100      	movs	r1, #0
 80079f6:	4881      	ldr	r0, [pc, #516]	@ (8007bfc <resetMenuTexts+0x434>)
 80079f8:	f005 fd40 	bl	800d47c <memset>
    memset(yukariValfSureText, 0, 17);
 80079fc:	2211      	movs	r2, #17
 80079fe:	2100      	movs	r1, #0
 8007a00:	487f      	ldr	r0, [pc, #508]	@ (8007c00 <resetMenuTexts+0x438>)
 8007a02:	f005 fd3b 	bl	800d47c <memset>
    memset(asagiValfSureText, 0, 17);
 8007a06:	2211      	movs	r2, #17
 8007a08:	2100      	movs	r1, #0
 8007a0a:	487e      	ldr	r0, [pc, #504]	@ (8007c04 <resetMenuTexts+0x43c>)
 8007a0c:	f005 fd36 	bl	800d47c <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007a10:	2211      	movs	r2, #17
 8007a12:	2100      	movs	r1, #0
 8007a14:	487c      	ldr	r0, [pc, #496]	@ (8007c08 <resetMenuTexts+0x440>)
 8007a16:	f005 fd31 	bl	800d47c <memset>
    memset(ileriValfSureText, 0, 17);
 8007a1a:	2211      	movs	r2, #17
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	487b      	ldr	r0, [pc, #492]	@ (8007c0c <resetMenuTexts+0x444>)
 8007a20:	f005 fd2c 	bl	800d47c <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007a24:	2211      	movs	r2, #17
 8007a26:	2100      	movs	r1, #0
 8007a28:	4879      	ldr	r0, [pc, #484]	@ (8007c10 <resetMenuTexts+0x448>)
 8007a2a:	f005 fd27 	bl	800d47c <memset>
    memset(geriValfSureText, 0, 17);
 8007a2e:	2211      	movs	r2, #17
 8007a30:	2100      	movs	r1, #0
 8007a32:	4878      	ldr	r0, [pc, #480]	@ (8007c14 <resetMenuTexts+0x44c>)
 8007a34:	f005 fd22 	bl	800d47c <memset>
    memset(calismaSuresiText, 0, 17);
 8007a38:	2211      	movs	r2, #17
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4876      	ldr	r0, [pc, #472]	@ (8007c18 <resetMenuTexts+0x450>)
 8007a3e:	f005 fd1d 	bl	800d47c <memset>
    memset(calismaSayisiText, 0, 17);
 8007a42:	2211      	movs	r2, #17
 8007a44:	2100      	movs	r1, #0
 8007a46:	4875      	ldr	r0, [pc, #468]	@ (8007c1c <resetMenuTexts+0x454>)
 8007a48:	f005 fd18 	bl	800d47c <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4873      	ldr	r0, [pc, #460]	@ (8007c20 <resetMenuTexts+0x458>)
 8007a52:	f005 fd13 	bl	800d47c <memset>
    memset(dilSecimText, 0, 17);
 8007a56:	2211      	movs	r2, #17
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4872      	ldr	r0, [pc, #456]	@ (8007c24 <resetMenuTexts+0x45c>)
 8007a5c:	f005 fd0e 	bl	800d47c <memset>
    memset(secilenDilText, 0, 17);
 8007a60:	2211      	movs	r2, #17
 8007a62:	2100      	movs	r1, #0
 8007a64:	4870      	ldr	r0, [pc, #448]	@ (8007c28 <resetMenuTexts+0x460>)
 8007a66:	f005 fd09 	bl	800d47c <memset>
    memset(menudenCikisText, 0, 17);
 8007a6a:	2211      	movs	r2, #17
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	486f      	ldr	r0, [pc, #444]	@ (8007c2c <resetMenuTexts+0x464>)
 8007a70:	f005 fd04 	bl	800d47c <memset>
    memset(enteraBasinizText, 0, 17);
 8007a74:	2211      	movs	r2, #17
 8007a76:	2100      	movs	r1, #0
 8007a78:	486d      	ldr	r0, [pc, #436]	@ (8007c30 <resetMenuTexts+0x468>)
 8007a7a:	f005 fcff 	bl	800d47c <memset>
    memset(hataKoduText, 0, 17);
 8007a7e:	2211      	movs	r2, #17
 8007a80:	2100      	movs	r1, #0
 8007a82:	486c      	ldr	r0, [pc, #432]	@ (8007c34 <resetMenuTexts+0x46c>)
 8007a84:	f005 fcfa 	bl	800d47c <memset>
    memset(dataSynchText, 0, 17);
 8007a88:	2211      	movs	r2, #17
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	486a      	ldr	r0, [pc, #424]	@ (8007c38 <resetMenuTexts+0x470>)
 8007a8e:	f005 fcf5 	bl	800d47c <memset>
    memset(dataSynch2Text, 0, 17);
 8007a92:	2211      	movs	r2, #17
 8007a94:	2100      	movs	r1, #0
 8007a96:	4869      	ldr	r0, [pc, #420]	@ (8007c3c <resetMenuTexts+0x474>)
 8007a98:	f005 fcf0 	bl	800d47c <memset>
    memset(mustBeUniqueText, 0, 17);
 8007a9c:	2211      	movs	r2, #17
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4867      	ldr	r0, [pc, #412]	@ (8007c40 <resetMenuTexts+0x478>)
 8007aa2:	f005 fceb 	bl	800d47c <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007aa6:	2211      	movs	r2, #17
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4866      	ldr	r0, [pc, #408]	@ (8007c44 <resetMenuTexts+0x47c>)
 8007aac:	f005 fce6 	bl	800d47c <memset>
    memset(mustBe12Text, 0, 17);
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4864      	ldr	r0, [pc, #400]	@ (8007c48 <resetMenuTexts+0x480>)
 8007ab6:	f005 fce1 	bl	800d47c <memset>
    memset(mustBe122Text, 0, 17);
 8007aba:	2211      	movs	r2, #17
 8007abc:	2100      	movs	r1, #0
 8007abe:	4863      	ldr	r0, [pc, #396]	@ (8007c4c <resetMenuTexts+0x484>)
 8007ac0:	f005 fcdc 	bl	800d47c <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007ac4:	2211      	movs	r2, #17
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4861      	ldr	r0, [pc, #388]	@ (8007c50 <resetMenuTexts+0x488>)
 8007aca:	f005 fcd7 	bl	800d47c <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007ace:	2211      	movs	r2, #17
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4860      	ldr	r0, [pc, #384]	@ (8007c54 <resetMenuTexts+0x48c>)
 8007ad4:	f005 fcd2 	bl	800d47c <memset>
    memset(passExceedErrorText, 0, 17);
 8007ad8:	2211      	movs	r2, #17
 8007ada:	2100      	movs	r1, #0
 8007adc:	485e      	ldr	r0, [pc, #376]	@ (8007c58 <resetMenuTexts+0x490>)
 8007ade:	f005 fccd 	bl	800d47c <memset>
    memset(passExceedError2Text, 0, 17);
 8007ae2:	2211      	movs	r2, #17
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	485d      	ldr	r0, [pc, #372]	@ (8007c5c <resetMenuTexts+0x494>)
 8007ae8:	f005 fcc8 	bl	800d47c <memset>
    memset(dataYazildiText, 0, 17);
 8007aec:	2211      	movs	r2, #17
 8007aee:	2100      	movs	r1, #0
 8007af0:	485b      	ldr	r0, [pc, #364]	@ (8007c60 <resetMenuTexts+0x498>)
 8007af2:	f005 fcc3 	bl	800d47c <memset>
    memset(dataOkunuyorText, 0, 17);
 8007af6:	2211      	movs	r2, #17
 8007af8:	2100      	movs	r1, #0
 8007afa:	485a      	ldr	r0, [pc, #360]	@ (8007c64 <resetMenuTexts+0x49c>)
 8007afc:	f005 fcbe 	bl	800d47c <memset>
    memset(dataOkunduText, 0, 17);
 8007b00:	2211      	movs	r2, #17
 8007b02:	2100      	movs	r1, #0
 8007b04:	4858      	ldr	r0, [pc, #352]	@ (8007c68 <resetMenuTexts+0x4a0>)
 8007b06:	f005 fcb9 	bl	800d47c <memset>
    memset(degerKaydedildiText, 0, 17);
 8007b0a:	2211      	movs	r2, #17
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4857      	ldr	r0, [pc, #348]	@ (8007c6c <resetMenuTexts+0x4a4>)
 8007b10:	f005 fcb4 	bl	800d47c <memset>
    memset(errorCodeText, 0, 17);
 8007b14:	2211      	movs	r2, #17
 8007b16:	2100      	movs	r1, #0
 8007b18:	4855      	ldr	r0, [pc, #340]	@ (8007c70 <resetMenuTexts+0x4a8>)
 8007b1a:	f005 fcaf 	bl	800d47c <memset>
 8007b1e:	e0a9      	b.n	8007c74 <resetMenuTexts+0x4ac>
 8007b20:	2000131c 	.word	0x2000131c
 8007b24:	20001330 	.word	0x20001330
 8007b28:	20001344 	.word	0x20001344
 8007b2c:	20001358 	.word	0x20001358
 8007b30:	2000136c 	.word	0x2000136c
 8007b34:	20001380 	.word	0x20001380
 8007b38:	20001394 	.word	0x20001394
 8007b3c:	200013a8 	.word	0x200013a8
 8007b40:	200013bc 	.word	0x200013bc
 8007b44:	200013d0 	.word	0x200013d0
 8007b48:	200013e4 	.word	0x200013e4
 8007b4c:	200013f8 	.word	0x200013f8
 8007b50:	2000140c 	.word	0x2000140c
 8007b54:	20001420 	.word	0x20001420
 8007b58:	20001434 	.word	0x20001434
 8007b5c:	20001448 	.word	0x20001448
 8007b60:	2000145c 	.word	0x2000145c
 8007b64:	20001470 	.word	0x20001470
 8007b68:	20001484 	.word	0x20001484
 8007b6c:	20001498 	.word	0x20001498
 8007b70:	200014ac 	.word	0x200014ac
 8007b74:	200014c0 	.word	0x200014c0
 8007b78:	200014d4 	.word	0x200014d4
 8007b7c:	200014e8 	.word	0x200014e8
 8007b80:	200014fc 	.word	0x200014fc
 8007b84:	20001510 	.word	0x20001510
 8007b88:	20001524 	.word	0x20001524
 8007b8c:	20001538 	.word	0x20001538
 8007b90:	2000154c 	.word	0x2000154c
 8007b94:	20001560 	.word	0x20001560
 8007b98:	20001574 	.word	0x20001574
 8007b9c:	20001588 	.word	0x20001588
 8007ba0:	2000159c 	.word	0x2000159c
 8007ba4:	200015b0 	.word	0x200015b0
 8007ba8:	200015c4 	.word	0x200015c4
 8007bac:	200015d8 	.word	0x200015d8
 8007bb0:	200015ec 	.word	0x200015ec
 8007bb4:	20001600 	.word	0x20001600
 8007bb8:	20001614 	.word	0x20001614
 8007bbc:	20001628 	.word	0x20001628
 8007bc0:	2000163c 	.word	0x2000163c
 8007bc4:	20001650 	.word	0x20001650
 8007bc8:	20001664 	.word	0x20001664
 8007bcc:	20001678 	.word	0x20001678
 8007bd0:	2000168c 	.word	0x2000168c
 8007bd4:	200016a0 	.word	0x200016a0
 8007bd8:	200016b4 	.word	0x200016b4
 8007bdc:	200016c8 	.word	0x200016c8
 8007be0:	200016dc 	.word	0x200016dc
 8007be4:	200016f0 	.word	0x200016f0
 8007be8:	20001704 	.word	0x20001704
 8007bec:	20001718 	.word	0x20001718
 8007bf0:	2000172c 	.word	0x2000172c
 8007bf4:	20001740 	.word	0x20001740
 8007bf8:	20001754 	.word	0x20001754
 8007bfc:	20001768 	.word	0x20001768
 8007c00:	2000177c 	.word	0x2000177c
 8007c04:	20001790 	.word	0x20001790
 8007c08:	200017a4 	.word	0x200017a4
 8007c0c:	200017b8 	.word	0x200017b8
 8007c10:	200017cc 	.word	0x200017cc
 8007c14:	200017e0 	.word	0x200017e0
 8007c18:	200017f4 	.word	0x200017f4
 8007c1c:	20001808 	.word	0x20001808
 8007c20:	2000181c 	.word	0x2000181c
 8007c24:	20001830 	.word	0x20001830
 8007c28:	20001844 	.word	0x20001844
 8007c2c:	20001858 	.word	0x20001858
 8007c30:	2000186c 	.word	0x2000186c
 8007c34:	20001880 	.word	0x20001880
 8007c38:	20001894 	.word	0x20001894
 8007c3c:	200018a8 	.word	0x200018a8
 8007c40:	200018bc 	.word	0x200018bc
 8007c44:	200018d0 	.word	0x200018d0
 8007c48:	200018e4 	.word	0x200018e4
 8007c4c:	200018f8 	.word	0x200018f8
 8007c50:	2000190c 	.word	0x2000190c
 8007c54:	20001920 	.word	0x20001920
 8007c58:	20001934 	.word	0x20001934
 8007c5c:	20001948 	.word	0x20001948
 8007c60:	2000195c 	.word	0x2000195c
 8007c64:	20001970 	.word	0x20001970
 8007c68:	20001984 	.word	0x20001984
 8007c6c:	20001998 	.word	0x20001998
 8007c70:	200019ac 	.word	0x200019ac
    memset(machineIDText, 0, 17);
 8007c74:	2211      	movs	r2, #17
 8007c76:	2100      	movs	r1, #0
 8007c78:	4809      	ldr	r0, [pc, #36]	@ (8007ca0 <resetMenuTexts+0x4d8>)
 8007c7a:	f005 fbff 	bl	800d47c <memset>
    memset(idConfirmationText, 0, 17);
 8007c7e:	2211      	movs	r2, #17
 8007c80:	2100      	movs	r1, #0
 8007c82:	4808      	ldr	r0, [pc, #32]	@ (8007ca4 <resetMenuTexts+0x4dc>)
 8007c84:	f005 fbfa 	bl	800d47c <memset>
    memset(idConfirmationSubText, 0, 17);
 8007c88:	2211      	movs	r2, #17
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4806      	ldr	r0, [pc, #24]	@ (8007ca8 <resetMenuTexts+0x4e0>)
 8007c8e:	f005 fbf5 	bl	800d47c <memset>
    memset(wifiConfirmationText, 0, 17);
 8007c92:	2211      	movs	r2, #17
 8007c94:	2100      	movs	r1, #0
 8007c96:	4805      	ldr	r0, [pc, #20]	@ (8007cac <resetMenuTexts+0x4e4>)
 8007c98:	f005 fbf0 	bl	800d47c <memset>
}
 8007c9c:	bf00      	nop
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200019c0 	.word	0x200019c0
 8007ca4:	200019d4 	.word	0x200019d4
 8007ca8:	200019e8 	.word	0x200019e8
 8007cac:	200019fc 	.word	0x200019fc

08007cb0 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007cb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007cba:	f001 fc75 	bl	80095a8 <HAL_Delay>
	int confirmationVal = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007cc2:	e012      	b.n	8007cea <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007cc4:	4a12      	ldr	r2, [pc, #72]	@ (8007d10 <takeMachineIDWithConfirmation+0x60>)
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	2001      	movs	r0, #1
 8007cca:	f000 ff01 	bl	8008ad0 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007cce:	4a11      	ldr	r2, [pc, #68]	@ (8007d14 <takeMachineIDWithConfirmation+0x64>)
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f000 fefc 	bl	8008ad0 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007cd8:	2102      	movs	r1, #2
 8007cda:	480f      	ldr	r0, [pc, #60]	@ (8007d18 <takeMachineIDWithConfirmation+0x68>)
 8007cdc:	f002 fa34 	bl	800a148 <HAL_GPIO_ReadPin>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0e9      	beq.n	8007cc4 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007cf0:	f000 f814 	bl	8007d1c <takeMachineID>

	convertArrays(1);
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f7f8 fdd7 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 8007cfa:	2032      	movs	r0, #50	@ 0x32
 8007cfc:	f001 fc54 	bl	80095a8 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007d00:	2001      	movs	r0, #1
 8007d02:	f7f9 fabf 	bl	8001284 <printCredentials>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200019d4 	.word	0x200019d4
 8007d14:	200019e8 	.word	0x200019e8
 8007d18:	40010800 	.word	0x40010800

08007d1c <takeMachineID>:

void takeMachineID() {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007d22:	2001      	movs	r0, #1
 8007d24:	f000 ff32 	bl	8008b8c <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007d28:	220c      	movs	r2, #12
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	48a6      	ldr	r0, [pc, #664]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007d2e:	f005 fba5 	bl	800d47c <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007d32:	2305      	movs	r3, #5
 8007d34:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007d36:	2303      	movs	r3, #3
 8007d38:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007d3e:	4ba3      	ldr	r3, [pc, #652]	@ (8007fcc <takeMachineID+0x2b0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 8007d44:	2100      	movs	r1, #0
 8007d46:	2001      	movs	r0, #1
 8007d48:	f7f9 f92c 	bl	8000fa4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007d4c:	2108      	movs	r1, #8
 8007d4e:	48a0      	ldr	r0, [pc, #640]	@ (8007fd0 <takeMachineID+0x2b4>)
 8007d50:	f002 f9fa 	bl	800a148 <HAL_GPIO_ReadPin>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d12f      	bne.n	8007dba <takeMachineID+0x9e>
        	lcd_cursor(0);
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f000 ff16 	bl	8008b8c <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007d60:	f000 fcf0 	bl	8008744 <checkEEPROM4ID>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d00e      	beq.n	8007d88 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007d6a:	4a9a      	ldr	r2, [pc, #616]	@ (8007fd4 <takeMachineID+0x2b8>)
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	2001      	movs	r0, #1
 8007d70:	f000 feae 	bl	8008ad0 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007d74:	4a98      	ldr	r2, [pc, #608]	@ (8007fd8 <takeMachineID+0x2bc>)
 8007d76:	2101      	movs	r1, #1
 8007d78:	2002      	movs	r0, #2
 8007d7a:	f000 fea9 	bl	8008ad0 <lcd_print>
        		HAL_Delay(1250);
 8007d7e:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007d82:	f001 fc11 	bl	80095a8 <HAL_Delay>

        		goto mainSection;
 8007d86:	e7cc      	b.n	8007d22 <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8007d88:	f000 fd02 	bl	8008790 <az5>
 8007d8c:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d103      	bne.n	8007d9c <takeMachineID+0x80>
        		saveEEPROM(1);
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7f8 fc85 	bl	80006a4 <saveEEPROM>
 8007d9a:	e00e      	b.n	8007dba <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 8007d9c:	4a8f      	ldr	r2, [pc, #572]	@ (8007fdc <takeMachineID+0x2c0>)
 8007d9e:	2101      	movs	r1, #1
 8007da0:	2001      	movs	r0, #1
 8007da2:	f000 fe95 	bl	8008ad0 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 8007da6:	4a8e      	ldr	r2, [pc, #568]	@ (8007fe0 <takeMachineID+0x2c4>)
 8007da8:	2101      	movs	r1, #1
 8007daa:	2002      	movs	r0, #2
 8007dac:	f000 fe90 	bl	8008ad0 <lcd_print>

        		HAL_Delay(500);
 8007db0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007db4:	f001 fbf8 	bl	80095a8 <HAL_Delay>

        		goto mainSection;
 8007db8:	e7b3      	b.n	8007d22 <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4884      	ldr	r0, [pc, #528]	@ (8007fd0 <takeMachineID+0x2b4>)
 8007dbe:	f002 f9c3 	bl	800a148 <HAL_GPIO_ReadPin>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d111      	bne.n	8007dec <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b07      	cmp	r3, #7
 8007dcc:	d102      	bne.n	8007dd4 <takeMachineID+0xb8>
        		cursorPosition = 10;
 8007dce:	230a      	movs	r3, #10
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	e008      	b.n	8007de6 <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b0e      	cmp	r3, #14
 8007dd8:	d102      	bne.n	8007de0 <takeMachineID+0xc4>
                cursorPosition = 3;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	e002      	b.n	8007de6 <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3301      	adds	r3, #1
 8007de4:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 8007de6:	2096      	movs	r0, #150	@ 0x96
 8007de8:	f001 fbde 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007dec:	2108      	movs	r1, #8
 8007dee:	487d      	ldr	r0, [pc, #500]	@ (8007fe4 <takeMachineID+0x2c8>)
 8007df0:	f002 f9aa 	bl	800a148 <HAL_GPIO_ReadPin>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d111      	bne.n	8007e1e <takeMachineID+0x102>
            if (cursorPosition == 3) {
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d102      	bne.n	8007e06 <takeMachineID+0xea>
                cursorPosition = 14;
 8007e00:	230e      	movs	r3, #14
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	e008      	b.n	8007e18 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b0a      	cmp	r3, #10
 8007e0a:	d102      	bne.n	8007e12 <takeMachineID+0xf6>
            	cursorPosition = 7;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e002      	b.n	8007e18 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8007e18:	20fa      	movs	r0, #250	@ 0xfa
 8007e1a:	f001 fbc5 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e1e:	2102      	movs	r1, #2
 8007e20:	486b      	ldr	r0, [pc, #428]	@ (8007fd0 <takeMachineID+0x2b4>)
 8007e22:	f002 f991 	bl	800a148 <HAL_GPIO_ReadPin>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	f040 80a1 	bne.w	8007f70 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d10a      	bne.n	8007e4a <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 8007e34:	4a64      	ldr	r2, [pc, #400]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	2230      	movs	r2, #48	@ 0x30
 8007e3c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e07c      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d10a      	bne.n	8007e66 <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 8007e50:	4a5d      	ldr	r2, [pc, #372]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	2231      	movs	r2, #49	@ 0x31
 8007e58:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007e5a:	4a63      	ldr	r2, [pc, #396]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4413      	add	r3, r2
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e06e      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b05      	cmp	r3, #5
 8007e6a:	d10a      	bne.n	8007e82 <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 8007e6c:	4a56      	ldr	r2, [pc, #344]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	2232      	movs	r2, #50	@ 0x32
 8007e74:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007e76:	4a5c      	ldr	r2, [pc, #368]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	e060      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b06      	cmp	r3, #6
 8007e86:	d10a      	bne.n	8007e9e <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8007e88:	4a4f      	ldr	r2, [pc, #316]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	2233      	movs	r2, #51	@ 0x33
 8007e90:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007e92:	4a55      	ldr	r2, [pc, #340]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4413      	add	r3, r2
 8007e98:	2203      	movs	r2, #3
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e052      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d10a      	bne.n	8007eba <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 8007ea4:	4a48      	ldr	r2, [pc, #288]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	2234      	movs	r2, #52	@ 0x34
 8007eac:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007eae:	4a4e      	ldr	r2, [pc, #312]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e044      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b0a      	cmp	r3, #10
 8007ebe:	d10a      	bne.n	8007ed6 <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 8007ec0:	4a41      	ldr	r2, [pc, #260]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	2235      	movs	r2, #53	@ 0x35
 8007ec8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007eca:	4a47      	ldr	r2, [pc, #284]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4413      	add	r3, r2
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e036      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d10a      	bne.n	8007ef2 <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 8007edc:	4a3a      	ldr	r2, [pc, #232]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	2236      	movs	r2, #54	@ 0x36
 8007ee4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007ee6:	4a40      	ldr	r2, [pc, #256]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4413      	add	r3, r2
 8007eec:	2206      	movs	r2, #6
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	e028      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d10a      	bne.n	8007f0e <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 8007ef8:	4a33      	ldr	r2, [pc, #204]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	2237      	movs	r2, #55	@ 0x37
 8007f00:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007f02:	4a39      	ldr	r2, [pc, #228]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4413      	add	r3, r2
 8007f08:	2207      	movs	r2, #7
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e01a      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b0d      	cmp	r3, #13
 8007f12:	d10a      	bne.n	8007f2a <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 8007f14:	4a2c      	ldr	r2, [pc, #176]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	2238      	movs	r2, #56	@ 0x38
 8007f1c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007f1e:	4a32      	ldr	r2, [pc, #200]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4413      	add	r3, r2
 8007f24:	2208      	movs	r2, #8
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	e00c      	b.n	8007f44 <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b0e      	cmp	r3, #14
 8007f2e:	d109      	bne.n	8007f44 <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 8007f30:	4a25      	ldr	r2, [pc, #148]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	2239      	movs	r2, #57	@ 0x39
 8007f38:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4413      	add	r3, r2
 8007f40:	2209      	movs	r2, #9
 8007f42:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	b2d9      	uxtb	r1, r3
 8007f48:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	2001      	movs	r0, #1
 8007f54:	f000 fdd1 	bl	8008afa <lcd_print_char>

        	writeLoc++;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8007f6a:	2096      	movs	r0, #150	@ 0x96
 8007f6c:	f001 fb1c 	bl	80095a8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007f70:	2104      	movs	r1, #4
 8007f72:	4817      	ldr	r0, [pc, #92]	@ (8007fd0 <takeMachineID+0x2b4>)
 8007f74:	f002 f8e8 	bl	800a148 <HAL_GPIO_ReadPin>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d14c      	bne.n	8008018 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 8007f7e:	4b12      	ldr	r3, [pc, #72]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d045      	beq.n	8008012 <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 8007f86:	4a10      	ldr	r2, [pc, #64]	@ (8007fc8 <takeMachineID+0x2ac>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007f90:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <takeMachineID+0x2cc>)
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b05      	cmp	r3, #5
 8007f9e:	dd03      	ble.n	8007fa8 <takeMachineID+0x28c>
                	writeLoc--;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e004      	b.n	8007fb2 <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	dc01      	bgt.n	8007fb2 <takeMachineID+0x296>
                	writeLoc = 5;
 8007fae:	2305      	movs	r3, #5
 8007fb0:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dd19      	ble.n	8007fec <takeMachineID+0x2d0>
                	arrayPos--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	e01a      	b.n	8007ffc <takeMachineID+0x2e0>
 8007fc6:	bf00      	nop
 8007fc8:	20001064 	.word	0x20001064
 8007fcc:	20000000 	.word	0x20000000
 8007fd0:	40010800 	.word	0x40010800
 8007fd4:	200018e4 	.word	0x200018e4
 8007fd8:	200018f8 	.word	0x200018f8
 8007fdc:	200018bc 	.word	0x200018bc
 8007fe0:	200018d0 	.word	0x200018d0
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da04      	bge.n	8007ffc <takeMachineID+0x2e0>
                	arrayPos = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 8007ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8008028 <takeMachineID+0x30c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	3305      	adds	r3, #5
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4619      	mov	r1, r3
 8008006:	2001      	movs	r0, #1
 8008008:	f000 fd98 	bl	8008b3c <lcd_delete_char>
                HAL_Delay(50);
 800800c:	2032      	movs	r0, #50	@ 0x32
 800800e:	f001 facb 	bl	80095a8 <HAL_Delay>
            }

            HAL_Delay(150);
 8008012:	2096      	movs	r0, #150	@ 0x96
 8008014:	f001 fac8 	bl	80095a8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	2002      	movs	r0, #2
 8008020:	f000 fd37 	bl	8008a92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008024:	e692      	b.n	8007d4c <takeMachineID+0x30>
 8008026:	bf00      	nop
 8008028:	20000000 	.word	0x20000000

0800802c <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008036:	4a1e      	ldr	r2, [pc, #120]	@ (80080b0 <ssidConfirmation+0x84>)
 8008038:	2101      	movs	r1, #1
 800803a:	2001      	movs	r0, #1
 800803c:	f000 fd48 	bl	8008ad0 <lcd_print>

	while(loopVal == 1) {
 8008040:	e012      	b.n	8008068 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008042:	4a1c      	ldr	r2, [pc, #112]	@ (80080b4 <ssidConfirmation+0x88>)
 8008044:	2101      	movs	r1, #1
 8008046:	2002      	movs	r0, #2
 8008048:	f000 fd42 	bl	8008ad0 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800804c:	2102      	movs	r1, #2
 800804e:	481a      	ldr	r0, [pc, #104]	@ (80080b8 <ssidConfirmation+0x8c>)
 8008050:	f002 f87a 	bl	800a148 <HAL_GPIO_ReadPin>
 8008054:	4603      	mov	r3, r0
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <ssidConfirmation+0x32>
			loopVal = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800805e:	4a17      	ldr	r2, [pc, #92]	@ (80080bc <ssidConfirmation+0x90>)
 8008060:	2101      	movs	r1, #1
 8008062:	2001      	movs	r0, #1
 8008064:	f000 fd34 	bl	8008ad0 <lcd_print>
	while(loopVal == 1) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d0e9      	beq.n	8008042 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800806e:	2000      	movs	r0, #0
 8008070:	f000 fd8c 	bl	8008b8c <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008074:	4811      	ldr	r0, [pc, #68]	@ (80080bc <ssidConfirmation+0x90>)
 8008076:	f7f8 f8d5 	bl	8000224 <strlen>
 800807a:	4603      	mov	r3, r0
 800807c:	2b14      	cmp	r3, #20
 800807e:	d90f      	bls.n	80080a0 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008080:	4a0f      	ldr	r2, [pc, #60]	@ (80080c0 <ssidConfirmation+0x94>)
 8008082:	2101      	movs	r1, #1
 8008084:	2001      	movs	r0, #1
 8008086:	f000 fd23 	bl	8008ad0 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800808a:	4a0e      	ldr	r2, [pc, #56]	@ (80080c4 <ssidConfirmation+0x98>)
 800808c:	2101      	movs	r1, #1
 800808e:	2002      	movs	r0, #2
 8008090:	f000 fd1e 	bl	8008ad0 <lcd_print>
        HAL_Delay(1250);
 8008094:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008098:	f001 fa86 	bl	80095a8 <HAL_Delay>

        return 0;
 800809c:	2300      	movs	r3, #0
 800809e:	e003      	b.n	80080a8 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80080a0:	2001      	movs	r0, #1
 80080a2:	f7f8 faff 	bl	80006a4 <saveEEPROM>

    	return 1;
 80080a6:	2301      	movs	r3, #1
    }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	0800e8c0 	.word	0x0800e8c0
 80080b4:	200019fc 	.word	0x200019fc
 80080b8:	40010800 	.word	0x40010800
 80080bc:	20001070 	.word	0x20001070
 80080c0:	2000190c 	.word	0x2000190c
 80080c4:	20001920 	.word	0x20001920

080080c8 <takeWifiSSID>:

void takeWifiSSID() {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80080ce:	2001      	movs	r0, #1
 80080d0:	f000 fd5c 	bl	8008b8c <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80080d4:	2210      	movs	r2, #16
 80080d6:	2100      	movs	r1, #0
 80080d8:	48a4      	ldr	r0, [pc, #656]	@ (800836c <takeWifiSSID+0x2a4>)
 80080da:	f005 f9cf 	bl	800d47c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80080de:	2301      	movs	r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80080e2:	2307      	movs	r3, #7
 80080e4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80080e6:	2301      	movs	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80080ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008370 <takeWifiSSID+0x2a8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80080f4:	2101      	movs	r1, #1
 80080f6:	2002      	movs	r0, #2
 80080f8:	f7f8 ff54 	bl	8000fa4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080fc:	2108      	movs	r1, #8
 80080fe:	489d      	ldr	r0, [pc, #628]	@ (8008374 <takeWifiSSID+0x2ac>)
 8008100:	f002 f822 	bl	800a148 <HAL_GPIO_ReadPin>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d106      	bne.n	8008118 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 800810a:	f7ff ff8f 	bl	800802c <ssidConfirmation>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8126 	bne.w	8008362 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8008116:	e7da      	b.n	80080ce <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008118:	2101      	movs	r1, #1
 800811a:	4896      	ldr	r0, [pc, #600]	@ (8008374 <takeWifiSSID+0x2ac>)
 800811c:	f002 f814 	bl	800a148 <HAL_GPIO_ReadPin>
 8008120:	4603      	mov	r3, r0
 8008122:	2b01      	cmp	r3, #1
 8008124:	d14d      	bne.n	80081c2 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b50      	cmp	r3, #80	@ 0x50
 800812a:	dd01      	ble.n	8008130 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b10      	cmp	r3, #16
 8008134:	d13f      	bne.n	80081b6 <takeWifiSSID+0xee>
            	if(page == 1) {
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d109      	bne.n	8008150 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 800813c:	2301      	movs	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3301      	adds	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008146:	2102      	movs	r1, #2
 8008148:	2002      	movs	r0, #2
 800814a:	f7f8 ff2b 	bl	8000fa4 <printTemplate>
 800814e:	e035      	b.n	80081bc <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d109      	bne.n	800816a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8008156:	2301      	movs	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
            		page++;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	3301      	adds	r3, #1
 800815e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008160:	2103      	movs	r1, #3
 8008162:	2002      	movs	r0, #2
 8008164:	f7f8 ff1e 	bl	8000fa4 <printTemplate>
 8008168:	e028      	b.n	80081bc <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b03      	cmp	r3, #3
 800816e:	d109      	bne.n	8008184 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008170:	2301      	movs	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
            		page++;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3301      	adds	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800817a:	2104      	movs	r1, #4
 800817c:	2002      	movs	r0, #2
 800817e:	f7f8 ff11 	bl	8000fa4 <printTemplate>
 8008182:	e01b      	b.n	80081bc <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b04      	cmp	r3, #4
 8008188:	d109      	bne.n	800819e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
            		page++;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3301      	adds	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008194:	2105      	movs	r1, #5
 8008196:	2002      	movs	r0, #2
 8008198:	f7f8 ff04 	bl	8000fa4 <printTemplate>
 800819c:	e00e      	b.n	80081bc <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d10b      	bne.n	80081bc <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80081a8:	2301      	movs	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80081ac:	2101      	movs	r1, #1
 80081ae:	2002      	movs	r0, #2
 80081b0:	f7f8 fef8 	bl	8000fa4 <printTemplate>
 80081b4:	e002      	b.n	80081bc <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80081bc:	2096      	movs	r0, #150	@ 0x96
 80081be:	f001 f9f3 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80081c2:	2108      	movs	r1, #8
 80081c4:	486c      	ldr	r0, [pc, #432]	@ (8008378 <takeWifiSSID+0x2b0>)
 80081c6:	f001 ffbf 	bl	800a148 <HAL_GPIO_ReadPin>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d149      	bne.n	8008264 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dc01      	bgt.n	80081da <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80081d6:	2350      	movs	r3, #80	@ 0x50
 80081d8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d13b      	bne.n	8008258 <takeWifiSSID+0x190>
            	if(page == 1) {
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d108      	bne.n	80081f8 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80081e6:	2310      	movs	r3, #16
 80081e8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80081ea:	2305      	movs	r3, #5
 80081ec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80081ee:	2105      	movs	r1, #5
 80081f0:	2002      	movs	r0, #2
 80081f2:	f7f8 fed7 	bl	8000fa4 <printTemplate>
 80081f6:	e032      	b.n	800825e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d108      	bne.n	8008210 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80081fe:	2310      	movs	r3, #16
 8008200:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008202:	2301      	movs	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008206:	2101      	movs	r1, #1
 8008208:	2002      	movs	r0, #2
 800820a:	f7f8 fecb 	bl	8000fa4 <printTemplate>
 800820e:	e026      	b.n	800825e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d108      	bne.n	8008228 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8008216:	2310      	movs	r3, #16
 8008218:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800821a:	2302      	movs	r3, #2
 800821c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800821e:	2102      	movs	r1, #2
 8008220:	2002      	movs	r0, #2
 8008222:	f7f8 febf 	bl	8000fa4 <printTemplate>
 8008226:	e01a      	b.n	800825e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b04      	cmp	r3, #4
 800822c:	d108      	bne.n	8008240 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800822e:	2310      	movs	r3, #16
 8008230:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008232:	2303      	movs	r3, #3
 8008234:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008236:	2103      	movs	r1, #3
 8008238:	2002      	movs	r0, #2
 800823a:	f7f8 feb3 	bl	8000fa4 <printTemplate>
 800823e:	e00e      	b.n	800825e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d10b      	bne.n	800825e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008246:	2310      	movs	r3, #16
 8008248:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800824a:	2304      	movs	r3, #4
 800824c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800824e:	2104      	movs	r1, #4
 8008250:	2002      	movs	r0, #2
 8008252:	f7f8 fea7 	bl	8000fa4 <printTemplate>
 8008256:	e002      	b.n	800825e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b01      	subs	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800825e:	2096      	movs	r0, #150	@ 0x96
 8008260:	f001 f9a2 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008264:	2102      	movs	r1, #2
 8008266:	4843      	ldr	r0, [pc, #268]	@ (8008374 <takeWifiSSID+0x2ac>)
 8008268:	f001 ff6e 	bl	800a148 <HAL_GPIO_ReadPin>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d12f      	bne.n	80082d2 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	b2d9      	uxtb	r1, r3
 8008276:	4a41      	ldr	r2, [pc, #260]	@ (800837c <takeWifiSSID+0x2b4>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4413      	add	r3, r2
 800827c:	460a      	mov	r2, r1
 800827e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008280:	4a3f      	ldr	r2, [pc, #252]	@ (8008380 <takeWifiSSID+0x2b8>)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	7819      	ldrb	r1, [r3, #0]
 8008288:	4a38      	ldr	r2, [pc, #224]	@ (800836c <takeWifiSSID+0x2a4>)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	460a      	mov	r2, r1
 8008290:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	b2d9      	uxtb	r1, r3
 8008296:	4a3a      	ldr	r2, [pc, #232]	@ (8008380 <takeWifiSSID+0x2b8>)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	2001      	movs	r0, #1
 80082a2:	f000 fc2a 	bl	8008afa <lcd_print_char>

            writeLoc++;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3301      	adds	r3, #1
 80082b6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80082b8:	4a30      	ldr	r2, [pc, #192]	@ (800837c <takeWifiSSID+0x2b4>)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80082c2:	4a2a      	ldr	r2, [pc, #168]	@ (800836c <takeWifiSSID+0x2a4>)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4413      	add	r3, r2
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80082cc:	2096      	movs	r0, #150	@ 0x96
 80082ce:	f001 f96b 	bl	80095a8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80082d2:	2104      	movs	r1, #4
 80082d4:	4827      	ldr	r0, [pc, #156]	@ (8008374 <takeWifiSSID+0x2ac>)
 80082d6:	f001 ff37 	bl	800a148 <HAL_GPIO_ReadPin>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d139      	bne.n	8008354 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80082e0:	4b22      	ldr	r3, [pc, #136]	@ (800836c <takeWifiSSID+0x2a4>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d032      	beq.n	800834e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80082e8:	4a24      	ldr	r2, [pc, #144]	@ (800837c <takeWifiSSID+0x2b4>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80082f2:	4a1e      	ldr	r2, [pc, #120]	@ (800836c <takeWifiSSID+0x2a4>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b07      	cmp	r3, #7
 8008300:	dd03      	ble.n	800830a <takeWifiSSID+0x242>
        			writeLoc--;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3b01      	subs	r3, #1
 8008306:	613b      	str	r3, [r7, #16]
 8008308:	e004      	b.n	8008314 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b06      	cmp	r3, #6
 800830e:	dc01      	bgt.n	8008314 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008310:	2307      	movs	r3, #7
 8008312:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	dd06      	ble.n	8008328 <takeWifiSSID+0x260>
        			arrayPosition--;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	3b01      	subs	r3, #1
 800831e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3b01      	subs	r3, #1
 8008324:	607b      	str	r3, [r7, #4]
 8008326:	e007      	b.n	8008338 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	da04      	bge.n	8008338 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008332:	4b0f      	ldr	r3, [pc, #60]	@ (8008370 <takeWifiSSID+0x2a8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	3307      	adds	r3, #7
 800833e:	b2db      	uxtb	r3, r3
 8008340:	4619      	mov	r1, r3
 8008342:	2001      	movs	r0, #1
 8008344:	f000 fbfa 	bl	8008b3c <lcd_delete_char>
        		HAL_Delay(50);
 8008348:	2032      	movs	r0, #50	@ 0x32
 800834a:	f001 f92d 	bl	80095a8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800834e:	2096      	movs	r0, #150	@ 0x96
 8008350:	f001 f92a 	bl	80095a8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	2002      	movs	r0, #2
 800835c:	f000 fb99 	bl	8008a92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008360:	e6cc      	b.n	80080fc <takeWifiSSID+0x34>
        		break;
 8008362:	bf00      	nop
    }
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20001070 	.word	0x20001070
 8008370:	20000004 	.word	0x20000004
 8008374:	40010800 	.word	0x40010800
 8008378:	40011000 	.word	0x40011000
 800837c:	20000fec 	.word	0x20000fec
 8008380:	20000018 	.word	0x20000018

08008384 <passConfirmation>:

uint8_t passConfirmation() {
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800838a:	2301      	movs	r3, #1
 800838c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800838e:	4a1e      	ldr	r2, [pc, #120]	@ (8008408 <passConfirmation+0x84>)
 8008390:	2101      	movs	r1, #1
 8008392:	2001      	movs	r0, #1
 8008394:	f000 fb9c 	bl	8008ad0 <lcd_print>

	while(loopVal == 1) {
 8008398:	e012      	b.n	80083c0 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800839a:	4a1c      	ldr	r2, [pc, #112]	@ (800840c <passConfirmation+0x88>)
 800839c:	2101      	movs	r1, #1
 800839e:	2002      	movs	r0, #2
 80083a0:	f000 fb96 	bl	8008ad0 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80083a4:	2102      	movs	r1, #2
 80083a6:	481a      	ldr	r0, [pc, #104]	@ (8008410 <passConfirmation+0x8c>)
 80083a8:	f001 fece 	bl	800a148 <HAL_GPIO_ReadPin>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <passConfirmation+0x32>
			loopVal = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80083b6:	4a17      	ldr	r2, [pc, #92]	@ (8008414 <passConfirmation+0x90>)
 80083b8:	2101      	movs	r1, #1
 80083ba:	2001      	movs	r0, #1
 80083bc:	f000 fb88 	bl	8008ad0 <lcd_print>
	while(loopVal == 1) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d0e9      	beq.n	800839a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80083c6:	2000      	movs	r0, #0
 80083c8:	f000 fbe0 	bl	8008b8c <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80083cc:	4811      	ldr	r0, [pc, #68]	@ (8008414 <passConfirmation+0x90>)
 80083ce:	f7f7 ff29 	bl	8000224 <strlen>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b14      	cmp	r3, #20
 80083d6:	d90f      	bls.n	80083f8 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80083d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008418 <passConfirmation+0x94>)
 80083da:	2101      	movs	r1, #1
 80083dc:	2001      	movs	r0, #1
 80083de:	f000 fb77 	bl	8008ad0 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80083e2:	4a0e      	ldr	r2, [pc, #56]	@ (800841c <passConfirmation+0x98>)
 80083e4:	2101      	movs	r1, #1
 80083e6:	2002      	movs	r0, #2
 80083e8:	f000 fb72 	bl	8008ad0 <lcd_print>
        HAL_Delay(1250);
 80083ec:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80083f0:	f001 f8da 	bl	80095a8 <HAL_Delay>

        return 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	e003      	b.n	8008400 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80083f8:	2001      	movs	r0, #1
 80083fa:	f7f8 f953 	bl	80006a4 <saveEEPROM>

    	return 1;
 80083fe:	2301      	movs	r3, #1
    }
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	0800e8c0 	.word	0x0800e8c0
 800840c:	200019fc 	.word	0x200019fc
 8008410:	40010800 	.word	0x40010800
 8008414:	20001080 	.word	0x20001080
 8008418:	20001934 	.word	0x20001934
 800841c:	20001948 	.word	0x20001948

08008420 <takeWifiPass>:

void takeWifiPass() {
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8008426:	2001      	movs	r0, #1
 8008428:	f000 fbb0 	bl	8008b8c <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800842c:	2210      	movs	r2, #16
 800842e:	2100      	movs	r1, #0
 8008430:	48a4      	ldr	r0, [pc, #656]	@ (80086c4 <takeWifiPass+0x2a4>)
 8008432:	f005 f823 	bl	800d47c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800843a:	2307      	movs	r3, #7
 800843c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800843e:	2301      	movs	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008446:	4ba0      	ldr	r3, [pc, #640]	@ (80086c8 <takeWifiPass+0x2a8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800844c:	2101      	movs	r1, #1
 800844e:	2003      	movs	r0, #3
 8008450:	f7f8 fda8 	bl	8000fa4 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008454:	2108      	movs	r1, #8
 8008456:	489d      	ldr	r0, [pc, #628]	@ (80086cc <takeWifiPass+0x2ac>)
 8008458:	f001 fe76 	bl	800a148 <HAL_GPIO_ReadPin>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d106      	bne.n	8008470 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008462:	f7ff ff8f 	bl	8008384 <passConfirmation>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 8126 	bne.w	80086ba <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800846e:	e7da      	b.n	8008426 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008470:	2101      	movs	r1, #1
 8008472:	4896      	ldr	r0, [pc, #600]	@ (80086cc <takeWifiPass+0x2ac>)
 8008474:	f001 fe68 	bl	800a148 <HAL_GPIO_ReadPin>
 8008478:	4603      	mov	r3, r0
 800847a:	2b01      	cmp	r3, #1
 800847c:	d14d      	bne.n	800851a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b50      	cmp	r3, #80	@ 0x50
 8008482:	dd01      	ble.n	8008488 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008484:	2301      	movs	r3, #1
 8008486:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b10      	cmp	r3, #16
 800848c:	d13f      	bne.n	800850e <takeWifiPass+0xee>
            	if(page == 1) {
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d109      	bne.n	80084a8 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008494:	2301      	movs	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
            		page++;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	3301      	adds	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800849e:	2102      	movs	r1, #2
 80084a0:	2003      	movs	r0, #3
 80084a2:	f7f8 fd7f 	bl	8000fa4 <printTemplate>
 80084a6:	e035      	b.n	8008514 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d109      	bne.n	80084c2 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80084ae:	2301      	movs	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
            		page++;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	3301      	adds	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80084b8:	2103      	movs	r1, #3
 80084ba:	2003      	movs	r0, #3
 80084bc:	f7f8 fd72 	bl	8000fa4 <printTemplate>
 80084c0:	e028      	b.n	8008514 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d109      	bne.n	80084dc <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
            		page++;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3301      	adds	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80084d2:	2104      	movs	r1, #4
 80084d4:	2003      	movs	r0, #3
 80084d6:	f7f8 fd65 	bl	8000fa4 <printTemplate>
 80084da:	e01b      	b.n	8008514 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d109      	bne.n	80084f6 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80084e2:	2301      	movs	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
            		page++;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80084ec:	2105      	movs	r1, #5
 80084ee:	2003      	movs	r0, #3
 80084f0:	f7f8 fd58 	bl	8000fa4 <printTemplate>
 80084f4:	e00e      	b.n	8008514 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	d10b      	bne.n	8008514 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80084fc:	2301      	movs	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008504:	2101      	movs	r1, #1
 8008506:	2003      	movs	r0, #3
 8008508:	f7f8 fd4c 	bl	8000fa4 <printTemplate>
 800850c:	e002      	b.n	8008514 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008514:	2096      	movs	r0, #150	@ 0x96
 8008516:	f001 f847 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800851a:	2108      	movs	r1, #8
 800851c:	486c      	ldr	r0, [pc, #432]	@ (80086d0 <takeWifiPass+0x2b0>)
 800851e:	f001 fe13 	bl	800a148 <HAL_GPIO_ReadPin>
 8008522:	4603      	mov	r3, r0
 8008524:	2b01      	cmp	r3, #1
 8008526:	d149      	bne.n	80085bc <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	dc01      	bgt.n	8008532 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800852e:	2350      	movs	r3, #80	@ 0x50
 8008530:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d13b      	bne.n	80085b0 <takeWifiPass+0x190>
            	if(page == 1) {
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d108      	bne.n	8008550 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800853e:	2310      	movs	r3, #16
 8008540:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008542:	2305      	movs	r3, #5
 8008544:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008546:	2105      	movs	r1, #5
 8008548:	2003      	movs	r0, #3
 800854a:	f7f8 fd2b 	bl	8000fa4 <printTemplate>
 800854e:	e032      	b.n	80085b6 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d108      	bne.n	8008568 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008556:	2310      	movs	r3, #16
 8008558:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800855a:	2301      	movs	r3, #1
 800855c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800855e:	2101      	movs	r1, #1
 8008560:	2003      	movs	r0, #3
 8008562:	f7f8 fd1f 	bl	8000fa4 <printTemplate>
 8008566:	e026      	b.n	80085b6 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d108      	bne.n	8008580 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800856e:	2310      	movs	r3, #16
 8008570:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008572:	2302      	movs	r3, #2
 8008574:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008576:	2102      	movs	r1, #2
 8008578:	2003      	movs	r0, #3
 800857a:	f7f8 fd13 	bl	8000fa4 <printTemplate>
 800857e:	e01a      	b.n	80085b6 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b04      	cmp	r3, #4
 8008584:	d108      	bne.n	8008598 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008586:	2310      	movs	r3, #16
 8008588:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800858a:	2303      	movs	r3, #3
 800858c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800858e:	2103      	movs	r1, #3
 8008590:	2003      	movs	r0, #3
 8008592:	f7f8 fd07 	bl	8000fa4 <printTemplate>
 8008596:	e00e      	b.n	80085b6 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2b05      	cmp	r3, #5
 800859c:	d10b      	bne.n	80085b6 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800859e:	2310      	movs	r3, #16
 80085a0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80085a2:	2304      	movs	r3, #4
 80085a4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80085a6:	2104      	movs	r1, #4
 80085a8:	2003      	movs	r0, #3
 80085aa:	f7f8 fcfb 	bl	8000fa4 <printTemplate>
 80085ae:	e002      	b.n	80085b6 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80085b6:	2096      	movs	r0, #150	@ 0x96
 80085b8:	f000 fff6 	bl	80095a8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80085bc:	2102      	movs	r1, #2
 80085be:	4843      	ldr	r0, [pc, #268]	@ (80086cc <takeWifiPass+0x2ac>)
 80085c0:	f001 fdc2 	bl	800a148 <HAL_GPIO_ReadPin>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d12f      	bne.n	800862a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	b2d9      	uxtb	r1, r3
 80085ce:	4a41      	ldr	r2, [pc, #260]	@ (80086d4 <takeWifiPass+0x2b4>)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	460a      	mov	r2, r1
 80085d6:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80085d8:	4a3f      	ldr	r2, [pc, #252]	@ (80086d8 <takeWifiPass+0x2b8>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	7819      	ldrb	r1, [r3, #0]
 80085e0:	4a38      	ldr	r2, [pc, #224]	@ (80086c4 <takeWifiPass+0x2a4>)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4413      	add	r3, r2
 80085e6:	460a      	mov	r2, r1
 80085e8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	4a3a      	ldr	r2, [pc, #232]	@ (80086d8 <takeWifiPass+0x2b8>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	2001      	movs	r0, #1
 80085fa:	f000 fa7e 	bl	8008afa <lcd_print_char>

            writeLoc++;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3301      	adds	r3, #1
 8008602:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3301      	adds	r3, #1
 8008608:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3301      	adds	r3, #1
 800860e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008610:	4a30      	ldr	r2, [pc, #192]	@ (80086d4 <takeWifiPass+0x2b4>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <takeWifiPass+0x2a4>)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4413      	add	r3, r2
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008624:	2096      	movs	r0, #150	@ 0x96
 8008626:	f000 ffbf 	bl	80095a8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800862a:	2104      	movs	r1, #4
 800862c:	4827      	ldr	r0, [pc, #156]	@ (80086cc <takeWifiPass+0x2ac>)
 800862e:	f001 fd8b 	bl	800a148 <HAL_GPIO_ReadPin>
 8008632:	4603      	mov	r3, r0
 8008634:	2b01      	cmp	r3, #1
 8008636:	d139      	bne.n	80086ac <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008638:	4b22      	ldr	r3, [pc, #136]	@ (80086c4 <takeWifiPass+0x2a4>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d032      	beq.n	80086a6 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008640:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <takeWifiPass+0x2b4>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800864a:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <takeWifiPass+0x2a4>)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4413      	add	r3, r2
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b07      	cmp	r3, #7
 8008658:	dd03      	ble.n	8008662 <takeWifiPass+0x242>
        			writeLoc--;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3b01      	subs	r3, #1
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	e004      	b.n	800866c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b06      	cmp	r3, #6
 8008666:	dc01      	bgt.n	800866c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008668:	2307      	movs	r3, #7
 800866a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dd06      	ble.n	8008680 <takeWifiPass+0x260>
        			arrayPosition--;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3b01      	subs	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	e007      	b.n	8008690 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	da04      	bge.n	8008690 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800868a:	4b0f      	ldr	r3, [pc, #60]	@ (80086c8 <takeWifiPass+0x2a8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	3307      	adds	r3, #7
 8008696:	b2db      	uxtb	r3, r3
 8008698:	4619      	mov	r1, r3
 800869a:	2001      	movs	r0, #1
 800869c:	f000 fa4e 	bl	8008b3c <lcd_delete_char>
        		HAL_Delay(50);
 80086a0:	2032      	movs	r0, #50	@ 0x32
 80086a2:	f000 ff81 	bl	80095a8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80086a6:	2096      	movs	r0, #150	@ 0x96
 80086a8:	f000 ff7e 	bl	80095a8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	2002      	movs	r0, #2
 80086b4:	f000 f9ed 	bl	8008a92 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80086b8:	e6cc      	b.n	8008454 <takeWifiPass+0x34>
    	        break;
 80086ba:	bf00      	nop
    }
}
 80086bc:	bf00      	nop
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20001080 	.word	0x20001080
 80086c8:	20000008 	.word	0x20000008
 80086cc:	40010800 	.word	0x40010800
 80086d0:	40011000 	.word	0x40011000
 80086d4:	20000fec 	.word	0x20000fec
 80086d8:	20000018 	.word	0x20000018

080086dc <iotSetup>:

	HAL_Delay(500);
	lcd_clear();
}

void iotSetup() {
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80086e0:	4b12      	ldr	r3, [pc, #72]	@ (800872c <iotSetup+0x50>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01f      	beq.n	8008728 <iotSetup+0x4c>
		if(checkEEPROM4ID() != 1) {
 80086e8:	f000 f82c 	bl	8008744 <checkEEPROM4ID>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d001      	beq.n	80086f6 <iotSetup+0x1a>
			takeMachineID();
 80086f2:	f7ff fb13 	bl	8007d1c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80086f6:	480e      	ldr	r0, [pc, #56]	@ (8008730 <iotSetup+0x54>)
 80086f8:	f7f7 fd94 	bl	8000224 <strlen>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d801      	bhi.n	8008706 <iotSetup+0x2a>
			takeWifiSSID();
 8008702:	f7ff fce1 	bl	80080c8 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008706:	480b      	ldr	r0, [pc, #44]	@ (8008734 <iotSetup+0x58>)
 8008708:	f7f7 fd8c 	bl	8000224 <strlen>
 800870c:	4603      	mov	r3, r0
 800870e:	2b01      	cmp	r3, #1
 8008710:	d801      	bhi.n	8008716 <iotSetup+0x3a>
			takeWifiPass();
 8008712:	f7ff fe85 	bl	8008420 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008716:	4a08      	ldr	r2, [pc, #32]	@ (8008738 <iotSetup+0x5c>)
 8008718:	4908      	ldr	r1, [pc, #32]	@ (800873c <iotSetup+0x60>)
 800871a:	4809      	ldr	r0, [pc, #36]	@ (8008740 <iotSetup+0x64>)
 800871c:	f7f8 f946 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008724:	f000 ff40 	bl	80095a8 <HAL_Delay>
		//convertAndSendData();
	}
}
 8008728:	bf00      	nop
 800872a:	bd80      	pop	{r7, pc}
 800872c:	200010e7 	.word	0x200010e7
 8008730:	20001070 	.word	0x20001070
 8008734:	20001080 	.word	0x20001080
 8008738:	0800e8d8 	.word	0x0800e8d8
 800873c:	0800e8f0 	.word	0x0800e8f0
 8008740:	20001ad4 	.word	0x20001ad4

08008744 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800874a:	4b0f      	ldr	r3, [pc, #60]	@ (8008788 <checkEEPROM4ID+0x44>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008750:	2301      	movs	r3, #1
 8008752:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008754:	2300      	movs	r3, #0
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	e00d      	b.n	8008776 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800875a:	4a0c      	ldr	r2, [pc, #48]	@ (800878c <checkEEPROM4ID+0x48>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3301      	adds	r3, #1
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b0b      	cmp	r3, #11
 800877a:	ddee      	ble.n	800875a <checkEEPROM4ID+0x16>
	}

	return returnVal;
 800877c:	68bb      	ldr	r3, [r7, #8]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	20000000 	.word	0x20000000
 800878c:	20000fec 	.word	0x20000fec

08008790 <az5>:

int az5() {
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
	...

080087a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	4603      	mov	r3, r0
 80087a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	f023 030f 	bic.w	r3, r3, #15
 80087b0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80087b8:	7b7b      	ldrb	r3, [r7, #13]
 80087ba:	f043 030c 	orr.w	r3, r3, #12
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	f043 0308 	orr.w	r3, r3, #8
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80087cc:	7b3b      	ldrb	r3, [r7, #12]
 80087ce:	f043 030c 	orr.w	r3, r3, #12
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80087d6:	7b3b      	ldrb	r3, [r7, #12]
 80087d8:	f043 0308 	orr.w	r3, r3, #8
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087e0:	bf00      	nop
 80087e2:	4825      	ldr	r0, [pc, #148]	@ (8008878 <lcd_send_cmd+0xd8>)
 80087e4:	f002 fad9 	bl	800ad9a <HAL_I2C_GetError>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d0f9      	beq.n	80087e2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087ee:	bf00      	nop
 80087f0:	4821      	ldr	r0, [pc, #132]	@ (8008878 <lcd_send_cmd+0xd8>)
 80087f2:	f002 fac5 	bl	800ad80 <HAL_I2C_GetState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d1f9      	bne.n	80087f0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80087fc:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <lcd_send_cmd+0xdc>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d116      	bne.n	8008832 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	e00f      	b.n	800882a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	3310      	adds	r3, #16
 800880e:	443b      	add	r3, r7
 8008810:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	f022 0208 	bic.w	r2, r2, #8
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	3310      	adds	r3, #16
 800881e:	443b      	add	r3, r7
 8008820:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	3301      	adds	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d9ec      	bls.n	800880a <lcd_send_cmd+0x6a>
 8008830:	e015      	b.n	800885e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008832:	2300      	movs	r3, #0
 8008834:	73bb      	strb	r3, [r7, #14]
 8008836:	e00f      	b.n	8008858 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	3310      	adds	r3, #16
 800883c:	443b      	add	r3, r7
 800883e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	f042 0208 	orr.w	r2, r2, #8
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	3310      	adds	r3, #16
 800884c:	443b      	add	r3, r7
 800884e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	3301      	adds	r3, #1
 8008856:	73bb      	strb	r3, [r7, #14]
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b03      	cmp	r3, #3
 800885c:	d9ec      	bls.n	8008838 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800885e:	f107 0208 	add.w	r2, r7, #8
 8008862:	2364      	movs	r3, #100	@ 0x64
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2304      	movs	r3, #4
 8008868:	214e      	movs	r1, #78	@ 0x4e
 800886a:	4803      	ldr	r0, [pc, #12]	@ (8008878 <lcd_send_cmd+0xd8>)
 800886c:	f001 fe28 	bl	800a4c0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20001a38 	.word	0x20001a38
 800887c:	20001a0d 	.word	0x20001a0d

08008880 <lcd_send_data>:

void lcd_send_data (char data) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af02      	add	r7, sp, #8
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	f023 030f 	bic.w	r3, r3, #15
 8008890:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008898:	7b7b      	ldrb	r3, [r7, #13]
 800889a:	f043 030d 	orr.w	r3, r3, #13
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80088a2:	7b7b      	ldrb	r3, [r7, #13]
 80088a4:	f043 0309 	orr.w	r3, r3, #9
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80088ac:	7b3b      	ldrb	r3, [r7, #12]
 80088ae:	f043 030d 	orr.w	r3, r3, #13
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80088b6:	7b3b      	ldrb	r3, [r7, #12]
 80088b8:	f043 0309 	orr.w	r3, r3, #9
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80088c0:	bf00      	nop
 80088c2:	4825      	ldr	r0, [pc, #148]	@ (8008958 <lcd_send_data+0xd8>)
 80088c4:	f002 fa69 	bl	800ad9a <HAL_I2C_GetError>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d0f9      	beq.n	80088c2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80088ce:	bf00      	nop
 80088d0:	4821      	ldr	r0, [pc, #132]	@ (8008958 <lcd_send_data+0xd8>)
 80088d2:	f002 fa55 	bl	800ad80 <HAL_I2C_GetState>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d1f9      	bne.n	80088d0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80088dc:	4b1f      	ldr	r3, [pc, #124]	@ (800895c <lcd_send_data+0xdc>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d116      	bne.n	8008912 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e00f      	b.n	800890a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	3310      	adds	r3, #16
 80088ee:	443b      	add	r3, r7
 80088f0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	f022 0208 	bic.w	r2, r2, #8
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	3310      	adds	r3, #16
 80088fe:	443b      	add	r3, r7
 8008900:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	3301      	adds	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d9ec      	bls.n	80088ea <lcd_send_data+0x6a>
 8008910:	e015      	b.n	800893e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008912:	2300      	movs	r3, #0
 8008914:	73bb      	strb	r3, [r7, #14]
 8008916:	e00f      	b.n	8008938 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	3310      	adds	r3, #16
 800891c:	443b      	add	r3, r7
 800891e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	f042 0208 	orr.w	r2, r2, #8
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	3310      	adds	r3, #16
 800892c:	443b      	add	r3, r7
 800892e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	3301      	adds	r3, #1
 8008936:	73bb      	strb	r3, [r7, #14]
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d9ec      	bls.n	8008918 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800893e:	f107 0208 	add.w	r2, r7, #8
 8008942:	2364      	movs	r3, #100	@ 0x64
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2304      	movs	r3, #4
 8008948:	214e      	movs	r1, #78	@ 0x4e
 800894a:	4803      	ldr	r0, [pc, #12]	@ (8008958 <lcd_send_data+0xd8>)
 800894c:	f001 fdb8 	bl	800a4c0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20001a38 	.word	0x20001a38
 800895c:	20001a0d 	.word	0x20001a0d

08008960 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008968:	e006      	b.n	8008978 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff ff84 	bl	8008880 <lcd_send_data>
	while (*str) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f4      	bne.n	800896a <lcd_send_string+0xa>
	}
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <lcd_send_char>:

void lcd_send_char(char ch) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af02      	add	r7, sp, #8
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	f023 030f 	bic.w	r3, r3, #15
 800899c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80089a4:	7b7b      	ldrb	r3, [r7, #13]
 80089a6:	f043 030d 	orr.w	r3, r3, #13
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80089ae:	7b7b      	ldrb	r3, [r7, #13]
 80089b0:	f043 0309 	orr.w	r3, r3, #9
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80089b8:	7b3b      	ldrb	r3, [r7, #12]
 80089ba:	f043 030d 	orr.w	r3, r3, #13
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80089c2:	7b3b      	ldrb	r3, [r7, #12]
 80089c4:	f043 0309 	orr.w	r3, r3, #9
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80089cc:	bf00      	nop
 80089ce:	4825      	ldr	r0, [pc, #148]	@ (8008a64 <lcd_send_char+0xd8>)
 80089d0:	f002 f9e3 	bl	800ad9a <HAL_I2C_GetError>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d0f9      	beq.n	80089ce <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089da:	bf00      	nop
 80089dc:	4821      	ldr	r0, [pc, #132]	@ (8008a64 <lcd_send_char+0xd8>)
 80089de:	f002 f9cf 	bl	800ad80 <HAL_I2C_GetState>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d1f9      	bne.n	80089dc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80089e8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a68 <lcd_send_char+0xdc>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d116      	bne.n	8008a1e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
 80089f4:	e00f      	b.n	8008a16 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	3310      	adds	r3, #16
 80089fa:	443b      	add	r3, r7
 80089fc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	f022 0208 	bic.w	r2, r2, #8
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	3310      	adds	r3, #16
 8008a0a:	443b      	add	r3, r7
 8008a0c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	3301      	adds	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d9ec      	bls.n	80089f6 <lcd_send_char+0x6a>
 8008a1c:	e015      	b.n	8008a4a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73bb      	strb	r3, [r7, #14]
 8008a22:	e00f      	b.n	8008a44 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	3310      	adds	r3, #16
 8008a28:	443b      	add	r3, r7
 8008a2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	f042 0208 	orr.w	r2, r2, #8
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	3310      	adds	r3, #16
 8008a38:	443b      	add	r3, r7
 8008a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	3301      	adds	r3, #1
 8008a42:	73bb      	strb	r3, [r7, #14]
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d9ec      	bls.n	8008a24 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008a4a:	f107 0208 	add.w	r2, r7, #8
 8008a4e:	2364      	movs	r3, #100	@ 0x64
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2304      	movs	r3, #4
 8008a54:	214e      	movs	r1, #78	@ 0x4e
 8008a56:	4803      	ldr	r0, [pc, #12]	@ (8008a64 <lcd_send_char+0xd8>)
 8008a58:	f001 fd32 	bl	800a4c0 <HAL_I2C_Master_Transmit>
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20001a38 	.word	0x20001a38
 8008a68:	20001a0d 	.word	0x20001a0d

08008a6c <lcd_init>:

void lcd_init (void) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008a70:	2002      	movs	r0, #2
 8008a72:	f7ff fe95 	bl	80087a0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008a76:	2028      	movs	r0, #40	@ 0x28
 8008a78:	f7ff fe92 	bl	80087a0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008a7c:	200c      	movs	r0, #12
 8008a7e:	f7ff fe8f 	bl	80087a0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008a82:	2080      	movs	r0, #128	@ 0x80
 8008a84:	f7ff fe8c 	bl	80087a0 <lcd_send_cmd>
	lcd_backlight(1);
 8008a88:	2001      	movs	r0, #1
 8008a8a:	f000 f86d 	bl	8008b68 <lcd_backlight>
}
 8008a8e:	bf00      	nop
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	4603      	mov	r3, r0
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	71fb      	strb	r3, [r7, #7]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d106      	bne.n	8008ab6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008aa8:	79bb      	ldrb	r3, [r7, #6]
 8008aaa:	337f      	adds	r3, #127	@ 0x7f
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff fe76 	bl	80087a0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008ab4:	e008      	b.n	8008ac8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d105      	bne.n	8008ac8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008abc:	79bb      	ldrb	r3, [r7, #6]
 8008abe:	3b41      	subs	r3, #65	@ 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff fe6c 	bl	80087a0 <lcd_send_cmd>
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	603a      	str	r2, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
 8008adc:	460b      	mov	r3, r1
 8008ade:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008ae0:	79ba      	ldrb	r2, [r7, #6]
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff ffd3 	bl	8008a92 <lcd_gotoxy>
	lcd_send_string(str);
 8008aec:	6838      	ldr	r0, [r7, #0]
 8008aee:	f7ff ff37 	bl	8008960 <lcd_send_string>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	4603      	mov	r3, r0
 8008b02:	71fb      	strb	r3, [r7, #7]
 8008b04:	460b      	mov	r3, r1
 8008b06:	71bb      	strb	r3, [r7, #6]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008b0c:	79ba      	ldrb	r2, [r7, #6]
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ffbd 	bl	8008a92 <lcd_gotoxy>
    lcd_send_char(ch);
 8008b18:	797b      	ldrb	r3, [r7, #5]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ff36 	bl	800898c <lcd_send_char>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <lcd_clear>:

void lcd_clear(void) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7ff fe37 	bl	80087a0 <lcd_send_cmd>
    HAL_Delay(2);
 8008b32:	2002      	movs	r0, #2
 8008b34:	f000 fd38 	bl	80095a8 <HAL_Delay>
}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	460a      	mov	r2, r1
 8008b46:	71fb      	strb	r3, [r7, #7]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008b4c:	79ba      	ldrb	r2, [r7, #6]
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff ff9d 	bl	8008a92 <lcd_gotoxy>

    lcd_send_char(' ');
 8008b58:	2020      	movs	r0, #32
 8008b5a:	f7ff ff17 	bl	800898c <lcd_send_char>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008b72:	4a05      	ldr	r2, [pc, #20]	@ (8008b88 <lcd_backlight+0x20>)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f7ff fe11 	bl	80087a0 <lcd_send_cmd>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20001a0d 	.word	0x20001a0d

08008b8c <lcd_cursor>:

void lcd_cursor(int state) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d106      	bne.n	8008ba8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008b9a:	200e      	movs	r0, #14
 8008b9c:	f7ff fe00 	bl	80087a0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008ba0:	200f      	movs	r0, #15
 8008ba2:	f7ff fdfd 	bl	80087a0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008ba6:	e002      	b.n	8008bae <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008ba8:	200c      	movs	r0, #12
 8008baa:	f7ff fdf9 	bl	80087a0 <lcd_send_cmd>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008bc0:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a03      	ldr	r2, [pc, #12]	@ (8008bd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008bc8:	6013      	str	r3, [r2, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr
 8008bd4:	20001094 	.word	0x20001094

08008bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bde:	f000 fc81 	bl	80094e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008be2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008be6:	f000 fcdf 	bl	80095a8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bea:	f000 f8ad 	bl	8008d48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008bee:	f000 f9cf 	bl	8008f90 <MX_GPIO_Init>
  MX_CAN_Init();
 8008bf2:	f000 f8ef 	bl	8008dd4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008bf6:	f000 f921 	bl	8008e3c <MX_I2C1_Init>
  MX_TIM1_Init();
 8008bfa:	f000 f94d 	bl	8008e98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008bfe:	f000 f99d 	bl	8008f3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008c02:	2201      	movs	r2, #1
 8008c04:	2140      	movs	r1, #64	@ 0x40
 8008c06:	4845      	ldr	r0, [pc, #276]	@ (8008d1c <main+0x144>)
 8008c08:	f001 fab5 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	2180      	movs	r1, #128	@ 0x80
 8008c10:	4842      	ldr	r0, [pc, #264]	@ (8008d1c <main+0x144>)
 8008c12:	f001 fab0 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008c16:	200a      	movs	r0, #10
 8008c18:	f000 fcc6 	bl	80095a8 <HAL_Delay>
  lcd_init();
 8008c1c:	f7ff ff26 	bl	8008a6c <lcd_init>
  HAL_Delay(10);
 8008c20:	200a      	movs	r0, #10
 8008c22:	f000 fcc1 	bl	80095a8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008c26:	483e      	ldr	r0, [pc, #248]	@ (8008d20 <main+0x148>)
 8008c28:	f003 f958 	bl	800bedc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008c2c:	bf00      	nop
 8008c2e:	483d      	ldr	r0, [pc, #244]	@ (8008d24 <main+0x14c>)
 8008c30:	f002 f8b3 	bl	800ad9a <HAL_I2C_GetError>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d0f9      	beq.n	8008c2e <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008c3a:	bf00      	nop
 8008c3c:	4839      	ldr	r0, [pc, #228]	@ (8008d24 <main+0x14c>)
 8008c3e:	f002 f89f 	bl	800ad80 <HAL_I2C_GetState>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d1f9      	bne.n	8008c3c <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008c4e:	4833      	ldr	r0, [pc, #204]	@ (8008d1c <main+0x144>)
 8008c50:	f001 fa91 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c5a:	4830      	ldr	r0, [pc, #192]	@ (8008d1c <main+0x144>)
 8008c5c:	f001 fa8b 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008c60:	2200      	movs	r2, #0
 8008c62:	2104      	movs	r1, #4
 8008c64:	482d      	ldr	r0, [pc, #180]	@ (8008d1c <main+0x144>)
 8008c66:	f001 fa86 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2102      	movs	r1, #2
 8008c6e:	482b      	ldr	r0, [pc, #172]	@ (8008d1c <main+0x144>)
 8008c70:	f001 fa81 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008c74:	2200      	movs	r2, #0
 8008c76:	2101      	movs	r1, #1
 8008c78:	4828      	ldr	r0, [pc, #160]	@ (8008d1c <main+0x144>)
 8008c7a:	f001 fa7c 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2120      	movs	r1, #32
 8008c82:	4829      	ldr	r0, [pc, #164]	@ (8008d28 <main+0x150>)
 8008c84:	f001 fa77 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2110      	movs	r1, #16
 8008c8c:	4826      	ldr	r0, [pc, #152]	@ (8008d28 <main+0x150>)
 8008c8e:	f001 fa72 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008c92:	2200      	movs	r2, #0
 8008c94:	2180      	movs	r1, #128	@ 0x80
 8008c96:	4825      	ldr	r0, [pc, #148]	@ (8008d2c <main+0x154>)
 8008c98:	f001 fa6d 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2140      	movs	r1, #64	@ 0x40
 8008ca0:	4822      	ldr	r0, [pc, #136]	@ (8008d2c <main+0x154>)
 8008ca2:	f001 fa68 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2120      	movs	r1, #32
 8008caa:	4820      	ldr	r0, [pc, #128]	@ (8008d2c <main+0x154>)
 8008cac:	f001 fa63 	bl	800a176 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2110      	movs	r1, #16
 8008cb4:	481d      	ldr	r0, [pc, #116]	@ (8008d2c <main+0x154>)
 8008cb6:	f001 fa5e 	bl	800a176 <HAL_GPIO_WritePin>

  i2cTest();
 8008cba:	f7f8 f8c5 	bl	8000e48 <i2cTest>
  HAL_Delay(100);
 8008cbe:	2064      	movs	r0, #100	@ 0x64
 8008cc0:	f000 fc72 	bl	80095a8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8008d30 <main+0x158>)
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f7ff ff01 	bl	8008ad0 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008cce:	4a19      	ldr	r2, [pc, #100]	@ (8008d34 <main+0x15c>)
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	2002      	movs	r0, #2
 8008cd4:	f7ff fefc 	bl	8008ad0 <lcd_print>
  HAL_Delay(1000);
 8008cd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008cdc:	f000 fc64 	bl	80095a8 <HAL_Delay>
  lcd_clear();
 8008ce0:	f7ff ff22 	bl	8008b28 <lcd_clear>

  eepromKontrol();
 8008ce4:	f7f7 faa6 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008cec:	f000 fc5c 	bl	80095a8 <HAL_Delay>

  backLightTimer = millis;
 8008cf0:	4b11      	ldr	r3, [pc, #68]	@ (8008d38 <main+0x160>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a11      	ldr	r2, [pc, #68]	@ (8008d3c <main+0x164>)
 8008cf6:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 8008cf8:	f7ff fcf0 	bl	80086dc <iotSetup>

  for(int i=0; i<2; i++) {
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	e006      	b.n	8008d10 <main+0x138>
	  checkForUpdates(&huart1, "1.0.0");
 8008d02:	490f      	ldr	r1, [pc, #60]	@ (8008d40 <main+0x168>)
 8008d04:	480f      	ldr	r0, [pc, #60]	@ (8008d44 <main+0x16c>)
 8008d06:	f7f7 fefb 	bl	8000b00 <checkForUpdates>
  for(int i=0; i<2; i++) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	607b      	str	r3, [r7, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	ddf5      	ble.n	8008d02 <main+0x12a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008d16:	f7fc ff87 	bl	8005c28 <mainLoop>
 8008d1a:	e7fc      	b.n	8008d16 <main+0x13e>
 8008d1c:	40010c00 	.word	0x40010c00
 8008d20:	20001a8c 	.word	0x20001a8c
 8008d24:	20001a38 	.word	0x20001a38
 8008d28:	40011000 	.word	0x40011000
 8008d2c:	40010800 	.word	0x40010800
 8008d30:	2000009c 	.word	0x2000009c
 8008d34:	200000b0 	.word	0x200000b0
 8008d38:	20001094 	.word	0x20001094
 8008d3c:	200010b0 	.word	0x200010b0
 8008d40:	0800e8f8 	.word	0x0800e8f8
 8008d44:	20001ad4 	.word	0x20001ad4

08008d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b090      	sub	sp, #64	@ 0x40
 8008d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	2228      	movs	r2, #40	@ 0x28
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f004 fb90 	bl	800d47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	605a      	str	r2, [r3, #4]
 8008d64:	609a      	str	r2, [r3, #8]
 8008d66:	60da      	str	r2, [r3, #12]
 8008d68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008d72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008d74:	2300      	movs	r3, #0
 8008d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008d86:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d8c:	f107 0318 	add.w	r3, r7, #24
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 fc43 	bl	800b61c <HAL_RCC_OscConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008d9c:	f000 f9a2 	bl	80090e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008da0:	230f      	movs	r3, #15
 8008da2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008da4:	2302      	movs	r3, #2
 8008da6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008db6:	1d3b      	adds	r3, r7, #4
 8008db8:	2102      	movs	r1, #2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 feb0 	bl	800bb20 <HAL_RCC_ClockConfig>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008dc6:	f000 f98d 	bl	80090e4 <Error_Handler>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3740      	adds	r7, #64	@ 0x40
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008dd8:	4b16      	ldr	r3, [pc, #88]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008dda:	4a17      	ldr	r2, [pc, #92]	@ (8008e38 <MX_CAN_Init+0x64>)
 8008ddc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008dde:	4b15      	ldr	r3, [pc, #84]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008de0:	2210      	movs	r2, #16
 8008de2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008dea:	4b12      	ldr	r3, [pc, #72]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008df0:	4b10      	ldr	r3, [pc, #64]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008df6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008e02:	4b0c      	ldr	r3, [pc, #48]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008e0e:	4b09      	ldr	r3, [pc, #36]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008e14:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008e1a:	4b06      	ldr	r3, [pc, #24]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008e20:	4804      	ldr	r0, [pc, #16]	@ (8008e34 <MX_CAN_Init+0x60>)
 8008e22:	f000 fbe5 	bl	80095f0 <HAL_CAN_Init>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008e2c:	f000 f95a 	bl	80090e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20001a10 	.word	0x20001a10
 8008e38:	40006400 	.word	0x40006400

08008e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008e40:	4b12      	ldr	r3, [pc, #72]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e42:	4a13      	ldr	r2, [pc, #76]	@ (8008e90 <MX_I2C1_Init+0x54>)
 8008e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008e46:	4b11      	ldr	r3, [pc, #68]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e48:	4a12      	ldr	r2, [pc, #72]	@ (8008e94 <MX_I2C1_Init+0x58>)
 8008e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008e52:	4b0e      	ldr	r3, [pc, #56]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e58:	4b0c      	ldr	r3, [pc, #48]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008e5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e60:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008e66:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e6c:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e72:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008e78:	4804      	ldr	r0, [pc, #16]	@ (8008e8c <MX_I2C1_Init+0x50>)
 8008e7a:	f001 f9ad 	bl	800a1d8 <HAL_I2C_Init>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008e84:	f000 f92e 	bl	80090e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008e88:	bf00      	nop
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20001a38 	.word	0x20001a38
 8008e90:	40005400 	.word	0x40005400
 8008e94:	00061a80 	.word	0x00061a80

08008e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	605a      	str	r2, [r3, #4]
 8008ea8:	609a      	str	r2, [r3, #8]
 8008eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008eac:	463b      	mov	r3, r7
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008eb6:	4a20      	ldr	r2, [pc, #128]	@ (8008f38 <MX_TIM1_Init+0xa0>)
 8008eb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008eba:	4b1e      	ldr	r3, [pc, #120]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ebc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008ec0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008eca:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008ece:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ed0:	4b18      	ldr	r3, [pc, #96]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ed6:	4b17      	ldr	r3, [pc, #92]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008edc:	4b15      	ldr	r3, [pc, #84]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008ee2:	4814      	ldr	r0, [pc, #80]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008ee4:	f002 ffaa 	bl	800be3c <HAL_TIM_Base_Init>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008eee:	f000 f8f9 	bl	80090e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008ef8:	f107 0308 	add.w	r3, r7, #8
 8008efc:	4619      	mov	r1, r3
 8008efe:	480d      	ldr	r0, [pc, #52]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008f00:	f003 f954 	bl	800c1ac <HAL_TIM_ConfigClockSource>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008f0a:	f000 f8eb 	bl	80090e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008f16:	463b      	mov	r3, r7
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4806      	ldr	r0, [pc, #24]	@ (8008f34 <MX_TIM1_Init+0x9c>)
 8008f1c:	f003 fb42 	bl	800c5a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008f26:	f000 f8dd 	bl	80090e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008f2a:	bf00      	nop
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20001a8c 	.word	0x20001a8c
 8008f38:	40012c00 	.word	0x40012c00

08008f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f40:	4b11      	ldr	r3, [pc, #68]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f42:	4a12      	ldr	r2, [pc, #72]	@ (8008f8c <MX_USART1_UART_Init+0x50>)
 8008f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f54:	4b0c      	ldr	r3, [pc, #48]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f60:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f62:	220c      	movs	r2, #12
 8008f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f66:	4b08      	ldr	r3, [pc, #32]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f6c:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f72:	4805      	ldr	r0, [pc, #20]	@ (8008f88 <MX_USART1_UART_Init+0x4c>)
 8008f74:	f003 fb94 	bl	800c6a0 <HAL_UART_Init>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008f7e:	f000 f8b1 	bl	80090e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008f82:	bf00      	nop
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001ad4 	.word	0x20001ad4
 8008f8c:	40013800 	.word	0x40013800

08008f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	605a      	str	r2, [r3, #4]
 8008fa0:	609a      	str	r2, [r3, #8]
 8008fa2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008faa:	f043 0310 	orr.w	r3, r3, #16
 8008fae:	6193      	str	r3, [r2, #24]
 8008fb0:	4b48      	ldr	r3, [pc, #288]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008fbc:	4b45      	ldr	r3, [pc, #276]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	4a44      	ldr	r2, [pc, #272]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fc2:	f043 0320 	orr.w	r3, r3, #32
 8008fc6:	6193      	str	r3, [r2, #24]
 8008fc8:	4b42      	ldr	r3, [pc, #264]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	60bb      	str	r3, [r7, #8]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fda:	f043 0304 	orr.w	r3, r3, #4
 8008fde:	6193      	str	r3, [r2, #24]
 8008fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fec:	4b39      	ldr	r3, [pc, #228]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4a38      	ldr	r2, [pc, #224]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008ff2:	f043 0308 	orr.w	r3, r3, #8
 8008ff6:	6193      	str	r3, [r2, #24]
 8008ff8:	4b36      	ldr	r3, [pc, #216]	@ (80090d4 <MX_GPIO_Init+0x144>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	f003 0308 	and.w	r3, r3, #8
 8009000:	603b      	str	r3, [r7, #0]
 8009002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009004:	2200      	movs	r2, #0
 8009006:	21f0      	movs	r1, #240	@ 0xf0
 8009008:	4833      	ldr	r0, [pc, #204]	@ (80090d8 <MX_GPIO_Init+0x148>)
 800900a:	f001 f8b4 	bl	800a176 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800900e:	2200      	movs	r2, #0
 8009010:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009014:	4831      	ldr	r0, [pc, #196]	@ (80090dc <MX_GPIO_Init+0x14c>)
 8009016:	f001 f8ae 	bl	800a176 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800901a:	2200      	movs	r2, #0
 800901c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009020:	482f      	ldr	r0, [pc, #188]	@ (80090e0 <MX_GPIO_Init+0x150>)
 8009022:	f001 f8a8 	bl	800a176 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009026:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800902a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009034:	f107 0310 	add.w	r3, r7, #16
 8009038:	4619      	mov	r1, r3
 800903a:	4828      	ldr	r0, [pc, #160]	@ (80090dc <MX_GPIO_Init+0x14c>)
 800903c:	f000 fe24 	bl	8009c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009040:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009044:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800904e:	f107 0310 	add.w	r3, r7, #16
 8009052:	4619      	mov	r1, r3
 8009054:	4820      	ldr	r0, [pc, #128]	@ (80090d8 <MX_GPIO_Init+0x148>)
 8009056:	f000 fe17 	bl	8009c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800905a:	23f0      	movs	r3, #240	@ 0xf0
 800905c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800905e:	2301      	movs	r3, #1
 8009060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009062:	2300      	movs	r3, #0
 8009064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009066:	2302      	movs	r3, #2
 8009068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800906a:	f107 0310 	add.w	r3, r7, #16
 800906e:	4619      	mov	r1, r3
 8009070:	4819      	ldr	r0, [pc, #100]	@ (80090d8 <MX_GPIO_Init+0x148>)
 8009072:	f000 fe09 	bl	8009c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009076:	f241 0330 	movw	r3, #4144	@ 0x1030
 800907a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800907c:	2301      	movs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009080:	2300      	movs	r3, #0
 8009082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009084:	2302      	movs	r3, #2
 8009086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	4619      	mov	r1, r3
 800908e:	4813      	ldr	r0, [pc, #76]	@ (80090dc <MX_GPIO_Init+0x14c>)
 8009090:	f000 fdfa 	bl	8009c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009094:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009098:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800909a:	2301      	movs	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090a2:	2302      	movs	r3, #2
 80090a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a6:	f107 0310 	add.w	r3, r7, #16
 80090aa:	4619      	mov	r1, r3
 80090ac:	480c      	ldr	r0, [pc, #48]	@ (80090e0 <MX_GPIO_Init+0x150>)
 80090ae:	f000 fdeb 	bl	8009c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80090b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80090b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090c0:	f107 0310 	add.w	r3, r7, #16
 80090c4:	4619      	mov	r1, r3
 80090c6:	4806      	ldr	r0, [pc, #24]	@ (80090e0 <MX_GPIO_Init+0x150>)
 80090c8:	f000 fdde 	bl	8009c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80090cc:	bf00      	nop
 80090ce:	3720      	adds	r7, #32
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40021000 	.word	0x40021000
 80090d8:	40010800 	.word	0x40010800
 80090dc:	40011000 	.word	0x40011000
 80090e0:	40010c00 	.word	0x40010c00

080090e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bc80      	pop	{r7}
 80090ee:	4770      	bx	lr

080090f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80090f6:	4b15      	ldr	r3, [pc, #84]	@ (800914c <HAL_MspInit+0x5c>)
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	4a14      	ldr	r2, [pc, #80]	@ (800914c <HAL_MspInit+0x5c>)
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	6193      	str	r3, [r2, #24]
 8009102:	4b12      	ldr	r3, [pc, #72]	@ (800914c <HAL_MspInit+0x5c>)
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	60bb      	str	r3, [r7, #8]
 800910c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800910e:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <HAL_MspInit+0x5c>)
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	4a0e      	ldr	r2, [pc, #56]	@ (800914c <HAL_MspInit+0x5c>)
 8009114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009118:	61d3      	str	r3, [r2, #28]
 800911a:	4b0c      	ldr	r3, [pc, #48]	@ (800914c <HAL_MspInit+0x5c>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009122:	607b      	str	r3, [r7, #4]
 8009124:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009126:	4b0a      	ldr	r3, [pc, #40]	@ (8009150 <HAL_MspInit+0x60>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	4a04      	ldr	r2, [pc, #16]	@ (8009150 <HAL_MspInit+0x60>)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr
 800914c:	40021000 	.word	0x40021000
 8009150:	40010000 	.word	0x40010000

08009154 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	609a      	str	r2, [r3, #8]
 8009168:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a1c      	ldr	r2, [pc, #112]	@ (80091e0 <HAL_CAN_MspInit+0x8c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d131      	bne.n	80091d8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009174:	4b1b      	ldr	r3, [pc, #108]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	4a1a      	ldr	r2, [pc, #104]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 800917a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800917e:	61d3      	str	r3, [r2, #28]
 8009180:	4b18      	ldr	r3, [pc, #96]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800918c:	4b15      	ldr	r3, [pc, #84]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	4a14      	ldr	r2, [pc, #80]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 8009192:	f043 0304 	orr.w	r3, r3, #4
 8009196:	6193      	str	r3, [r2, #24]
 8009198:	4b12      	ldr	r3, [pc, #72]	@ (80091e4 <HAL_CAN_MspInit+0x90>)
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80091a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091aa:	2300      	movs	r3, #0
 80091ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	4619      	mov	r1, r3
 80091b8:	480b      	ldr	r0, [pc, #44]	@ (80091e8 <HAL_CAN_MspInit+0x94>)
 80091ba:	f000 fd65 	bl	8009c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c4:	2302      	movs	r3, #2
 80091c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80091c8:	2303      	movs	r3, #3
 80091ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	4619      	mov	r1, r3
 80091d2:	4805      	ldr	r0, [pc, #20]	@ (80091e8 <HAL_CAN_MspInit+0x94>)
 80091d4:	f000 fd58 	bl	8009c88 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80091d8:	bf00      	nop
 80091da:	3720      	adds	r7, #32
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40006400 	.word	0x40006400
 80091e4:	40021000 	.word	0x40021000
 80091e8:	40010800 	.word	0x40010800

080091ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	605a      	str	r2, [r3, #4]
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a15      	ldr	r2, [pc, #84]	@ (800925c <HAL_I2C_MspInit+0x70>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d123      	bne.n	8009254 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800920c:	4b14      	ldr	r3, [pc, #80]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	4a13      	ldr	r2, [pc, #76]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 8009212:	f043 0308 	orr.w	r3, r3, #8
 8009216:	6193      	str	r3, [r2, #24]
 8009218:	4b11      	ldr	r3, [pc, #68]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009224:	23c0      	movs	r3, #192	@ 0xc0
 8009226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009228:	2312      	movs	r3, #18
 800922a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800922c:	2303      	movs	r3, #3
 800922e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	4619      	mov	r1, r3
 8009236:	480b      	ldr	r0, [pc, #44]	@ (8009264 <HAL_I2C_MspInit+0x78>)
 8009238:	f000 fd26 	bl	8009c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800923c:	4b08      	ldr	r3, [pc, #32]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	4a07      	ldr	r2, [pc, #28]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 8009242:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009246:	61d3      	str	r3, [r2, #28]
 8009248:	4b05      	ldr	r3, [pc, #20]	@ (8009260 <HAL_I2C_MspInit+0x74>)
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009250:	60bb      	str	r3, [r7, #8]
 8009252:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009254:	bf00      	nop
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	40005400 	.word	0x40005400
 8009260:	40021000 	.word	0x40021000
 8009264:	40010c00 	.word	0x40010c00

08009268 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a0a      	ldr	r2, [pc, #40]	@ (80092a0 <HAL_I2C_MspDeInit+0x38>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d10d      	bne.n	8009296 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800927a:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <HAL_I2C_MspDeInit+0x3c>)
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	4a09      	ldr	r2, [pc, #36]	@ (80092a4 <HAL_I2C_MspDeInit+0x3c>)
 8009280:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009284:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009286:	2140      	movs	r1, #64	@ 0x40
 8009288:	4807      	ldr	r0, [pc, #28]	@ (80092a8 <HAL_I2C_MspDeInit+0x40>)
 800928a:	f000 fe91 	bl	8009fb0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800928e:	2180      	movs	r1, #128	@ 0x80
 8009290:	4805      	ldr	r0, [pc, #20]	@ (80092a8 <HAL_I2C_MspDeInit+0x40>)
 8009292:	f000 fe8d 	bl	8009fb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40005400 	.word	0x40005400
 80092a4:	40021000 	.word	0x40021000
 80092a8:	40010c00 	.word	0x40010c00

080092ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a0d      	ldr	r2, [pc, #52]	@ (80092f0 <HAL_TIM_Base_MspInit+0x44>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d113      	bne.n	80092e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <HAL_TIM_Base_MspInit+0x48>)
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <HAL_TIM_Base_MspInit+0x48>)
 80092c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80092c8:	6193      	str	r3, [r2, #24]
 80092ca:	4b0a      	ldr	r3, [pc, #40]	@ (80092f4 <HAL_TIM_Base_MspInit+0x48>)
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80092d6:	2200      	movs	r2, #0
 80092d8:	2100      	movs	r1, #0
 80092da:	2019      	movs	r0, #25
 80092dc:	f000 fb5b 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80092e0:	2019      	movs	r0, #25
 80092e2:	f000 fb74 	bl	80099ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40021000 	.word	0x40021000

080092f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009300:	f107 0310 	add.w	r3, r7, #16
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a20      	ldr	r2, [pc, #128]	@ (8009394 <HAL_UART_MspInit+0x9c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d139      	bne.n	800938c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009318:	4b1f      	ldr	r3, [pc, #124]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	4a1e      	ldr	r2, [pc, #120]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 800931e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009322:	6193      	str	r3, [r2, #24]
 8009324:	4b1c      	ldr	r3, [pc, #112]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009330:	4b19      	ldr	r3, [pc, #100]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	4a18      	ldr	r2, [pc, #96]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 8009336:	f043 0304 	orr.w	r3, r3, #4
 800933a:	6193      	str	r3, [r2, #24]
 800933c:	4b16      	ldr	r3, [pc, #88]	@ (8009398 <HAL_UART_MspInit+0xa0>)
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	60bb      	str	r3, [r7, #8]
 8009346:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800934c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800934e:	2302      	movs	r3, #2
 8009350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009352:	2303      	movs	r3, #3
 8009354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009356:	f107 0310 	add.w	r3, r7, #16
 800935a:	4619      	mov	r1, r3
 800935c:	480f      	ldr	r0, [pc, #60]	@ (800939c <HAL_UART_MspInit+0xa4>)
 800935e:	f000 fc93 	bl	8009c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800936c:	2300      	movs	r3, #0
 800936e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009370:	f107 0310 	add.w	r3, r7, #16
 8009374:	4619      	mov	r1, r3
 8009376:	4809      	ldr	r0, [pc, #36]	@ (800939c <HAL_UART_MspInit+0xa4>)
 8009378:	f000 fc86 	bl	8009c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	2025      	movs	r0, #37	@ 0x25
 8009382:	f000 fb08 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009386:	2025      	movs	r0, #37	@ 0x25
 8009388:	f000 fb21 	bl	80099ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800938c:	bf00      	nop
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40013800 	.word	0x40013800
 8009398:	40021000 	.word	0x40021000
 800939c:	40010800 	.word	0x40010800

080093a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <NMI_Handler+0x4>

080093a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <HardFault_Handler+0x4>

080093b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093b4:	bf00      	nop
 80093b6:	e7fd      	b.n	80093b4 <MemManage_Handler+0x4>

080093b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093bc:	bf00      	nop
 80093be:	e7fd      	b.n	80093bc <BusFault_Handler+0x4>

080093c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <UsageFault_Handler+0x4>

080093c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80093cc:	bf00      	nop
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093d8:	bf00      	nop
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80093e4:	bf00      	nop
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80093f0:	f000 f8be 	bl	8009570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80093f4:	bf00      	nop
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80093fc:	4802      	ldr	r0, [pc, #8]	@ (8009408 <TIM1_UP_IRQHandler+0x10>)
 80093fe:	f002 fdcd 	bl	800bf9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009402:	bf00      	nop
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20001a8c 	.word	0x20001a8c

0800940c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009410:	4802      	ldr	r0, [pc, #8]	@ (800941c <USART1_IRQHandler+0x10>)
 8009412:	f003 f9ef 	bl	800c7f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009416:	bf00      	nop
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20001ad4 	.word	0x20001ad4

08009420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009428:	4a14      	ldr	r2, [pc, #80]	@ (800947c <_sbrk+0x5c>)
 800942a:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <_sbrk+0x60>)
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009434:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <_sbrk+0x64>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800943c:	4b11      	ldr	r3, [pc, #68]	@ (8009484 <_sbrk+0x64>)
 800943e:	4a12      	ldr	r2, [pc, #72]	@ (8009488 <_sbrk+0x68>)
 8009440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009442:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <_sbrk+0x64>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4413      	add	r3, r2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d207      	bcs.n	8009460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009450:	f004 f852 	bl	800d4f8 <__errno>
 8009454:	4603      	mov	r3, r0
 8009456:	220c      	movs	r2, #12
 8009458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800945a:	f04f 33ff 	mov.w	r3, #4294967295
 800945e:	e009      	b.n	8009474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009460:	4b08      	ldr	r3, [pc, #32]	@ (8009484 <_sbrk+0x64>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009466:	4b07      	ldr	r3, [pc, #28]	@ (8009484 <_sbrk+0x64>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	4a05      	ldr	r2, [pc, #20]	@ (8009484 <_sbrk+0x64>)
 8009470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	2000c000 	.word	0x2000c000
 8009480:	00000400 	.word	0x00000400
 8009484:	20001b1c 	.word	0x20001b1c
 8009488:	20001c70 	.word	0x20001c70

0800948c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009490:	bf00      	nop
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr

08009498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009498:	480c      	ldr	r0, [pc, #48]	@ (80094cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800949a:	490d      	ldr	r1, [pc, #52]	@ (80094d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800949c:	4a0d      	ldr	r2, [pc, #52]	@ (80094d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800949e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80094a0:	e002      	b.n	80094a8 <LoopCopyDataInit>

080094a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80094a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80094a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80094a6:	3304      	adds	r3, #4

080094a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80094a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80094aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80094ac:	d3f9      	bcc.n	80094a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80094ae:	4a0a      	ldr	r2, [pc, #40]	@ (80094d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80094b0:	4c0a      	ldr	r4, [pc, #40]	@ (80094dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80094b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80094b4:	e001      	b.n	80094ba <LoopFillZerobss>

080094b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80094b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80094b8:	3204      	adds	r2, #4

080094ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80094ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80094bc:	d3fb      	bcc.n	80094b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80094be:	f7ff ffe5 	bl	800948c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80094c2:	f004 f81f 	bl	800d504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80094c6:	f7ff fb87 	bl	8008bd8 <main>
  bx lr
 80094ca:	4770      	bx	lr
  ldr r0, =_sdata
 80094cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80094d0:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 80094d4:	0800e994 	.word	0x0800e994
  ldr r2, =_sbss
 80094d8:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 80094dc:	20001c6c 	.word	0x20001c6c

080094e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80094e0:	e7fe      	b.n	80094e0 <ADC1_2_IRQHandler>
	...

080094e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094e8:	4b08      	ldr	r3, [pc, #32]	@ (800950c <HAL_Init+0x28>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a07      	ldr	r2, [pc, #28]	@ (800950c <HAL_Init+0x28>)
 80094ee:	f043 0310 	orr.w	r3, r3, #16
 80094f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094f4:	2003      	movs	r0, #3
 80094f6:	f000 fa43 	bl	8009980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094fa:	200f      	movs	r0, #15
 80094fc:	f000 f808 	bl	8009510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009500:	f7ff fdf6 	bl	80090f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	40022000 	.word	0x40022000

08009510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009518:	4b12      	ldr	r3, [pc, #72]	@ (8009564 <HAL_InitTick+0x54>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b12      	ldr	r3, [pc, #72]	@ (8009568 <HAL_InitTick+0x58>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009526:	fbb3 f3f1 	udiv	r3, r3, r1
 800952a:	fbb2 f3f3 	udiv	r3, r2, r3
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fa5b 	bl	80099ea <HAL_SYSTICK_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e00e      	b.n	800955c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b0f      	cmp	r3, #15
 8009542:	d80a      	bhi.n	800955a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009544:	2200      	movs	r2, #0
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	f000 fa23 	bl	8009996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009550:	4a06      	ldr	r2, [pc, #24]	@ (800956c <HAL_InitTick+0x5c>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e000      	b.n	800955c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000f74 	.word	0x20000f74
 8009568:	20000f7c 	.word	0x20000f7c
 800956c:	20000f78 	.word	0x20000f78

08009570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <HAL_IncTick+0x1c>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	4b05      	ldr	r3, [pc, #20]	@ (8009590 <HAL_IncTick+0x20>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4413      	add	r3, r2
 8009580:	4a03      	ldr	r2, [pc, #12]	@ (8009590 <HAL_IncTick+0x20>)
 8009582:	6013      	str	r3, [r2, #0]
}
 8009584:	bf00      	nop
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr
 800958c:	20000f7c 	.word	0x20000f7c
 8009590:	20001b20 	.word	0x20001b20

08009594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  return uwTick;
 8009598:	4b02      	ldr	r3, [pc, #8]	@ (80095a4 <HAL_GetTick+0x10>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr
 80095a4:	20001b20 	.word	0x20001b20

080095a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095b0:	f7ff fff0 	bl	8009594 <HAL_GetTick>
 80095b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d005      	beq.n	80095ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095c2:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <HAL_Delay+0x44>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095ce:	bf00      	nop
 80095d0:	f7ff ffe0 	bl	8009594 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d8f7      	bhi.n	80095d0 <HAL_Delay+0x28>
  {
  }
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000f7c 	.word	0x20000f7c

080095f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e0ed      	b.n	80097de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fda0 	bl	8009154 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009624:	f7ff ffb6 	bl	8009594 <HAL_GetTick>
 8009628:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800962a:	e012      	b.n	8009652 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800962c:	f7ff ffb2 	bl	8009594 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b0a      	cmp	r3, #10
 8009638:	d90b      	bls.n	8009652 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2205      	movs	r2, #5
 800964a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e0c5      	b.n	80097de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0e5      	beq.n	800962c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0202 	bic.w	r2, r2, #2
 800966e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009670:	f7ff ff90 	bl	8009594 <HAL_GetTick>
 8009674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009676:	e012      	b.n	800969e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009678:	f7ff ff8c 	bl	8009594 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b0a      	cmp	r3, #10
 8009684:	d90b      	bls.n	800969e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2205      	movs	r2, #5
 8009696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e09f      	b.n	80097de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e5      	bne.n	8009678 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7e1b      	ldrb	r3, [r3, #24]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d108      	bne.n	80096c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e007      	b.n	80096d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	7e5b      	ldrb	r3, [r3, #25]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d108      	bne.n	80096f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e007      	b.n	8009700 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7e9b      	ldrb	r3, [r3, #26]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d108      	bne.n	800971a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0220 	orr.w	r2, r2, #32
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e007      	b.n	800972a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0220 	bic.w	r2, r2, #32
 8009728:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7edb      	ldrb	r3, [r3, #27]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d108      	bne.n	8009744 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0210 	bic.w	r2, r2, #16
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	e007      	b.n	8009754 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0210 	orr.w	r2, r2, #16
 8009752:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	7f1b      	ldrb	r3, [r3, #28]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d108      	bne.n	800976e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0208 	orr.w	r2, r2, #8
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e007      	b.n	800977e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0208 	bic.w	r2, r2, #8
 800977c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7f5b      	ldrb	r3, [r3, #29]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d108      	bne.n	8009798 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0204 	orr.w	r2, r2, #4
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e007      	b.n	80097a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0204 	bic.w	r2, r2, #4
 80097a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	ea42 0103 	orr.w	r1, r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	1e5a      	subs	r2, r3, #1
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <__NVIC_SetPriorityGrouping>:
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <__NVIC_SetPriorityGrouping+0x44>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009804:	4013      	ands	r3, r2
 8009806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800981a:	4a04      	ldr	r2, [pc, #16]	@ (800982c <__NVIC_SetPriorityGrouping+0x44>)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	60d3      	str	r3, [r2, #12]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	bc80      	pop	{r7}
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	e000ed00 	.word	0xe000ed00

08009830 <__NVIC_GetPriorityGrouping>:
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009834:	4b04      	ldr	r3, [pc, #16]	@ (8009848 <__NVIC_GetPriorityGrouping+0x18>)
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	f003 0307 	and.w	r3, r3, #7
}
 800983e:	4618      	mov	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	e000ed00 	.word	0xe000ed00

0800984c <__NVIC_EnableIRQ>:
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	db0b      	blt.n	8009876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	f003 021f 	and.w	r2, r3, #31
 8009864:	4906      	ldr	r1, [pc, #24]	@ (8009880 <__NVIC_EnableIRQ+0x34>)
 8009866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	2001      	movs	r0, #1
 800986e:	fa00 f202 	lsl.w	r2, r0, r2
 8009872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr
 8009880:	e000e100 	.word	0xe000e100

08009884 <__NVIC_SetPriority>:
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009894:	2b00      	cmp	r3, #0
 8009896:	db0a      	blt.n	80098ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	490c      	ldr	r1, [pc, #48]	@ (80098d0 <__NVIC_SetPriority+0x4c>)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	0112      	lsls	r2, r2, #4
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	440b      	add	r3, r1
 80098a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80098ac:	e00a      	b.n	80098c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	4908      	ldr	r1, [pc, #32]	@ (80098d4 <__NVIC_SetPriority+0x50>)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	3b04      	subs	r3, #4
 80098bc:	0112      	lsls	r2, r2, #4
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	440b      	add	r3, r1
 80098c2:	761a      	strb	r2, [r3, #24]
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc80      	pop	{r7}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	e000e100 	.word	0xe000e100
 80098d4:	e000ed00 	.word	0xe000ed00

080098d8 <NVIC_EncodePriority>:
{
 80098d8:	b480      	push	{r7}
 80098da:	b089      	sub	sp, #36	@ 0x24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f1c3 0307 	rsb	r3, r3, #7
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	bf28      	it	cs
 80098f6:	2304      	movcs	r3, #4
 80098f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	3304      	adds	r3, #4
 80098fe:	2b06      	cmp	r3, #6
 8009900:	d902      	bls.n	8009908 <NVIC_EncodePriority+0x30>
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	3b03      	subs	r3, #3
 8009906:	e000      	b.n	800990a <NVIC_EncodePriority+0x32>
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800990c:	f04f 32ff 	mov.w	r2, #4294967295
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	43da      	mvns	r2, r3
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	401a      	ands	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009920:	f04f 31ff 	mov.w	r1, #4294967295
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	43d9      	mvns	r1, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009930:	4313      	orrs	r3, r2
}
 8009932:	4618      	mov	r0, r3
 8009934:	3724      	adds	r7, #36	@ 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3b01      	subs	r3, #1
 8009948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800994c:	d301      	bcc.n	8009952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800994e:	2301      	movs	r3, #1
 8009950:	e00f      	b.n	8009972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009952:	4a0a      	ldr	r2, [pc, #40]	@ (800997c <SysTick_Config+0x40>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3b01      	subs	r3, #1
 8009958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800995a:	210f      	movs	r1, #15
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	f7ff ff90 	bl	8009884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009964:	4b05      	ldr	r3, [pc, #20]	@ (800997c <SysTick_Config+0x40>)
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800996a:	4b04      	ldr	r3, [pc, #16]	@ (800997c <SysTick_Config+0x40>)
 800996c:	2207      	movs	r2, #7
 800996e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	e000e010 	.word	0xe000e010

08009980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff2d 	bl	80097e8 <__NVIC_SetPriorityGrouping>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	4603      	mov	r3, r0
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099a8:	f7ff ff42 	bl	8009830 <__NVIC_GetPriorityGrouping>
 80099ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	6978      	ldr	r0, [r7, #20]
 80099b4:	f7ff ff90 	bl	80098d8 <NVIC_EncodePriority>
 80099b8:	4602      	mov	r2, r0
 80099ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff ff5f 	bl	8009884 <__NVIC_SetPriority>
}
 80099c6:	bf00      	nop
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	4603      	mov	r3, r0
 80099d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff ff35 	bl	800984c <__NVIC_EnableIRQ>
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff ffa2 	bl	800993c <SysTick_Config>
 80099f8:	4603      	mov	r3, r0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d008      	beq.n	8009a2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e020      	b.n	8009a6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 020e 	bic.w	r2, r2, #14
 8009a3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0201 	bic.w	r2, r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a54:	2101      	movs	r1, #1
 8009a56:	fa01 f202 	lsl.w	r2, r1, r2
 8009a5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr

08009a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d005      	beq.n	8009a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2204      	movs	r2, #4
 8009a94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]
 8009a9a:	e0d6      	b.n	8009c4a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 020e 	bic.w	r2, r2, #14
 8009aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0201 	bic.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4b64      	ldr	r3, [pc, #400]	@ (8009c54 <HAL_DMA_Abort_IT+0x1dc>)
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d958      	bls.n	8009b7a <HAL_DMA_Abort_IT+0x102>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a62      	ldr	r2, [pc, #392]	@ (8009c58 <HAL_DMA_Abort_IT+0x1e0>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d04f      	beq.n	8009b72 <HAL_DMA_Abort_IT+0xfa>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a61      	ldr	r2, [pc, #388]	@ (8009c5c <HAL_DMA_Abort_IT+0x1e4>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d048      	beq.n	8009b6e <HAL_DMA_Abort_IT+0xf6>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a5f      	ldr	r2, [pc, #380]	@ (8009c60 <HAL_DMA_Abort_IT+0x1e8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d040      	beq.n	8009b68 <HAL_DMA_Abort_IT+0xf0>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a5e      	ldr	r2, [pc, #376]	@ (8009c64 <HAL_DMA_Abort_IT+0x1ec>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d038      	beq.n	8009b62 <HAL_DMA_Abort_IT+0xea>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a5c      	ldr	r2, [pc, #368]	@ (8009c68 <HAL_DMA_Abort_IT+0x1f0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d030      	beq.n	8009b5c <HAL_DMA_Abort_IT+0xe4>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a5b      	ldr	r2, [pc, #364]	@ (8009c6c <HAL_DMA_Abort_IT+0x1f4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d028      	beq.n	8009b56 <HAL_DMA_Abort_IT+0xde>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a52      	ldr	r2, [pc, #328]	@ (8009c54 <HAL_DMA_Abort_IT+0x1dc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d020      	beq.n	8009b50 <HAL_DMA_Abort_IT+0xd8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a57      	ldr	r2, [pc, #348]	@ (8009c70 <HAL_DMA_Abort_IT+0x1f8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d019      	beq.n	8009b4c <HAL_DMA_Abort_IT+0xd4>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a55      	ldr	r2, [pc, #340]	@ (8009c74 <HAL_DMA_Abort_IT+0x1fc>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d012      	beq.n	8009b48 <HAL_DMA_Abort_IT+0xd0>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a54      	ldr	r2, [pc, #336]	@ (8009c78 <HAL_DMA_Abort_IT+0x200>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d00a      	beq.n	8009b42 <HAL_DMA_Abort_IT+0xca>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a52      	ldr	r2, [pc, #328]	@ (8009c7c <HAL_DMA_Abort_IT+0x204>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d102      	bne.n	8009b3c <HAL_DMA_Abort_IT+0xc4>
 8009b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b3a:	e01b      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009b40:	e018      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b46:	e015      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	e013      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e011      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b54:	e00e      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009b5a:	e00b      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009b60:	e008      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b66:	e005      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b6c:	e002      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b6e:	2310      	movs	r3, #16
 8009b70:	e000      	b.n	8009b74 <HAL_DMA_Abort_IT+0xfc>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4a42      	ldr	r2, [pc, #264]	@ (8009c80 <HAL_DMA_Abort_IT+0x208>)
 8009b76:	6053      	str	r3, [r2, #4]
 8009b78:	e057      	b.n	8009c2a <HAL_DMA_Abort_IT+0x1b2>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a36      	ldr	r2, [pc, #216]	@ (8009c58 <HAL_DMA_Abort_IT+0x1e0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d04f      	beq.n	8009c24 <HAL_DMA_Abort_IT+0x1ac>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a34      	ldr	r2, [pc, #208]	@ (8009c5c <HAL_DMA_Abort_IT+0x1e4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d048      	beq.n	8009c20 <HAL_DMA_Abort_IT+0x1a8>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a33      	ldr	r2, [pc, #204]	@ (8009c60 <HAL_DMA_Abort_IT+0x1e8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d040      	beq.n	8009c1a <HAL_DMA_Abort_IT+0x1a2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a31      	ldr	r2, [pc, #196]	@ (8009c64 <HAL_DMA_Abort_IT+0x1ec>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d038      	beq.n	8009c14 <HAL_DMA_Abort_IT+0x19c>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a30      	ldr	r2, [pc, #192]	@ (8009c68 <HAL_DMA_Abort_IT+0x1f0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d030      	beq.n	8009c0e <HAL_DMA_Abort_IT+0x196>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8009c6c <HAL_DMA_Abort_IT+0x1f4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d028      	beq.n	8009c08 <HAL_DMA_Abort_IT+0x190>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a26      	ldr	r2, [pc, #152]	@ (8009c54 <HAL_DMA_Abort_IT+0x1dc>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d020      	beq.n	8009c02 <HAL_DMA_Abort_IT+0x18a>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8009c70 <HAL_DMA_Abort_IT+0x1f8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d019      	beq.n	8009bfe <HAL_DMA_Abort_IT+0x186>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a29      	ldr	r2, [pc, #164]	@ (8009c74 <HAL_DMA_Abort_IT+0x1fc>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d012      	beq.n	8009bfa <HAL_DMA_Abort_IT+0x182>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a27      	ldr	r2, [pc, #156]	@ (8009c78 <HAL_DMA_Abort_IT+0x200>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_DMA_Abort_IT+0x17c>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a26      	ldr	r2, [pc, #152]	@ (8009c7c <HAL_DMA_Abort_IT+0x204>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d102      	bne.n	8009bee <HAL_DMA_Abort_IT+0x176>
 8009be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bec:	e01b      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009bf2:	e018      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bf8:	e015      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	e013      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e011      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c06:	e00e      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009c0c:	e00b      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009c12:	e008      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c18:	e005      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c1e:	e002      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c20:	2310      	movs	r3, #16
 8009c22:	e000      	b.n	8009c26 <HAL_DMA_Abort_IT+0x1ae>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4a17      	ldr	r2, [pc, #92]	@ (8009c84 <HAL_DMA_Abort_IT+0x20c>)
 8009c28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
    } 
  }
  return status;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40020080 	.word	0x40020080
 8009c58:	40020008 	.word	0x40020008
 8009c5c:	4002001c 	.word	0x4002001c
 8009c60:	40020030 	.word	0x40020030
 8009c64:	40020044 	.word	0x40020044
 8009c68:	40020058 	.word	0x40020058
 8009c6c:	4002006c 	.word	0x4002006c
 8009c70:	40020408 	.word	0x40020408
 8009c74:	4002041c 	.word	0x4002041c
 8009c78:	40020430 	.word	0x40020430
 8009c7c:	40020444 	.word	0x40020444
 8009c80:	40020400 	.word	0x40020400
 8009c84:	40020000 	.word	0x40020000

08009c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b08b      	sub	sp, #44	@ 0x2c
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c92:	2300      	movs	r3, #0
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009c96:	2300      	movs	r3, #0
 8009c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c9a:	e179      	b.n	8009f90 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	4013      	ands	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	f040 8168 	bne.w	8009f8a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	4a96      	ldr	r2, [pc, #600]	@ (8009f18 <HAL_GPIO_Init+0x290>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d05e      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
 8009cc4:	4a94      	ldr	r2, [pc, #592]	@ (8009f18 <HAL_GPIO_Init+0x290>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d875      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009cca:	4a94      	ldr	r2, [pc, #592]	@ (8009f1c <HAL_GPIO_Init+0x294>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d058      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
 8009cd0:	4a92      	ldr	r2, [pc, #584]	@ (8009f1c <HAL_GPIO_Init+0x294>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d86f      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009cd6:	4a92      	ldr	r2, [pc, #584]	@ (8009f20 <HAL_GPIO_Init+0x298>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d052      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
 8009cdc:	4a90      	ldr	r2, [pc, #576]	@ (8009f20 <HAL_GPIO_Init+0x298>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d869      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009ce2:	4a90      	ldr	r2, [pc, #576]	@ (8009f24 <HAL_GPIO_Init+0x29c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d04c      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
 8009ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8009f24 <HAL_GPIO_Init+0x29c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d863      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009cee:	4a8e      	ldr	r2, [pc, #568]	@ (8009f28 <HAL_GPIO_Init+0x2a0>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d046      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
 8009cf4:	4a8c      	ldr	r2, [pc, #560]	@ (8009f28 <HAL_GPIO_Init+0x2a0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d85d      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009cfa:	2b12      	cmp	r3, #18
 8009cfc:	d82a      	bhi.n	8009d54 <HAL_GPIO_Init+0xcc>
 8009cfe:	2b12      	cmp	r3, #18
 8009d00:	d859      	bhi.n	8009db6 <HAL_GPIO_Init+0x12e>
 8009d02:	a201      	add	r2, pc, #4	@ (adr r2, 8009d08 <HAL_GPIO_Init+0x80>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d83 	.word	0x08009d83
 8009d0c:	08009d5d 	.word	0x08009d5d
 8009d10:	08009d6f 	.word	0x08009d6f
 8009d14:	08009db1 	.word	0x08009db1
 8009d18:	08009db7 	.word	0x08009db7
 8009d1c:	08009db7 	.word	0x08009db7
 8009d20:	08009db7 	.word	0x08009db7
 8009d24:	08009db7 	.word	0x08009db7
 8009d28:	08009db7 	.word	0x08009db7
 8009d2c:	08009db7 	.word	0x08009db7
 8009d30:	08009db7 	.word	0x08009db7
 8009d34:	08009db7 	.word	0x08009db7
 8009d38:	08009db7 	.word	0x08009db7
 8009d3c:	08009db7 	.word	0x08009db7
 8009d40:	08009db7 	.word	0x08009db7
 8009d44:	08009db7 	.word	0x08009db7
 8009d48:	08009db7 	.word	0x08009db7
 8009d4c:	08009d65 	.word	0x08009d65
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	4a75      	ldr	r2, [pc, #468]	@ (8009f2c <HAL_GPIO_Init+0x2a4>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d013      	beq.n	8009d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009d5a:	e02c      	b.n	8009db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	623b      	str	r3, [r7, #32]
          break;
 8009d62:	e029      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	623b      	str	r3, [r7, #32]
          break;
 8009d6c:	e024      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	3308      	adds	r3, #8
 8009d74:	623b      	str	r3, [r7, #32]
          break;
 8009d76:	e01f      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	623b      	str	r3, [r7, #32]
          break;
 8009d80:	e01a      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	623b      	str	r3, [r7, #32]
          break;
 8009d8e:	e013      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d105      	bne.n	8009da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009d98:	2308      	movs	r3, #8
 8009d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	611a      	str	r2, [r3, #16]
          break;
 8009da2:	e009      	b.n	8009db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009da4:	2308      	movs	r3, #8
 8009da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	615a      	str	r2, [r3, #20]
          break;
 8009dae:	e003      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009db0:	2300      	movs	r3, #0
 8009db2:	623b      	str	r3, [r7, #32]
          break;
 8009db4:	e000      	b.n	8009db8 <HAL_GPIO_Init+0x130>
          break;
 8009db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2bff      	cmp	r3, #255	@ 0xff
 8009dbc:	d801      	bhi.n	8009dc2 <HAL_GPIO_Init+0x13a>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	e001      	b.n	8009dc6 <HAL_GPIO_Init+0x13e>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2bff      	cmp	r3, #255	@ 0xff
 8009dcc:	d802      	bhi.n	8009dd4 <HAL_GPIO_Init+0x14c>
 8009dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	e002      	b.n	8009dda <HAL_GPIO_Init+0x152>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	3b08      	subs	r3, #8
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	210f      	movs	r1, #15
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	fa01 f303 	lsl.w	r3, r1, r3
 8009de8:	43db      	mvns	r3, r3
 8009dea:	401a      	ands	r2, r3
 8009dec:	6a39      	ldr	r1, [r7, #32]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	fa01 f303 	lsl.w	r3, r1, r3
 8009df4:	431a      	orrs	r2, r3
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80c1 	beq.w	8009f8a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009e08:	4b49      	ldr	r3, [pc, #292]	@ (8009f30 <HAL_GPIO_Init+0x2a8>)
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	4a48      	ldr	r2, [pc, #288]	@ (8009f30 <HAL_GPIO_Init+0x2a8>)
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	6193      	str	r3, [r2, #24]
 8009e14:	4b46      	ldr	r3, [pc, #280]	@ (8009f30 <HAL_GPIO_Init+0x2a8>)
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	60bb      	str	r3, [r7, #8]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009e20:	4a44      	ldr	r2, [pc, #272]	@ (8009f34 <HAL_GPIO_Init+0x2ac>)
 8009e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e24:	089b      	lsrs	r3, r3, #2
 8009e26:	3302      	adds	r3, #2
 8009e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	220f      	movs	r2, #15
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	43db      	mvns	r3, r3
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4013      	ands	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a3c      	ldr	r2, [pc, #240]	@ (8009f38 <HAL_GPIO_Init+0x2b0>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d01f      	beq.n	8009e8c <HAL_GPIO_Init+0x204>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8009f3c <HAL_GPIO_Init+0x2b4>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d019      	beq.n	8009e88 <HAL_GPIO_Init+0x200>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a3a      	ldr	r2, [pc, #232]	@ (8009f40 <HAL_GPIO_Init+0x2b8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d013      	beq.n	8009e84 <HAL_GPIO_Init+0x1fc>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a39      	ldr	r2, [pc, #228]	@ (8009f44 <HAL_GPIO_Init+0x2bc>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00d      	beq.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a38      	ldr	r2, [pc, #224]	@ (8009f48 <HAL_GPIO_Init+0x2c0>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <HAL_GPIO_Init+0x1f4>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a37      	ldr	r2, [pc, #220]	@ (8009f4c <HAL_GPIO_Init+0x2c4>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d101      	bne.n	8009e78 <HAL_GPIO_Init+0x1f0>
 8009e74:	2305      	movs	r3, #5
 8009e76:	e00a      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e78:	2306      	movs	r3, #6
 8009e7a:	e008      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e7c:	2304      	movs	r3, #4
 8009e7e:	e006      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e80:	2303      	movs	r3, #3
 8009e82:	e004      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e002      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <HAL_GPIO_Init+0x206>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e90:	f002 0203 	and.w	r2, r2, #3
 8009e94:	0092      	lsls	r2, r2, #2
 8009e96:	4093      	lsls	r3, r2
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009e9e:	4925      	ldr	r1, [pc, #148]	@ (8009f34 <HAL_GPIO_Init+0x2ac>)
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	089b      	lsrs	r3, r3, #2
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009eb8:	4b25      	ldr	r3, [pc, #148]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009eba:	689a      	ldr	r2, [r3, #8]
 8009ebc:	4924      	ldr	r1, [pc, #144]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	608b      	str	r3, [r1, #8]
 8009ec4:	e006      	b.n	8009ed4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009ec6:	4b22      	ldr	r3, [pc, #136]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	43db      	mvns	r3, r3
 8009ece:	4920      	ldr	r1, [pc, #128]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	491a      	ldr	r1, [pc, #104]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60cb      	str	r3, [r1, #12]
 8009eec:	e006      	b.n	8009efc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009eee:	4b18      	ldr	r3, [pc, #96]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	4916      	ldr	r1, [pc, #88]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d025      	beq.n	8009f54 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009f08:	4b11      	ldr	r3, [pc, #68]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	4910      	ldr	r1, [pc, #64]	@ (8009f50 <HAL_GPIO_Init+0x2c8>)
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	604b      	str	r3, [r1, #4]
 8009f14:	e025      	b.n	8009f62 <HAL_GPIO_Init+0x2da>
 8009f16:	bf00      	nop
 8009f18:	10320000 	.word	0x10320000
 8009f1c:	10310000 	.word	0x10310000
 8009f20:	10220000 	.word	0x10220000
 8009f24:	10210000 	.word	0x10210000
 8009f28:	10120000 	.word	0x10120000
 8009f2c:	10110000 	.word	0x10110000
 8009f30:	40021000 	.word	0x40021000
 8009f34:	40010000 	.word	0x40010000
 8009f38:	40010800 	.word	0x40010800
 8009f3c:	40010c00 	.word	0x40010c00
 8009f40:	40011000 	.word	0x40011000
 8009f44:	40011400 	.word	0x40011400
 8009f48:	40011800 	.word	0x40011800
 8009f4c:	40011c00 	.word	0x40011c00
 8009f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009f54:	4b15      	ldr	r3, [pc, #84]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	43db      	mvns	r3, r3
 8009f5c:	4913      	ldr	r1, [pc, #76]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d006      	beq.n	8009f7c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	490e      	ldr	r1, [pc, #56]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	600b      	str	r3, [r1, #0]
 8009f7a:	e006      	b.n	8009f8a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	43db      	mvns	r3, r3
 8009f84:	4909      	ldr	r1, [pc, #36]	@ (8009fac <HAL_GPIO_Init+0x324>)
 8009f86:	4013      	ands	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f96:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f ae7e 	bne.w	8009c9c <HAL_GPIO_Init+0x14>
  }
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	372c      	adds	r7, #44	@ 0x2c
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr
 8009fac:	40010400 	.word	0x40010400

08009fb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b089      	sub	sp, #36	@ 0x24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009fbe:	e0a6      	b.n	800a10e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8099 	beq.w	800a108 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009fd6:	4a54      	ldr	r2, [pc, #336]	@ (800a128 <HAL_GPIO_DeInit+0x178>)
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	089b      	lsrs	r3, r3, #2
 8009fdc:	3302      	adds	r3, #2
 8009fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fe2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	220f      	movs	r2, #15
 8009fee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800a12c <HAL_GPIO_DeInit+0x17c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d01f      	beq.n	800a040 <HAL_GPIO_DeInit+0x90>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a4b      	ldr	r2, [pc, #300]	@ (800a130 <HAL_GPIO_DeInit+0x180>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d019      	beq.n	800a03c <HAL_GPIO_DeInit+0x8c>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a4a      	ldr	r2, [pc, #296]	@ (800a134 <HAL_GPIO_DeInit+0x184>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d013      	beq.n	800a038 <HAL_GPIO_DeInit+0x88>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a49      	ldr	r2, [pc, #292]	@ (800a138 <HAL_GPIO_DeInit+0x188>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d00d      	beq.n	800a034 <HAL_GPIO_DeInit+0x84>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a48      	ldr	r2, [pc, #288]	@ (800a13c <HAL_GPIO_DeInit+0x18c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d007      	beq.n	800a030 <HAL_GPIO_DeInit+0x80>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a47      	ldr	r2, [pc, #284]	@ (800a140 <HAL_GPIO_DeInit+0x190>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d101      	bne.n	800a02c <HAL_GPIO_DeInit+0x7c>
 800a028:	2305      	movs	r3, #5
 800a02a:	e00a      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a02c:	2306      	movs	r3, #6
 800a02e:	e008      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a030:	2304      	movs	r3, #4
 800a032:	e006      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a034:	2303      	movs	r3, #3
 800a036:	e004      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a038:	2302      	movs	r3, #2
 800a03a:	e002      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <HAL_GPIO_DeInit+0x92>
 800a040:	2300      	movs	r3, #0
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	f002 0203 	and.w	r2, r2, #3
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	4093      	lsls	r3, r2
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d132      	bne.n	800a0b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a052:	4b3c      	ldr	r3, [pc, #240]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	43db      	mvns	r3, r3
 800a05a:	493a      	ldr	r1, [pc, #232]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a060:	4b38      	ldr	r3, [pc, #224]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	43db      	mvns	r3, r3
 800a068:	4936      	ldr	r1, [pc, #216]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a06e:	4b35      	ldr	r3, [pc, #212]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	43db      	mvns	r3, r3
 800a076:	4933      	ldr	r1, [pc, #204]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a078:	4013      	ands	r3, r2
 800a07a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a07c:	4b31      	ldr	r3, [pc, #196]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	43db      	mvns	r3, r3
 800a084:	492f      	ldr	r1, [pc, #188]	@ (800a144 <HAL_GPIO_DeInit+0x194>)
 800a086:	4013      	ands	r3, r2
 800a088:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	f003 0303 	and.w	r3, r3, #3
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	220f      	movs	r2, #15
 800a094:	fa02 f303 	lsl.w	r3, r2, r3
 800a098:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a09a:	4a23      	ldr	r2, [pc, #140]	@ (800a128 <HAL_GPIO_DeInit+0x178>)
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	089b      	lsrs	r3, r3, #2
 800a0a0:	3302      	adds	r3, #2
 800a0a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	43da      	mvns	r2, r3
 800a0aa:	481f      	ldr	r0, [pc, #124]	@ (800a128 <HAL_GPIO_DeInit+0x178>)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	089b      	lsrs	r3, r3, #2
 800a0b0:	400a      	ands	r2, r1
 800a0b2:	3302      	adds	r3, #2
 800a0b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2bff      	cmp	r3, #255	@ 0xff
 800a0bc:	d801      	bhi.n	800a0c2 <HAL_GPIO_DeInit+0x112>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	e001      	b.n	800a0c6 <HAL_GPIO_DeInit+0x116>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	2bff      	cmp	r3, #255	@ 0xff
 800a0cc:	d802      	bhi.n	800a0d4 <HAL_GPIO_DeInit+0x124>
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	e002      	b.n	800a0da <HAL_GPIO_DeInit+0x12a>
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3b08      	subs	r3, #8
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	210f      	movs	r1, #15
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e8:	43db      	mvns	r3, r3
 800a0ea:	401a      	ands	r2, r3
 800a0ec:	2104      	movs	r1, #4
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	43db      	mvns	r3, r3
 800a102:	401a      	ands	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	fa22 f303 	lsr.w	r3, r2, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	f47f af52 	bne.w	8009fc0 <HAL_GPIO_DeInit+0x10>
  }
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	3724      	adds	r7, #36	@ 0x24
 800a122:	46bd      	mov	sp, r7
 800a124:	bc80      	pop	{r7}
 800a126:	4770      	bx	lr
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010800 	.word	0x40010800
 800a130:	40010c00 	.word	0x40010c00
 800a134:	40011000 	.word	0x40011000
 800a138:	40011400 	.word	0x40011400
 800a13c:	40011800 	.word	0x40011800
 800a140:	40011c00 	.word	0x40011c00
 800a144:	40010400 	.word	0x40010400

0800a148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a160:	2301      	movs	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
 800a164:	e001      	b.n	800a16a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr

0800a176 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	807b      	strh	r3, [r7, #2]
 800a182:	4613      	mov	r3, r2
 800a184:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a186:	787b      	ldrb	r3, [r7, #1]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a192:	e003      	b.n	800a19c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a194:	887b      	ldrh	r3, [r7, #2]
 800a196:	041a      	lsls	r2, r3, #16
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	611a      	str	r2, [r3, #16]
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bc80      	pop	{r7}
 800a1a4:	4770      	bx	lr

0800a1a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a1b8:	887a      	ldrh	r2, [r7, #2]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	041a      	lsls	r2, r3, #16
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	43d9      	mvns	r1, r3
 800a1c4:	887b      	ldrh	r3, [r7, #2]
 800a1c6:	400b      	ands	r3, r1
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	611a      	str	r2, [r3, #16]
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e12b      	b.n	800a442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7fe fff4 	bl	80091ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2224      	movs	r2, #36	@ 0x24
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0201 	bic.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a22a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a23a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a23c:	f001 fdb8 	bl	800bdb0 <HAL_RCC_GetPCLK1Freq>
 800a240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	4a81      	ldr	r2, [pc, #516]	@ (800a44c <HAL_I2C_Init+0x274>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d807      	bhi.n	800a25c <HAL_I2C_Init+0x84>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a80      	ldr	r2, [pc, #512]	@ (800a450 <HAL_I2C_Init+0x278>)
 800a250:	4293      	cmp	r3, r2
 800a252:	bf94      	ite	ls
 800a254:	2301      	movls	r3, #1
 800a256:	2300      	movhi	r3, #0
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	e006      	b.n	800a26a <HAL_I2C_Init+0x92>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4a7d      	ldr	r2, [pc, #500]	@ (800a454 <HAL_I2C_Init+0x27c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	bf94      	ite	ls
 800a264:	2301      	movls	r3, #1
 800a266:	2300      	movhi	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e0e7      	b.n	800a442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4a78      	ldr	r2, [pc, #480]	@ (800a458 <HAL_I2C_Init+0x280>)
 800a276:	fba2 2303 	umull	r2, r3, r2, r3
 800a27a:	0c9b      	lsrs	r3, r3, #18
 800a27c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4a6a      	ldr	r2, [pc, #424]	@ (800a44c <HAL_I2C_Init+0x274>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d802      	bhi.n	800a2ac <HAL_I2C_Init+0xd4>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	e009      	b.n	800a2c0 <HAL_I2C_Init+0xe8>
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a2b2:	fb02 f303 	mul.w	r3, r2, r3
 800a2b6:	4a69      	ldr	r2, [pc, #420]	@ (800a45c <HAL_I2C_Init+0x284>)
 800a2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2bc:	099b      	lsrs	r3, r3, #6
 800a2be:	3301      	adds	r3, #1
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a2d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	495c      	ldr	r1, [pc, #368]	@ (800a44c <HAL_I2C_Init+0x274>)
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	d819      	bhi.n	800a314 <HAL_I2C_Init+0x13c>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	1e59      	subs	r1, r3, #1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a2f4:	400b      	ands	r3, r1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <HAL_I2C_Init+0x138>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	1e59      	subs	r1, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	fbb1 f3f3 	udiv	r3, r1, r3
 800a308:	3301      	adds	r3, #1
 800a30a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a30e:	e051      	b.n	800a3b4 <HAL_I2C_Init+0x1dc>
 800a310:	2304      	movs	r3, #4
 800a312:	e04f      	b.n	800a3b4 <HAL_I2C_Init+0x1dc>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d111      	bne.n	800a340 <HAL_I2C_Init+0x168>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	1e58      	subs	r0, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6859      	ldr	r1, [r3, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	440b      	add	r3, r1
 800a32a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a32e:	3301      	adds	r3, #1
 800a330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a334:	2b00      	cmp	r3, #0
 800a336:	bf0c      	ite	eq
 800a338:	2301      	moveq	r3, #1
 800a33a:	2300      	movne	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	e012      	b.n	800a366 <HAL_I2C_Init+0x18e>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	1e58      	subs	r0, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6859      	ldr	r1, [r3, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	0099      	lsls	r1, r3, #2
 800a350:	440b      	add	r3, r1
 800a352:	fbb0 f3f3 	udiv	r3, r0, r3
 800a356:	3301      	adds	r3, #1
 800a358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bf0c      	ite	eq
 800a360:	2301      	moveq	r3, #1
 800a362:	2300      	movne	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <HAL_I2C_Init+0x196>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e022      	b.n	800a3b4 <HAL_I2C_Init+0x1dc>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10e      	bne.n	800a394 <HAL_I2C_Init+0x1bc>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1e58      	subs	r0, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6859      	ldr	r1, [r3, #4]
 800a37e:	460b      	mov	r3, r1
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	440b      	add	r3, r1
 800a384:	fbb0 f3f3 	udiv	r3, r0, r3
 800a388:	3301      	adds	r3, #1
 800a38a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a38e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a392:	e00f      	b.n	800a3b4 <HAL_I2C_Init+0x1dc>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	1e58      	subs	r0, r3, #1
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	0099      	lsls	r1, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	6809      	ldr	r1, [r1, #0]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69da      	ldr	r2, [r3, #28]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a3e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6911      	ldr	r1, [r2, #16]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	68d2      	ldr	r2, [r2, #12]
 800a3ee:	4311      	orrs	r1, r2
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695a      	ldr	r2, [r3, #20]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	000186a0 	.word	0x000186a0
 800a450:	001e847f 	.word	0x001e847f
 800a454:	003d08ff 	.word	0x003d08ff
 800a458:	431bde83 	.word	0x431bde83
 800a45c:	10624dd3 	.word	0x10624dd3

0800a460 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e021      	b.n	800a4b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2224      	movs	r2, #36	@ 0x24
 800a476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0201 	bic.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe feec 	bl	8009268 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	607a      	str	r2, [r7, #4]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	817b      	strh	r3, [r7, #10]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4d4:	f7ff f85e 	bl	8009594 <HAL_GetTick>
 800a4d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	f040 80e0 	bne.w	800a6a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	2319      	movs	r3, #25
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4970      	ldr	r1, [pc, #448]	@ (800a6b4 <HAL_I2C_Master_Transmit+0x1f4>)
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fe5c 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a4fe:	2302      	movs	r3, #2
 800a500:	e0d3      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d101      	bne.n	800a510 <HAL_I2C_Master_Transmit+0x50>
 800a50c:	2302      	movs	r3, #2
 800a50e:	e0cc      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b01      	cmp	r3, #1
 800a524:	d007      	beq.n	800a536 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0201 	orr.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2221      	movs	r2, #33	@ 0x21
 800a54a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2210      	movs	r2, #16
 800a552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	893a      	ldrh	r2, [r7, #8]
 800a566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4a50      	ldr	r2, [pc, #320]	@ (800a6b8 <HAL_I2C_Master_Transmit+0x1f8>)
 800a576:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a578:	8979      	ldrh	r1, [r7, #10]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	6a3a      	ldr	r2, [r7, #32]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fc16 	bl	800adb0 <I2C_MasterRequestWrite>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e08d      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	613b      	str	r3, [r7, #16]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a5a4:	e066      	b.n	800a674 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	6a39      	ldr	r1, [r7, #32]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 ff1a 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d107      	bne.n	800a5ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e06b      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d11b      	bne.n	800a648 <HAL_I2C_Master_Transmit+0x188>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a614:	2b00      	cmp	r3, #0
 800a616:	d017      	beq.n	800a648 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61c:	781a      	ldrb	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a640:	3b01      	subs	r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	6a39      	ldr	r1, [r7, #32]
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 ff11 	bl	800b474 <I2C_WaitOnBTFFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	d107      	bne.n	800a670 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a66e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e01a      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d194      	bne.n	800a5a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a68a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e000      	b.n	800a6aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a6a8:	2302      	movs	r3, #2
  }
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	00100002 	.word	0x00100002
 800a6b8:	ffff0000 	.word	0xffff0000

0800a6bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	817b      	strh	r3, [r7, #10]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	813b      	strh	r3, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6d6:	f7fe ff5d 	bl	8009594 <HAL_GetTick>
 800a6da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	f040 80d9 	bne.w	800a89c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	2319      	movs	r3, #25
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	496d      	ldr	r1, [pc, #436]	@ (800a8a8 <HAL_I2C_Mem_Write+0x1ec>)
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 fd5b 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
 800a702:	e0cc      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d101      	bne.n	800a712 <HAL_I2C_Mem_Write+0x56>
 800a70e:	2302      	movs	r3, #2
 800a710:	e0c5      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b01      	cmp	r3, #1
 800a726:	d007      	beq.n	800a738 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2221      	movs	r2, #33	@ 0x21
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2240      	movs	r2, #64	@ 0x40
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a4d      	ldr	r2, [pc, #308]	@ (800a8ac <HAL_I2C_Mem_Write+0x1f0>)
 800a778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a77a:	88f8      	ldrh	r0, [r7, #6]
 800a77c:	893a      	ldrh	r2, [r7, #8]
 800a77e:	8979      	ldrh	r1, [r7, #10]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4603      	mov	r3, r0
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 fb92 	bl	800aeb4 <I2C_RequestMemoryWrite>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d052      	beq.n	800a83c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e081      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fe20 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d107      	bne.n	800a7c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e06b      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	781a      	ldrb	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f003 0304 	and.w	r3, r3, #4
 800a800:	2b04      	cmp	r3, #4
 800a802:	d11b      	bne.n	800a83c <HAL_I2C_Mem_Write+0x180>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d017      	beq.n	800a83c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a826:	3b01      	subs	r3, #1
 800a828:	b29a      	uxth	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a832:	b29b      	uxth	r3, r3
 800a834:	3b01      	subs	r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1aa      	bne.n	800a79a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fe13 	bl	800b474 <I2C_WaitOnBTFFlagUntilTimeout>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00d      	beq.n	800a870 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d107      	bne.n	800a86c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a86a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e016      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a87e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2220      	movs	r2, #32
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	e000      	b.n	800a89e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a89c:	2302      	movs	r3, #2
  }
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	00100002 	.word	0x00100002
 800a8ac:	ffff0000 	.word	0xffff0000

0800a8b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08c      	sub	sp, #48	@ 0x30
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	817b      	strh	r3, [r7, #10]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	813b      	strh	r3, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8ce:	f7fe fe61 	bl	8009594 <HAL_GetTick>
 800a8d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	f040 8244 	bne.w	800ad6a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	2319      	movs	r3, #25
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	4982      	ldr	r1, [pc, #520]	@ (800aaf4 <HAL_I2C_Mem_Read+0x244>)
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fc5f 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e237      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a902:	2b01      	cmp	r3, #1
 800a904:	d101      	bne.n	800a90a <HAL_I2C_Mem_Read+0x5a>
 800a906:	2302      	movs	r3, #2
 800a908:	e230      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d007      	beq.n	800a930 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a93e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2222      	movs	r2, #34	@ 0x22
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2240      	movs	r2, #64	@ 0x40
 800a94c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a62      	ldr	r2, [pc, #392]	@ (800aaf8 <HAL_I2C_Mem_Read+0x248>)
 800a970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a972:	88f8      	ldrh	r0, [r7, #6]
 800a974:	893a      	ldrh	r2, [r7, #8]
 800a976:	8979      	ldrh	r1, [r7, #10]
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	4603      	mov	r3, r0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fb2c 	bl	800afe0 <I2C_RequestMemoryRead>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e1ec      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a996:	2b00      	cmp	r3, #0
 800a998:	d113      	bne.n	800a9c2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a99a:	2300      	movs	r3, #0
 800a99c:	61fb      	str	r3, [r7, #28]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	61fb      	str	r3, [r7, #28]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	61fb      	str	r3, [r7, #28]
 800a9ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	e1c0      	b.n	800ad44 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d11e      	bne.n	800aa08 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9da:	b672      	cpsid	i
}
 800a9dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	61bb      	str	r3, [r7, #24]
 800a9f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aa04:	b662      	cpsie	i
}
 800aa06:	e035      	b.n	800aa74 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d11e      	bne.n	800aa4e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa20:	b672      	cpsid	i
}
 800aa22:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa24:	2300      	movs	r3, #0
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	617b      	str	r3, [r7, #20]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aa4a:	b662      	cpsie	i
}
 800aa4c:	e012      	b.n	800aa74 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa5c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	613b      	str	r3, [r7, #16]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800aa74:	e166      	b.n	800ad44 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f200 811f 	bhi.w	800acbe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d123      	bne.n	800aad0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 fd39 	bl	800b504 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e167      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa6:	b2d2      	uxtb	r2, r2
 800aaa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab8:	3b01      	subs	r3, #1
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	3b01      	subs	r3, #1
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aace:	e139      	b.n	800ad44 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d152      	bne.n	800ab7e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	2200      	movs	r2, #0
 800aae0:	4906      	ldr	r1, [pc, #24]	@ (800aafc <HAL_I2C_Mem_Read+0x24c>)
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fb64 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d008      	beq.n	800ab00 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e13c      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
 800aaf2:	bf00      	nop
 800aaf4:	00100002 	.word	0x00100002
 800aaf8:	ffff0000 	.word	0xffff0000
 800aafc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800ab00:	b672      	cpsid	i
}
 800ab02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ab46:	b662      	cpsie	i
}
 800ab48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab66:	3b01      	subs	r3, #1
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab7c:	e0e2      	b.n	800ad44 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	2200      	movs	r2, #0
 800ab86:	497b      	ldr	r1, [pc, #492]	@ (800ad74 <HAL_I2C_Mem_Read+0x4c4>)
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fb11 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e0e9      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aba8:	b672      	cpsid	i
}
 800abaa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691a      	ldr	r2, [r3, #16]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abc8:	3b01      	subs	r3, #1
 800abca:	b29a      	uxth	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800abde:	4b66      	ldr	r3, [pc, #408]	@ (800ad78 <HAL_I2C_Mem_Read+0x4c8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	08db      	lsrs	r3, r3, #3
 800abe4:	4a65      	ldr	r2, [pc, #404]	@ (800ad7c <HAL_I2C_Mem_Read+0x4cc>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	0a1a      	lsrs	r2, r3, #8
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	00da      	lsls	r2, r3, #3
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d118      	bne.n	800ac36 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1e:	f043 0220 	orr.w	r2, r3, #32
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800ac26:	b662      	cpsie	i
}
 800ac28:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e09a      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d1d9      	bne.n	800abf8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	691a      	ldr	r2, [r3, #16]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac70:	3b01      	subs	r3, #1
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ac86:	b662      	cpsie	i
}
 800ac88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	b2d2      	uxtb	r2, r2
 800ac96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aca6:	3b01      	subs	r3, #1
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800acbc:	e042      	b.n	800ad44 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 fc1e 	bl	800b504 <I2C_WaitOnRXNEFlagUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e04c      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	3b01      	subs	r3, #1
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d118      	bne.n	800ad44 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1c:	b2d2      	uxtb	r2, r2
 800ad1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f47f ae94 	bne.w	800aa76 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	e000      	b.n	800ad6c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ad6a:	2302      	movs	r3, #2
  }
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3728      	adds	r7, #40	@ 0x28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	00010004 	.word	0x00010004
 800ad78:	20000f74 	.word	0x20000f74
 800ad7c:	14f8b589 	.word	0x14f8b589

0800ad80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad8e:	b2db      	uxtb	r3, r3
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bc80      	pop	{r7}
 800ad98:	4770      	bx	lr

0800ad9a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	bc80      	pop	{r7}
 800adae:	4770      	bx	lr

0800adb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	607a      	str	r2, [r7, #4]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	460b      	mov	r3, r1
 800adbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d006      	beq.n	800adda <I2C_MasterRequestWrite+0x2a>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d003      	beq.n	800adda <I2C_MasterRequestWrite+0x2a>
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800add8:	d108      	bne.n	800adec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e00b      	b.n	800ae04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf0:	2b12      	cmp	r3, #18
 800adf2:	d107      	bne.n	800ae04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f9cd 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00d      	beq.n	800ae38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae2a:	d103      	bne.n	800ae34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e035      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae40:	d108      	bne.n	800ae54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae42:	897b      	ldrh	r3, [r7, #10]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae50:	611a      	str	r2, [r3, #16]
 800ae52:	e01b      	b.n	800ae8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	11db      	asrs	r3, r3, #7
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	f003 0306 	and.w	r3, r3, #6
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	f063 030f 	orn	r3, r3, #15
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	490e      	ldr	r1, [pc, #56]	@ (800aeac <I2C_MasterRequestWrite+0xfc>)
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 fa16 	bl	800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e010      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ae82:	897b      	ldrh	r3, [r7, #10]
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4907      	ldr	r1, [pc, #28]	@ (800aeb0 <I2C_MasterRequestWrite+0x100>)
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f000 fa06 	bl	800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	00010008 	.word	0x00010008
 800aeb0:	00010002 	.word	0x00010002

0800aeb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	4608      	mov	r0, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	461a      	mov	r2, r3
 800aec2:	4603      	mov	r3, r0
 800aec4:	817b      	strh	r3, [r7, #10]
 800aec6:	460b      	mov	r3, r1
 800aec8:	813b      	strh	r3, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aedc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f960 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af04:	d103      	bne.n	800af0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e05f      	b.n	800afd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af12:	897b      	ldrh	r3, [r7, #10]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	461a      	mov	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800af20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	6a3a      	ldr	r2, [r7, #32]
 800af26:	492d      	ldr	r1, [pc, #180]	@ (800afdc <I2C_RequestMemoryWrite+0x128>)
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f9bb 	bl	800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e04c      	b.n	800afd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af50:	6a39      	ldr	r1, [r7, #32]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 fa46 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00d      	beq.n	800af7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	2b04      	cmp	r3, #4
 800af64:	d107      	bne.n	800af76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e02b      	b.n	800afd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d105      	bne.n	800af8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af80:	893b      	ldrh	r3, [r7, #8]
 800af82:	b2da      	uxtb	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	611a      	str	r2, [r3, #16]
 800af8a:	e021      	b.n	800afd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800af8c:	893b      	ldrh	r3, [r7, #8]
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b29b      	uxth	r3, r3
 800af92:	b2da      	uxtb	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9c:	6a39      	ldr	r1, [r7, #32]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fa20 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00d      	beq.n	800afc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d107      	bne.n	800afc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e005      	b.n	800afd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afc6:	893b      	ldrh	r3, [r7, #8]
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	00010002 	.word	0x00010002

0800afe0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4603      	mov	r3, r0
 800aff0:	817b      	strh	r3, [r7, #10]
 800aff2:	460b      	mov	r3, r1
 800aff4:	813b      	strh	r3, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b008:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	2200      	movs	r2, #0
 800b022:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 f8c2 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00d      	beq.n	800b04e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b03c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b040:	d103      	bne.n	800b04a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b048:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e0aa      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b04e:	897b      	ldrh	r3, [r7, #10]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	461a      	mov	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b05c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b060:	6a3a      	ldr	r2, [r7, #32]
 800b062:	4952      	ldr	r1, [pc, #328]	@ (800b1ac <I2C_RequestMemoryRead+0x1cc>)
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f91d 	bl	800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e097      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b08a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b08c:	6a39      	ldr	r1, [r7, #32]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f9a8 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00d      	beq.n	800b0b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d107      	bne.n	800b0b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e076      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d105      	bne.n	800b0c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b0bc:	893b      	ldrh	r3, [r7, #8]
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	611a      	str	r2, [r3, #16]
 800b0c6:	e021      	b.n	800b10c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b0c8:	893b      	ldrh	r3, [r7, #8]
 800b0ca:	0a1b      	lsrs	r3, r3, #8
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0d8:	6a39      	ldr	r1, [r7, #32]
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 f982 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00d      	beq.n	800b102 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ea:	2b04      	cmp	r3, #4
 800b0ec:	d107      	bne.n	800b0fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e050      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b102:	893b      	ldrh	r3, [r7, #8]
 800b104:	b2da      	uxtb	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b10e:	6a39      	ldr	r1, [r7, #32]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 f967 	bl	800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00d      	beq.n	800b138 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b120:	2b04      	cmp	r3, #4
 800b122:	d107      	bne.n	800b134 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b132:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e035      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b146:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	2200      	movs	r2, #0
 800b150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f82b 	bl	800b1b0 <I2C_WaitOnFlagUntilTimeout>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00d      	beq.n	800b17c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b16e:	d103      	bne.n	800b178 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e013      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b17c:	897b      	ldrh	r3, [r7, #10]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	b2da      	uxtb	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	6a3a      	ldr	r2, [r7, #32]
 800b190:	4906      	ldr	r1, [pc, #24]	@ (800b1ac <I2C_RequestMemoryRead+0x1cc>)
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 f886 	bl	800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	00010002 	.word	0x00010002

0800b1b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1c0:	e048      	b.n	800b254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c8:	d044      	beq.n	800b254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ca:	f7fe f9e3 	bl	8009594 <HAL_GetTick>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d302      	bcc.n	800b1e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d139      	bne.n	800b254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	0c1b      	lsrs	r3, r3, #16
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d10d      	bne.n	800b206 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	43da      	mvns	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bf0c      	ite	eq
 800b1fc:	2301      	moveq	r3, #1
 800b1fe:	2300      	movne	r3, #0
 800b200:	b2db      	uxtb	r3, r3
 800b202:	461a      	mov	r2, r3
 800b204:	e00c      	b.n	800b220 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	43da      	mvns	r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	4013      	ands	r3, r2
 800b212:	b29b      	uxth	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	bf0c      	ite	eq
 800b218:	2301      	moveq	r3, #1
 800b21a:	2300      	movne	r3, #0
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	461a      	mov	r2, r3
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	429a      	cmp	r2, r3
 800b224:	d116      	bne.n	800b254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b240:	f043 0220 	orr.w	r2, r3, #32
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e023      	b.n	800b29c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	0c1b      	lsrs	r3, r3, #16
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d10d      	bne.n	800b27a <I2C_WaitOnFlagUntilTimeout+0xca>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	43da      	mvns	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4013      	ands	r3, r2
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bf0c      	ite	eq
 800b270:	2301      	moveq	r3, #1
 800b272:	2300      	movne	r3, #0
 800b274:	b2db      	uxtb	r3, r3
 800b276:	461a      	mov	r2, r3
 800b278:	e00c      	b.n	800b294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	43da      	mvns	r2, r3
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4013      	ands	r3, r2
 800b286:	b29b      	uxth	r3, r3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bf0c      	ite	eq
 800b28c:	2301      	moveq	r3, #1
 800b28e:	2300      	movne	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	461a      	mov	r2, r3
 800b294:	79fb      	ldrb	r3, [r7, #7]
 800b296:	429a      	cmp	r2, r3
 800b298:	d093      	beq.n	800b1c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b2b2:	e071      	b.n	800b398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c2:	d123      	bne.n	800b30c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b2dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f8:	f043 0204 	orr.w	r2, r3, #4
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e067      	b.n	800b3dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b312:	d041      	beq.n	800b398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b314:	f7fe f93e 	bl	8009594 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	429a      	cmp	r2, r3
 800b322:	d302      	bcc.n	800b32a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d136      	bne.n	800b398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	0c1b      	lsrs	r3, r3, #16
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b01      	cmp	r3, #1
 800b332:	d10c      	bne.n	800b34e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	43da      	mvns	r2, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4013      	ands	r3, r2
 800b340:	b29b      	uxth	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	bf14      	ite	ne
 800b346:	2301      	movne	r3, #1
 800b348:	2300      	moveq	r3, #0
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	e00b      	b.n	800b366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	43da      	mvns	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	4013      	ands	r3, r2
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bf14      	ite	ne
 800b360:	2301      	movne	r3, #1
 800b362:	2300      	moveq	r3, #0
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d016      	beq.n	800b398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b384:	f043 0220 	orr.w	r2, r3, #32
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e021      	b.n	800b3dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	0c1b      	lsrs	r3, r3, #16
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d10c      	bne.n	800b3bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	43da      	mvns	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bf14      	ite	ne
 800b3b4:	2301      	movne	r3, #1
 800b3b6:	2300      	moveq	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	e00b      	b.n	800b3d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	43da      	mvns	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bf14      	ite	ne
 800b3ce:	2301      	movne	r3, #1
 800b3d0:	2300      	moveq	r3, #0
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f47f af6d 	bne.w	800b2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3f0:	e034      	b.n	800b45c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 f8e3 	bl	800b5be <I2C_IsAcknowledgeFailed>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e034      	b.n	800b46c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b408:	d028      	beq.n	800b45c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b40a:	f7fe f8c3 	bl	8009594 <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	429a      	cmp	r2, r3
 800b418:	d302      	bcc.n	800b420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d11d      	bne.n	800b45c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b42a:	2b80      	cmp	r3, #128	@ 0x80
 800b42c:	d016      	beq.n	800b45c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2220      	movs	r2, #32
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b448:	f043 0220 	orr.w	r2, r3, #32
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e007      	b.n	800b46c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b466:	2b80      	cmp	r3, #128	@ 0x80
 800b468:	d1c3      	bne.n	800b3f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b480:	e034      	b.n	800b4ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 f89b 	bl	800b5be <I2C_IsAcknowledgeFailed>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e034      	b.n	800b4fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b498:	d028      	beq.n	800b4ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b49a:	f7fe f87b 	bl	8009594 <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d302      	bcc.n	800b4b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d11d      	bne.n	800b4ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d016      	beq.n	800b4ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d8:	f043 0220 	orr.w	r2, r3, #32
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e007      	b.n	800b4fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	f003 0304 	and.w	r3, r3, #4
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d1c3      	bne.n	800b482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b510:	e049      	b.n	800b5a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	f003 0310 	and.w	r3, r3, #16
 800b51c:	2b10      	cmp	r3, #16
 800b51e:	d119      	bne.n	800b554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f06f 0210 	mvn.w	r2, #16
 800b528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2220      	movs	r2, #32
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e030      	b.n	800b5b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b554:	f7fe f81e 	bl	8009594 <HAL_GetTick>
 800b558:	4602      	mov	r2, r0
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	429a      	cmp	r2, r3
 800b562:	d302      	bcc.n	800b56a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d11d      	bne.n	800b5a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b574:	2b40      	cmp	r3, #64	@ 0x40
 800b576:	d016      	beq.n	800b5a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2220      	movs	r2, #32
 800b582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b592:	f043 0220 	orr.w	r2, r3, #32
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e007      	b.n	800b5b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b0:	2b40      	cmp	r3, #64	@ 0x40
 800b5b2:	d1ae      	bne.n	800b512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5d4:	d11b      	bne.n	800b60e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b5de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5fa:	f043 0204 	orr.w	r2, r3, #4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e000      	b.n	800b610 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr
	...

0800b61c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e272      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 8087 	beq.w	800b74a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b63c:	4b92      	ldr	r3, [pc, #584]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f003 030c 	and.w	r3, r3, #12
 800b644:	2b04      	cmp	r3, #4
 800b646:	d00c      	beq.n	800b662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b648:	4b8f      	ldr	r3, [pc, #572]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f003 030c 	and.w	r3, r3, #12
 800b650:	2b08      	cmp	r3, #8
 800b652:	d112      	bne.n	800b67a <HAL_RCC_OscConfig+0x5e>
 800b654:	4b8c      	ldr	r3, [pc, #560]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b65c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b660:	d10b      	bne.n	800b67a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b662:	4b89      	ldr	r3, [pc, #548]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d06c      	beq.n	800b748 <HAL_RCC_OscConfig+0x12c>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d168      	bne.n	800b748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e24c      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b682:	d106      	bne.n	800b692 <HAL_RCC_OscConfig+0x76>
 800b684:	4b80      	ldr	r3, [pc, #512]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a7f      	ldr	r2, [pc, #508]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b68a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e02e      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd4>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10c      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x98>
 800b69a:	4b7b      	ldr	r3, [pc, #492]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a7a      	ldr	r2, [pc, #488]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	4b78      	ldr	r3, [pc, #480]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a77      	ldr	r2, [pc, #476]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e01d      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd4>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_RCC_OscConfig+0xbc>
 800b6be:	4b72      	ldr	r3, [pc, #456]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a71      	ldr	r2, [pc, #452]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	4b6f      	ldr	r3, [pc, #444]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a6e      	ldr	r2, [pc, #440]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	e00b      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd4>
 800b6d8:	4b6b      	ldr	r3, [pc, #428]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a6a      	ldr	r2, [pc, #424]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	4b68      	ldr	r3, [pc, #416]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a67      	ldr	r2, [pc, #412]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b6ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d013      	beq.n	800b720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6f8:	f7fd ff4c 	bl	8009594 <HAL_GetTick>
 800b6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6fe:	e008      	b.n	800b712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b700:	f7fd ff48 	bl	8009594 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b64      	cmp	r3, #100	@ 0x64
 800b70c:	d901      	bls.n	800b712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e200      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b712:	4b5d      	ldr	r3, [pc, #372]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d0f0      	beq.n	800b700 <HAL_RCC_OscConfig+0xe4>
 800b71e:	e014      	b.n	800b74a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b720:	f7fd ff38 	bl	8009594 <HAL_GetTick>
 800b724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b726:	e008      	b.n	800b73a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b728:	f7fd ff34 	bl	8009594 <HAL_GetTick>
 800b72c:	4602      	mov	r2, r0
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	2b64      	cmp	r3, #100	@ 0x64
 800b734:	d901      	bls.n	800b73a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e1ec      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b73a:	4b53      	ldr	r3, [pc, #332]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1f0      	bne.n	800b728 <HAL_RCC_OscConfig+0x10c>
 800b746:	e000      	b.n	800b74a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d063      	beq.n	800b81e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b756:	4b4c      	ldr	r3, [pc, #304]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f003 030c 	and.w	r3, r3, #12
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b762:	4b49      	ldr	r3, [pc, #292]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f003 030c 	and.w	r3, r3, #12
 800b76a:	2b08      	cmp	r3, #8
 800b76c:	d11c      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x18c>
 800b76e:	4b46      	ldr	r3, [pc, #280]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d116      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b77a:	4b43      	ldr	r3, [pc, #268]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <HAL_RCC_OscConfig+0x176>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d001      	beq.n	800b792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e1c0      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b792:	4b3d      	ldr	r3, [pc, #244]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	4939      	ldr	r1, [pc, #228]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7a6:	e03a      	b.n	800b81e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d020      	beq.n	800b7f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7b0:	4b36      	ldr	r3, [pc, #216]	@ (800b88c <HAL_RCC_OscConfig+0x270>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7b6:	f7fd feed 	bl	8009594 <HAL_GetTick>
 800b7ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7bc:	e008      	b.n	800b7d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7be:	f7fd fee9 	bl	8009594 <HAL_GetTick>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e1a1      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0f0      	beq.n	800b7be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7dc:	4b2a      	ldr	r3, [pc, #168]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	4927      	ldr	r1, [pc, #156]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	600b      	str	r3, [r1, #0]
 800b7f0:	e015      	b.n	800b81e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7f2:	4b26      	ldr	r3, [pc, #152]	@ (800b88c <HAL_RCC_OscConfig+0x270>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7f8:	f7fd fecc 	bl	8009594 <HAL_GetTick>
 800b7fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7fe:	e008      	b.n	800b812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b800:	f7fd fec8 	bl	8009594 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d901      	bls.n	800b812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e180      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b812:	4b1d      	ldr	r3, [pc, #116]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0302 	and.w	r3, r3, #2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f0      	bne.n	800b800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0308 	and.w	r3, r3, #8
 800b826:	2b00      	cmp	r3, #0
 800b828:	d03a      	beq.n	800b8a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d019      	beq.n	800b866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b832:	4b17      	ldr	r3, [pc, #92]	@ (800b890 <HAL_RCC_OscConfig+0x274>)
 800b834:	2201      	movs	r2, #1
 800b836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b838:	f7fd feac 	bl	8009594 <HAL_GetTick>
 800b83c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b83e:	e008      	b.n	800b852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b840:	f7fd fea8 	bl	8009594 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d901      	bls.n	800b852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b84e:	2303      	movs	r3, #3
 800b850:	e160      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <HAL_RCC_OscConfig+0x26c>)
 800b854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0f0      	beq.n	800b840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b85e:	2001      	movs	r0, #1
 800b860:	f000 face 	bl	800be00 <RCC_Delay>
 800b864:	e01c      	b.n	800b8a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b866:	4b0a      	ldr	r3, [pc, #40]	@ (800b890 <HAL_RCC_OscConfig+0x274>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b86c:	f7fd fe92 	bl	8009594 <HAL_GetTick>
 800b870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b872:	e00f      	b.n	800b894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b874:	f7fd fe8e 	bl	8009594 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d908      	bls.n	800b894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e146      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
 800b886:	bf00      	nop
 800b888:	40021000 	.word	0x40021000
 800b88c:	42420000 	.word	0x42420000
 800b890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b894:	4b92      	ldr	r3, [pc, #584]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e9      	bne.n	800b874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80a6 	beq.w	800b9fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8b2:	4b8b      	ldr	r3, [pc, #556]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10d      	bne.n	800b8da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8be:	4b88      	ldr	r3, [pc, #544]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	4a87      	ldr	r2, [pc, #540]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b8c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8c8:	61d3      	str	r3, [r2, #28]
 800b8ca:	4b85      	ldr	r3, [pc, #532]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8d2:	60bb      	str	r3, [r7, #8]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8da:	4b82      	ldr	r3, [pc, #520]	@ (800bae4 <HAL_RCC_OscConfig+0x4c8>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d118      	bne.n	800b918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b8e6:	4b7f      	ldr	r3, [pc, #508]	@ (800bae4 <HAL_RCC_OscConfig+0x4c8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a7e      	ldr	r2, [pc, #504]	@ (800bae4 <HAL_RCC_OscConfig+0x4c8>)
 800b8ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8f2:	f7fd fe4f 	bl	8009594 <HAL_GetTick>
 800b8f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8f8:	e008      	b.n	800b90c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8fa:	f7fd fe4b 	bl	8009594 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	2b64      	cmp	r3, #100	@ 0x64
 800b906:	d901      	bls.n	800b90c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	e103      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b90c:	4b75      	ldr	r3, [pc, #468]	@ (800bae4 <HAL_RCC_OscConfig+0x4c8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0f0      	beq.n	800b8fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d106      	bne.n	800b92e <HAL_RCC_OscConfig+0x312>
 800b920:	4b6f      	ldr	r3, [pc, #444]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	4a6e      	ldr	r2, [pc, #440]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	6213      	str	r3, [r2, #32]
 800b92c:	e02d      	b.n	800b98a <HAL_RCC_OscConfig+0x36e>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10c      	bne.n	800b950 <HAL_RCC_OscConfig+0x334>
 800b936:	4b6a      	ldr	r3, [pc, #424]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	4a69      	ldr	r2, [pc, #420]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b93c:	f023 0301 	bic.w	r3, r3, #1
 800b940:	6213      	str	r3, [r2, #32]
 800b942:	4b67      	ldr	r3, [pc, #412]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	4a66      	ldr	r2, [pc, #408]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b948:	f023 0304 	bic.w	r3, r3, #4
 800b94c:	6213      	str	r3, [r2, #32]
 800b94e:	e01c      	b.n	800b98a <HAL_RCC_OscConfig+0x36e>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2b05      	cmp	r3, #5
 800b956:	d10c      	bne.n	800b972 <HAL_RCC_OscConfig+0x356>
 800b958:	4b61      	ldr	r3, [pc, #388]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	4a60      	ldr	r2, [pc, #384]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b95e:	f043 0304 	orr.w	r3, r3, #4
 800b962:	6213      	str	r3, [r2, #32]
 800b964:	4b5e      	ldr	r3, [pc, #376]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	4a5d      	ldr	r2, [pc, #372]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	6213      	str	r3, [r2, #32]
 800b970:	e00b      	b.n	800b98a <HAL_RCC_OscConfig+0x36e>
 800b972:	4b5b      	ldr	r3, [pc, #364]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	4a5a      	ldr	r2, [pc, #360]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b978:	f023 0301 	bic.w	r3, r3, #1
 800b97c:	6213      	str	r3, [r2, #32]
 800b97e:	4b58      	ldr	r3, [pc, #352]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	4a57      	ldr	r2, [pc, #348]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b984:	f023 0304 	bic.w	r3, r3, #4
 800b988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d015      	beq.n	800b9be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b992:	f7fd fdff 	bl	8009594 <HAL_GetTick>
 800b996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b998:	e00a      	b.n	800b9b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99a:	f7fd fdfb 	bl	8009594 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d901      	bls.n	800b9b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e0b1      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9b0:	4b4b      	ldr	r3, [pc, #300]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0ee      	beq.n	800b99a <HAL_RCC_OscConfig+0x37e>
 800b9bc:	e014      	b.n	800b9e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9be:	f7fd fde9 	bl	8009594 <HAL_GetTick>
 800b9c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9c4:	e00a      	b.n	800b9dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9c6:	f7fd fde5 	bl	8009594 <HAL_GetTick>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d901      	bls.n	800b9dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e09b      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9dc:	4b40      	ldr	r3, [pc, #256]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	f003 0302 	and.w	r3, r3, #2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1ee      	bne.n	800b9c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d105      	bne.n	800b9fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9ee:	4b3c      	ldr	r3, [pc, #240]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	4a3b      	ldr	r2, [pc, #236]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800b9f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 8087 	beq.w	800bb12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba04:	4b36      	ldr	r3, [pc, #216]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f003 030c 	and.w	r3, r3, #12
 800ba0c:	2b08      	cmp	r3, #8
 800ba0e:	d061      	beq.n	800bad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	69db      	ldr	r3, [r3, #28]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d146      	bne.n	800baa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba18:	4b33      	ldr	r3, [pc, #204]	@ (800bae8 <HAL_RCC_OscConfig+0x4cc>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba1e:	f7fd fdb9 	bl	8009594 <HAL_GetTick>
 800ba22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ba24:	e008      	b.n	800ba38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba26:	f7fd fdb5 	bl	8009594 <HAL_GetTick>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d901      	bls.n	800ba38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e06d      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ba38:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1f0      	bne.n	800ba26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba4c:	d108      	bne.n	800ba60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ba4e:	4b24      	ldr	r3, [pc, #144]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	4921      	ldr	r1, [pc, #132]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba60:	4b1f      	ldr	r3, [pc, #124]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a19      	ldr	r1, [r3, #32]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba70:	430b      	orrs	r3, r1
 800ba72:	491b      	ldr	r1, [pc, #108]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba74:	4313      	orrs	r3, r2
 800ba76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba78:	4b1b      	ldr	r3, [pc, #108]	@ (800bae8 <HAL_RCC_OscConfig+0x4cc>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba7e:	f7fd fd89 	bl	8009594 <HAL_GetTick>
 800ba82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ba84:	e008      	b.n	800ba98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba86:	f7fd fd85 	bl	8009594 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d901      	bls.n	800ba98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e03d      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ba98:	4b11      	ldr	r3, [pc, #68]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0f0      	beq.n	800ba86 <HAL_RCC_OscConfig+0x46a>
 800baa4:	e035      	b.n	800bb12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800baa6:	4b10      	ldr	r3, [pc, #64]	@ (800bae8 <HAL_RCC_OscConfig+0x4cc>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baac:	f7fd fd72 	bl	8009594 <HAL_GetTick>
 800bab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bab2:	e008      	b.n	800bac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bab4:	f7fd fd6e 	bl	8009594 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e026      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bac6:	4b06      	ldr	r3, [pc, #24]	@ (800bae0 <HAL_RCC_OscConfig+0x4c4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1f0      	bne.n	800bab4 <HAL_RCC_OscConfig+0x498>
 800bad2:	e01e      	b.n	800bb12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d107      	bne.n	800baec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e019      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
 800bae0:	40021000 	.word	0x40021000
 800bae4:	40007000 	.word	0x40007000
 800bae8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800baec:	4b0b      	ldr	r3, [pc, #44]	@ (800bb1c <HAL_RCC_OscConfig+0x500>)
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d106      	bne.n	800bb0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d001      	beq.n	800bb12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	40021000 	.word	0x40021000

0800bb20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e0d0      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb34:	4b6a      	ldr	r3, [pc, #424]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0307 	and.w	r3, r3, #7
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d910      	bls.n	800bb64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb42:	4b67      	ldr	r3, [pc, #412]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f023 0207 	bic.w	r2, r3, #7
 800bb4a:	4965      	ldr	r1, [pc, #404]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb52:	4b63      	ldr	r3, [pc, #396]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d001      	beq.n	800bb64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e0b8      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d020      	beq.n	800bbb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb7c:	4b59      	ldr	r3, [pc, #356]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a58      	ldr	r2, [pc, #352]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bb86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 0308 	and.w	r3, r3, #8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb94:	4b53      	ldr	r3, [pc, #332]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	4a52      	ldr	r2, [pc, #328]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bb9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bba0:	4b50      	ldr	r3, [pc, #320]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	494d      	ldr	r1, [pc, #308]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d040      	beq.n	800bc40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d107      	bne.n	800bbd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbc6:	4b47      	ldr	r3, [pc, #284]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d115      	bne.n	800bbfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e07f      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d107      	bne.n	800bbee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbde:	4b41      	ldr	r3, [pc, #260]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d109      	bne.n	800bbfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e073      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbee:	4b3d      	ldr	r3, [pc, #244]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e06b      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bbfe:	4b39      	ldr	r3, [pc, #228]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f023 0203 	bic.w	r2, r3, #3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	4936      	ldr	r1, [pc, #216]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bc10:	f7fd fcc0 	bl	8009594 <HAL_GetTick>
 800bc14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc16:	e00a      	b.n	800bc2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc18:	f7fd fcbc 	bl	8009594 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d901      	bls.n	800bc2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e053      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc2e:	4b2d      	ldr	r3, [pc, #180]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f003 020c 	and.w	r2, r3, #12
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d1eb      	bne.n	800bc18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc40:	4b27      	ldr	r3, [pc, #156]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0307 	and.w	r3, r3, #7
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d210      	bcs.n	800bc70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc4e:	4b24      	ldr	r3, [pc, #144]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f023 0207 	bic.w	r2, r3, #7
 800bc56:	4922      	ldr	r1, [pc, #136]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc5e:	4b20      	ldr	r3, [pc, #128]	@ (800bce0 <HAL_RCC_ClockConfig+0x1c0>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d001      	beq.n	800bc70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e032      	b.n	800bcd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d008      	beq.n	800bc8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc7c:	4b19      	ldr	r3, [pc, #100]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	4916      	ldr	r1, [pc, #88]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc9a:	4b12      	ldr	r3, [pc, #72]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	490e      	ldr	r1, [pc, #56]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bcae:	f000 f821 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <HAL_RCC_ClockConfig+0x1c4>)
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	091b      	lsrs	r3, r3, #4
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	490a      	ldr	r1, [pc, #40]	@ (800bce8 <HAL_RCC_ClockConfig+0x1c8>)
 800bcc0:	5ccb      	ldrb	r3, [r1, r3]
 800bcc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc6:	4a09      	ldr	r2, [pc, #36]	@ (800bcec <HAL_RCC_ClockConfig+0x1cc>)
 800bcc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bcca:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <HAL_RCC_ClockConfig+0x1d0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fd fc1e 	bl	8009510 <HAL_InitTick>

  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	40022000 	.word	0x40022000
 800bce4:	40021000 	.word	0x40021000
 800bce8:	0800e900 	.word	0x0800e900
 800bcec:	20000f74 	.word	0x20000f74
 800bcf0:	20000f78 	.word	0x20000f78

0800bcf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
 800bd02:	2300      	movs	r3, #0
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	2300      	movs	r3, #0
 800bd08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bd88 <HAL_RCC_GetSysClockFreq+0x94>)
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f003 030c 	and.w	r3, r3, #12
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d002      	beq.n	800bd24 <HAL_RCC_GetSysClockFreq+0x30>
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d003      	beq.n	800bd2a <HAL_RCC_GetSysClockFreq+0x36>
 800bd22:	e027      	b.n	800bd74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bd24:	4b19      	ldr	r3, [pc, #100]	@ (800bd8c <HAL_RCC_GetSysClockFreq+0x98>)
 800bd26:	613b      	str	r3, [r7, #16]
      break;
 800bd28:	e027      	b.n	800bd7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	0c9b      	lsrs	r3, r3, #18
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	4a17      	ldr	r2, [pc, #92]	@ (800bd90 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bd34:	5cd3      	ldrb	r3, [r2, r3]
 800bd36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d010      	beq.n	800bd64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bd42:	4b11      	ldr	r3, [pc, #68]	@ (800bd88 <HAL_RCC_GetSysClockFreq+0x94>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	0c5b      	lsrs	r3, r3, #17
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	4a11      	ldr	r2, [pc, #68]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bd4e:	5cd3      	ldrb	r3, [r2, r3]
 800bd50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a0d      	ldr	r2, [pc, #52]	@ (800bd8c <HAL_RCC_GetSysClockFreq+0x98>)
 800bd56:	fb03 f202 	mul.w	r2, r3, r2
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e004      	b.n	800bd6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a0c      	ldr	r2, [pc, #48]	@ (800bd98 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bd68:	fb02 f303 	mul.w	r3, r2, r3
 800bd6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	613b      	str	r3, [r7, #16]
      break;
 800bd72:	e002      	b.n	800bd7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bd74:	4b05      	ldr	r3, [pc, #20]	@ (800bd8c <HAL_RCC_GetSysClockFreq+0x98>)
 800bd76:	613b      	str	r3, [r7, #16]
      break;
 800bd78:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bd7a:	693b      	ldr	r3, [r7, #16]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	40021000 	.word	0x40021000
 800bd8c:	007a1200 	.word	0x007a1200
 800bd90:	0800e918 	.word	0x0800e918
 800bd94:	0800e928 	.word	0x0800e928
 800bd98:	003d0900 	.word	0x003d0900

0800bd9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bda0:	4b02      	ldr	r3, [pc, #8]	@ (800bdac <HAL_RCC_GetHCLKFreq+0x10>)
 800bda2:	681b      	ldr	r3, [r3, #0]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bc80      	pop	{r7}
 800bdaa:	4770      	bx	lr
 800bdac:	20000f74 	.word	0x20000f74

0800bdb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bdb4:	f7ff fff2 	bl	800bd9c <HAL_RCC_GetHCLKFreq>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	0a1b      	lsrs	r3, r3, #8
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	4903      	ldr	r1, [pc, #12]	@ (800bdd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdc6:	5ccb      	ldrb	r3, [r1, r3]
 800bdc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	40021000 	.word	0x40021000
 800bdd4:	0800e910 	.word	0x0800e910

0800bdd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bddc:	f7ff ffde 	bl	800bd9c <HAL_RCC_GetHCLKFreq>
 800bde0:	4602      	mov	r2, r0
 800bde2:	4b05      	ldr	r3, [pc, #20]	@ (800bdf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	0adb      	lsrs	r3, r3, #11
 800bde8:	f003 0307 	and.w	r3, r3, #7
 800bdec:	4903      	ldr	r1, [pc, #12]	@ (800bdfc <HAL_RCC_GetPCLK2Freq+0x24>)
 800bdee:	5ccb      	ldrb	r3, [r1, r3]
 800bdf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	40021000 	.word	0x40021000
 800bdfc:	0800e910 	.word	0x0800e910

0800be00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800be08:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <RCC_Delay+0x34>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a0a      	ldr	r2, [pc, #40]	@ (800be38 <RCC_Delay+0x38>)
 800be0e:	fba2 2303 	umull	r2, r3, r2, r3
 800be12:	0a5b      	lsrs	r3, r3, #9
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	fb02 f303 	mul.w	r3, r2, r3
 800be1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800be1c:	bf00      	nop
  }
  while (Delay --);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	1e5a      	subs	r2, r3, #1
 800be22:	60fa      	str	r2, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f9      	bne.n	800be1c <RCC_Delay+0x1c>
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	bc80      	pop	{r7}
 800be32:	4770      	bx	lr
 800be34:	20000f74 	.word	0x20000f74
 800be38:	10624dd3 	.word	0x10624dd3

0800be3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e041      	b.n	800bed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7fd fa22 	bl	80092ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3304      	adds	r3, #4
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f000 fa82 	bl	800c384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
	...

0800bedc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b01      	cmp	r3, #1
 800beee:	d001      	beq.n	800bef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e044      	b.n	800bf7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68da      	ldr	r2, [r3, #12]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f042 0201 	orr.w	r2, r2, #1
 800bf0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a1d      	ldr	r2, [pc, #116]	@ (800bf88 <HAL_TIM_Base_Start_IT+0xac>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d018      	beq.n	800bf48 <HAL_TIM_Base_Start_IT+0x6c>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bf8c <HAL_TIM_Base_Start_IT+0xb0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <HAL_TIM_Base_Start_IT+0x6c>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf28:	d00e      	beq.n	800bf48 <HAL_TIM_Base_Start_IT+0x6c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a18      	ldr	r2, [pc, #96]	@ (800bf90 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d009      	beq.n	800bf48 <HAL_TIM_Base_Start_IT+0x6c>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a16      	ldr	r2, [pc, #88]	@ (800bf94 <HAL_TIM_Base_Start_IT+0xb8>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d004      	beq.n	800bf48 <HAL_TIM_Base_Start_IT+0x6c>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a15      	ldr	r2, [pc, #84]	@ (800bf98 <HAL_TIM_Base_Start_IT+0xbc>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d111      	bne.n	800bf6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b06      	cmp	r3, #6
 800bf58:	d010      	beq.n	800bf7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f042 0201 	orr.w	r2, r2, #1
 800bf68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf6a:	e007      	b.n	800bf7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f042 0201 	orr.w	r2, r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	40012c00 	.word	0x40012c00
 800bf8c:	40013400 	.word	0x40013400
 800bf90:	40000400 	.word	0x40000400
 800bf94:	40000800 	.word	0x40000800
 800bf98:	40000c00 	.word	0x40000c00

0800bf9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d122      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f003 0302 	and.w	r3, r3, #2
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d11b      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f06f 0202 	mvn.w	r2, #2
 800bfc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f9b4 	bl	800c34c <HAL_TIM_IC_CaptureCallback>
 800bfe4:	e005      	b.n	800bff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f9a7 	bl	800c33a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f9b6 	bl	800c35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b04      	cmp	r3, #4
 800c004:	d122      	bne.n	800c04c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b04      	cmp	r3, #4
 800c012:	d11b      	bne.n	800c04c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0204 	mvn.w	r2, #4
 800c01c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2202      	movs	r2, #2
 800c022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f98a 	bl	800c34c <HAL_TIM_IC_CaptureCallback>
 800c038:	e005      	b.n	800c046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f97d 	bl	800c33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f98c 	bl	800c35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	f003 0308 	and.w	r3, r3, #8
 800c056:	2b08      	cmp	r3, #8
 800c058:	d122      	bne.n	800c0a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f003 0308 	and.w	r3, r3, #8
 800c064:	2b08      	cmp	r3, #8
 800c066:	d11b      	bne.n	800c0a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f06f 0208 	mvn.w	r2, #8
 800c070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2204      	movs	r2, #4
 800c076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f960 	bl	800c34c <HAL_TIM_IC_CaptureCallback>
 800c08c:	e005      	b.n	800c09a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f953 	bl	800c33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f962 	bl	800c35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b10      	cmp	r3, #16
 800c0ac:	d122      	bne.n	800c0f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	f003 0310 	and.w	r3, r3, #16
 800c0b8:	2b10      	cmp	r3, #16
 800c0ba:	d11b      	bne.n	800c0f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f06f 0210 	mvn.w	r2, #16
 800c0c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2208      	movs	r2, #8
 800c0ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	69db      	ldr	r3, [r3, #28]
 800c0d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f936 	bl	800c34c <HAL_TIM_IC_CaptureCallback>
 800c0e0:	e005      	b.n	800c0ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f929 	bl	800c33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f938 	bl	800c35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d10e      	bne.n	800c120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d107      	bne.n	800c120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f06f 0201 	mvn.w	r2, #1
 800c118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7fc fd4c 	bl	8008bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c12a:	2b80      	cmp	r3, #128	@ 0x80
 800c12c:	d10e      	bne.n	800c14c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c138:	2b80      	cmp	r3, #128	@ 0x80
 800c13a:	d107      	bne.n	800c14c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 faa1 	bl	800c68e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c156:	2b40      	cmp	r3, #64	@ 0x40
 800c158:	d10e      	bne.n	800c178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c164:	2b40      	cmp	r3, #64	@ 0x40
 800c166:	d107      	bne.n	800c178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f8fc 	bl	800c370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 0320 	and.w	r3, r3, #32
 800c182:	2b20      	cmp	r3, #32
 800c184:	d10e      	bne.n	800c1a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f003 0320 	and.w	r3, r3, #32
 800c190:	2b20      	cmp	r3, #32
 800c192:	d107      	bne.n	800c1a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f06f 0220 	mvn.w	r2, #32
 800c19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa6c 	bl	800c67c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d101      	bne.n	800c1c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	e0b4      	b.n	800c332 <HAL_TIM_ConfigClockSource+0x186>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c200:	d03e      	beq.n	800c280 <HAL_TIM_ConfigClockSource+0xd4>
 800c202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c206:	f200 8087 	bhi.w	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c20a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c20e:	f000 8086 	beq.w	800c31e <HAL_TIM_ConfigClockSource+0x172>
 800c212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c216:	d87f      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c218:	2b70      	cmp	r3, #112	@ 0x70
 800c21a:	d01a      	beq.n	800c252 <HAL_TIM_ConfigClockSource+0xa6>
 800c21c:	2b70      	cmp	r3, #112	@ 0x70
 800c21e:	d87b      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c220:	2b60      	cmp	r3, #96	@ 0x60
 800c222:	d050      	beq.n	800c2c6 <HAL_TIM_ConfigClockSource+0x11a>
 800c224:	2b60      	cmp	r3, #96	@ 0x60
 800c226:	d877      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c228:	2b50      	cmp	r3, #80	@ 0x50
 800c22a:	d03c      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0xfa>
 800c22c:	2b50      	cmp	r3, #80	@ 0x50
 800c22e:	d873      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c230:	2b40      	cmp	r3, #64	@ 0x40
 800c232:	d058      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x13a>
 800c234:	2b40      	cmp	r3, #64	@ 0x40
 800c236:	d86f      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c238:	2b30      	cmp	r3, #48	@ 0x30
 800c23a:	d064      	beq.n	800c306 <HAL_TIM_ConfigClockSource+0x15a>
 800c23c:	2b30      	cmp	r3, #48	@ 0x30
 800c23e:	d86b      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c240:	2b20      	cmp	r3, #32
 800c242:	d060      	beq.n	800c306 <HAL_TIM_ConfigClockSource+0x15a>
 800c244:	2b20      	cmp	r3, #32
 800c246:	d867      	bhi.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d05c      	beq.n	800c306 <HAL_TIM_ConfigClockSource+0x15a>
 800c24c:	2b10      	cmp	r3, #16
 800c24e:	d05a      	beq.n	800c306 <HAL_TIM_ConfigClockSource+0x15a>
 800c250:	e062      	b.n	800c318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c262:	f000 f980 	bl	800c566 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	609a      	str	r2, [r3, #8]
      break;
 800c27e:	e04f      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c290:	f000 f969 	bl	800c566 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689a      	ldr	r2, [r3, #8]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c2a2:	609a      	str	r2, [r3, #8]
      break;
 800c2a4:	e03c      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f000 f8e0 	bl	800c478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2150      	movs	r1, #80	@ 0x50
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 f937 	bl	800c532 <TIM_ITRx_SetConfig>
      break;
 800c2c4:	e02c      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f000 f8fe 	bl	800c4d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2160      	movs	r1, #96	@ 0x60
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f927 	bl	800c532 <TIM_ITRx_SetConfig>
      break;
 800c2e4:	e01c      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f000 f8c0 	bl	800c478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2140      	movs	r1, #64	@ 0x40
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f917 	bl	800c532 <TIM_ITRx_SetConfig>
      break;
 800c304:	e00c      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f000 f90e 	bl	800c532 <TIM_ITRx_SetConfig>
      break;
 800c316:	e003      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	73fb      	strb	r3, [r7, #15]
      break;
 800c31c:	e000      	b.n	800c320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c31e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c330:	7bfb      	ldrb	r3, [r7, #15]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b083      	sub	sp, #12
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c342:	bf00      	nop
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	bc80      	pop	{r7}
 800c34a:	4770      	bx	lr

0800c34c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	bc80      	pop	{r7}
 800c35c:	4770      	bx	lr

0800c35e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bc80      	pop	{r7}
 800c36e:	4770      	bx	lr

0800c370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr
	...

0800c384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a33      	ldr	r2, [pc, #204]	@ (800c464 <TIM_Base_SetConfig+0xe0>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d013      	beq.n	800c3c4 <TIM_Base_SetConfig+0x40>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a32      	ldr	r2, [pc, #200]	@ (800c468 <TIM_Base_SetConfig+0xe4>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d00f      	beq.n	800c3c4 <TIM_Base_SetConfig+0x40>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3aa:	d00b      	beq.n	800c3c4 <TIM_Base_SetConfig+0x40>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a2f      	ldr	r2, [pc, #188]	@ (800c46c <TIM_Base_SetConfig+0xe8>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d007      	beq.n	800c3c4 <TIM_Base_SetConfig+0x40>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a2e      	ldr	r2, [pc, #184]	@ (800c470 <TIM_Base_SetConfig+0xec>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d003      	beq.n	800c3c4 <TIM_Base_SetConfig+0x40>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a2d      	ldr	r2, [pc, #180]	@ (800c474 <TIM_Base_SetConfig+0xf0>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d108      	bne.n	800c3d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a22      	ldr	r2, [pc, #136]	@ (800c464 <TIM_Base_SetConfig+0xe0>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d013      	beq.n	800c406 <TIM_Base_SetConfig+0x82>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a21      	ldr	r2, [pc, #132]	@ (800c468 <TIM_Base_SetConfig+0xe4>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00f      	beq.n	800c406 <TIM_Base_SetConfig+0x82>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ec:	d00b      	beq.n	800c406 <TIM_Base_SetConfig+0x82>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a1e      	ldr	r2, [pc, #120]	@ (800c46c <TIM_Base_SetConfig+0xe8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d007      	beq.n	800c406 <TIM_Base_SetConfig+0x82>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c470 <TIM_Base_SetConfig+0xec>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d003      	beq.n	800c406 <TIM_Base_SetConfig+0x82>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4a1c      	ldr	r2, [pc, #112]	@ (800c474 <TIM_Base_SetConfig+0xf0>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d108      	bne.n	800c418 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c40c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	689a      	ldr	r2, [r3, #8]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a09      	ldr	r2, [pc, #36]	@ (800c464 <TIM_Base_SetConfig+0xe0>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <TIM_Base_SetConfig+0xc8>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a08      	ldr	r2, [pc, #32]	@ (800c468 <TIM_Base_SetConfig+0xe4>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d103      	bne.n	800c454 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	691a      	ldr	r2, [r3, #16]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	615a      	str	r2, [r3, #20]
}
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	bc80      	pop	{r7}
 800c462:	4770      	bx	lr
 800c464:	40012c00 	.word	0x40012c00
 800c468:	40013400 	.word	0x40013400
 800c46c:	40000400 	.word	0x40000400
 800c470:	40000800 	.word	0x40000800
 800c474:	40000c00 	.word	0x40000c00

0800c478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6a1b      	ldr	r3, [r3, #32]
 800c488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	f023 0201 	bic.w	r2, r3, #1
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c4a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f023 030a 	bic.w	r3, r3, #10
 800c4b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	621a      	str	r2, [r3, #32]
}
 800c4ca:	bf00      	nop
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bc80      	pop	{r7}
 800c4d2:	4770      	bx	lr

0800c4d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b087      	sub	sp, #28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	f023 0210 	bic.w	r2, r3, #16
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c4fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	031b      	lsls	r3, r3, #12
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	4313      	orrs	r3, r2
 800c508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c510:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	4313      	orrs	r3, r2
 800c51a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	621a      	str	r2, [r3, #32]
}
 800c528:	bf00      	nop
 800c52a:	371c      	adds	r7, #28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bc80      	pop	{r7}
 800c530:	4770      	bx	lr

0800c532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c532:	b480      	push	{r7}
 800c534:	b085      	sub	sp, #20
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4313      	orrs	r3, r2
 800c550:	f043 0307 	orr.w	r3, r3, #7
 800c554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	609a      	str	r2, [r3, #8]
}
 800c55c:	bf00      	nop
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	bc80      	pop	{r7}
 800c564:	4770      	bx	lr

0800c566 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c566:	b480      	push	{r7}
 800c568:	b087      	sub	sp, #28
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
 800c572:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c580:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	021a      	lsls	r2, r3, #8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	431a      	orrs	r2, r3
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	609a      	str	r2, [r3, #8]
}
 800c59a:	bf00      	nop
 800c59c:	371c      	adds	r7, #28
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bc80      	pop	{r7}
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d101      	bne.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e050      	b.n	800c65e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c668 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d018      	beq.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a19      	ldr	r2, [pc, #100]	@ (800c66c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d013      	beq.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c612:	d00e      	beq.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a15      	ldr	r2, [pc, #84]	@ (800c670 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d009      	beq.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a14      	ldr	r2, [pc, #80]	@ (800c674 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d004      	beq.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a12      	ldr	r2, [pc, #72]	@ (800c678 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d10c      	bne.n	800c64c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	4313      	orrs	r3, r2
 800c642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	bc80      	pop	{r7}
 800c666:	4770      	bx	lr
 800c668:	40012c00 	.word	0x40012c00
 800c66c:	40013400 	.word	0x40013400
 800c670:	40000400 	.word	0x40000400
 800c674:	40000800 	.word	0x40000800
 800c678:	40000c00 	.word	0x40000c00

0800c67c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	bc80      	pop	{r7}
 800c68c:	4770      	bx	lr

0800c68e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bc80      	pop	{r7}
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e042      	b.n	800c738 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d106      	bne.n	800c6cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fc fe16 	bl	80092f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2224      	movs	r2, #36	@ 0x24
 800c6d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c6e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fd11 	bl	800d10c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	691a      	ldr	r2, [r3, #16]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c6f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	695a      	ldr	r2, [r3, #20]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2220      	movs	r2, #32
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2220      	movs	r2, #32
 800c72c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b20      	cmp	r3, #32
 800c758:	d121      	bne.n	800c79e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <HAL_UART_Transmit_IT+0x26>
 800c760:	88fb      	ldrh	r3, [r7, #6]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e01a      	b.n	800c7a0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	88fa      	ldrh	r2, [r7, #6]
 800c774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	88fa      	ldrh	r2, [r7, #6]
 800c77a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2221      	movs	r2, #33	@ 0x21
 800c786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c798:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	e000      	b.n	800c7a0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c79e:	2302      	movs	r3, #2
  }
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bc80      	pop	{r7}
 800c7a8:	4770      	bx	lr

0800c7aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	2b20      	cmp	r3, #32
 800c7c2:	d112      	bne.n	800c7ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <HAL_UART_Receive_IT+0x26>
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e00b      	b.n	800c7ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	68b9      	ldr	r1, [r7, #8]
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 fabf 	bl	800cd64 <UART_Start_Receive_IT>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	e000      	b.n	800c7ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c7ea:	2302      	movs	r3, #2
  }
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b0ba      	sub	sp, #232	@ 0xe8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c820:	2300      	movs	r3, #0
 800c822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10f      	bne.n	800c85a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b00      	cmp	r3, #0
 800c844:	d009      	beq.n	800c85a <HAL_UART_IRQHandler+0x66>
 800c846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c84a:	f003 0320 	and.w	r3, r3, #32
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fb9c 	bl	800cf90 <UART_Receive_IT>
      return;
 800c858:	e25b      	b.n	800cd12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c85a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 80de 	beq.w	800ca20 <HAL_UART_IRQHandler+0x22c>
 800c864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d106      	bne.n	800c87e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c874:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80d1 	beq.w	800ca20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c882:	f003 0301 	and.w	r3, r3, #1
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00b      	beq.n	800c8a2 <HAL_UART_IRQHandler+0xae>
 800c88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c88e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c89a:	f043 0201 	orr.w	r2, r3, #1
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8a6:	f003 0304 	and.w	r3, r3, #4
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00b      	beq.n	800c8c6 <HAL_UART_IRQHandler+0xd2>
 800c8ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d005      	beq.n	800c8c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8be:	f043 0202 	orr.w	r2, r3, #2
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00b      	beq.n	800c8ea <HAL_UART_IRQHandler+0xf6>
 800c8d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8e2:	f043 0204 	orr.w	r2, r3, #4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ee:	f003 0308 	and.w	r3, r3, #8
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d011      	beq.n	800c91a <HAL_UART_IRQHandler+0x126>
 800c8f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d105      	bne.n	800c90e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c912:	f043 0208 	orr.w	r2, r3, #8
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 81f2 	beq.w	800cd08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c928:	f003 0320 	and.w	r3, r3, #32
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d008      	beq.n	800c942 <HAL_UART_IRQHandler+0x14e>
 800c930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fb27 	bl	800cf90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	bf14      	ite	ne
 800c950:	2301      	movne	r3, #1
 800c952:	2300      	moveq	r3, #0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b00      	cmp	r3, #0
 800c964:	d103      	bne.n	800c96e <HAL_UART_IRQHandler+0x17a>
 800c966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d04f      	beq.n	800ca0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa31 	bl	800cdd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d041      	beq.n	800ca06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3314      	adds	r3, #20
 800c988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c990:	e853 3f00 	ldrex	r3, [r3]
 800c994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c9ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c9be:	e841 2300 	strex	r3, r2, [r1]
 800c9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1d9      	bne.n	800c982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d013      	beq.n	800c9fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9da:	4a7e      	ldr	r2, [pc, #504]	@ (800cbd4 <HAL_UART_IRQHandler+0x3e0>)
 800c9dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fd f848 	bl	8009a78 <HAL_DMA_Abort_IT>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d016      	beq.n	800ca1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	e00e      	b.n	800ca1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f99c 	bl	800cd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca04:	e00a      	b.n	800ca1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f998 	bl	800cd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca0c:	e006      	b.n	800ca1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f994 	bl	800cd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ca1a:	e175      	b.n	800cd08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca1c:	bf00      	nop
    return;
 800ca1e:	e173      	b.n	800cd08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	f040 814f 	bne.w	800ccc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ca2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca2e:	f003 0310 	and.w	r3, r3, #16
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 8148 	beq.w	800ccc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ca38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca3c:	f003 0310 	and.w	r3, r3, #16
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 8141 	beq.w	800ccc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca46:	2300      	movs	r3, #0
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	60bb      	str	r3, [r7, #8]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	60bb      	str	r3, [r7, #8]
 800ca5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 80b6 	beq.w	800cbd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 8145 	beq.w	800cd0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ca86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	f080 813e 	bcs.w	800cd0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	2b20      	cmp	r3, #32
 800caa0:	f000 8088 	beq.w	800cbb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	330c      	adds	r3, #12
 800caaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800caba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cabe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cac2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	330c      	adds	r3, #12
 800cacc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cad0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cadc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cae0:	e841 2300 	strex	r3, r2, [r1]
 800cae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d1d9      	bne.n	800caa4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3314      	adds	r3, #20
 800caf6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cafa:	e853 3f00 	ldrex	r3, [r3]
 800cafe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cb00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb02:	f023 0301 	bic.w	r3, r3, #1
 800cb06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3314      	adds	r3, #20
 800cb10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb14:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cb18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cb1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cb20:	e841 2300 	strex	r3, r2, [r1]
 800cb24:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cb26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e1      	bne.n	800caf0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3314      	adds	r3, #20
 800cb32:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb36:	e853 3f00 	ldrex	r3, [r3]
 800cb3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cb3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cb50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cb52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cb5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e3      	bne.n	800cb2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	330c      	adds	r3, #12
 800cb78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb7c:	e853 3f00 	ldrex	r3, [r3]
 800cb80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb84:	f023 0310 	bic.w	r3, r3, #16
 800cb88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	330c      	adds	r3, #12
 800cb92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cb96:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cb98:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e3      	bne.n	800cb72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fc ff27 	bl	8009a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8bf 	bl	800cd4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbd0:	e09c      	b.n	800cd0c <HAL_UART_IRQHandler+0x518>
 800cbd2:	bf00      	nop
 800cbd4:	0800ce9b 	.word	0x0800ce9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 808e 	beq.w	800cd10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cbf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 8089 	beq.w	800cd10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	330c      	adds	r3, #12
 800cc04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc08:	e853 3f00 	ldrex	r3, [r3]
 800cc0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cc22:	647a      	str	r2, [r7, #68]	@ 0x44
 800cc24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc2a:	e841 2300 	strex	r3, r2, [r1]
 800cc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e3      	bne.n	800cbfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3314      	adds	r3, #20
 800cc3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc40:	e853 3f00 	ldrex	r3, [r3]
 800cc44:	623b      	str	r3, [r7, #32]
   return(result);
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	f023 0301 	bic.w	r3, r3, #1
 800cc4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3314      	adds	r3, #20
 800cc56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cc5a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc62:	e841 2300 	strex	r3, r2, [r1]
 800cc66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1e3      	bne.n	800cc36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	330c      	adds	r3, #12
 800cc82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f023 0310 	bic.w	r3, r3, #16
 800cc92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	330c      	adds	r3, #12
 800cc9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cca0:	61fa      	str	r2, [r7, #28]
 800cca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	69b9      	ldr	r1, [r7, #24]
 800cca6:	69fa      	ldr	r2, [r7, #28]
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	617b      	str	r3, [r7, #20]
   return(result);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e3      	bne.n	800cc7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f844 	bl	800cd4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ccc6:	e023      	b.n	800cd10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ccc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d009      	beq.n	800cce8 <HAL_UART_IRQHandler+0x4f4>
 800ccd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f8ee 	bl	800cec2 <UART_Transmit_IT>
    return;
 800cce6:	e014      	b.n	800cd12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00e      	beq.n	800cd12 <HAL_UART_IRQHandler+0x51e>
 800ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d008      	beq.n	800cd12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f92d 	bl	800cf60 <UART_EndTransmit_IT>
    return;
 800cd06:	e004      	b.n	800cd12 <HAL_UART_IRQHandler+0x51e>
    return;
 800cd08:	bf00      	nop
 800cd0a:	e002      	b.n	800cd12 <HAL_UART_IRQHandler+0x51e>
      return;
 800cd0c:	bf00      	nop
 800cd0e:	e000      	b.n	800cd12 <HAL_UART_IRQHandler+0x51e>
      return;
 800cd10:	bf00      	nop
  }
}
 800cd12:	37e8      	adds	r7, #232	@ 0xe8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bc80      	pop	{r7}
 800cd28:	4770      	bx	lr

0800cd2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bc80      	pop	{r7}
 800cd3a:	4770      	bx	lr

0800cd3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd44:	bf00      	nop
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bc80      	pop	{r7}
 800cd4c:	4770      	bx	lr

0800cd4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	460b      	mov	r3, r1
 800cd58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bc80      	pop	{r7}
 800cd62:	4770      	bx	lr

0800cd64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	88fa      	ldrh	r2, [r7, #6]
 800cd7c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	88fa      	ldrh	r2, [r7, #6]
 800cd82:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2222      	movs	r2, #34	@ 0x22
 800cd8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d007      	beq.n	800cdaa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68da      	ldr	r2, [r3, #12]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cda8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	695a      	ldr	r2, [r3, #20]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f042 0201 	orr.w	r2, r2, #1
 800cdb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68da      	ldr	r2, [r3, #12]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f042 0220 	orr.w	r2, r2, #32
 800cdc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bc80      	pop	{r7}
 800cdd4:	4770      	bx	lr

0800cdd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b095      	sub	sp, #84	@ 0x54
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	330c      	adds	r3, #12
 800cde4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	330c      	adds	r3, #12
 800cdfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cdfe:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce06:	e841 2300 	strex	r3, r2, [r1]
 800ce0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e5      	bne.n	800cdde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3314      	adds	r3, #20
 800ce18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	e853 3f00 	ldrex	r3, [r3]
 800ce20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	f023 0301 	bic.w	r3, r3, #1
 800ce28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3314      	adds	r3, #20
 800ce30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce3a:	e841 2300 	strex	r3, r2, [r1]
 800ce3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e5      	bne.n	800ce12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d119      	bne.n	800ce82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	330c      	adds	r3, #12
 800ce54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	e853 3f00 	ldrex	r3, [r3]
 800ce5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f023 0310 	bic.w	r3, r3, #16
 800ce64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	330c      	adds	r3, #12
 800ce6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce6e:	61ba      	str	r2, [r7, #24]
 800ce70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6979      	ldr	r1, [r7, #20]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e5      	bne.n	800ce4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ce90:	bf00      	nop
 800ce92:	3754      	adds	r7, #84	@ 0x54
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bc80      	pop	{r7}
 800ce98:	4770      	bx	lr

0800ce9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff ff41 	bl	800cd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ceba:	bf00      	nop
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b21      	cmp	r3, #33	@ 0x21
 800ced4:	d13e      	bne.n	800cf54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cede:	d114      	bne.n	800cf0a <UART_Transmit_IT+0x48>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d110      	bne.n	800cf0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	461a      	mov	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cefc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	1c9a      	adds	r2, r3, #2
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	621a      	str	r2, [r3, #32]
 800cf08:	e008      	b.n	800cf1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	1c59      	adds	r1, r3, #1
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	6211      	str	r1, [r2, #32]
 800cf14:	781a      	ldrb	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	3b01      	subs	r3, #1
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10f      	bne.n	800cf50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68da      	ldr	r2, [r3, #12]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e000      	b.n	800cf56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cf54:	2302      	movs	r3, #2
  }
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bc80      	pop	{r7}
 800cf5e:	4770      	bx	lr

0800cf60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68da      	ldr	r2, [r3, #12]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2220      	movs	r2, #32
 800cf7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff fec9 	bl	800cd18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08c      	sub	sp, #48	@ 0x30
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b22      	cmp	r3, #34	@ 0x22
 800cfa2:	f040 80ae 	bne.w	800d102 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfae:	d117      	bne.n	800cfe0 <UART_Receive_IT+0x50>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d113      	bne.n	800cfe0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfd8:	1c9a      	adds	r2, r3, #2
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800cfde:	e026      	b.n	800d02e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cff2:	d007      	beq.n	800d004 <UART_Receive_IT+0x74>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <UART_Receive_IT+0x82>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	e008      	b.n	800d024 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d022:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d032:	b29b      	uxth	r3, r3
 800d034:	3b01      	subs	r3, #1
 800d036:	b29b      	uxth	r3, r3
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4619      	mov	r1, r3
 800d03c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d15d      	bne.n	800d0fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f022 0220 	bic.w	r2, r2, #32
 800d050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	695a      	ldr	r2, [r3, #20]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f022 0201 	bic.w	r2, r2, #1
 800d070:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2220      	movs	r2, #32
 800d076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d084:	2b01      	cmp	r3, #1
 800d086:	d135      	bne.n	800d0f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	330c      	adds	r3, #12
 800d094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	e853 3f00 	ldrex	r3, [r3]
 800d09c:	613b      	str	r3, [r7, #16]
   return(result);
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f023 0310 	bic.w	r3, r3, #16
 800d0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	330c      	adds	r3, #12
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ae:	623a      	str	r2, [r7, #32]
 800d0b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b2:	69f9      	ldr	r1, [r7, #28]
 800d0b4:	6a3a      	ldr	r2, [r7, #32]
 800d0b6:	e841 2300 	strex	r3, r2, [r1]
 800d0ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1e5      	bne.n	800d08e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0310 	and.w	r3, r3, #16
 800d0cc:	2b10      	cmp	r3, #16
 800d0ce:	d10a      	bne.n	800d0e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff fe2e 	bl	800cd4e <HAL_UARTEx_RxEventCallback>
 800d0f2:	e002      	b.n	800d0fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fe18 	bl	800cd2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e002      	b.n	800d104 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	e000      	b.n	800d104 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d102:	2302      	movs	r3, #2
  }
}
 800d104:	4618      	mov	r0, r3
 800d106:	3730      	adds	r7, #48	@ 0x30
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	430a      	orrs	r2, r1
 800d128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	695b      	ldr	r3, [r3, #20]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d146:	f023 030c 	bic.w	r3, r3, #12
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	6812      	ldr	r2, [r2, #0]
 800d14e:	68b9      	ldr	r1, [r7, #8]
 800d150:	430b      	orrs	r3, r1
 800d152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	695b      	ldr	r3, [r3, #20]
 800d15a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699a      	ldr	r2, [r3, #24]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	430a      	orrs	r2, r1
 800d168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a2c      	ldr	r2, [pc, #176]	@ (800d220 <UART_SetConfig+0x114>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d103      	bne.n	800d17c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d174:	f7fe fe30 	bl	800bdd8 <HAL_RCC_GetPCLK2Freq>
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	e002      	b.n	800d182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d17c:	f7fe fe18 	bl	800bdb0 <HAL_RCC_GetPCLK1Freq>
 800d180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009a      	lsls	r2, r3, #2
 800d18c:	441a      	add	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	fbb2 f3f3 	udiv	r3, r2, r3
 800d198:	4a22      	ldr	r2, [pc, #136]	@ (800d224 <UART_SetConfig+0x118>)
 800d19a:	fba2 2303 	umull	r2, r3, r2, r3
 800d19e:	095b      	lsrs	r3, r3, #5
 800d1a0:	0119      	lsls	r1, r3, #4
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009a      	lsls	r2, r3, #2
 800d1ac:	441a      	add	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d224 <UART_SetConfig+0x118>)
 800d1ba:	fba3 0302 	umull	r0, r3, r3, r2
 800d1be:	095b      	lsrs	r3, r3, #5
 800d1c0:	2064      	movs	r0, #100	@ 0x64
 800d1c2:	fb00 f303 	mul.w	r3, r0, r3
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	011b      	lsls	r3, r3, #4
 800d1ca:	3332      	adds	r3, #50	@ 0x32
 800d1cc:	4a15      	ldr	r2, [pc, #84]	@ (800d224 <UART_SetConfig+0x118>)
 800d1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d2:	095b      	lsrs	r3, r3, #5
 800d1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1d8:	4419      	add	r1, r3
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	009a      	lsls	r2, r3, #2
 800d1e4:	441a      	add	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800d1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d224 <UART_SetConfig+0x118>)
 800d1f2:	fba3 0302 	umull	r0, r3, r3, r2
 800d1f6:	095b      	lsrs	r3, r3, #5
 800d1f8:	2064      	movs	r0, #100	@ 0x64
 800d1fa:	fb00 f303 	mul.w	r3, r0, r3
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	3332      	adds	r3, #50	@ 0x32
 800d204:	4a07      	ldr	r2, [pc, #28]	@ (800d224 <UART_SetConfig+0x118>)
 800d206:	fba2 2303 	umull	r2, r3, r2, r3
 800d20a:	095b      	lsrs	r3, r3, #5
 800d20c:	f003 020f 	and.w	r2, r3, #15
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	440a      	add	r2, r1
 800d216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d218:	bf00      	nop
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	40013800 	.word	0x40013800
 800d224:	51eb851f 	.word	0x51eb851f

0800d228 <__itoa>:
 800d228:	1e93      	subs	r3, r2, #2
 800d22a:	2b22      	cmp	r3, #34	@ 0x22
 800d22c:	b510      	push	{r4, lr}
 800d22e:	460c      	mov	r4, r1
 800d230:	d904      	bls.n	800d23c <__itoa+0x14>
 800d232:	2300      	movs	r3, #0
 800d234:	461c      	mov	r4, r3
 800d236:	700b      	strb	r3, [r1, #0]
 800d238:	4620      	mov	r0, r4
 800d23a:	bd10      	pop	{r4, pc}
 800d23c:	2a0a      	cmp	r2, #10
 800d23e:	d109      	bne.n	800d254 <__itoa+0x2c>
 800d240:	2800      	cmp	r0, #0
 800d242:	da07      	bge.n	800d254 <__itoa+0x2c>
 800d244:	232d      	movs	r3, #45	@ 0x2d
 800d246:	700b      	strb	r3, [r1, #0]
 800d248:	2101      	movs	r1, #1
 800d24a:	4240      	negs	r0, r0
 800d24c:	4421      	add	r1, r4
 800d24e:	f000 f8b3 	bl	800d3b8 <__utoa>
 800d252:	e7f1      	b.n	800d238 <__itoa+0x10>
 800d254:	2100      	movs	r1, #0
 800d256:	e7f9      	b.n	800d24c <__itoa+0x24>

0800d258 <itoa>:
 800d258:	f7ff bfe6 	b.w	800d228 <__itoa>

0800d25c <sbrk_aligned>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4e0f      	ldr	r6, [pc, #60]	@ (800d29c <sbrk_aligned+0x40>)
 800d260:	460c      	mov	r4, r1
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	4605      	mov	r5, r0
 800d266:	b911      	cbnz	r1, 800d26e <sbrk_aligned+0x12>
 800d268:	f000 f936 	bl	800d4d8 <_sbrk_r>
 800d26c:	6030      	str	r0, [r6, #0]
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f000 f931 	bl	800d4d8 <_sbrk_r>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d103      	bne.n	800d282 <sbrk_aligned+0x26>
 800d27a:	f04f 34ff 	mov.w	r4, #4294967295
 800d27e:	4620      	mov	r0, r4
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	1cc4      	adds	r4, r0, #3
 800d284:	f024 0403 	bic.w	r4, r4, #3
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d0f8      	beq.n	800d27e <sbrk_aligned+0x22>
 800d28c:	1a21      	subs	r1, r4, r0
 800d28e:	4628      	mov	r0, r5
 800d290:	f000 f922 	bl	800d4d8 <_sbrk_r>
 800d294:	3001      	adds	r0, #1
 800d296:	d1f2      	bne.n	800d27e <sbrk_aligned+0x22>
 800d298:	e7ef      	b.n	800d27a <sbrk_aligned+0x1e>
 800d29a:	bf00      	nop
 800d29c:	20001b24 	.word	0x20001b24

0800d2a0 <_malloc_r>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	1ccd      	adds	r5, r1, #3
 800d2a6:	f025 0503 	bic.w	r5, r5, #3
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2d0c      	cmp	r5, #12
 800d2ae:	bf38      	it	cc
 800d2b0:	250c      	movcc	r5, #12
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	db01      	blt.n	800d2bc <_malloc_r+0x1c>
 800d2b8:	42a9      	cmp	r1, r5
 800d2ba:	d904      	bls.n	800d2c6 <_malloc_r+0x26>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	6033      	str	r3, [r6, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d39c <_malloc_r+0xfc>
 800d2ca:	f000 f869 	bl	800d3a0 <__malloc_lock>
 800d2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	bb44      	cbnz	r4, 800d328 <_malloc_r+0x88>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffbf 	bl	800d25c <sbrk_aligned>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	d158      	bne.n	800d396 <_malloc_r+0xf6>
 800d2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2e8:	4627      	mov	r7, r4
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	d143      	bne.n	800d376 <_malloc_r+0xd6>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	d04b      	beq.n	800d38a <_malloc_r+0xea>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	eb04 0903 	add.w	r9, r4, r3
 800d2fc:	f000 f8ec 	bl	800d4d8 <_sbrk_r>
 800d300:	4581      	cmp	r9, r0
 800d302:	d142      	bne.n	800d38a <_malloc_r+0xea>
 800d304:	6821      	ldr	r1, [r4, #0]
 800d306:	4630      	mov	r0, r6
 800d308:	1a6d      	subs	r5, r5, r1
 800d30a:	4629      	mov	r1, r5
 800d30c:	f7ff ffa6 	bl	800d25c <sbrk_aligned>
 800d310:	3001      	adds	r0, #1
 800d312:	d03a      	beq.n	800d38a <_malloc_r+0xea>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	442b      	add	r3, r5
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	f8d8 3000 	ldr.w	r3, [r8]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	bb62      	cbnz	r2, 800d37c <_malloc_r+0xdc>
 800d322:	f8c8 7000 	str.w	r7, [r8]
 800d326:	e00f      	b.n	800d348 <_malloc_r+0xa8>
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	1b52      	subs	r2, r2, r5
 800d32c:	d420      	bmi.n	800d370 <_malloc_r+0xd0>
 800d32e:	2a0b      	cmp	r2, #11
 800d330:	d917      	bls.n	800d362 <_malloc_r+0xc2>
 800d332:	1961      	adds	r1, r4, r5
 800d334:	42a3      	cmp	r3, r4
 800d336:	6025      	str	r5, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	6059      	strne	r1, [r3, #4]
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	bf08      	it	eq
 800d340:	f8c8 1000 	streq.w	r1, [r8]
 800d344:	5162      	str	r2, [r4, r5]
 800d346:	604b      	str	r3, [r1, #4]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f82f 	bl	800d3ac <__malloc_unlock>
 800d34e:	f104 000b 	add.w	r0, r4, #11
 800d352:	1d23      	adds	r3, r4, #4
 800d354:	f020 0007 	bic.w	r0, r0, #7
 800d358:	1ac2      	subs	r2, r0, r3
 800d35a:	bf1c      	itt	ne
 800d35c:	1a1b      	subne	r3, r3, r0
 800d35e:	50a3      	strne	r3, [r4, r2]
 800d360:	e7af      	b.n	800d2c2 <_malloc_r+0x22>
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	42a3      	cmp	r3, r4
 800d366:	bf0c      	ite	eq
 800d368:	f8c8 2000 	streq.w	r2, [r8]
 800d36c:	605a      	strne	r2, [r3, #4]
 800d36e:	e7eb      	b.n	800d348 <_malloc_r+0xa8>
 800d370:	4623      	mov	r3, r4
 800d372:	6864      	ldr	r4, [r4, #4]
 800d374:	e7ae      	b.n	800d2d4 <_malloc_r+0x34>
 800d376:	463c      	mov	r4, r7
 800d378:	687f      	ldr	r7, [r7, #4]
 800d37a:	e7b6      	b.n	800d2ea <_malloc_r+0x4a>
 800d37c:	461a      	mov	r2, r3
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	42a3      	cmp	r3, r4
 800d382:	d1fb      	bne.n	800d37c <_malloc_r+0xdc>
 800d384:	2300      	movs	r3, #0
 800d386:	6053      	str	r3, [r2, #4]
 800d388:	e7de      	b.n	800d348 <_malloc_r+0xa8>
 800d38a:	230c      	movs	r3, #12
 800d38c:	4630      	mov	r0, r6
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	f000 f80c 	bl	800d3ac <__malloc_unlock>
 800d394:	e794      	b.n	800d2c0 <_malloc_r+0x20>
 800d396:	6005      	str	r5, [r0, #0]
 800d398:	e7d6      	b.n	800d348 <_malloc_r+0xa8>
 800d39a:	bf00      	nop
 800d39c:	20001b28 	.word	0x20001b28

0800d3a0 <__malloc_lock>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	@ (800d3a8 <__malloc_lock+0x8>)
 800d3a2:	f000 b8d3 	b.w	800d54c <__retarget_lock_acquire_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	20001c68 	.word	0x20001c68

0800d3ac <__malloc_unlock>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	@ (800d3b4 <__malloc_unlock+0x8>)
 800d3ae:	f000 b8ce 	b.w	800d54e <__retarget_lock_release_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	20001c68 	.word	0x20001c68

0800d3b8 <__utoa>:
 800d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ba:	b08b      	sub	sp, #44	@ 0x2c
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	466e      	mov	r6, sp
 800d3c2:	4c1d      	ldr	r4, [pc, #116]	@ (800d438 <__utoa+0x80>)
 800d3c4:	f104 0c20 	add.w	ip, r4, #32
 800d3c8:	4637      	mov	r7, r6
 800d3ca:	6820      	ldr	r0, [r4, #0]
 800d3cc:	6861      	ldr	r1, [r4, #4]
 800d3ce:	3408      	adds	r4, #8
 800d3d0:	c703      	stmia	r7!, {r0, r1}
 800d3d2:	4564      	cmp	r4, ip
 800d3d4:	463e      	mov	r6, r7
 800d3d6:	d1f7      	bne.n	800d3c8 <__utoa+0x10>
 800d3d8:	7921      	ldrb	r1, [r4, #4]
 800d3da:	6820      	ldr	r0, [r4, #0]
 800d3dc:	7139      	strb	r1, [r7, #4]
 800d3de:	1e91      	subs	r1, r2, #2
 800d3e0:	2922      	cmp	r1, #34	@ 0x22
 800d3e2:	6038      	str	r0, [r7, #0]
 800d3e4:	f04f 0100 	mov.w	r1, #0
 800d3e8:	d904      	bls.n	800d3f4 <__utoa+0x3c>
 800d3ea:	7019      	strb	r1, [r3, #0]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	b00b      	add	sp, #44	@ 0x2c
 800d3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f4:	1e58      	subs	r0, r3, #1
 800d3f6:	4684      	mov	ip, r0
 800d3f8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d3fc:	fb02 5617 	mls	r6, r2, r7, r5
 800d400:	3628      	adds	r6, #40	@ 0x28
 800d402:	446e      	add	r6, sp
 800d404:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d408:	460c      	mov	r4, r1
 800d40a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d40e:	462e      	mov	r6, r5
 800d410:	42b2      	cmp	r2, r6
 800d412:	463d      	mov	r5, r7
 800d414:	f101 0101 	add.w	r1, r1, #1
 800d418:	d9ee      	bls.n	800d3f8 <__utoa+0x40>
 800d41a:	2200      	movs	r2, #0
 800d41c:	545a      	strb	r2, [r3, r1]
 800d41e:	1919      	adds	r1, r3, r4
 800d420:	1aa5      	subs	r5, r4, r2
 800d422:	42aa      	cmp	r2, r5
 800d424:	dae3      	bge.n	800d3ee <__utoa+0x36>
 800d426:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d42a:	780e      	ldrb	r6, [r1, #0]
 800d42c:	3201      	adds	r2, #1
 800d42e:	7006      	strb	r6, [r0, #0]
 800d430:	f801 5901 	strb.w	r5, [r1], #-1
 800d434:	e7f4      	b.n	800d420 <__utoa+0x68>
 800d436:	bf00      	nop
 800d438:	0800e92a 	.word	0x0800e92a

0800d43c <siprintf>:
 800d43c:	b40e      	push	{r1, r2, r3}
 800d43e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d442:	b500      	push	{lr}
 800d444:	b09c      	sub	sp, #112	@ 0x70
 800d446:	ab1d      	add	r3, sp, #116	@ 0x74
 800d448:	9002      	str	r0, [sp, #8]
 800d44a:	9006      	str	r0, [sp, #24]
 800d44c:	9107      	str	r1, [sp, #28]
 800d44e:	9104      	str	r1, [sp, #16]
 800d450:	4808      	ldr	r0, [pc, #32]	@ (800d474 <siprintf+0x38>)
 800d452:	4909      	ldr	r1, [pc, #36]	@ (800d478 <siprintf+0x3c>)
 800d454:	f853 2b04 	ldr.w	r2, [r3], #4
 800d458:	9105      	str	r1, [sp, #20]
 800d45a:	6800      	ldr	r0, [r0, #0]
 800d45c:	a902      	add	r1, sp, #8
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	f000 f91a 	bl	800d698 <_svfiprintf_r>
 800d464:	2200      	movs	r2, #0
 800d466:	9b02      	ldr	r3, [sp, #8]
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	b01c      	add	sp, #112	@ 0x70
 800d46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d470:	b003      	add	sp, #12
 800d472:	4770      	bx	lr
 800d474:	20000f80 	.word	0x20000f80
 800d478:	ffff0208 	.word	0xffff0208

0800d47c <memset>:
 800d47c:	4603      	mov	r3, r0
 800d47e:	4402      	add	r2, r0
 800d480:	4293      	cmp	r3, r2
 800d482:	d100      	bne.n	800d486 <memset+0xa>
 800d484:	4770      	bx	lr
 800d486:	f803 1b01 	strb.w	r1, [r3], #1
 800d48a:	e7f9      	b.n	800d480 <memset+0x4>

0800d48c <strcat>:
 800d48c:	4602      	mov	r2, r0
 800d48e:	b510      	push	{r4, lr}
 800d490:	7814      	ldrb	r4, [r2, #0]
 800d492:	4613      	mov	r3, r2
 800d494:	3201      	adds	r2, #1
 800d496:	2c00      	cmp	r4, #0
 800d498:	d1fa      	bne.n	800d490 <strcat+0x4>
 800d49a:	3b01      	subs	r3, #1
 800d49c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4a4:	2a00      	cmp	r2, #0
 800d4a6:	d1f9      	bne.n	800d49c <strcat+0x10>
 800d4a8:	bd10      	pop	{r4, pc}

0800d4aa <strstr>:
 800d4aa:	780a      	ldrb	r2, [r1, #0]
 800d4ac:	b570      	push	{r4, r5, r6, lr}
 800d4ae:	b96a      	cbnz	r2, 800d4cc <strstr+0x22>
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d109      	bne.n	800d4ca <strstr+0x20>
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d0f6      	beq.n	800d4b0 <strstr+0x6>
 800d4c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d4c6:	429e      	cmp	r6, r3
 800d4c8:	d0f7      	beq.n	800d4ba <strstr+0x10>
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	7803      	ldrb	r3, [r0, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1ef      	bne.n	800d4b2 <strstr+0x8>
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	e7ec      	b.n	800d4b0 <strstr+0x6>
	...

0800d4d8 <_sbrk_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	2300      	movs	r3, #0
 800d4dc:	4d05      	ldr	r5, [pc, #20]	@ (800d4f4 <_sbrk_r+0x1c>)
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	602b      	str	r3, [r5, #0]
 800d4e4:	f7fb ff9c 	bl	8009420 <_sbrk>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_sbrk_r+0x1a>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_sbrk_r+0x1a>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	20001c64 	.word	0x20001c64

0800d4f8 <__errno>:
 800d4f8:	4b01      	ldr	r3, [pc, #4]	@ (800d500 <__errno+0x8>)
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	20000f80 	.word	0x20000f80

0800d504 <__libc_init_array>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	2600      	movs	r6, #0
 800d508:	4d0c      	ldr	r5, [pc, #48]	@ (800d53c <__libc_init_array+0x38>)
 800d50a:	4c0d      	ldr	r4, [pc, #52]	@ (800d540 <__libc_init_array+0x3c>)
 800d50c:	1b64      	subs	r4, r4, r5
 800d50e:	10a4      	asrs	r4, r4, #2
 800d510:	42a6      	cmp	r6, r4
 800d512:	d109      	bne.n	800d528 <__libc_init_array+0x24>
 800d514:	f000 fbba 	bl	800dc8c <_init>
 800d518:	2600      	movs	r6, #0
 800d51a:	4d0a      	ldr	r5, [pc, #40]	@ (800d544 <__libc_init_array+0x40>)
 800d51c:	4c0a      	ldr	r4, [pc, #40]	@ (800d548 <__libc_init_array+0x44>)
 800d51e:	1b64      	subs	r4, r4, r5
 800d520:	10a4      	asrs	r4, r4, #2
 800d522:	42a6      	cmp	r6, r4
 800d524:	d105      	bne.n	800d532 <__libc_init_array+0x2e>
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52c:	4798      	blx	r3
 800d52e:	3601      	adds	r6, #1
 800d530:	e7ee      	b.n	800d510 <__libc_init_array+0xc>
 800d532:	f855 3b04 	ldr.w	r3, [r5], #4
 800d536:	4798      	blx	r3
 800d538:	3601      	adds	r6, #1
 800d53a:	e7f2      	b.n	800d522 <__libc_init_array+0x1e>
 800d53c:	0800e98c 	.word	0x0800e98c
 800d540:	0800e98c 	.word	0x0800e98c
 800d544:	0800e98c 	.word	0x0800e98c
 800d548:	0800e990 	.word	0x0800e990

0800d54c <__retarget_lock_acquire_recursive>:
 800d54c:	4770      	bx	lr

0800d54e <__retarget_lock_release_recursive>:
 800d54e:	4770      	bx	lr

0800d550 <_free_r>:
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	4605      	mov	r5, r0
 800d554:	2900      	cmp	r1, #0
 800d556:	d040      	beq.n	800d5da <_free_r+0x8a>
 800d558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55c:	1f0c      	subs	r4, r1, #4
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bfb8      	it	lt
 800d562:	18e4      	addlt	r4, r4, r3
 800d564:	f7ff ff1c 	bl	800d3a0 <__malloc_lock>
 800d568:	4a1c      	ldr	r2, [pc, #112]	@ (800d5dc <_free_r+0x8c>)
 800d56a:	6813      	ldr	r3, [r2, #0]
 800d56c:	b933      	cbnz	r3, 800d57c <_free_r+0x2c>
 800d56e:	6063      	str	r3, [r4, #4]
 800d570:	6014      	str	r4, [r2, #0]
 800d572:	4628      	mov	r0, r5
 800d574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d578:	f7ff bf18 	b.w	800d3ac <__malloc_unlock>
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d908      	bls.n	800d592 <_free_r+0x42>
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	1821      	adds	r1, r4, r0
 800d584:	428b      	cmp	r3, r1
 800d586:	bf01      	itttt	eq
 800d588:	6819      	ldreq	r1, [r3, #0]
 800d58a:	685b      	ldreq	r3, [r3, #4]
 800d58c:	1809      	addeq	r1, r1, r0
 800d58e:	6021      	streq	r1, [r4, #0]
 800d590:	e7ed      	b.n	800d56e <_free_r+0x1e>
 800d592:	461a      	mov	r2, r3
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	b10b      	cbz	r3, 800d59c <_free_r+0x4c>
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d9fa      	bls.n	800d592 <_free_r+0x42>
 800d59c:	6811      	ldr	r1, [r2, #0]
 800d59e:	1850      	adds	r0, r2, r1
 800d5a0:	42a0      	cmp	r0, r4
 800d5a2:	d10b      	bne.n	800d5bc <_free_r+0x6c>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	4401      	add	r1, r0
 800d5a8:	1850      	adds	r0, r2, r1
 800d5aa:	4283      	cmp	r3, r0
 800d5ac:	6011      	str	r1, [r2, #0]
 800d5ae:	d1e0      	bne.n	800d572 <_free_r+0x22>
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	4408      	add	r0, r1
 800d5b6:	6010      	str	r0, [r2, #0]
 800d5b8:	6053      	str	r3, [r2, #4]
 800d5ba:	e7da      	b.n	800d572 <_free_r+0x22>
 800d5bc:	d902      	bls.n	800d5c4 <_free_r+0x74>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	e7d6      	b.n	800d572 <_free_r+0x22>
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	1821      	adds	r1, r4, r0
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	bf01      	itttt	eq
 800d5cc:	6819      	ldreq	r1, [r3, #0]
 800d5ce:	685b      	ldreq	r3, [r3, #4]
 800d5d0:	1809      	addeq	r1, r1, r0
 800d5d2:	6021      	streq	r1, [r4, #0]
 800d5d4:	6063      	str	r3, [r4, #4]
 800d5d6:	6054      	str	r4, [r2, #4]
 800d5d8:	e7cb      	b.n	800d572 <_free_r+0x22>
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20001b28 	.word	0x20001b28

0800d5e0 <__ssputs_r>:
 800d5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e4:	461f      	mov	r7, r3
 800d5e6:	688e      	ldr	r6, [r1, #8]
 800d5e8:	4682      	mov	sl, r0
 800d5ea:	42be      	cmp	r6, r7
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	4690      	mov	r8, r2
 800d5f0:	680b      	ldr	r3, [r1, #0]
 800d5f2:	d82d      	bhi.n	800d650 <__ssputs_r+0x70>
 800d5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5fc:	d026      	beq.n	800d64c <__ssputs_r+0x6c>
 800d5fe:	6965      	ldr	r5, [r4, #20]
 800d600:	6909      	ldr	r1, [r1, #16]
 800d602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d606:	eba3 0901 	sub.w	r9, r3, r1
 800d60a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d60e:	1c7b      	adds	r3, r7, #1
 800d610:	444b      	add	r3, r9
 800d612:	106d      	asrs	r5, r5, #1
 800d614:	429d      	cmp	r5, r3
 800d616:	bf38      	it	cc
 800d618:	461d      	movcc	r5, r3
 800d61a:	0553      	lsls	r3, r2, #21
 800d61c:	d527      	bpl.n	800d66e <__ssputs_r+0x8e>
 800d61e:	4629      	mov	r1, r5
 800d620:	f7ff fe3e 	bl	800d2a0 <_malloc_r>
 800d624:	4606      	mov	r6, r0
 800d626:	b360      	cbz	r0, 800d682 <__ssputs_r+0xa2>
 800d628:	464a      	mov	r2, r9
 800d62a:	6921      	ldr	r1, [r4, #16]
 800d62c:	f000 faea 	bl	800dc04 <memcpy>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	6126      	str	r6, [r4, #16]
 800d63e:	444e      	add	r6, r9
 800d640:	6026      	str	r6, [r4, #0]
 800d642:	463e      	mov	r6, r7
 800d644:	6165      	str	r5, [r4, #20]
 800d646:	eba5 0509 	sub.w	r5, r5, r9
 800d64a:	60a5      	str	r5, [r4, #8]
 800d64c:	42be      	cmp	r6, r7
 800d64e:	d900      	bls.n	800d652 <__ssputs_r+0x72>
 800d650:	463e      	mov	r6, r7
 800d652:	4632      	mov	r2, r6
 800d654:	4641      	mov	r1, r8
 800d656:	6820      	ldr	r0, [r4, #0]
 800d658:	f000 faac 	bl	800dbb4 <memmove>
 800d65c:	2000      	movs	r0, #0
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	1b9b      	subs	r3, r3, r6
 800d662:	60a3      	str	r3, [r4, #8]
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	4433      	add	r3, r6
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	462a      	mov	r2, r5
 800d670:	f000 fad6 	bl	800dc20 <_realloc_r>
 800d674:	4606      	mov	r6, r0
 800d676:	2800      	cmp	r0, #0
 800d678:	d1e0      	bne.n	800d63c <__ssputs_r+0x5c>
 800d67a:	4650      	mov	r0, sl
 800d67c:	6921      	ldr	r1, [r4, #16]
 800d67e:	f7ff ff67 	bl	800d550 <_free_r>
 800d682:	230c      	movs	r3, #12
 800d684:	f8ca 3000 	str.w	r3, [sl]
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f04f 30ff 	mov.w	r0, #4294967295
 800d68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	e7e9      	b.n	800d66a <__ssputs_r+0x8a>
	...

0800d698 <_svfiprintf_r>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	4698      	mov	r8, r3
 800d69e:	898b      	ldrh	r3, [r1, #12]
 800d6a0:	4607      	mov	r7, r0
 800d6a2:	061b      	lsls	r3, r3, #24
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	4614      	mov	r4, r2
 800d6a8:	b09d      	sub	sp, #116	@ 0x74
 800d6aa:	d510      	bpl.n	800d6ce <_svfiprintf_r+0x36>
 800d6ac:	690b      	ldr	r3, [r1, #16]
 800d6ae:	b973      	cbnz	r3, 800d6ce <_svfiprintf_r+0x36>
 800d6b0:	2140      	movs	r1, #64	@ 0x40
 800d6b2:	f7ff fdf5 	bl	800d2a0 <_malloc_r>
 800d6b6:	6028      	str	r0, [r5, #0]
 800d6b8:	6128      	str	r0, [r5, #16]
 800d6ba:	b930      	cbnz	r0, 800d6ca <_svfiprintf_r+0x32>
 800d6bc:	230c      	movs	r3, #12
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c4:	b01d      	add	sp, #116	@ 0x74
 800d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ca:	2340      	movs	r3, #64	@ 0x40
 800d6cc:	616b      	str	r3, [r5, #20]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d2:	2320      	movs	r3, #32
 800d6d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6d8:	2330      	movs	r3, #48	@ 0x30
 800d6da:	f04f 0901 	mov.w	r9, #1
 800d6de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d87c <_svfiprintf_r+0x1e4>
 800d6e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	469a      	mov	sl, r3
 800d6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f2:	b10a      	cbz	r2, 800d6f8 <_svfiprintf_r+0x60>
 800d6f4:	2a25      	cmp	r2, #37	@ 0x25
 800d6f6:	d1f9      	bne.n	800d6ec <_svfiprintf_r+0x54>
 800d6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fc:	d00b      	beq.n	800d716 <_svfiprintf_r+0x7e>
 800d6fe:	465b      	mov	r3, fp
 800d700:	4622      	mov	r2, r4
 800d702:	4629      	mov	r1, r5
 800d704:	4638      	mov	r0, r7
 800d706:	f7ff ff6b 	bl	800d5e0 <__ssputs_r>
 800d70a:	3001      	adds	r0, #1
 800d70c:	f000 80a7 	beq.w	800d85e <_svfiprintf_r+0x1c6>
 800d710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d712:	445a      	add	r2, fp
 800d714:	9209      	str	r2, [sp, #36]	@ 0x24
 800d716:	f89a 3000 	ldrb.w	r3, [sl]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 809f 	beq.w	800d85e <_svfiprintf_r+0x1c6>
 800d720:	2300      	movs	r3, #0
 800d722:	f04f 32ff 	mov.w	r2, #4294967295
 800d726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72a:	f10a 0a01 	add.w	sl, sl, #1
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	9307      	str	r3, [sp, #28]
 800d732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d736:	931a      	str	r3, [sp, #104]	@ 0x68
 800d738:	4654      	mov	r4, sl
 800d73a:	2205      	movs	r2, #5
 800d73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d740:	484e      	ldr	r0, [pc, #312]	@ (800d87c <_svfiprintf_r+0x1e4>)
 800d742:	f000 fa51 	bl	800dbe8 <memchr>
 800d746:	9a04      	ldr	r2, [sp, #16]
 800d748:	b9d8      	cbnz	r0, 800d782 <_svfiprintf_r+0xea>
 800d74a:	06d0      	lsls	r0, r2, #27
 800d74c:	bf44      	itt	mi
 800d74e:	2320      	movmi	r3, #32
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d754:	0711      	lsls	r1, r2, #28
 800d756:	bf44      	itt	mi
 800d758:	232b      	movmi	r3, #43	@ 0x2b
 800d75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d75e:	f89a 3000 	ldrb.w	r3, [sl]
 800d762:	2b2a      	cmp	r3, #42	@ 0x2a
 800d764:	d015      	beq.n	800d792 <_svfiprintf_r+0xfa>
 800d766:	4654      	mov	r4, sl
 800d768:	2000      	movs	r0, #0
 800d76a:	f04f 0c0a 	mov.w	ip, #10
 800d76e:	9a07      	ldr	r2, [sp, #28]
 800d770:	4621      	mov	r1, r4
 800d772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d776:	3b30      	subs	r3, #48	@ 0x30
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d94b      	bls.n	800d814 <_svfiprintf_r+0x17c>
 800d77c:	b1b0      	cbz	r0, 800d7ac <_svfiprintf_r+0x114>
 800d77e:	9207      	str	r2, [sp, #28]
 800d780:	e014      	b.n	800d7ac <_svfiprintf_r+0x114>
 800d782:	eba0 0308 	sub.w	r3, r0, r8
 800d786:	fa09 f303 	lsl.w	r3, r9, r3
 800d78a:	4313      	orrs	r3, r2
 800d78c:	46a2      	mov	sl, r4
 800d78e:	9304      	str	r3, [sp, #16]
 800d790:	e7d2      	b.n	800d738 <_svfiprintf_r+0xa0>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	1d19      	adds	r1, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9103      	str	r1, [sp, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bfbb      	ittet	lt
 800d79e:	425b      	neglt	r3, r3
 800d7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a4:	9307      	strge	r3, [sp, #28]
 800d7a6:	9307      	strlt	r3, [sp, #28]
 800d7a8:	bfb8      	it	lt
 800d7aa:	9204      	strlt	r2, [sp, #16]
 800d7ac:	7823      	ldrb	r3, [r4, #0]
 800d7ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7b0:	d10a      	bne.n	800d7c8 <_svfiprintf_r+0x130>
 800d7b2:	7863      	ldrb	r3, [r4, #1]
 800d7b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b6:	d132      	bne.n	800d81e <_svfiprintf_r+0x186>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	3402      	adds	r4, #2
 800d7bc:	1d1a      	adds	r2, r3, #4
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	9203      	str	r2, [sp, #12]
 800d7c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7c6:	9305      	str	r3, [sp, #20]
 800d7c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d880 <_svfiprintf_r+0x1e8>
 800d7cc:	2203      	movs	r2, #3
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	7821      	ldrb	r1, [r4, #0]
 800d7d2:	f000 fa09 	bl	800dbe8 <memchr>
 800d7d6:	b138      	cbz	r0, 800d7e8 <_svfiprintf_r+0x150>
 800d7d8:	2240      	movs	r2, #64	@ 0x40
 800d7da:	9b04      	ldr	r3, [sp, #16]
 800d7dc:	eba0 000a 	sub.w	r0, r0, sl
 800d7e0:	4082      	lsls	r2, r0
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	3401      	adds	r4, #1
 800d7e6:	9304      	str	r3, [sp, #16]
 800d7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ec:	2206      	movs	r2, #6
 800d7ee:	4825      	ldr	r0, [pc, #148]	@ (800d884 <_svfiprintf_r+0x1ec>)
 800d7f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7f4:	f000 f9f8 	bl	800dbe8 <memchr>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d036      	beq.n	800d86a <_svfiprintf_r+0x1d2>
 800d7fc:	4b22      	ldr	r3, [pc, #136]	@ (800d888 <_svfiprintf_r+0x1f0>)
 800d7fe:	bb1b      	cbnz	r3, 800d848 <_svfiprintf_r+0x1b0>
 800d800:	9b03      	ldr	r3, [sp, #12]
 800d802:	3307      	adds	r3, #7
 800d804:	f023 0307 	bic.w	r3, r3, #7
 800d808:	3308      	adds	r3, #8
 800d80a:	9303      	str	r3, [sp, #12]
 800d80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d80e:	4433      	add	r3, r6
 800d810:	9309      	str	r3, [sp, #36]	@ 0x24
 800d812:	e76a      	b.n	800d6ea <_svfiprintf_r+0x52>
 800d814:	460c      	mov	r4, r1
 800d816:	2001      	movs	r0, #1
 800d818:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81c:	e7a8      	b.n	800d770 <_svfiprintf_r+0xd8>
 800d81e:	2300      	movs	r3, #0
 800d820:	f04f 0c0a 	mov.w	ip, #10
 800d824:	4619      	mov	r1, r3
 800d826:	3401      	adds	r4, #1
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	4620      	mov	r0, r4
 800d82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d830:	3a30      	subs	r2, #48	@ 0x30
 800d832:	2a09      	cmp	r2, #9
 800d834:	d903      	bls.n	800d83e <_svfiprintf_r+0x1a6>
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0c6      	beq.n	800d7c8 <_svfiprintf_r+0x130>
 800d83a:	9105      	str	r1, [sp, #20]
 800d83c:	e7c4      	b.n	800d7c8 <_svfiprintf_r+0x130>
 800d83e:	4604      	mov	r4, r0
 800d840:	2301      	movs	r3, #1
 800d842:	fb0c 2101 	mla	r1, ip, r1, r2
 800d846:	e7f0      	b.n	800d82a <_svfiprintf_r+0x192>
 800d848:	ab03      	add	r3, sp, #12
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	462a      	mov	r2, r5
 800d84e:	4638      	mov	r0, r7
 800d850:	4b0e      	ldr	r3, [pc, #56]	@ (800d88c <_svfiprintf_r+0x1f4>)
 800d852:	a904      	add	r1, sp, #16
 800d854:	f3af 8000 	nop.w
 800d858:	1c42      	adds	r2, r0, #1
 800d85a:	4606      	mov	r6, r0
 800d85c:	d1d6      	bne.n	800d80c <_svfiprintf_r+0x174>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	065b      	lsls	r3, r3, #25
 800d862:	f53f af2d 	bmi.w	800d6c0 <_svfiprintf_r+0x28>
 800d866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d868:	e72c      	b.n	800d6c4 <_svfiprintf_r+0x2c>
 800d86a:	ab03      	add	r3, sp, #12
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	462a      	mov	r2, r5
 800d870:	4638      	mov	r0, r7
 800d872:	4b06      	ldr	r3, [pc, #24]	@ (800d88c <_svfiprintf_r+0x1f4>)
 800d874:	a904      	add	r1, sp, #16
 800d876:	f000 f87d 	bl	800d974 <_printf_i>
 800d87a:	e7ed      	b.n	800d858 <_svfiprintf_r+0x1c0>
 800d87c:	0800e94f 	.word	0x0800e94f
 800d880:	0800e955 	.word	0x0800e955
 800d884:	0800e959 	.word	0x0800e959
 800d888:	00000000 	.word	0x00000000
 800d88c:	0800d5e1 	.word	0x0800d5e1

0800d890 <_printf_common>:
 800d890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d894:	4616      	mov	r6, r2
 800d896:	4698      	mov	r8, r3
 800d898:	688a      	ldr	r2, [r1, #8]
 800d89a:	690b      	ldr	r3, [r1, #16]
 800d89c:	4607      	mov	r7, r0
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	bfb8      	it	lt
 800d8a2:	4613      	movlt	r3, r2
 800d8a4:	6033      	str	r3, [r6, #0]
 800d8a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8b0:	b10a      	cbz	r2, 800d8b6 <_printf_common+0x26>
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	6033      	str	r3, [r6, #0]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	0699      	lsls	r1, r3, #26
 800d8ba:	bf42      	ittt	mi
 800d8bc:	6833      	ldrmi	r3, [r6, #0]
 800d8be:	3302      	addmi	r3, #2
 800d8c0:	6033      	strmi	r3, [r6, #0]
 800d8c2:	6825      	ldr	r5, [r4, #0]
 800d8c4:	f015 0506 	ands.w	r5, r5, #6
 800d8c8:	d106      	bne.n	800d8d8 <_printf_common+0x48>
 800d8ca:	f104 0a19 	add.w	sl, r4, #25
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	6832      	ldr	r2, [r6, #0]
 800d8d2:	1a9b      	subs	r3, r3, r2
 800d8d4:	42ab      	cmp	r3, r5
 800d8d6:	dc2b      	bgt.n	800d930 <_printf_common+0xa0>
 800d8d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	3b00      	subs	r3, #0
 800d8e0:	bf18      	it	ne
 800d8e2:	2301      	movne	r3, #1
 800d8e4:	0692      	lsls	r2, r2, #26
 800d8e6:	d430      	bmi.n	800d94a <_printf_common+0xba>
 800d8e8:	4641      	mov	r1, r8
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8f0:	47c8      	blx	r9
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d023      	beq.n	800d93e <_printf_common+0xae>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	6922      	ldr	r2, [r4, #16]
 800d8fa:	f003 0306 	and.w	r3, r3, #6
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	bf14      	ite	ne
 800d902:	2500      	movne	r5, #0
 800d904:	6833      	ldreq	r3, [r6, #0]
 800d906:	f04f 0600 	mov.w	r6, #0
 800d90a:	bf08      	it	eq
 800d90c:	68e5      	ldreq	r5, [r4, #12]
 800d90e:	f104 041a 	add.w	r4, r4, #26
 800d912:	bf08      	it	eq
 800d914:	1aed      	subeq	r5, r5, r3
 800d916:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d91a:	bf08      	it	eq
 800d91c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d920:	4293      	cmp	r3, r2
 800d922:	bfc4      	itt	gt
 800d924:	1a9b      	subgt	r3, r3, r2
 800d926:	18ed      	addgt	r5, r5, r3
 800d928:	42b5      	cmp	r5, r6
 800d92a:	d11a      	bne.n	800d962 <_printf_common+0xd2>
 800d92c:	2000      	movs	r0, #0
 800d92e:	e008      	b.n	800d942 <_printf_common+0xb2>
 800d930:	2301      	movs	r3, #1
 800d932:	4652      	mov	r2, sl
 800d934:	4641      	mov	r1, r8
 800d936:	4638      	mov	r0, r7
 800d938:	47c8      	blx	r9
 800d93a:	3001      	adds	r0, #1
 800d93c:	d103      	bne.n	800d946 <_printf_common+0xb6>
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
 800d942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d946:	3501      	adds	r5, #1
 800d948:	e7c1      	b.n	800d8ce <_printf_common+0x3e>
 800d94a:	2030      	movs	r0, #48	@ 0x30
 800d94c:	18e1      	adds	r1, r4, r3
 800d94e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d958:	4422      	add	r2, r4
 800d95a:	3302      	adds	r3, #2
 800d95c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d960:	e7c2      	b.n	800d8e8 <_printf_common+0x58>
 800d962:	2301      	movs	r3, #1
 800d964:	4622      	mov	r2, r4
 800d966:	4641      	mov	r1, r8
 800d968:	4638      	mov	r0, r7
 800d96a:	47c8      	blx	r9
 800d96c:	3001      	adds	r0, #1
 800d96e:	d0e6      	beq.n	800d93e <_printf_common+0xae>
 800d970:	3601      	adds	r6, #1
 800d972:	e7d9      	b.n	800d928 <_printf_common+0x98>

0800d974 <_printf_i>:
 800d974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d978:	7e0f      	ldrb	r7, [r1, #24]
 800d97a:	4691      	mov	r9, r2
 800d97c:	2f78      	cmp	r7, #120	@ 0x78
 800d97e:	4680      	mov	r8, r0
 800d980:	460c      	mov	r4, r1
 800d982:	469a      	mov	sl, r3
 800d984:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d98a:	d807      	bhi.n	800d99c <_printf_i+0x28>
 800d98c:	2f62      	cmp	r7, #98	@ 0x62
 800d98e:	d80a      	bhi.n	800d9a6 <_printf_i+0x32>
 800d990:	2f00      	cmp	r7, #0
 800d992:	f000 80d3 	beq.w	800db3c <_printf_i+0x1c8>
 800d996:	2f58      	cmp	r7, #88	@ 0x58
 800d998:	f000 80ba 	beq.w	800db10 <_printf_i+0x19c>
 800d99c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9a4:	e03a      	b.n	800da1c <_printf_i+0xa8>
 800d9a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9aa:	2b15      	cmp	r3, #21
 800d9ac:	d8f6      	bhi.n	800d99c <_printf_i+0x28>
 800d9ae:	a101      	add	r1, pc, #4	@ (adr r1, 800d9b4 <_printf_i+0x40>)
 800d9b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9b4:	0800da0d 	.word	0x0800da0d
 800d9b8:	0800da21 	.word	0x0800da21
 800d9bc:	0800d99d 	.word	0x0800d99d
 800d9c0:	0800d99d 	.word	0x0800d99d
 800d9c4:	0800d99d 	.word	0x0800d99d
 800d9c8:	0800d99d 	.word	0x0800d99d
 800d9cc:	0800da21 	.word	0x0800da21
 800d9d0:	0800d99d 	.word	0x0800d99d
 800d9d4:	0800d99d 	.word	0x0800d99d
 800d9d8:	0800d99d 	.word	0x0800d99d
 800d9dc:	0800d99d 	.word	0x0800d99d
 800d9e0:	0800db23 	.word	0x0800db23
 800d9e4:	0800da4b 	.word	0x0800da4b
 800d9e8:	0800dadd 	.word	0x0800dadd
 800d9ec:	0800d99d 	.word	0x0800d99d
 800d9f0:	0800d99d 	.word	0x0800d99d
 800d9f4:	0800db45 	.word	0x0800db45
 800d9f8:	0800d99d 	.word	0x0800d99d
 800d9fc:	0800da4b 	.word	0x0800da4b
 800da00:	0800d99d 	.word	0x0800d99d
 800da04:	0800d99d 	.word	0x0800d99d
 800da08:	0800dae5 	.word	0x0800dae5
 800da0c:	6833      	ldr	r3, [r6, #0]
 800da0e:	1d1a      	adds	r2, r3, #4
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6032      	str	r2, [r6, #0]
 800da14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da1c:	2301      	movs	r3, #1
 800da1e:	e09e      	b.n	800db5e <_printf_i+0x1ea>
 800da20:	6833      	ldr	r3, [r6, #0]
 800da22:	6820      	ldr	r0, [r4, #0]
 800da24:	1d19      	adds	r1, r3, #4
 800da26:	6031      	str	r1, [r6, #0]
 800da28:	0606      	lsls	r6, r0, #24
 800da2a:	d501      	bpl.n	800da30 <_printf_i+0xbc>
 800da2c:	681d      	ldr	r5, [r3, #0]
 800da2e:	e003      	b.n	800da38 <_printf_i+0xc4>
 800da30:	0645      	lsls	r5, r0, #25
 800da32:	d5fb      	bpl.n	800da2c <_printf_i+0xb8>
 800da34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da38:	2d00      	cmp	r5, #0
 800da3a:	da03      	bge.n	800da44 <_printf_i+0xd0>
 800da3c:	232d      	movs	r3, #45	@ 0x2d
 800da3e:	426d      	negs	r5, r5
 800da40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da44:	230a      	movs	r3, #10
 800da46:	4859      	ldr	r0, [pc, #356]	@ (800dbac <_printf_i+0x238>)
 800da48:	e011      	b.n	800da6e <_printf_i+0xfa>
 800da4a:	6821      	ldr	r1, [r4, #0]
 800da4c:	6833      	ldr	r3, [r6, #0]
 800da4e:	0608      	lsls	r0, r1, #24
 800da50:	f853 5b04 	ldr.w	r5, [r3], #4
 800da54:	d402      	bmi.n	800da5c <_printf_i+0xe8>
 800da56:	0649      	lsls	r1, r1, #25
 800da58:	bf48      	it	mi
 800da5a:	b2ad      	uxthmi	r5, r5
 800da5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800da5e:	6033      	str	r3, [r6, #0]
 800da60:	bf14      	ite	ne
 800da62:	230a      	movne	r3, #10
 800da64:	2308      	moveq	r3, #8
 800da66:	4851      	ldr	r0, [pc, #324]	@ (800dbac <_printf_i+0x238>)
 800da68:	2100      	movs	r1, #0
 800da6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da6e:	6866      	ldr	r6, [r4, #4]
 800da70:	2e00      	cmp	r6, #0
 800da72:	bfa8      	it	ge
 800da74:	6821      	ldrge	r1, [r4, #0]
 800da76:	60a6      	str	r6, [r4, #8]
 800da78:	bfa4      	itt	ge
 800da7a:	f021 0104 	bicge.w	r1, r1, #4
 800da7e:	6021      	strge	r1, [r4, #0]
 800da80:	b90d      	cbnz	r5, 800da86 <_printf_i+0x112>
 800da82:	2e00      	cmp	r6, #0
 800da84:	d04b      	beq.n	800db1e <_printf_i+0x1aa>
 800da86:	4616      	mov	r6, r2
 800da88:	fbb5 f1f3 	udiv	r1, r5, r3
 800da8c:	fb03 5711 	mls	r7, r3, r1, r5
 800da90:	5dc7      	ldrb	r7, [r0, r7]
 800da92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da96:	462f      	mov	r7, r5
 800da98:	42bb      	cmp	r3, r7
 800da9a:	460d      	mov	r5, r1
 800da9c:	d9f4      	bls.n	800da88 <_printf_i+0x114>
 800da9e:	2b08      	cmp	r3, #8
 800daa0:	d10b      	bne.n	800daba <_printf_i+0x146>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	07df      	lsls	r7, r3, #31
 800daa6:	d508      	bpl.n	800daba <_printf_i+0x146>
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	6861      	ldr	r1, [r4, #4]
 800daac:	4299      	cmp	r1, r3
 800daae:	bfde      	ittt	le
 800dab0:	2330      	movle	r3, #48	@ 0x30
 800dab2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dab6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800daba:	1b92      	subs	r2, r2, r6
 800dabc:	6122      	str	r2, [r4, #16]
 800dabe:	464b      	mov	r3, r9
 800dac0:	4621      	mov	r1, r4
 800dac2:	4640      	mov	r0, r8
 800dac4:	f8cd a000 	str.w	sl, [sp]
 800dac8:	aa03      	add	r2, sp, #12
 800daca:	f7ff fee1 	bl	800d890 <_printf_common>
 800dace:	3001      	adds	r0, #1
 800dad0:	d14a      	bne.n	800db68 <_printf_i+0x1f4>
 800dad2:	f04f 30ff 	mov.w	r0, #4294967295
 800dad6:	b004      	add	sp, #16
 800dad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	f043 0320 	orr.w	r3, r3, #32
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	2778      	movs	r7, #120	@ 0x78
 800dae6:	4832      	ldr	r0, [pc, #200]	@ (800dbb0 <_printf_i+0x23c>)
 800dae8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	6831      	ldr	r1, [r6, #0]
 800daf0:	061f      	lsls	r7, r3, #24
 800daf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800daf6:	d402      	bmi.n	800dafe <_printf_i+0x18a>
 800daf8:	065f      	lsls	r7, r3, #25
 800dafa:	bf48      	it	mi
 800dafc:	b2ad      	uxthmi	r5, r5
 800dafe:	6031      	str	r1, [r6, #0]
 800db00:	07d9      	lsls	r1, r3, #31
 800db02:	bf44      	itt	mi
 800db04:	f043 0320 	orrmi.w	r3, r3, #32
 800db08:	6023      	strmi	r3, [r4, #0]
 800db0a:	b11d      	cbz	r5, 800db14 <_printf_i+0x1a0>
 800db0c:	2310      	movs	r3, #16
 800db0e:	e7ab      	b.n	800da68 <_printf_i+0xf4>
 800db10:	4826      	ldr	r0, [pc, #152]	@ (800dbac <_printf_i+0x238>)
 800db12:	e7e9      	b.n	800dae8 <_printf_i+0x174>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	f023 0320 	bic.w	r3, r3, #32
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	e7f6      	b.n	800db0c <_printf_i+0x198>
 800db1e:	4616      	mov	r6, r2
 800db20:	e7bd      	b.n	800da9e <_printf_i+0x12a>
 800db22:	6833      	ldr	r3, [r6, #0]
 800db24:	6825      	ldr	r5, [r4, #0]
 800db26:	1d18      	adds	r0, r3, #4
 800db28:	6961      	ldr	r1, [r4, #20]
 800db2a:	6030      	str	r0, [r6, #0]
 800db2c:	062e      	lsls	r6, r5, #24
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	d501      	bpl.n	800db36 <_printf_i+0x1c2>
 800db32:	6019      	str	r1, [r3, #0]
 800db34:	e002      	b.n	800db3c <_printf_i+0x1c8>
 800db36:	0668      	lsls	r0, r5, #25
 800db38:	d5fb      	bpl.n	800db32 <_printf_i+0x1be>
 800db3a:	8019      	strh	r1, [r3, #0]
 800db3c:	2300      	movs	r3, #0
 800db3e:	4616      	mov	r6, r2
 800db40:	6123      	str	r3, [r4, #16]
 800db42:	e7bc      	b.n	800dabe <_printf_i+0x14a>
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	2100      	movs	r1, #0
 800db48:	1d1a      	adds	r2, r3, #4
 800db4a:	6032      	str	r2, [r6, #0]
 800db4c:	681e      	ldr	r6, [r3, #0]
 800db4e:	6862      	ldr	r2, [r4, #4]
 800db50:	4630      	mov	r0, r6
 800db52:	f000 f849 	bl	800dbe8 <memchr>
 800db56:	b108      	cbz	r0, 800db5c <_printf_i+0x1e8>
 800db58:	1b80      	subs	r0, r0, r6
 800db5a:	6060      	str	r0, [r4, #4]
 800db5c:	6863      	ldr	r3, [r4, #4]
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	2300      	movs	r3, #0
 800db62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db66:	e7aa      	b.n	800dabe <_printf_i+0x14a>
 800db68:	4632      	mov	r2, r6
 800db6a:	4649      	mov	r1, r9
 800db6c:	4640      	mov	r0, r8
 800db6e:	6923      	ldr	r3, [r4, #16]
 800db70:	47d0      	blx	sl
 800db72:	3001      	adds	r0, #1
 800db74:	d0ad      	beq.n	800dad2 <_printf_i+0x15e>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	079b      	lsls	r3, r3, #30
 800db7a:	d413      	bmi.n	800dba4 <_printf_i+0x230>
 800db7c:	68e0      	ldr	r0, [r4, #12]
 800db7e:	9b03      	ldr	r3, [sp, #12]
 800db80:	4298      	cmp	r0, r3
 800db82:	bfb8      	it	lt
 800db84:	4618      	movlt	r0, r3
 800db86:	e7a6      	b.n	800dad6 <_printf_i+0x162>
 800db88:	2301      	movs	r3, #1
 800db8a:	4632      	mov	r2, r6
 800db8c:	4649      	mov	r1, r9
 800db8e:	4640      	mov	r0, r8
 800db90:	47d0      	blx	sl
 800db92:	3001      	adds	r0, #1
 800db94:	d09d      	beq.n	800dad2 <_printf_i+0x15e>
 800db96:	3501      	adds	r5, #1
 800db98:	68e3      	ldr	r3, [r4, #12]
 800db9a:	9903      	ldr	r1, [sp, #12]
 800db9c:	1a5b      	subs	r3, r3, r1
 800db9e:	42ab      	cmp	r3, r5
 800dba0:	dcf2      	bgt.n	800db88 <_printf_i+0x214>
 800dba2:	e7eb      	b.n	800db7c <_printf_i+0x208>
 800dba4:	2500      	movs	r5, #0
 800dba6:	f104 0619 	add.w	r6, r4, #25
 800dbaa:	e7f5      	b.n	800db98 <_printf_i+0x224>
 800dbac:	0800e960 	.word	0x0800e960
 800dbb0:	0800e971 	.word	0x0800e971

0800dbb4 <memmove>:
 800dbb4:	4288      	cmp	r0, r1
 800dbb6:	b510      	push	{r4, lr}
 800dbb8:	eb01 0402 	add.w	r4, r1, r2
 800dbbc:	d902      	bls.n	800dbc4 <memmove+0x10>
 800dbbe:	4284      	cmp	r4, r0
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	d807      	bhi.n	800dbd4 <memmove+0x20>
 800dbc4:	1e43      	subs	r3, r0, #1
 800dbc6:	42a1      	cmp	r1, r4
 800dbc8:	d008      	beq.n	800dbdc <memmove+0x28>
 800dbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbd2:	e7f8      	b.n	800dbc6 <memmove+0x12>
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	4402      	add	r2, r0
 800dbd8:	428a      	cmp	r2, r1
 800dbda:	d100      	bne.n	800dbde <memmove+0x2a>
 800dbdc:	bd10      	pop	{r4, pc}
 800dbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbe6:	e7f7      	b.n	800dbd8 <memmove+0x24>

0800dbe8 <memchr>:
 800dbe8:	4603      	mov	r3, r0
 800dbea:	b510      	push	{r4, lr}
 800dbec:	b2c9      	uxtb	r1, r1
 800dbee:	4402      	add	r2, r0
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	d101      	bne.n	800dbfa <memchr+0x12>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	e003      	b.n	800dc02 <memchr+0x1a>
 800dbfa:	7804      	ldrb	r4, [r0, #0]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	428c      	cmp	r4, r1
 800dc00:	d1f6      	bne.n	800dbf0 <memchr+0x8>
 800dc02:	bd10      	pop	{r4, pc}

0800dc04 <memcpy>:
 800dc04:	440a      	add	r2, r1
 800dc06:	4291      	cmp	r1, r2
 800dc08:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc0c:	d100      	bne.n	800dc10 <memcpy+0xc>
 800dc0e:	4770      	bx	lr
 800dc10:	b510      	push	{r4, lr}
 800dc12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc16:	4291      	cmp	r1, r2
 800dc18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc1c:	d1f9      	bne.n	800dc12 <memcpy+0xe>
 800dc1e:	bd10      	pop	{r4, pc}

0800dc20 <_realloc_r>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	4680      	mov	r8, r0
 800dc26:	4615      	mov	r5, r2
 800dc28:	460c      	mov	r4, r1
 800dc2a:	b921      	cbnz	r1, 800dc36 <_realloc_r+0x16>
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc32:	f7ff bb35 	b.w	800d2a0 <_malloc_r>
 800dc36:	b92a      	cbnz	r2, 800dc44 <_realloc_r+0x24>
 800dc38:	f7ff fc8a 	bl	800d550 <_free_r>
 800dc3c:	2400      	movs	r4, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc44:	f000 f81a 	bl	800dc7c <_malloc_usable_size_r>
 800dc48:	4285      	cmp	r5, r0
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	d802      	bhi.n	800dc54 <_realloc_r+0x34>
 800dc4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc52:	d8f4      	bhi.n	800dc3e <_realloc_r+0x1e>
 800dc54:	4629      	mov	r1, r5
 800dc56:	4640      	mov	r0, r8
 800dc58:	f7ff fb22 	bl	800d2a0 <_malloc_r>
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d0ec      	beq.n	800dc3c <_realloc_r+0x1c>
 800dc62:	42b5      	cmp	r5, r6
 800dc64:	462a      	mov	r2, r5
 800dc66:	4621      	mov	r1, r4
 800dc68:	bf28      	it	cs
 800dc6a:	4632      	movcs	r2, r6
 800dc6c:	f7ff ffca 	bl	800dc04 <memcpy>
 800dc70:	4621      	mov	r1, r4
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7ff fc6c 	bl	800d550 <_free_r>
 800dc78:	463c      	mov	r4, r7
 800dc7a:	e7e0      	b.n	800dc3e <_realloc_r+0x1e>

0800dc7c <_malloc_usable_size_r>:
 800dc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc80:	1f18      	subs	r0, r3, #4
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfbc      	itt	lt
 800dc86:	580b      	ldrlt	r3, [r1, r0]
 800dc88:	18c0      	addlt	r0, r0, r3
 800dc8a:	4770      	bx	lr

0800dc8c <_init>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr

0800dc98 <_fini>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	bf00      	nop
 800dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9e:	bc08      	pop	{r3}
 800dca0:	469e      	mov	lr, r3
 800dca2:	4770      	bx	lr
