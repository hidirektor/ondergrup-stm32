
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e04c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800e230  0800e230  0000f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e43c  0800e43c  00010f80  2**0
                  CONTENTS
  4 .ARM          00000008  0800e43c  0800e43c  0000f43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e444  0800e444  00010f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e444  0800e444  0000f444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e448  0800e448  0000f448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f80  20000000  0800e44c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000f80  0800f3cc  00010f80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  0800f3cc  000118d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018743  00000000  00000000  00010fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ed  00000000  00000000  000296ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8b  00000000  00000000  0002deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c248  00000000  00000000  0002ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5bb  00000000  00000000  0004af83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0042  00000000  00000000  0006853e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  001085c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010d328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000f80 	.word	0x20000f80
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e218 	.word	0x0800e218

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000f84 	.word	0x20000f84
 8000220:	0800e218 	.word	0x0800e218

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000f9c 	.word	0x20000f9c
 80004ac:	20001040 	.word	0x20001040
 80004b0:	2000108b 	.word	0x2000108b
 80004b4:	20001041 	.word	0x20001041
 80004b8:	2000106d 	.word	0x2000106d
 80004bc:	20001070 	.word	0x20001070
 80004c0:	20001071 	.word	0x20001071
 80004c4:	20001072 	.word	0x20001072
 80004c8:	20001073 	.word	0x20001073
 80004cc:	20001074 	.word	0x20001074
 80004d0:	20001075 	.word	0x20001075
 80004d4:	20001085 	.word	0x20001085
 80004d8:	20001076 	.word	0x20001076
 80004dc:	20001086 	.word	0x20001086
 80004e0:	20001077 	.word	0x20001077
 80004e4:	20001087 	.word	0x20001087
 80004e8:	2000107a 	.word	0x2000107a
 80004ec:	2000107b 	.word	0x2000107b
 80004f0:	2000107c 	.word	0x2000107c
 80004f4:	2000107d 	.word	0x2000107d
 80004f8:	2000107e 	.word	0x2000107e
 80004fc:	2000107f 	.word	0x2000107f
 8000500:	20001080 	.word	0x20001080
 8000504:	20001081 	.word	0x20001081
 8000508:	20001082 	.word	0x20001082
 800050c:	20001083 	.word	0x20001083
 8000510:	20001084 	.word	0x20001084
 8000514:	20001088 	.word	0x20001088
 8000518:	2000108a 	.word	0x2000108a
 800051c:	20001064 	.word	0x20001064
 8000520:	20001065 	.word	0x20001065
 8000524:	20001066 	.word	0x20001066
 8000528:	20001067 	.word	0x20001067
 800052c:	2000108d 	.word	0x2000108d
 8000530:	20001079 	.word	0x20001079
 8000534:	2000108c 	.word	0x2000108c
 8000538:	20001078 	.word	0x20001078
 800053c:	2000108e 	.word	0x2000108e
 8000540:	2000108f 	.word	0x2000108f
 8000544:	20001090 	.word	0x20001090
 8000548:	20001091 	.word	0x20001091
 800054c:	20001092 	.word	0x20001092
 8000550:	20001093 	.word	0x20001093
 8000554:	20001094 	.word	0x20001094
 8000558:	20001095 	.word	0x20001095
 800055c:	20001096 	.word	0x20001096
 8000560:	20001097 	.word	0x20001097
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 ffb5 	bl	800a5ac <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 ffaf 	bl	800a5ac <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 ffa9 	bl	800a5ac <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f006 ff0a 	bl	8007478 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000107b 	.word	0x2000107b
 800066c:	2000107c 	.word	0x2000107c
 8000670:	2000107d 	.word	0x2000107d
 8000674:	2000107e 	.word	0x2000107e
 8000678:	2000107f 	.word	0x2000107f
 800067c:	20001080 	.word	0x20001080
 8000680:	20001081 	.word	0x20001081
 8000684:	20001082 	.word	0x20001082
 8000688:	20001083 	.word	0x20001083
 800068c:	20001084 	.word	0x20001084
 8000690:	20001088 	.word	0x20001088
 8000694:	2000108a 	.word	0x2000108a
 8000698:	2000108c 	.word	0x2000108c
 800069c:	2000108d 	.word	0x2000108d
 80006a0:	2000108b 	.word	0x2000108b

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f009 fa50 	bl	8009b68 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 ff6e 	bl	800a5ac <HAL_Delay>
    lcd_clear();
 80006d0:	f009 fa76 	bl	8009bc0 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000f9c 	.word	0x20000f9c
 80006e0:	20001714 	.word	0x20001714

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a ffa5 	bl	800b6c0 <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f009 f9ef 	bl	8009b68 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 ff00 	bl	800a5ac <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200017f0 	.word	0x200017f0
 80007c4:	0800e230 	.word	0x0800e230

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00b f82d 	bl	800b8b4 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f009 f97d 	bl	8009b68 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200017f0 	.word	0x200017f0
 80008a4:	0800e244 	.word	0x0800e244

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000f9c 	.word	0x20000f9c
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001014 	.word	0x20001014
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001020 	.word	0x20001020
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001030 	.word	0x20001030

080009ac <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af04      	add	r7, sp, #16
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009b6:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <hata2EEPROM+0xa0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <hata2EEPROM+0xa4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a24      	ldr	r2, [pc, #144]	@ (8000a54 <hata2EEPROM+0xa8>)
 80009c4:	5cd3      	ldrb	r3, [r2, r3]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009ca:	f000 f8d1 	bl	8000b70 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009ce:	e000      	b.n	80009d2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009d0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e012      	b.n	80009fe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <hata2EEPROM+0xa4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <hata2EEPROM+0xa8>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d107      	bne.n	80009f8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <hata2EEPROM+0xa4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	4918      	ldr	r1, [pc, #96]	@ (8000a54 <hata2EEPROM+0xa8>)
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	54ca      	strb	r2, [r1, r3]
					break;
 80009f6:	e007      	b.n	8000a08 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <hata2EEPROM+0xa0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbe7      	blt.n	80009d8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <hata2EEPROM+0xa4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b299      	uxth	r1, r3
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <hata2EEPROM+0xa0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b298      	uxth	r0, r3
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <hata2EEPROM+0xa4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <hata2EEPROM+0xa8>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <hata2EEPROM+0xa0>)
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	b292      	uxth	r2, r2
 8000a22:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000a26:	9402      	str	r4, [sp, #8]
 8000a28:	9201      	str	r2, [sp, #4]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	460a      	mov	r2, r1
 8000a30:	21a0      	movs	r1, #160	@ 0xa0
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <hata2EEPROM+0xac>)
 8000a34:	f00a fe44 	bl	800b6c0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3c:	f009 fdb6 	bl	800a5ac <HAL_Delay>
	eepromKontrol();
 8000a40:	f7ff fbf8 	bl	8000234 <eepromKontrol>
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	20000094 	.word	0x20000094
 8000a50:	20000098 	.word	0x20000098
 8000a54:	20000f9c 	.word	0x20000f9c
 8000a58:	200017f0 	.word	0x200017f0

08000a5c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10f      	bne.n	8000a8c <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a6c:	4a38      	ldr	r2, [pc, #224]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2001      	movs	r0, #1
 8000a72:	f009 f879 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, "1");
 8000a76:	4a37      	ldr	r2, [pc, #220]	@ (8000b54 <hataKoduLcdGoster+0xf8>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f009 f874 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a80:	4a35      	ldr	r2, [pc, #212]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000a82:	2107      	movs	r1, #7
 8000a84:	2002      	movs	r0, #2
 8000a86:	f009 f86f 	bl	8009b68 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a8a:	e05d      	b.n	8000b48 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d10f      	bne.n	8000ab2 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a92:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f009 f866 	bl	8009b68 <lcd_print>
		lcd_print(2, 2, "2");
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b5c <hataKoduLcdGoster+0x100>)
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f009 f861 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000aa8:	2107      	movs	r1, #7
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f009 f85c 	bl	8009b68 <lcd_print>
}
 8000ab0:	e04a      	b.n	8000b48 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d10f      	bne.n	8000ad8 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000ab8:	4a25      	ldr	r2, [pc, #148]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000aba:	2101      	movs	r1, #1
 8000abc:	2001      	movs	r0, #1
 8000abe:	f009 f853 	bl	8009b68 <lcd_print>
		lcd_print(2, 3, "3");
 8000ac2:	4a27      	ldr	r2, [pc, #156]	@ (8000b60 <hataKoduLcdGoster+0x104>)
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f009 f84e 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000acc:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000ace:	2107      	movs	r1, #7
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f009 f849 	bl	8009b68 <lcd_print>
}
 8000ad6:	e037      	b.n	8000b48 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d10f      	bne.n	8000afe <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ade:	4a1c      	ldr	r2, [pc, #112]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f009 f840 	bl	8009b68 <lcd_print>
		lcd_print(2, 4, "4");
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <hataKoduLcdGoster+0x108>)
 8000aea:	2104      	movs	r1, #4
 8000aec:	2002      	movs	r0, #2
 8000aee:	f009 f83b 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000af4:	2107      	movs	r1, #7
 8000af6:	2002      	movs	r0, #2
 8000af8:	f009 f836 	bl	8009b68 <lcd_print>
}
 8000afc:	e024      	b.n	8000b48 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b05      	cmp	r3, #5
 8000b02:	d10f      	bne.n	8000b24 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f009 f82d 	bl	8009b68 <lcd_print>
		lcd_print(2, 5, "5");
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <hataKoduLcdGoster+0x10c>)
 8000b10:	2105      	movs	r1, #5
 8000b12:	2002      	movs	r0, #2
 8000b14:	f009 f828 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000b1a:	2107      	movs	r1, #7
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f009 f823 	bl	8009b68 <lcd_print>
}
 8000b22:	e011      	b.n	8000b48 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d10e      	bne.n	8000b48 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <hataKoduLcdGoster+0xf4>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f009 f81a 	bl	8009b68 <lcd_print>
		lcd_print(2, 6, "6");
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <hataKoduLcdGoster+0x110>)
 8000b36:	2106      	movs	r1, #6
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f009 f815 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b3e:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <hataKoduLcdGoster+0xfc>)
 8000b40:	2107      	movs	r1, #7
 8000b42:	2002      	movs	r0, #2
 8000b44:	f009 f810 	bl	8009b68 <lcd_print>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20001764 	.word	0x20001764
 8000b54:	0800e258 	.word	0x0800e258
 8000b58:	0800e25c 	.word	0x0800e25c
 8000b5c:	0800e268 	.word	0x0800e268
 8000b60:	0800e26c 	.word	0x0800e26c
 8000b64:	0800e270 	.word	0x0800e270
 8000b68:	0800e274 	.word	0x0800e274
 8000b6c:	0800e278 	.word	0x0800e278

08000b70 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e009      	b.n	8000b90 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <eepromDataFillWithEmpty+0x38>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	4a09      	ldr	r2, [pc, #36]	@ (8000bac <eepromDataFillWithEmpty+0x3c>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <eepromDataFillWithEmpty+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbf0      	blt.n	8000b7c <eepromDataFillWithEmpty+0xc>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000006c 	.word	0x2000006c
 8000bac:	20000f9c 	.word	0x20000f9c
 8000bb0:	20000094 	.word	0x20000094

08000bb4 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000bc6:	4b50      	ldr	r3, [pc, #320]	@ (8000d08 <i2cTest+0x154>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <i2cTest+0x154>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0201 	bic.w	r2, r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bd6:	484c      	ldr	r0, [pc, #304]	@ (8000d08 <i2cTest+0x154>)
 8000bd8:	f00a fc44 	bl	800b464 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bdc:	23c0      	movs	r3, #192	@ 0xc0
 8000bde:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000be0:	2311      	movs	r3, #17
 8000be2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4846      	ldr	r0, [pc, #280]	@ (8000d0c <i2cTest+0x158>)
 8000bf2:	f00a f84b 	bl	800ac8c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2140      	movs	r1, #64	@ 0x40
 8000bfa:	4844      	ldr	r0, [pc, #272]	@ (8000d0c <i2cTest+0x158>)
 8000bfc:	f00a fabd 	bl	800b17a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2180      	movs	r1, #128	@ 0x80
 8000c04:	4841      	ldr	r0, [pc, #260]	@ (8000d0c <i2cTest+0x158>)
 8000c06:	f00a fab8 	bl	800b17a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f009 fcce 	bl	800a5ac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c10:	bf00      	nop
 8000c12:	2140      	movs	r1, #64	@ 0x40
 8000c14:	483d      	ldr	r0, [pc, #244]	@ (8000d0c <i2cTest+0x158>)
 8000c16:	f00a fa99 	bl	800b14c <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d006      	beq.n	8000c2e <i2cTest+0x7a>
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	483a      	ldr	r0, [pc, #232]	@ (8000d0c <i2cTest+0x158>)
 8000c24:	f00a fa92 	bl	800b14c <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d1f1      	bne.n	8000c12 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	4836      	ldr	r0, [pc, #216]	@ (8000d0c <i2cTest+0x158>)
 8000c34:	f00a faa1 	bl	800b17a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f009 fcb7 	bl	800a5ac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c3e:	bf00      	nop
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	4832      	ldr	r0, [pc, #200]	@ (8000d0c <i2cTest+0x158>)
 8000c44:	f00a fa82 	bl	800b14c <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d0f8      	beq.n	8000c40 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	@ 0x40
 8000c52:	482e      	ldr	r0, [pc, #184]	@ (8000d0c <i2cTest+0x158>)
 8000c54:	f00a fa91 	bl	800b17a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f009 fca7 	bl	800a5ac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c5e:	bf00      	nop
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	482a      	ldr	r0, [pc, #168]	@ (8000d0c <i2cTest+0x158>)
 8000c64:	f00a fa72 	bl	800b14c <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d0f8      	beq.n	8000c60 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2140      	movs	r1, #64	@ 0x40
 8000c72:	4826      	ldr	r0, [pc, #152]	@ (8000d0c <i2cTest+0x158>)
 8000c74:	f00a fa81 	bl	800b17a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f009 fc97 	bl	800a5ac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c7e:	bf00      	nop
 8000c80:	2140      	movs	r1, #64	@ 0x40
 8000c82:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <i2cTest+0x158>)
 8000c84:	f00a fa62 	bl	800b14c <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d1f8      	bne.n	8000c80 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	481e      	ldr	r0, [pc, #120]	@ (8000d0c <i2cTest+0x158>)
 8000c94:	f00a fa71 	bl	800b17a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f009 fc87 	bl	800a5ac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c9e:	bf00      	nop
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	481a      	ldr	r0, [pc, #104]	@ (8000d0c <i2cTest+0x158>)
 8000ca4:	f00a fa52 	bl	800b14c <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1f8      	bne.n	8000ca0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cae:	23c0      	movs	r3, #192	@ 0xc0
 8000cb0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <i2cTest+0x158>)
 8000cc4:	f009 ffe2 	bl	800ac8c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <i2cTest+0x154>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <i2cTest+0x154>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cd6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <i2cTest+0x154>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <i2cTest+0x154>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ce6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <i2cTest+0x154>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <i2cTest+0x154>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <i2cTest+0x154>)
 8000cfa:	f00a fa6f 	bl	800b1dc <HAL_I2C_Init>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200017f0 	.word	0x200017f0
 8000d0c:	40010c00 	.word	0x40010c00

08000d10 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d1a:	20c8      	movs	r0, #200	@ 0xc8
 8000d1c:	f009 fc46 	bl	800a5ac <HAL_Delay>
	lcd_clear();
 8000d20:	f008 ff4e 	bl	8009bc0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d13e      	bne.n	8000da8 <printTemplate+0x98>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d13b      	bne.n	8000da8 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d30:	4a9a      	ldr	r2, [pc, #616]	@ (8000f9c <printTemplate+0x28c>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f008 ff17 	bl	8009b68 <lcd_print>
		lcd_print(2, 3, "0");
 8000d3a:	4a99      	ldr	r2, [pc, #612]	@ (8000fa0 <printTemplate+0x290>)
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f008 ff12 	bl	8009b68 <lcd_print>
		lcd_print(2, 4, "1");
 8000d44:	4a97      	ldr	r2, [pc, #604]	@ (8000fa4 <printTemplate+0x294>)
 8000d46:	2104      	movs	r1, #4
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f008 ff0d 	bl	8009b68 <lcd_print>
		lcd_print(2, 5, "2");
 8000d4e:	4a96      	ldr	r2, [pc, #600]	@ (8000fa8 <printTemplate+0x298>)
 8000d50:	2105      	movs	r1, #5
 8000d52:	2002      	movs	r0, #2
 8000d54:	f008 ff08 	bl	8009b68 <lcd_print>
		lcd_print(2, 6, "3");
 8000d58:	4a94      	ldr	r2, [pc, #592]	@ (8000fac <printTemplate+0x29c>)
 8000d5a:	2106      	movs	r1, #6
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f008 ff03 	bl	8009b68 <lcd_print>
		lcd_print(2, 7, "4");
 8000d62:	4a93      	ldr	r2, [pc, #588]	@ (8000fb0 <printTemplate+0x2a0>)
 8000d64:	2107      	movs	r1, #7
 8000d66:	2002      	movs	r0, #2
 8000d68:	f008 fefe 	bl	8009b68 <lcd_print>
		lcd_print(2, 10, "5");
 8000d6c:	4a91      	ldr	r2, [pc, #580]	@ (8000fb4 <printTemplate+0x2a4>)
 8000d6e:	210a      	movs	r1, #10
 8000d70:	2002      	movs	r0, #2
 8000d72:	f008 fef9 	bl	8009b68 <lcd_print>
		lcd_print(2, 11, "6");
 8000d76:	4a90      	ldr	r2, [pc, #576]	@ (8000fb8 <printTemplate+0x2a8>)
 8000d78:	210b      	movs	r1, #11
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f008 fef4 	bl	8009b68 <lcd_print>
		lcd_print(2, 12, "7");
 8000d80:	4a8e      	ldr	r2, [pc, #568]	@ (8000fbc <printTemplate+0x2ac>)
 8000d82:	210c      	movs	r1, #12
 8000d84:	2002      	movs	r0, #2
 8000d86:	f008 feef 	bl	8009b68 <lcd_print>
		lcd_print(2, 13, "8");
 8000d8a:	4a8d      	ldr	r2, [pc, #564]	@ (8000fc0 <printTemplate+0x2b0>)
 8000d8c:	210d      	movs	r1, #13
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f008 feea 	bl	8009b68 <lcd_print>
		lcd_print(2, 14, "9");
 8000d94:	4a8b      	ldr	r2, [pc, #556]	@ (8000fc4 <printTemplate+0x2b4>)
 8000d96:	210e      	movs	r1, #14
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f008 fee5 	bl	8009b68 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d9e:	2103      	movs	r1, #3
 8000da0:	2002      	movs	r0, #2
 8000da2:	f008 fec2 	bl	8009b2a <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000da6:	e0f5      	b.n	8000f94 <printTemplate+0x284>
	} else if(type == 2) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d178      	bne.n	8000ea0 <printTemplate+0x190>
		if(page == 1) {
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d114      	bne.n	8000dde <printTemplate+0xce>
			lcd_clear();
 8000db4:	f008 ff04 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000db8:	2064      	movs	r0, #100	@ 0x64
 8000dba:	f009 fbf7 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000dbe:	4a82      	ldr	r2, [pc, #520]	@ (8000fc8 <printTemplate+0x2b8>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f008 fed0 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dc8:	4a80      	ldr	r2, [pc, #512]	@ (8000fcc <printTemplate+0x2bc>)
 8000dca:	2107      	movs	r1, #7
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f008 fecb 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8000fd0 <printTemplate+0x2c0>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f008 fec6 	bl	8009b68 <lcd_print>
}
 8000ddc:	e0da      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 2) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d114      	bne.n	8000e0e <printTemplate+0xfe>
			lcd_clear();
 8000de4:	f008 feec 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f009 fbdf 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dee:	4a79      	ldr	r2, [pc, #484]	@ (8000fd4 <printTemplate+0x2c4>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	2001      	movs	r0, #1
 8000df4:	f008 feb8 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000df8:	4a74      	ldr	r2, [pc, #464]	@ (8000fcc <printTemplate+0x2bc>)
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f008 feb3 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e02:	4a75      	ldr	r2, [pc, #468]	@ (8000fd8 <printTemplate+0x2c8>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	2002      	movs	r0, #2
 8000e08:	f008 feae 	bl	8009b68 <lcd_print>
}
 8000e0c:	e0c2      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 3) {
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d114      	bne.n	8000e3e <printTemplate+0x12e>
			lcd_clear();
 8000e14:	f008 fed4 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	@ 0x64
 8000e1a:	f009 fbc7 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc8 <printTemplate+0x2b8>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	2001      	movs	r0, #1
 8000e24:	f008 fea0 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e28:	4a68      	ldr	r2, [pc, #416]	@ (8000fcc <printTemplate+0x2bc>)
 8000e2a:	2107      	movs	r1, #7
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f008 fe9b 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e32:	4a6a      	ldr	r2, [pc, #424]	@ (8000fdc <printTemplate+0x2cc>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	2002      	movs	r0, #2
 8000e38:	f008 fe96 	bl	8009b68 <lcd_print>
}
 8000e3c:	e0aa      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 4) {
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d114      	bne.n	8000e6e <printTemplate+0x15e>
			lcd_clear();
 8000e44:	f008 febc 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000e48:	2064      	movs	r0, #100	@ 0x64
 8000e4a:	f009 fbaf 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc8 <printTemplate+0x2b8>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	2001      	movs	r0, #1
 8000e54:	f008 fe88 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e58:	4a5c      	ldr	r2, [pc, #368]	@ (8000fcc <printTemplate+0x2bc>)
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f008 fe83 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e62:	4a5f      	ldr	r2, [pc, #380]	@ (8000fe0 <printTemplate+0x2d0>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	2002      	movs	r0, #2
 8000e68:	f008 fe7e 	bl	8009b68 <lcd_print>
}
 8000e6c:	e092      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 5) {
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	f040 808f 	bne.w	8000f94 <printTemplate+0x284>
			lcd_clear();
 8000e76:	f008 fea3 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000e7a:	2064      	movs	r0, #100	@ 0x64
 8000e7c:	f009 fb96 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e80:	4a51      	ldr	r2, [pc, #324]	@ (8000fc8 <printTemplate+0x2b8>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	2001      	movs	r0, #1
 8000e86:	f008 fe6f 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e8a:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <printTemplate+0x2bc>)
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f008 fe6a 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e94:	4a53      	ldr	r2, [pc, #332]	@ (8000fe4 <printTemplate+0x2d4>)
 8000e96:	2101      	movs	r1, #1
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f008 fe65 	bl	8009b68 <lcd_print>
}
 8000e9e:	e079      	b.n	8000f94 <printTemplate+0x284>
	} else if(type == 3) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d176      	bne.n	8000f94 <printTemplate+0x284>
		if(page == 1) {
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d114      	bne.n	8000ed6 <printTemplate+0x1c6>
			lcd_clear();
 8000eac:	f008 fe88 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000eb0:	2064      	movs	r0, #100	@ 0x64
 8000eb2:	f009 fb7b 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <printTemplate+0x2d8>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f008 fe54 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fec <printTemplate+0x2dc>)
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f008 fe4f 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000eca:	4a41      	ldr	r2, [pc, #260]	@ (8000fd0 <printTemplate+0x2c0>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f008 fe4a 	bl	8009b68 <lcd_print>
}
 8000ed4:	e05e      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 2) {
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d114      	bne.n	8000f06 <printTemplate+0x1f6>
			lcd_clear();
 8000edc:	f008 fe70 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	@ 0x64
 8000ee2:	f009 fb63 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ee6:	4a40      	ldr	r2, [pc, #256]	@ (8000fe8 <printTemplate+0x2d8>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2001      	movs	r0, #1
 8000eec:	f008 fe3c 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8000fec <printTemplate+0x2dc>)
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f008 fe37 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000efa:	4a37      	ldr	r2, [pc, #220]	@ (8000fd8 <printTemplate+0x2c8>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f008 fe32 	bl	8009b68 <lcd_print>
}
 8000f04:	e046      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 3) {
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d114      	bne.n	8000f36 <printTemplate+0x226>
			lcd_clear();
 8000f0c:	f008 fe58 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000f10:	2064      	movs	r0, #100	@ 0x64
 8000f12:	f009 fb4b 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f16:	4a34      	ldr	r2, [pc, #208]	@ (8000fe8 <printTemplate+0x2d8>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f008 fe24 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f20:	4a32      	ldr	r2, [pc, #200]	@ (8000fec <printTemplate+0x2dc>)
 8000f22:	2107      	movs	r1, #7
 8000f24:	2001      	movs	r0, #1
 8000f26:	f008 fe1f 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fdc <printTemplate+0x2cc>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f008 fe1a 	bl	8009b68 <lcd_print>
}
 8000f34:	e02e      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 4) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d114      	bne.n	8000f66 <printTemplate+0x256>
			lcd_clear();
 8000f3c:	f008 fe40 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f009 fb33 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f46:	4a28      	ldr	r2, [pc, #160]	@ (8000fe8 <printTemplate+0x2d8>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f008 fe0c 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <printTemplate+0x2dc>)
 8000f52:	2107      	movs	r1, #7
 8000f54:	2001      	movs	r0, #1
 8000f56:	f008 fe07 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <printTemplate+0x2d0>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f008 fe02 	bl	8009b68 <lcd_print>
}
 8000f64:	e016      	b.n	8000f94 <printTemplate+0x284>
		} else if(page == 5) {
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d113      	bne.n	8000f94 <printTemplate+0x284>
			lcd_clear();
 8000f6c:	f008 fe28 	bl	8009bc0 <lcd_clear>
			HAL_Delay(100);
 8000f70:	2064      	movs	r0, #100	@ 0x64
 8000f72:	f009 fb1b 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f76:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe8 <printTemplate+0x2d8>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f008 fdf4 	bl	8009b68 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f80:	4a1a      	ldr	r2, [pc, #104]	@ (8000fec <printTemplate+0x2dc>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	2001      	movs	r0, #1
 8000f86:	f008 fdef 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <printTemplate+0x2d4>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f008 fdea 	bl	8009b68 <lcd_print>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800e27c 	.word	0x0800e27c
 8000fa0:	0800e284 	.word	0x0800e284
 8000fa4:	0800e288 	.word	0x0800e288
 8000fa8:	0800e28c 	.word	0x0800e28c
 8000fac:	0800e290 	.word	0x0800e290
 8000fb0:	0800e294 	.word	0x0800e294
 8000fb4:	0800e298 	.word	0x0800e298
 8000fb8:	0800e29c 	.word	0x0800e29c
 8000fbc:	0800e2a0 	.word	0x0800e2a0
 8000fc0:	0800e2a4 	.word	0x0800e2a4
 8000fc4:	0800e2a8 	.word	0x0800e2a8
 8000fc8:	0800e2ac 	.word	0x0800e2ac
 8000fcc:	20001020 	.word	0x20001020
 8000fd0:	0800e2c0 	.word	0x0800e2c0
 8000fd4:	0800e2d4 	.word	0x0800e2d4
 8000fd8:	0800e2dc 	.word	0x0800e2dc
 8000fdc:	0800e2f0 	.word	0x0800e2f0
 8000fe0:	0800e304 	.word	0x0800e304
 8000fe4:	0800e318 	.word	0x0800e318
 8000fe8:	0800e32c 	.word	0x0800e32c
 8000fec:	20001030 	.word	0x20001030

08000ff0 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10a      	bne.n	8001014 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8000ffe:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <printCredentials+0x70>)
 8001000:	2101      	movs	r1, #1
 8001002:	2002      	movs	r0, #2
 8001004:	f008 fdb0 	bl	8009b68 <lcd_print>
		lcd_print(2, 13, "    ");
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <printCredentials+0x74>)
 800100a:	210d      	movs	r1, #13
 800100c:	2002      	movs	r0, #2
 800100e:	f008 fdab 	bl	8009b68 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8001012:	e021      	b.n	8001058 <printCredentials+0x68>
	} else if(type == 2) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d10f      	bne.n	800103a <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 800101a:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <printCredentials+0x78>)
 800101c:	2101      	movs	r1, #1
 800101e:	2001      	movs	r0, #1
 8001020:	f008 fda2 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, "                ");
 8001024:	4a11      	ldr	r2, [pc, #68]	@ (800106c <printCredentials+0x7c>)
 8001026:	2101      	movs	r1, #1
 8001028:	2002      	movs	r0, #2
 800102a:	f008 fd9d 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <printCredentials+0x80>)
 8001030:	2101      	movs	r1, #1
 8001032:	2002      	movs	r0, #2
 8001034:	f008 fd98 	bl	8009b68 <lcd_print>
}
 8001038:	e00e      	b.n	8001058 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800103a:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <printCredentials+0x84>)
 800103c:	2101      	movs	r1, #1
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fd92 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, "                ");
 8001044:	4a09      	ldr	r2, [pc, #36]	@ (800106c <printCredentials+0x7c>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f008 fd8d 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, wifiPass);
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <printCredentials+0x88>)
 8001050:	2101      	movs	r1, #1
 8001052:	2002      	movs	r0, #2
 8001054:	f008 fd88 	bl	8009b68 <lcd_print>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20001014 	.word	0x20001014
 8001064:	0800e340 	.word	0x0800e340
 8001068:	0800e348 	.word	0x0800e348
 800106c:	0800e35c 	.word	0x0800e35c
 8001070:	20001020 	.word	0x20001020
 8001074:	0800e370 	.word	0x0800e370
 8001078:	20001030 	.word	0x20001030

0800107c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001080:	f3bf 8f4f 	dsb	sy
}
 8001084:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <__NVIC_SystemReset+0x24>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800108e:	4904      	ldr	r1, [pc, #16]	@ (80010a0 <__NVIC_SystemReset+0x24>)
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x28>)
 8001092:	4313      	orrs	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001096:	f3bf 8f4f 	dsb	sy
}
 800109a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <__NVIC_SystemReset+0x20>
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	05fa0004 	.word	0x05fa0004

080010a8 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010ae:	2101      	movs	r1, #1
 80010b0:	488e      	ldr	r0, [pc, #568]	@ (80012ec <menu+0x244>)
 80010b2:	f00a f84b 	bl	800b14c <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 8099 	bne.w	80011f0 <menu+0x148>
 80010be:	4b8c      	ldr	r3, [pc, #560]	@ (80012f0 <menu+0x248>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8091 	beq.w	80011f0 <menu+0x148>
		menuSayac = menuSayac+1;
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <menu+0x24c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b87      	ldr	r3, [pc, #540]	@ (80012f4 <menu+0x24c>)
 80010d8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80010da:	4b86      	ldr	r3, [pc, #536]	@ (80012f4 <menu+0x24c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b24      	cmp	r3, #36	@ 0x24
 80010e0:	d102      	bne.n	80010e8 <menu+0x40>
			menuSayac = 1;
 80010e2:	4b84      	ldr	r3, [pc, #528]	@ (80012f4 <menu+0x24c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80010e8:	4b82      	ldr	r3, [pc, #520]	@ (80012f4 <menu+0x24c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d106      	bne.n	80010fe <menu+0x56>
 80010f0:	4b81      	ldr	r3, [pc, #516]	@ (80012f8 <menu+0x250>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <menu+0x56>
			menuSayac = 21;
 80010f8:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <menu+0x24c>)
 80010fa:	2215      	movs	r2, #21
 80010fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80010fe:	4b7d      	ldr	r3, [pc, #500]	@ (80012f4 <menu+0x24c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b08      	cmp	r3, #8
 8001104:	d106      	bne.n	8001114 <menu+0x6c>
 8001106:	4b7d      	ldr	r3, [pc, #500]	@ (80012fc <menu+0x254>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <menu+0x6c>
			menuSayac = 16;
 800110e:	4b79      	ldr	r3, [pc, #484]	@ (80012f4 <menu+0x24c>)
 8001110:	2210      	movs	r2, #16
 8001112:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001114:	4b77      	ldr	r3, [pc, #476]	@ (80012f4 <menu+0x24c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b0d      	cmp	r3, #13
 800111a:	d106      	bne.n	800112a <menu+0x82>
 800111c:	4b77      	ldr	r3, [pc, #476]	@ (80012fc <menu+0x254>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d102      	bne.n	800112a <menu+0x82>
			menuSayac = 16;
 8001124:	4b73      	ldr	r3, [pc, #460]	@ (80012f4 <menu+0x24c>)
 8001126:	2210      	movs	r2, #16
 8001128:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800112a:	4b72      	ldr	r3, [pc, #456]	@ (80012f4 <menu+0x24c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b09      	cmp	r3, #9
 8001130:	d106      	bne.n	8001140 <menu+0x98>
 8001132:	4b72      	ldr	r3, [pc, #456]	@ (80012fc <menu+0x254>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d102      	bne.n	8001140 <menu+0x98>
			menuSayac = 13;
 800113a:	4b6e      	ldr	r3, [pc, #440]	@ (80012f4 <menu+0x24c>)
 800113c:	220d      	movs	r2, #13
 800113e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001140:	4b6c      	ldr	r3, [pc, #432]	@ (80012f4 <menu+0x24c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d10a      	bne.n	800115e <menu+0xb6>
 8001148:	4b6d      	ldr	r3, [pc, #436]	@ (8001300 <menu+0x258>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <menu+0xb0>
 8001150:	4b6b      	ldr	r3, [pc, #428]	@ (8001300 <menu+0x258>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d102      	bne.n	800115e <menu+0xb6>
			menuSayac = 11;
 8001158:	4b66      	ldr	r3, [pc, #408]	@ (80012f4 <menu+0x24c>)
 800115a:	220b      	movs	r2, #11
 800115c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800115e:	4b65      	ldr	r3, [pc, #404]	@ (80012f4 <menu+0x24c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d10e      	bne.n	8001184 <menu+0xdc>
 8001166:	4b67      	ldr	r3, [pc, #412]	@ (8001304 <menu+0x25c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d003      	beq.n	8001176 <menu+0xce>
 800116e:	4b65      	ldr	r3, [pc, #404]	@ (8001304 <menu+0x25c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d106      	bne.n	8001184 <menu+0xdc>
 8001176:	4b61      	ldr	r3, [pc, #388]	@ (80012fc <menu+0x254>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <menu+0xdc>
			menuSayac = 16;
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <menu+0x24c>)
 8001180:	2210      	movs	r2, #16
 8001182:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001184:	4b5b      	ldr	r3, [pc, #364]	@ (80012f4 <menu+0x24c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b0c      	cmp	r3, #12
 800118a:	d10e      	bne.n	80011aa <menu+0x102>
 800118c:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <menu+0x25c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d003      	beq.n	800119c <menu+0xf4>
 8001194:	4b5b      	ldr	r3, [pc, #364]	@ (8001304 <menu+0x25c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d106      	bne.n	80011aa <menu+0x102>
 800119c:	4b57      	ldr	r3, [pc, #348]	@ (80012fc <menu+0x254>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d102      	bne.n	80011aa <menu+0x102>
			menuSayac = 13;
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <menu+0x24c>)
 80011a6:	220d      	movs	r2, #13
 80011a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80011aa:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <menu+0x24c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d106      	bne.n	80011c0 <menu+0x118>
 80011b2:	4b55      	ldr	r3, [pc, #340]	@ (8001308 <menu+0x260>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <menu+0x118>
			menuSayac = 16;
 80011ba:	4b4e      	ldr	r3, [pc, #312]	@ (80012f4 <menu+0x24c>)
 80011bc:	2210      	movs	r2, #16
 80011be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <menu+0x24c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b18      	cmp	r3, #24
 80011c6:	d106      	bne.n	80011d6 <menu+0x12e>
 80011c8:	4b4b      	ldr	r3, [pc, #300]	@ (80012f8 <menu+0x250>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <menu+0x12e>
			menuSayac = 26;
 80011d0:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <menu+0x24c>)
 80011d2:	221a      	movs	r2, #26
 80011d4:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <menu+0x24c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b21      	cmp	r3, #33	@ 0x21
 80011dc:	d106      	bne.n	80011ec <menu+0x144>
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <menu+0x264>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <menu+0x144>
			menuSayac = 35;
 80011e6:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <menu+0x24c>)
 80011e8:	2223      	movs	r2, #35	@ 0x23
 80011ea:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011ec:	f002 fc9a 	bl	8003b24 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011f0:	2108      	movs	r1, #8
 80011f2:	4847      	ldr	r0, [pc, #284]	@ (8001310 <menu+0x268>)
 80011f4:	f009 ffaa 	bl	800b14c <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f040 8097 	bne.w	800132e <menu+0x286>
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <menu+0x248>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 808f 	beq.w	800132e <menu+0x286>
		if (menuSayac <= 1) {
 8001210:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <menu+0x24c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d802      	bhi.n	800121e <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001218:	4b36      	ldr	r3, [pc, #216]	@ (80012f4 <menu+0x24c>)
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800121e:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <menu+0x24c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3b01      	subs	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <menu+0x24c>)
 8001228:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800122a:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <menu+0x24c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b14      	cmp	r3, #20
 8001230:	d106      	bne.n	8001240 <menu+0x198>
 8001232:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <menu+0x250>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <menu+0x198>
			menuSayac = 17;
 800123a:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <menu+0x24c>)
 800123c:	2211      	movs	r2, #17
 800123e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <menu+0x24c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d106      	bne.n	8001256 <menu+0x1ae>
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <menu+0x254>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <menu+0x1ae>
			menuSayac = 7;
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <menu+0x24c>)
 8001252:	2207      	movs	r2, #7
 8001254:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <menu+0x24c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d106      	bne.n	800126c <menu+0x1c4>
 800125e:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <menu+0x254>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <menu+0x1c4>
			menuSayac = 12;
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <menu+0x24c>)
 8001268:	220c      	movs	r2, #12
 800126a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800126c:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <menu+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d106      	bne.n	8001282 <menu+0x1da>
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <menu+0x254>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d102      	bne.n	8001282 <menu+0x1da>
			menuSayac = 8;
 800127c:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <menu+0x24c>)
 800127e:	2208      	movs	r2, #8
 8001280:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <menu+0x24c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b0a      	cmp	r3, #10
 8001288:	d10a      	bne.n	80012a0 <menu+0x1f8>
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <menu+0x258>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d003      	beq.n	800129a <menu+0x1f2>
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <menu+0x258>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d102      	bne.n	80012a0 <menu+0x1f8>
			menuSayac = 9;
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <menu+0x24c>)
 800129c:	2209      	movs	r2, #9
 800129e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <menu+0x24c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d10a      	bne.n	80012be <menu+0x216>
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <menu+0x25c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d003      	beq.n	80012b8 <menu+0x210>
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <menu+0x25c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d102      	bne.n	80012be <menu+0x216>
			menuSayac = 11;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <menu+0x24c>)
 80012ba:	220b      	movs	r2, #11
 80012bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <menu+0x24c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	d106      	bne.n	80012d4 <menu+0x22c>
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <menu+0x260>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <menu+0x22c>
			menuSayac = 14;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <menu+0x24c>)
 80012d0:	220e      	movs	r2, #14
 80012d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <menu+0x24c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b19      	cmp	r3, #25
 80012da:	d11b      	bne.n	8001314 <menu+0x26c>
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <menu+0x250>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d117      	bne.n	8001314 <menu+0x26c>
			menuSayac = 23;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <menu+0x24c>)
 80012e6:	2217      	movs	r2, #23
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e013      	b.n	8001314 <menu+0x26c>
 80012ec:	40010800 	.word	0x40010800
 80012f0:	2000109b 	.word	0x2000109b
 80012f4:	2000106c 	.word	0x2000106c
 80012f8:	2000107b 	.word	0x2000107b
 80012fc:	20001074 	.word	0x20001074
 8001300:	20001075 	.word	0x20001075
 8001304:	20001076 	.word	0x20001076
 8001308:	20001077 	.word	0x20001077
 800130c:	2000108b 	.word	0x2000108b
 8001310:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001314:	4bb0      	ldr	r3, [pc, #704]	@ (80015d8 <menu+0x530>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b22      	cmp	r3, #34	@ 0x22
 800131a:	d106      	bne.n	800132a <menu+0x282>
 800131c:	4baf      	ldr	r3, [pc, #700]	@ (80015dc <menu+0x534>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <menu+0x282>
			menuSayac = 32;
 8001324:	4bac      	ldr	r3, [pc, #688]	@ (80015d8 <menu+0x530>)
 8001326:	2220      	movs	r2, #32
 8001328:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800132a:	f002 fbfb 	bl	8003b24 <bekle>
	}

	if (menuSayac == 0) {
 800132e:	4baa      	ldr	r3, [pc, #680]	@ (80015d8 <menu+0x530>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001336:	4aaa      	ldr	r2, [pc, #680]	@ (80015e0 <menu+0x538>)
 8001338:	2101      	movs	r1, #1
 800133a:	2001      	movs	r0, #1
 800133c:	f008 fc14 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001340:	4aa8      	ldr	r2, [pc, #672]	@ (80015e4 <menu+0x53c>)
 8001342:	2101      	movs	r1, #1
 8001344:	2002      	movs	r0, #2
 8001346:	f008 fc0f 	bl	8009b68 <lcd_print>
	}

	if (menuSayac == 1) {
 800134a:	4ba3      	ldr	r3, [pc, #652]	@ (80015d8 <menu+0x530>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	f040 81f4 	bne.w	800173c <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001354:	4aa4      	ldr	r2, [pc, #656]	@ (80015e8 <menu+0x540>)
 8001356:	2101      	movs	r1, #1
 8001358:	2001      	movs	r0, #1
 800135a:	f008 fc05 	bl	8009b68 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800135e:	4ba3      	ldr	r3, [pc, #652]	@ (80015ec <menu+0x544>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d115      	bne.n	8001392 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001366:	4aa2      	ldr	r2, [pc, #648]	@ (80015f0 <menu+0x548>)
 8001368:	2101      	movs	r1, #1
 800136a:	2002      	movs	r0, #2
 800136c:	f008 fbfc 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "   ");
 8001370:	4aa0      	ldr	r2, [pc, #640]	@ (80015f4 <menu+0x54c>)
 8001372:	210f      	movs	r1, #15
 8001374:	2002      	movs	r0, #2
 8001376:	f008 fbf7 	bl	8009b68 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800137a:	4b9f      	ldr	r3, [pc, #636]	@ (80015f8 <menu+0x550>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	220a      	movs	r2, #10
 8001380:	499e      	ldr	r1, [pc, #632]	@ (80015fc <menu+0x554>)
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fed8 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 8001388:	4a9c      	ldr	r2, [pc, #624]	@ (80015fc <menu+0x554>)
 800138a:	210e      	movs	r1, #14
 800138c:	2002      	movs	r0, #2
 800138e:	f008 fbeb 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001392:	4b96      	ldr	r3, [pc, #600]	@ (80015ec <menu+0x544>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d115      	bne.n	80013c6 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800139a:	4a99      	ldr	r2, [pc, #612]	@ (8001600 <menu+0x558>)
 800139c:	2101      	movs	r1, #1
 800139e:	2002      	movs	r0, #2
 80013a0:	f008 fbe2 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 80013a4:	4a97      	ldr	r2, [pc, #604]	@ (8001604 <menu+0x55c>)
 80013a6:	210f      	movs	r1, #15
 80013a8:	2002      	movs	r0, #2
 80013aa:	f008 fbdd 	bl	8009b68 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80013ae:	4b96      	ldr	r3, [pc, #600]	@ (8001608 <menu+0x560>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	220a      	movs	r2, #10
 80013b4:	4991      	ldr	r1, [pc, #580]	@ (80015fc <menu+0x554>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00c febe 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 80013bc:	4a8f      	ldr	r2, [pc, #572]	@ (80015fc <menu+0x554>)
 80013be:	210e      	movs	r1, #14
 80013c0:	2002      	movs	r0, #2
 80013c2:	f008 fbd1 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80013c6:	4b89      	ldr	r3, [pc, #548]	@ (80015ec <menu+0x544>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d115      	bne.n	80013fa <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80013ce:	4a8f      	ldr	r2, [pc, #572]	@ (800160c <menu+0x564>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	2002      	movs	r0, #2
 80013d4:	f008 fbc8 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 80013d8:	4a8a      	ldr	r2, [pc, #552]	@ (8001604 <menu+0x55c>)
 80013da:	210f      	movs	r1, #15
 80013dc:	2002      	movs	r0, #2
 80013de:	f008 fbc3 	bl	8009b68 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80013e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001610 <menu+0x568>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	220a      	movs	r2, #10
 80013e8:	4984      	ldr	r1, [pc, #528]	@ (80015fc <menu+0x554>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00c fea4 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 80013f0:	4a82      	ldr	r2, [pc, #520]	@ (80015fc <menu+0x554>)
 80013f2:	210e      	movs	r1, #14
 80013f4:	2002      	movs	r0, #2
 80013f6:	f008 fbb7 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80013fa:	4b7c      	ldr	r3, [pc, #496]	@ (80015ec <menu+0x544>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d115      	bne.n	800142e <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001402:	4a84      	ldr	r2, [pc, #528]	@ (8001614 <menu+0x56c>)
 8001404:	2101      	movs	r1, #1
 8001406:	2002      	movs	r0, #2
 8001408:	f008 fbae 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 800140c:	4a7d      	ldr	r2, [pc, #500]	@ (8001604 <menu+0x55c>)
 800140e:	210f      	movs	r1, #15
 8001410:	2002      	movs	r0, #2
 8001412:	f008 fba9 	bl	8009b68 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001416:	4b80      	ldr	r3, [pc, #512]	@ (8001618 <menu+0x570>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	220a      	movs	r2, #10
 800141c:	4977      	ldr	r1, [pc, #476]	@ (80015fc <menu+0x554>)
 800141e:	4618      	mov	r0, r3
 8001420:	f00c fe8a 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 8001424:	4a75      	ldr	r2, [pc, #468]	@ (80015fc <menu+0x554>)
 8001426:	210e      	movs	r1, #14
 8001428:	2002      	movs	r0, #2
 800142a:	f008 fb9d 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800142e:	4b6f      	ldr	r3, [pc, #444]	@ (80015ec <menu+0x544>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d115      	bne.n	8001462 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001436:	4a79      	ldr	r2, [pc, #484]	@ (800161c <menu+0x574>)
 8001438:	2101      	movs	r1, #1
 800143a:	2002      	movs	r0, #2
 800143c:	f008 fb94 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 8001440:	4a70      	ldr	r2, [pc, #448]	@ (8001604 <menu+0x55c>)
 8001442:	210f      	movs	r1, #15
 8001444:	2002      	movs	r0, #2
 8001446:	f008 fb8f 	bl	8009b68 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800144a:	4b75      	ldr	r3, [pc, #468]	@ (8001620 <menu+0x578>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	220a      	movs	r2, #10
 8001450:	496a      	ldr	r1, [pc, #424]	@ (80015fc <menu+0x554>)
 8001452:	4618      	mov	r0, r3
 8001454:	f00c fe70 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 8001458:	4a68      	ldr	r2, [pc, #416]	@ (80015fc <menu+0x554>)
 800145a:	210e      	movs	r1, #14
 800145c:	2002      	movs	r0, #2
 800145e:	f008 fb83 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001462:	4b62      	ldr	r3, [pc, #392]	@ (80015ec <menu+0x544>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b05      	cmp	r3, #5
 8001468:	d115      	bne.n	8001496 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800146a:	4a6e      	ldr	r2, [pc, #440]	@ (8001624 <menu+0x57c>)
 800146c:	2101      	movs	r1, #1
 800146e:	2002      	movs	r0, #2
 8001470:	f008 fb7a 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 8001474:	4a63      	ldr	r2, [pc, #396]	@ (8001604 <menu+0x55c>)
 8001476:	210f      	movs	r1, #15
 8001478:	2002      	movs	r0, #2
 800147a:	f008 fb75 	bl	8009b68 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800147e:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <menu+0x580>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	220a      	movs	r2, #10
 8001484:	495d      	ldr	r1, [pc, #372]	@ (80015fc <menu+0x554>)
 8001486:	4618      	mov	r0, r3
 8001488:	f00c fe56 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 800148c:	4a5b      	ldr	r2, [pc, #364]	@ (80015fc <menu+0x554>)
 800148e:	210e      	movs	r1, #14
 8001490:	2002      	movs	r0, #2
 8001492:	f008 fb69 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001496:	4b55      	ldr	r3, [pc, #340]	@ (80015ec <menu+0x544>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b06      	cmp	r3, #6
 800149c:	d115      	bne.n	80014ca <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800149e:	4a63      	ldr	r2, [pc, #396]	@ (800162c <menu+0x584>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	2002      	movs	r0, #2
 80014a4:	f008 fb60 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 80014a8:	4a56      	ldr	r2, [pc, #344]	@ (8001604 <menu+0x55c>)
 80014aa:	210f      	movs	r1, #15
 80014ac:	2002      	movs	r0, #2
 80014ae:	f008 fb5b 	bl	8009b68 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80014b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001630 <menu+0x588>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	220a      	movs	r2, #10
 80014b8:	4950      	ldr	r1, [pc, #320]	@ (80015fc <menu+0x554>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00c fe3c 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 80014c0:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <menu+0x554>)
 80014c2:	210e      	movs	r1, #14
 80014c4:	2002      	movs	r0, #2
 80014c6:	f008 fb4f 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80014ca:	4b48      	ldr	r3, [pc, #288]	@ (80015ec <menu+0x544>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d115      	bne.n	80014fe <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80014d2:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <menu+0x58c>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2002      	movs	r0, #2
 80014d8:	f008 fb46 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 80014dc:	4a49      	ldr	r2, [pc, #292]	@ (8001604 <menu+0x55c>)
 80014de:	210f      	movs	r1, #15
 80014e0:	2002      	movs	r0, #2
 80014e2:	f008 fb41 	bl	8009b68 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80014e6:	4b54      	ldr	r3, [pc, #336]	@ (8001638 <menu+0x590>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	220a      	movs	r2, #10
 80014ec:	4943      	ldr	r1, [pc, #268]	@ (80015fc <menu+0x554>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00c fe22 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 80014f4:	4a41      	ldr	r2, [pc, #260]	@ (80015fc <menu+0x554>)
 80014f6:	210e      	movs	r1, #14
 80014f8:	2002      	movs	r0, #2
 80014fa:	f008 fb35 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <menu+0x544>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b08      	cmp	r3, #8
 8001504:	d115      	bne.n	8001532 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001506:	4a4d      	ldr	r2, [pc, #308]	@ (800163c <menu+0x594>)
 8001508:	2101      	movs	r1, #1
 800150a:	2002      	movs	r0, #2
 800150c:	f008 fb2c 	bl	8009b68 <lcd_print>
			lcd_print(2, 15, "  ");
 8001510:	4a3c      	ldr	r2, [pc, #240]	@ (8001604 <menu+0x55c>)
 8001512:	210f      	movs	r1, #15
 8001514:	2002      	movs	r0, #2
 8001516:	f008 fb27 	bl	8009b68 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <menu+0x598>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	220a      	movs	r2, #10
 8001520:	4936      	ldr	r1, [pc, #216]	@ (80015fc <menu+0x554>)
 8001522:	4618      	mov	r0, r3
 8001524:	f00c fe08 	bl	800e138 <itoa>
			lcd_print(2, 14, snum);
 8001528:	4a34      	ldr	r2, [pc, #208]	@ (80015fc <menu+0x554>)
 800152a:	210e      	movs	r1, #14
 800152c:	2002      	movs	r0, #2
 800152e:	f008 fb1b 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001532:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <menu+0x544>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b09      	cmp	r3, #9
 8001538:	d115      	bne.n	8001566 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 800153a:	4a42      	ldr	r2, [pc, #264]	@ (8001644 <menu+0x59c>)
 800153c:	2101      	movs	r1, #1
 800153e:	2002      	movs	r0, #2
 8001540:	f008 fb12 	bl	8009b68 <lcd_print>
			lcd_print(2, 16, " ");
 8001544:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <menu+0x5a0>)
 8001546:	2110      	movs	r1, #16
 8001548:	2002      	movs	r0, #2
 800154a:	f008 fb0d 	bl	8009b68 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <menu+0x5a4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	220a      	movs	r2, #10
 8001554:	4929      	ldr	r1, [pc, #164]	@ (80015fc <menu+0x554>)
 8001556:	4618      	mov	r0, r3
 8001558:	f00c fdee 	bl	800e138 <itoa>
			lcd_print(2, 15, snum);
 800155c:	4a27      	ldr	r2, [pc, #156]	@ (80015fc <menu+0x554>)
 800155e:	210f      	movs	r1, #15
 8001560:	2002      	movs	r0, #2
 8001562:	f008 fb01 	bl	8009b68 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <menu+0x544>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d104      	bne.n	8001578 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800156e:	4a38      	ldr	r2, [pc, #224]	@ (8001650 <menu+0x5a8>)
 8001570:	2101      	movs	r1, #1
 8001572:	2002      	movs	r0, #2
 8001574:	f008 faf8 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001578:	2102      	movs	r1, #2
 800157a:	4836      	ldr	r0, [pc, #216]	@ (8001654 <menu+0x5ac>)
 800157c:	f009 fde6 	bl	800b14c <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d119      	bne.n	80015ba <menu+0x512>
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <menu+0x5b0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f083 0301 	eor.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d012      	beq.n	80015ba <menu+0x512>
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <menu+0x5b4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10e      	bne.n	80015ba <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <menu+0x544>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <menu+0x544>)
 80015a6:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <menu+0x544>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b0a      	cmp	r3, #10
 80015ae:	d902      	bls.n	80015b6 <menu+0x50e>
				hataGostermeSirasi = 0;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <menu+0x544>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80015b6:	f002 fab5 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80015ba:	2104      	movs	r1, #4
 80015bc:	4825      	ldr	r0, [pc, #148]	@ (8001654 <menu+0x5ac>)
 80015be:	f009 fdc5 	bl	800b14c <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d15e      	bne.n	8001686 <menu+0x5de>
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <menu+0x5b0>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d057      	beq.n	8001686 <menu+0x5de>
 80015d6:	e043      	b.n	8001660 <menu+0x5b8>
 80015d8:	2000106c 	.word	0x2000106c
 80015dc:	2000108b 	.word	0x2000108b
 80015e0:	200010d4 	.word	0x200010d4
 80015e4:	200010e8 	.word	0x200010e8
 80015e8:	200010fc 	.word	0x200010fc
 80015ec:	2000106e 	.word	0x2000106e
 80015f0:	20001110 	.word	0x20001110
 80015f4:	0800e384 	.word	0x0800e384
 80015f8:	2000108e 	.word	0x2000108e
 80015fc:	2000100c 	.word	0x2000100c
 8001600:	20001124 	.word	0x20001124
 8001604:	0800e388 	.word	0x0800e388
 8001608:	2000108f 	.word	0x2000108f
 800160c:	20001138 	.word	0x20001138
 8001610:	20001090 	.word	0x20001090
 8001614:	2000114c 	.word	0x2000114c
 8001618:	20001091 	.word	0x20001091
 800161c:	20001160 	.word	0x20001160
 8001620:	20001092 	.word	0x20001092
 8001624:	20001174 	.word	0x20001174
 8001628:	20001093 	.word	0x20001093
 800162c:	20001188 	.word	0x20001188
 8001630:	20001094 	.word	0x20001094
 8001634:	2000119c 	.word	0x2000119c
 8001638:	20001095 	.word	0x20001095
 800163c:	200011b0 	.word	0x200011b0
 8001640:	20001096 	.word	0x20001096
 8001644:	200011c4 	.word	0x200011c4
 8001648:	0800e38c 	.word	0x0800e38c
 800164c:	20001097 	.word	0x20001097
 8001650:	200011d8 	.word	0x200011d8
 8001654:	40010800 	.word	0x40010800
 8001658:	2000109b 	.word	0x2000109b
 800165c:	2000107b 	.word	0x2000107b
 8001660:	4b8a      	ldr	r3, [pc, #552]	@ (800188c <menu+0x7e4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10e      	bne.n	8001686 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001668:	4b89      	ldr	r3, [pc, #548]	@ (8001890 <menu+0x7e8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b87      	ldr	r3, [pc, #540]	@ (8001890 <menu+0x7e8>)
 8001672:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001674:	4b86      	ldr	r3, [pc, #536]	@ (8001890 <menu+0x7e8>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b0b      	cmp	r3, #11
 800167a:	d902      	bls.n	8001682 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 800167c:	4b84      	ldr	r3, [pc, #528]	@ (8001890 <menu+0x7e8>)
 800167e:	220a      	movs	r2, #10
 8001680:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001682:	f002 fa4f 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001686:	2108      	movs	r1, #8
 8001688:	4882      	ldr	r0, [pc, #520]	@ (8001894 <menu+0x7ec>)
 800168a:	f009 fd5f 	bl	800b14c <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d153      	bne.n	800173c <menu+0x694>
 8001694:	4b80      	ldr	r3, [pc, #512]	@ (8001898 <menu+0x7f0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d04c      	beq.n	800173c <menu+0x694>
 80016a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001890 <menu+0x7e8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b0a      	cmp	r3, #10
 80016a8:	d148      	bne.n	800173c <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 80016aa:	4b7c      	ldr	r3, [pc, #496]	@ (800189c <menu+0x7f4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	4b7b      	ldr	r3, [pc, #492]	@ (80018a0 <menu+0x7f8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80016b8:	4b7a      	ldr	r3, [pc, #488]	@ (80018a4 <menu+0x7fc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <menu+0x7f8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80016c6:	4b78      	ldr	r3, [pc, #480]	@ (80018a8 <menu+0x800>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <menu+0x7f8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80016d4:	4b75      	ldr	r3, [pc, #468]	@ (80018ac <menu+0x804>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <menu+0x7f8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80016e2:	4b73      	ldr	r3, [pc, #460]	@ (80018b0 <menu+0x808>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <menu+0x7f8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80016f0:	4b70      	ldr	r3, [pc, #448]	@ (80018b4 <menu+0x80c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <menu+0x7f8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <menu+0x810>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	4b66      	ldr	r3, [pc, #408]	@ (80018a0 <menu+0x7f8>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 800170c:	4b6b      	ldr	r3, [pc, #428]	@ (80018bc <menu+0x814>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <menu+0x7f8>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800171a:	4b69      	ldr	r3, [pc, #420]	@ (80018c0 <menu+0x818>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	4b5f      	ldr	r3, [pc, #380]	@ (80018a0 <menu+0x7f8>)
 8001722:	2200      	movs	r2, #0
 8001724:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <menu+0x81c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	4b5c      	ldr	r3, [pc, #368]	@ (80018a0 <menu+0x7f8>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001736:	4b64      	ldr	r3, [pc, #400]	@ (80018c8 <menu+0x820>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 800173c:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <menu+0x824>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	f040 808e 	bne.w	8001862 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001746:	4a62      	ldr	r2, [pc, #392]	@ (80018d0 <menu+0x828>)
 8001748:	2101      	movs	r1, #1
 800174a:	2001      	movs	r0, #1
 800174c:	f008 fa0c 	bl	8009b68 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001750:	4b4e      	ldr	r3, [pc, #312]	@ (800188c <menu+0x7e4>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d003      	beq.n	8001760 <menu+0x6b8>
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <menu+0x7e4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d104      	bne.n	800176a <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001760:	4a5c      	ldr	r2, [pc, #368]	@ (80018d4 <menu+0x82c>)
 8001762:	2101      	movs	r1, #1
 8001764:	2002      	movs	r0, #2
 8001766:	f008 f9ff 	bl	8009b68 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <menu+0x830>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d108      	bne.n	8001784 <menu+0x6dc>
 8001772:	4b46      	ldr	r3, [pc, #280]	@ (800188c <menu+0x7e4>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d104      	bne.n	8001784 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 800177a:	4a58      	ldr	r2, [pc, #352]	@ (80018dc <menu+0x834>)
 800177c:	2101      	movs	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f008 f9f2 	bl	8009b68 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001784:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <menu+0x830>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <menu+0x6f6>
 800178c:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <menu+0x7e4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d104      	bne.n	800179e <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <menu+0x838>)
 8001796:	2101      	movs	r1, #1
 8001798:	2002      	movs	r0, #2
 800179a:	f008 f9e5 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800179e:	2102      	movs	r1, #2
 80017a0:	483c      	ldr	r0, [pc, #240]	@ (8001894 <menu+0x7ec>)
 80017a2:	f009 fcd3 	bl	800b14c <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d119      	bne.n	80017e0 <menu+0x738>
 80017ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <menu+0x7f0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f083 0301 	eor.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d012      	beq.n	80017e0 <menu+0x738>
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <menu+0x7e4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10e      	bne.n	80017e0 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 80017c2:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <menu+0x830>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b43      	ldr	r3, [pc, #268]	@ (80018d8 <menu+0x830>)
 80017cc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80017ce:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <menu+0x830>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d902      	bls.n	80017dc <menu+0x734>
				calismaSekli = 0;
 80017d6:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <menu+0x830>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017dc:	f002 f9a2 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017e0:	2104      	movs	r1, #4
 80017e2:	482c      	ldr	r0, [pc, #176]	@ (8001894 <menu+0x7ec>)
 80017e4:	f009 fcb2 	bl	800b14c <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d119      	bne.n	8001822 <menu+0x77a>
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <menu+0x7f0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <menu+0x77a>
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <menu+0x7e4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10e      	bne.n	8001822 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <menu+0x830>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3b01      	subs	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <menu+0x830>)
 800180e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <menu+0x830>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <menu+0x776>
	    		calismaSekli = 1;
 8001818:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <menu+0x830>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800181e:	f002 f981 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001822:	2108      	movs	r1, #8
 8001824:	481b      	ldr	r0, [pc, #108]	@ (8001894 <menu+0x7ec>)
 8001826:	f009 fc91 	bl	800b14c <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d118      	bne.n	8001862 <menu+0x7ba>
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <menu+0x7f0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d011      	beq.n	8001862 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <menu+0x830>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <menu+0x7f8>)
 8001844:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <menu+0x830>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <menu+0x7b4>
				altLimit = 1;
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <menu+0x83c>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <menu+0x83c>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <menu+0x7f8>)
 800185a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <menu+0x820>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <menu+0x824>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b03      	cmp	r3, #3
 8001868:	f040 809c 	bne.w	80019a4 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 800186c:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <menu+0x840>)
 800186e:	2101      	movs	r1, #1
 8001870:	2001      	movs	r0, #1
 8001872:	f008 f979 	bl	8009b68 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <menu+0x844>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d13a      	bne.n	80018f4 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <menu+0x848>)
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f008 f970 	bl	8009b68 <lcd_print>
 8001888:	e03d      	b.n	8001906 <menu+0x85e>
 800188a:	bf00      	nop
 800188c:	2000107b 	.word	0x2000107b
 8001890:	2000106e 	.word	0x2000106e
 8001894:	40010800 	.word	0x40010800
 8001898:	2000109b 	.word	0x2000109b
 800189c:	2000108e 	.word	0x2000108e
 80018a0:	20000f9c 	.word	0x20000f9c
 80018a4:	2000108f 	.word	0x2000108f
 80018a8:	20001090 	.word	0x20001090
 80018ac:	20001091 	.word	0x20001091
 80018b0:	20001092 	.word	0x20001092
 80018b4:	20001093 	.word	0x20001093
 80018b8:	20001094 	.word	0x20001094
 80018bc:	20001095 	.word	0x20001095
 80018c0:	20001096 	.word	0x20001096
 80018c4:	20001097 	.word	0x20001097
 80018c8:	20001098 	.word	0x20001098
 80018cc:	2000106c 	.word	0x2000106c
 80018d0:	200011ec 	.word	0x200011ec
 80018d4:	20001200 	.word	0x20001200
 80018d8:	2000106d 	.word	0x2000106d
 80018dc:	20001214 	.word	0x20001214
 80018e0:	20001228 	.word	0x20001228
 80018e4:	20001072 	.word	0x20001072
 80018e8:	2000123c 	.word	0x2000123c
 80018ec:	20001070 	.word	0x20001070
 80018f0:	20001250 	.word	0x20001250
		} else if(emniyetCercevesi == 1) {
 80018f4:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa4 <menu+0x9fc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d104      	bne.n	8001906 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 80018fc:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa8 <menu+0xa00>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f008 f931 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001906:	2102      	movs	r1, #2
 8001908:	4868      	ldr	r0, [pc, #416]	@ (8001aac <menu+0xa04>)
 800190a:	f009 fc1f 	bl	800b14c <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d115      	bne.n	8001940 <menu+0x898>
 8001914:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <menu+0xa08>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00e      	beq.n	8001940 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001922:	4b60      	ldr	r3, [pc, #384]	@ (8001aa4 <menu+0x9fc>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa4 <menu+0x9fc>)
 800192c:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800192e:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa4 <menu+0x9fc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d902      	bls.n	800193c <menu+0x894>
				emniyetCercevesi = 0;
 8001936:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa4 <menu+0x9fc>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800193c:	f002 f8f2 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001940:	2104      	movs	r1, #4
 8001942:	485a      	ldr	r0, [pc, #360]	@ (8001aac <menu+0xa04>)
 8001944:	f009 fc02 	bl	800b14c <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	d115      	bne.n	800197a <menu+0x8d2>
 800194e:	4b58      	ldr	r3, [pc, #352]	@ (8001ab0 <menu+0xa08>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f083 0301 	eor.w	r3, r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 800195c:	4b51      	ldr	r3, [pc, #324]	@ (8001aa4 <menu+0x9fc>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <menu+0x9fc>)
 8001966:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001968:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa4 <menu+0x9fc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001970:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <menu+0x9fc>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001976:	f002 f8d5 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800197a:	2108      	movs	r1, #8
 800197c:	484b      	ldr	r0, [pc, #300]	@ (8001aac <menu+0xa04>)
 800197e:	f009 fbe5 	bl	800b14c <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10d      	bne.n	80019a4 <menu+0x8fc>
 8001988:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <menu+0xa08>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	f083 0301 	eor.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001996:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <menu+0x9fc>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <menu+0xa0c>)
 800199c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800199e:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <menu+0xa10>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80019a4:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <menu+0xa14>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d166      	bne.n	8001a7a <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 80019ac:	4a44      	ldr	r2, [pc, #272]	@ (8001ac0 <menu+0xa18>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	2001      	movs	r0, #1
 80019b2:	f008 f8d9 	bl	8009b68 <lcd_print>

		if(yavaslamaLimit == 0) {
 80019b6:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <menu+0xa1c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <menu+0x922>
			lcd_print(2, 1, pasifText);
 80019be:	4a42      	ldr	r2, [pc, #264]	@ (8001ac8 <menu+0xa20>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	2002      	movs	r0, #2
 80019c4:	f008 f8d0 	bl	8009b68 <lcd_print>
 80019c8:	e008      	b.n	80019dc <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 80019ca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <menu+0xa1c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d104      	bne.n	80019dc <menu+0x934>
			lcd_print(2, 1, aktifText);
 80019d2:	4a3e      	ldr	r2, [pc, #248]	@ (8001acc <menu+0xa24>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	2002      	movs	r0, #2
 80019d8:	f008 f8c6 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019dc:	2102      	movs	r1, #2
 80019de:	4833      	ldr	r0, [pc, #204]	@ (8001aac <menu+0xa04>)
 80019e0:	f009 fbb4 	bl	800b14c <HAL_GPIO_ReadPin>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d115      	bne.n	8001a16 <menu+0x96e>
 80019ea:	4b31      	ldr	r3, [pc, #196]	@ (8001ab0 <menu+0xa08>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 80019f8:	4b32      	ldr	r3, [pc, #200]	@ (8001ac4 <menu+0xa1c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <menu+0xa1c>)
 8001a02:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <menu+0xa1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d902      	bls.n	8001a12 <menu+0x96a>
				yavaslamaLimit = 0;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <menu+0xa1c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a12:	f002 f887 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a16:	2104      	movs	r1, #4
 8001a18:	4824      	ldr	r0, [pc, #144]	@ (8001aac <menu+0xa04>)
 8001a1a:	f009 fb97 	bl	800b14c <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d115      	bne.n	8001a50 <menu+0x9a8>
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <menu+0xa08>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f083 0301 	eor.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <menu+0xa1c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <menu+0xa1c>)
 8001a3c:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <menu+0xa1c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <menu+0xa1c>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a4c:	f002 f86a 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a50:	2108      	movs	r1, #8
 8001a52:	4816      	ldr	r0, [pc, #88]	@ (8001aac <menu+0xa04>)
 8001a54:	f009 fb7a 	bl	800b14c <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10d      	bne.n	8001a7a <menu+0x9d2>
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <menu+0xa08>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <menu+0xa1c>)
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <menu+0xa0c>)
 8001a72:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <menu+0xa10>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <menu+0xa14>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	f040 80aa 	bne.w	8001bd8 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <menu+0xa28>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f008 f86d 	bl	8009b68 <lcd_print>

		if(altLimit == 0) {
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <menu+0xa2c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d120      	bne.n	8001ad8 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <menu+0xa20>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f008 f864 	bl	8009b68 <lcd_print>
 8001aa0:	e023      	b.n	8001aea <menu+0xa42>
 8001aa2:	bf00      	nop
 8001aa4:	20001070 	.word	0x20001070
 8001aa8:	200000ec 	.word	0x200000ec
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	2000109b 	.word	0x2000109b
 8001ab4:	20000f9c 	.word	0x20000f9c
 8001ab8:	20001098 	.word	0x20001098
 8001abc:	2000106c 	.word	0x2000106c
 8001ac0:	20001278 	.word	0x20001278
 8001ac4:	20001071 	.word	0x20001071
 8001ac8:	20001250 	.word	0x20001250
 8001acc:	20001264 	.word	0x20001264
 8001ad0:	2000128c 	.word	0x2000128c
 8001ad4:	20001072 	.word	0x20001072
		} else if(altLimit == 1) {
 8001ad8:	4b89      	ldr	r3, [pc, #548]	@ (8001d00 <menu+0xc58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d104      	bne.n	8001aea <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001ae0:	4a88      	ldr	r2, [pc, #544]	@ (8001d04 <menu+0xc5c>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f008 f83f 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001aea:	2102      	movs	r1, #2
 8001aec:	4886      	ldr	r0, [pc, #536]	@ (8001d08 <menu+0xc60>)
 8001aee:	f009 fb2d 	bl	800b14c <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d119      	bne.n	8001b2c <menu+0xa84>
 8001af8:	4b84      	ldr	r3, [pc, #528]	@ (8001d0c <menu+0xc64>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f083 0301 	eor.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <menu+0xa84>
 8001b06:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <menu+0xc68>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10e      	bne.n	8001b2c <menu+0xa84>
			altLimit = altLimit + 1;
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d00 <menu+0xc58>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <menu+0xc58>)
 8001b18:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001b1a:	4b79      	ldr	r3, [pc, #484]	@ (8001d00 <menu+0xc58>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d902      	bls.n	8001b28 <menu+0xa80>
				altLimit = 0;
 8001b22:	4b77      	ldr	r3, [pc, #476]	@ (8001d00 <menu+0xc58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b28:	f001 fffc 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4876      	ldr	r0, [pc, #472]	@ (8001d08 <menu+0xc60>)
 8001b30:	f009 fb0c 	bl	800b14c <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d119      	bne.n	8001b6e <menu+0xac6>
 8001b3a:	4b74      	ldr	r3, [pc, #464]	@ (8001d0c <menu+0xc64>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d012      	beq.n	8001b6e <menu+0xac6>
 8001b48:	4b71      	ldr	r3, [pc, #452]	@ (8001d10 <menu+0xc68>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10e      	bne.n	8001b6e <menu+0xac6>
			altLimit = altLimit - 1;
 8001b50:	4b6b      	ldr	r3, [pc, #428]	@ (8001d00 <menu+0xc58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b69      	ldr	r3, [pc, #420]	@ (8001d00 <menu+0xc58>)
 8001b5a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001b5c:	4b68      	ldr	r3, [pc, #416]	@ (8001d00 <menu+0xc58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <menu+0xac2>
		   		altLimit = 1;
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <menu+0xc58>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b6a:	f001 ffdb 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6e:	2108      	movs	r1, #8
 8001b70:	4865      	ldr	r0, [pc, #404]	@ (8001d08 <menu+0xc60>)
 8001b72:	f009 faeb 	bl	800b14c <HAL_GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d12d      	bne.n	8001bd8 <menu+0xb30>
 8001b7c:	4b63      	ldr	r3, [pc, #396]	@ (8001d0c <menu+0xc64>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d026      	beq.n	8001bd8 <menu+0xb30>
			eepromData[5] = altLimit;
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d00 <menu+0xc58>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <menu+0xc6c>)
 8001b90:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001b92:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <menu+0xc58>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d110      	bne.n	8001bbc <menu+0xb14>
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d18 <menu+0xc70>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <menu+0xb02>
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <menu+0xc70>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d108      	bne.n	8001bbc <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001baa:	4b5b      	ldr	r3, [pc, #364]	@ (8001d18 <menu+0xc70>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001bb0:	4b59      	ldr	r3, [pc, #356]	@ (8001d18 <menu+0xc70>)
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b57      	ldr	r3, [pc, #348]	@ (8001d14 <menu+0xc6c>)
 8001bb6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001bba:	e00a      	b.n	8001bd2 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <menu+0xc58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001bc4:	4b55      	ldr	r3, [pc, #340]	@ (8001d1c <menu+0xc74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001bca:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <menu+0xc74>)
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	4b51      	ldr	r3, [pc, #324]	@ (8001d14 <menu+0xc6c>)
 8001bd0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001bd2:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <menu+0xc78>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001bd8:	4b52      	ldr	r3, [pc, #328]	@ (8001d24 <menu+0xc7c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d166      	bne.n	8001cae <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001be0:	4a51      	ldr	r2, [pc, #324]	@ (8001d28 <menu+0xc80>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2001      	movs	r0, #1
 8001be6:	f007 ffbf 	bl	8009b68 <lcd_print>

		if(basincSalteri == 0) {
 8001bea:	4b50      	ldr	r3, [pc, #320]	@ (8001d2c <menu+0xc84>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001bf2:	4a4f      	ldr	r2, [pc, #316]	@ (8001d30 <menu+0xc88>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f007 ffb6 	bl	8009b68 <lcd_print>
 8001bfc:	e008      	b.n	8001c10 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <menu+0xc84>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d104      	bne.n	8001c10 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001c06:	4a3f      	ldr	r2, [pc, #252]	@ (8001d04 <menu+0xc5c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f007 ffac 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c10:	2102      	movs	r1, #2
 8001c12:	483d      	ldr	r0, [pc, #244]	@ (8001d08 <menu+0xc60>)
 8001c14:	f009 fa9a 	bl	800b14c <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d115      	bne.n	8001c4a <menu+0xba2>
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <menu+0xc64>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <menu+0xc84>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <menu+0xc84>)
 8001c36:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <menu+0xc84>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d902      	bls.n	8001c46 <menu+0xb9e>
				basincSalteri = 0;
 8001c40:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <menu+0xc84>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c46:	f001 ff6d 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	482e      	ldr	r0, [pc, #184]	@ (8001d08 <menu+0xc60>)
 8001c4e:	f009 fa7d 	bl	800b14c <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d115      	bne.n	8001c84 <menu+0xbdc>
 8001c58:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <menu+0xc64>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <menu+0xc84>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <menu+0xc84>)
 8001c70:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <menu+0xc84>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <menu+0xbd8>
		   		basincSalteri = 1;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <menu+0xc84>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c80:	f001 ff50 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c84:	2108      	movs	r1, #8
 8001c86:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <menu+0xc60>)
 8001c88:	f009 fa60 	bl	800b14c <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10d      	bne.n	8001cae <menu+0xc06>
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <menu+0xc64>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <menu+0xc84>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <menu+0xc6c>)
 8001ca6:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <menu+0xc78>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <menu+0xc7c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	f040 80a9 	bne.w	8001e0a <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <menu+0xc8c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f007 ff53 	bl	8009b68 <lcd_print>

		if(kapiSecimleri == 0) {
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <menu+0xc90>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001cca:	4a19      	ldr	r2, [pc, #100]	@ (8001d30 <menu+0xc88>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f007 ff4a 	bl	8009b68 <lcd_print>
 8001cd4:	e03f      	b.n	8001d56 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <menu+0xc90>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <menu+0xc94>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f007 ff40 	bl	8009b68 <lcd_print>
 8001ce8:	e035      	b.n	8001d56 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <menu+0xc90>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d128      	bne.n	8001d44 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001cf2:	4a13      	ldr	r2, [pc, #76]	@ (8001d40 <menu+0xc98>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f007 ff36 	bl	8009b68 <lcd_print>
 8001cfc:	e02b      	b.n	8001d56 <menu+0xcae>
 8001cfe:	bf00      	nop
 8001d00:	20001072 	.word	0x20001072
 8001d04:	20001264 	.word	0x20001264
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	2000109b 	.word	0x2000109b
 8001d10:	2000106d 	.word	0x2000106d
 8001d14:	20000f9c 	.word	0x20000f9c
 8001d18:	20001079 	.word	0x20001079
 8001d1c:	2000107f 	.word	0x2000107f
 8001d20:	20001098 	.word	0x20001098
 8001d24:	2000106c 	.word	0x2000106c
 8001d28:	200012a0 	.word	0x200012a0
 8001d2c:	20001073 	.word	0x20001073
 8001d30:	20001250 	.word	0x20001250
 8001d34:	200012b4 	.word	0x200012b4
 8001d38:	20001074 	.word	0x20001074
 8001d3c:	200012c8 	.word	0x200012c8
 8001d40:	200012dc 	.word	0x200012dc
		} else if(kapiSecimleri == 3) {
 8001d44:	4b76      	ldr	r3, [pc, #472]	@ (8001f20 <menu+0xe78>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d104      	bne.n	8001d56 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001d4c:	4a75      	ldr	r2, [pc, #468]	@ (8001f24 <menu+0xe7c>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2002      	movs	r0, #2
 8001d52:	f007 ff09 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d56:	2102      	movs	r1, #2
 8001d58:	4873      	ldr	r0, [pc, #460]	@ (8001f28 <menu+0xe80>)
 8001d5a:	f009 f9f7 	bl	800b14c <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d115      	bne.n	8001d90 <menu+0xce8>
 8001d64:	4b71      	ldr	r3, [pc, #452]	@ (8001f2c <menu+0xe84>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00e      	beq.n	8001d90 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001d72:	4b6b      	ldr	r3, [pc, #428]	@ (8001f20 <menu+0xe78>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b69      	ldr	r3, [pc, #420]	@ (8001f20 <menu+0xe78>)
 8001d7c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001d7e:	4b68      	ldr	r3, [pc, #416]	@ (8001f20 <menu+0xe78>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d902      	bls.n	8001d8c <menu+0xce4>
				kapiSecimleri = 0;
 8001d86:	4b66      	ldr	r3, [pc, #408]	@ (8001f20 <menu+0xe78>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d8c:	f001 feca 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d90:	2104      	movs	r1, #4
 8001d92:	4865      	ldr	r0, [pc, #404]	@ (8001f28 <menu+0xe80>)
 8001d94:	f009 f9da 	bl	800b14c <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d115      	bne.n	8001dca <menu+0xd22>
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <menu+0xe84>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001dac:	4b5c      	ldr	r3, [pc, #368]	@ (8001f20 <menu+0xe78>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f20 <menu+0xe78>)
 8001db6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001db8:	4b59      	ldr	r3, [pc, #356]	@ (8001f20 <menu+0xe78>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d902      	bls.n	8001dc6 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001dc0:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <menu+0xe78>)
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dc6:	f001 fead 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dca:	2108      	movs	r1, #8
 8001dcc:	4856      	ldr	r0, [pc, #344]	@ (8001f28 <menu+0xe80>)
 8001dce:	f009 f9bd 	bl	800b14c <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d118      	bne.n	8001e0a <menu+0xd62>
 8001dd8:	4b54      	ldr	r3, [pc, #336]	@ (8001f2c <menu+0xe84>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d011      	beq.n	8001e0a <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001de6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f20 <menu+0xe78>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b51      	ldr	r3, [pc, #324]	@ (8001f30 <menu+0xe88>)
 8001dec:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001dee:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <menu+0xe78>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <menu+0xd5c>
				altLimit = 1;
 8001df6:	4b4f      	ldr	r3, [pc, #316]	@ (8001f34 <menu+0xe8c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <menu+0xe8c>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <menu+0xe88>)
 8001e02:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e04:	4b4c      	ldr	r3, [pc, #304]	@ (8001f38 <menu+0xe90>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f3c <menu+0xe94>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d167      	bne.n	8001ee2 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001e12:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <menu+0xe98>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	2001      	movs	r0, #1
 8001e18:	f007 fea6 	bl	8009b68 <lcd_print>

		if(kapiAcTipi == 0) {
 8001e1c:	4b49      	ldr	r3, [pc, #292]	@ (8001f44 <menu+0xe9c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001e24:	4a48      	ldr	r2, [pc, #288]	@ (8001f48 <menu+0xea0>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f007 fe9d 	bl	8009b68 <lcd_print>
 8001e2e:	e008      	b.n	8001e42 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001e30:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <menu+0xe9c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d104      	bne.n	8001e42 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001e38:	4a44      	ldr	r2, [pc, #272]	@ (8001f4c <menu+0xea4>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f007 fe93 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e42:	2102      	movs	r1, #2
 8001e44:	4838      	ldr	r0, [pc, #224]	@ (8001f28 <menu+0xe80>)
 8001e46:	f009 f981 	bl	800b14c <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d115      	bne.n	8001e7c <menu+0xdd4>
 8001e50:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <menu+0xe84>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00e      	beq.n	8001e7c <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <menu+0xe9c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b37      	ldr	r3, [pc, #220]	@ (8001f44 <menu+0xe9c>)
 8001e68:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001e6a:	4b36      	ldr	r3, [pc, #216]	@ (8001f44 <menu+0xe9c>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d902      	bls.n	8001e78 <menu+0xdd0>
				kapiAcTipi = 0;
 8001e72:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <menu+0xe9c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e78:	f001 fe54 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	482a      	ldr	r0, [pc, #168]	@ (8001f28 <menu+0xe80>)
 8001e80:	f009 f964 	bl	800b14c <HAL_GPIO_ReadPin>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d115      	bne.n	8001eb6 <menu+0xe0e>
 8001e8a:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <menu+0xe84>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	f083 0301 	eor.w	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001e98:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <menu+0xe9c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <menu+0xe9c>)
 8001ea2:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001ea4:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <menu+0xe9c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <menu+0xe9c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001eb2:	f001 fe37 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb6:	2108      	movs	r1, #8
 8001eb8:	481b      	ldr	r0, [pc, #108]	@ (8001f28 <menu+0xe80>)
 8001eba:	f009 f947 	bl	800b14c <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10e      	bne.n	8001ee2 <menu+0xe3a>
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <menu+0xe84>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <menu+0xe9c>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <menu+0xe88>)
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <menu+0xe90>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <menu+0xe94>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	f040 8092 	bne.w	8002010 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001eec:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <menu+0xea8>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f007 fe39 	bl	8009b68 <lcd_print>

		if(kapi1Tip == 0) {
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <menu+0xeac>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001efe:	4a16      	ldr	r2, [pc, #88]	@ (8001f58 <menu+0xeb0>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	2002      	movs	r0, #2
 8001f04:	f007 fe30 	bl	8009b68 <lcd_print>
 8001f08:	e033      	b.n	8001f72 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <menu+0xeac>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d126      	bne.n	8001f60 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <menu+0xeb4>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f007 fe26 	bl	8009b68 <lcd_print>
 8001f1c:	e029      	b.n	8001f72 <menu+0xeca>
 8001f1e:	bf00      	nop
 8001f20:	20001074 	.word	0x20001074
 8001f24:	200012f0 	.word	0x200012f0
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	2000109b 	.word	0x2000109b
 8001f30:	20000f9c 	.word	0x20000f9c
 8001f34:	20001072 	.word	0x20001072
 8001f38:	20001098 	.word	0x20001098
 8001f3c:	2000106c 	.word	0x2000106c
 8001f40:	20001304 	.word	0x20001304
 8001f44:	20001078 	.word	0x20001078
 8001f48:	20001318 	.word	0x20001318
 8001f4c:	2000132c 	.word	0x2000132c
 8001f50:	20001340 	.word	0x20001340
 8001f54:	20001075 	.word	0x20001075
 8001f58:	20000100 	.word	0x20000100
 8001f5c:	20001354 	.word	0x20001354
		} else if(kapi1Tip == 2) {
 8001f60:	4b73      	ldr	r3, [pc, #460]	@ (8002130 <menu+0x1088>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d104      	bne.n	8001f72 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8001f68:	4a72      	ldr	r2, [pc, #456]	@ (8002134 <menu+0x108c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2002      	movs	r0, #2
 8001f6e:	f007 fdfb 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f72:	2102      	movs	r1, #2
 8001f74:	4870      	ldr	r0, [pc, #448]	@ (8002138 <menu+0x1090>)
 8001f76:	f009 f8e9 	bl	800b14c <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d115      	bne.n	8001fac <menu+0xf04>
 8001f80:	4b6e      	ldr	r3, [pc, #440]	@ (800213c <menu+0x1094>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00e      	beq.n	8001fac <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8001f8e:	4b68      	ldr	r3, [pc, #416]	@ (8002130 <menu+0x1088>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b66      	ldr	r3, [pc, #408]	@ (8002130 <menu+0x1088>)
 8001f98:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001f9a:	4b65      	ldr	r3, [pc, #404]	@ (8002130 <menu+0x1088>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d902      	bls.n	8001fa8 <menu+0xf00>
				kapi1Tip = 0;
 8001fa2:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <menu+0x1088>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fa8:	f001 fdbc 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fac:	2104      	movs	r1, #4
 8001fae:	4862      	ldr	r0, [pc, #392]	@ (8002138 <menu+0x1090>)
 8001fb0:	f009 f8cc 	bl	800b14c <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d115      	bne.n	8001fe6 <menu+0xf3e>
 8001fba:	4b60      	ldr	r3, [pc, #384]	@ (800213c <menu+0x1094>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f083 0301 	eor.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8001fc8:	4b59      	ldr	r3, [pc, #356]	@ (8002130 <menu+0x1088>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b57      	ldr	r3, [pc, #348]	@ (8002130 <menu+0x1088>)
 8001fd2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001fd4:	4b56      	ldr	r3, [pc, #344]	@ (8002130 <menu+0x1088>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d902      	bls.n	8001fe2 <menu+0xf3a>
		   		kapi1Tip = 2;
 8001fdc:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <menu+0x1088>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fe2:	f001 fd9f 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	4853      	ldr	r0, [pc, #332]	@ (8002138 <menu+0x1090>)
 8001fea:	f009 f8af 	bl	800b14c <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10d      	bne.n	8002010 <menu+0xf68>
 8001ff4:	4b51      	ldr	r3, [pc, #324]	@ (800213c <menu+0x1094>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002002:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <menu+0x1088>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <menu+0x1098>)
 8002008:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800200a:	4b4e      	ldr	r3, [pc, #312]	@ (8002144 <menu+0x109c>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002010:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <menu+0x10a0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b0a      	cmp	r3, #10
 8002016:	d16c      	bne.n	80020f2 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <menu+0x10a4>)
 800201a:	2101      	movs	r1, #1
 800201c:	2001      	movs	r0, #1
 800201e:	f007 fda3 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002022:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <menu+0x10a8>)
 8002024:	2101      	movs	r1, #1
 8002026:	2002      	movs	r0, #2
 8002028:	f007 fd9e 	bl	8009b68 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 800202c:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <menu+0x10ac>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	220a      	movs	r2, #10
 8002032:	4949      	ldr	r1, [pc, #292]	@ (8002158 <menu+0x10b0>)
 8002034:	4618      	mov	r0, r3
 8002036:	f00c f87f 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 800203a:	4a47      	ldr	r2, [pc, #284]	@ (8002158 <menu+0x10b0>)
 800203c:	2110      	movs	r1, #16
 800203e:	2002      	movs	r0, #2
 8002040:	f007 fd92 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002044:	2102      	movs	r1, #2
 8002046:	483c      	ldr	r0, [pc, #240]	@ (8002138 <menu+0x1090>)
 8002048:	f009 f880 	bl	800b14c <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d119      	bne.n	8002086 <menu+0xfde>
 8002052:	4b3a      	ldr	r3, [pc, #232]	@ (800213c <menu+0x1094>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <menu+0xfde>
 8002060:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <menu+0x1088>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10e      	bne.n	8002086 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002068:	4b3a      	ldr	r3, [pc, #232]	@ (8002154 <menu+0x10ac>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b38      	ldr	r3, [pc, #224]	@ (8002154 <menu+0x10ac>)
 8002072:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002074:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <menu+0x10ac>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d902      	bls.n	8002082 <menu+0xfda>
				kapi1AcSure = 0;
 800207c:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <menu+0x10ac>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002082:	f001 fd4f 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002086:	2104      	movs	r1, #4
 8002088:	482b      	ldr	r0, [pc, #172]	@ (8002138 <menu+0x1090>)
 800208a:	f009 f85f 	bl	800b14c <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d119      	bne.n	80020c8 <menu+0x1020>
 8002094:	4b29      	ldr	r3, [pc, #164]	@ (800213c <menu+0x1094>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <menu+0x1020>
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <menu+0x1088>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <menu+0x10ac>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <menu+0x10ac>)
 80020b4:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80020b6:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <menu+0x10ac>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <menu+0x101c>
		   		kapi1AcSure = 5;
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <menu+0x10ac>)
 80020c0:	2205      	movs	r2, #5
 80020c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020c4:	f001 fd2e 	bl	8003b24 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c8:	2108      	movs	r1, #8
 80020ca:	481b      	ldr	r0, [pc, #108]	@ (8002138 <menu+0x1090>)
 80020cc:	f009 f83e 	bl	800b14c <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <menu+0x104a>
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <menu+0x1094>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f083 0301 	eor.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <menu+0x10ac>)
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <menu+0x1098>)
 80020ea:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <menu+0x109c>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <menu+0x10a0>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b0b      	cmp	r3, #11
 80020f8:	f040 8090 	bne.w	800221c <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80020fc:	4a17      	ldr	r2, [pc, #92]	@ (800215c <menu+0x10b4>)
 80020fe:	2101      	movs	r1, #1
 8002100:	2001      	movs	r0, #1
 8002102:	f007 fd31 	bl	8009b68 <lcd_print>

		if(kapi2Tip == 0) {
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <menu+0x10b8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 800210e:	4a15      	ldr	r2, [pc, #84]	@ (8002164 <menu+0x10bc>)
 8002110:	2101      	movs	r1, #1
 8002112:	2002      	movs	r0, #2
 8002114:	f007 fd28 	bl	8009b68 <lcd_print>
 8002118:	e031      	b.n	800217e <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <menu+0x10b8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d124      	bne.n	800216c <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <menu+0x10c0>)
 8002124:	2101      	movs	r1, #1
 8002126:	2002      	movs	r0, #2
 8002128:	f007 fd1e 	bl	8009b68 <lcd_print>
 800212c:	e027      	b.n	800217e <menu+0x10d6>
 800212e:	bf00      	nop
 8002130:	20001075 	.word	0x20001075
 8002134:	20000114 	.word	0x20000114
 8002138:	40010800 	.word	0x40010800
 800213c:	2000109b 	.word	0x2000109b
 8002140:	20000f9c 	.word	0x20000f9c
 8002144:	20001098 	.word	0x20001098
 8002148:	2000106c 	.word	0x2000106c
 800214c:	20001368 	.word	0x20001368
 8002150:	2000137c 	.word	0x2000137c
 8002154:	20001085 	.word	0x20001085
 8002158:	2000100c 	.word	0x2000100c
 800215c:	20001390 	.word	0x20001390
 8002160:	20001076 	.word	0x20001076
 8002164:	20000100 	.word	0x20000100
 8002168:	20001354 	.word	0x20001354
		} else if(kapi2Tip == 2) {
 800216c:	4b73      	ldr	r3, [pc, #460]	@ (800233c <menu+0x1294>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d104      	bne.n	800217e <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002174:	4a72      	ldr	r2, [pc, #456]	@ (8002340 <menu+0x1298>)
 8002176:	2101      	movs	r1, #1
 8002178:	2002      	movs	r0, #2
 800217a:	f007 fcf5 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800217e:	2102      	movs	r1, #2
 8002180:	4870      	ldr	r0, [pc, #448]	@ (8002344 <menu+0x129c>)
 8002182:	f008 ffe3 	bl	800b14c <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <menu+0x1110>
 800218c:	4b6e      	ldr	r3, [pc, #440]	@ (8002348 <menu+0x12a0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f083 0301 	eor.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800219a:	4b68      	ldr	r3, [pc, #416]	@ (800233c <menu+0x1294>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b66      	ldr	r3, [pc, #408]	@ (800233c <menu+0x1294>)
 80021a4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <menu+0x1294>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d902      	bls.n	80021b4 <menu+0x110c>
				kapi2Tip = 0;
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <menu+0x1294>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021b4:	f001 fcb6 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b8:	2104      	movs	r1, #4
 80021ba:	4862      	ldr	r0, [pc, #392]	@ (8002344 <menu+0x129c>)
 80021bc:	f008 ffc6 	bl	800b14c <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d115      	bne.n	80021f2 <menu+0x114a>
 80021c6:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <menu+0x12a0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80021d4:	4b59      	ldr	r3, [pc, #356]	@ (800233c <menu+0x1294>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <menu+0x1294>)
 80021de:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80021e0:	4b56      	ldr	r3, [pc, #344]	@ (800233c <menu+0x1294>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d902      	bls.n	80021ee <menu+0x1146>
		   		kapi2Tip = 2;
 80021e8:	4b54      	ldr	r3, [pc, #336]	@ (800233c <menu+0x1294>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ee:	f001 fc99 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f2:	2108      	movs	r1, #8
 80021f4:	4853      	ldr	r0, [pc, #332]	@ (8002344 <menu+0x129c>)
 80021f6:	f008 ffa9 	bl	800b14c <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10d      	bne.n	800221c <menu+0x1174>
 8002200:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <menu+0x12a0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <menu+0x1174>
			eepromData[10] = kapi2Tip;
 800220e:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <menu+0x1294>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b4e      	ldr	r3, [pc, #312]	@ (800234c <menu+0x12a4>)
 8002214:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002216:	4b4e      	ldr	r3, [pc, #312]	@ (8002350 <menu+0x12a8>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 800221c:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <menu+0x12ac>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d16c      	bne.n	80022fe <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002224:	4a4c      	ldr	r2, [pc, #304]	@ (8002358 <menu+0x12b0>)
 8002226:	2101      	movs	r1, #1
 8002228:	2001      	movs	r0, #1
 800222a:	f007 fc9d 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800222e:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <menu+0x12b4>)
 8002230:	2101      	movs	r1, #1
 8002232:	2002      	movs	r0, #2
 8002234:	f007 fc98 	bl	8009b68 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002238:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <menu+0x12b8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	220a      	movs	r2, #10
 800223e:	4949      	ldr	r1, [pc, #292]	@ (8002364 <menu+0x12bc>)
 8002240:	4618      	mov	r0, r3
 8002242:	f00b ff79 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 8002246:	4a47      	ldr	r2, [pc, #284]	@ (8002364 <menu+0x12bc>)
 8002248:	2110      	movs	r1, #16
 800224a:	2002      	movs	r0, #2
 800224c:	f007 fc8c 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002250:	2102      	movs	r1, #2
 8002252:	483c      	ldr	r0, [pc, #240]	@ (8002344 <menu+0x129c>)
 8002254:	f008 ff7a 	bl	800b14c <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	d119      	bne.n	8002292 <menu+0x11ea>
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <menu+0x12a0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <menu+0x11ea>
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <menu+0x1294>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10e      	bne.n	8002292 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <menu+0x12b8>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <menu+0x12b8>)
 800227e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002280:	4b37      	ldr	r3, [pc, #220]	@ (8002360 <menu+0x12b8>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d902      	bls.n	800228e <menu+0x11e6>
				kapi2AcSure = 0;
 8002288:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <menu+0x12b8>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800228e:	f001 fc49 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002292:	2104      	movs	r1, #4
 8002294:	482b      	ldr	r0, [pc, #172]	@ (8002344 <menu+0x129c>)
 8002296:	f008 ff59 	bl	800b14c <HAL_GPIO_ReadPin>
 800229a:	4603      	mov	r3, r0
 800229c:	2b01      	cmp	r3, #1
 800229e:	d119      	bne.n	80022d4 <menu+0x122c>
 80022a0:	4b29      	ldr	r3, [pc, #164]	@ (8002348 <menu+0x12a0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f083 0301 	eor.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <menu+0x122c>
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <menu+0x1294>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10e      	bne.n	80022d4 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <menu+0x12b8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <menu+0x12b8>)
 80022c0:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <menu+0x12b8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <menu+0x1228>
		   		kapi2AcSure = 5;
 80022ca:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <menu+0x12b8>)
 80022cc:	2205      	movs	r2, #5
 80022ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022d0:	f001 fc28 	bl	8003b24 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d4:	2108      	movs	r1, #8
 80022d6:	481b      	ldr	r0, [pc, #108]	@ (8002344 <menu+0x129c>)
 80022d8:	f008 ff38 	bl	800b14c <HAL_GPIO_ReadPin>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10d      	bne.n	80022fe <menu+0x1256>
 80022e2:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <menu+0x12a0>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <menu+0x12b8>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <menu+0x12a4>)
 80022f6:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <menu+0x12a8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <menu+0x12ac>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b0d      	cmp	r3, #13
 8002304:	f040 8090 	bne.w	8002428 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002308:	4a17      	ldr	r2, [pc, #92]	@ (8002368 <menu+0x12c0>)
 800230a:	2101      	movs	r1, #1
 800230c:	2001      	movs	r0, #1
 800230e:	f007 fc2b 	bl	8009b68 <lcd_print>

		if(kapitablaTip == 0) {
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <menu+0x12c4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800231a:	4a15      	ldr	r2, [pc, #84]	@ (8002370 <menu+0x12c8>)
 800231c:	2101      	movs	r1, #1
 800231e:	2002      	movs	r0, #2
 8002320:	f007 fc22 	bl	8009b68 <lcd_print>
 8002324:	e031      	b.n	800238a <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002326:	4b11      	ldr	r3, [pc, #68]	@ (800236c <menu+0x12c4>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d124      	bne.n	8002378 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 800232e:	4a11      	ldr	r2, [pc, #68]	@ (8002374 <menu+0x12cc>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f007 fc18 	bl	8009b68 <lcd_print>
 8002338:	e027      	b.n	800238a <menu+0x12e2>
 800233a:	bf00      	nop
 800233c:	20001076 	.word	0x20001076
 8002340:	20000114 	.word	0x20000114
 8002344:	40010800 	.word	0x40010800
 8002348:	2000109b 	.word	0x2000109b
 800234c:	20000f9c 	.word	0x20000f9c
 8002350:	20001098 	.word	0x20001098
 8002354:	2000106c 	.word	0x2000106c
 8002358:	200013a4 	.word	0x200013a4
 800235c:	2000137c 	.word	0x2000137c
 8002360:	20001086 	.word	0x20001086
 8002364:	2000100c 	.word	0x2000100c
 8002368:	200013b8 	.word	0x200013b8
 800236c:	20001077 	.word	0x20001077
 8002370:	20000100 	.word	0x20000100
 8002374:	20001354 	.word	0x20001354
		} else if(kapitablaTip == 2) {
 8002378:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <menu+0x13d0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d104      	bne.n	800238a <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002380:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <menu+0x13d4>)
 8002382:	2101      	movs	r1, #1
 8002384:	2002      	movs	r0, #2
 8002386:	f007 fbef 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800238a:	2102      	movs	r1, #2
 800238c:	483c      	ldr	r0, [pc, #240]	@ (8002480 <menu+0x13d8>)
 800238e:	f008 fedd 	bl	800b14c <HAL_GPIO_ReadPin>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d115      	bne.n	80023c4 <menu+0x131c>
 8002398:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <menu+0x13dc>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00e      	beq.n	80023c4 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80023a6:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <menu+0x13d0>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <menu+0x13d0>)
 80023b0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80023b2:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <menu+0x13d0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d902      	bls.n	80023c0 <menu+0x1318>
				kapitablaTip = 0;
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <menu+0x13d0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023c0:	f001 fbb0 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c4:	2104      	movs	r1, #4
 80023c6:	482e      	ldr	r0, [pc, #184]	@ (8002480 <menu+0x13d8>)
 80023c8:	f008 fec0 	bl	800b14c <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d115      	bne.n	80023fe <menu+0x1356>
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <menu+0x13dc>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <menu+0x13d0>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <menu+0x13d0>)
 80023ea:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <menu+0x13d0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d902      	bls.n	80023fa <menu+0x1352>
		   		kapitablaTip = 2;
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <menu+0x13d0>)
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023fa:	f001 fb93 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023fe:	2108      	movs	r1, #8
 8002400:	481f      	ldr	r0, [pc, #124]	@ (8002480 <menu+0x13d8>)
 8002402:	f008 fea3 	bl	800b14c <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10d      	bne.n	8002428 <menu+0x1380>
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <menu+0x13dc>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <menu+0x13d0>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <menu+0x13e0>)
 8002420:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <menu+0x13e4>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <menu+0x13e8>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b0e      	cmp	r3, #14
 800242e:	f040 80a3 	bne.w	8002578 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <menu+0x13ec>)
 8002434:	2101      	movs	r1, #1
 8002436:	2001      	movs	r0, #1
 8002438:	f007 fb96 	bl	8009b68 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800243c:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <menu+0x13f0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002444:	4a15      	ldr	r2, [pc, #84]	@ (800249c <menu+0x13f4>)
 8002446:	2101      	movs	r1, #1
 8002448:	2002      	movs	r0, #2
 800244a:	f007 fb8d 	bl	8009b68 <lcd_print>
 800244e:	e034      	b.n	80024ba <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <menu+0x13f0>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002458:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <menu+0x13f8>)
 800245a:	2101      	movs	r1, #1
 800245c:	2002      	movs	r0, #2
 800245e:	f007 fb83 	bl	8009b68 <lcd_print>
 8002462:	e02a      	b.n	80024ba <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <menu+0x13f0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d11d      	bne.n	80024a8 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <menu+0x13fc>)
 800246e:	2101      	movs	r1, #1
 8002470:	2002      	movs	r0, #2
 8002472:	f007 fb79 	bl	8009b68 <lcd_print>
 8002476:	e020      	b.n	80024ba <menu+0x1412>
 8002478:	20001077 	.word	0x20001077
 800247c:	20000114 	.word	0x20000114
 8002480:	40010800 	.word	0x40010800
 8002484:	2000109b 	.word	0x2000109b
 8002488:	20000f9c 	.word	0x20000f9c
 800248c:	20001098 	.word	0x20001098
 8002490:	2000106c 	.word	0x2000106c
 8002494:	200013cc 	.word	0x200013cc
 8002498:	20001079 	.word	0x20001079
 800249c:	200013e0 	.word	0x200013e0
 80024a0:	200013f4 	.word	0x200013f4
 80024a4:	20001408 	.word	0x20001408
		} else if(kapiTablaAcKonum == 3) {
 80024a8:	4b76      	ldr	r3, [pc, #472]	@ (8002684 <menu+0x15dc>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d104      	bne.n	80024ba <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80024b0:	4a75      	ldr	r2, [pc, #468]	@ (8002688 <menu+0x15e0>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	2002      	movs	r0, #2
 80024b6:	f007 fb57 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ba:	2102      	movs	r1, #2
 80024bc:	4873      	ldr	r0, [pc, #460]	@ (800268c <menu+0x15e4>)
 80024be:	f008 fe45 	bl	800b14c <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d115      	bne.n	80024f4 <menu+0x144c>
 80024c8:	4b71      	ldr	r3, [pc, #452]	@ (8002690 <menu+0x15e8>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80024d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002684 <menu+0x15dc>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <menu+0x15dc>)
 80024e0:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80024e2:	4b68      	ldr	r3, [pc, #416]	@ (8002684 <menu+0x15dc>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d902      	bls.n	80024f0 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <menu+0x15dc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024f0:	f001 fb18 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f4:	2104      	movs	r1, #4
 80024f6:	4865      	ldr	r0, [pc, #404]	@ (800268c <menu+0x15e4>)
 80024f8:	f008 fe28 	bl	800b14c <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d115      	bne.n	800252e <menu+0x1486>
 8002502:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <menu+0x15e8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002510:	4b5c      	ldr	r3, [pc, #368]	@ (8002684 <menu+0x15dc>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3b01      	subs	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b5a      	ldr	r3, [pc, #360]	@ (8002684 <menu+0x15dc>)
 800251a:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800251c:	4b59      	ldr	r3, [pc, #356]	@ (8002684 <menu+0x15dc>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d902      	bls.n	800252a <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002524:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <menu+0x15dc>)
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800252a:	f001 fafb 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800252e:	2108      	movs	r1, #8
 8002530:	4856      	ldr	r0, [pc, #344]	@ (800268c <menu+0x15e4>)
 8002532:	f008 fe0b 	bl	800b14c <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d11d      	bne.n	8002578 <menu+0x14d0>
 800253c:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <menu+0x15e8>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 800254a:	4b4e      	ldr	r3, [pc, #312]	@ (8002684 <menu+0x15dc>)
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <menu+0x15ec>)
 8002550:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002554:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <menu+0x15dc>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <menu+0x14bc>
 800255c:	4b49      	ldr	r3, [pc, #292]	@ (8002684 <menu+0x15dc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d106      	bne.n	8002572 <menu+0x14ca>
				altLimit = 1;
 8002564:	4b4c      	ldr	r3, [pc, #304]	@ (8002698 <menu+0x15f0>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800256a:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <menu+0x15f0>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <menu+0x15ec>)
 8002570:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <menu+0x15f4>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002578:	4b49      	ldr	r3, [pc, #292]	@ (80026a0 <menu+0x15f8>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d16c      	bne.n	800265a <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002580:	4a48      	ldr	r2, [pc, #288]	@ (80026a4 <menu+0x15fc>)
 8002582:	2101      	movs	r1, #1
 8002584:	2001      	movs	r0, #1
 8002586:	f007 faef 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800258a:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <menu+0x1600>)
 800258c:	2101      	movs	r1, #1
 800258e:	2002      	movs	r0, #2
 8002590:	f007 faea 	bl	8009b68 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002594:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <menu+0x1604>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	220a      	movs	r2, #10
 800259a:	4945      	ldr	r1, [pc, #276]	@ (80026b0 <menu+0x1608>)
 800259c:	4618      	mov	r0, r3
 800259e:	f00b fdcb 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 80025a2:	4a43      	ldr	r2, [pc, #268]	@ (80026b0 <menu+0x1608>)
 80025a4:	2110      	movs	r1, #16
 80025a6:	2002      	movs	r0, #2
 80025a8:	f007 fade 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80025ac:	2102      	movs	r1, #2
 80025ae:	4837      	ldr	r0, [pc, #220]	@ (800268c <menu+0x15e4>)
 80025b0:	f008 fdcc 	bl	800b14c <HAL_GPIO_ReadPin>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d119      	bne.n	80025ee <menu+0x1546>
 80025ba:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <menu+0x15e8>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <menu+0x1546>
 80025c8:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <menu+0x160c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10e      	bne.n	80025ee <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80025d0:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <menu+0x1604>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <menu+0x1604>)
 80025da:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80025dc:	4b33      	ldr	r3, [pc, #204]	@ (80026ac <menu+0x1604>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d902      	bls.n	80025ea <menu+0x1542>
				kapiTablaAcSure = 0;
 80025e4:	4b31      	ldr	r3, [pc, #196]	@ (80026ac <menu+0x1604>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025ea:	f001 fa9b 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80025ee:	2104      	movs	r1, #4
 80025f0:	4826      	ldr	r0, [pc, #152]	@ (800268c <menu+0x15e4>)
 80025f2:	f008 fdab 	bl	800b14c <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d119      	bne.n	8002630 <menu+0x1588>
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <menu+0x15e8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <menu+0x1588>
 800260a:	4b2a      	ldr	r3, [pc, #168]	@ (80026b4 <menu+0x160c>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002612:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <menu+0x1604>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3b01      	subs	r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <menu+0x1604>)
 800261c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800261e:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <menu+0x1604>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002626:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <menu+0x1604>)
 8002628:	2205      	movs	r2, #5
 800262a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800262c:	f001 fa7a 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002630:	2108      	movs	r1, #8
 8002632:	4816      	ldr	r0, [pc, #88]	@ (800268c <menu+0x15e4>)
 8002634:	f008 fd8a 	bl	800b14c <HAL_GPIO_ReadPin>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10d      	bne.n	800265a <menu+0x15b2>
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <menu+0x15e8>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 800264c:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <menu+0x1604>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <menu+0x15ec>)
 8002652:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <menu+0x15f4>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <menu+0x15f8>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b10      	cmp	r3, #16
 8002660:	f040 8086 	bne.w	8002770 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <menu+0x1610>)
 8002666:	2101      	movs	r1, #1
 8002668:	2001      	movs	r0, #1
 800266a:	f007 fa7d 	bl	8009b68 <lcd_print>

		if(yukariYavasLimit == 0) {
 800266e:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <menu+0x1614>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d124      	bne.n	80026c0 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <menu+0x15e0>)
 8002678:	2101      	movs	r1, #1
 800267a:	2002      	movs	r0, #2
 800267c:	f007 fa74 	bl	8009b68 <lcd_print>
 8002680:	e027      	b.n	80026d2 <menu+0x162a>
 8002682:	bf00      	nop
 8002684:	20001079 	.word	0x20001079
 8002688:	20001250 	.word	0x20001250
 800268c:	40010800 	.word	0x40010800
 8002690:	2000109b 	.word	0x2000109b
 8002694:	20000f9c 	.word	0x20000f9c
 8002698:	20001072 	.word	0x20001072
 800269c:	20001098 	.word	0x20001098
 80026a0:	2000106c 	.word	0x2000106c
 80026a4:	2000141c 	.word	0x2000141c
 80026a8:	2000137c 	.word	0x2000137c
 80026ac:	20001087 	.word	0x20001087
 80026b0:	2000100c 	.word	0x2000100c
 80026b4:	20001077 	.word	0x20001077
 80026b8:	20001430 	.word	0x20001430
 80026bc:	2000107a 	.word	0x2000107a
		} else if(yukariYavasLimit == 1) {
 80026c0:	4b84      	ldr	r3, [pc, #528]	@ (80028d4 <menu+0x182c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d104      	bne.n	80026d2 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 80026c8:	4a83      	ldr	r2, [pc, #524]	@ (80028d8 <menu+0x1830>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	2002      	movs	r0, #2
 80026ce:	f007 fa4b 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d2:	2102      	movs	r1, #2
 80026d4:	4881      	ldr	r0, [pc, #516]	@ (80028dc <menu+0x1834>)
 80026d6:	f008 fd39 	bl	800b14c <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d115      	bne.n	800270c <menu+0x1664>
 80026e0:	4b7f      	ldr	r3, [pc, #508]	@ (80028e0 <menu+0x1838>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80026ee:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <menu+0x182c>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b77      	ldr	r3, [pc, #476]	@ (80028d4 <menu+0x182c>)
 80026f8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80026fa:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <menu+0x182c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d902      	bls.n	8002708 <menu+0x1660>
				yukariYavasLimit = 0;
 8002702:	4b74      	ldr	r3, [pc, #464]	@ (80028d4 <menu+0x182c>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002708:	f001 fa0c 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800270c:	2104      	movs	r1, #4
 800270e:	4873      	ldr	r0, [pc, #460]	@ (80028dc <menu+0x1834>)
 8002710:	f008 fd1c 	bl	800b14c <HAL_GPIO_ReadPin>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d115      	bne.n	8002746 <menu+0x169e>
 800271a:	4b71      	ldr	r3, [pc, #452]	@ (80028e0 <menu+0x1838>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002728:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <menu+0x182c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	3b01      	subs	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b68      	ldr	r3, [pc, #416]	@ (80028d4 <menu+0x182c>)
 8002732:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002734:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <menu+0x182c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <menu+0x169a>
		   		yukariYavasLimit = 1;
 800273c:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <menu+0x182c>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002742:	f001 f9ef 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002746:	2108      	movs	r1, #8
 8002748:	4864      	ldr	r0, [pc, #400]	@ (80028dc <menu+0x1834>)
 800274a:	f008 fcff 	bl	800b14c <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10d      	bne.n	8002770 <menu+0x16c8>
 8002754:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <menu+0x1838>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <menu+0x182c>)
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4b5f      	ldr	r3, [pc, #380]	@ (80028e4 <menu+0x183c>)
 8002768:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800276a:	4b5f      	ldr	r3, [pc, #380]	@ (80028e8 <menu+0x1840>)
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002770:	4b5e      	ldr	r3, [pc, #376]	@ (80028ec <menu+0x1844>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b11      	cmp	r3, #17
 8002776:	f040 808b 	bne.w	8002890 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800277a:	4a5d      	ldr	r2, [pc, #372]	@ (80028f0 <menu+0x1848>)
 800277c:	2101      	movs	r1, #1
 800277e:	2001      	movs	r0, #1
 8002780:	f007 f9f2 	bl	8009b68 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002784:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <menu+0x184c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d105      	bne.n	8002798 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 800278c:	4a5a      	ldr	r2, [pc, #360]	@ (80028f8 <menu+0x1850>)
 800278e:	2101      	movs	r1, #1
 8002790:	2002      	movs	r0, #2
 8002792:	f007 f9e9 	bl	8009b68 <lcd_print>
 8002796:	e012      	b.n	80027be <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002798:	4b56      	ldr	r3, [pc, #344]	@ (80028f4 <menu+0x184c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 80027a0:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <menu+0x1854>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	2002      	movs	r0, #2
 80027a6:	f007 f9df 	bl	8009b68 <lcd_print>
 80027aa:	e008      	b.n	80027be <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 80027ac:	4b51      	ldr	r3, [pc, #324]	@ (80028f4 <menu+0x184c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <menu+0x1716>
			lcd_print(2, 1, pasifText);
 80027b4:	4a52      	ldr	r2, [pc, #328]	@ (8002900 <menu+0x1858>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2002      	movs	r0, #2
 80027ba:	f007 f9d5 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027be:	2102      	movs	r1, #2
 80027c0:	4846      	ldr	r0, [pc, #280]	@ (80028dc <menu+0x1834>)
 80027c2:	f008 fcc3 	bl	800b14c <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d115      	bne.n	80027f8 <menu+0x1750>
 80027cc:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <menu+0x1838>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80027da:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <menu+0x184c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <menu+0x184c>)
 80027e4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80027e6:	4b43      	ldr	r3, [pc, #268]	@ (80028f4 <menu+0x184c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80027ee:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <menu+0x184c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f4:	f001 f996 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f8:	2104      	movs	r1, #4
 80027fa:	4838      	ldr	r0, [pc, #224]	@ (80028dc <menu+0x1834>)
 80027fc:	f008 fca6 	bl	800b14c <HAL_GPIO_ReadPin>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d115      	bne.n	8002832 <menu+0x178a>
 8002806:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <menu+0x1838>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f083 0301 	eor.w	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00e      	beq.n	8002832 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002814:	4b37      	ldr	r3, [pc, #220]	@ (80028f4 <menu+0x184c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b35      	ldr	r3, [pc, #212]	@ (80028f4 <menu+0x184c>)
 800281e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002820:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <menu+0x184c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d902      	bls.n	800282e <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002828:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <menu+0x184c>)
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282e:	f001 f979 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002832:	2108      	movs	r1, #8
 8002834:	4829      	ldr	r0, [pc, #164]	@ (80028dc <menu+0x1834>)
 8002836:	f008 fc89 	bl	800b14c <HAL_GPIO_ReadPin>
 800283a:	4603      	mov	r3, r0
 800283c:	2b01      	cmp	r3, #1
 800283e:	d127      	bne.n	8002890 <menu+0x17e8>
 8002840:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <menu+0x1838>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f083 0301 	eor.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 800284e:	4b29      	ldr	r3, [pc, #164]	@ (80028f4 <menu+0x184c>)
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <menu+0x183c>)
 8002854:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <menu+0x184c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <menu+0x17be>
 800285e:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <menu+0x184c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d106      	bne.n	8002874 <menu+0x17cc>
				calismaSekli = 0;
 8002866:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <menu+0x185c>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800286c:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <menu+0x185c>)
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <menu+0x183c>)
 8002872:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <menu+0x184c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <menu+0x17e2>
				devirmeSilindirTipi = 1;
 800287c:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <menu+0x1860>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <menu+0x1860>)
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <menu+0x183c>)
 8002888:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <menu+0x1840>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002890:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <menu+0x1844>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b12      	cmp	r3, #18
 8002896:	f040 8097 	bne.w	80029c8 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 800289a:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <menu+0x184c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d105      	bne.n	80028ae <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 80028a2:	4a1a      	ldr	r2, [pc, #104]	@ (800290c <menu+0x1864>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	2001      	movs	r0, #1
 80028a8:	f007 f95e 	bl	8009b68 <lcd_print>
 80028ac:	e008      	b.n	80028c0 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <menu+0x184c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d104      	bne.n	80028c0 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 80028b6:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <menu+0x1868>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	2001      	movs	r0, #1
 80028bc:	f007 f954 	bl	8009b68 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <menu+0x186c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d127      	bne.n	8002918 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <menu+0x1858>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	2002      	movs	r0, #2
 80028ce:	f007 f94b 	bl	8009b68 <lcd_print>
 80028d2:	e02a      	b.n	800292a <menu+0x1882>
 80028d4:	2000107a 	.word	0x2000107a
 80028d8:	20001264 	.word	0x20001264
 80028dc:	40010800 	.word	0x40010800
 80028e0:	2000109b 	.word	0x2000109b
 80028e4:	20000f9c 	.word	0x20000f9c
 80028e8:	20001098 	.word	0x20001098
 80028ec:	2000106c 	.word	0x2000106c
 80028f0:	20001444 	.word	0x20001444
 80028f4:	2000107b 	.word	0x2000107b
 80028f8:	20001458 	.word	0x20001458
 80028fc:	2000146c 	.word	0x2000146c
 8002900:	20001250 	.word	0x20001250
 8002904:	2000106d 	.word	0x2000106d
 8002908:	2000107e 	.word	0x2000107e
 800290c:	20001480 	.word	0x20001480
 8002910:	20001494 	.word	0x20001494
 8002914:	2000107c 	.word	0x2000107c
		} else if(devirmeYukariIleriLimit == 1){
 8002918:	4b79      	ldr	r3, [pc, #484]	@ (8002b00 <menu+0x1a58>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d104      	bne.n	800292a <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002920:	4a78      	ldr	r2, [pc, #480]	@ (8002b04 <menu+0x1a5c>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f007 f91f 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292a:	2102      	movs	r1, #2
 800292c:	4876      	ldr	r0, [pc, #472]	@ (8002b08 <menu+0x1a60>)
 800292e:	f008 fc0d 	bl	800b14c <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d115      	bne.n	8002964 <menu+0x18bc>
 8002938:	4b74      	ldr	r3, [pc, #464]	@ (8002b0c <menu+0x1a64>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00e      	beq.n	8002964 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002946:	4b6e      	ldr	r3, [pc, #440]	@ (8002b00 <menu+0x1a58>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <menu+0x1a58>)
 8002950:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002952:	4b6b      	ldr	r3, [pc, #428]	@ (8002b00 <menu+0x1a58>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d902      	bls.n	8002960 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 800295a:	4b69      	ldr	r3, [pc, #420]	@ (8002b00 <menu+0x1a58>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002960:	f001 f8e0 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002964:	2104      	movs	r1, #4
 8002966:	4868      	ldr	r0, [pc, #416]	@ (8002b08 <menu+0x1a60>)
 8002968:	f008 fbf0 	bl	800b14c <HAL_GPIO_ReadPin>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d115      	bne.n	800299e <menu+0x18f6>
 8002972:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <menu+0x1a64>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002980:	4b5f      	ldr	r3, [pc, #380]	@ (8002b00 <menu+0x1a58>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <menu+0x1a58>)
 800298a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800298c:	4b5c      	ldr	r3, [pc, #368]	@ (8002b00 <menu+0x1a58>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002994:	4b5a      	ldr	r3, [pc, #360]	@ (8002b00 <menu+0x1a58>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299a:	f001 f8c3 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299e:	2108      	movs	r1, #8
 80029a0:	4859      	ldr	r0, [pc, #356]	@ (8002b08 <menu+0x1a60>)
 80029a2:	f008 fbd3 	bl	800b14c <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <menu+0x1920>
 80029ac:	4b57      	ldr	r3, [pc, #348]	@ (8002b0c <menu+0x1a64>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 80029ba:	4b51      	ldr	r3, [pc, #324]	@ (8002b00 <menu+0x1a58>)
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	4b54      	ldr	r3, [pc, #336]	@ (8002b10 <menu+0x1a68>)
 80029c0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80029c2:	4b54      	ldr	r3, [pc, #336]	@ (8002b14 <menu+0x1a6c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <menu+0x1a70>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b13      	cmp	r3, #19
 80029ce:	d174      	bne.n	8002aba <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 80029d0:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <menu+0x1a74>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d105      	bne.n	80029e4 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 80029d8:	4a51      	ldr	r2, [pc, #324]	@ (8002b20 <menu+0x1a78>)
 80029da:	2101      	movs	r1, #1
 80029dc:	2001      	movs	r0, #1
 80029de:	f007 f8c3 	bl	8009b68 <lcd_print>
 80029e2:	e008      	b.n	80029f6 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <menu+0x1a74>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d104      	bne.n	80029f6 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 80029ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002b24 <menu+0x1a7c>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2001      	movs	r0, #1
 80029f2:	f007 f8b9 	bl	8009b68 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 80029f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b28 <menu+0x1a80>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <menu+0x1962>
			lcd_print(2, 1, pasifText);
 80029fe:	4a4b      	ldr	r2, [pc, #300]	@ (8002b2c <menu+0x1a84>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	2002      	movs	r0, #2
 8002a04:	f007 f8b0 	bl	8009b68 <lcd_print>
 8002a08:	e008      	b.n	8002a1c <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002a0a:	4b47      	ldr	r3, [pc, #284]	@ (8002b28 <menu+0x1a80>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d104      	bne.n	8002a1c <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002a12:	4a3c      	ldr	r2, [pc, #240]	@ (8002b04 <menu+0x1a5c>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	2002      	movs	r0, #2
 8002a18:	f007 f8a6 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	483a      	ldr	r0, [pc, #232]	@ (8002b08 <menu+0x1a60>)
 8002a20:	f008 fb94 	bl	800b14c <HAL_GPIO_ReadPin>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d115      	bne.n	8002a56 <menu+0x19ae>
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <menu+0x1a64>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002a38:	4b3b      	ldr	r3, [pc, #236]	@ (8002b28 <menu+0x1a80>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <menu+0x1a80>)
 8002a42:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002a44:	4b38      	ldr	r3, [pc, #224]	@ (8002b28 <menu+0x1a80>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d902      	bls.n	8002a52 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002a4c:	4b36      	ldr	r3, [pc, #216]	@ (8002b28 <menu+0x1a80>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a52:	f001 f867 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a56:	2104      	movs	r1, #4
 8002a58:	482b      	ldr	r0, [pc, #172]	@ (8002b08 <menu+0x1a60>)
 8002a5a:	f008 fb77 	bl	800b14c <HAL_GPIO_ReadPin>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d115      	bne.n	8002a90 <menu+0x19e8>
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <menu+0x1a64>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f083 0301 	eor.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00e      	beq.n	8002a90 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002a72:	4b2d      	ldr	r3, [pc, #180]	@ (8002b28 <menu+0x1a80>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <menu+0x1a80>)
 8002a7c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <menu+0x1a80>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002a86:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <menu+0x1a80>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a8c:	f001 f84a 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a90:	2108      	movs	r1, #8
 8002a92:	481d      	ldr	r0, [pc, #116]	@ (8002b08 <menu+0x1a60>)
 8002a94:	f008 fb5a 	bl	800b14c <HAL_GPIO_ReadPin>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <menu+0x1a12>
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <menu+0x1a64>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <menu+0x1a80>)
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	4b17      	ldr	r3, [pc, #92]	@ (8002b10 <menu+0x1a68>)
 8002ab2:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <menu+0x1a6c>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <menu+0x1a70>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b14      	cmp	r3, #20
 8002ac0:	f040 809e 	bne.w	8002c00 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <menu+0x1a74>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002acc:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <menu+0x1a88>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f007 f849 	bl	8009b68 <lcd_print>
 8002ad6:	e008      	b.n	8002aea <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <menu+0x1a74>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d104      	bne.n	8002aea <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <menu+0x1a8c>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f007 f83f 	bl	8009b68 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <menu+0x1a90>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d126      	bne.n	8002b40 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002af2:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <menu+0x1a94>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	2002      	movs	r0, #2
 8002af8:	f007 f836 	bl	8009b68 <lcd_print>
 8002afc:	e029      	b.n	8002b52 <menu+0x1aaa>
 8002afe:	bf00      	nop
 8002b00:	2000107c 	.word	0x2000107c
 8002b04:	20001264 	.word	0x20001264
 8002b08:	40010800 	.word	0x40010800
 8002b0c:	2000109b 	.word	0x2000109b
 8002b10:	20000f9c 	.word	0x20000f9c
 8002b14:	20001098 	.word	0x20001098
 8002b18:	2000106c 	.word	0x2000106c
 8002b1c:	2000107b 	.word	0x2000107b
 8002b20:	200014a8 	.word	0x200014a8
 8002b24:	200014bc 	.word	0x200014bc
 8002b28:	2000107d 	.word	0x2000107d
 8002b2c:	20001250 	.word	0x20001250
 8002b30:	200014d0 	.word	0x200014d0
 8002b34:	200014e4 	.word	0x200014e4
 8002b38:	2000107e 	.word	0x2000107e
 8002b3c:	200014f8 	.word	0x200014f8
		} else if(devirmeSilindirTipi == 1) {
 8002b40:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <menu+0x1b80>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d104      	bne.n	8002b52 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <menu+0x1b84>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f007 f80b 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b52:	2102      	movs	r1, #2
 8002b54:	4836      	ldr	r0, [pc, #216]	@ (8002c30 <menu+0x1b88>)
 8002b56:	f008 faf9 	bl	800b14c <HAL_GPIO_ReadPin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <menu+0x1aec>
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <menu+0x1b8c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d012      	beq.n	8002b94 <menu+0x1aec>
 8002b6e:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <menu+0x1b90>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d10e      	bne.n	8002b94 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002b76:	4b2c      	ldr	r3, [pc, #176]	@ (8002c28 <menu+0x1b80>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <menu+0x1b80>)
 8002b80:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002b82:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <menu+0x1b80>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d902      	bls.n	8002b90 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <menu+0x1b80>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b90:	f000 ffc8 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b94:	2104      	movs	r1, #4
 8002b96:	4826      	ldr	r0, [pc, #152]	@ (8002c30 <menu+0x1b88>)
 8002b98:	f008 fad8 	bl	800b14c <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d119      	bne.n	8002bd6 <menu+0x1b2e>
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <menu+0x1b8c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	f083 0301 	eor.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <menu+0x1b2e>
 8002bb0:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <menu+0x1b90>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d10e      	bne.n	8002bd6 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <menu+0x1b80>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <menu+0x1b80>)
 8002bc2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <menu+0x1b80>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <menu+0x1b80>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bd2:	f000 ffa7 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	4815      	ldr	r0, [pc, #84]	@ (8002c30 <menu+0x1b88>)
 8002bda:	f008 fab7 	bl	800b14c <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <menu+0x1b58>
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <menu+0x1b8c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <menu+0x1b80>)
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <menu+0x1b94>)
 8002bf8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <menu+0x1b98>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <menu+0x1b9c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b15      	cmp	r3, #21
 8002c06:	f040 8088 	bne.w	8002d1a <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <menu+0x1ba0>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f006 ffaa 	bl	8009b68 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <menu+0x1ba4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11b      	bne.n	8002c54 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <menu+0x1ba8>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2002      	movs	r0, #2
 8002c22:	f006 ffa1 	bl	8009b68 <lcd_print>
 8002c26:	e01e      	b.n	8002c66 <menu+0x1bbe>
 8002c28:	2000107e 	.word	0x2000107e
 8002c2c:	2000150c 	.word	0x2000150c
 8002c30:	40010800 	.word	0x40010800
 8002c34:	2000109b 	.word	0x2000109b
 8002c38:	2000107b 	.word	0x2000107b
 8002c3c:	20000f9c 	.word	0x20000f9c
 8002c40:	20001098 	.word	0x20001098
 8002c44:	2000106c 	.word	0x2000106c
 8002c48:	20001520 	.word	0x20001520
 8002c4c:	2000107f 	.word	0x2000107f
 8002c50:	200014f8 	.word	0x200014f8
		} else if(platformSilindirTipi == 1) {
 8002c54:	4ba1      	ldr	r3, [pc, #644]	@ (8002edc <menu+0x1e34>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d104      	bne.n	8002c66 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002c5c:	4aa0      	ldr	r2, [pc, #640]	@ (8002ee0 <menu+0x1e38>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f006 ff81 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c66:	2102      	movs	r1, #2
 8002c68:	489e      	ldr	r0, [pc, #632]	@ (8002ee4 <menu+0x1e3c>)
 8002c6a:	f008 fa6f 	bl	800b14c <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d115      	bne.n	8002ca0 <menu+0x1bf8>
 8002c74:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee8 <menu+0x1e40>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002c82:	4b96      	ldr	r3, [pc, #600]	@ (8002edc <menu+0x1e34>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b94      	ldr	r3, [pc, #592]	@ (8002edc <menu+0x1e34>)
 8002c8c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002c8e:	4b93      	ldr	r3, [pc, #588]	@ (8002edc <menu+0x1e34>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d902      	bls.n	8002c9c <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002c96:	4b91      	ldr	r3, [pc, #580]	@ (8002edc <menu+0x1e34>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c9c:	f000 ff42 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	4890      	ldr	r0, [pc, #576]	@ (8002ee4 <menu+0x1e3c>)
 8002ca4:	f008 fa52 	bl	800b14c <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d115      	bne.n	8002cda <menu+0x1c32>
 8002cae:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee8 <menu+0x1e40>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002cbc:	4b87      	ldr	r3, [pc, #540]	@ (8002edc <menu+0x1e34>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b85      	ldr	r3, [pc, #532]	@ (8002edc <menu+0x1e34>)
 8002cc6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002cc8:	4b84      	ldr	r3, [pc, #528]	@ (8002edc <menu+0x1e34>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002cd0:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <menu+0x1e34>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cd6:	f000 ff25 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cda:	2108      	movs	r1, #8
 8002cdc:	4881      	ldr	r0, [pc, #516]	@ (8002ee4 <menu+0x1e3c>)
 8002cde:	f008 fa35 	bl	800b14c <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d118      	bne.n	8002d1a <menu+0x1c72>
 8002ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <menu+0x1e40>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	f083 0301 	eor.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d011      	beq.n	8002d1a <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002cf6:	4b79      	ldr	r3, [pc, #484]	@ (8002edc <menu+0x1e34>)
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <menu+0x1e44>)
 8002cfc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002cfe:	4b77      	ldr	r3, [pc, #476]	@ (8002edc <menu+0x1e34>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <menu+0x1c6c>
				altLimit = 1;
 8002d06:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef0 <menu+0x1e48>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d0c:	4b78      	ldr	r3, [pc, #480]	@ (8002ef0 <menu+0x1e48>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <menu+0x1e44>)
 8002d12:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d14:	4b77      	ldr	r3, [pc, #476]	@ (8002ef4 <menu+0x1e4c>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d1a:	4b77      	ldr	r3, [pc, #476]	@ (8002ef8 <menu+0x1e50>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b16      	cmp	r3, #22
 8002d20:	d164      	bne.n	8002dec <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002d22:	4a76      	ldr	r2, [pc, #472]	@ (8002efc <menu+0x1e54>)
 8002d24:	2101      	movs	r1, #1
 8002d26:	2001      	movs	r0, #1
 8002d28:	f006 ff1e 	bl	8009b68 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002d2c:	4a74      	ldr	r2, [pc, #464]	@ (8002f00 <menu+0x1e58>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2002      	movs	r0, #2
 8002d32:	f006 ff19 	bl	8009b68 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002d36:	4b73      	ldr	r3, [pc, #460]	@ (8002f04 <menu+0x1e5c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	4972      	ldr	r1, [pc, #456]	@ (8002f08 <menu+0x1e60>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00b f9fa 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 8002d44:	4a70      	ldr	r2, [pc, #448]	@ (8002f08 <menu+0x1e60>)
 8002d46:	2110      	movs	r1, #16
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f006 ff0d 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4864      	ldr	r0, [pc, #400]	@ (8002ee4 <menu+0x1e3c>)
 8002d52:	f008 f9fb 	bl	800b14c <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d115      	bne.n	8002d88 <menu+0x1ce0>
 8002d5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <menu+0x1e40>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f083 0301 	eor.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00e      	beq.n	8002d88 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002d6a:	4b66      	ldr	r3, [pc, #408]	@ (8002f04 <menu+0x1e5c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b64      	ldr	r3, [pc, #400]	@ (8002f04 <menu+0x1e5c>)
 8002d74:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002d76:	4b63      	ldr	r3, [pc, #396]	@ (8002f04 <menu+0x1e5c>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d902      	bls.n	8002d84 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002d7e:	4b61      	ldr	r3, [pc, #388]	@ (8002f04 <menu+0x1e5c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d84:	f000 fece 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4856      	ldr	r0, [pc, #344]	@ (8002ee4 <menu+0x1e3c>)
 8002d8c:	f008 f9de 	bl	800b14c <HAL_GPIO_ReadPin>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d115      	bne.n	8002dc2 <menu+0x1d1a>
 8002d96:	4b54      	ldr	r3, [pc, #336]	@ (8002ee8 <menu+0x1e40>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002da4:	4b57      	ldr	r3, [pc, #348]	@ (8002f04 <menu+0x1e5c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b55      	ldr	r3, [pc, #340]	@ (8002f04 <menu+0x1e5c>)
 8002dae:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002db0:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <menu+0x1e5c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d902      	bls.n	8002dbe <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002db8:	4b52      	ldr	r3, [pc, #328]	@ (8002f04 <menu+0x1e5c>)
 8002dba:	2205      	movs	r2, #5
 8002dbc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dbe:	f000 feb1 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	4847      	ldr	r0, [pc, #284]	@ (8002ee4 <menu+0x1e3c>)
 8002dc6:	f008 f9c1 	bl	800b14c <HAL_GPIO_ReadPin>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10d      	bne.n	8002dec <menu+0x1d44>
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <menu+0x1e40>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002dde:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <menu+0x1e5c>)
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	4b42      	ldr	r3, [pc, #264]	@ (8002eec <menu+0x1e44>)
 8002de4:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002de6:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <menu+0x1e4c>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002dec:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <menu+0x1e50>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b17      	cmp	r3, #23
 8002df2:	d164      	bne.n	8002ebe <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002df4:	4a45      	ldr	r2, [pc, #276]	@ (8002f0c <menu+0x1e64>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f006 feb5 	bl	8009b68 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002dfe:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <menu+0x1e58>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f006 feb0 	bl	8009b68 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002e08:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <menu+0x1e68>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	493e      	ldr	r1, [pc, #248]	@ (8002f08 <menu+0x1e60>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00b f991 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 8002e16:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <menu+0x1e60>)
 8002e18:	2110      	movs	r1, #16
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f006 fea4 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e20:	2102      	movs	r1, #2
 8002e22:	4830      	ldr	r0, [pc, #192]	@ (8002ee4 <menu+0x1e3c>)
 8002e24:	f008 f992 	bl	800b14c <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d115      	bne.n	8002e5a <menu+0x1db2>
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee8 <menu+0x1e40>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002e3c:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <menu+0x1e68>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b32      	ldr	r3, [pc, #200]	@ (8002f10 <menu+0x1e68>)
 8002e46:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002e48:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <menu+0x1e68>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d902      	bls.n	8002e56 <menu+0x1dae>
				asagiValfTmr = 0;
 8002e50:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <menu+0x1e68>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e56:	f000 fe65 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e5a:	2104      	movs	r1, #4
 8002e5c:	4821      	ldr	r0, [pc, #132]	@ (8002ee4 <menu+0x1e3c>)
 8002e5e:	f008 f975 	bl	800b14c <HAL_GPIO_ReadPin>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d115      	bne.n	8002e94 <menu+0x1dec>
 8002e68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <menu+0x1e40>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002e76:	4b26      	ldr	r3, [pc, #152]	@ (8002f10 <menu+0x1e68>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <menu+0x1e68>)
 8002e80:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002e82:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <menu+0x1e68>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002e8a:	4b21      	ldr	r3, [pc, #132]	@ (8002f10 <menu+0x1e68>)
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e90:	f000 fe48 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e94:	2108      	movs	r1, #8
 8002e96:	4813      	ldr	r0, [pc, #76]	@ (8002ee4 <menu+0x1e3c>)
 8002e98:	f008 f958 	bl	800b14c <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10d      	bne.n	8002ebe <menu+0x1e16>
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <menu+0x1e40>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	@ (8002f10 <menu+0x1e68>)
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <menu+0x1e44>)
 8002eb6:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <menu+0x1e4c>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <menu+0x1e50>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b18      	cmp	r3, #24
 8002ec4:	f040 8093 	bne.w	8002fee <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <menu+0x1e6c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d125      	bne.n	8002f1c <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002ed0:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <menu+0x1e70>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f006 fe47 	bl	8009b68 <lcd_print>
 8002eda:	e028      	b.n	8002f2e <menu+0x1e86>
 8002edc:	2000107f 	.word	0x2000107f
 8002ee0:	2000150c 	.word	0x2000150c
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	2000109b 	.word	0x2000109b
 8002eec:	20000f9c 	.word	0x20000f9c
 8002ef0:	20001072 	.word	0x20001072
 8002ef4:	20001098 	.word	0x20001098
 8002ef8:	2000106c 	.word	0x2000106c
 8002efc:	20001534 	.word	0x20001534
 8002f00:	2000137c 	.word	0x2000137c
 8002f04:	20001080 	.word	0x20001080
 8002f08:	2000100c 	.word	0x2000100c
 8002f0c:	20001548 	.word	0x20001548
 8002f10:	20001081 	.word	0x20001081
 8002f14:	2000107b 	.word	0x2000107b
 8002f18:	2000155c 	.word	0x2000155c
		} else if(devirmeYuruyusSecim == 1) {
 8002f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003150 <menu+0x20a8>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d104      	bne.n	8002f2e <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002f24:	4a8b      	ldr	r2, [pc, #556]	@ (8003154 <menu+0x20ac>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f006 fe1d 	bl	8009b68 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002f2e:	4a8a      	ldr	r2, [pc, #552]	@ (8003158 <menu+0x20b0>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	2002      	movs	r0, #2
 8002f34:	f006 fe18 	bl	8009b68 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002f38:	4b88      	ldr	r3, [pc, #544]	@ (800315c <menu+0x20b4>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	4988      	ldr	r1, [pc, #544]	@ (8003160 <menu+0x20b8>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f00b f8f9 	bl	800e138 <itoa>
		lcd_print(2, 16, snum);
 8002f46:	4a86      	ldr	r2, [pc, #536]	@ (8003160 <menu+0x20b8>)
 8002f48:	2110      	movs	r1, #16
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	f006 fe0c 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f50:	2102      	movs	r1, #2
 8002f52:	4884      	ldr	r0, [pc, #528]	@ (8003164 <menu+0x20bc>)
 8002f54:	f008 f8fa 	bl	800b14c <HAL_GPIO_ReadPin>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d115      	bne.n	8002f8a <menu+0x1ee2>
 8002f5e:	4b82      	ldr	r3, [pc, #520]	@ (8003168 <menu+0x20c0>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800315c <menu+0x20b4>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b79      	ldr	r3, [pc, #484]	@ (800315c <menu+0x20b4>)
 8002f76:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002f78:	4b78      	ldr	r3, [pc, #480]	@ (800315c <menu+0x20b4>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d902      	bls.n	8002f86 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8002f80:	4b76      	ldr	r3, [pc, #472]	@ (800315c <menu+0x20b4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f86:	f000 fdcd 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	4875      	ldr	r0, [pc, #468]	@ (8003164 <menu+0x20bc>)
 8002f8e:	f008 f8dd 	bl	800b14c <HAL_GPIO_ReadPin>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d115      	bne.n	8002fc4 <menu+0x1f1c>
 8002f98:	4b73      	ldr	r3, [pc, #460]	@ (8003168 <menu+0x20c0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800315c <menu+0x20b4>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b6b      	ldr	r3, [pc, #428]	@ (800315c <menu+0x20b4>)
 8002fb0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800315c <menu+0x20b4>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d902      	bls.n	8002fc0 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8002fba:	4b68      	ldr	r3, [pc, #416]	@ (800315c <menu+0x20b4>)
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fc0:	f000 fdb0 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc4:	2108      	movs	r1, #8
 8002fc6:	4867      	ldr	r0, [pc, #412]	@ (8003164 <menu+0x20bc>)
 8002fc8:	f008 f8c0 	bl	800b14c <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10d      	bne.n	8002fee <menu+0x1f46>
 8002fd2:	4b65      	ldr	r3, [pc, #404]	@ (8003168 <menu+0x20c0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800315c <menu+0x20b4>)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <menu+0x20c4>)
 8002fe6:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002fe8:	4b61      	ldr	r3, [pc, #388]	@ (8003170 <menu+0x20c8>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002fee:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <menu+0x20cc>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b19      	cmp	r3, #25
 8002ff4:	d172      	bne.n	80030dc <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8002ff6:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <menu+0x20a8>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d105      	bne.n	800300a <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8003178 <menu+0x20d0>)
 8003000:	2101      	movs	r1, #1
 8003002:	2001      	movs	r0, #1
 8003004:	f006 fdb0 	bl	8009b68 <lcd_print>
 8003008:	e008      	b.n	800301c <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800300a:	4b51      	ldr	r3, [pc, #324]	@ (8003150 <menu+0x20a8>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d104      	bne.n	800301c <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003012:	4a5a      	ldr	r2, [pc, #360]	@ (800317c <menu+0x20d4>)
 8003014:	2101      	movs	r1, #1
 8003016:	2001      	movs	r0, #1
 8003018:	f006 fda6 	bl	8009b68 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800301c:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <menu+0x20b0>)
 800301e:	2101      	movs	r1, #1
 8003020:	2002      	movs	r0, #2
 8003022:	f006 fda1 	bl	8009b68 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003026:	4b56      	ldr	r3, [pc, #344]	@ (8003180 <menu+0x20d8>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	220a      	movs	r2, #10
 800302c:	494c      	ldr	r1, [pc, #304]	@ (8003160 <menu+0x20b8>)
 800302e:	4618      	mov	r0, r3
 8003030:	f00b f882 	bl	800e138 <itoa>
		lcd_print(2,16,snum);
 8003034:	4a4a      	ldr	r2, [pc, #296]	@ (8003160 <menu+0x20b8>)
 8003036:	2110      	movs	r1, #16
 8003038:	2002      	movs	r0, #2
 800303a:	f006 fd95 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800303e:	2102      	movs	r1, #2
 8003040:	4848      	ldr	r0, [pc, #288]	@ (8003164 <menu+0x20bc>)
 8003042:	f008 f883 	bl	800b14c <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <menu+0x1fd0>
 800304c:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <menu+0x20c0>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800305a:	4b49      	ldr	r3, [pc, #292]	@ (8003180 <menu+0x20d8>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <menu+0x20d8>)
 8003064:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003066:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <menu+0x20d8>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d902      	bls.n	8003074 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800306e:	4b44      	ldr	r3, [pc, #272]	@ (8003180 <menu+0x20d8>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003074:	f000 fd56 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003078:	2104      	movs	r1, #4
 800307a:	483a      	ldr	r0, [pc, #232]	@ (8003164 <menu+0x20bc>)
 800307c:	f008 f866 	bl	800b14c <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d115      	bne.n	80030b2 <menu+0x200a>
 8003086:	4b38      	ldr	r3, [pc, #224]	@ (8003168 <menu+0x20c0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003094:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <menu+0x20d8>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b38      	ldr	r3, [pc, #224]	@ (8003180 <menu+0x20d8>)
 800309e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80030a0:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <menu+0x20d8>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d902      	bls.n	80030ae <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80030a8:	4b35      	ldr	r3, [pc, #212]	@ (8003180 <menu+0x20d8>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ae:	f000 fd39 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2108      	movs	r1, #8
 80030b4:	482b      	ldr	r0, [pc, #172]	@ (8003164 <menu+0x20bc>)
 80030b6:	f008 f849 	bl	800b14c <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <menu+0x2034>
 80030c0:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <menu+0x20c0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <menu+0x20d8>)
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	4b26      	ldr	r3, [pc, #152]	@ (800316c <menu+0x20c4>)
 80030d4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80030d6:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <menu+0x20c8>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80030dc:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <menu+0x20cc>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b1a      	cmp	r3, #26
 80030e2:	f040 80b7 	bne.w	8003254 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80030e6:	4a27      	ldr	r2, [pc, #156]	@ (8003184 <menu+0x20dc>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	2001      	movs	r0, #1
 80030ec:	f006 fd3c 	bl	8009b68 <lcd_print>

		if(makineCalismaTmr > 99) {
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <menu+0x20e0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b63      	cmp	r3, #99	@ 0x63
 80030f6:	d911      	bls.n	800311c <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80030f8:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <menu+0x20b0>)
 80030fa:	2101      	movs	r1, #1
 80030fc:	2002      	movs	r0, #2
 80030fe:	f006 fd33 	bl	8009b68 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <menu+0x20e0>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	220a      	movs	r2, #10
 8003108:	4915      	ldr	r1, [pc, #84]	@ (8003160 <menu+0x20b8>)
 800310a:	4618      	mov	r0, r3
 800310c:	f00b f814 	bl	800e138 <itoa>
			lcd_print(2,14,snum);
 8003110:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <menu+0x20b8>)
 8003112:	210e      	movs	r1, #14
 8003114:	2002      	movs	r0, #2
 8003116:	f006 fd27 	bl	8009b68 <lcd_print>
 800311a:	e04c      	b.n	80031b6 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <menu+0x20e0>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b09      	cmp	r3, #9
 8003122:	d933      	bls.n	800318c <menu+0x20e4>
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <menu+0x20e0>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b63      	cmp	r3, #99	@ 0x63
 800312a:	d82f      	bhi.n	800318c <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 800312c:	4a0a      	ldr	r2, [pc, #40]	@ (8003158 <menu+0x20b0>)
 800312e:	2101      	movs	r1, #1
 8003130:	2002      	movs	r0, #2
 8003132:	f006 fd19 	bl	8009b68 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003136:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <menu+0x20e0>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	220a      	movs	r2, #10
 800313c:	4908      	ldr	r1, [pc, #32]	@ (8003160 <menu+0x20b8>)
 800313e:	4618      	mov	r0, r3
 8003140:	f00a fffa 	bl	800e138 <itoa>
			lcd_print(2, 15, snum);
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <menu+0x20b8>)
 8003146:	210f      	movs	r1, #15
 8003148:	2002      	movs	r0, #2
 800314a:	f006 fd0d 	bl	8009b68 <lcd_print>
 800314e:	e032      	b.n	80031b6 <menu+0x210e>
 8003150:	2000107b 	.word	0x2000107b
 8003154:	20001570 	.word	0x20001570
 8003158:	2000137c 	.word	0x2000137c
 800315c:	20001082 	.word	0x20001082
 8003160:	2000100c 	.word	0x2000100c
 8003164:	40010800 	.word	0x40010800
 8003168:	2000109b 	.word	0x2000109b
 800316c:	20000f9c 	.word	0x20000f9c
 8003170:	20001098 	.word	0x20001098
 8003174:	2000106c 	.word	0x2000106c
 8003178:	20001584 	.word	0x20001584
 800317c:	20001598 	.word	0x20001598
 8003180:	20001083 	.word	0x20001083
 8003184:	200015ac 	.word	0x200015ac
 8003188:	20001084 	.word	0x20001084
		} else if(makineCalismaTmr <=  9) {
 800318c:	4b72      	ldr	r3, [pc, #456]	@ (8003358 <menu+0x22b0>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d810      	bhi.n	80031b6 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003194:	4a71      	ldr	r2, [pc, #452]	@ (800335c <menu+0x22b4>)
 8003196:	2101      	movs	r1, #1
 8003198:	2002      	movs	r0, #2
 800319a:	f006 fce5 	bl	8009b68 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800319e:	4b6e      	ldr	r3, [pc, #440]	@ (8003358 <menu+0x22b0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	220a      	movs	r2, #10
 80031a4:	496e      	ldr	r1, [pc, #440]	@ (8003360 <menu+0x22b8>)
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00a ffc6 	bl	800e138 <itoa>
			lcd_print(2, 16, snum);
 80031ac:	4a6c      	ldr	r2, [pc, #432]	@ (8003360 <menu+0x22b8>)
 80031ae:	2110      	movs	r1, #16
 80031b0:	2002      	movs	r0, #2
 80031b2:	f006 fcd9 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b6:	2102      	movs	r1, #2
 80031b8:	486a      	ldr	r0, [pc, #424]	@ (8003364 <menu+0x22bc>)
 80031ba:	f007 ffc7 	bl	800b14c <HAL_GPIO_ReadPin>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d115      	bne.n	80031f0 <menu+0x2148>
 80031c4:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <menu+0x22c0>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80031d2:	4b61      	ldr	r3, [pc, #388]	@ (8003358 <menu+0x22b0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4b5f      	ldr	r3, [pc, #380]	@ (8003358 <menu+0x22b0>)
 80031dc:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <menu+0x22b0>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2bb4      	cmp	r3, #180	@ 0xb4
 80031e4:	d902      	bls.n	80031ec <menu+0x2144>
				makineCalismaTmr = 0;
 80031e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003358 <menu+0x22b0>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031ec:	f000 fc9a 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f0:	2104      	movs	r1, #4
 80031f2:	485c      	ldr	r0, [pc, #368]	@ (8003364 <menu+0x22bc>)
 80031f4:	f007 ffaa 	bl	800b14c <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d115      	bne.n	800322a <menu+0x2182>
 80031fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003368 <menu+0x22c0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 800320c:	4b52      	ldr	r3, [pc, #328]	@ (8003358 <menu+0x22b0>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	3b01      	subs	r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b50      	ldr	r3, [pc, #320]	@ (8003358 <menu+0x22b0>)
 8003216:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003218:	4b4f      	ldr	r3, [pc, #316]	@ (8003358 <menu+0x22b0>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2bb5      	cmp	r3, #181	@ 0xb5
 800321e:	d902      	bls.n	8003226 <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003220:	4b4d      	ldr	r3, [pc, #308]	@ (8003358 <menu+0x22b0>)
 8003222:	22b4      	movs	r2, #180	@ 0xb4
 8003224:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003226:	f000 fc7d 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800322a:	2108      	movs	r1, #8
 800322c:	484d      	ldr	r0, [pc, #308]	@ (8003364 <menu+0x22bc>)
 800322e:	f007 ff8d 	bl	800b14c <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10d      	bne.n	8003254 <menu+0x21ac>
 8003238:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <menu+0x22c0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003246:	4b44      	ldr	r3, [pc, #272]	@ (8003358 <menu+0x22b0>)
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	4b48      	ldr	r3, [pc, #288]	@ (800336c <menu+0x22c4>)
 800324c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800324e:	4b48      	ldr	r3, [pc, #288]	@ (8003370 <menu+0x22c8>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003254:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <menu+0x22cc>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b1b      	cmp	r3, #27
 800325a:	d166      	bne.n	800332a <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 800325c:	4a46      	ldr	r2, [pc, #280]	@ (8003378 <menu+0x22d0>)
 800325e:	2101      	movs	r1, #1
 8003260:	2001      	movs	r0, #1
 8003262:	f006 fc81 	bl	8009b68 <lcd_print>

		if(buzzer == 0) {
 8003266:	4b45      	ldr	r3, [pc, #276]	@ (800337c <menu+0x22d4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800326e:	4a44      	ldr	r2, [pc, #272]	@ (8003380 <menu+0x22d8>)
 8003270:	2101      	movs	r1, #1
 8003272:	2002      	movs	r0, #2
 8003274:	f006 fc78 	bl	8009b68 <lcd_print>
 8003278:	e008      	b.n	800328c <menu+0x21e4>
		} else if(buzzer == 1) {
 800327a:	4b40      	ldr	r3, [pc, #256]	@ (800337c <menu+0x22d4>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d104      	bne.n	800328c <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003282:	4a40      	ldr	r2, [pc, #256]	@ (8003384 <menu+0x22dc>)
 8003284:	2101      	movs	r1, #1
 8003286:	2002      	movs	r0, #2
 8003288:	f006 fc6e 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800328c:	2102      	movs	r1, #2
 800328e:	4835      	ldr	r0, [pc, #212]	@ (8003364 <menu+0x22bc>)
 8003290:	f007 ff5c 	bl	800b14c <HAL_GPIO_ReadPin>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d115      	bne.n	80032c6 <menu+0x221e>
 800329a:	4b33      	ldr	r3, [pc, #204]	@ (8003368 <menu+0x22c0>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	f083 0301 	eor.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <menu+0x221e>
			buzzer = buzzer + 1;
 80032a8:	4b34      	ldr	r3, [pc, #208]	@ (800337c <menu+0x22d4>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b32      	ldr	r3, [pc, #200]	@ (800337c <menu+0x22d4>)
 80032b2:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80032b4:	4b31      	ldr	r3, [pc, #196]	@ (800337c <menu+0x22d4>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d902      	bls.n	80032c2 <menu+0x221a>
				buzzer = 0;
 80032bc:	4b2f      	ldr	r3, [pc, #188]	@ (800337c <menu+0x22d4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032c2:	f000 fc2f 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c6:	2104      	movs	r1, #4
 80032c8:	4826      	ldr	r0, [pc, #152]	@ (8003364 <menu+0x22bc>)
 80032ca:	f007 ff3f 	bl	800b14c <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d115      	bne.n	8003300 <menu+0x2258>
 80032d4:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <menu+0x22c0>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <menu+0x2258>
			buzzer = buzzer - 1;
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <menu+0x22d4>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <menu+0x22d4>)
 80032ec:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80032ee:	4b23      	ldr	r3, [pc, #140]	@ (800337c <menu+0x22d4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <menu+0x2254>
		   		buzzer = 1;
 80032f6:	4b21      	ldr	r3, [pc, #132]	@ (800337c <menu+0x22d4>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032fc:	f000 fc12 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003300:	2108      	movs	r1, #8
 8003302:	4818      	ldr	r0, [pc, #96]	@ (8003364 <menu+0x22bc>)
 8003304:	f007 ff22 	bl	800b14c <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d10d      	bne.n	800332a <menu+0x2282>
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <menu+0x22c0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <menu+0x2282>
			eepromData[25] = buzzer;
 800331c:	4b17      	ldr	r3, [pc, #92]	@ (800337c <menu+0x22d4>)
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <menu+0x22c4>)
 8003322:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <menu+0x22c8>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800332a:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <menu+0x22cc>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b1c      	cmp	r3, #28
 8003330:	f040 8088 	bne.w	8003444 <menu+0x239c>
		calismaSayModu = 0;
 8003334:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <menu+0x22e0>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800333a:	4a14      	ldr	r2, [pc, #80]	@ (800338c <menu+0x22e4>)
 800333c:	2101      	movs	r1, #1
 800333e:	2001      	movs	r0, #1
 8003340:	f006 fc12 	bl	8009b68 <lcd_print>

		if(demoMode == 0) {
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <menu+0x22e8>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d123      	bne.n	8003394 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 800334c:	4a0c      	ldr	r2, [pc, #48]	@ (8003380 <menu+0x22d8>)
 800334e:	2101      	movs	r1, #1
 8003350:	2002      	movs	r0, #2
 8003352:	f006 fc09 	bl	8009b68 <lcd_print>
 8003356:	e026      	b.n	80033a6 <menu+0x22fe>
 8003358:	20001084 	.word	0x20001084
 800335c:	2000137c 	.word	0x2000137c
 8003360:	2000100c 	.word	0x2000100c
 8003364:	40010800 	.word	0x40010800
 8003368:	2000109b 	.word	0x2000109b
 800336c:	20000f9c 	.word	0x20000f9c
 8003370:	20001098 	.word	0x20001098
 8003374:	2000106c 	.word	0x2000106c
 8003378:	20000128 	.word	0x20000128
 800337c:	20001088 	.word	0x20001088
 8003380:	20001250 	.word	0x20001250
 8003384:	20001264 	.word	0x20001264
 8003388:	2000108c 	.word	0x2000108c
 800338c:	2000013c 	.word	0x2000013c
 8003390:	2000108a 	.word	0x2000108a
		} else if(demoMode == 1) {
 8003394:	4b80      	ldr	r3, [pc, #512]	@ (8003598 <menu+0x24f0>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d104      	bne.n	80033a6 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 800339c:	4a7f      	ldr	r2, [pc, #508]	@ (800359c <menu+0x24f4>)
 800339e:	2101      	movs	r1, #1
 80033a0:	2002      	movs	r0, #2
 80033a2:	f006 fbe1 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a6:	2102      	movs	r1, #2
 80033a8:	487d      	ldr	r0, [pc, #500]	@ (80035a0 <menu+0x24f8>)
 80033aa:	f007 fecf 	bl	800b14c <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d115      	bne.n	80033e0 <menu+0x2338>
 80033b4:	4b7b      	ldr	r3, [pc, #492]	@ (80035a4 <menu+0x24fc>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00e      	beq.n	80033e0 <menu+0x2338>
			demoMode = demoMode + 1;
 80033c2:	4b75      	ldr	r3, [pc, #468]	@ (8003598 <menu+0x24f0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b73      	ldr	r3, [pc, #460]	@ (8003598 <menu+0x24f0>)
 80033cc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80033ce:	4b72      	ldr	r3, [pc, #456]	@ (8003598 <menu+0x24f0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d902      	bls.n	80033dc <menu+0x2334>
				demoMode = 0;
 80033d6:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <menu+0x24f0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033dc:	f000 fba2 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e0:	2104      	movs	r1, #4
 80033e2:	486f      	ldr	r0, [pc, #444]	@ (80035a0 <menu+0x24f8>)
 80033e4:	f007 feb2 	bl	800b14c <HAL_GPIO_ReadPin>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d115      	bne.n	800341a <menu+0x2372>
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <menu+0x24fc>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00e      	beq.n	800341a <menu+0x2372>
			demoMode = demoMode - 1;
 80033fc:	4b66      	ldr	r3, [pc, #408]	@ (8003598 <menu+0x24f0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	3b01      	subs	r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b64      	ldr	r3, [pc, #400]	@ (8003598 <menu+0x24f0>)
 8003406:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003408:	4b63      	ldr	r3, [pc, #396]	@ (8003598 <menu+0x24f0>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <menu+0x236e>
		   		demoMode = 1;
 8003410:	4b61      	ldr	r3, [pc, #388]	@ (8003598 <menu+0x24f0>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003416:	f000 fb85 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800341a:	2108      	movs	r1, #8
 800341c:	4860      	ldr	r0, [pc, #384]	@ (80035a0 <menu+0x24f8>)
 800341e:	f007 fe95 	bl	800b14c <HAL_GPIO_ReadPin>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10d      	bne.n	8003444 <menu+0x239c>
 8003428:	4b5e      	ldr	r3, [pc, #376]	@ (80035a4 <menu+0x24fc>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	f083 0301 	eor.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <menu+0x239c>
			eepromData[26] = demoMode;
 8003436:	4b58      	ldr	r3, [pc, #352]	@ (8003598 <menu+0x24f0>)
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <menu+0x2500>)
 800343c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800343e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ac <menu+0x2504>)
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003444:	4b5a      	ldr	r3, [pc, #360]	@ (80035b0 <menu+0x2508>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b1d      	cmp	r3, #29
 800344a:	f040 80d5 	bne.w	80035f8 <menu+0x2550>
		finalCount=0;
 800344e:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <menu+0x250c>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003454:	4b58      	ldr	r3, [pc, #352]	@ (80035b8 <menu+0x2510>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d135      	bne.n	80034c8 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 800345c:	4a57      	ldr	r2, [pc, #348]	@ (80035bc <menu+0x2514>)
 800345e:	2101      	movs	r1, #1
 8003460:	2001      	movs	r0, #1
 8003462:	f006 fb81 	bl	8009b68 <lcd_print>

			if(demoMode == 1) {
 8003466:	4b4c      	ldr	r3, [pc, #304]	@ (8003598 <menu+0x24f0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d113      	bne.n	8003496 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800346e:	4b54      	ldr	r3, [pc, #336]	@ (80035c0 <menu+0x2518>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4613      	mov	r3, r2
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	1a9a      	subs	r2, r3, r2
 800347a:	4b4e      	ldr	r3, [pc, #312]	@ (80035b4 <menu+0x250c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4413      	add	r3, r2
 8003480:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <menu+0x250c>)
 8003482:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003484:	4b4f      	ldr	r3, [pc, #316]	@ (80035c4 <menu+0x251c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <menu+0x250c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a48      	ldr	r2, [pc, #288]	@ (80035b4 <menu+0x250c>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	e012      	b.n	80034bc <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003496:	4b4c      	ldr	r3, [pc, #304]	@ (80035c8 <menu+0x2520>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	1a9a      	subs	r2, r3, r2
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <menu+0x250c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <menu+0x250c>)
 80034aa:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 80034ac:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <menu+0x2524>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <menu+0x250c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	4a3e      	ldr	r2, [pc, #248]	@ (80035b4 <menu+0x250c>)
 80034ba:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 80034bc:	4b3d      	ldr	r3, [pc, #244]	@ (80035b4 <menu+0x250c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa85 	bl	80039d0 <displayCycleOnLCD>
 80034c6:	e00d      	b.n	80034e4 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <menu+0x2510>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d109      	bne.n	80034e4 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80034d0:	4a3a      	ldr	r2, [pc, #232]	@ (80035bc <menu+0x2514>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	2001      	movs	r0, #1
 80034d6:	f006 fb47 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80034da:	4a3d      	ldr	r2, [pc, #244]	@ (80035d0 <menu+0x2528>)
 80034dc:	2101      	movs	r1, #1
 80034de:	2002      	movs	r0, #2
 80034e0:	f006 fb42 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034e4:	2102      	movs	r1, #2
 80034e6:	482e      	ldr	r0, [pc, #184]	@ (80035a0 <menu+0x24f8>)
 80034e8:	f007 fe30 	bl	800b14c <HAL_GPIO_ReadPin>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d115      	bne.n	800351e <menu+0x2476>
 80034f2:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <menu+0x24fc>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f083 0301 	eor.w	r3, r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <menu+0x2510>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	b2da      	uxtb	r2, r3
 8003508:	4b2b      	ldr	r3, [pc, #172]	@ (80035b8 <menu+0x2510>)
 800350a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800350c:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <menu+0x2510>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d902      	bls.n	800351a <menu+0x2472>
				calismaSayModu = 0;
 8003514:	4b28      	ldr	r3, [pc, #160]	@ (80035b8 <menu+0x2510>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800351a:	f000 fb03 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800351e:	2104      	movs	r1, #4
 8003520:	481f      	ldr	r0, [pc, #124]	@ (80035a0 <menu+0x24f8>)
 8003522:	f007 fe13 	bl	800b14c <HAL_GPIO_ReadPin>
 8003526:	4603      	mov	r3, r0
 8003528:	2b01      	cmp	r3, #1
 800352a:	d115      	bne.n	8003558 <menu+0x24b0>
 800352c:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <menu+0x24fc>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <menu+0x2510>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	3b01      	subs	r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <menu+0x2510>)
 8003544:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003546:	4b1c      	ldr	r3, [pc, #112]	@ (80035b8 <menu+0x2510>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <menu+0x24ac>
		   		calismaSayModu = 1;
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <menu+0x2510>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003554:	f000 fae6 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003558:	2108      	movs	r1, #8
 800355a:	4811      	ldr	r0, [pc, #68]	@ (80035a0 <menu+0x24f8>)
 800355c:	f007 fdf6 	bl	800b14c <HAL_GPIO_ReadPin>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d148      	bne.n	80035f8 <menu+0x2550>
 8003566:	4b0f      	ldr	r3, [pc, #60]	@ (80035a4 <menu+0x24fc>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	f083 0301 	eor.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d041      	beq.n	80035f8 <menu+0x2550>
			if(demoMode == 1) {
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <menu+0x24f0>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d12b      	bne.n	80035d4 <menu+0x252c>
				eepromData[28] = 0;
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <menu+0x2500>)
 800357e:	2200      	movs	r2, #0
 8003580:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <menu+0x2500>)
 8003584:	2200      	movs	r2, #0
 8003586:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003588:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <menu+0x251c>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800358e:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <menu+0x2518>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e02a      	b.n	80035ec <menu+0x2544>
 8003596:	bf00      	nop
 8003598:	2000108a 	.word	0x2000108a
 800359c:	20001264 	.word	0x20001264
 80035a0:	40010800 	.word	0x40010800
 80035a4:	2000109b 	.word	0x2000109b
 80035a8:	20000f9c 	.word	0x20000f9c
 80035ac:	20001098 	.word	0x20001098
 80035b0:	2000106c 	.word	0x2000106c
 80035b4:	20001068 	.word	0x20001068
 80035b8:	2000108c 	.word	0x2000108c
 80035bc:	200015c0 	.word	0x200015c0
 80035c0:	20001067 	.word	0x20001067
 80035c4:	20001065 	.word	0x20001065
 80035c8:	20001066 	.word	0x20001066
 80035cc:	20001064 	.word	0x20001064
 80035d0:	200015d4 	.word	0x200015d4
			} else {
				eepromData[27] = 0;
 80035d4:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <menu+0x2654>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 80035da:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <menu+0x2654>)
 80035dc:	2200      	movs	r2, #0
 80035de:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 80035e0:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <menu+0x2658>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 80035e6:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <menu+0x265c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 80035ec:	4b46      	ldr	r3, [pc, #280]	@ (8003708 <menu+0x2660>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80035f2:	4b46      	ldr	r3, [pc, #280]	@ (800370c <menu+0x2664>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80035f8:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <menu+0x2668>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b1e      	cmp	r3, #30
 80035fe:	d166      	bne.n	80036ce <menu+0x2626>
		calismaSayModu = 0;
 8003600:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <menu+0x2660>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003606:	4a43      	ldr	r2, [pc, #268]	@ (8003714 <menu+0x266c>)
 8003608:	2101      	movs	r1, #1
 800360a:	2001      	movs	r0, #1
 800360c:	f006 faac 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003610:	4a41      	ldr	r2, [pc, #260]	@ (8003718 <menu+0x2670>)
 8003612:	2101      	movs	r1, #1
 8003614:	2002      	movs	r0, #2
 8003616:	f006 faa7 	bl	8009b68 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800361a:	2102      	movs	r1, #2
 800361c:	483f      	ldr	r0, [pc, #252]	@ (800371c <menu+0x2674>)
 800361e:	f007 fd95 	bl	800b14c <HAL_GPIO_ReadPin>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d11a      	bne.n	800365e <menu+0x25b6>
 8003628:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <menu+0x2678>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f083 0301 	eor.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <menu+0x25b6>
			dilSecim = dilSecim + 1;
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <menu+0x267c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <menu+0x267c>)
 8003640:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <menu+0x267c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d902      	bls.n	8003650 <menu+0x25a8>
				dilSecim = 0;
 800364a:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <menu+0x267c>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003650:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <menu+0x267c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 ff0f 	bl	8007478 <loadMenuTexts>

			bekle();
 800365a:	f000 fa63 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800365e:	2104      	movs	r1, #4
 8003660:	482e      	ldr	r0, [pc, #184]	@ (800371c <menu+0x2674>)
 8003662:	f007 fd73 	bl	800b14c <HAL_GPIO_ReadPin>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d11a      	bne.n	80036a2 <menu+0x25fa>
 800366c:	4b2c      	ldr	r3, [pc, #176]	@ (8003720 <menu+0x2678>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f083 0301 	eor.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <menu+0x25fa>
			dilSecim = dilSecim - 1;
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <menu+0x267c>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <menu+0x267c>)
 8003684:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003686:	4b27      	ldr	r3, [pc, #156]	@ (8003724 <menu+0x267c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <menu+0x25ec>
		   		dilSecim = 1;
 800368e:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <menu+0x267c>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <menu+0x267c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f003 feed 	bl	8007478 <loadMenuTexts>

			bekle();
 800369e:	f000 fa41 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a2:	2108      	movs	r1, #8
 80036a4:	481d      	ldr	r0, [pc, #116]	@ (800371c <menu+0x2674>)
 80036a6:	f007 fd51 	bl	800b14c <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10e      	bne.n	80036ce <menu+0x2626>
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <menu+0x2678>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <menu+0x2626>
			eepromData[33] = dilSecim;
 80036be:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <menu+0x267c>)
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <menu+0x2654>)
 80036c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80036c8:	4b10      	ldr	r3, [pc, #64]	@ (800370c <menu+0x2664>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <menu+0x2668>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b1f      	cmp	r3, #31
 80036d4:	f040 8087 	bne.w	80037e6 <menu+0x273e>
		calismaSayModu = 0;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <menu+0x2660>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <menu+0x2680>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	2001      	movs	r0, #1
 80036e4:	f006 fa40 	bl	8009b68 <lcd_print>

		if(iotMode == 0) {
 80036e8:	4b10      	ldr	r3, [pc, #64]	@ (800372c <menu+0x2684>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <menu+0x268c>
			lcd_print(2, 1, pasifText);
 80036f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <menu+0x2688>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f006 fa37 	bl	8009b68 <lcd_print>
 80036fa:	e024      	b.n	8003746 <menu+0x269e>
 80036fc:	20000f9c 	.word	0x20000f9c
 8003700:	20001064 	.word	0x20001064
 8003704:	20001066 	.word	0x20001066
 8003708:	2000108c 	.word	0x2000108c
 800370c:	20001098 	.word	0x20001098
 8003710:	2000106c 	.word	0x2000106c
 8003714:	200015e8 	.word	0x200015e8
 8003718:	200015fc 	.word	0x200015fc
 800371c:	40010800 	.word	0x40010800
 8003720:	2000109b 	.word	0x2000109b
 8003724:	2000108d 	.word	0x2000108d
 8003728:	20000150 	.word	0x20000150
 800372c:	2000108b 	.word	0x2000108b
 8003730:	20001250 	.word	0x20001250
		} else if(iotMode == 1) {
 8003734:	4b99      	ldr	r3, [pc, #612]	@ (800399c <menu+0x28f4>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d104      	bne.n	8003746 <menu+0x269e>
			lcd_print(2, 1, aktifText);
 800373c:	4a98      	ldr	r2, [pc, #608]	@ (80039a0 <menu+0x28f8>)
 800373e:	2101      	movs	r1, #1
 8003740:	2002      	movs	r0, #2
 8003742:	f006 fa11 	bl	8009b68 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003746:	2102      	movs	r1, #2
 8003748:	4896      	ldr	r0, [pc, #600]	@ (80039a4 <menu+0x28fc>)
 800374a:	f007 fcff 	bl	800b14c <HAL_GPIO_ReadPin>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d115      	bne.n	8003780 <menu+0x26d8>
 8003754:	4b94      	ldr	r3, [pc, #592]	@ (80039a8 <menu+0x2900>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <menu+0x26d8>
			iotMode = iotMode + 1;
 8003762:	4b8e      	ldr	r3, [pc, #568]	@ (800399c <menu+0x28f4>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b8c      	ldr	r3, [pc, #560]	@ (800399c <menu+0x28f4>)
 800376c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800376e:	4b8b      	ldr	r3, [pc, #556]	@ (800399c <menu+0x28f4>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d902      	bls.n	800377c <menu+0x26d4>
				iotMode = 0;
 8003776:	4b89      	ldr	r3, [pc, #548]	@ (800399c <menu+0x28f4>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800377c:	f000 f9d2 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003780:	2104      	movs	r1, #4
 8003782:	4888      	ldr	r0, [pc, #544]	@ (80039a4 <menu+0x28fc>)
 8003784:	f007 fce2 	bl	800b14c <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d115      	bne.n	80037ba <menu+0x2712>
 800378e:	4b86      	ldr	r3, [pc, #536]	@ (80039a8 <menu+0x2900>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	f083 0301 	eor.w	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <menu+0x2712>
			iotMode = iotMode - 1;
 800379c:	4b7f      	ldr	r3, [pc, #508]	@ (800399c <menu+0x28f4>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b7d      	ldr	r3, [pc, #500]	@ (800399c <menu+0x28f4>)
 80037a6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80037a8:	4b7c      	ldr	r3, [pc, #496]	@ (800399c <menu+0x28f4>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <menu+0x270e>
		   		iotMode = 1;
 80037b0:	4b7a      	ldr	r3, [pc, #488]	@ (800399c <menu+0x28f4>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80037b6:	f000 f9b5 	bl	8003b24 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ba:	2108      	movs	r1, #8
 80037bc:	4879      	ldr	r0, [pc, #484]	@ (80039a4 <menu+0x28fc>)
 80037be:	f007 fcc5 	bl	800b14c <HAL_GPIO_ReadPin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10e      	bne.n	80037e6 <menu+0x273e>
 80037c8:	4b77      	ldr	r3, [pc, #476]	@ (80039a8 <menu+0x2900>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <menu+0x273e>
			eepromData[48] = iotMode;
 80037d6:	4b71      	ldr	r3, [pc, #452]	@ (800399c <menu+0x28f4>)
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	4b74      	ldr	r3, [pc, #464]	@ (80039ac <menu+0x2904>)
 80037dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 80037e0:	4b73      	ldr	r3, [pc, #460]	@ (80039b0 <menu+0x2908>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80037e6:	4b73      	ldr	r3, [pc, #460]	@ (80039b4 <menu+0x290c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d127      	bne.n	800383e <menu+0x2796>
		calismaSayModu = 0;
 80037ee:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <menu+0x2910>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 80037f4:	4a71      	ldr	r2, [pc, #452]	@ (80039bc <menu+0x2914>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	2001      	movs	r0, #1
 80037fa:	f006 f9b5 	bl	8009b68 <lcd_print>

		convertArrays(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f7fd f852 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003804:	2032      	movs	r0, #50	@ 0x32
 8003806:	f006 fed1 	bl	800a5ac <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 800380a:	2001      	movs	r0, #1
 800380c:	f7fd fbf0 	bl	8000ff0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003810:	2102      	movs	r1, #2
 8003812:	4864      	ldr	r0, [pc, #400]	@ (80039a4 <menu+0x28fc>)
 8003814:	f007 fc9a 	bl	800b14c <HAL_GPIO_ReadPin>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10f      	bne.n	800383e <menu+0x2796>
 800381e:	2104      	movs	r1, #4
 8003820:	4860      	ldr	r0, [pc, #384]	@ (80039a4 <menu+0x28fc>)
 8003822:	f007 fc93 	bl	800b14c <HAL_GPIO_ReadPin>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d108      	bne.n	800383e <menu+0x2796>
 800382c:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <menu+0x2900>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <menu+0x2796>
			takeMachineIDWithConfirmation();
 800383a:	f005 faa3 	bl	8008d84 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 800383e:	4b5d      	ldr	r3, [pc, #372]	@ (80039b4 <menu+0x290c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b21      	cmp	r3, #33	@ 0x21
 8003844:	d12b      	bne.n	800389e <menu+0x27f6>
		calismaSayModu = 0;
 8003846:	4b5c      	ldr	r3, [pc, #368]	@ (80039b8 <menu+0x2910>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 800384c:	2002      	movs	r0, #2
 800384e:	f7fd f82b 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003852:	2032      	movs	r0, #50	@ 0x32
 8003854:	f006 feaa 	bl	800a5ac <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003858:	2002      	movs	r0, #2
 800385a:	f7fd fbc9 	bl	8000ff0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800385e:	2102      	movs	r1, #2
 8003860:	4850      	ldr	r0, [pc, #320]	@ (80039a4 <menu+0x28fc>)
 8003862:	f007 fc73 	bl	800b14c <HAL_GPIO_ReadPin>
 8003866:	4603      	mov	r3, r0
 8003868:	2b01      	cmp	r3, #1
 800386a:	d118      	bne.n	800389e <menu+0x27f6>
 800386c:	2104      	movs	r1, #4
 800386e:	484d      	ldr	r0, [pc, #308]	@ (80039a4 <menu+0x28fc>)
 8003870:	f007 fc6c 	bl	800b14c <HAL_GPIO_ReadPin>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d111      	bne.n	800389e <menu+0x27f6>
 800387a:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <menu+0x2900>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <menu+0x27f6>
			takeWifiSSID();
 8003888:	f005 fc94 	bl	80091b4 <takeWifiSSID>

			convertArrays(2);
 800388c:	2002      	movs	r0, #2
 800388e:	f7fd f80b 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003892:	2032      	movs	r0, #50	@ 0x32
 8003894:	f006 fe8a 	bl	800a5ac <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003898:	2002      	movs	r0, #2
 800389a:	f7fd fba9 	bl	8000ff0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 800389e:	4b45      	ldr	r3, [pc, #276]	@ (80039b4 <menu+0x290c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b22      	cmp	r3, #34	@ 0x22
 80038a4:	d12b      	bne.n	80038fe <menu+0x2856>
		calismaSayModu = 0;
 80038a6:	4b44      	ldr	r3, [pc, #272]	@ (80039b8 <menu+0x2910>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f7fc fffb 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 80038b2:	2032      	movs	r0, #50	@ 0x32
 80038b4:	f006 fe7a 	bl	800a5ac <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 80038b8:	2003      	movs	r0, #3
 80038ba:	f7fd fb99 	bl	8000ff0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038be:	2102      	movs	r1, #2
 80038c0:	4838      	ldr	r0, [pc, #224]	@ (80039a4 <menu+0x28fc>)
 80038c2:	f007 fc43 	bl	800b14c <HAL_GPIO_ReadPin>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d118      	bne.n	80038fe <menu+0x2856>
 80038cc:	2104      	movs	r1, #4
 80038ce:	4835      	ldr	r0, [pc, #212]	@ (80039a4 <menu+0x28fc>)
 80038d0:	f007 fc3c 	bl	800b14c <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d111      	bne.n	80038fe <menu+0x2856>
 80038da:	4b33      	ldr	r3, [pc, #204]	@ (80039a8 <menu+0x2900>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <menu+0x2856>
			takeWifiPass();
 80038e8:	f005 fe22 	bl	8009530 <takeWifiPass>

			convertArrays(3);
 80038ec:	2003      	movs	r0, #3
 80038ee:	f7fc ffdb 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 80038f2:	2032      	movs	r0, #50	@ 0x32
 80038f4:	f006 fe5a 	bl	800a5ac <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 80038f8:	2003      	movs	r0, #3
 80038fa:	f7fd fb79 	bl	8000ff0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80038fe:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <menu+0x290c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b23      	cmp	r3, #35	@ 0x23
 8003904:	d146      	bne.n	8003994 <menu+0x28ec>
		lcd_print(1, 1, menudenCikisText);
 8003906:	4a2e      	ldr	r2, [pc, #184]	@ (80039c0 <menu+0x2918>)
 8003908:	2101      	movs	r1, #1
 800390a:	2001      	movs	r0, #1
 800390c:	f006 f92c 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003910:	4a2c      	ldr	r2, [pc, #176]	@ (80039c4 <menu+0x291c>)
 8003912:	2101      	movs	r1, #1
 8003914:	2002      	movs	r0, #2
 8003916:	f006 f927 	bl	8009b68 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800391a:	2108      	movs	r1, #8
 800391c:	4821      	ldr	r0, [pc, #132]	@ (80039a4 <menu+0x28fc>)
 800391e:	f007 fc15 	bl	800b14c <HAL_GPIO_ReadPin>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d135      	bne.n	8003994 <menu+0x28ec>
			menuGiris = 0;
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <menu+0x2920>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 800392e:	f006 fe33 	bl	800a598 <HAL_GetTick>
 8003932:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003934:	e007      	b.n	8003946 <menu+0x289e>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003936:	f006 fe2f 	bl	800a598 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003944:	d806      	bhi.n	8003954 <menu+0x28ac>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003946:	4821      	ldr	r0, [pc, #132]	@ (80039cc <menu+0x2924>)
 8003948:	f008 fa29 	bl	800bd9e <HAL_I2C_GetError>
 800394c:	4603      	mov	r3, r0
 800394e:	2b04      	cmp	r3, #4
 8003950:	d0f1      	beq.n	8003936 <menu+0x288e>
 8003952:	e000      	b.n	8003956 <menu+0x28ae>
			        break;
 8003954:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003956:	f006 fe1f 	bl	800a598 <HAL_GetTick>
 800395a:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800395c:	e007      	b.n	800396e <menu+0x28c6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 800395e:	f006 fe1b 	bl	800a598 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800396c:	d806      	bhi.n	800397c <menu+0x28d4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800396e:	4817      	ldr	r0, [pc, #92]	@ (80039cc <menu+0x2924>)
 8003970:	f008 fa08 	bl	800bd84 <HAL_I2C_GetState>
 8003974:	4603      	mov	r3, r0
 8003976:	2b20      	cmp	r3, #32
 8003978:	d1f1      	bne.n	800395e <menu+0x28b6>
 800397a:	e000      	b.n	800397e <menu+0x28d6>
			        break;
 800397c:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 800397e:	2000      	movs	r0, #0
 8003980:	f7fc fe90 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003984:	f006 f91c 	bl	8009bc0 <lcd_clear>
			HAL_Delay(500);
 8003988:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800398c:	f006 fe0e 	bl	800a5ac <HAL_Delay>
			NVIC_SystemReset();
 8003990:	f7fd fb74 	bl	800107c <__NVIC_SystemReset>
		}
	}
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000108b 	.word	0x2000108b
 80039a0:	20001264 	.word	0x20001264
 80039a4:	40010800 	.word	0x40010800
 80039a8:	2000109b 	.word	0x2000109b
 80039ac:	20000f9c 	.word	0x20000f9c
 80039b0:	20001098 	.word	0x20001098
 80039b4:	2000106c 	.word	0x2000106c
 80039b8:	2000108c 	.word	0x2000108c
 80039bc:	20001778 	.word	0x20001778
 80039c0:	20001610 	.word	0x20001610
 80039c4:	20001624 	.word	0x20001624
 80039c8:	20001089 	.word	0x20001089
 80039cc:	200017f0 	.word	0x200017f0

080039d0 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	@ 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 80039d8:	220a      	movs	r2, #10
 80039da:	491c      	ldr	r1, [pc, #112]	@ (8003a4c <displayCycleOnLCD+0x7c>)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f00a fbab 	bl	800e138 <itoa>

    int length = strlen(snum);
 80039e2:	481a      	ldr	r0, [pc, #104]	@ (8003a4c <displayCycleOnLCD+0x7c>)
 80039e4:	f7fc fc1e 	bl	8000224 <strlen>
 80039e8:	4603      	mov	r3, r0
 80039ea:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f1c3 0310 	rsb	r3, r3, #16
 80039f2:	0fda      	lsrs	r2, r3, #31
 80039f4:	4413      	add	r3, r2
 80039f6:	105b      	asrs	r3, r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	2210      	movs	r2, #16
 8003a00:	2120      	movs	r1, #32
 8003a02:	4618      	mov	r0, r3
 8003a04:	f00a fbdc 	bl	800e1c0 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003a08:	2300      	movs	r3, #0
 8003a0a:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	e00d      	b.n	8003a2e <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	4413      	add	r3, r2
 8003a18:	490c      	ldr	r1, [pc, #48]	@ (8003a4c <displayCycleOnLCD+0x7c>)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	440a      	add	r2, r1
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	3328      	adds	r3, #40	@ 0x28
 8003a22:	443b      	add	r3, r7
 8003a24:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dbed      	blt.n	8003a12 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f006 f892 	bl	8009b68 <lcd_print>
}
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	@ 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000100c 	.word	0x2000100c

08003a50 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003a60:	4a22      	ldr	r2, [pc, #136]	@ (8003aec <lcdUpdate+0x9c>)
 8003a62:	2101      	movs	r1, #1
 8003a64:	2002      	movs	r0, #2
 8003a66:	f006 f87f 	bl	8009b68 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003a6a:	e03b      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if(y==2) {
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d105      	bne.n	8003a7e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003a72:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <lcdUpdate+0x9c>)
 8003a74:	2102      	movs	r1, #2
 8003a76:	2002      	movs	r0, #2
 8003a78:	f006 f876 	bl	8009b68 <lcd_print>
}
 8003a7c:	e032      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if(y==3) {
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d105      	bne.n	8003a90 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003a84:	4a19      	ldr	r2, [pc, #100]	@ (8003aec <lcdUpdate+0x9c>)
 8003a86:	2103      	movs	r1, #3
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f006 f86d 	bl	8009b68 <lcd_print>
}
 8003a8e:	e029      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if(y==4) {
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d105      	bne.n	8003aa2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003a96:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <lcdUpdate+0x9c>)
 8003a98:	2104      	movs	r1, #4
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f006 f864 	bl	8009b68 <lcd_print>
}
 8003aa0:	e020      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if(y==5) {
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d105      	bne.n	8003ab4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003aa8:	4a10      	ldr	r2, [pc, #64]	@ (8003aec <lcdUpdate+0x9c>)
 8003aaa:	2105      	movs	r1, #5
 8003aac:	2002      	movs	r0, #2
 8003aae:	f006 f85b 	bl	8009b68 <lcd_print>
}
 8003ab2:	e017      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if(y==6) {
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d105      	bne.n	8003ac6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003aba:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <lcdUpdate+0x9c>)
 8003abc:	2106      	movs	r1, #6
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f006 f852 	bl	8009b68 <lcd_print>
}
 8003ac4:	e00e      	b.n	8003ae4 <lcdUpdate+0x94>
	} else if (y==7) {
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	d10b      	bne.n	8003ae4 <lcdUpdate+0x94>
		lcd_clear();
 8003acc:	f006 f878 	bl	8009bc0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003ad0:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <lcdUpdate+0xa0>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f006 f847 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003ada:	4a06      	ldr	r2, [pc, #24]	@ (8003af4 <lcdUpdate+0xa4>)
 8003adc:	2101      	movs	r1, #1
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f006 f842 	bl	8009b68 <lcd_print>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0800e390 	.word	0x0800e390
 8003af0:	200000c4 	.word	0x200000c4
 8003af4:	200000d8 	.word	0x200000d8

08003af8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <checkLCDBacklight+0x24>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <checkLCDBacklight+0x28>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b3b      	cmp	r3, #59	@ 0x3b
 8003b08:	d903      	bls.n	8003b12 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f006 f878 	bl	8009c00 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003b10:	e002      	b.n	8003b18 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f006 f874 	bl	8009c00 <lcd_backlight>
}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20001044 	.word	0x20001044
 8003b20:	20001060 	.word	0x20001060

08003b24 <bekle>:

void bekle() {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	timer1=millis;
 8003b28:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <bekle+0x124>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a47      	ldr	r2, [pc, #284]	@ (8003c4c <bekle+0x128>)
 8003b2e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b30:	e002      	b.n	8003b38 <bekle+0x14>
    	butonKontrol = 1;
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <bekle+0x12c>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4846      	ldr	r0, [pc, #280]	@ (8003c54 <bekle+0x130>)
 8003b3c:	f007 fb06 	bl	800b14c <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d109      	bne.n	8003b5a <bekle+0x36>
 8003b46:	4b40      	ldr	r3, [pc, #256]	@ (8003c48 <bekle+0x124>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <bekle+0x128>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d0ef      	beq.n	8003b32 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b52:	e002      	b.n	8003b5a <bekle+0x36>
    	butonKontrol = 1;
 8003b54:	4b3e      	ldr	r3, [pc, #248]	@ (8003c50 <bekle+0x12c>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b5a:	2108      	movs	r1, #8
 8003b5c:	483e      	ldr	r0, [pc, #248]	@ (8003c58 <bekle+0x134>)
 8003b5e:	f007 faf5 	bl	800b14c <HAL_GPIO_ReadPin>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d109      	bne.n	8003b7c <bekle+0x58>
 8003b68:	4b37      	ldr	r3, [pc, #220]	@ (8003c48 <bekle+0x124>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <bekle+0x128>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d0ef      	beq.n	8003b54 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b74:	e002      	b.n	8003b7c <bekle+0x58>
    	butonKontrol = 1;
 8003b76:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <bekle+0x12c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4835      	ldr	r0, [pc, #212]	@ (8003c54 <bekle+0x130>)
 8003b80:	f007 fae4 	bl	800b14c <HAL_GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d109      	bne.n	8003b9e <bekle+0x7a>
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <bekle+0x124>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c4c <bekle+0x128>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d0ef      	beq.n	8003b76 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b96:	e002      	b.n	8003b9e <bekle+0x7a>
    	butonKontrol = 1;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <bekle+0x12c>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	482c      	ldr	r0, [pc, #176]	@ (8003c54 <bekle+0x130>)
 8003ba2:	f007 fad3 	bl	800b14c <HAL_GPIO_ReadPin>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d109      	bne.n	8003bc0 <bekle+0x9c>
 8003bac:	4b26      	ldr	r3, [pc, #152]	@ (8003c48 <bekle+0x124>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b26      	ldr	r3, [pc, #152]	@ (8003c4c <bekle+0x128>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0ef      	beq.n	8003b98 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bb8:	e002      	b.n	8003bc0 <bekle+0x9c>
    	butonKontrol = 1;
 8003bba:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <bekle+0x12c>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bc0:	2108      	movs	r1, #8
 8003bc2:	4824      	ldr	r0, [pc, #144]	@ (8003c54 <bekle+0x130>)
 8003bc4:	f007 fac2 	bl	800b14c <HAL_GPIO_ReadPin>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d109      	bne.n	8003be2 <bekle+0xbe>
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <bekle+0x124>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c4c <bekle+0x128>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d0ef      	beq.n	8003bba <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003bda:	e002      	b.n	8003be2 <bekle+0xbe>
    	butonKontrol = 1;
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <bekle+0x12c>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	481c      	ldr	r0, [pc, #112]	@ (8003c58 <bekle+0x134>)
 8003be6:	f007 fab1 	bl	800b14c <HAL_GPIO_ReadPin>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <bekle+0xe0>
 8003bf0:	4b15      	ldr	r3, [pc, #84]	@ (8003c48 <bekle+0x124>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <bekle+0x128>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d0ef      	beq.n	8003bdc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003bfc:	e002      	b.n	8003c04 <bekle+0xe0>
    	butonKontrol = 1;
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <bekle+0x12c>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c08:	4813      	ldr	r0, [pc, #76]	@ (8003c58 <bekle+0x134>)
 8003c0a:	f007 fa9f 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <bekle+0x104>
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <bekle+0x124>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <bekle+0x128>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d0ee      	beq.n	8003bfe <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c20:	e002      	b.n	8003c28 <bekle+0x104>
    	butonKontrol = 1;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <bekle+0x12c>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c2c:	480a      	ldr	r0, [pc, #40]	@ (8003c58 <bekle+0x134>)
 8003c2e:	f007 fa8d 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <bekle+0x120>
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <bekle+0x124>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <bekle+0x128>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d0ee      	beq.n	8003c22 <bekle+0xfe>
    }

}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20001044 	.word	0x20001044
 8003c4c:	2000104c 	.word	0x2000104c
 8003c50:	2000109b 	.word	0x2000109b
 8003c54:	40010800 	.word	0x40010800
 8003c58:	40011000 	.word	0x40011000

08003c5c <buttonCheck>:

uint8_t buttonCheck(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003c60:	2101      	movs	r1, #1
 8003c62:	4815      	ldr	r0, [pc, #84]	@ (8003cb8 <buttonCheck+0x5c>)
 8003c64:	f007 fa72 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d01b      	beq.n	8003ca6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003c6e:	2108      	movs	r1, #8
 8003c70:	4812      	ldr	r0, [pc, #72]	@ (8003cbc <buttonCheck+0x60>)
 8003c72:	f007 fa6b 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d014      	beq.n	8003ca6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	480e      	ldr	r0, [pc, #56]	@ (8003cb8 <buttonCheck+0x5c>)
 8003c80:	f007 fa64 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d00d      	beq.n	8003ca6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	480a      	ldr	r0, [pc, #40]	@ (8003cb8 <buttonCheck+0x5c>)
 8003c8e:	f007 fa5d 	bl	800b14c <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d006      	beq.n	8003ca6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003c98:	2108      	movs	r1, #8
 8003c9a:	4807      	ldr	r0, [pc, #28]	@ (8003cb8 <buttonCheck+0x5c>)
 8003c9c:	f007 fa56 	bl	800b14c <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d104      	bne.n	8003cb0 <buttonCheck+0x54>
		backLightTimer = 0;
 8003ca6:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <buttonCheck+0x64>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
		return 1;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <buttonCheck+0x56>
	}
	return 0;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40010800 	.word	0x40010800
 8003cbc:	40011000 	.word	0x40011000
 8003cc0:	20001060 	.word	0x20001060

08003cc4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <checkBasincSalteri+0x54>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <checkBasincSalteri+0x12>
		basincVar=1;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <checkBasincSalteri+0x58>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <checkBasincSalteri+0x54>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d119      	bne.n	8003d12 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce2:	480f      	ldr	r0, [pc, #60]	@ (8003d20 <checkBasincSalteri+0x5c>)
 8003ce4:	f007 fa32 	bl	800b14c <HAL_GPIO_ReadPin>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <checkBasincSalteri+0x60>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <checkBasincSalteri+0x64>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d90a      	bls.n	8003d12 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <checkBasincSalteri+0x58>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003d02:	e006      	b.n	8003d12 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <checkBasincSalteri+0x60>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a07      	ldr	r2, [pc, #28]	@ (8003d28 <checkBasincSalteri+0x64>)
 8003d0a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <checkBasincSalteri+0x58>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20001073 	.word	0x20001073
 8003d1c:	2000106f 	.word	0x2000106f
 8003d20:	40011000 	.word	0x40011000
 8003d24:	20001044 	.word	0x20001044
 8003d28:	2000105c 	.word	0x2000105c

08003d2c <checkBasGonder>:

void checkBasGonder() {
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <checkBasGonder+0x74>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10b      	bne.n	8003d50 <checkBasGonder+0x24>
 8003d38:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <checkBasGonder+0x78>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <checkBasGonder+0x24>
 8003d40:	4b19      	ldr	r3, [pc, #100]	@ (8003da8 <checkBasGonder+0x7c>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <checkBasGonder+0x80>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e009      	b.n	8003d64 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003d50:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <checkBasGonder+0x78>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <checkBasGonder+0x80>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <checkBasGonder+0x74>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10b      	bne.n	8003d84 <checkBasGonder+0x58>
 8003d6c:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <checkBasGonder+0x84>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <checkBasGonder+0x58>
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <checkBasGonder+0x7c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d103      	bne.n	8003d84 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <checkBasGonder+0x88>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003d82:	e009      	b.n	8003d98 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003d84:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <checkBasGonder+0x84>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003d92:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <checkBasGonder+0x88>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	2000106d 	.word	0x2000106d
 8003da4:	200010a1 	.word	0x200010a1
 8003da8:	2000107b 	.word	0x2000107b
 8003dac:	200010a8 	.word	0x200010a8
 8003db0:	200010a4 	.word	0x200010a4
 8003db4:	200010a9 	.word	0x200010a9

08003db8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <checkKapiSecimleri+0x98>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003dc4:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <checkKapiSecimleri+0x98>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10e      	bne.n	8003df0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003dd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dd6:	4820      	ldr	r0, [pc, #128]	@ (8003e58 <checkKapiSecimleri+0xa0>)
 8003dd8:	f007 f9b8 	bl	800b14c <HAL_GPIO_ReadPin>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003de2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e002      	b.n	8003df0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003dea:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003df0:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <checkKapiSecimleri+0x98>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d10e      	bne.n	8003e16 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003df8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dfc:	4816      	ldr	r0, [pc, #88]	@ (8003e58 <checkKapiSecimleri+0xa0>)
 8003dfe:	f007 f9a5 	bl	800b14c <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003e08:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003e16:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <checkKapiSecimleri+0x98>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d116      	bne.n	8003e4c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e22:	480d      	ldr	r0, [pc, #52]	@ (8003e58 <checkKapiSecimleri+0xa0>)
 8003e24:	f007 f992 	bl	800b14c <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <checkKapiSecimleri+0x8e>
 8003e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e32:	4809      	ldr	r0, [pc, #36]	@ (8003e58 <checkKapiSecimleri+0xa0>)
 8003e34:	f007 f98a 	bl	800b14c <HAL_GPIO_ReadPin>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003e44:	e002      	b.n	8003e4c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003e46:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <checkKapiSecimleri+0x9c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20001074 	.word	0x20001074
 8003e54:	200010be 	.word	0x200010be
 8003e58:	40010800 	.word	0x40010800

08003e5c <checkAktifCalisma>:

void checkAktifCalisma() {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003e60:	4b66      	ldr	r3, [pc, #408]	@ (8003ffc <checkAktifCalisma+0x1a0>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f041 83ab 	bne.w	80055c0 <checkAktifCalisma+0x1764>
 8003e6a:	4b65      	ldr	r3, [pc, #404]	@ (8004000 <checkAktifCalisma+0x1a4>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f041 83a6 	bne.w	80055c0 <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003e74:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <checkAktifCalisma+0x1a8>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <checkAktifCalisma+0x56>
 8003e7c:	4b62      	ldr	r3, [pc, #392]	@ (8004008 <checkAktifCalisma+0x1ac>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d116      	bne.n	8003eb2 <checkAktifCalisma+0x56>
 8003e84:	4b61      	ldr	r3, [pc, #388]	@ (800400c <checkAktifCalisma+0x1b0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <checkAktifCalisma+0x46>
 8003e8c:	4b60      	ldr	r3, [pc, #384]	@ (8004010 <checkAktifCalisma+0x1b4>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <checkAktifCalisma+0x46>
 8003e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8004014 <checkAktifCalisma+0x1b8>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d007      	beq.n	8003eb2 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8004018 <checkAktifCalisma+0x1bc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01c      	beq.n	8003ee4 <checkAktifCalisma+0x88>
 8003eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800401c <checkAktifCalisma+0x1c0>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d118      	bne.n	8003ee4 <checkAktifCalisma+0x88>
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004020 <checkAktifCalisma+0x1c4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <checkAktifCalisma+0x66>
 8003eba:	4b5a      	ldr	r3, [pc, #360]	@ (8004024 <checkAktifCalisma+0x1c8>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <checkAktifCalisma+0x88>
 8003ec2:	4b59      	ldr	r3, [pc, #356]	@ (8004028 <checkAktifCalisma+0x1cc>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ed0:	4856      	ldr	r0, [pc, #344]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003ed2:	f007 f952 	bl	800b17a <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003ed6:	4b56      	ldr	r3, [pc, #344]	@ (8004030 <checkAktifCalisma+0x1d4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003edc:	4b55      	ldr	r3, [pc, #340]	@ (8004034 <checkAktifCalisma+0x1d8>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e008      	b.n	8003ef6 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003eea:	4850      	ldr	r0, [pc, #320]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003eec:	f007 f945 	bl	800b17a <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8004030 <checkAktifCalisma+0x1d4>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003ef6:	4b42      	ldr	r3, [pc, #264]	@ (8004000 <checkAktifCalisma+0x1a4>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d164      	bne.n	8003fc8 <checkAktifCalisma+0x16c>
 8003efe:	4b49      	ldr	r3, [pc, #292]	@ (8004024 <checkAktifCalisma+0x1c8>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <checkAktifCalisma+0xb2>
 8003f06:	4b46      	ldr	r3, [pc, #280]	@ (8004020 <checkAktifCalisma+0x1c4>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d05c      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
 8003f0e:	4b46      	ldr	r3, [pc, #280]	@ (8004028 <checkAktifCalisma+0x1cc>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d058      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003f16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f1a:	4844      	ldr	r0, [pc, #272]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003f1c:	f007 f916 	bl	800b14c <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <checkAktifCalisma+0xd2>
 8003f26:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <checkAktifCalisma+0x1dc>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04c      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4842      	ldr	r0, [pc, #264]	@ (800403c <checkAktifCalisma+0x1e0>)
 8003f32:	f007 f90b 	bl	800b14c <HAL_GPIO_ReadPin>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d145      	bne.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003f3c:	4b40      	ldr	r3, [pc, #256]	@ (8004040 <checkAktifCalisma+0x1e4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d041      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003f44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f48:	4838      	ldr	r0, [pc, #224]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003f4a:	f007 f8ff 	bl	800b14c <HAL_GPIO_ReadPin>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10e      	bne.n	8003f72 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f58:	4834      	ldr	r0, [pc, #208]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003f5a:	f007 f8f7 	bl	800b14c <HAL_GPIO_ReadPin>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003f64:	2140      	movs	r1, #64	@ 0x40
 8003f66:	4835      	ldr	r0, [pc, #212]	@ (800403c <checkAktifCalisma+0x1e0>)
 8003f68:	f007 f8f0 	bl	800b14c <HAL_GPIO_ReadPin>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d003      	beq.n	8003f7a <checkAktifCalisma+0x11e>
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <checkAktifCalisma+0x1a8>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d026      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <checkAktifCalisma+0x1b0>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003f88:	4b1f      	ldr	r3, [pc, #124]	@ (8004008 <checkAktifCalisma+0x1ac>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003f96:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <checkAktifCalisma+0x1bc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f083 0301 	eor.w	r3, r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d011      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003fa4:	4b27      	ldr	r3, [pc, #156]	@ (8004044 <checkAktifCalisma+0x1e8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8003fb2:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <checkAktifCalisma+0x1ec>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f083 0301 	eor.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8003fc0:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <checkAktifCalisma+0x1a8>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e002      	b.n	8003fce <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <checkAktifCalisma+0x1a8>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <checkAktifCalisma+0x1a8>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03c      	beq.n	8004050 <checkAktifCalisma+0x1f4>
 8003fd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fda:	4818      	ldr	r0, [pc, #96]	@ (800403c <checkAktifCalisma+0x1e0>)
 8003fdc:	f007 f8b6 	bl	800b14c <HAL_GPIO_ReadPin>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d134      	bne.n	8004050 <checkAktifCalisma+0x1f4>
 8003fe6:	4b19      	ldr	r3, [pc, #100]	@ (800404c <checkAktifCalisma+0x1f0>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d030      	beq.n	8004050 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ff4:	480d      	ldr	r0, [pc, #52]	@ (800402c <checkAktifCalisma+0x1d0>)
 8003ff6:	f007 f8c0 	bl	800b17a <HAL_GPIO_WritePin>
 8003ffa:	e02f      	b.n	800405c <checkAktifCalisma+0x200>
 8003ffc:	2000108a 	.word	0x2000108a
 8004000:	20001089 	.word	0x20001089
 8004004:	200010a1 	.word	0x200010a1
 8004008:	200010a2 	.word	0x200010a2
 800400c:	200010a4 	.word	0x200010a4
 8004010:	2000109c 	.word	0x2000109c
 8004014:	2000107f 	.word	0x2000107f
 8004018:	200010a3 	.word	0x200010a3
 800401c:	2000107e 	.word	0x2000107e
 8004020:	200010bd 	.word	0x200010bd
 8004024:	200010d0 	.word	0x200010d0
 8004028:	200010be 	.word	0x200010be
 800402c:	40010c00 	.word	0x40010c00
 8004030:	200010bf 	.word	0x200010bf
 8004034:	200010ab 	.word	0x200010ab
 8004038:	200010a8 	.word	0x200010a8
 800403c:	40011000 	.word	0x40011000
 8004040:	2000106f 	.word	0x2000106f
 8004044:	200010a6 	.word	0x200010a6
 8004048:	200010a7 	.word	0x200010a7
 800404c:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004056:	4865      	ldr	r0, [pc, #404]	@ (80041ec <checkAktifCalisma+0x390>)
 8004058:	f007 f88f 	bl	800b17a <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800405c:	4b64      	ldr	r3, [pc, #400]	@ (80041f0 <checkAktifCalisma+0x394>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <checkAktifCalisma+0x230>
 8004064:	4b63      	ldr	r3, [pc, #396]	@ (80041f4 <checkAktifCalisma+0x398>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d007      	beq.n	800407c <checkAktifCalisma+0x220>
 800406c:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <checkAktifCalisma+0x398>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d003      	beq.n	800407c <checkAktifCalisma+0x220>
 8004074:	4b60      	ldr	r3, [pc, #384]	@ (80041f8 <checkAktifCalisma+0x39c>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800407c:	2201      	movs	r2, #1
 800407e:	2104      	movs	r1, #4
 8004080:	485a      	ldr	r0, [pc, #360]	@ (80041ec <checkAktifCalisma+0x390>)
 8004082:	f007 f87a 	bl	800b17a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004086:	4b5d      	ldr	r3, [pc, #372]	@ (80041fc <checkAktifCalisma+0x3a0>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800408c:	4b5b      	ldr	r3, [pc, #364]	@ (80041fc <checkAktifCalisma+0x3a0>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d033      	beq.n	80040fc <checkAktifCalisma+0x2a0>
 8004094:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004098:	4854      	ldr	r0, [pc, #336]	@ (80041ec <checkAktifCalisma+0x390>)
 800409a:	f007 f857 	bl	800b14c <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <checkAktifCalisma+0x256>
 80040a4:	4b56      	ldr	r3, [pc, #344]	@ (8004200 <checkAktifCalisma+0x3a4>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <checkAktifCalisma+0x264>
 80040b2:	2102      	movs	r1, #2
 80040b4:	4853      	ldr	r0, [pc, #332]	@ (8004204 <checkAktifCalisma+0x3a8>)
 80040b6:	f007 f849 	bl	800b14c <HAL_GPIO_ReadPin>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11d      	bne.n	80040fc <checkAktifCalisma+0x2a0>
 80040c0:	4b51      	ldr	r3, [pc, #324]	@ (8004208 <checkAktifCalisma+0x3ac>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <checkAktifCalisma+0x274>
 80040c8:	4b50      	ldr	r3, [pc, #320]	@ (800420c <checkAktifCalisma+0x3b0>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <checkAktifCalisma+0x2a0>
 80040d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004210 <checkAktifCalisma+0x3b4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <checkAktifCalisma+0x2a0>
 80040d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004214 <checkAktifCalisma+0x3b8>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <checkAktifCalisma+0x2a0>
 80040e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <checkAktifCalisma+0x3bc>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <checkAktifCalisma+0x2a0>
					timer2=millis;
 80040ee:	4b4b      	ldr	r3, [pc, #300]	@ (800421c <checkAktifCalisma+0x3c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004220 <checkAktifCalisma+0x3c4>)
 80040f4:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80040f6:	4b48      	ldr	r3, [pc, #288]	@ (8004218 <checkAktifCalisma+0x3bc>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80040fc:	4b47      	ldr	r3, [pc, #284]	@ (800421c <checkAktifCalisma+0x3c0>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b47      	ldr	r3, [pc, #284]	@ (8004220 <checkAktifCalisma+0x3c4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	4a47      	ldr	r2, [pc, #284]	@ (8004224 <checkAktifCalisma+0x3c8>)
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	4293      	cmp	r3, r2
 800410c:	d303      	bcc.n	8004116 <checkAktifCalisma+0x2ba>
 800410e:	4b42      	ldr	r3, [pc, #264]	@ (8004218 <checkAktifCalisma+0x3bc>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <checkAktifCalisma+0x2ec>
 8004116:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <checkAktifCalisma+0x3ac>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f083 0301 	eor.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <checkAktifCalisma+0x2d6>
 8004124:	4b39      	ldr	r3, [pc, #228]	@ (800420c <checkAktifCalisma+0x3b0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f083 0301 	eor.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <checkAktifCalisma+0x2ec>
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <checkAktifCalisma+0x3b4>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	f083 0301 	eor.w	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <checkAktifCalisma+0x2ec>
 8004140:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <checkAktifCalisma+0x3b8>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004148:	2200      	movs	r2, #0
 800414a:	2104      	movs	r1, #4
 800414c:	4827      	ldr	r0, [pc, #156]	@ (80041ec <checkAktifCalisma+0x390>)
 800414e:	f007 f814 	bl	800b17a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004152:	4b2a      	ldr	r3, [pc, #168]	@ (80041fc <checkAktifCalisma+0x3a0>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004158:	4b2f      	ldr	r3, [pc, #188]	@ (8004218 <checkAktifCalisma+0x3bc>)
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800415e:	4b32      	ldr	r3, [pc, #200]	@ (8004228 <checkAktifCalisma+0x3cc>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004166:	4b31      	ldr	r3, [pc, #196]	@ (800422c <checkAktifCalisma+0x3d0>)
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800416c:	4b2e      	ldr	r3, [pc, #184]	@ (8004228 <checkAktifCalisma+0x3cc>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d116      	bne.n	80041a2 <checkAktifCalisma+0x346>
 8004174:	4b2e      	ldr	r3, [pc, #184]	@ (8004230 <checkAktifCalisma+0x3d4>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d112      	bne.n	80041a2 <checkAktifCalisma+0x346>
 800417c:	2101      	movs	r1, #1
 800417e:	4821      	ldr	r0, [pc, #132]	@ (8004204 <checkAktifCalisma+0x3a8>)
 8004180:	f006 ffe4 	bl	800b14c <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <checkAktifCalisma+0x346>
 800418a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800418e:	4817      	ldr	r0, [pc, #92]	@ (80041ec <checkAktifCalisma+0x390>)
 8004190:	f006 ffdc 	bl	800b14c <HAL_GPIO_ReadPin>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <checkAktifCalisma+0x3d0>)
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e011      	b.n	80041c6 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80041a2:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <checkAktifCalisma+0x3cc>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10d      	bne.n	80041c6 <checkAktifCalisma+0x36a>
 80041aa:	2101      	movs	r1, #1
 80041ac:	4815      	ldr	r0, [pc, #84]	@ (8004204 <checkAktifCalisma+0x3a8>)
 80041ae:	f006 ffcd 	bl	800b14c <HAL_GPIO_ReadPin>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <checkAktifCalisma+0x36a>
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <checkAktifCalisma+0x3d4>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <checkAktifCalisma+0x3d0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80041c6:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <checkAktifCalisma+0x3cc>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d135      	bne.n	800423a <checkAktifCalisma+0x3de>
 80041ce:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <checkAktifCalisma+0x3d4>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d131      	bne.n	800423a <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80041d6:	2101      	movs	r1, #1
 80041d8:	480a      	ldr	r0, [pc, #40]	@ (8004204 <checkAktifCalisma+0x3a8>)
 80041da:	f006 ffb7 	bl	800b14c <HAL_GPIO_ReadPin>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d127      	bne.n	8004234 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80041e4:	4b11      	ldr	r3, [pc, #68]	@ (800422c <checkAktifCalisma+0x3d0>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e026      	b.n	800423a <checkAktifCalisma+0x3de>
 80041ec:	40010c00 	.word	0x40010c00
 80041f0:	200010a1 	.word	0x200010a1
 80041f4:	2000107b 	.word	0x2000107b
 80041f8:	2000107f 	.word	0x2000107f
 80041fc:	200010a5 	.word	0x200010a5
 8004200:	200010a8 	.word	0x200010a8
 8004204:	40011000 	.word	0x40011000
 8004208:	200010bd 	.word	0x200010bd
 800420c:	200010d0 	.word	0x200010d0
 8004210:	200010be 	.word	0x200010be
 8004214:	2000106f 	.word	0x2000106f
 8004218:	2000109d 	.word	0x2000109d
 800421c:	20001044 	.word	0x20001044
 8004220:	20001050 	.word	0x20001050
 8004224:	20001080 	.word	0x20001080
 8004228:	20001070 	.word	0x20001070
 800422c:	200010c2 	.word	0x200010c2
 8004230:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 8004234:	4b7f      	ldr	r3, [pc, #508]	@ (8004434 <checkAktifCalisma+0x5d8>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800423a:	4b7f      	ldr	r3, [pc, #508]	@ (8004438 <checkAktifCalisma+0x5dc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d17c      	bne.n	800433c <checkAktifCalisma+0x4e0>
 8004242:	4b7e      	ldr	r3, [pc, #504]	@ (800443c <checkAktifCalisma+0x5e0>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d078      	beq.n	800433c <checkAktifCalisma+0x4e0>
 800424a:	4b7d      	ldr	r3, [pc, #500]	@ (8004440 <checkAktifCalisma+0x5e4>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d074      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004252:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004256:	487b      	ldr	r0, [pc, #492]	@ (8004444 <checkAktifCalisma+0x5e8>)
 8004258:	f006 ff78 	bl	800b14c <HAL_GPIO_ReadPin>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <checkAktifCalisma+0x40e>
 8004262:	4b79      	ldr	r3, [pc, #484]	@ (8004448 <checkAktifCalisma+0x5ec>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d068      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800426a:	4b72      	ldr	r3, [pc, #456]	@ (8004434 <checkAktifCalisma+0x5d8>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d064      	beq.n	800433c <checkAktifCalisma+0x4e0>
 8004272:	4b76      	ldr	r3, [pc, #472]	@ (800444c <checkAktifCalisma+0x5f0>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	f083 0301 	eor.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05d      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004280:	2104      	movs	r1, #4
 8004282:	4873      	ldr	r0, [pc, #460]	@ (8004450 <checkAktifCalisma+0x5f4>)
 8004284:	f006 ff62 	bl	800b14c <HAL_GPIO_ReadPin>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <checkAktifCalisma+0x43a>
 800428e:	4b71      	ldr	r3, [pc, #452]	@ (8004454 <checkAktifCalisma+0x5f8>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d152      	bne.n	800433c <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800429a:	486a      	ldr	r0, [pc, #424]	@ (8004444 <checkAktifCalisma+0x5e8>)
 800429c:	f006 ff56 	bl	800b14c <HAL_GPIO_ReadPin>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10e      	bne.n	80042c4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80042a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042aa:	4866      	ldr	r0, [pc, #408]	@ (8004444 <checkAktifCalisma+0x5e8>)
 80042ac:	f006 ff4e 	bl	800b14c <HAL_GPIO_ReadPin>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d106      	bne.n	80042c4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80042b6:	2140      	movs	r1, #64	@ 0x40
 80042b8:	4865      	ldr	r0, [pc, #404]	@ (8004450 <checkAktifCalisma+0x5f4>)
 80042ba:	f006 ff47 	bl	800b14c <HAL_GPIO_ReadPin>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d003      	beq.n	80042cc <checkAktifCalisma+0x470>
 80042c4:	4b64      	ldr	r3, [pc, #400]	@ (8004458 <checkAktifCalisma+0x5fc>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d037      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80042cc:	4b63      	ldr	r3, [pc, #396]	@ (800445c <checkAktifCalisma+0x600>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d030      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80042da:	4b61      	ldr	r3, [pc, #388]	@ (8004460 <checkAktifCalisma+0x604>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d029      	beq.n	800433c <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80042e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004464 <checkAktifCalisma+0x608>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f083 0301 	eor.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d022      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80042f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004468 <checkAktifCalisma+0x60c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f083 0301 	eor.w	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <checkAktifCalisma+0x610>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d014      	beq.n	800433c <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004312:	4b57      	ldr	r3, [pc, #348]	@ (8004470 <checkAktifCalisma+0x614>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	f083 0301 	eor.w	r3, r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004320:	2201      	movs	r2, #1
 8004322:	2102      	movs	r1, #2
 8004324:	4847      	ldr	r0, [pc, #284]	@ (8004444 <checkAktifCalisma+0x5e8>)
 8004326:	f006 ff28 	bl	800b17a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800432a:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <checkAktifCalisma+0x5fc>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <checkAktifCalisma+0x618>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004336:	4b50      	ldr	r3, [pc, #320]	@ (8004478 <checkAktifCalisma+0x61c>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800433c:	4b46      	ldr	r3, [pc, #280]	@ (8004458 <checkAktifCalisma+0x5fc>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d033      	beq.n	80043ac <checkAktifCalisma+0x550>
 8004344:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004348:	483e      	ldr	r0, [pc, #248]	@ (8004444 <checkAktifCalisma+0x5e8>)
 800434a:	f006 feff 	bl	800b14c <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <checkAktifCalisma+0x506>
 8004354:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <checkAktifCalisma+0x5ec>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <checkAktifCalisma+0x51c>
 8004362:	2104      	movs	r1, #4
 8004364:	483a      	ldr	r0, [pc, #232]	@ (8004450 <checkAktifCalisma+0x5f4>)
 8004366:	f006 fef1 	bl	800b14c <HAL_GPIO_ReadPin>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d11d      	bne.n	80043ac <checkAktifCalisma+0x550>
 8004370:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <checkAktifCalisma+0x5f8>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <checkAktifCalisma+0x550>
 8004378:	4b30      	ldr	r3, [pc, #192]	@ (800443c <checkAktifCalisma+0x5e0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <checkAktifCalisma+0x550>
 8004380:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <checkAktifCalisma+0x5e4>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d011      	beq.n	80043ac <checkAktifCalisma+0x550>
 8004388:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <checkAktifCalisma+0x5d8>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <checkAktifCalisma+0x550>
 8004390:	4b3a      	ldr	r3, [pc, #232]	@ (800447c <checkAktifCalisma+0x620>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <checkAktifCalisma+0x550>
					timer2=millis;
 800439e:	4b38      	ldr	r3, [pc, #224]	@ (8004480 <checkAktifCalisma+0x624>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	@ (8004484 <checkAktifCalisma+0x628>)
 80043a4:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80043a6:	4b35      	ldr	r3, [pc, #212]	@ (800447c <checkAktifCalisma+0x620>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80043ac:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <checkAktifCalisma+0x624>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b34      	ldr	r3, [pc, #208]	@ (8004484 <checkAktifCalisma+0x628>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	4a34      	ldr	r2, [pc, #208]	@ (8004488 <checkAktifCalisma+0x62c>)
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d303      	bcc.n	80043c6 <checkAktifCalisma+0x56a>
 80043be:	4b2f      	ldr	r3, [pc, #188]	@ (800447c <checkAktifCalisma+0x620>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d114      	bne.n	80043f0 <checkAktifCalisma+0x594>
 80043c6:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <checkAktifCalisma+0x5e0>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <checkAktifCalisma+0x594>
 80043d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <checkAktifCalisma+0x5e4>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	f083 0301 	eor.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <checkAktifCalisma+0x594>
 80043e2:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <checkAktifCalisma+0x5d8>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2102      	movs	r1, #2
 80043f4:	4813      	ldr	r0, [pc, #76]	@ (8004444 <checkAktifCalisma+0x5e8>)
 80043f6:	f006 fec0 	bl	800b17a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80043fa:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <checkAktifCalisma+0x5fc>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004400:	4b1e      	ldr	r3, [pc, #120]	@ (800447c <checkAktifCalisma+0x620>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004406:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <checkAktifCalisma+0x5fc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d040      	beq.n	8004490 <checkAktifCalisma+0x634>
 800440e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004412:	480f      	ldr	r0, [pc, #60]	@ (8004450 <checkAktifCalisma+0x5f4>)
 8004414:	f006 fe9a 	bl	800b14c <HAL_GPIO_ReadPin>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d138      	bne.n	8004490 <checkAktifCalisma+0x634>
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <checkAktifCalisma+0x630>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d034      	beq.n	8004490 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004426:	2201      	movs	r2, #1
 8004428:	2101      	movs	r1, #1
 800442a:	4806      	ldr	r0, [pc, #24]	@ (8004444 <checkAktifCalisma+0x5e8>)
 800442c:	f006 fea5 	bl	800b17a <HAL_GPIO_WritePin>
 8004430:	e033      	b.n	800449a <checkAktifCalisma+0x63e>
 8004432:	bf00      	nop
 8004434:	200010c2 	.word	0x200010c2
 8004438:	20001089 	.word	0x20001089
 800443c:	200010bd 	.word	0x200010bd
 8004440:	200010be 	.word	0x200010be
 8004444:	40010c00 	.word	0x40010c00
 8004448:	200010a9 	.word	0x200010a9
 800444c:	200010bc 	.word	0x200010bc
 8004450:	40011000 	.word	0x40011000
 8004454:	20001072 	.word	0x20001072
 8004458:	200010a4 	.word	0x200010a4
 800445c:	200010a1 	.word	0x200010a1
 8004460:	200010a5 	.word	0x200010a5
 8004464:	200010a2 	.word	0x200010a2
 8004468:	200010a3 	.word	0x200010a3
 800446c:	200010a6 	.word	0x200010a6
 8004470:	200010a7 	.word	0x200010a7
 8004474:	200010ac 	.word	0x200010ac
 8004478:	200010cc 	.word	0x200010cc
 800447c:	2000109c 	.word	0x2000109c
 8004480:	20001044 	.word	0x20001044
 8004484:	20001050 	.word	0x20001050
 8004488:	20001081 	.word	0x20001081
 800448c:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004490:	2200      	movs	r2, #0
 8004492:	2101      	movs	r1, #1
 8004494:	4836      	ldr	r0, [pc, #216]	@ (8004570 <checkAktifCalisma+0x714>)
 8004496:	f006 fe70 	bl	800b17a <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800449a:	4b36      	ldr	r3, [pc, #216]	@ (8004574 <checkAktifCalisma+0x718>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8080 	bne.w	80045a4 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <checkAktifCalisma+0x71c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d003      	beq.n	80044b4 <checkAktifCalisma+0x658>
 80044ac:	4b32      	ldr	r3, [pc, #200]	@ (8004578 <checkAktifCalisma+0x71c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d177      	bne.n	80045a4 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 80044b4:	4b31      	ldr	r3, [pc, #196]	@ (800457c <checkAktifCalisma+0x720>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d073      	beq.n	80045a4 <checkAktifCalisma+0x748>
 80044bc:	4b30      	ldr	r3, [pc, #192]	@ (8004580 <checkAktifCalisma+0x724>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06f      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80044c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044c8:	4829      	ldr	r0, [pc, #164]	@ (8004570 <checkAktifCalisma+0x714>)
 80044ca:	f006 fe3f 	bl	800b14c <HAL_GPIO_ReadPin>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d167      	bne.n	80045a4 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80044d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044d8:	482a      	ldr	r0, [pc, #168]	@ (8004584 <checkAktifCalisma+0x728>)
 80044da:	f006 fe37 	bl	800b14c <HAL_GPIO_ReadPin>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <checkAktifCalisma+0x690>
 80044e4:	4b28      	ldr	r3, [pc, #160]	@ (8004588 <checkAktifCalisma+0x72c>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d15b      	bne.n	80045a4 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80044ec:	2140      	movs	r1, #64	@ 0x40
 80044ee:	4825      	ldr	r0, [pc, #148]	@ (8004584 <checkAktifCalisma+0x728>)
 80044f0:	f006 fe2c 	bl	800b14c <HAL_GPIO_ReadPin>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10f      	bne.n	800451a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80044fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044fe:	481c      	ldr	r0, [pc, #112]	@ (8004570 <checkAktifCalisma+0x714>)
 8004500:	f006 fe24 	bl	800b14c <HAL_GPIO_ReadPin>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d107      	bne.n	800451a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800450a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800450e:	4818      	ldr	r0, [pc, #96]	@ (8004570 <checkAktifCalisma+0x714>)
 8004510:	f006 fe1c 	bl	800b14c <HAL_GPIO_ReadPin>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d003      	beq.n	8004522 <checkAktifCalisma+0x6c6>
 800451a:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <checkAktifCalisma+0x730>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d040      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <checkAktifCalisma+0x734>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f083 0301 	eor.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d039      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004530:	4b18      	ldr	r3, [pc, #96]	@ (8004594 <checkAktifCalisma+0x738>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d032      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 800453e:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <checkAktifCalisma+0x73c>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02b      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <checkAktifCalisma+0x740>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d024      	beq.n	80045a4 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 800455a:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <checkAktifCalisma+0x744>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f083 0301 	eor.w	r3, r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01d      	beq.n	80045a4 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004568:	4b08      	ldr	r3, [pc, #32]	@ (800458c <checkAktifCalisma+0x730>)
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e01c      	b.n	80045aa <checkAktifCalisma+0x74e>
 8004570:	40010c00 	.word	0x40010c00
 8004574:	20001089 	.word	0x20001089
 8004578:	2000107b 	.word	0x2000107b
 800457c:	200010bd 	.word	0x200010bd
 8004580:	200010be 	.word	0x200010be
 8004584:	40011000 	.word	0x40011000
 8004588:	2000107c 	.word	0x2000107c
 800458c:	200010a2 	.word	0x200010a2
 8004590:	200010a1 	.word	0x200010a1
 8004594:	200010a5 	.word	0x200010a5
 8004598:	200010a4 	.word	0x200010a4
 800459c:	200010a3 	.word	0x200010a3
 80045a0:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 80045a4:	4b64      	ldr	r3, [pc, #400]	@ (8004738 <checkAktifCalisma+0x8dc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80045aa:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <checkAktifCalisma+0x8dc>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80045b2:	2201      	movs	r2, #1
 80045b4:	2120      	movs	r1, #32
 80045b6:	4861      	ldr	r0, [pc, #388]	@ (800473c <checkAktifCalisma+0x8e0>)
 80045b8:	f006 fddf 	bl	800b17a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 80045bc:	4b60      	ldr	r3, [pc, #384]	@ (8004740 <checkAktifCalisma+0x8e4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80045c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004740 <checkAktifCalisma+0x8e4>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d025      	beq.n	8004616 <checkAktifCalisma+0x7ba>
 80045ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045ce:	485d      	ldr	r0, [pc, #372]	@ (8004744 <checkAktifCalisma+0x8e8>)
 80045d0:	f006 fdbc 	bl	800b14c <HAL_GPIO_ReadPin>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d007      	beq.n	80045ea <checkAktifCalisma+0x78e>
 80045da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045de:	4857      	ldr	r0, [pc, #348]	@ (800473c <checkAktifCalisma+0x8e0>)
 80045e0:	f006 fdb4 	bl	800b14c <HAL_GPIO_ReadPin>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d115      	bne.n	8004616 <checkAktifCalisma+0x7ba>
 80045ea:	4b57      	ldr	r3, [pc, #348]	@ (8004748 <checkAktifCalisma+0x8ec>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <checkAktifCalisma+0x7ba>
 80045f2:	4b56      	ldr	r3, [pc, #344]	@ (800474c <checkAktifCalisma+0x8f0>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <checkAktifCalisma+0x7ba>
 80045fa:	4b55      	ldr	r3, [pc, #340]	@ (8004750 <checkAktifCalisma+0x8f4>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	f083 0301 	eor.w	r3, r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004608:	4b52      	ldr	r3, [pc, #328]	@ (8004754 <checkAktifCalisma+0x8f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a52      	ldr	r2, [pc, #328]	@ (8004758 <checkAktifCalisma+0x8fc>)
 800460e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004610:	4b4f      	ldr	r3, [pc, #316]	@ (8004750 <checkAktifCalisma+0x8f4>)
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004616:	4b4f      	ldr	r3, [pc, #316]	@ (8004754 <checkAktifCalisma+0x8f8>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b4f      	ldr	r3, [pc, #316]	@ (8004758 <checkAktifCalisma+0x8fc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a4e      	ldr	r2, [pc, #312]	@ (800475c <checkAktifCalisma+0x900>)
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	4293      	cmp	r3, r2
 8004626:	d303      	bcc.n	8004630 <checkAktifCalisma+0x7d4>
 8004628:	4b49      	ldr	r3, [pc, #292]	@ (8004750 <checkAktifCalisma+0x8f4>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <checkAktifCalisma+0x7f0>
 8004630:	4b45      	ldr	r3, [pc, #276]	@ (8004748 <checkAktifCalisma+0x8ec>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f083 0301 	eor.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <checkAktifCalisma+0x7f0>
 800463e:	4b43      	ldr	r3, [pc, #268]	@ (800474c <checkAktifCalisma+0x8f0>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	f083 0301 	eor.w	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	2120      	movs	r1, #32
 8004650:	483a      	ldr	r0, [pc, #232]	@ (800473c <checkAktifCalisma+0x8e0>)
 8004652:	f006 fd92 	bl	800b17a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004656:	4b3a      	ldr	r3, [pc, #232]	@ (8004740 <checkAktifCalisma+0x8e4>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 800465c:	4b3c      	ldr	r3, [pc, #240]	@ (8004750 <checkAktifCalisma+0x8f4>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004662:	4b3f      	ldr	r3, [pc, #252]	@ (8004760 <checkAktifCalisma+0x904>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 8088 	bne.w	800477c <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800466c:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <checkAktifCalisma+0x908>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d003      	beq.n	800467c <checkAktifCalisma+0x820>
 8004674:	4b3b      	ldr	r3, [pc, #236]	@ (8004764 <checkAktifCalisma+0x908>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d17f      	bne.n	800477c <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 800467c:	4b32      	ldr	r3, [pc, #200]	@ (8004748 <checkAktifCalisma+0x8ec>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d07b      	beq.n	800477c <checkAktifCalisma+0x920>
 8004684:	4b31      	ldr	r3, [pc, #196]	@ (800474c <checkAktifCalisma+0x8f0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d077      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800468c:	2140      	movs	r1, #64	@ 0x40
 800468e:	482b      	ldr	r0, [pc, #172]	@ (800473c <checkAktifCalisma+0x8e0>)
 8004690:	f006 fd5c 	bl	800b14c <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d170      	bne.n	800477c <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800469a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800469e:	4827      	ldr	r0, [pc, #156]	@ (800473c <checkAktifCalisma+0x8e0>)
 80046a0:	f006 fd54 	bl	800b14c <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <checkAktifCalisma+0x856>
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <checkAktifCalisma+0x90c>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d164      	bne.n	800477c <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80046b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046b6:	4823      	ldr	r0, [pc, #140]	@ (8004744 <checkAktifCalisma+0x8e8>)
 80046b8:	f006 fd48 	bl	800b14c <HAL_GPIO_ReadPin>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10f      	bne.n	80046e2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80046c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046c6:	481f      	ldr	r0, [pc, #124]	@ (8004744 <checkAktifCalisma+0x8e8>)
 80046c8:	f006 fd40 	bl	800b14c <HAL_GPIO_ReadPin>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80046d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046d6:	481b      	ldr	r0, [pc, #108]	@ (8004744 <checkAktifCalisma+0x8e8>)
 80046d8:	f006 fd38 	bl	800b14c <HAL_GPIO_ReadPin>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d003      	beq.n	80046ea <checkAktifCalisma+0x88e>
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <checkAktifCalisma+0x910>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d048      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 80046ea:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <checkAktifCalisma+0x914>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	f083 0301 	eor.w	r3, r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d041      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 80046f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <checkAktifCalisma+0x918>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f083 0301 	eor.w	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d03a      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004706:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <checkAktifCalisma+0x91c>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d033      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004714:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <checkAktifCalisma+0x8e4>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f083 0301 	eor.w	r3, r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02c      	beq.n	800477c <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <checkAktifCalisma+0x8dc>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d025      	beq.n	800477c <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004730:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <checkAktifCalisma+0x910>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e024      	b.n	8004782 <checkAktifCalisma+0x926>
 8004738:	200010a2 	.word	0x200010a2
 800473c:	40011000 	.word	0x40011000
 8004740:	200010a6 	.word	0x200010a6
 8004744:	40010c00 	.word	0x40010c00
 8004748:	200010bd 	.word	0x200010bd
 800474c:	200010be 	.word	0x200010be
 8004750:	2000109e 	.word	0x2000109e
 8004754:	20001044 	.word	0x20001044
 8004758:	20001050 	.word	0x20001050
 800475c:	20001082 	.word	0x20001082
 8004760:	20001089 	.word	0x20001089
 8004764:	2000107b 	.word	0x2000107b
 8004768:	2000107d 	.word	0x2000107d
 800476c:	200010a3 	.word	0x200010a3
 8004770:	200010a1 	.word	0x200010a1
 8004774:	200010a5 	.word	0x200010a5
 8004778:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 800477c:	4b96      	ldr	r3, [pc, #600]	@ (80049d8 <checkAktifCalisma+0xb7c>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004782:	4b95      	ldr	r3, [pc, #596]	@ (80049d8 <checkAktifCalisma+0xb7c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800478a:	2201      	movs	r2, #1
 800478c:	2110      	movs	r1, #16
 800478e:	4893      	ldr	r0, [pc, #588]	@ (80049dc <checkAktifCalisma+0xb80>)
 8004790:	f006 fcf3 	bl	800b17a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004794:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <checkAktifCalisma+0xb84>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800479a:	4b91      	ldr	r3, [pc, #580]	@ (80049e0 <checkAktifCalisma+0xb84>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d024      	beq.n	80047ec <checkAktifCalisma+0x990>
 80047a2:	2140      	movs	r1, #64	@ 0x40
 80047a4:	488d      	ldr	r0, [pc, #564]	@ (80049dc <checkAktifCalisma+0xb80>)
 80047a6:	f006 fcd1 	bl	800b14c <HAL_GPIO_ReadPin>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d007      	beq.n	80047c0 <checkAktifCalisma+0x964>
 80047b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80047b4:	4889      	ldr	r0, [pc, #548]	@ (80049dc <checkAktifCalisma+0xb80>)
 80047b6:	f006 fcc9 	bl	800b14c <HAL_GPIO_ReadPin>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d115      	bne.n	80047ec <checkAktifCalisma+0x990>
 80047c0:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <checkAktifCalisma+0xb88>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d011      	beq.n	80047ec <checkAktifCalisma+0x990>
 80047c8:	4b87      	ldr	r3, [pc, #540]	@ (80049e8 <checkAktifCalisma+0xb8c>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00d      	beq.n	80047ec <checkAktifCalisma+0x990>
 80047d0:	4b86      	ldr	r3, [pc, #536]	@ (80049ec <checkAktifCalisma+0xb90>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f083 0301 	eor.w	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <checkAktifCalisma+0x990>
					timer2=millis;
 80047de:	4b84      	ldr	r3, [pc, #528]	@ (80049f0 <checkAktifCalisma+0xb94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a84      	ldr	r2, [pc, #528]	@ (80049f4 <checkAktifCalisma+0xb98>)
 80047e4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80047e6:	4b81      	ldr	r3, [pc, #516]	@ (80049ec <checkAktifCalisma+0xb90>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80047ec:	4b80      	ldr	r3, [pc, #512]	@ (80049f0 <checkAktifCalisma+0xb94>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b80      	ldr	r3, [pc, #512]	@ (80049f4 <checkAktifCalisma+0xb98>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	4a80      	ldr	r2, [pc, #512]	@ (80049f8 <checkAktifCalisma+0xb9c>)
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d303      	bcc.n	8004806 <checkAktifCalisma+0x9aa>
 80047fe:	4b7b      	ldr	r3, [pc, #492]	@ (80049ec <checkAktifCalisma+0xb90>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <checkAktifCalisma+0x9c6>
 8004806:	4b77      	ldr	r3, [pc, #476]	@ (80049e4 <checkAktifCalisma+0xb88>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f083 0301 	eor.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <checkAktifCalisma+0x9c6>
 8004814:	4b74      	ldr	r3, [pc, #464]	@ (80049e8 <checkAktifCalisma+0xb8c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004822:	2200      	movs	r2, #0
 8004824:	2110      	movs	r1, #16
 8004826:	486d      	ldr	r0, [pc, #436]	@ (80049dc <checkAktifCalisma+0xb80>)
 8004828:	f006 fca7 	bl	800b17a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 800482c:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <checkAktifCalisma+0xb84>)
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004832:	4b6e      	ldr	r3, [pc, #440]	@ (80049ec <checkAktifCalisma+0xb90>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800483c:	486f      	ldr	r0, [pc, #444]	@ (80049fc <checkAktifCalisma+0xba0>)
 800483e:	f006 fc85 	bl	800b14c <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d120      	bne.n	800488a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004848:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800484c:	486b      	ldr	r0, [pc, #428]	@ (80049fc <checkAktifCalisma+0xba0>)
 800484e:	f006 fc7d 	bl	800b14c <HAL_GPIO_ReadPin>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d118      	bne.n	800488a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004858:	2104      	movs	r1, #4
 800485a:	4868      	ldr	r0, [pc, #416]	@ (80049fc <checkAktifCalisma+0xba0>)
 800485c:	f006 fc76 	bl	800b14c <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d111      	bne.n	800488a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004866:	2102      	movs	r1, #2
 8004868:	4864      	ldr	r0, [pc, #400]	@ (80049fc <checkAktifCalisma+0xba0>)
 800486a:	f006 fc6f 	bl	800b14c <HAL_GPIO_ReadPin>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004874:	2101      	movs	r1, #1
 8004876:	4861      	ldr	r0, [pc, #388]	@ (80049fc <checkAktifCalisma+0xba0>)
 8004878:	f006 fc68 	bl	800b14c <HAL_GPIO_ReadPin>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004882:	4b5f      	ldr	r3, [pc, #380]	@ (8004a00 <checkAktifCalisma+0xba4>)
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e002      	b.n	8004890 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 800488a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a00 <checkAktifCalisma+0xba4>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004890:	4b5c      	ldr	r3, [pc, #368]	@ (8004a04 <checkAktifCalisma+0xba8>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d144      	bne.n	8004922 <checkAktifCalisma+0xac6>
 8004898:	4b5b      	ldr	r3, [pc, #364]	@ (8004a08 <checkAktifCalisma+0xbac>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d003      	beq.n	80048a8 <checkAktifCalisma+0xa4c>
 80048a0:	4b59      	ldr	r3, [pc, #356]	@ (8004a08 <checkAktifCalisma+0xbac>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d13c      	bne.n	8004922 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80048a8:	2180      	movs	r1, #128	@ 0x80
 80048aa:	484c      	ldr	r0, [pc, #304]	@ (80049dc <checkAktifCalisma+0xb80>)
 80048ac:	f006 fc4e 	bl	800b14c <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <checkAktifCalisma+0xa62>
 80048b6:	4b55      	ldr	r3, [pc, #340]	@ (8004a0c <checkAktifCalisma+0xbb0>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <checkAktifCalisma+0xa7a>
 80048be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048c2:	484e      	ldr	r0, [pc, #312]	@ (80049fc <checkAktifCalisma+0xba0>)
 80048c4:	f006 fc42 	bl	800b14c <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d129      	bne.n	8004922 <checkAktifCalisma+0xac6>
 80048ce:	4b4f      	ldr	r3, [pc, #316]	@ (8004a0c <checkAktifCalisma+0xbb0>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d125      	bne.n	8004922 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80048d6:	2104      	movs	r1, #4
 80048d8:	4840      	ldr	r0, [pc, #256]	@ (80049dc <checkAktifCalisma+0xb80>)
 80048da:	f006 fc37 	bl	800b14c <HAL_GPIO_ReadPin>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d003      	beq.n	80048ec <checkAktifCalisma+0xa90>
 80048e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004a10 <checkAktifCalisma+0xbb4>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11a      	bne.n	8004922 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80048ec:	2102      	movs	r1, #2
 80048ee:	483b      	ldr	r0, [pc, #236]	@ (80049dc <checkAktifCalisma+0xb80>)
 80048f0:	f006 fc2c 	bl	800b14c <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d113      	bne.n	8004922 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80048fa:	4b46      	ldr	r3, [pc, #280]	@ (8004a14 <checkAktifCalisma+0xbb8>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f083 0301 	eor.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004908:	4b3d      	ldr	r3, [pc, #244]	@ (8004a00 <checkAktifCalisma+0xba4>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004910:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <checkAktifCalisma+0xbbc>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004916:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <checkAktifCalisma+0xb94>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a40      	ldr	r2, [pc, #256]	@ (8004a1c <checkAktifCalisma+0xbc0>)
 800491c:	6013      	str	r3, [r2, #0]
					bekle();
 800491e:	f7ff f901 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004922:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <checkAktifCalisma+0xb94>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b3d      	ldr	r3, [pc, #244]	@ (8004a1c <checkAktifCalisma+0xbc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a20 <checkAktifCalisma+0xbc4>)
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	4293      	cmp	r3, r2
 8004932:	d211      	bcs.n	8004958 <checkAktifCalisma+0xafc>
 8004934:	2104      	movs	r1, #4
 8004936:	4829      	ldr	r0, [pc, #164]	@ (80049dc <checkAktifCalisma+0xb80>)
 8004938:	f006 fc08 	bl	800b14c <HAL_GPIO_ReadPin>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <checkAktifCalisma+0xafc>
 8004942:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <checkAktifCalisma+0xbb4>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <checkAktifCalisma+0xafc>
 800494a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a00 <checkAktifCalisma+0xba4>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	f083 0301 	eor.w	r3, r3, #1
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004958:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <checkAktifCalisma+0xbbc>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800495e:	4b29      	ldr	r3, [pc, #164]	@ (8004a04 <checkAktifCalisma+0xba8>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d160      	bne.n	8004a28 <checkAktifCalisma+0xbcc>
 8004966:	4b28      	ldr	r3, [pc, #160]	@ (8004a08 <checkAktifCalisma+0xbac>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d003      	beq.n	8004976 <checkAktifCalisma+0xb1a>
 800496e:	4b26      	ldr	r3, [pc, #152]	@ (8004a08 <checkAktifCalisma+0xbac>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d158      	bne.n	8004a28 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004976:	2104      	movs	r1, #4
 8004978:	4818      	ldr	r0, [pc, #96]	@ (80049dc <checkAktifCalisma+0xb80>)
 800497a:	f006 fbe7 	bl	800b14c <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d003      	beq.n	800498c <checkAktifCalisma+0xb30>
 8004984:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <checkAktifCalisma+0xbb4>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d14d      	bne.n	8004a28 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800498c:	2102      	movs	r1, #2
 800498e:	4813      	ldr	r0, [pc, #76]	@ (80049dc <checkAktifCalisma+0xb80>)
 8004990:	f006 fbdc 	bl	800b14c <HAL_GPIO_ReadPin>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d146      	bne.n	8004a28 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800499a:	2180      	movs	r1, #128	@ 0x80
 800499c:	480f      	ldr	r0, [pc, #60]	@ (80049dc <checkAktifCalisma+0xb80>)
 800499e:	f006 fbd5 	bl	800b14c <HAL_GPIO_ReadPin>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <checkAktifCalisma+0xb54>
 80049a8:	4b18      	ldr	r3, [pc, #96]	@ (8004a0c <checkAktifCalisma+0xbb0>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <checkAktifCalisma+0xb6c>
 80049b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049b4:	4811      	ldr	r0, [pc, #68]	@ (80049fc <checkAktifCalisma+0xba0>)
 80049b6:	f006 fbc9 	bl	800b14c <HAL_GPIO_ReadPin>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d133      	bne.n	8004a28 <checkAktifCalisma+0xbcc>
 80049c0:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <checkAktifCalisma+0xbb0>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d12f      	bne.n	8004a28 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 80049c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <checkAktifCalisma+0xba4>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02b      	beq.n	8004a28 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <checkAktifCalisma+0xbc8>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e02a      	b.n	8004a2e <checkAktifCalisma+0xbd2>
 80049d8:	200010a3 	.word	0x200010a3
 80049dc:	40011000 	.word	0x40011000
 80049e0:	200010a7 	.word	0x200010a7
 80049e4:	200010bd 	.word	0x200010bd
 80049e8:	200010be 	.word	0x200010be
 80049ec:	2000109f 	.word	0x2000109f
 80049f0:	20001044 	.word	0x20001044
 80049f4:	20001050 	.word	0x20001050
 80049f8:	20001082 	.word	0x20001082
 80049fc:	40010c00 	.word	0x40010c00
 8004a00:	200010ad 	.word	0x200010ad
 8004a04:	20001075 	.word	0x20001075
 8004a08:	20001074 	.word	0x20001074
 8004a0c:	20001078 	.word	0x20001078
 8004a10:	20001072 	.word	0x20001072
 8004a14:	2000109b 	.word	0x2000109b
 8004a18:	200010ae 	.word	0x200010ae
 8004a1c:	20001048 	.word	0x20001048
 8004a20:	20001085 	.word	0x20001085
 8004a24:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 8004a28:	4b8b      	ldr	r3, [pc, #556]	@ (8004c58 <checkAktifCalisma+0xdfc>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c5c <checkAktifCalisma+0xe00>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d121      	bne.n	8004a7a <checkAktifCalisma+0xc1e>
 8004a36:	4b8a      	ldr	r3, [pc, #552]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d003      	beq.n	8004a46 <checkAktifCalisma+0xbea>
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d119      	bne.n	8004a7a <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004a46:	2104      	movs	r1, #4
 8004a48:	4886      	ldr	r0, [pc, #536]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004a4a:	f006 fb7f 	bl	800b14c <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d003      	beq.n	8004a5c <checkAktifCalisma+0xc00>
 8004a54:	4b84      	ldr	r3, [pc, #528]	@ (8004c68 <checkAktifCalisma+0xe0c>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10e      	bne.n	8004a7a <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	4881      	ldr	r0, [pc, #516]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004a60:	f006 fb74 	bl	800b14c <HAL_GPIO_ReadPin>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004a6a:	4b80      	ldr	r3, [pc, #512]	@ (8004c6c <checkAktifCalisma+0xe10>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004a72:	4b7f      	ldr	r3, [pc, #508]	@ (8004c70 <checkAktifCalisma+0xe14>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e002      	b.n	8004a80 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c70 <checkAktifCalisma+0xe14>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004a80:	4b75      	ldr	r3, [pc, #468]	@ (8004c58 <checkAktifCalisma+0xdfc>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d107      	bne.n	8004a98 <checkAktifCalisma+0xc3c>
 8004a88:	4b79      	ldr	r3, [pc, #484]	@ (8004c70 <checkAktifCalisma+0xe14>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <checkAktifCalisma+0xc3c>
 8004a90:	4b78      	ldr	r3, [pc, #480]	@ (8004c74 <checkAktifCalisma+0xe18>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2180      	movs	r1, #128	@ 0x80
 8004a9c:	4876      	ldr	r0, [pc, #472]	@ (8004c78 <checkAktifCalisma+0xe1c>)
 8004a9e:	f006 fb6c 	bl	800b17a <HAL_GPIO_WritePin>
 8004aa2:	e004      	b.n	8004aae <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	@ 0x80
 8004aa8:	4873      	ldr	r0, [pc, #460]	@ (8004c78 <checkAktifCalisma+0xe1c>)
 8004aaa:	f006 fb66 	bl	800b17a <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004aae:	4b73      	ldr	r3, [pc, #460]	@ (8004c7c <checkAktifCalisma+0xe20>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d141      	bne.n	8004b3a <checkAktifCalisma+0xcde>
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d003      	beq.n	8004ac6 <checkAktifCalisma+0xc6a>
 8004abe:	4b68      	ldr	r3, [pc, #416]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d139      	bne.n	8004b3a <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ac6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004aca:	4866      	ldr	r0, [pc, #408]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004acc:	f006 fb3e 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <checkAktifCalisma+0xc82>
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c80 <checkAktifCalisma+0xe24>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <checkAktifCalisma+0xc9a>
 8004ade:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ae2:	4868      	ldr	r0, [pc, #416]	@ (8004c84 <checkAktifCalisma+0xe28>)
 8004ae4:	f006 fb32 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d125      	bne.n	8004b3a <checkAktifCalisma+0xcde>
 8004aee:	4b64      	ldr	r3, [pc, #400]	@ (8004c80 <checkAktifCalisma+0xe24>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d121      	bne.n	8004b3a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004af6:	2102      	movs	r1, #2
 8004af8:	485a      	ldr	r0, [pc, #360]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004afa:	f006 fb27 	bl	800b14c <HAL_GPIO_ReadPin>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d11a      	bne.n	8004b3a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004b04:	2104      	movs	r1, #4
 8004b06:	4857      	ldr	r0, [pc, #348]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004b08:	f006 fb20 	bl	800b14c <HAL_GPIO_ReadPin>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004b12:	4b56      	ldr	r3, [pc, #344]	@ (8004c6c <checkAktifCalisma+0xe10>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00f      	beq.n	8004b3a <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c88 <checkAktifCalisma+0xe2c>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	f083 0301 	eor.w	r3, r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004b28:	4b58      	ldr	r3, [pc, #352]	@ (8004c8c <checkAktifCalisma+0xe30>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004b2e:	4b58      	ldr	r3, [pc, #352]	@ (8004c90 <checkAktifCalisma+0xe34>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a58      	ldr	r2, [pc, #352]	@ (8004c94 <checkAktifCalisma+0xe38>)
 8004b34:	6013      	str	r3, [r2, #0]
					bekle();
 8004b36:	f7fe fff5 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004b3a:	4b55      	ldr	r3, [pc, #340]	@ (8004c90 <checkAktifCalisma+0xe34>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b55      	ldr	r3, [pc, #340]	@ (8004c94 <checkAktifCalisma+0xe38>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a54      	ldr	r2, [pc, #336]	@ (8004c98 <checkAktifCalisma+0xe3c>)
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d20d      	bcs.n	8004b68 <checkAktifCalisma+0xd0c>
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4845      	ldr	r0, [pc, #276]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004b50:	f006 fafc 	bl	800b14c <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d006      	beq.n	8004b68 <checkAktifCalisma+0xd0c>
 8004b5a:	4b44      	ldr	r3, [pc, #272]	@ (8004c6c <checkAktifCalisma+0xe10>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004b68:	4b48      	ldr	r3, [pc, #288]	@ (8004c8c <checkAktifCalisma+0xe30>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <checkAktifCalisma+0xe20>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d135      	bne.n	8004be2 <checkAktifCalisma+0xd86>
 8004b76:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d003      	beq.n	8004b86 <checkAktifCalisma+0xd2a>
 8004b7e:	4b38      	ldr	r3, [pc, #224]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d12d      	bne.n	8004be2 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b8a:	4836      	ldr	r0, [pc, #216]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004b8c:	f006 fade 	bl	800b14c <HAL_GPIO_ReadPin>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <checkAktifCalisma+0xd42>
 8004b96:	4b3a      	ldr	r3, [pc, #232]	@ (8004c80 <checkAktifCalisma+0xe24>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <checkAktifCalisma+0xd5a>
 8004b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ba2:	4838      	ldr	r0, [pc, #224]	@ (8004c84 <checkAktifCalisma+0xe28>)
 8004ba4:	f006 fad2 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <checkAktifCalisma+0xd86>
 8004bae:	4b34      	ldr	r3, [pc, #208]	@ (8004c80 <checkAktifCalisma+0xe24>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d115      	bne.n	8004be2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	482a      	ldr	r0, [pc, #168]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004bba:	f006 fac7 	bl	800b14c <HAL_GPIO_ReadPin>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10e      	bne.n	8004be2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	4827      	ldr	r0, [pc, #156]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004bc8:	f006 fac0 	bl	800b14c <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d107      	bne.n	8004be2 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004bd2:	4b26      	ldr	r3, [pc, #152]	@ (8004c6c <checkAktifCalisma+0xe10>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004bda:	4b30      	ldr	r3, [pc, #192]	@ (8004c9c <checkAktifCalisma+0xe40>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	e002      	b.n	8004be8 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004be2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c9c <checkAktifCalisma+0xe40>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004be8:	4b24      	ldr	r3, [pc, #144]	@ (8004c7c <checkAktifCalisma+0xe20>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11d      	bne.n	8004c2c <checkAktifCalisma+0xdd0>
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d003      	beq.n	8004c00 <checkAktifCalisma+0xda4>
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <checkAktifCalisma+0xe04>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d115      	bne.n	8004c2c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c00:	2102      	movs	r1, #2
 8004c02:	4818      	ldr	r0, [pc, #96]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004c04:	f006 faa2 	bl	800b14c <HAL_GPIO_ReadPin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d10e      	bne.n	8004c2c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c0e:	2104      	movs	r1, #4
 8004c10:	4814      	ldr	r0, [pc, #80]	@ (8004c64 <checkAktifCalisma+0xe08>)
 8004c12:	f006 fa9b 	bl	800b14c <HAL_GPIO_ReadPin>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <checkAktifCalisma+0xe10>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004c24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <checkAktifCalisma+0xe44>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <checkAktifCalisma+0xe44>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004c32:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <checkAktifCalisma+0xe40>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <checkAktifCalisma+0xdee>
 8004c3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ca0 <checkAktifCalisma+0xe44>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <checkAktifCalisma+0xdee>
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <checkAktifCalisma+0xe30>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02c      	beq.n	8004ca4 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2140      	movs	r1, #64	@ 0x40
 8004c4e:	480a      	ldr	r0, [pc, #40]	@ (8004c78 <checkAktifCalisma+0xe1c>)
 8004c50:	f006 fa93 	bl	800b17a <HAL_GPIO_WritePin>
 8004c54:	e02b      	b.n	8004cae <checkAktifCalisma+0xe52>
 8004c56:	bf00      	nop
 8004c58:	200010af 	.word	0x200010af
 8004c5c:	20001075 	.word	0x20001075
 8004c60:	20001074 	.word	0x20001074
 8004c64:	40011000 	.word	0x40011000
 8004c68:	20001072 	.word	0x20001072
 8004c6c:	200010ad 	.word	0x200010ad
 8004c70:	200010b0 	.word	0x200010b0
 8004c74:	200010ae 	.word	0x200010ae
 8004c78:	40010800 	.word	0x40010800
 8004c7c:	20001076 	.word	0x20001076
 8004c80:	20001078 	.word	0x20001078
 8004c84:	40010c00 	.word	0x40010c00
 8004c88:	2000109b 	.word	0x2000109b
 8004c8c:	200010b1 	.word	0x200010b1
 8004c90:	20001044 	.word	0x20001044
 8004c94:	20001048 	.word	0x20001048
 8004c98:	20001086 	.word	0x20001086
 8004c9c:	200010b2 	.word	0x200010b2
 8004ca0:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2140      	movs	r1, #64	@ 0x40
 8004ca8:	4835      	ldr	r0, [pc, #212]	@ (8004d80 <checkAktifCalisma+0xf24>)
 8004caa:	f006 fa66 	bl	800b17a <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004cae:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <checkAktifCalisma+0xf28>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <checkAktifCalisma+0xe62>
 8004cb6:	4b33      	ldr	r3, [pc, #204]	@ (8004d84 <checkAktifCalisma+0xf28>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d115      	bne.n	8004cea <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	4831      	ldr	r0, [pc, #196]	@ (8004d88 <checkAktifCalisma+0xf2c>)
 8004cc2:	f006 fa43 	bl	800b14c <HAL_GPIO_ReadPin>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d003      	beq.n	8004cd4 <checkAktifCalisma+0xe78>
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8004d8c <checkAktifCalisma+0xf30>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	482c      	ldr	r0, [pc, #176]	@ (8004d88 <checkAktifCalisma+0xf2c>)
 8004cd8:	f006 fa38 	bl	800b14c <HAL_GPIO_ReadPin>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d90 <checkAktifCalisma+0xf34>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e002      	b.n	8004cf0 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004cea:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <checkAktifCalisma+0xf34>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004cf0:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <checkAktifCalisma+0xf28>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d003      	beq.n	8004d00 <checkAktifCalisma+0xea4>
 8004cf8:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <checkAktifCalisma+0xf28>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d111      	bne.n	8004d24 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d00:	2102      	movs	r1, #2
 8004d02:	4821      	ldr	r0, [pc, #132]	@ (8004d88 <checkAktifCalisma+0xf2c>)
 8004d04:	f006 fa22 	bl	800b14c <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10a      	bne.n	8004d24 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004d0e:	2104      	movs	r1, #4
 8004d10:	481d      	ldr	r0, [pc, #116]	@ (8004d88 <checkAktifCalisma+0xf2c>)
 8004d12:	f006 fa1b 	bl	800b14c <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <checkAktifCalisma+0xf38>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <checkAktifCalisma+0xf38>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004d2a:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <checkAktifCalisma+0xf34>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00f      	beq.n	8004d52 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004d32:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <checkAktifCalisma+0xf3c>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10b      	bne.n	8004d52 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004d3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d3e:	4817      	ldr	r0, [pc, #92]	@ (8004d9c <checkAktifCalisma+0xf40>)
 8004d40:	f006 fa04 	bl	800b14c <HAL_GPIO_ReadPin>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004d4a:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <checkAktifCalisma+0xf44>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e002      	b.n	8004d58 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004d52:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <checkAktifCalisma+0xf44>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004d58:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <checkAktifCalisma+0xf38>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004d60:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <checkAktifCalisma+0xf3c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d11f      	bne.n	8004da8 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d6c:	480b      	ldr	r0, [pc, #44]	@ (8004d9c <checkAktifCalisma+0xf40>)
 8004d6e:	f006 f9ed 	bl	800b14c <HAL_GPIO_ReadPin>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d117      	bne.n	8004da8 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004d78:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <checkAktifCalisma+0xf48>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e016      	b.n	8004dae <checkAktifCalisma+0xf52>
 8004d80:	40010800 	.word	0x40010800
 8004d84:	20001079 	.word	0x20001079
 8004d88:	40011000 	.word	0x40011000
 8004d8c:	20001072 	.word	0x20001072
 8004d90:	200010b7 	.word	0x200010b7
 8004d94:	200010b8 	.word	0x200010b8
 8004d98:	20001078 	.word	0x20001078
 8004d9c:	40010c00 	.word	0x40010c00
 8004da0:	200010c7 	.word	0x200010c7
 8004da4:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 8004da8:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa4 <checkAktifCalisma+0x1148>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004dae:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <checkAktifCalisma+0x114c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d154      	bne.n	8004e60 <checkAktifCalisma+0x1004>
 8004db6:	4b7d      	ldr	r3, [pc, #500]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d003      	beq.n	8004dc6 <checkAktifCalisma+0xf6a>
 8004dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d14c      	bne.n	8004e60 <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb0 <checkAktifCalisma+0x1154>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <checkAktifCalisma+0xf7a>
 8004dce:	4b79      	ldr	r3, [pc, #484]	@ (8004fb4 <checkAktifCalisma+0x1158>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d044      	beq.n	8004e60 <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004dda:	4877      	ldr	r0, [pc, #476]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004ddc:	f006 f9b6 	bl	800b14c <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01c      	beq.n	8004e20 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	4873      	ldr	r0, [pc, #460]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004dea:	f006 f9af 	bl	800b14c <HAL_GPIO_ReadPin>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004df4:	2104      	movs	r1, #4
 8004df6:	4870      	ldr	r0, [pc, #448]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004df8:	f006 f9a8 	bl	800b14c <HAL_GPIO_ReadPin>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d00e      	beq.n	8004e20 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e06:	486c      	ldr	r0, [pc, #432]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004e08:	f006 f9a0 	bl	800b14c <HAL_GPIO_ReadPin>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004e12:	2102      	movs	r1, #2
 8004e14:	4868      	ldr	r0, [pc, #416]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004e16:	f006 f999 	bl	800b14c <HAL_GPIO_ReadPin>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d103      	bne.n	8004e28 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004e20:	4b66      	ldr	r3, [pc, #408]	@ (8004fbc <checkAktifCalisma+0x1160>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <checkAktifCalisma+0xfdc>
 8004e28:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <checkAktifCalisma+0x1164>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <checkAktifCalisma+0xfdc>
 8004e30:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa4 <checkAktifCalisma+0x1148>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004e38:	4b62      	ldr	r3, [pc, #392]	@ (8004fc4 <checkAktifCalisma+0x1168>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00f      	beq.n	8004e60 <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004e40:	4b61      	ldr	r3, [pc, #388]	@ (8004fc8 <checkAktifCalisma+0x116c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 8004e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fcc <checkAktifCalisma+0x1170>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004e54:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd0 <checkAktifCalisma+0x1174>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5e      	ldr	r2, [pc, #376]	@ (8004fd4 <checkAktifCalisma+0x1178>)
 8004e5a:	6013      	str	r3, [r2, #0]
					bekle();
 8004e5c:	f7fe fe62 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004e60:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd0 <checkAktifCalisma+0x1174>)
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd4 <checkAktifCalisma+0x1178>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fd8 <checkAktifCalisma+0x117c>)
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d214      	bcs.n	8004e9c <checkAktifCalisma+0x1040>
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <checkAktifCalisma+0x1154>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d006      	beq.n	8004e8e <checkAktifCalisma+0x1032>
 8004e80:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb4 <checkAktifCalisma+0x1158>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f083 0301 	eor.w	r3, r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <checkAktifCalisma+0x1040>
 8004e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc4 <checkAktifCalisma+0x1168>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f083 0301 	eor.w	r3, r3, #1
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <checkAktifCalisma+0x1170>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004ea2:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <checkAktifCalisma+0x114c>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d148      	bne.n	8004f3c <checkAktifCalisma+0x10e0>
 8004eaa:	4b40      	ldr	r3, [pc, #256]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <checkAktifCalisma+0x105e>
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d140      	bne.n	8004f3c <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004eba:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb0 <checkAktifCalisma+0x1154>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <checkAktifCalisma+0x106e>
 8004ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb4 <checkAktifCalisma+0x1158>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d038      	beq.n	8004f3c <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004eca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ece:	483a      	ldr	r0, [pc, #232]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004ed0:	f006 f93c 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01c      	beq.n	8004f14 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004eda:	2180      	movs	r1, #128	@ 0x80
 8004edc:	4836      	ldr	r0, [pc, #216]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004ede:	f006 f935 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004ee8:	2104      	movs	r1, #4
 8004eea:	4833      	ldr	r0, [pc, #204]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004eec:	f006 f92e 	bl	800b14c <HAL_GPIO_ReadPin>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d00e      	beq.n	8004f14 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004efa:	482f      	ldr	r0, [pc, #188]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004efc:	f006 f926 	bl	800b14c <HAL_GPIO_ReadPin>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004f06:	2102      	movs	r1, #2
 8004f08:	482b      	ldr	r0, [pc, #172]	@ (8004fb8 <checkAktifCalisma+0x115c>)
 8004f0a:	f006 f91f 	bl	800b14c <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d103      	bne.n	8004f1c <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f14:	4b29      	ldr	r3, [pc, #164]	@ (8004fbc <checkAktifCalisma+0x1160>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <checkAktifCalisma+0x10d0>
 8004f1c:	4b28      	ldr	r3, [pc, #160]	@ (8004fc0 <checkAktifCalisma+0x1164>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <checkAktifCalisma+0x10d0>
 8004f24:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <checkAktifCalisma+0x1148>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004f2c:	4b25      	ldr	r3, [pc, #148]	@ (8004fc4 <checkAktifCalisma+0x1168>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004f34:	4b29      	ldr	r3, [pc, #164]	@ (8004fdc <checkAktifCalisma+0x1180>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <checkAktifCalisma+0x1180>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <checkAktifCalisma+0x114c>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d117      	bne.n	8004f7a <checkAktifCalisma+0x111e>
 8004f4a:	4b18      	ldr	r3, [pc, #96]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d003      	beq.n	8004f5a <checkAktifCalisma+0x10fe>
 8004f52:	4b16      	ldr	r3, [pc, #88]	@ (8004fac <checkAktifCalisma+0x1150>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d10f      	bne.n	8004f7a <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <checkAktifCalisma+0x1154>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <checkAktifCalisma+0x110e>
 8004f62:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <checkAktifCalisma+0x1158>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004f6a:	4b16      	ldr	r3, [pc, #88]	@ (8004fc4 <checkAktifCalisma+0x1168>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004f72:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <checkAktifCalisma+0x1184>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e002      	b.n	8004f80 <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004f7a:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <checkAktifCalisma+0x1184>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004f80:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <checkAktifCalisma+0x1180>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <checkAktifCalisma+0x113c>
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <checkAktifCalisma+0x1170>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <checkAktifCalisma+0x113c>
 8004f90:	4b13      	ldr	r3, [pc, #76]	@ (8004fe0 <checkAktifCalisma+0x1184>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d027      	beq.n	8004fe8 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	4811      	ldr	r0, [pc, #68]	@ (8004fe4 <checkAktifCalisma+0x1188>)
 8004f9e:	f006 f8ec 	bl	800b17a <HAL_GPIO_WritePin>
 8004fa2:	e026      	b.n	8004ff2 <checkAktifCalisma+0x1196>
 8004fa4:	200010c8 	.word	0x200010c8
 8004fa8:	20001077 	.word	0x20001077
 8004fac:	20001074 	.word	0x20001074
 8004fb0:	200010b7 	.word	0x200010b7
 8004fb4:	200010b8 	.word	0x200010b8
 8004fb8:	40011000 	.word	0x40011000
 8004fbc:	20001078 	.word	0x20001078
 8004fc0:	200010c7 	.word	0x200010c7
 8004fc4:	200010ad 	.word	0x200010ad
 8004fc8:	2000109b 	.word	0x2000109b
 8004fcc:	200010b4 	.word	0x200010b4
 8004fd0:	20001044 	.word	0x20001044
 8004fd4:	20001048 	.word	0x20001048
 8004fd8:	20001087 	.word	0x20001087
 8004fdc:	200010b5 	.word	0x200010b5
 8004fe0:	200010b6 	.word	0x200010b6
 8004fe4:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2120      	movs	r1, #32
 8004fec:	4887      	ldr	r0, [pc, #540]	@ (800520c <checkAktifCalisma+0x13b0>)
 8004fee:	f006 f8c4 	bl	800b17a <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8004ff2:	4b87      	ldr	r3, [pc, #540]	@ (8005210 <checkAktifCalisma+0x13b4>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <checkAktifCalisma+0x11bc>
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	4885      	ldr	r0, [pc, #532]	@ (8005214 <checkAktifCalisma+0x13b8>)
 8004ffe:	f006 f8a5 	bl	800b14c <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <checkAktifCalisma+0x11bc>
 8005008:	4b83      	ldr	r3, [pc, #524]	@ (8005218 <checkAktifCalisma+0x13bc>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <checkAktifCalisma+0x11bc>
 8005010:	4b82      	ldr	r3, [pc, #520]	@ (800521c <checkAktifCalisma+0x13c0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d112      	bne.n	800503e <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005018:	4b81      	ldr	r3, [pc, #516]	@ (8005220 <checkAktifCalisma+0x13c4>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d032      	beq.n	8005086 <checkAktifCalisma+0x122a>
 8005020:	2104      	movs	r1, #4
 8005022:	487c      	ldr	r0, [pc, #496]	@ (8005214 <checkAktifCalisma+0x13b8>)
 8005024:	f006 f892 	bl	800b14c <HAL_GPIO_ReadPin>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d12b      	bne.n	8005086 <checkAktifCalisma+0x122a>
 800502e:	4b7a      	ldr	r3, [pc, #488]	@ (8005218 <checkAktifCalisma+0x13bc>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d027      	beq.n	8005086 <checkAktifCalisma+0x122a>
 8005036:	4b79      	ldr	r3, [pc, #484]	@ (800521c <checkAktifCalisma+0x13c0>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d023      	beq.n	8005086 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 800503e:	4b79      	ldr	r3, [pc, #484]	@ (8005224 <checkAktifCalisma+0x13c8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	3b02      	subs	r3, #2
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4b77      	ldr	r3, [pc, #476]	@ (8005224 <checkAktifCalisma+0x13c8>)
 8005048:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800504a:	4b76      	ldr	r3, [pc, #472]	@ (8005224 <checkAktifCalisma+0x13c8>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2bff      	cmp	r3, #255	@ 0xff
 8005050:	d108      	bne.n	8005064 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 8005052:	4b74      	ldr	r3, [pc, #464]	@ (8005224 <checkAktifCalisma+0x13c8>)
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005058:	4b73      	ldr	r3, [pc, #460]	@ (8005228 <checkAktifCalisma+0x13cc>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b71      	ldr	r3, [pc, #452]	@ (8005228 <checkAktifCalisma+0x13cc>)
 8005062:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005064:	4b6f      	ldr	r3, [pc, #444]	@ (8005224 <checkAktifCalisma+0x13c8>)
 8005066:	781a      	ldrb	r2, [r3, #0]
 8005068:	4b70      	ldr	r3, [pc, #448]	@ (800522c <checkAktifCalisma+0x13d0>)
 800506a:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 800506c:	4b6e      	ldr	r3, [pc, #440]	@ (8005228 <checkAktifCalisma+0x13cc>)
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	4b6e      	ldr	r3, [pc, #440]	@ (800522c <checkAktifCalisma+0x13d0>)
 8005072:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005074:	4b6e      	ldr	r3, [pc, #440]	@ (8005230 <checkAktifCalisma+0x13d4>)
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800507a:	4b65      	ldr	r3, [pc, #404]	@ (8005210 <checkAktifCalisma+0x13b4>)
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005080:	4b67      	ldr	r3, [pc, #412]	@ (8005220 <checkAktifCalisma+0x13c4>)
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800508a:	486a      	ldr	r0, [pc, #424]	@ (8005234 <checkAktifCalisma+0x13d8>)
 800508c:	f006 f85e 	bl	800b14c <HAL_GPIO_ReadPin>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005096:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800509a:	4866      	ldr	r0, [pc, #408]	@ (8005234 <checkAktifCalisma+0x13d8>)
 800509c:	f006 f856 	bl	800b14c <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80050a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050aa:	4862      	ldr	r0, [pc, #392]	@ (8005234 <checkAktifCalisma+0x13d8>)
 80050ac:	f006 f84e 	bl	800b14c <HAL_GPIO_ReadPin>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80050b6:	2140      	movs	r1, #64	@ 0x40
 80050b8:	4856      	ldr	r0, [pc, #344]	@ (8005214 <checkAktifCalisma+0x13b8>)
 80050ba:	f006 f847 	bl	800b14c <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <checkAktifCalisma+0x1270>

					startBasili=1;
 80050c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005238 <checkAktifCalisma+0x13dc>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e002      	b.n	80050d2 <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 80050cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <checkAktifCalisma+0x13dc>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80050d2:	4b59      	ldr	r3, [pc, #356]	@ (8005238 <checkAktifCalisma+0x13dc>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d014      	beq.n	8005104 <checkAktifCalisma+0x12a8>
 80050da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050de:	4855      	ldr	r0, [pc, #340]	@ (8005234 <checkAktifCalisma+0x13d8>)
 80050e0:	f006 f834 	bl	800b14c <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d10c      	bne.n	8005104 <checkAktifCalisma+0x12a8>

					hataVar=1;
 80050ea:	4b54      	ldr	r3, [pc, #336]	@ (800523c <checkAktifCalisma+0x13e0>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7fb fcb3 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(1);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f7fb fc58 	bl	80009ac <hata2EEPROM>
					acilstophatasi=1;
 80050fc:	4b50      	ldr	r3, [pc, #320]	@ (8005240 <checkAktifCalisma+0x13e4>)
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e018      	b.n	8005136 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005104:	4b4e      	ldr	r3, [pc, #312]	@ (8005240 <checkAktifCalisma+0x13e4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d014      	beq.n	8005136 <checkAktifCalisma+0x12da>
 800510c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005110:	4848      	ldr	r0, [pc, #288]	@ (8005234 <checkAktifCalisma+0x13d8>)
 8005112:	f006 f81b 	bl	800b14c <HAL_GPIO_ReadPin>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10c      	bne.n	8005136 <checkAktifCalisma+0x12da>
 800511c:	4b46      	ldr	r3, [pc, #280]	@ (8005238 <checkAktifCalisma+0x13dc>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f083 0301 	eor.w	r3, r3, #1
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 800512a:	4b45      	ldr	r3, [pc, #276]	@ (8005240 <checkAktifCalisma+0x13e4>)
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005130:	2001      	movs	r0, #1
 8005132:	f7fe fc8d 	bl	8003a50 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005136:	4b43      	ldr	r3, [pc, #268]	@ (8005244 <checkAktifCalisma+0x13e8>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	f083 0301 	eor.w	r3, r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d023      	beq.n	800518c <checkAktifCalisma+0x1330>
 8005144:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005148:	483a      	ldr	r0, [pc, #232]	@ (8005234 <checkAktifCalisma+0x13d8>)
 800514a:	f005 ffff 	bl	800b14c <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <checkAktifCalisma+0x1300>
 8005154:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <checkAktifCalisma+0x13ec>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <checkAktifCalisma+0x1330>
 800515c:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <checkAktifCalisma+0x13f0>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d113      	bne.n	800518c <checkAktifCalisma+0x1330>
 8005164:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <checkAktifCalisma+0x13f4>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f083 0301 	eor.w	r3, r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <checkAktifCalisma+0x1330>
					hataVar=1;
 8005172:	4b32      	ldr	r3, [pc, #200]	@ (800523c <checkAktifCalisma+0x13e0>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005178:	2002      	movs	r0, #2
 800517a:	f7fb fc6f 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(2);
 800517e:	2002      	movs	r0, #2
 8005180:	f7fb fc14 	bl	80009ac <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005184:	4b32      	ldr	r3, [pc, #200]	@ (8005250 <checkAktifCalisma+0x13f4>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e017      	b.n	80051bc <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800518c:	4b30      	ldr	r3, [pc, #192]	@ (8005250 <checkAktifCalisma+0x13f4>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <checkAktifCalisma+0x1360>
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <checkAktifCalisma+0x13e8>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00f      	beq.n	80051bc <checkAktifCalisma+0x1360>
 800519c:	4b2d      	ldr	r3, [pc, #180]	@ (8005254 <checkAktifCalisma+0x13f8>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f083 0301 	eor.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 80051aa:	4b29      	ldr	r3, [pc, #164]	@ (8005250 <checkAktifCalisma+0x13f4>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <checkAktifCalisma+0x13ec>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80051b6:	2002      	movs	r0, #2
 80051b8:	f7fe fc4a 	bl	8003a50 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80051bc:	4b26      	ldr	r3, [pc, #152]	@ (8005258 <checkAktifCalisma+0x13fc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d151      	bne.n	8005268 <checkAktifCalisma+0x140c>
 80051c4:	4b25      	ldr	r3, [pc, #148]	@ (800525c <checkAktifCalisma+0x1400>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d14d      	bne.n	8005268 <checkAktifCalisma+0x140c>
 80051cc:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <checkAktifCalisma+0x1404>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d049      	beq.n	8005268 <checkAktifCalisma+0x140c>
 80051d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051d8:	480e      	ldr	r0, [pc, #56]	@ (8005214 <checkAktifCalisma+0x13b8>)
 80051da:	f005 ffb7 	bl	800b14c <HAL_GPIO_ReadPin>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d141      	bne.n	8005268 <checkAktifCalisma+0x140c>
 80051e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005264 <checkAktifCalisma+0x1408>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f083 0301 	eor.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03a      	beq.n	8005268 <checkAktifCalisma+0x140c>
					hataVar=1;
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <checkAktifCalisma+0x13e0>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80051f8:	2003      	movs	r0, #3
 80051fa:	f7fb fc2f 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(3);
 80051fe:	2003      	movs	r0, #3
 8005200:	f7fb fbd4 	bl	80009ac <hata2EEPROM>
					basinchatasi=1;
 8005204:	4b17      	ldr	r3, [pc, #92]	@ (8005264 <checkAktifCalisma+0x1408>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e043      	b.n	8005294 <checkAktifCalisma+0x1438>
 800520c:	40010800 	.word	0x40010800
 8005210:	200010ab 	.word	0x200010ab
 8005214:	40011000 	.word	0x40011000
 8005218:	20001072 	.word	0x20001072
 800521c:	200010ad 	.word	0x200010ad
 8005220:	200010ac 	.word	0x200010ac
 8005224:	20001064 	.word	0x20001064
 8005228:	20001066 	.word	0x20001066
 800522c:	20000f9c 	.word	0x20000f9c
 8005230:	20001098 	.word	0x20001098
 8005234:	40010c00 	.word	0x40010c00
 8005238:	200010b9 	.word	0x200010b9
 800523c:	200010c0 	.word	0x200010c0
 8005240:	200010bb 	.word	0x200010bb
 8005244:	200010c2 	.word	0x200010c2
 8005248:	200010cc 	.word	0x200010cc
 800524c:	20001070 	.word	0x20001070
 8005250:	200010bc 	.word	0x200010bc
 8005254:	200010a4 	.word	0x200010a4
 8005258:	2000106f 	.word	0x2000106f
 800525c:	20001073 	.word	0x20001073
 8005260:	200010bf 	.word	0x200010bf
 8005264:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005268:	4b85      	ldr	r3, [pc, #532]	@ (8005480 <checkAktifCalisma+0x1624>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d011      	beq.n	8005294 <checkAktifCalisma+0x1438>
 8005270:	4b84      	ldr	r3, [pc, #528]	@ (8005484 <checkAktifCalisma+0x1628>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10d      	bne.n	8005294 <checkAktifCalisma+0x1438>
 8005278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800527c:	4882      	ldr	r0, [pc, #520]	@ (8005488 <checkAktifCalisma+0x162c>)
 800527e:	f005 ff65 	bl	800b14c <HAL_GPIO_ReadPin>
 8005282:	4603      	mov	r3, r0
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 8005288:	4b7d      	ldr	r3, [pc, #500]	@ (8005480 <checkAktifCalisma+0x1624>)
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800528e:	2003      	movs	r0, #3
 8005290:	f7fe fbde 	bl	8003a50 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005294:	4b7d      	ldr	r3, [pc, #500]	@ (800548c <checkAktifCalisma+0x1630>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <checkAktifCalisma+0x1448>
 800529c:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <checkAktifCalisma+0x1634>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d023      	beq.n	80052ec <checkAktifCalisma+0x1490>
 80052a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a8:	487a      	ldr	r0, [pc, #488]	@ (8005494 <checkAktifCalisma+0x1638>)
 80052aa:	f005 ff4f 	bl	800b14c <HAL_GPIO_ReadPin>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d11b      	bne.n	80052ec <checkAktifCalisma+0x1490>
 80052b4:	4b78      	ldr	r3, [pc, #480]	@ (8005498 <checkAktifCalisma+0x163c>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d003      	beq.n	80052c4 <checkAktifCalisma+0x1468>
 80052bc:	4b76      	ldr	r3, [pc, #472]	@ (8005498 <checkAktifCalisma+0x163c>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d113      	bne.n	80052ec <checkAktifCalisma+0x1490>
 80052c4:	4b75      	ldr	r3, [pc, #468]	@ (800549c <checkAktifCalisma+0x1640>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <checkAktifCalisma+0x1490>
					hataVar=1;
 80052d2:	4b73      	ldr	r3, [pc, #460]	@ (80054a0 <checkAktifCalisma+0x1644>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80052d8:	2004      	movs	r0, #4
 80052da:	f7fb fbbf 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(4);
 80052de:	2004      	movs	r0, #4
 80052e0:	f7fb fb64 	bl	80009ac <hata2EEPROM>
					katkapisivicihatasi=1;
 80052e4:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <checkAktifCalisma+0x1640>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e01f      	b.n	800532c <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80052ec:	4b6b      	ldr	r3, [pc, #428]	@ (800549c <checkAktifCalisma+0x1640>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <checkAktifCalisma+0x14d0>
 80052f4:	4b6b      	ldr	r3, [pc, #428]	@ (80054a4 <checkAktifCalisma+0x1648>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <checkAktifCalisma+0x14d0>
 80052fc:	4b63      	ldr	r3, [pc, #396]	@ (800548c <checkAktifCalisma+0x1630>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <checkAktifCalisma+0x14d0>
 800530a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800530e:	4861      	ldr	r0, [pc, #388]	@ (8005494 <checkAktifCalisma+0x1638>)
 8005310:	f005 ff1c 	bl	800b14c <HAL_GPIO_ReadPin>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d108      	bne.n	800532c <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 800531a:	4b60      	ldr	r3, [pc, #384]	@ (800549c <checkAktifCalisma+0x1640>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005320:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <checkAktifCalisma+0x1634>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005326:	2004      	movs	r0, #4
 8005328:	f7fe fb92 	bl	8003a50 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <checkAktifCalisma+0x1630>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <checkAktifCalisma+0x14e0>
 8005334:	4b5c      	ldr	r3, [pc, #368]	@ (80054a8 <checkAktifCalisma+0x164c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <checkAktifCalisma+0x1528>
 800533c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005340:	4854      	ldr	r0, [pc, #336]	@ (8005494 <checkAktifCalisma+0x1638>)
 8005342:	f005 ff03 	bl	800b14c <HAL_GPIO_ReadPin>
 8005346:	4603      	mov	r3, r0
 8005348:	2b01      	cmp	r3, #1
 800534a:	d11b      	bne.n	8005384 <checkAktifCalisma+0x1528>
 800534c:	4b52      	ldr	r3, [pc, #328]	@ (8005498 <checkAktifCalisma+0x163c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d003      	beq.n	800535c <checkAktifCalisma+0x1500>
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <checkAktifCalisma+0x163c>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d113      	bne.n	8005384 <checkAktifCalisma+0x1528>
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <checkAktifCalisma+0x1650>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f083 0301 	eor.w	r3, r3, #1
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <checkAktifCalisma+0x1528>

					hataVar=1;
 800536a:	4b4d      	ldr	r3, [pc, #308]	@ (80054a0 <checkAktifCalisma+0x1644>)
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005370:	2005      	movs	r0, #5
 8005372:	f7fb fb73 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005376:	2005      	movs	r0, #5
 8005378:	f7fb fb18 	bl	80009ac <hata2EEPROM>
					tablakapisivicihatasi=1;
 800537c:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <checkAktifCalisma+0x1650>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e023      	b.n	80053cc <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005384:	4b49      	ldr	r3, [pc, #292]	@ (80054ac <checkAktifCalisma+0x1650>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01f      	beq.n	80053cc <checkAktifCalisma+0x1570>
 800538c:	4b45      	ldr	r3, [pc, #276]	@ (80054a4 <checkAktifCalisma+0x1648>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <checkAktifCalisma+0x1570>
 8005394:	4b3d      	ldr	r3, [pc, #244]	@ (800548c <checkAktifCalisma+0x1630>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f083 0301 	eor.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d014      	beq.n	80053cc <checkAktifCalisma+0x1570>
 80053a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053a6:	483b      	ldr	r0, [pc, #236]	@ (8005494 <checkAktifCalisma+0x1638>)
 80053a8:	f005 fed0 	bl	800b14c <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <checkAktifCalisma+0x1570>
 80053b2:	4b3c      	ldr	r3, [pc, #240]	@ (80054a4 <checkAktifCalisma+0x1648>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 80053ba:	4b3c      	ldr	r3, [pc, #240]	@ (80054ac <checkAktifCalisma+0x1650>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80053c0:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <checkAktifCalisma+0x164c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80053c6:	2005      	movs	r0, #5
 80053c8:	f7fe fb42 	bl	8003a50 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80053cc:	4b38      	ldr	r3, [pc, #224]	@ (80054b0 <checkAktifCalisma+0x1654>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <checkAktifCalisma+0x1588>
 80053d4:	4b37      	ldr	r3, [pc, #220]	@ (80054b4 <checkAktifCalisma+0x1658>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <checkAktifCalisma+0x1588>
 80053dc:	4b36      	ldr	r3, [pc, #216]	@ (80054b8 <checkAktifCalisma+0x165c>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <checkAktifCalisma+0x15c0>
 80053e4:	4b35      	ldr	r3, [pc, #212]	@ (80054bc <checkAktifCalisma+0x1660>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f083 0301 	eor.w	r3, r3, #1
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 80053f2:	4b33      	ldr	r3, [pc, #204]	@ (80054c0 <checkAktifCalisma+0x1664>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b33      	ldr	r3, [pc, #204]	@ (80054c4 <checkAktifCalisma+0x1668>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	4a32      	ldr	r2, [pc, #200]	@ (80054c8 <checkAktifCalisma+0x166c>)
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	4293      	cmp	r3, r2
 8005402:	d30b      	bcc.n	800541c <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8005404:	4b26      	ldr	r3, [pc, #152]	@ (80054a0 <checkAktifCalisma+0x1644>)
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800540a:	2006      	movs	r0, #6
 800540c:	f7fb fb26 	bl	8000a5c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005410:	2006      	movs	r0, #6
 8005412:	f7fb facb 	bl	80009ac <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005416:	4b29      	ldr	r3, [pc, #164]	@ (80054bc <checkAktifCalisma+0x1660>)
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800541c:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <checkAktifCalisma+0x1660>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <checkAktifCalisma+0x15f0>
 8005424:	2108      	movs	r1, #8
 8005426:	481b      	ldr	r0, [pc, #108]	@ (8005494 <checkAktifCalisma+0x1638>)
 8005428:	f005 fe90 	bl	800b14c <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <checkAktifCalisma+0x15f0>
 8005432:	4b16      	ldr	r3, [pc, #88]	@ (800548c <checkAktifCalisma+0x1630>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	f083 0301 	eor.w	r3, r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8005440:	4b1e      	ldr	r3, [pc, #120]	@ (80054bc <checkAktifCalisma+0x1660>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005446:	2006      	movs	r0, #6
 8005448:	f7fe fb02 	bl	8003a50 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800544c:	4b1f      	ldr	r3, [pc, #124]	@ (80054cc <checkAktifCalisma+0x1670>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <checkAktifCalisma+0x1610>
 8005454:	4b17      	ldr	r3, [pc, #92]	@ (80054b4 <checkAktifCalisma+0x1658>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <checkAktifCalisma+0x1610>
 800545c:	4b1c      	ldr	r3, [pc, #112]	@ (80054d0 <checkAktifCalisma+0x1674>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <checkAktifCalisma+0x1610>
 8005464:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <checkAktifCalisma+0x165c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d035      	beq.n	80054d8 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 800546c:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <checkAktifCalisma+0x1678>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005472:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <checkAktifCalisma+0x1634>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <checkAktifCalisma+0x164c>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e032      	b.n	80054e6 <checkAktifCalisma+0x168a>
 8005480:	200010c9 	.word	0x200010c9
 8005484:	2000106f 	.word	0x2000106f
 8005488:	40010c00 	.word	0x40010c00
 800548c:	200010b9 	.word	0x200010b9
 8005490:	200010cd 	.word	0x200010cd
 8005494:	40010800 	.word	0x40010800
 8005498:	20001074 	.word	0x20001074
 800549c:	200010ca 	.word	0x200010ca
 80054a0:	200010c0 	.word	0x200010c0
 80054a4:	200010ad 	.word	0x200010ad
 80054a8:	200010ce 	.word	0x200010ce
 80054ac:	200010cb 	.word	0x200010cb
 80054b0:	200010bf 	.word	0x200010bf
 80054b4:	200010a4 	.word	0x200010a4
 80054b8:	200010a3 	.word	0x200010a3
 80054bc:	200010ba 	.word	0x200010ba
 80054c0:	20001044 	.word	0x20001044
 80054c4:	20001058 	.word	0x20001058
 80054c8:	20001084 	.word	0x20001084
 80054cc:	200010a1 	.word	0x200010a1
 80054d0:	200010a2 	.word	0x200010a2
 80054d4:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <checkAktifCalisma+0x1768>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80054de:	4b3a      	ldr	r3, [pc, #232]	@ (80055c8 <checkAktifCalisma+0x176c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a3a      	ldr	r2, [pc, #232]	@ (80055cc <checkAktifCalisma+0x1770>)
 80054e4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80054e6:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <checkAktifCalisma+0x1774>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02f      	beq.n	800554e <checkAktifCalisma+0x16f2>
 80054ee:	4b39      	ldr	r3, [pc, #228]	@ (80055d4 <checkAktifCalisma+0x1778>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f083 0301 	eor.w	r3, r3, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d028      	beq.n	800554e <checkAktifCalisma+0x16f2>
 80054fc:	4b36      	ldr	r3, [pc, #216]	@ (80055d8 <checkAktifCalisma+0x177c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f083 0301 	eor.w	r3, r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d021      	beq.n	800554e <checkAktifCalisma+0x16f2>
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <checkAktifCalisma+0x1780>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f083 0301 	eor.w	r3, r3, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005518:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <checkAktifCalisma+0x1784>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f083 0301 	eor.w	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <checkAktifCalisma+0x16f2>
 8005526:	4b2f      	ldr	r3, [pc, #188]	@ (80055e4 <checkAktifCalisma+0x1788>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f083 0301 	eor.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <checkAktifCalisma+0x16f2>
 8005534:	4b2c      	ldr	r3, [pc, #176]	@ (80055e8 <checkAktifCalisma+0x178c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <checkAktifCalisma+0x16f2>

					hataVar=0;
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <checkAktifCalisma+0x1774>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005548:	2007      	movs	r0, #7
 800554a:	f7fe fa81 	bl	8003a50 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800554e:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <checkAktifCalisma+0x1774>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d02a      	beq.n	80055ac <checkAktifCalisma+0x1750>
 8005556:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <checkAktifCalisma+0x1778>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f083 0301 	eor.w	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <checkAktifCalisma+0x1750>
 8005564:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <checkAktifCalisma+0x177c>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <checkAktifCalisma+0x1750>
 800556c:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <checkAktifCalisma+0x1780>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d018      	beq.n	80055ac <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800557a:	4b19      	ldr	r3, [pc, #100]	@ (80055e0 <checkAktifCalisma+0x1784>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <checkAktifCalisma+0x1750>
 8005588:	4b16      	ldr	r3, [pc, #88]	@ (80055e4 <checkAktifCalisma+0x1788>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f083 0301 	eor.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <checkAktifCalisma+0x1750>
 8005596:	4b14      	ldr	r3, [pc, #80]	@ (80055e8 <checkAktifCalisma+0x178c>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f083 0301 	eor.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 80055a4:	4b11      	ldr	r3, [pc, #68]	@ (80055ec <checkAktifCalisma+0x1790>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80055aa:	e009      	b.n	80055c0 <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 80055ac:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <checkAktifCalisma+0x177c>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 80055ba:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <checkAktifCalisma+0x1790>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200010c1 	.word	0x200010c1
 80055c8:	20001044 	.word	0x20001044
 80055cc:	20001058 	.word	0x20001058
 80055d0:	200010c0 	.word	0x200010c0
 80055d4:	200010bb 	.word	0x200010bb
 80055d8:	200010bc 	.word	0x200010bc
 80055dc:	200010c9 	.word	0x200010c9
 80055e0:	200010ca 	.word	0x200010ca
 80055e4:	200010cb 	.word	0x200010cb
 80055e8:	200010ba 	.word	0x200010ba
 80055ec:	200010cf 	.word	0x200010cf

080055f0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80055f4:	4b66      	ldr	r3, [pc, #408]	@ (8005790 <checkDemoModCalisma+0x1a0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f041 83ab 	bne.w	8006d54 <checkDemoModCalisma+0x1764>
 80055fe:	4b65      	ldr	r3, [pc, #404]	@ (8005794 <checkDemoModCalisma+0x1a4>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f041 83a6 	bne.w	8006d54 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005608:	4b63      	ldr	r3, [pc, #396]	@ (8005798 <checkDemoModCalisma+0x1a8>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11a      	bne.n	8005646 <checkDemoModCalisma+0x56>
 8005610:	4b62      	ldr	r3, [pc, #392]	@ (800579c <checkDemoModCalisma+0x1ac>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <checkDemoModCalisma+0x56>
 8005618:	4b61      	ldr	r3, [pc, #388]	@ (80057a0 <checkDemoModCalisma+0x1b0>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <checkDemoModCalisma+0x46>
 8005620:	4b60      	ldr	r3, [pc, #384]	@ (80057a4 <checkDemoModCalisma+0x1b4>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <checkDemoModCalisma+0x46>
 800562e:	4b5e      	ldr	r3, [pc, #376]	@ (80057a8 <checkDemoModCalisma+0x1b8>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d007      	beq.n	8005646 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8005636:	4b5d      	ldr	r3, [pc, #372]	@ (80057ac <checkDemoModCalisma+0x1bc>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01c      	beq.n	8005678 <checkDemoModCalisma+0x88>
 800563e:	4b5c      	ldr	r3, [pc, #368]	@ (80057b0 <checkDemoModCalisma+0x1c0>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d118      	bne.n	8005678 <checkDemoModCalisma+0x88>
 8005646:	4b5b      	ldr	r3, [pc, #364]	@ (80057b4 <checkDemoModCalisma+0x1c4>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <checkDemoModCalisma+0x66>
 800564e:	4b5a      	ldr	r3, [pc, #360]	@ (80057b8 <checkDemoModCalisma+0x1c8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <checkDemoModCalisma+0x88>
 8005656:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <checkDemoModCalisma+0x1cc>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800565e:	2201      	movs	r2, #1
 8005660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005664:	4856      	ldr	r0, [pc, #344]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 8005666:	f005 fd88 	bl	800b17a <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800566a:	4b56      	ldr	r3, [pc, #344]	@ (80057c4 <checkDemoModCalisma+0x1d4>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005670:	4b55      	ldr	r3, [pc, #340]	@ (80057c8 <checkDemoModCalisma+0x1d8>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e008      	b.n	800568a <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005678:	2200      	movs	r2, #0
 800567a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800567e:	4850      	ldr	r0, [pc, #320]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 8005680:	f005 fd7b 	bl	800b17a <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005684:	4b4f      	ldr	r3, [pc, #316]	@ (80057c4 <checkDemoModCalisma+0x1d4>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800568a:	4b42      	ldr	r3, [pc, #264]	@ (8005794 <checkDemoModCalisma+0x1a4>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d164      	bne.n	800575c <checkDemoModCalisma+0x16c>
 8005692:	4b49      	ldr	r3, [pc, #292]	@ (80057b8 <checkDemoModCalisma+0x1c8>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <checkDemoModCalisma+0xb2>
 800569a:	4b46      	ldr	r3, [pc, #280]	@ (80057b4 <checkDemoModCalisma+0x1c4>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d05c      	beq.n	800575c <checkDemoModCalisma+0x16c>
 80056a2:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <checkDemoModCalisma+0x1cc>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d058      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80056aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056ae:	4844      	ldr	r0, [pc, #272]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 80056b0:	f005 fd4c 	bl	800b14c <HAL_GPIO_ReadPin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <checkDemoModCalisma+0xd2>
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <checkDemoModCalisma+0x1dc>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04c      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056c2:	2102      	movs	r1, #2
 80056c4:	4842      	ldr	r0, [pc, #264]	@ (80057d0 <checkDemoModCalisma+0x1e0>)
 80056c6:	f005 fd41 	bl	800b14c <HAL_GPIO_ReadPin>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d145      	bne.n	800575c <checkDemoModCalisma+0x16c>
							&& (basincVar)
 80056d0:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <checkDemoModCalisma+0x1e4>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d041      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80056d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056dc:	4838      	ldr	r0, [pc, #224]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 80056de:	f005 fd35 	bl	800b14c <HAL_GPIO_ReadPin>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10e      	bne.n	8005706 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80056e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056ec:	4834      	ldr	r0, [pc, #208]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 80056ee:	f005 fd2d 	bl	800b14c <HAL_GPIO_ReadPin>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d106      	bne.n	8005706 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80056f8:	2140      	movs	r1, #64	@ 0x40
 80056fa:	4835      	ldr	r0, [pc, #212]	@ (80057d0 <checkDemoModCalisma+0x1e0>)
 80056fc:	f005 fd26 	bl	800b14c <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d003      	beq.n	800570e <checkDemoModCalisma+0x11e>
 8005706:	4b24      	ldr	r3, [pc, #144]	@ (8005798 <checkDemoModCalisma+0x1a8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d026      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <checkDemoModCalisma+0x1b0>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01f      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 800571c:	4b1f      	ldr	r3, [pc, #124]	@ (800579c <checkDemoModCalisma+0x1ac>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f083 0301 	eor.w	r3, r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 800572a:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <checkDemoModCalisma+0x1bc>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <checkDemoModCalisma+0x1e8>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f083 0301 	eor.w	r3, r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8005746:	4b25      	ldr	r3, [pc, #148]	@ (80057dc <checkDemoModCalisma+0x1ec>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f083 0301 	eor.w	r3, r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8005754:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <checkDemoModCalisma+0x1a8>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e002      	b.n	8005762 <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 800575c:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <checkDemoModCalisma+0x1a8>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <checkDemoModCalisma+0x1a8>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03c      	beq.n	80057e4 <checkDemoModCalisma+0x1f4>
 800576a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800576e:	4818      	ldr	r0, [pc, #96]	@ (80057d0 <checkDemoModCalisma+0x1e0>)
 8005770:	f005 fcec 	bl	800b14c <HAL_GPIO_ReadPin>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d134      	bne.n	80057e4 <checkDemoModCalisma+0x1f4>
 800577a:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <checkDemoModCalisma+0x1f0>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d030      	beq.n	80057e4 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005782:	2201      	movs	r2, #1
 8005784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005788:	480d      	ldr	r0, [pc, #52]	@ (80057c0 <checkDemoModCalisma+0x1d0>)
 800578a:	f005 fcf6 	bl	800b17a <HAL_GPIO_WritePin>
 800578e:	e02f      	b.n	80057f0 <checkDemoModCalisma+0x200>
 8005790:	2000108a 	.word	0x2000108a
 8005794:	20001089 	.word	0x20001089
 8005798:	200010a1 	.word	0x200010a1
 800579c:	200010a2 	.word	0x200010a2
 80057a0:	200010a4 	.word	0x200010a4
 80057a4:	2000109c 	.word	0x2000109c
 80057a8:	2000107f 	.word	0x2000107f
 80057ac:	200010a3 	.word	0x200010a3
 80057b0:	2000107e 	.word	0x2000107e
 80057b4:	200010bd 	.word	0x200010bd
 80057b8:	200010d0 	.word	0x200010d0
 80057bc:	200010be 	.word	0x200010be
 80057c0:	40010c00 	.word	0x40010c00
 80057c4:	200010bf 	.word	0x200010bf
 80057c8:	200010ab 	.word	0x200010ab
 80057cc:	200010a8 	.word	0x200010a8
 80057d0:	40011000 	.word	0x40011000
 80057d4:	2000106f 	.word	0x2000106f
 80057d8:	200010a6 	.word	0x200010a6
 80057dc:	200010a7 	.word	0x200010a7
 80057e0:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80057e4:	2200      	movs	r2, #0
 80057e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ea:	4865      	ldr	r0, [pc, #404]	@ (8005980 <checkDemoModCalisma+0x390>)
 80057ec:	f005 fcc5 	bl	800b17a <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80057f0:	4b64      	ldr	r3, [pc, #400]	@ (8005984 <checkDemoModCalisma+0x394>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <checkDemoModCalisma+0x230>
 80057f8:	4b63      	ldr	r3, [pc, #396]	@ (8005988 <checkDemoModCalisma+0x398>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d007      	beq.n	8005810 <checkDemoModCalisma+0x220>
 8005800:	4b61      	ldr	r3, [pc, #388]	@ (8005988 <checkDemoModCalisma+0x398>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d003      	beq.n	8005810 <checkDemoModCalisma+0x220>
 8005808:	4b60      	ldr	r3, [pc, #384]	@ (800598c <checkDemoModCalisma+0x39c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005810:	2201      	movs	r2, #1
 8005812:	2104      	movs	r1, #4
 8005814:	485a      	ldr	r0, [pc, #360]	@ (8005980 <checkDemoModCalisma+0x390>)
 8005816:	f005 fcb0 	bl	800b17a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800581a:	4b5d      	ldr	r3, [pc, #372]	@ (8005990 <checkDemoModCalisma+0x3a0>)
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005820:	4b5b      	ldr	r3, [pc, #364]	@ (8005990 <checkDemoModCalisma+0x3a0>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d033      	beq.n	8005890 <checkDemoModCalisma+0x2a0>
 8005828:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800582c:	4854      	ldr	r0, [pc, #336]	@ (8005980 <checkDemoModCalisma+0x390>)
 800582e:	f005 fc8d 	bl	800b14c <HAL_GPIO_ReadPin>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <checkDemoModCalisma+0x256>
 8005838:	4b56      	ldr	r3, [pc, #344]	@ (8005994 <checkDemoModCalisma+0x3a4>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <checkDemoModCalisma+0x264>
 8005846:	2102      	movs	r1, #2
 8005848:	4853      	ldr	r0, [pc, #332]	@ (8005998 <checkDemoModCalisma+0x3a8>)
 800584a:	f005 fc7f 	bl	800b14c <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d11d      	bne.n	8005890 <checkDemoModCalisma+0x2a0>
 8005854:	4b51      	ldr	r3, [pc, #324]	@ (800599c <checkDemoModCalisma+0x3ac>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <checkDemoModCalisma+0x274>
 800585c:	4b50      	ldr	r3, [pc, #320]	@ (80059a0 <checkDemoModCalisma+0x3b0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d015      	beq.n	8005890 <checkDemoModCalisma+0x2a0>
 8005864:	4b4f      	ldr	r3, [pc, #316]	@ (80059a4 <checkDemoModCalisma+0x3b4>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d011      	beq.n	8005890 <checkDemoModCalisma+0x2a0>
 800586c:	4b4e      	ldr	r3, [pc, #312]	@ (80059a8 <checkDemoModCalisma+0x3b8>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <checkDemoModCalisma+0x2a0>
 8005874:	4b4d      	ldr	r3, [pc, #308]	@ (80059ac <checkDemoModCalisma+0x3bc>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f083 0301 	eor.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <checkDemoModCalisma+0x2a0>
					timer2=millis;
 8005882:	4b4b      	ldr	r3, [pc, #300]	@ (80059b0 <checkDemoModCalisma+0x3c0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a4b      	ldr	r2, [pc, #300]	@ (80059b4 <checkDemoModCalisma+0x3c4>)
 8005888:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800588a:	4b48      	ldr	r3, [pc, #288]	@ (80059ac <checkDemoModCalisma+0x3bc>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8005890:	4b47      	ldr	r3, [pc, #284]	@ (80059b0 <checkDemoModCalisma+0x3c0>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b47      	ldr	r3, [pc, #284]	@ (80059b4 <checkDemoModCalisma+0x3c4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	4a47      	ldr	r2, [pc, #284]	@ (80059b8 <checkDemoModCalisma+0x3c8>)
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	4293      	cmp	r3, r2
 80058a0:	d303      	bcc.n	80058aa <checkDemoModCalisma+0x2ba>
 80058a2:	4b42      	ldr	r3, [pc, #264]	@ (80059ac <checkDemoModCalisma+0x3bc>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <checkDemoModCalisma+0x2ec>
 80058aa:	4b3c      	ldr	r3, [pc, #240]	@ (800599c <checkDemoModCalisma+0x3ac>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f083 0301 	eor.w	r3, r3, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <checkDemoModCalisma+0x2d6>
 80058b8:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <checkDemoModCalisma+0x3b0>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f083 0301 	eor.w	r3, r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <checkDemoModCalisma+0x2ec>
 80058c6:	4b37      	ldr	r3, [pc, #220]	@ (80059a4 <checkDemoModCalisma+0x3b4>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f083 0301 	eor.w	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <checkDemoModCalisma+0x2ec>
 80058d4:	4b34      	ldr	r3, [pc, #208]	@ (80059a8 <checkDemoModCalisma+0x3b8>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80058dc:	2200      	movs	r2, #0
 80058de:	2104      	movs	r1, #4
 80058e0:	4827      	ldr	r0, [pc, #156]	@ (8005980 <checkDemoModCalisma+0x390>)
 80058e2:	f005 fc4a 	bl	800b17a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80058e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005990 <checkDemoModCalisma+0x3a0>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80058ec:	4b2f      	ldr	r3, [pc, #188]	@ (80059ac <checkDemoModCalisma+0x3bc>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80058f2:	4b32      	ldr	r3, [pc, #200]	@ (80059bc <checkDemoModCalisma+0x3cc>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <checkDemoModCalisma+0x310>
					cerceveVar=1;
 80058fa:	4b31      	ldr	r3, [pc, #196]	@ (80059c0 <checkDemoModCalisma+0x3d0>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005900:	4b2e      	ldr	r3, [pc, #184]	@ (80059bc <checkDemoModCalisma+0x3cc>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d116      	bne.n	8005936 <checkDemoModCalisma+0x346>
 8005908:	4b2e      	ldr	r3, [pc, #184]	@ (80059c4 <checkDemoModCalisma+0x3d4>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d112      	bne.n	8005936 <checkDemoModCalisma+0x346>
 8005910:	2101      	movs	r1, #1
 8005912:	4821      	ldr	r0, [pc, #132]	@ (8005998 <checkDemoModCalisma+0x3a8>)
 8005914:	f005 fc1a 	bl	800b14c <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <checkDemoModCalisma+0x346>
 800591e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005922:	4817      	ldr	r0, [pc, #92]	@ (8005980 <checkDemoModCalisma+0x390>)
 8005924:	f005 fc12 	bl	800b14c <HAL_GPIO_ReadPin>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800592e:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <checkDemoModCalisma+0x3d0>)
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e011      	b.n	800595a <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005936:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <checkDemoModCalisma+0x3cc>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10d      	bne.n	800595a <checkDemoModCalisma+0x36a>
 800593e:	2101      	movs	r1, #1
 8005940:	4815      	ldr	r0, [pc, #84]	@ (8005998 <checkDemoModCalisma+0x3a8>)
 8005942:	f005 fc03 	bl	800b14c <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d106      	bne.n	800595a <checkDemoModCalisma+0x36a>
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <checkDemoModCalisma+0x3d4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005954:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <checkDemoModCalisma+0x3d0>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800595a:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <checkDemoModCalisma+0x3cc>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d135      	bne.n	80059ce <checkDemoModCalisma+0x3de>
 8005962:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <checkDemoModCalisma+0x3d4>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d131      	bne.n	80059ce <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800596a:	2101      	movs	r1, #1
 800596c:	480a      	ldr	r0, [pc, #40]	@ (8005998 <checkDemoModCalisma+0x3a8>)
 800596e:	f005 fbed 	bl	800b14c <HAL_GPIO_ReadPin>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d127      	bne.n	80059c8 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <checkDemoModCalisma+0x3d0>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e026      	b.n	80059ce <checkDemoModCalisma+0x3de>
 8005980:	40010c00 	.word	0x40010c00
 8005984:	200010a1 	.word	0x200010a1
 8005988:	2000107b 	.word	0x2000107b
 800598c:	2000107f 	.word	0x2000107f
 8005990:	200010a5 	.word	0x200010a5
 8005994:	200010a8 	.word	0x200010a8
 8005998:	40011000 	.word	0x40011000
 800599c:	200010bd 	.word	0x200010bd
 80059a0:	200010d0 	.word	0x200010d0
 80059a4:	200010be 	.word	0x200010be
 80059a8:	2000106f 	.word	0x2000106f
 80059ac:	2000109d 	.word	0x2000109d
 80059b0:	20001044 	.word	0x20001044
 80059b4:	20001050 	.word	0x20001050
 80059b8:	20001080 	.word	0x20001080
 80059bc:	20001070 	.word	0x20001070
 80059c0:	200010c2 	.word	0x200010c2
 80059c4:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 80059c8:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc8 <checkDemoModCalisma+0x5d8>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80059ce:	4b7f      	ldr	r3, [pc, #508]	@ (8005bcc <checkDemoModCalisma+0x5dc>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d17c      	bne.n	8005ad0 <checkDemoModCalisma+0x4e0>
 80059d6:	4b7e      	ldr	r3, [pc, #504]	@ (8005bd0 <checkDemoModCalisma+0x5e0>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d078      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <checkDemoModCalisma+0x5e4>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d074      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80059e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059ea:	487b      	ldr	r0, [pc, #492]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 80059ec:	f005 fbae 	bl	800b14c <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <checkDemoModCalisma+0x40e>
 80059f6:	4b79      	ldr	r3, [pc, #484]	@ (8005bdc <checkDemoModCalisma+0x5ec>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d068      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80059fe:	4b72      	ldr	r3, [pc, #456]	@ (8005bc8 <checkDemoModCalisma+0x5d8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d064      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
 8005a06:	4b76      	ldr	r3, [pc, #472]	@ (8005be0 <checkDemoModCalisma+0x5f0>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f083 0301 	eor.w	r3, r3, #1
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d05d      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005a14:	2104      	movs	r1, #4
 8005a16:	4873      	ldr	r0, [pc, #460]	@ (8005be4 <checkDemoModCalisma+0x5f4>)
 8005a18:	f005 fb98 	bl	800b14c <HAL_GPIO_ReadPin>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <checkDemoModCalisma+0x43a>
 8005a22:	4b71      	ldr	r3, [pc, #452]	@ (8005be8 <checkDemoModCalisma+0x5f8>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d152      	bne.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a2e:	486a      	ldr	r0, [pc, #424]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005a30:	f005 fb8c 	bl	800b14c <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d10e      	bne.n	8005a58 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a3e:	4866      	ldr	r0, [pc, #408]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005a40:	f005 fb84 	bl	800b14c <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d106      	bne.n	8005a58 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005a4a:	2140      	movs	r1, #64	@ 0x40
 8005a4c:	4865      	ldr	r0, [pc, #404]	@ (8005be4 <checkDemoModCalisma+0x5f4>)
 8005a4e:	f005 fb7d 	bl	800b14c <HAL_GPIO_ReadPin>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d003      	beq.n	8005a60 <checkDemoModCalisma+0x470>
 8005a58:	4b64      	ldr	r3, [pc, #400]	@ (8005bec <checkDemoModCalisma+0x5fc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d037      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8005a60:	4b63      	ldr	r3, [pc, #396]	@ (8005bf0 <checkDemoModCalisma+0x600>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d030      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8005a6e:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <checkDemoModCalisma+0x604>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f083 0301 	eor.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d029      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf8 <checkDemoModCalisma+0x608>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f083 0301 	eor.w	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d022      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8005a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bfc <checkDemoModCalisma+0x60c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f083 0301 	eor.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005a98:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <checkDemoModCalisma+0x610>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f083 0301 	eor.w	r3, r3, #1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d014      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8005aa6:	4b57      	ldr	r3, [pc, #348]	@ (8005c04 <checkDemoModCalisma+0x614>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f083 0301 	eor.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	4847      	ldr	r0, [pc, #284]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005aba:	f005 fb5e 	bl	800b17a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8005abe:	4b4b      	ldr	r3, [pc, #300]	@ (8005bec <checkDemoModCalisma+0x5fc>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005ac4:	4b50      	ldr	r3, [pc, #320]	@ (8005c08 <checkDemoModCalisma+0x618>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8005aca:	4b50      	ldr	r3, [pc, #320]	@ (8005c0c <checkDemoModCalisma+0x61c>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005ad0:	4b46      	ldr	r3, [pc, #280]	@ (8005bec <checkDemoModCalisma+0x5fc>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d033      	beq.n	8005b40 <checkDemoModCalisma+0x550>
 8005ad8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005adc:	483e      	ldr	r0, [pc, #248]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005ade:	f005 fb35 	bl	800b14c <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d106      	bne.n	8005af6 <checkDemoModCalisma+0x506>
 8005ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8005bdc <checkDemoModCalisma+0x5ec>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f083 0301 	eor.w	r3, r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <checkDemoModCalisma+0x51c>
 8005af6:	2104      	movs	r1, #4
 8005af8:	483a      	ldr	r0, [pc, #232]	@ (8005be4 <checkDemoModCalisma+0x5f4>)
 8005afa:	f005 fb27 	bl	800b14c <HAL_GPIO_ReadPin>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d11d      	bne.n	8005b40 <checkDemoModCalisma+0x550>
 8005b04:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <checkDemoModCalisma+0x5f8>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <checkDemoModCalisma+0x550>
 8005b0c:	4b30      	ldr	r3, [pc, #192]	@ (8005bd0 <checkDemoModCalisma+0x5e0>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d015      	beq.n	8005b40 <checkDemoModCalisma+0x550>
 8005b14:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd4 <checkDemoModCalisma+0x5e4>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d011      	beq.n	8005b40 <checkDemoModCalisma+0x550>
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc8 <checkDemoModCalisma+0x5d8>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <checkDemoModCalisma+0x550>
 8005b24:	4b3a      	ldr	r3, [pc, #232]	@ (8005c10 <checkDemoModCalisma+0x620>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f083 0301 	eor.w	r3, r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <checkDemoModCalisma+0x550>
					timer2=millis;
 8005b32:	4b38      	ldr	r3, [pc, #224]	@ (8005c14 <checkDemoModCalisma+0x624>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a38      	ldr	r2, [pc, #224]	@ (8005c18 <checkDemoModCalisma+0x628>)
 8005b38:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005b3a:	4b35      	ldr	r3, [pc, #212]	@ (8005c10 <checkDemoModCalisma+0x620>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005b40:	4b34      	ldr	r3, [pc, #208]	@ (8005c14 <checkDemoModCalisma+0x624>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b34      	ldr	r3, [pc, #208]	@ (8005c18 <checkDemoModCalisma+0x628>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	4a34      	ldr	r2, [pc, #208]	@ (8005c1c <checkDemoModCalisma+0x62c>)
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d303      	bcc.n	8005b5a <checkDemoModCalisma+0x56a>
 8005b52:	4b2f      	ldr	r3, [pc, #188]	@ (8005c10 <checkDemoModCalisma+0x620>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <checkDemoModCalisma+0x594>
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <checkDemoModCalisma+0x5e0>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f083 0301 	eor.w	r3, r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <checkDemoModCalisma+0x594>
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <checkDemoModCalisma+0x5e4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f083 0301 	eor.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <checkDemoModCalisma+0x594>
 8005b76:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <checkDemoModCalisma+0x5d8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b84:	2200      	movs	r2, #0
 8005b86:	2102      	movs	r1, #2
 8005b88:	4813      	ldr	r0, [pc, #76]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005b8a:	f005 faf6 	bl	800b17a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005b8e:	4b17      	ldr	r3, [pc, #92]	@ (8005bec <checkDemoModCalisma+0x5fc>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005b94:	4b1e      	ldr	r3, [pc, #120]	@ (8005c10 <checkDemoModCalisma+0x620>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005b9a:	4b14      	ldr	r3, [pc, #80]	@ (8005bec <checkDemoModCalisma+0x5fc>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d040      	beq.n	8005c24 <checkDemoModCalisma+0x634>
 8005ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ba6:	480f      	ldr	r0, [pc, #60]	@ (8005be4 <checkDemoModCalisma+0x5f4>)
 8005ba8:	f005 fad0 	bl	800b14c <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d138      	bne.n	8005c24 <checkDemoModCalisma+0x634>
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <checkDemoModCalisma+0x630>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d034      	beq.n	8005c24 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4806      	ldr	r0, [pc, #24]	@ (8005bd8 <checkDemoModCalisma+0x5e8>)
 8005bc0:	f005 fadb 	bl	800b17a <HAL_GPIO_WritePin>
 8005bc4:	e033      	b.n	8005c2e <checkDemoModCalisma+0x63e>
 8005bc6:	bf00      	nop
 8005bc8:	200010c2 	.word	0x200010c2
 8005bcc:	20001089 	.word	0x20001089
 8005bd0:	200010bd 	.word	0x200010bd
 8005bd4:	200010be 	.word	0x200010be
 8005bd8:	40010c00 	.word	0x40010c00
 8005bdc:	200010a9 	.word	0x200010a9
 8005be0:	200010bc 	.word	0x200010bc
 8005be4:	40011000 	.word	0x40011000
 8005be8:	20001072 	.word	0x20001072
 8005bec:	200010a4 	.word	0x200010a4
 8005bf0:	200010a1 	.word	0x200010a1
 8005bf4:	200010a5 	.word	0x200010a5
 8005bf8:	200010a2 	.word	0x200010a2
 8005bfc:	200010a3 	.word	0x200010a3
 8005c00:	200010a6 	.word	0x200010a6
 8005c04:	200010a7 	.word	0x200010a7
 8005c08:	200010ac 	.word	0x200010ac
 8005c0c:	200010cc 	.word	0x200010cc
 8005c10:	2000109c 	.word	0x2000109c
 8005c14:	20001044 	.word	0x20001044
 8005c18:	20001050 	.word	0x20001050
 8005c1c:	20001081 	.word	0x20001081
 8005c20:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c24:	2200      	movs	r2, #0
 8005c26:	2101      	movs	r1, #1
 8005c28:	4836      	ldr	r0, [pc, #216]	@ (8005d04 <checkDemoModCalisma+0x714>)
 8005c2a:	f005 faa6 	bl	800b17a <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005c2e:	4b36      	ldr	r3, [pc, #216]	@ (8005d08 <checkDemoModCalisma+0x718>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 8080 	bne.w	8005d38 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c38:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <checkDemoModCalisma+0x71c>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d003      	beq.n	8005c48 <checkDemoModCalisma+0x658>
 8005c40:	4b32      	ldr	r3, [pc, #200]	@ (8005d0c <checkDemoModCalisma+0x71c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d177      	bne.n	8005d38 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005c48:	4b31      	ldr	r3, [pc, #196]	@ (8005d10 <checkDemoModCalisma+0x720>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d073      	beq.n	8005d38 <checkDemoModCalisma+0x748>
 8005c50:	4b30      	ldr	r3, [pc, #192]	@ (8005d14 <checkDemoModCalisma+0x724>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d06f      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c5c:	4829      	ldr	r0, [pc, #164]	@ (8005d04 <checkDemoModCalisma+0x714>)
 8005c5e:	f005 fa75 	bl	800b14c <HAL_GPIO_ReadPin>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d167      	bne.n	8005d38 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005c68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c6c:	482a      	ldr	r0, [pc, #168]	@ (8005d18 <checkDemoModCalisma+0x728>)
 8005c6e:	f005 fa6d 	bl	800b14c <HAL_GPIO_ReadPin>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <checkDemoModCalisma+0x690>
 8005c78:	4b28      	ldr	r3, [pc, #160]	@ (8005d1c <checkDemoModCalisma+0x72c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d15b      	bne.n	8005d38 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005c80:	2140      	movs	r1, #64	@ 0x40
 8005c82:	4825      	ldr	r0, [pc, #148]	@ (8005d18 <checkDemoModCalisma+0x728>)
 8005c84:	f005 fa62 	bl	800b14c <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10f      	bne.n	8005cae <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c92:	481c      	ldr	r0, [pc, #112]	@ (8005d04 <checkDemoModCalisma+0x714>)
 8005c94:	f005 fa5a 	bl	800b14c <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005c9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ca2:	4818      	ldr	r0, [pc, #96]	@ (8005d04 <checkDemoModCalisma+0x714>)
 8005ca4:	f005 fa52 	bl	800b14c <HAL_GPIO_ReadPin>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d003      	beq.n	8005cb6 <checkDemoModCalisma+0x6c6>
 8005cae:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <checkDemoModCalisma+0x730>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d040      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <checkDemoModCalisma+0x734>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f083 0301 	eor.w	r3, r3, #1
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d039      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005cc4:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <checkDemoModCalisma+0x738>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d032      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8005cd2:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <checkDemoModCalisma+0x73c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f083 0301 	eor.w	r3, r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02b      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8005ce0:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <checkDemoModCalisma+0x740>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f083 0301 	eor.w	r3, r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d024      	beq.n	8005d38 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8005cee:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <checkDemoModCalisma+0x744>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f083 0301 	eor.w	r3, r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01d      	beq.n	8005d38 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005cfc:	4b08      	ldr	r3, [pc, #32]	@ (8005d20 <checkDemoModCalisma+0x730>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e01c      	b.n	8005d3e <checkDemoModCalisma+0x74e>
 8005d04:	40010c00 	.word	0x40010c00
 8005d08:	20001089 	.word	0x20001089
 8005d0c:	2000107b 	.word	0x2000107b
 8005d10:	200010bd 	.word	0x200010bd
 8005d14:	200010be 	.word	0x200010be
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	2000107c 	.word	0x2000107c
 8005d20:	200010a2 	.word	0x200010a2
 8005d24:	200010a1 	.word	0x200010a1
 8005d28:	200010a5 	.word	0x200010a5
 8005d2c:	200010a4 	.word	0x200010a4
 8005d30:	200010a3 	.word	0x200010a3
 8005d34:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 8005d38:	4b64      	ldr	r3, [pc, #400]	@ (8005ecc <checkDemoModCalisma+0x8dc>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005d3e:	4b63      	ldr	r3, [pc, #396]	@ (8005ecc <checkDemoModCalisma+0x8dc>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2120      	movs	r1, #32
 8005d4a:	4861      	ldr	r0, [pc, #388]	@ (8005ed0 <checkDemoModCalisma+0x8e0>)
 8005d4c:	f005 fa15 	bl	800b17a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005d50:	4b60      	ldr	r3, [pc, #384]	@ (8005ed4 <checkDemoModCalisma+0x8e4>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005d56:	4b5f      	ldr	r3, [pc, #380]	@ (8005ed4 <checkDemoModCalisma+0x8e4>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d025      	beq.n	8005daa <checkDemoModCalisma+0x7ba>
 8005d5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d62:	485d      	ldr	r0, [pc, #372]	@ (8005ed8 <checkDemoModCalisma+0x8e8>)
 8005d64:	f005 f9f2 	bl	800b14c <HAL_GPIO_ReadPin>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d007      	beq.n	8005d7e <checkDemoModCalisma+0x78e>
 8005d6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d72:	4857      	ldr	r0, [pc, #348]	@ (8005ed0 <checkDemoModCalisma+0x8e0>)
 8005d74:	f005 f9ea 	bl	800b14c <HAL_GPIO_ReadPin>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d115      	bne.n	8005daa <checkDemoModCalisma+0x7ba>
 8005d7e:	4b57      	ldr	r3, [pc, #348]	@ (8005edc <checkDemoModCalisma+0x8ec>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d011      	beq.n	8005daa <checkDemoModCalisma+0x7ba>
 8005d86:	4b56      	ldr	r3, [pc, #344]	@ (8005ee0 <checkDemoModCalisma+0x8f0>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <checkDemoModCalisma+0x7ba>
 8005d8e:	4b55      	ldr	r3, [pc, #340]	@ (8005ee4 <checkDemoModCalisma+0x8f4>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f083 0301 	eor.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d006      	beq.n	8005daa <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005d9c:	4b52      	ldr	r3, [pc, #328]	@ (8005ee8 <checkDemoModCalisma+0x8f8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a52      	ldr	r2, [pc, #328]	@ (8005eec <checkDemoModCalisma+0x8fc>)
 8005da2:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005da4:	4b4f      	ldr	r3, [pc, #316]	@ (8005ee4 <checkDemoModCalisma+0x8f4>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005daa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ee8 <checkDemoModCalisma+0x8f8>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b4f      	ldr	r3, [pc, #316]	@ (8005eec <checkDemoModCalisma+0x8fc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	4a4e      	ldr	r2, [pc, #312]	@ (8005ef0 <checkDemoModCalisma+0x900>)
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d303      	bcc.n	8005dc4 <checkDemoModCalisma+0x7d4>
 8005dbc:	4b49      	ldr	r3, [pc, #292]	@ (8005ee4 <checkDemoModCalisma+0x8f4>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <checkDemoModCalisma+0x7f0>
 8005dc4:	4b45      	ldr	r3, [pc, #276]	@ (8005edc <checkDemoModCalisma+0x8ec>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <checkDemoModCalisma+0x7f0>
 8005dd2:	4b43      	ldr	r3, [pc, #268]	@ (8005ee0 <checkDemoModCalisma+0x8f0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2120      	movs	r1, #32
 8005de4:	483a      	ldr	r0, [pc, #232]	@ (8005ed0 <checkDemoModCalisma+0x8e0>)
 8005de6:	f005 f9c8 	bl	800b17a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005dea:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed4 <checkDemoModCalisma+0x8e4>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005df0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <checkDemoModCalisma+0x8f4>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005df6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef4 <checkDemoModCalisma+0x904>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 8088 	bne.w	8005f10 <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005e00:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <checkDemoModCalisma+0x908>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d003      	beq.n	8005e10 <checkDemoModCalisma+0x820>
 8005e08:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef8 <checkDemoModCalisma+0x908>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d17f      	bne.n	8005f10 <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8005e10:	4b32      	ldr	r3, [pc, #200]	@ (8005edc <checkDemoModCalisma+0x8ec>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d07b      	beq.n	8005f10 <checkDemoModCalisma+0x920>
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <checkDemoModCalisma+0x8f0>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d077      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005e20:	2140      	movs	r1, #64	@ 0x40
 8005e22:	482b      	ldr	r0, [pc, #172]	@ (8005ed0 <checkDemoModCalisma+0x8e0>)
 8005e24:	f005 f992 	bl	800b14c <HAL_GPIO_ReadPin>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d170      	bne.n	8005f10 <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005e2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e32:	4827      	ldr	r0, [pc, #156]	@ (8005ed0 <checkDemoModCalisma+0x8e0>)
 8005e34:	f005 f98a 	bl	800b14c <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <checkDemoModCalisma+0x856>
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005efc <checkDemoModCalisma+0x90c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d164      	bne.n	8005f10 <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e4a:	4823      	ldr	r0, [pc, #140]	@ (8005ed8 <checkDemoModCalisma+0x8e8>)
 8005e4c:	f005 f97e 	bl	800b14c <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10f      	bne.n	8005e76 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005e56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e5a:	481f      	ldr	r0, [pc, #124]	@ (8005ed8 <checkDemoModCalisma+0x8e8>)
 8005e5c:	f005 f976 	bl	800b14c <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d107      	bne.n	8005e76 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005e66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005e6a:	481b      	ldr	r0, [pc, #108]	@ (8005ed8 <checkDemoModCalisma+0x8e8>)
 8005e6c:	f005 f96e 	bl	800b14c <HAL_GPIO_ReadPin>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d003      	beq.n	8005e7e <checkDemoModCalisma+0x88e>
 8005e76:	4b22      	ldr	r3, [pc, #136]	@ (8005f00 <checkDemoModCalisma+0x910>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d048      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8005e7e:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <checkDemoModCalisma+0x914>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f083 0301 	eor.w	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d041      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f08 <checkDemoModCalisma+0x918>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f083 0301 	eor.w	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d03a      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f0c <checkDemoModCalisma+0x91c>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f083 0301 	eor.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d033      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <checkDemoModCalisma+0x8e4>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f083 0301 	eor.w	r3, r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02c      	beq.n	8005f10 <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005eb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <checkDemoModCalisma+0x8dc>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f083 0301 	eor.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d025      	beq.n	8005f10 <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <checkDemoModCalisma+0x910>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e024      	b.n	8005f16 <checkDemoModCalisma+0x926>
 8005ecc:	200010a2 	.word	0x200010a2
 8005ed0:	40011000 	.word	0x40011000
 8005ed4:	200010a6 	.word	0x200010a6
 8005ed8:	40010c00 	.word	0x40010c00
 8005edc:	200010bd 	.word	0x200010bd
 8005ee0:	200010be 	.word	0x200010be
 8005ee4:	2000109e 	.word	0x2000109e
 8005ee8:	20001044 	.word	0x20001044
 8005eec:	20001050 	.word	0x20001050
 8005ef0:	20001082 	.word	0x20001082
 8005ef4:	20001089 	.word	0x20001089
 8005ef8:	2000107b 	.word	0x2000107b
 8005efc:	2000107d 	.word	0x2000107d
 8005f00:	200010a3 	.word	0x200010a3
 8005f04:	200010a1 	.word	0x200010a1
 8005f08:	200010a5 	.word	0x200010a5
 8005f0c:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 8005f10:	4b96      	ldr	r3, [pc, #600]	@ (800616c <checkDemoModCalisma+0xb7c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005f16:	4b95      	ldr	r3, [pc, #596]	@ (800616c <checkDemoModCalisma+0xb7c>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005f1e:	2201      	movs	r2, #1
 8005f20:	2110      	movs	r1, #16
 8005f22:	4893      	ldr	r0, [pc, #588]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8005f24:	f005 f929 	bl	800b17a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005f28:	4b92      	ldr	r3, [pc, #584]	@ (8006174 <checkDemoModCalisma+0xb84>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005f2e:	4b91      	ldr	r3, [pc, #580]	@ (8006174 <checkDemoModCalisma+0xb84>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d024      	beq.n	8005f80 <checkDemoModCalisma+0x990>
 8005f36:	2140      	movs	r1, #64	@ 0x40
 8005f38:	488d      	ldr	r0, [pc, #564]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8005f3a:	f005 f907 	bl	800b14c <HAL_GPIO_ReadPin>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d007      	beq.n	8005f54 <checkDemoModCalisma+0x964>
 8005f44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f48:	4889      	ldr	r0, [pc, #548]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8005f4a:	f005 f8ff 	bl	800b14c <HAL_GPIO_ReadPin>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d115      	bne.n	8005f80 <checkDemoModCalisma+0x990>
 8005f54:	4b88      	ldr	r3, [pc, #544]	@ (8006178 <checkDemoModCalisma+0xb88>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <checkDemoModCalisma+0x990>
 8005f5c:	4b87      	ldr	r3, [pc, #540]	@ (800617c <checkDemoModCalisma+0xb8c>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <checkDemoModCalisma+0x990>
 8005f64:	4b86      	ldr	r3, [pc, #536]	@ (8006180 <checkDemoModCalisma+0xb90>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f083 0301 	eor.w	r3, r3, #1
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d006      	beq.n	8005f80 <checkDemoModCalisma+0x990>
					timer2=millis;
 8005f72:	4b84      	ldr	r3, [pc, #528]	@ (8006184 <checkDemoModCalisma+0xb94>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a84      	ldr	r2, [pc, #528]	@ (8006188 <checkDemoModCalisma+0xb98>)
 8005f78:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005f7a:	4b81      	ldr	r3, [pc, #516]	@ (8006180 <checkDemoModCalisma+0xb90>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005f80:	4b80      	ldr	r3, [pc, #512]	@ (8006184 <checkDemoModCalisma+0xb94>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b80      	ldr	r3, [pc, #512]	@ (8006188 <checkDemoModCalisma+0xb98>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a80      	ldr	r2, [pc, #512]	@ (800618c <checkDemoModCalisma+0xb9c>)
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d303      	bcc.n	8005f9a <checkDemoModCalisma+0x9aa>
 8005f92:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <checkDemoModCalisma+0xb90>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10d      	bne.n	8005fb6 <checkDemoModCalisma+0x9c6>
 8005f9a:	4b77      	ldr	r3, [pc, #476]	@ (8006178 <checkDemoModCalisma+0xb88>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f083 0301 	eor.w	r3, r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <checkDemoModCalisma+0x9c6>
 8005fa8:	4b74      	ldr	r3, [pc, #464]	@ (800617c <checkDemoModCalisma+0xb8c>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f083 0301 	eor.w	r3, r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2110      	movs	r1, #16
 8005fba:	486d      	ldr	r0, [pc, #436]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8005fbc:	f005 f8dd 	bl	800b17a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8006174 <checkDemoModCalisma+0xb84>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8006180 <checkDemoModCalisma+0xb90>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005fcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fd0:	486f      	ldr	r0, [pc, #444]	@ (8006190 <checkDemoModCalisma+0xba0>)
 8005fd2:	f005 f8bb 	bl	800b14c <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d120      	bne.n	800601e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005fdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fe0:	486b      	ldr	r0, [pc, #428]	@ (8006190 <checkDemoModCalisma+0xba0>)
 8005fe2:	f005 f8b3 	bl	800b14c <HAL_GPIO_ReadPin>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d118      	bne.n	800601e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005fec:	2104      	movs	r1, #4
 8005fee:	4868      	ldr	r0, [pc, #416]	@ (8006190 <checkDemoModCalisma+0xba0>)
 8005ff0:	f005 f8ac 	bl	800b14c <HAL_GPIO_ReadPin>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d111      	bne.n	800601e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	4864      	ldr	r0, [pc, #400]	@ (8006190 <checkDemoModCalisma+0xba0>)
 8005ffe:	f005 f8a5 	bl	800b14c <HAL_GPIO_ReadPin>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006008:	2101      	movs	r1, #1
 800600a:	4861      	ldr	r0, [pc, #388]	@ (8006190 <checkDemoModCalisma+0xba0>)
 800600c:	f005 f89e 	bl	800b14c <HAL_GPIO_ReadPin>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8006016:	4b5f      	ldr	r3, [pc, #380]	@ (8006194 <checkDemoModCalisma+0xba4>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e002      	b.n	8006024 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 800601e:	4b5d      	ldr	r3, [pc, #372]	@ (8006194 <checkDemoModCalisma+0xba4>)
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006024:	4b5c      	ldr	r3, [pc, #368]	@ (8006198 <checkDemoModCalisma+0xba8>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d144      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
 800602c:	4b5b      	ldr	r3, [pc, #364]	@ (800619c <checkDemoModCalisma+0xbac>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d003      	beq.n	800603c <checkDemoModCalisma+0xa4c>
 8006034:	4b59      	ldr	r3, [pc, #356]	@ (800619c <checkDemoModCalisma+0xbac>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d13c      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800603c:	2180      	movs	r1, #128	@ 0x80
 800603e:	484c      	ldr	r0, [pc, #304]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8006040:	f005 f884 	bl	800b14c <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <checkDemoModCalisma+0xa62>
 800604a:	4b55      	ldr	r3, [pc, #340]	@ (80061a0 <checkDemoModCalisma+0xbb0>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <checkDemoModCalisma+0xa7a>
 8006052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006056:	484e      	ldr	r0, [pc, #312]	@ (8006190 <checkDemoModCalisma+0xba0>)
 8006058:	f005 f878 	bl	800b14c <HAL_GPIO_ReadPin>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d129      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
 8006062:	4b4f      	ldr	r3, [pc, #316]	@ (80061a0 <checkDemoModCalisma+0xbb0>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d125      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800606a:	2104      	movs	r1, #4
 800606c:	4840      	ldr	r0, [pc, #256]	@ (8006170 <checkDemoModCalisma+0xb80>)
 800606e:	f005 f86d 	bl	800b14c <HAL_GPIO_ReadPin>
 8006072:	4603      	mov	r3, r0
 8006074:	2b01      	cmp	r3, #1
 8006076:	d003      	beq.n	8006080 <checkDemoModCalisma+0xa90>
 8006078:	4b4a      	ldr	r3, [pc, #296]	@ (80061a4 <checkDemoModCalisma+0xbb4>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d11a      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006080:	2102      	movs	r1, #2
 8006082:	483b      	ldr	r0, [pc, #236]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8006084:	f005 f862 	bl	800b14c <HAL_GPIO_ReadPin>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d113      	bne.n	80060b6 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 800608e:	4b46      	ldr	r3, [pc, #280]	@ (80061a8 <checkDemoModCalisma+0xbb8>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f083 0301 	eor.w	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00c      	beq.n	80060b6 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 800609c:	4b3d      	ldr	r3, [pc, #244]	@ (8006194 <checkDemoModCalisma+0xba4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 80060a4:	4b41      	ldr	r3, [pc, #260]	@ (80061ac <checkDemoModCalisma+0xbbc>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <checkDemoModCalisma+0xb94>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a40      	ldr	r2, [pc, #256]	@ (80061b0 <checkDemoModCalisma+0xbc0>)
 80060b0:	6013      	str	r3, [r2, #0]
					bekle();
 80060b2:	f7fd fd37 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80060b6:	4b33      	ldr	r3, [pc, #204]	@ (8006184 <checkDemoModCalisma+0xb94>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b3d      	ldr	r3, [pc, #244]	@ (80061b0 <checkDemoModCalisma+0xbc0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	4a3c      	ldr	r2, [pc, #240]	@ (80061b4 <checkDemoModCalisma+0xbc4>)
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d211      	bcs.n	80060ec <checkDemoModCalisma+0xafc>
 80060c8:	2104      	movs	r1, #4
 80060ca:	4829      	ldr	r0, [pc, #164]	@ (8006170 <checkDemoModCalisma+0xb80>)
 80060cc:	f005 f83e 	bl	800b14c <HAL_GPIO_ReadPin>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <checkDemoModCalisma+0xafc>
 80060d6:	4b33      	ldr	r3, [pc, #204]	@ (80061a4 <checkDemoModCalisma+0xbb4>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d006      	beq.n	80060ec <checkDemoModCalisma+0xafc>
 80060de:	4b2d      	ldr	r3, [pc, #180]	@ (8006194 <checkDemoModCalisma+0xba4>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f083 0301 	eor.w	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 80060ec:	4b2f      	ldr	r3, [pc, #188]	@ (80061ac <checkDemoModCalisma+0xbbc>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <checkDemoModCalisma+0xba8>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d160      	bne.n	80061bc <checkDemoModCalisma+0xbcc>
 80060fa:	4b28      	ldr	r3, [pc, #160]	@ (800619c <checkDemoModCalisma+0xbac>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d003      	beq.n	800610a <checkDemoModCalisma+0xb1a>
 8006102:	4b26      	ldr	r3, [pc, #152]	@ (800619c <checkDemoModCalisma+0xbac>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d158      	bne.n	80061bc <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800610a:	2104      	movs	r1, #4
 800610c:	4818      	ldr	r0, [pc, #96]	@ (8006170 <checkDemoModCalisma+0xb80>)
 800610e:	f005 f81d 	bl	800b14c <HAL_GPIO_ReadPin>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d003      	beq.n	8006120 <checkDemoModCalisma+0xb30>
 8006118:	4b22      	ldr	r3, [pc, #136]	@ (80061a4 <checkDemoModCalisma+0xbb4>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d14d      	bne.n	80061bc <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006120:	2102      	movs	r1, #2
 8006122:	4813      	ldr	r0, [pc, #76]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8006124:	f005 f812 	bl	800b14c <HAL_GPIO_ReadPin>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d146      	bne.n	80061bc <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800612e:	2180      	movs	r1, #128	@ 0x80
 8006130:	480f      	ldr	r0, [pc, #60]	@ (8006170 <checkDemoModCalisma+0xb80>)
 8006132:	f005 f80b 	bl	800b14c <HAL_GPIO_ReadPin>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <checkDemoModCalisma+0xb54>
 800613c:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <checkDemoModCalisma+0xbb0>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <checkDemoModCalisma+0xb6c>
 8006144:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006148:	4811      	ldr	r0, [pc, #68]	@ (8006190 <checkDemoModCalisma+0xba0>)
 800614a:	f004 ffff 	bl	800b14c <HAL_GPIO_ReadPin>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d133      	bne.n	80061bc <checkDemoModCalisma+0xbcc>
 8006154:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <checkDemoModCalisma+0xbb0>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d12f      	bne.n	80061bc <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 800615c:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <checkDemoModCalisma+0xba4>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02b      	beq.n	80061bc <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8006164:	4b14      	ldr	r3, [pc, #80]	@ (80061b8 <checkDemoModCalisma+0xbc8>)
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e02a      	b.n	80061c2 <checkDemoModCalisma+0xbd2>
 800616c:	200010a3 	.word	0x200010a3
 8006170:	40011000 	.word	0x40011000
 8006174:	200010a7 	.word	0x200010a7
 8006178:	200010bd 	.word	0x200010bd
 800617c:	200010be 	.word	0x200010be
 8006180:	2000109f 	.word	0x2000109f
 8006184:	20001044 	.word	0x20001044
 8006188:	20001050 	.word	0x20001050
 800618c:	20001082 	.word	0x20001082
 8006190:	40010c00 	.word	0x40010c00
 8006194:	200010ad 	.word	0x200010ad
 8006198:	20001075 	.word	0x20001075
 800619c:	20001074 	.word	0x20001074
 80061a0:	20001078 	.word	0x20001078
 80061a4:	20001072 	.word	0x20001072
 80061a8:	2000109b 	.word	0x2000109b
 80061ac:	200010ae 	.word	0x200010ae
 80061b0:	20001048 	.word	0x20001048
 80061b4:	20001085 	.word	0x20001085
 80061b8:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 80061bc:	4b8b      	ldr	r3, [pc, #556]	@ (80063ec <checkDemoModCalisma+0xdfc>)
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061c2:	4b8b      	ldr	r3, [pc, #556]	@ (80063f0 <checkDemoModCalisma+0xe00>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d121      	bne.n	800620e <checkDemoModCalisma+0xc1e>
 80061ca:	4b8a      	ldr	r3, [pc, #552]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d003      	beq.n	80061da <checkDemoModCalisma+0xbea>
 80061d2:	4b88      	ldr	r3, [pc, #544]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d119      	bne.n	800620e <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80061da:	2104      	movs	r1, #4
 80061dc:	4886      	ldr	r0, [pc, #536]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 80061de:	f004 ffb5 	bl	800b14c <HAL_GPIO_ReadPin>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d003      	beq.n	80061f0 <checkDemoModCalisma+0xc00>
 80061e8:	4b84      	ldr	r3, [pc, #528]	@ (80063fc <checkDemoModCalisma+0xe0c>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10e      	bne.n	800620e <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80061f0:	2102      	movs	r1, #2
 80061f2:	4881      	ldr	r0, [pc, #516]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 80061f4:	f004 ffaa 	bl	800b14c <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 80061fe:	4b80      	ldr	r3, [pc, #512]	@ (8006400 <checkDemoModCalisma+0xe10>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 8006206:	4b7f      	ldr	r3, [pc, #508]	@ (8006404 <checkDemoModCalisma+0xe14>)
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e002      	b.n	8006214 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800620e:	4b7d      	ldr	r3, [pc, #500]	@ (8006404 <checkDemoModCalisma+0xe14>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006214:	4b75      	ldr	r3, [pc, #468]	@ (80063ec <checkDemoModCalisma+0xdfc>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <checkDemoModCalisma+0xc3c>
 800621c:	4b79      	ldr	r3, [pc, #484]	@ (8006404 <checkDemoModCalisma+0xe14>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <checkDemoModCalisma+0xc3c>
 8006224:	4b78      	ldr	r3, [pc, #480]	@ (8006408 <checkDemoModCalisma+0xe18>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800622c:	2201      	movs	r2, #1
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	4876      	ldr	r0, [pc, #472]	@ (800640c <checkDemoModCalisma+0xe1c>)
 8006232:	f004 ffa2 	bl	800b17a <HAL_GPIO_WritePin>
 8006236:	e004      	b.n	8006242 <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006238:	2200      	movs	r2, #0
 800623a:	2180      	movs	r1, #128	@ 0x80
 800623c:	4873      	ldr	r0, [pc, #460]	@ (800640c <checkDemoModCalisma+0xe1c>)
 800623e:	f004 ff9c 	bl	800b17a <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006242:	4b73      	ldr	r3, [pc, #460]	@ (8006410 <checkDemoModCalisma+0xe20>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d141      	bne.n	80062ce <checkDemoModCalisma+0xcde>
 800624a:	4b6a      	ldr	r3, [pc, #424]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d003      	beq.n	800625a <checkDemoModCalisma+0xc6a>
 8006252:	4b68      	ldr	r3, [pc, #416]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d139      	bne.n	80062ce <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800625a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800625e:	4866      	ldr	r0, [pc, #408]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 8006260:	f004 ff74 	bl	800b14c <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <checkDemoModCalisma+0xc82>
 800626a:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <checkDemoModCalisma+0xe24>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <checkDemoModCalisma+0xc9a>
 8006272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006276:	4868      	ldr	r0, [pc, #416]	@ (8006418 <checkDemoModCalisma+0xe28>)
 8006278:	f004 ff68 	bl	800b14c <HAL_GPIO_ReadPin>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d125      	bne.n	80062ce <checkDemoModCalisma+0xcde>
 8006282:	4b64      	ldr	r3, [pc, #400]	@ (8006414 <checkDemoModCalisma+0xe24>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d121      	bne.n	80062ce <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800628a:	2102      	movs	r1, #2
 800628c:	485a      	ldr	r0, [pc, #360]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 800628e:	f004 ff5d 	bl	800b14c <HAL_GPIO_ReadPin>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d11a      	bne.n	80062ce <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006298:	2104      	movs	r1, #4
 800629a:	4857      	ldr	r0, [pc, #348]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 800629c:	f004 ff56 	bl	800b14c <HAL_GPIO_ReadPin>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d113      	bne.n	80062ce <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 80062a6:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <checkDemoModCalisma+0xe10>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00f      	beq.n	80062ce <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 80062ae:	4b5b      	ldr	r3, [pc, #364]	@ (800641c <checkDemoModCalisma+0xe2c>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f083 0301 	eor.w	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 80062bc:	4b58      	ldr	r3, [pc, #352]	@ (8006420 <checkDemoModCalisma+0xe30>)
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80062c2:	4b58      	ldr	r3, [pc, #352]	@ (8006424 <checkDemoModCalisma+0xe34>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a58      	ldr	r2, [pc, #352]	@ (8006428 <checkDemoModCalisma+0xe38>)
 80062c8:	6013      	str	r3, [r2, #0]
					bekle();
 80062ca:	f7fd fc2b 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80062ce:	4b55      	ldr	r3, [pc, #340]	@ (8006424 <checkDemoModCalisma+0xe34>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b55      	ldr	r3, [pc, #340]	@ (8006428 <checkDemoModCalisma+0xe38>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	4a54      	ldr	r2, [pc, #336]	@ (800642c <checkDemoModCalisma+0xe3c>)
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	4293      	cmp	r3, r2
 80062de:	d20d      	bcs.n	80062fc <checkDemoModCalisma+0xd0c>
 80062e0:	2102      	movs	r1, #2
 80062e2:	4845      	ldr	r0, [pc, #276]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 80062e4:	f004 ff32 	bl	800b14c <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <checkDemoModCalisma+0xd0c>
 80062ee:	4b44      	ldr	r3, [pc, #272]	@ (8006400 <checkDemoModCalisma+0xe10>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f083 0301 	eor.w	r3, r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 80062fc:	4b48      	ldr	r3, [pc, #288]	@ (8006420 <checkDemoModCalisma+0xe30>)
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006302:	4b43      	ldr	r3, [pc, #268]	@ (8006410 <checkDemoModCalisma+0xe20>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d135      	bne.n	8006376 <checkDemoModCalisma+0xd86>
 800630a:	4b3a      	ldr	r3, [pc, #232]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d003      	beq.n	800631a <checkDemoModCalisma+0xd2a>
 8006312:	4b38      	ldr	r3, [pc, #224]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d12d      	bne.n	8006376 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800631a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800631e:	4836      	ldr	r0, [pc, #216]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 8006320:	f004 ff14 	bl	800b14c <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <checkDemoModCalisma+0xd42>
 800632a:	4b3a      	ldr	r3, [pc, #232]	@ (8006414 <checkDemoModCalisma+0xe24>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <checkDemoModCalisma+0xd5a>
 8006332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006336:	4838      	ldr	r0, [pc, #224]	@ (8006418 <checkDemoModCalisma+0xe28>)
 8006338:	f004 ff08 	bl	800b14c <HAL_GPIO_ReadPin>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d119      	bne.n	8006376 <checkDemoModCalisma+0xd86>
 8006342:	4b34      	ldr	r3, [pc, #208]	@ (8006414 <checkDemoModCalisma+0xe24>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d115      	bne.n	8006376 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800634a:	2102      	movs	r1, #2
 800634c:	482a      	ldr	r0, [pc, #168]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 800634e:	f004 fefd 	bl	800b14c <HAL_GPIO_ReadPin>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10e      	bne.n	8006376 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006358:	2104      	movs	r1, #4
 800635a:	4827      	ldr	r0, [pc, #156]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 800635c:	f004 fef6 	bl	800b14c <HAL_GPIO_ReadPin>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d107      	bne.n	8006376 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 8006366:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <checkDemoModCalisma+0xe10>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 800636e:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <checkDemoModCalisma+0xe40>)
 8006370:	2201      	movs	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e002      	b.n	800637c <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8006376:	4b2e      	ldr	r3, [pc, #184]	@ (8006430 <checkDemoModCalisma+0xe40>)
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800637c:	4b24      	ldr	r3, [pc, #144]	@ (8006410 <checkDemoModCalisma+0xe20>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d11d      	bne.n	80063c0 <checkDemoModCalisma+0xdd0>
 8006384:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d003      	beq.n	8006394 <checkDemoModCalisma+0xda4>
 800638c:	4b19      	ldr	r3, [pc, #100]	@ (80063f4 <checkDemoModCalisma+0xe04>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d115      	bne.n	80063c0 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006394:	2102      	movs	r1, #2
 8006396:	4818      	ldr	r0, [pc, #96]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 8006398:	f004 fed8 	bl	800b14c <HAL_GPIO_ReadPin>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10e      	bne.n	80063c0 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063a2:	2104      	movs	r1, #4
 80063a4:	4814      	ldr	r0, [pc, #80]	@ (80063f8 <checkDemoModCalisma+0xe08>)
 80063a6:	f004 fed1 	bl	800b14c <HAL_GPIO_ReadPin>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 80063b0:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <checkDemoModCalisma+0xe10>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006434 <checkDemoModCalisma+0xe44>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80063c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <checkDemoModCalisma+0xe44>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80063c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <checkDemoModCalisma+0xe40>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <checkDemoModCalisma+0xdee>
 80063ce:	4b19      	ldr	r3, [pc, #100]	@ (8006434 <checkDemoModCalisma+0xe44>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <checkDemoModCalisma+0xdee>
 80063d6:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <checkDemoModCalisma+0xe30>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d02c      	beq.n	8006438 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80063de:	2201      	movs	r2, #1
 80063e0:	2140      	movs	r1, #64	@ 0x40
 80063e2:	480a      	ldr	r0, [pc, #40]	@ (800640c <checkDemoModCalisma+0xe1c>)
 80063e4:	f004 fec9 	bl	800b17a <HAL_GPIO_WritePin>
 80063e8:	e02b      	b.n	8006442 <checkDemoModCalisma+0xe52>
 80063ea:	bf00      	nop
 80063ec:	200010af 	.word	0x200010af
 80063f0:	20001075 	.word	0x20001075
 80063f4:	20001074 	.word	0x20001074
 80063f8:	40011000 	.word	0x40011000
 80063fc:	20001072 	.word	0x20001072
 8006400:	200010ad 	.word	0x200010ad
 8006404:	200010b0 	.word	0x200010b0
 8006408:	200010ae 	.word	0x200010ae
 800640c:	40010800 	.word	0x40010800
 8006410:	20001076 	.word	0x20001076
 8006414:	20001078 	.word	0x20001078
 8006418:	40010c00 	.word	0x40010c00
 800641c:	2000109b 	.word	0x2000109b
 8006420:	200010b1 	.word	0x200010b1
 8006424:	20001044 	.word	0x20001044
 8006428:	20001048 	.word	0x20001048
 800642c:	20001086 	.word	0x20001086
 8006430:	200010b2 	.word	0x200010b2
 8006434:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006438:	2200      	movs	r2, #0
 800643a:	2140      	movs	r1, #64	@ 0x40
 800643c:	4835      	ldr	r0, [pc, #212]	@ (8006514 <checkDemoModCalisma+0xf24>)
 800643e:	f004 fe9c 	bl	800b17a <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8006442:	4b35      	ldr	r3, [pc, #212]	@ (8006518 <checkDemoModCalisma+0xf28>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <checkDemoModCalisma+0xe62>
 800644a:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <checkDemoModCalisma+0xf28>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d115      	bne.n	800647e <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006452:	2104      	movs	r1, #4
 8006454:	4831      	ldr	r0, [pc, #196]	@ (800651c <checkDemoModCalisma+0xf2c>)
 8006456:	f004 fe79 	bl	800b14c <HAL_GPIO_ReadPin>
 800645a:	4603      	mov	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d003      	beq.n	8006468 <checkDemoModCalisma+0xe78>
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <checkDemoModCalisma+0xf30>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006468:	2102      	movs	r1, #2
 800646a:	482c      	ldr	r0, [pc, #176]	@ (800651c <checkDemoModCalisma+0xf2c>)
 800646c:	f004 fe6e 	bl	800b14c <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8006476:	4b2b      	ldr	r3, [pc, #172]	@ (8006524 <checkDemoModCalisma+0xf34>)
 8006478:	2201      	movs	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	e002      	b.n	8006484 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 800647e:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <checkDemoModCalisma+0xf34>)
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006484:	4b24      	ldr	r3, [pc, #144]	@ (8006518 <checkDemoModCalisma+0xf28>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d003      	beq.n	8006494 <checkDemoModCalisma+0xea4>
 800648c:	4b22      	ldr	r3, [pc, #136]	@ (8006518 <checkDemoModCalisma+0xf28>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d111      	bne.n	80064b8 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006494:	2102      	movs	r1, #2
 8006496:	4821      	ldr	r0, [pc, #132]	@ (800651c <checkDemoModCalisma+0xf2c>)
 8006498:	f004 fe58 	bl	800b14c <HAL_GPIO_ReadPin>
 800649c:	4603      	mov	r3, r0
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10a      	bne.n	80064b8 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80064a2:	2104      	movs	r1, #4
 80064a4:	481d      	ldr	r0, [pc, #116]	@ (800651c <checkDemoModCalisma+0xf2c>)
 80064a6:	f004 fe51 	bl	800b14c <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80064b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <checkDemoModCalisma+0xf38>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80064b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <checkDemoModCalisma+0xf38>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80064be:	4b19      	ldr	r3, [pc, #100]	@ (8006524 <checkDemoModCalisma+0xf34>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 80064c6:	4b19      	ldr	r3, [pc, #100]	@ (800652c <checkDemoModCalisma+0xf3c>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10b      	bne.n	80064e6 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80064ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80064d2:	4817      	ldr	r0, [pc, #92]	@ (8006530 <checkDemoModCalisma+0xf40>)
 80064d4:	f004 fe3a 	bl	800b14c <HAL_GPIO_ReadPin>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 80064de:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <checkDemoModCalisma+0xf44>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e002      	b.n	80064ec <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <checkDemoModCalisma+0xf44>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80064ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006528 <checkDemoModCalisma+0xf38>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d023      	beq.n	800653c <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 80064f4:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <checkDemoModCalisma+0xf3c>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11f      	bne.n	800653c <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80064fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006500:	480b      	ldr	r0, [pc, #44]	@ (8006530 <checkDemoModCalisma+0xf40>)
 8006502:	f004 fe23 	bl	800b14c <HAL_GPIO_ReadPin>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d117      	bne.n	800653c <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <checkDemoModCalisma+0xf48>)
 800650e:	2201      	movs	r2, #1
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e016      	b.n	8006542 <checkDemoModCalisma+0xf52>
 8006514:	40010800 	.word	0x40010800
 8006518:	20001079 	.word	0x20001079
 800651c:	40011000 	.word	0x40011000
 8006520:	20001072 	.word	0x20001072
 8006524:	200010b7 	.word	0x200010b7
 8006528:	200010b8 	.word	0x200010b8
 800652c:	20001078 	.word	0x20001078
 8006530:	40010c00 	.word	0x40010c00
 8006534:	200010c7 	.word	0x200010c7
 8006538:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 800653c:	4b7e      	ldr	r3, [pc, #504]	@ (8006738 <checkDemoModCalisma+0x1148>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006542:	4b7e      	ldr	r3, [pc, #504]	@ (800673c <checkDemoModCalisma+0x114c>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d154      	bne.n	80065f4 <checkDemoModCalisma+0x1004>
 800654a:	4b7d      	ldr	r3, [pc, #500]	@ (8006740 <checkDemoModCalisma+0x1150>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d003      	beq.n	800655a <checkDemoModCalisma+0xf6a>
 8006552:	4b7b      	ldr	r3, [pc, #492]	@ (8006740 <checkDemoModCalisma+0x1150>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d14c      	bne.n	80065f4 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800655a:	4b7a      	ldr	r3, [pc, #488]	@ (8006744 <checkDemoModCalisma+0x1154>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <checkDemoModCalisma+0xf7a>
 8006562:	4b79      	ldr	r3, [pc, #484]	@ (8006748 <checkDemoModCalisma+0x1158>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d044      	beq.n	80065f4 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800656a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800656e:	4877      	ldr	r0, [pc, #476]	@ (800674c <checkDemoModCalisma+0x115c>)
 8006570:	f004 fdec 	bl	800b14c <HAL_GPIO_ReadPin>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01c      	beq.n	80065b4 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800657a:	2180      	movs	r1, #128	@ 0x80
 800657c:	4873      	ldr	r0, [pc, #460]	@ (800674c <checkDemoModCalisma+0x115c>)
 800657e:	f004 fde5 	bl	800b14c <HAL_GPIO_ReadPin>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006588:	2104      	movs	r1, #4
 800658a:	4870      	ldr	r0, [pc, #448]	@ (800674c <checkDemoModCalisma+0x115c>)
 800658c:	f004 fdde 	bl	800b14c <HAL_GPIO_ReadPin>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d00e      	beq.n	80065b4 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800659a:	486c      	ldr	r0, [pc, #432]	@ (800674c <checkDemoModCalisma+0x115c>)
 800659c:	f004 fdd6 	bl	800b14c <HAL_GPIO_ReadPin>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80065a6:	2102      	movs	r1, #2
 80065a8:	4868      	ldr	r0, [pc, #416]	@ (800674c <checkDemoModCalisma+0x115c>)
 80065aa:	f004 fdcf 	bl	800b14c <HAL_GPIO_ReadPin>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d103      	bne.n	80065bc <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80065b4:	4b66      	ldr	r3, [pc, #408]	@ (8006750 <checkDemoModCalisma+0x1160>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <checkDemoModCalisma+0xfdc>
 80065bc:	4b65      	ldr	r3, [pc, #404]	@ (8006754 <checkDemoModCalisma+0x1164>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <checkDemoModCalisma+0xfdc>
 80065c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006738 <checkDemoModCalisma+0x1148>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d013      	beq.n	80065f4 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 80065cc:	4b62      	ldr	r3, [pc, #392]	@ (8006758 <checkDemoModCalisma+0x1168>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 80065d4:	4b61      	ldr	r3, [pc, #388]	@ (800675c <checkDemoModCalisma+0x116c>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 80065e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006760 <checkDemoModCalisma+0x1170>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80065e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006764 <checkDemoModCalisma+0x1174>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006768 <checkDemoModCalisma+0x1178>)
 80065ee:	6013      	str	r3, [r2, #0]
					bekle();
 80065f0:	f7fd fa98 	bl	8003b24 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80065f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006764 <checkDemoModCalisma+0x1174>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006768 <checkDemoModCalisma+0x1178>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	4a5b      	ldr	r2, [pc, #364]	@ (800676c <checkDemoModCalisma+0x117c>)
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	4293      	cmp	r3, r2
 8006604:	d214      	bcs.n	8006630 <checkDemoModCalisma+0x1040>
 8006606:	4b4f      	ldr	r3, [pc, #316]	@ (8006744 <checkDemoModCalisma+0x1154>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	f083 0301 	eor.w	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <checkDemoModCalisma+0x1032>
 8006614:	4b4c      	ldr	r3, [pc, #304]	@ (8006748 <checkDemoModCalisma+0x1158>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f083 0301 	eor.w	r3, r3, #1
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <checkDemoModCalisma+0x1040>
 8006622:	4b4d      	ldr	r3, [pc, #308]	@ (8006758 <checkDemoModCalisma+0x1168>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f083 0301 	eor.w	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 8006630:	4b4b      	ldr	r3, [pc, #300]	@ (8006760 <checkDemoModCalisma+0x1170>)
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006636:	4b41      	ldr	r3, [pc, #260]	@ (800673c <checkDemoModCalisma+0x114c>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d148      	bne.n	80066d0 <checkDemoModCalisma+0x10e0>
 800663e:	4b40      	ldr	r3, [pc, #256]	@ (8006740 <checkDemoModCalisma+0x1150>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d003      	beq.n	800664e <checkDemoModCalisma+0x105e>
 8006646:	4b3e      	ldr	r3, [pc, #248]	@ (8006740 <checkDemoModCalisma+0x1150>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d140      	bne.n	80066d0 <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800664e:	4b3d      	ldr	r3, [pc, #244]	@ (8006744 <checkDemoModCalisma+0x1154>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <checkDemoModCalisma+0x106e>
 8006656:	4b3c      	ldr	r3, [pc, #240]	@ (8006748 <checkDemoModCalisma+0x1158>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d038      	beq.n	80066d0 <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800665e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006662:	483a      	ldr	r0, [pc, #232]	@ (800674c <checkDemoModCalisma+0x115c>)
 8006664:	f004 fd72 	bl	800b14c <HAL_GPIO_ReadPin>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01c      	beq.n	80066a8 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	4836      	ldr	r0, [pc, #216]	@ (800674c <checkDemoModCalisma+0x115c>)
 8006672:	f004 fd6b 	bl	800b14c <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800667c:	2104      	movs	r1, #4
 800667e:	4833      	ldr	r0, [pc, #204]	@ (800674c <checkDemoModCalisma+0x115c>)
 8006680:	f004 fd64 	bl	800b14c <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d00e      	beq.n	80066a8 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800668a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800668e:	482f      	ldr	r0, [pc, #188]	@ (800674c <checkDemoModCalisma+0x115c>)
 8006690:	f004 fd5c 	bl	800b14c <HAL_GPIO_ReadPin>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800669a:	2102      	movs	r1, #2
 800669c:	482b      	ldr	r0, [pc, #172]	@ (800674c <checkDemoModCalisma+0x115c>)
 800669e:	f004 fd55 	bl	800b14c <HAL_GPIO_ReadPin>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d103      	bne.n	80066b0 <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80066a8:	4b29      	ldr	r3, [pc, #164]	@ (8006750 <checkDemoModCalisma+0x1160>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <checkDemoModCalisma+0x10d0>
 80066b0:	4b28      	ldr	r3, [pc, #160]	@ (8006754 <checkDemoModCalisma+0x1164>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <checkDemoModCalisma+0x10d0>
 80066b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006738 <checkDemoModCalisma+0x1148>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 80066c0:	4b25      	ldr	r3, [pc, #148]	@ (8006758 <checkDemoModCalisma+0x1168>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 80066c8:	4b29      	ldr	r3, [pc, #164]	@ (8006770 <checkDemoModCalisma+0x1180>)
 80066ca:	2201      	movs	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e002      	b.n	80066d6 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 80066d0:	4b27      	ldr	r3, [pc, #156]	@ (8006770 <checkDemoModCalisma+0x1180>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80066d6:	4b19      	ldr	r3, [pc, #100]	@ (800673c <checkDemoModCalisma+0x114c>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d117      	bne.n	800670e <checkDemoModCalisma+0x111e>
 80066de:	4b18      	ldr	r3, [pc, #96]	@ (8006740 <checkDemoModCalisma+0x1150>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d003      	beq.n	80066ee <checkDemoModCalisma+0x10fe>
 80066e6:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <checkDemoModCalisma+0x1150>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d10f      	bne.n	800670e <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <checkDemoModCalisma+0x1154>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <checkDemoModCalisma+0x110e>
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <checkDemoModCalisma+0x1158>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 80066fe:	4b16      	ldr	r3, [pc, #88]	@ (8006758 <checkDemoModCalisma+0x1168>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8006706:	4b1b      	ldr	r3, [pc, #108]	@ (8006774 <checkDemoModCalisma+0x1184>)
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e002      	b.n	8006714 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800670e:	4b19      	ldr	r3, [pc, #100]	@ (8006774 <checkDemoModCalisma+0x1184>)
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006714:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <checkDemoModCalisma+0x1180>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <checkDemoModCalisma+0x113c>
 800671c:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <checkDemoModCalisma+0x1170>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <checkDemoModCalisma+0x113c>
 8006724:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <checkDemoModCalisma+0x1184>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d027      	beq.n	800677c <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800672c:	2201      	movs	r2, #1
 800672e:	2120      	movs	r1, #32
 8006730:	4811      	ldr	r0, [pc, #68]	@ (8006778 <checkDemoModCalisma+0x1188>)
 8006732:	f004 fd22 	bl	800b17a <HAL_GPIO_WritePin>
 8006736:	e026      	b.n	8006786 <checkDemoModCalisma+0x1196>
 8006738:	200010c8 	.word	0x200010c8
 800673c:	20001077 	.word	0x20001077
 8006740:	20001074 	.word	0x20001074
 8006744:	200010b7 	.word	0x200010b7
 8006748:	200010b8 	.word	0x200010b8
 800674c:	40011000 	.word	0x40011000
 8006750:	20001078 	.word	0x20001078
 8006754:	200010c7 	.word	0x200010c7
 8006758:	200010ad 	.word	0x200010ad
 800675c:	2000109b 	.word	0x2000109b
 8006760:	200010b4 	.word	0x200010b4
 8006764:	20001044 	.word	0x20001044
 8006768:	20001048 	.word	0x20001048
 800676c:	20001087 	.word	0x20001087
 8006770:	200010b5 	.word	0x200010b5
 8006774:	200010b6 	.word	0x200010b6
 8006778:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800677c:	2200      	movs	r2, #0
 800677e:	2120      	movs	r1, #32
 8006780:	4887      	ldr	r0, [pc, #540]	@ (80069a0 <checkDemoModCalisma+0x13b0>)
 8006782:	f004 fcfa 	bl	800b17a <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006786:	4b87      	ldr	r3, [pc, #540]	@ (80069a4 <checkDemoModCalisma+0x13b4>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <checkDemoModCalisma+0x11bc>
 800678e:	2102      	movs	r1, #2
 8006790:	4885      	ldr	r0, [pc, #532]	@ (80069a8 <checkDemoModCalisma+0x13b8>)
 8006792:	f004 fcdb 	bl	800b14c <HAL_GPIO_ReadPin>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d107      	bne.n	80067ac <checkDemoModCalisma+0x11bc>
 800679c:	4b83      	ldr	r3, [pc, #524]	@ (80069ac <checkDemoModCalisma+0x13bc>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <checkDemoModCalisma+0x11bc>
 80067a4:	4b82      	ldr	r3, [pc, #520]	@ (80069b0 <checkDemoModCalisma+0x13c0>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d112      	bne.n	80067d2 <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80067ac:	4b81      	ldr	r3, [pc, #516]	@ (80069b4 <checkDemoModCalisma+0x13c4>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d032      	beq.n	800681a <checkDemoModCalisma+0x122a>
 80067b4:	2104      	movs	r1, #4
 80067b6:	487c      	ldr	r0, [pc, #496]	@ (80069a8 <checkDemoModCalisma+0x13b8>)
 80067b8:	f004 fcc8 	bl	800b14c <HAL_GPIO_ReadPin>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d12b      	bne.n	800681a <checkDemoModCalisma+0x122a>
 80067c2:	4b7a      	ldr	r3, [pc, #488]	@ (80069ac <checkDemoModCalisma+0x13bc>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d027      	beq.n	800681a <checkDemoModCalisma+0x122a>
 80067ca:	4b79      	ldr	r3, [pc, #484]	@ (80069b0 <checkDemoModCalisma+0x13c0>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d023      	beq.n	800681a <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 80067d2:	4b79      	ldr	r3, [pc, #484]	@ (80069b8 <checkDemoModCalisma+0x13c8>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b77      	ldr	r3, [pc, #476]	@ (80069b8 <checkDemoModCalisma+0x13c8>)
 80067dc:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80067de:	4b76      	ldr	r3, [pc, #472]	@ (80069b8 <checkDemoModCalisma+0x13c8>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2bff      	cmp	r3, #255	@ 0xff
 80067e4:	d108      	bne.n	80067f8 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 80067e6:	4b74      	ldr	r3, [pc, #464]	@ (80069b8 <checkDemoModCalisma+0x13c8>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80067ec:	4b73      	ldr	r3, [pc, #460]	@ (80069bc <checkDemoModCalisma+0x13cc>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b71      	ldr	r3, [pc, #452]	@ (80069bc <checkDemoModCalisma+0x13cc>)
 80067f6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80067f8:	4b6f      	ldr	r3, [pc, #444]	@ (80069b8 <checkDemoModCalisma+0x13c8>)
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	4b70      	ldr	r3, [pc, #448]	@ (80069c0 <checkDemoModCalisma+0x13d0>)
 80067fe:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8006800:	4b6e      	ldr	r3, [pc, #440]	@ (80069bc <checkDemoModCalisma+0x13cc>)
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	4b6e      	ldr	r3, [pc, #440]	@ (80069c0 <checkDemoModCalisma+0x13d0>)
 8006806:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8006808:	4b6e      	ldr	r3, [pc, #440]	@ (80069c4 <checkDemoModCalisma+0x13d4>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800680e:	4b65      	ldr	r3, [pc, #404]	@ (80069a4 <checkDemoModCalisma+0x13b4>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006814:	4b67      	ldr	r3, [pc, #412]	@ (80069b4 <checkDemoModCalisma+0x13c4>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800681a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800681e:	486a      	ldr	r0, [pc, #424]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 8006820:	f004 fc94 	bl	800b14c <HAL_GPIO_ReadPin>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800682a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800682e:	4866      	ldr	r0, [pc, #408]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 8006830:	f004 fc8c 	bl	800b14c <HAL_GPIO_ReadPin>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800683a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800683e:	4862      	ldr	r0, [pc, #392]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 8006840:	f004 fc84 	bl	800b14c <HAL_GPIO_ReadPin>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800684a:	2140      	movs	r1, #64	@ 0x40
 800684c:	4856      	ldr	r0, [pc, #344]	@ (80069a8 <checkDemoModCalisma+0x13b8>)
 800684e:	f004 fc7d 	bl	800b14c <HAL_GPIO_ReadPin>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <checkDemoModCalisma+0x1270>

					startBasili=1;
 8006858:	4b5c      	ldr	r3, [pc, #368]	@ (80069cc <checkDemoModCalisma+0x13dc>)
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e002      	b.n	8006866 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 8006860:	4b5a      	ldr	r3, [pc, #360]	@ (80069cc <checkDemoModCalisma+0x13dc>)
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006866:	4b59      	ldr	r3, [pc, #356]	@ (80069cc <checkDemoModCalisma+0x13dc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <checkDemoModCalisma+0x12a8>
 800686e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006872:	4855      	ldr	r0, [pc, #340]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 8006874:	f004 fc6a 	bl	800b14c <HAL_GPIO_ReadPin>
 8006878:	4603      	mov	r3, r0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d10c      	bne.n	8006898 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 800687e:	4b54      	ldr	r3, [pc, #336]	@ (80069d0 <checkDemoModCalisma+0x13e0>)
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006884:	2001      	movs	r0, #1
 8006886:	f7fa f8e9 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(1);
 800688a:	2001      	movs	r0, #1
 800688c:	f7fa f88e 	bl	80009ac <hata2EEPROM>
					acilstophatasi=1;
 8006890:	4b50      	ldr	r3, [pc, #320]	@ (80069d4 <checkDemoModCalisma+0x13e4>)
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e018      	b.n	80068ca <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006898:	4b4e      	ldr	r3, [pc, #312]	@ (80069d4 <checkDemoModCalisma+0x13e4>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d014      	beq.n	80068ca <checkDemoModCalisma+0x12da>
 80068a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068a4:	4848      	ldr	r0, [pc, #288]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 80068a6:	f004 fc51 	bl	800b14c <HAL_GPIO_ReadPin>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <checkDemoModCalisma+0x12da>
 80068b0:	4b46      	ldr	r3, [pc, #280]	@ (80069cc <checkDemoModCalisma+0x13dc>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f083 0301 	eor.w	r3, r3, #1
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 80068be:	4b45      	ldr	r3, [pc, #276]	@ (80069d4 <checkDemoModCalisma+0x13e4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80068c4:	2001      	movs	r0, #1
 80068c6:	f7fd f8c3 	bl	8003a50 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80068ca:	4b43      	ldr	r3, [pc, #268]	@ (80069d8 <checkDemoModCalisma+0x13e8>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f083 0301 	eor.w	r3, r3, #1
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d023      	beq.n	8006920 <checkDemoModCalisma+0x1330>
 80068d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068dc:	483a      	ldr	r0, [pc, #232]	@ (80069c8 <checkDemoModCalisma+0x13d8>)
 80068de:	f004 fc35 	bl	800b14c <HAL_GPIO_ReadPin>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <checkDemoModCalisma+0x1300>
 80068e8:	4b3c      	ldr	r3, [pc, #240]	@ (80069dc <checkDemoModCalisma+0x13ec>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <checkDemoModCalisma+0x1330>
 80068f0:	4b3b      	ldr	r3, [pc, #236]	@ (80069e0 <checkDemoModCalisma+0x13f0>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d113      	bne.n	8006920 <checkDemoModCalisma+0x1330>
 80068f8:	4b3a      	ldr	r3, [pc, #232]	@ (80069e4 <checkDemoModCalisma+0x13f4>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f083 0301 	eor.w	r3, r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <checkDemoModCalisma+0x1330>
					hataVar=1;
 8006906:	4b32      	ldr	r3, [pc, #200]	@ (80069d0 <checkDemoModCalisma+0x13e0>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800690c:	2002      	movs	r0, #2
 800690e:	f7fa f8a5 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(2);
 8006912:	2002      	movs	r0, #2
 8006914:	f7fa f84a 	bl	80009ac <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006918:	4b32      	ldr	r3, [pc, #200]	@ (80069e4 <checkDemoModCalisma+0x13f4>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e017      	b.n	8006950 <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006920:	4b30      	ldr	r3, [pc, #192]	@ (80069e4 <checkDemoModCalisma+0x13f4>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d013      	beq.n	8006950 <checkDemoModCalisma+0x1360>
 8006928:	4b2b      	ldr	r3, [pc, #172]	@ (80069d8 <checkDemoModCalisma+0x13e8>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <checkDemoModCalisma+0x1360>
 8006930:	4b2d      	ldr	r3, [pc, #180]	@ (80069e8 <checkDemoModCalisma+0x13f8>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f083 0301 	eor.w	r3, r3, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800693e:	4b29      	ldr	r3, [pc, #164]	@ (80069e4 <checkDemoModCalisma+0x13f4>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006944:	4b25      	ldr	r3, [pc, #148]	@ (80069dc <checkDemoModCalisma+0x13ec>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800694a:	2002      	movs	r0, #2
 800694c:	f7fd f880 	bl	8003a50 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8006950:	4b26      	ldr	r3, [pc, #152]	@ (80069ec <checkDemoModCalisma+0x13fc>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d151      	bne.n	80069fc <checkDemoModCalisma+0x140c>
 8006958:	4b25      	ldr	r3, [pc, #148]	@ (80069f0 <checkDemoModCalisma+0x1400>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d14d      	bne.n	80069fc <checkDemoModCalisma+0x140c>
 8006960:	4b24      	ldr	r3, [pc, #144]	@ (80069f4 <checkDemoModCalisma+0x1404>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d049      	beq.n	80069fc <checkDemoModCalisma+0x140c>
 8006968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800696c:	480e      	ldr	r0, [pc, #56]	@ (80069a8 <checkDemoModCalisma+0x13b8>)
 800696e:	f004 fbed 	bl	800b14c <HAL_GPIO_ReadPin>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d141      	bne.n	80069fc <checkDemoModCalisma+0x140c>
 8006978:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <checkDemoModCalisma+0x1408>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f083 0301 	eor.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03a      	beq.n	80069fc <checkDemoModCalisma+0x140c>
					hataVar=1;
 8006986:	4b12      	ldr	r3, [pc, #72]	@ (80069d0 <checkDemoModCalisma+0x13e0>)
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800698c:	2003      	movs	r0, #3
 800698e:	f7fa f865 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006992:	2003      	movs	r0, #3
 8006994:	f7fa f80a 	bl	80009ac <hata2EEPROM>
					basinchatasi=1;
 8006998:	4b17      	ldr	r3, [pc, #92]	@ (80069f8 <checkDemoModCalisma+0x1408>)
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e043      	b.n	8006a28 <checkDemoModCalisma+0x1438>
 80069a0:	40010800 	.word	0x40010800
 80069a4:	200010ab 	.word	0x200010ab
 80069a8:	40011000 	.word	0x40011000
 80069ac:	20001072 	.word	0x20001072
 80069b0:	200010ad 	.word	0x200010ad
 80069b4:	200010ac 	.word	0x200010ac
 80069b8:	20001064 	.word	0x20001064
 80069bc:	20001066 	.word	0x20001066
 80069c0:	20000f9c 	.word	0x20000f9c
 80069c4:	20001098 	.word	0x20001098
 80069c8:	40010c00 	.word	0x40010c00
 80069cc:	200010b9 	.word	0x200010b9
 80069d0:	200010c0 	.word	0x200010c0
 80069d4:	200010bb 	.word	0x200010bb
 80069d8:	200010c2 	.word	0x200010c2
 80069dc:	200010cc 	.word	0x200010cc
 80069e0:	20001070 	.word	0x20001070
 80069e4:	200010bc 	.word	0x200010bc
 80069e8:	200010a4 	.word	0x200010a4
 80069ec:	2000106f 	.word	0x2000106f
 80069f0:	20001073 	.word	0x20001073
 80069f4:	200010bf 	.word	0x200010bf
 80069f8:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80069fc:	4b85      	ldr	r3, [pc, #532]	@ (8006c14 <checkDemoModCalisma+0x1624>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <checkDemoModCalisma+0x1438>
 8006a04:	4b84      	ldr	r3, [pc, #528]	@ (8006c18 <checkDemoModCalisma+0x1628>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d10d      	bne.n	8006a28 <checkDemoModCalisma+0x1438>
 8006a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a10:	4882      	ldr	r0, [pc, #520]	@ (8006c1c <checkDemoModCalisma+0x162c>)
 8006a12:	f004 fb9b 	bl	800b14c <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d105      	bne.n	8006a28 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 8006a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c14 <checkDemoModCalisma+0x1624>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8006a22:	2003      	movs	r0, #3
 8006a24:	f7fd f814 	bl	8003a50 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006a28:	4b7d      	ldr	r3, [pc, #500]	@ (8006c20 <checkDemoModCalisma+0x1630>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <checkDemoModCalisma+0x1448>
 8006a30:	4b7c      	ldr	r3, [pc, #496]	@ (8006c24 <checkDemoModCalisma+0x1634>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d023      	beq.n	8006a80 <checkDemoModCalisma+0x1490>
 8006a38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a3c:	487a      	ldr	r0, [pc, #488]	@ (8006c28 <checkDemoModCalisma+0x1638>)
 8006a3e:	f004 fb85 	bl	800b14c <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d11b      	bne.n	8006a80 <checkDemoModCalisma+0x1490>
 8006a48:	4b78      	ldr	r3, [pc, #480]	@ (8006c2c <checkDemoModCalisma+0x163c>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d003      	beq.n	8006a58 <checkDemoModCalisma+0x1468>
 8006a50:	4b76      	ldr	r3, [pc, #472]	@ (8006c2c <checkDemoModCalisma+0x163c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d113      	bne.n	8006a80 <checkDemoModCalisma+0x1490>
 8006a58:	4b75      	ldr	r3, [pc, #468]	@ (8006c30 <checkDemoModCalisma+0x1640>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f083 0301 	eor.w	r3, r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006a66:	4b73      	ldr	r3, [pc, #460]	@ (8006c34 <checkDemoModCalisma+0x1644>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006a6c:	2004      	movs	r0, #4
 8006a6e:	f7f9 fff5 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006a72:	2004      	movs	r0, #4
 8006a74:	f7f9 ff9a 	bl	80009ac <hata2EEPROM>
					katkapisivicihatasi=1;
 8006a78:	4b6d      	ldr	r3, [pc, #436]	@ (8006c30 <checkDemoModCalisma+0x1640>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e01f      	b.n	8006ac0 <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006a80:	4b6b      	ldr	r3, [pc, #428]	@ (8006c30 <checkDemoModCalisma+0x1640>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01b      	beq.n	8006ac0 <checkDemoModCalisma+0x14d0>
 8006a88:	4b6b      	ldr	r3, [pc, #428]	@ (8006c38 <checkDemoModCalisma+0x1648>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d017      	beq.n	8006ac0 <checkDemoModCalisma+0x14d0>
 8006a90:	4b63      	ldr	r3, [pc, #396]	@ (8006c20 <checkDemoModCalisma+0x1630>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f083 0301 	eor.w	r3, r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d010      	beq.n	8006ac0 <checkDemoModCalisma+0x14d0>
 8006a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aa2:	4861      	ldr	r0, [pc, #388]	@ (8006c28 <checkDemoModCalisma+0x1638>)
 8006aa4:	f004 fb52 	bl	800b14c <HAL_GPIO_ReadPin>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 8006aae:	4b60      	ldr	r3, [pc, #384]	@ (8006c30 <checkDemoModCalisma+0x1640>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c24 <checkDemoModCalisma+0x1634>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006aba:	2004      	movs	r0, #4
 8006abc:	f7fc ffc8 	bl	8003a50 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006ac0:	4b57      	ldr	r3, [pc, #348]	@ (8006c20 <checkDemoModCalisma+0x1630>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <checkDemoModCalisma+0x14e0>
 8006ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c3c <checkDemoModCalisma+0x164c>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <checkDemoModCalisma+0x1528>
 8006ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ad4:	4854      	ldr	r0, [pc, #336]	@ (8006c28 <checkDemoModCalisma+0x1638>)
 8006ad6:	f004 fb39 	bl	800b14c <HAL_GPIO_ReadPin>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d11b      	bne.n	8006b18 <checkDemoModCalisma+0x1528>
 8006ae0:	4b52      	ldr	r3, [pc, #328]	@ (8006c2c <checkDemoModCalisma+0x163c>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d003      	beq.n	8006af0 <checkDemoModCalisma+0x1500>
 8006ae8:	4b50      	ldr	r3, [pc, #320]	@ (8006c2c <checkDemoModCalisma+0x163c>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d113      	bne.n	8006b18 <checkDemoModCalisma+0x1528>
 8006af0:	4b53      	ldr	r3, [pc, #332]	@ (8006c40 <checkDemoModCalisma+0x1650>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f083 0301 	eor.w	r3, r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00c      	beq.n	8006b18 <checkDemoModCalisma+0x1528>

					hataVar=1;
 8006afe:	4b4d      	ldr	r3, [pc, #308]	@ (8006c34 <checkDemoModCalisma+0x1644>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006b04:	2005      	movs	r0, #5
 8006b06:	f7f9 ffa9 	bl	8000a5c <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006b0a:	2005      	movs	r0, #5
 8006b0c:	f7f9 ff4e 	bl	80009ac <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006b10:	4b4b      	ldr	r3, [pc, #300]	@ (8006c40 <checkDemoModCalisma+0x1650>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e023      	b.n	8006b60 <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006b18:	4b49      	ldr	r3, [pc, #292]	@ (8006c40 <checkDemoModCalisma+0x1650>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01f      	beq.n	8006b60 <checkDemoModCalisma+0x1570>
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <checkDemoModCalisma+0x1648>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01b      	beq.n	8006b60 <checkDemoModCalisma+0x1570>
 8006b28:	4b3d      	ldr	r3, [pc, #244]	@ (8006c20 <checkDemoModCalisma+0x1630>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d014      	beq.n	8006b60 <checkDemoModCalisma+0x1570>
 8006b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b3a:	483b      	ldr	r0, [pc, #236]	@ (8006c28 <checkDemoModCalisma+0x1638>)
 8006b3c:	f004 fb06 	bl	800b14c <HAL_GPIO_ReadPin>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <checkDemoModCalisma+0x1570>
 8006b46:	4b3c      	ldr	r3, [pc, #240]	@ (8006c38 <checkDemoModCalisma+0x1648>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 8006b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c40 <checkDemoModCalisma+0x1650>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006b54:	4b39      	ldr	r3, [pc, #228]	@ (8006c3c <checkDemoModCalisma+0x164c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006b5a:	2005      	movs	r0, #5
 8006b5c:	f7fc ff78 	bl	8003a50 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006b60:	4b38      	ldr	r3, [pc, #224]	@ (8006c44 <checkDemoModCalisma+0x1654>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <checkDemoModCalisma+0x1588>
 8006b68:	4b37      	ldr	r3, [pc, #220]	@ (8006c48 <checkDemoModCalisma+0x1658>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <checkDemoModCalisma+0x1588>
 8006b70:	4b36      	ldr	r3, [pc, #216]	@ (8006c4c <checkDemoModCalisma+0x165c>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01b      	beq.n	8006bb0 <checkDemoModCalisma+0x15c0>
 8006b78:	4b35      	ldr	r3, [pc, #212]	@ (8006c50 <checkDemoModCalisma+0x1660>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f083 0301 	eor.w	r3, r3, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d014      	beq.n	8006bb0 <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006b86:	4b33      	ldr	r3, [pc, #204]	@ (8006c54 <checkDemoModCalisma+0x1664>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b33      	ldr	r3, [pc, #204]	@ (8006c58 <checkDemoModCalisma+0x1668>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <checkDemoModCalisma+0x166c>)
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d30b      	bcc.n	8006bb0 <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006b98:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <checkDemoModCalisma+0x1644>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006b9e:	2006      	movs	r0, #6
 8006ba0:	f7f9 ff5c 	bl	8000a5c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006ba4:	2006      	movs	r0, #6
 8006ba6:	f7f9 ff01 	bl	80009ac <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006baa:	4b29      	ldr	r3, [pc, #164]	@ (8006c50 <checkDemoModCalisma+0x1660>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006bb0:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <checkDemoModCalisma+0x1660>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <checkDemoModCalisma+0x15f0>
 8006bb8:	2108      	movs	r1, #8
 8006bba:	481b      	ldr	r0, [pc, #108]	@ (8006c28 <checkDemoModCalisma+0x1638>)
 8006bbc:	f004 fac6 	bl	800b14c <HAL_GPIO_ReadPin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00c      	beq.n	8006be0 <checkDemoModCalisma+0x15f0>
 8006bc6:	4b16      	ldr	r3, [pc, #88]	@ (8006c20 <checkDemoModCalisma+0x1630>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f083 0301 	eor.w	r3, r3, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8006bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c50 <checkDemoModCalisma+0x1660>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006bda:	2006      	movs	r0, #6
 8006bdc:	f7fc ff38 	bl	8003a50 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006be0:	4b1f      	ldr	r3, [pc, #124]	@ (8006c60 <checkDemoModCalisma+0x1670>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10b      	bne.n	8006c00 <checkDemoModCalisma+0x1610>
 8006be8:	4b17      	ldr	r3, [pc, #92]	@ (8006c48 <checkDemoModCalisma+0x1658>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <checkDemoModCalisma+0x1610>
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c64 <checkDemoModCalisma+0x1674>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <checkDemoModCalisma+0x1610>
 8006bf8:	4b14      	ldr	r3, [pc, #80]	@ (8006c4c <checkDemoModCalisma+0x165c>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d035      	beq.n	8006c6c <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 8006c00:	4b19      	ldr	r3, [pc, #100]	@ (8006c68 <checkDemoModCalisma+0x1678>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006c06:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <checkDemoModCalisma+0x1634>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c3c <checkDemoModCalisma+0x164c>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e032      	b.n	8006c7a <checkDemoModCalisma+0x168a>
 8006c14:	200010c9 	.word	0x200010c9
 8006c18:	2000106f 	.word	0x2000106f
 8006c1c:	40010c00 	.word	0x40010c00
 8006c20:	200010b9 	.word	0x200010b9
 8006c24:	200010cd 	.word	0x200010cd
 8006c28:	40010800 	.word	0x40010800
 8006c2c:	20001074 	.word	0x20001074
 8006c30:	200010ca 	.word	0x200010ca
 8006c34:	200010c0 	.word	0x200010c0
 8006c38:	200010ad 	.word	0x200010ad
 8006c3c:	200010ce 	.word	0x200010ce
 8006c40:	200010cb 	.word	0x200010cb
 8006c44:	200010bf 	.word	0x200010bf
 8006c48:	200010a4 	.word	0x200010a4
 8006c4c:	200010a3 	.word	0x200010a3
 8006c50:	200010ba 	.word	0x200010ba
 8006c54:	20001044 	.word	0x20001044
 8006c58:	20001058 	.word	0x20001058
 8006c5c:	20001084 	.word	0x20001084
 8006c60:	200010a1 	.word	0x200010a1
 8006c64:	200010a2 	.word	0x200010a2
 8006c68:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 8006c6c:	4b90      	ldr	r3, [pc, #576]	@ (8006eb0 <checkDemoModCalisma+0x18c0>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006c72:	4b90      	ldr	r3, [pc, #576]	@ (8006eb4 <checkDemoModCalisma+0x18c4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a90      	ldr	r2, [pc, #576]	@ (8006eb8 <checkDemoModCalisma+0x18c8>)
 8006c78:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006c7a:	4b90      	ldr	r3, [pc, #576]	@ (8006ebc <checkDemoModCalisma+0x18cc>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d02f      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
 8006c82:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec0 <checkDemoModCalisma+0x18d0>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f083 0301 	eor.w	r3, r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d028      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
 8006c90:	4b8c      	ldr	r3, [pc, #560]	@ (8006ec4 <checkDemoModCalisma+0x18d4>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f083 0301 	eor.w	r3, r3, #1
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d021      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
 8006c9e:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec8 <checkDemoModCalisma+0x18d8>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	f083 0301 	eor.w	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006cac:	4b87      	ldr	r3, [pc, #540]	@ (8006ecc <checkDemoModCalisma+0x18dc>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f083 0301 	eor.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d013      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
 8006cba:	4b85      	ldr	r3, [pc, #532]	@ (8006ed0 <checkDemoModCalisma+0x18e0>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>
 8006cc8:	4b82      	ldr	r3, [pc, #520]	@ (8006ed4 <checkDemoModCalisma+0x18e4>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f083 0301 	eor.w	r3, r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <checkDemoModCalisma+0x16f2>

					hataVar=0;
 8006cd6:	4b79      	ldr	r3, [pc, #484]	@ (8006ebc <checkDemoModCalisma+0x18cc>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006cdc:	2007      	movs	r0, #7
 8006cde:	f7fc feb7 	bl	8003a50 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <checkDemoModCalisma+0x18cc>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d02a      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
 8006cea:	4b75      	ldr	r3, [pc, #468]	@ (8006ec0 <checkDemoModCalisma+0x18d0>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f083 0301 	eor.w	r3, r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d023      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
 8006cf8:	4b72      	ldr	r3, [pc, #456]	@ (8006ec4 <checkDemoModCalisma+0x18d4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01f      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
 8006d00:	4b71      	ldr	r3, [pc, #452]	@ (8006ec8 <checkDemoModCalisma+0x18d8>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8006ecc <checkDemoModCalisma+0x18dc>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f083 0301 	eor.w	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d011      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
 8006d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ed0 <checkDemoModCalisma+0x18e0>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f083 0301 	eor.w	r3, r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
 8006d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed4 <checkDemoModCalisma+0x18e4>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	f083 0301 	eor.w	r3, r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006d38:	4b67      	ldr	r3, [pc, #412]	@ (8006ed8 <checkDemoModCalisma+0x18e8>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e009      	b.n	8006d54 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 8006d40:	4b60      	ldr	r3, [pc, #384]	@ (8006ec4 <checkDemoModCalisma+0x18d4>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f083 0301 	eor.w	r3, r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 8006d4e:	4b62      	ldr	r3, [pc, #392]	@ (8006ed8 <checkDemoModCalisma+0x18e8>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006d54:	4b61      	ldr	r3, [pc, #388]	@ (8006edc <checkDemoModCalisma+0x18ec>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 81d8 	bne.w	800710e <checkDemoModCalisma+0x1b1e>
 8006d5e:	4b60      	ldr	r3, [pc, #384]	@ (8006ee0 <checkDemoModCalisma+0x18f0>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 81d3 	beq.w	800710e <checkDemoModCalisma+0x1b1e>
 8006d68:	4b5e      	ldr	r3, [pc, #376]	@ (8006ee4 <checkDemoModCalisma+0x18f4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 81ce 	bne.w	800710e <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006d72:	2102      	movs	r1, #2
 8006d74:	485c      	ldr	r0, [pc, #368]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006d76:	f004 f9e9 	bl	800b14c <HAL_GPIO_ReadPin>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11d      	bne.n	8006dbc <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 8006d80:	4b5a      	ldr	r3, [pc, #360]	@ (8006eec <checkDemoModCalisma+0x18fc>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f083 0301 	eor.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 8006d8e:	4b58      	ldr	r3, [pc, #352]	@ (8006ef0 <checkDemoModCalisma+0x1900>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f083 0301 	eor.w	r3, r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 8006d9c:	4b55      	ldr	r3, [pc, #340]	@ (8006ef4 <checkDemoModCalisma+0x1904>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f083 0301 	eor.w	r3, r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d008      	beq.n	8006dbc <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006daa:	2201      	movs	r2, #1
 8006dac:	2104      	movs	r1, #4
 8006dae:	4852      	ldr	r0, [pc, #328]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006db0:	f004 f9e3 	bl	800b17a <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006db4:	4b51      	ldr	r3, [pc, #324]	@ (8006efc <checkDemoModCalisma+0x190c>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e00e      	b.n	8006dda <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	484a      	ldr	r0, [pc, #296]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006dc0:	f004 f9c4 	bl	800b14c <HAL_GPIO_ReadPin>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d107      	bne.n	8006dda <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2104      	movs	r1, #4
 8006dce:	484a      	ldr	r0, [pc, #296]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006dd0:	f004 f9d3 	bl	800b17a <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006dd4:	4b49      	ldr	r3, [pc, #292]	@ (8006efc <checkDemoModCalisma+0x190c>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006dda:	4b48      	ldr	r3, [pc, #288]	@ (8006efc <checkDemoModCalisma+0x190c>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <checkDemoModCalisma+0x180a>
 8006de2:	4b43      	ldr	r3, [pc, #268]	@ (8006ef0 <checkDemoModCalisma+0x1900>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d107      	bne.n	8006dfa <checkDemoModCalisma+0x180a>
 8006dea:	4b42      	ldr	r3, [pc, #264]	@ (8006ef4 <checkDemoModCalisma+0x1904>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <checkDemoModCalisma+0x180a>
 8006df2:	4b3e      	ldr	r3, [pc, #248]	@ (8006eec <checkDemoModCalisma+0x18fc>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e00:	483d      	ldr	r0, [pc, #244]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006e02:	f004 f9ba 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006e06:	2201      	movs	r2, #1
 8006e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e0c:	483a      	ldr	r0, [pc, #232]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006e0e:	f004 f9b4 	bl	800b17a <HAL_GPIO_WritePin>
 8006e12:	e00b      	b.n	8006e2c <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e14:	2200      	movs	r2, #0
 8006e16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e1a:	4837      	ldr	r0, [pc, #220]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006e1c:	f004 f9ad 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e20:	2200      	movs	r2, #0
 8006e22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e26:	4834      	ldr	r0, [pc, #208]	@ (8006ef8 <checkDemoModCalisma+0x1908>)
 8006e28:	f004 f9a7 	bl	800b17a <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	482e      	ldr	r0, [pc, #184]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006e30:	f004 f98c 	bl	800b14c <HAL_GPIO_ReadPin>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d10d      	bne.n	8006e56 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e3e:	482a      	ldr	r0, [pc, #168]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006e40:	f004 f984 	bl	800b14c <HAL_GPIO_ReadPin>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006efc <checkDemoModCalisma+0x190c>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f083 0301 	eor.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e56:	2102      	movs	r1, #2
 8006e58:	4823      	ldr	r0, [pc, #140]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006e5a:	f004 f977 	bl	800b14c <HAL_GPIO_ReadPin>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d14d      	bne.n	8006f00 <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e68:	481f      	ldr	r0, [pc, #124]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006e6a:	f004 f96f 	bl	800b14c <HAL_GPIO_ReadPin>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d145      	bne.n	8006f00 <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006e74:	4b21      	ldr	r3, [pc, #132]	@ (8006efc <checkDemoModCalisma+0x190c>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f083 0301 	eor.w	r3, r3, #1
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03e      	beq.n	8006f00 <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 8006e82:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <checkDemoModCalisma+0x18fc>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f083 0301 	eor.w	r3, r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d037      	beq.n	8006f00 <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 8006e90:	4b18      	ldr	r3, [pc, #96]	@ (8006ef4 <checkDemoModCalisma+0x1904>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f083 0301 	eor.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d030      	beq.n	8006f00 <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	2120      	movs	r1, #32
 8006ea2:	4811      	ldr	r0, [pc, #68]	@ (8006ee8 <checkDemoModCalisma+0x18f8>)
 8006ea4:	f004 f969 	bl	800b17a <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006ea8:	4b11      	ldr	r3, [pc, #68]	@ (8006ef0 <checkDemoModCalisma+0x1900>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e02f      	b.n	8006f10 <checkDemoModCalisma+0x1920>
 8006eb0:	200010c1 	.word	0x200010c1
 8006eb4:	20001044 	.word	0x20001044
 8006eb8:	20001058 	.word	0x20001058
 8006ebc:	200010c0 	.word	0x200010c0
 8006ec0:	200010bb 	.word	0x200010bb
 8006ec4:	200010bc 	.word	0x200010bc
 8006ec8:	200010c9 	.word	0x200010c9
 8006ecc:	200010ca 	.word	0x200010ca
 8006ed0:	200010cb 	.word	0x200010cb
 8006ed4:	200010ba 	.word	0x200010ba
 8006ed8:	200010cf 	.word	0x200010cf
 8006edc:	2000108a 	.word	0x2000108a
 8006ee0:	200010bd 	.word	0x200010bd
 8006ee4:	20001089 	.word	0x20001089
 8006ee8:	40011000 	.word	0x40011000
 8006eec:	200010c4 	.word	0x200010c4
 8006ef0:	200010c5 	.word	0x200010c5
 8006ef4:	200010c6 	.word	0x200010c6
 8006ef8:	40010c00 	.word	0x40010c00
 8006efc:	200010c3 	.word	0x200010c3
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f00:	2200      	movs	r2, #0
 8006f02:	2120      	movs	r1, #32
 8006f04:	48a1      	ldr	r0, [pc, #644]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f06:	f004 f938 	bl	800b17a <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006f0a:	4ba1      	ldr	r3, [pc, #644]	@ (8007190 <checkDemoModCalisma+0x1ba0>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006f10:	2102      	movs	r1, #2
 8006f12:	489e      	ldr	r0, [pc, #632]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f14:	f004 f91a 	bl	800b14c <HAL_GPIO_ReadPin>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d125      	bne.n	8006f6a <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f22:	489a      	ldr	r0, [pc, #616]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f24:	f004 f912 	bl	800b14c <HAL_GPIO_ReadPin>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d11d      	bne.n	8006f6a <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 8006f2e:	4b99      	ldr	r3, [pc, #612]	@ (8007194 <checkDemoModCalisma+0x1ba4>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	f083 0301 	eor.w	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006f3c:	4b94      	ldr	r3, [pc, #592]	@ (8007190 <checkDemoModCalisma+0x1ba0>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f083 0301 	eor.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00f      	beq.n	8006f6a <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006f4a:	4b93      	ldr	r3, [pc, #588]	@ (8007198 <checkDemoModCalisma+0x1ba8>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f083 0301 	eor.w	r3, r3, #1
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006f58:	2201      	movs	r2, #1
 8006f5a:	2110      	movs	r1, #16
 8006f5c:	488b      	ldr	r0, [pc, #556]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f5e:	f004 f90c 	bl	800b17a <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006f62:	4b8e      	ldr	r3, [pc, #568]	@ (800719c <checkDemoModCalisma+0x1bac>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e007      	b.n	8006f7a <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2110      	movs	r1, #16
 8006f6e:	4887      	ldr	r0, [pc, #540]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f70:	f004 f903 	bl	800b17a <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006f74:	4b89      	ldr	r3, [pc, #548]	@ (800719c <checkDemoModCalisma+0x1bac>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	4883      	ldr	r0, [pc, #524]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006f7e:	f004 f8e5 	bl	800b14c <HAL_GPIO_ReadPin>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d125      	bne.n	8006fd4 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006f88:	4b82      	ldr	r3, [pc, #520]	@ (8007194 <checkDemoModCalisma+0x1ba4>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f083 0301 	eor.w	r3, r3, #1
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01e      	beq.n	8006fd4 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8006f96:	4b81      	ldr	r3, [pc, #516]	@ (800719c <checkDemoModCalisma+0x1bac>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f083 0301 	eor.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d017      	beq.n	8006fd4 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8006fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8007190 <checkDemoModCalisma+0x1ba0>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f083 0301 	eor.w	r3, r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d010      	beq.n	8006fd4 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	487a      	ldr	r0, [pc, #488]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8006fb8:	f004 f8df 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4877      	ldr	r0, [pc, #476]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8006fc2:	f004 f8da 	bl	800b17a <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006fc6:	4b74      	ldr	r3, [pc, #464]	@ (8007198 <checkDemoModCalisma+0x1ba8>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006fcc:	4b75      	ldr	r3, [pc, #468]	@ (80071a4 <checkDemoModCalisma+0x1bb4>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e013      	b.n	8006ffc <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006fd4:	2104      	movs	r1, #4
 8006fd6:	486d      	ldr	r0, [pc, #436]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8006fd8:	f004 f8b8 	bl	800b14c <HAL_GPIO_ReadPin>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10c      	bne.n	8006ffc <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	486e      	ldr	r0, [pc, #440]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8006fe8:	f004 f8c7 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006fec:	2200      	movs	r2, #0
 8006fee:	2101      	movs	r1, #1
 8006ff0:	486b      	ldr	r0, [pc, #428]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8006ff2:	f004 f8c2 	bl	800b17a <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006ff6:	4b68      	ldr	r3, [pc, #416]	@ (8007198 <checkDemoModCalisma+0x1ba8>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	4863      	ldr	r0, [pc, #396]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8007000:	f004 f8a4 	bl	800b14c <HAL_GPIO_ReadPin>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10d      	bne.n	8007026 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800700a:	2201      	movs	r2, #1
 800700c:	2180      	movs	r1, #128	@ 0x80
 800700e:	4866      	ldr	r0, [pc, #408]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 8007010:	f004 f8b3 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007014:	2201      	movs	r2, #1
 8007016:	2120      	movs	r1, #32
 8007018:	4863      	ldr	r0, [pc, #396]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 800701a:	f004 f8ae 	bl	800b17a <HAL_GPIO_WritePin>
					timer3 = millis;
 800701e:	4b63      	ldr	r3, [pc, #396]	@ (80071ac <checkDemoModCalisma+0x1bbc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a63      	ldr	r2, [pc, #396]	@ (80071b0 <checkDemoModCalisma+0x1bc0>)
 8007024:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8007026:	4b61      	ldr	r3, [pc, #388]	@ (80071ac <checkDemoModCalisma+0x1bbc>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <checkDemoModCalisma+0x1bc0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b04      	cmp	r3, #4
 8007032:	d909      	bls.n	8007048 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007034:	2200      	movs	r2, #0
 8007036:	2180      	movs	r1, #128	@ 0x80
 8007038:	485b      	ldr	r0, [pc, #364]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 800703a:	f004 f89e 	bl	800b17a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800703e:	2200      	movs	r2, #0
 8007040:	2120      	movs	r1, #32
 8007042:	4859      	ldr	r0, [pc, #356]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 8007044:	f004 f899 	bl	800b17a <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007048:	2102      	movs	r1, #2
 800704a:	4850      	ldr	r0, [pc, #320]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 800704c:	f004 f87e 	bl	800b14c <HAL_GPIO_ReadPin>
 8007050:	4603      	mov	r3, r0
 8007052:	2b01      	cmp	r3, #1
 8007054:	d108      	bne.n	8007068 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007056:	2201      	movs	r2, #1
 8007058:	2140      	movs	r1, #64	@ 0x40
 800705a:	4853      	ldr	r0, [pc, #332]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 800705c:	f004 f88d 	bl	800b17a <HAL_GPIO_WritePin>
					timer3 = millis;
 8007060:	4b52      	ldr	r3, [pc, #328]	@ (80071ac <checkDemoModCalisma+0x1bbc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a52      	ldr	r2, [pc, #328]	@ (80071b0 <checkDemoModCalisma+0x1bc0>)
 8007066:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8007068:	4b50      	ldr	r3, [pc, #320]	@ (80071ac <checkDemoModCalisma+0x1bbc>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b50      	ldr	r3, [pc, #320]	@ (80071b0 <checkDemoModCalisma+0x1bc0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b04      	cmp	r3, #4
 8007074:	d904      	bls.n	8007080 <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007076:	2200      	movs	r2, #0
 8007078:	2140      	movs	r1, #64	@ 0x40
 800707a:	484b      	ldr	r0, [pc, #300]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 800707c:	f004 f87d 	bl	800b17a <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007080:	4b44      	ldr	r3, [pc, #272]	@ (8007194 <checkDemoModCalisma+0x1ba4>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d024      	beq.n	80070d2 <checkDemoModCalisma+0x1ae2>
 8007088:	4b46      	ldr	r3, [pc, #280]	@ (80071a4 <checkDemoModCalisma+0x1bb4>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d020      	beq.n	80070d2 <checkDemoModCalisma+0x1ae2>
					calismaSayisiDemo++;
 8007090:	4b48      	ldr	r3, [pc, #288]	@ (80071b4 <checkDemoModCalisma+0x1bc4>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b46      	ldr	r3, [pc, #280]	@ (80071b4 <checkDemoModCalisma+0x1bc4>)
 800709a:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800709c:	4b46      	ldr	r3, [pc, #280]	@ (80071b8 <checkDemoModCalisma+0x1bc8>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2bff      	cmp	r3, #255	@ 0xff
 80070a2:	d108      	bne.n	80070b6 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 80070a4:	4b44      	ldr	r3, [pc, #272]	@ (80071b8 <checkDemoModCalisma+0x1bc8>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 80070aa:	4b44      	ldr	r3, [pc, #272]	@ (80071bc <checkDemoModCalisma+0x1bcc>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	3301      	adds	r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b42      	ldr	r3, [pc, #264]	@ (80071bc <checkDemoModCalisma+0x1bcc>)
 80070b4:	701a      	strb	r2, [r3, #0]
					}
					eepromData[28] = calismaSayisiDemo;
 80070b6:	4b3f      	ldr	r3, [pc, #252]	@ (80071b4 <checkDemoModCalisma+0x1bc4>)
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	4b41      	ldr	r3, [pc, #260]	@ (80071c0 <checkDemoModCalisma+0x1bd0>)
 80070bc:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 80070be:	4b41      	ldr	r3, [pc, #260]	@ (80071c4 <checkDemoModCalisma+0x1bd4>)
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	4b3f      	ldr	r3, [pc, #252]	@ (80071c0 <checkDemoModCalisma+0x1bd0>)
 80070c4:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 80070c6:	4b40      	ldr	r3, [pc, #256]	@ (80071c8 <checkDemoModCalisma+0x1bd8>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 80070cc:	4b35      	ldr	r3, [pc, #212]	@ (80071a4 <checkDemoModCalisma+0x1bb4>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 80070d2:	4b3e      	ldr	r3, [pc, #248]	@ (80071cc <checkDemoModCalisma+0x1bdc>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d156      	bne.n	8007188 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 80070da:	4a3d      	ldr	r2, [pc, #244]	@ (80071d0 <checkDemoModCalisma+0x1be0>)
 80070dc:	2101      	movs	r1, #1
 80070de:	2002      	movs	r0, #2
 80070e0:	f002 fd42 	bl	8009b68 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 80070e4:	4a3b      	ldr	r2, [pc, #236]	@ (80071d4 <checkDemoModCalisma+0x1be4>)
 80070e6:	2101      	movs	r1, #1
 80070e8:	2001      	movs	r0, #1
 80070ea:	f002 fd3d 	bl	8009b68 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 80070ee:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <checkDemoModCalisma+0x1bc4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	220a      	movs	r2, #10
 80070f4:	4938      	ldr	r1, [pc, #224]	@ (80071d8 <checkDemoModCalisma+0x1be8>)
 80070f6:	4618      	mov	r0, r3
 80070f8:	f007 f81e 	bl	800e138 <itoa>
					lcd_print(2,11,snum);
 80070fc:	4a36      	ldr	r2, [pc, #216]	@ (80071d8 <checkDemoModCalisma+0x1be8>)
 80070fe:	210b      	movs	r1, #11
 8007100:	2002      	movs	r0, #2
 8007102:	f002 fd31 	bl	8009b68 <lcd_print>
					mesajYazildi=1;
 8007106:	4b35      	ldr	r3, [pc, #212]	@ (80071dc <checkDemoModCalisma+0x1bec>)
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 800710c:	e03c      	b.n	8007188 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 800710e:	4b34      	ldr	r3, [pc, #208]	@ (80071e0 <checkDemoModCalisma+0x1bf0>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d003      	beq.n	800711e <checkDemoModCalisma+0x1b2e>
 8007116:	4b2d      	ldr	r3, [pc, #180]	@ (80071cc <checkDemoModCalisma+0x1bdc>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d134      	bne.n	8007188 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800711e:	2200      	movs	r2, #0
 8007120:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007124:	481e      	ldr	r0, [pc, #120]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8007126:	f004 f828 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800712a:	2200      	movs	r2, #0
 800712c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007130:	481b      	ldr	r0, [pc, #108]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8007132:	f004 f822 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007136:	2200      	movs	r2, #0
 8007138:	2104      	movs	r1, #4
 800713a:	4819      	ldr	r0, [pc, #100]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 800713c:	f004 f81d 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007140:	2200      	movs	r2, #0
 8007142:	2102      	movs	r1, #2
 8007144:	4816      	ldr	r0, [pc, #88]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8007146:	f004 f818 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800714a:	2200      	movs	r2, #0
 800714c:	2101      	movs	r1, #1
 800714e:	4814      	ldr	r0, [pc, #80]	@ (80071a0 <checkDemoModCalisma+0x1bb0>)
 8007150:	f004 f813 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007154:	2200      	movs	r2, #0
 8007156:	2120      	movs	r1, #32
 8007158:	480c      	ldr	r0, [pc, #48]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 800715a:	f004 f80e 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800715e:	2200      	movs	r2, #0
 8007160:	2110      	movs	r1, #16
 8007162:	480a      	ldr	r0, [pc, #40]	@ (800718c <checkDemoModCalisma+0x1b9c>)
 8007164:	f004 f809 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007168:	2200      	movs	r2, #0
 800716a:	2180      	movs	r1, #128	@ 0x80
 800716c:	480e      	ldr	r0, [pc, #56]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 800716e:	f004 f804 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007172:	2200      	movs	r2, #0
 8007174:	2140      	movs	r1, #64	@ 0x40
 8007176:	480c      	ldr	r0, [pc, #48]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 8007178:	f003 ffff 	bl	800b17a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800717c:	2200      	movs	r2, #0
 800717e:	2120      	movs	r1, #32
 8007180:	4809      	ldr	r0, [pc, #36]	@ (80071a8 <checkDemoModCalisma+0x1bb8>)
 8007182:	f003 fffa 	bl	800b17a <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007186:	e7ff      	b.n	8007188 <checkDemoModCalisma+0x1b98>
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40011000 	.word	0x40011000
 8007190:	200010c5 	.word	0x200010c5
 8007194:	200010c3 	.word	0x200010c3
 8007198:	200010c4 	.word	0x200010c4
 800719c:	200010c6 	.word	0x200010c6
 80071a0:	40010c00 	.word	0x40010c00
 80071a4:	200010aa 	.word	0x200010aa
 80071a8:	40010800 	.word	0x40010800
 80071ac:	20001044 	.word	0x20001044
 80071b0:	20001054 	.word	0x20001054
 80071b4:	20001065 	.word	0x20001065
 80071b8:	20001064 	.word	0x20001064
 80071bc:	20001066 	.word	0x20001066
 80071c0:	20000f9c 	.word	0x20000f9c
 80071c4:	20001067 	.word	0x20001067
 80071c8:	20001098 	.word	0x20001098
 80071cc:	20001089 	.word	0x20001089
 80071d0:	0800e394 	.word	0x0800e394
 80071d4:	0800e3a0 	.word	0x0800e3a0
 80071d8:	2000100c 	.word	0x2000100c
 80071dc:	200010a0 	.word	0x200010a0
 80071e0:	2000108a 	.word	0x2000108a

080071e4 <mainLoop>:

void mainLoop() {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 80071e8:	f7fc fc86 	bl	8003af8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80071ec:	2101      	movs	r1, #1
 80071ee:	488b      	ldr	r0, [pc, #556]	@ (800741c <mainLoop+0x238>)
 80071f0:	f003 ffac 	bl	800b14c <HAL_GPIO_ReadPin>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d136      	bne.n	8007268 <mainLoop+0x84>
 80071fa:	2108      	movs	r1, #8
 80071fc:	4888      	ldr	r0, [pc, #544]	@ (8007420 <mainLoop+0x23c>)
 80071fe:	f003 ffa5 	bl	800b14c <HAL_GPIO_ReadPin>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d12f      	bne.n	8007268 <mainLoop+0x84>
 8007208:	2102      	movs	r1, #2
 800720a:	4884      	ldr	r0, [pc, #528]	@ (800741c <mainLoop+0x238>)
 800720c:	f003 ff9e 	bl	800b14c <HAL_GPIO_ReadPin>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d128      	bne.n	8007268 <mainLoop+0x84>
 8007216:	2104      	movs	r1, #4
 8007218:	4880      	ldr	r0, [pc, #512]	@ (800741c <mainLoop+0x238>)
 800721a:	f003 ff97 	bl	800b14c <HAL_GPIO_ReadPin>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d121      	bne.n	8007268 <mainLoop+0x84>
 8007224:	2108      	movs	r1, #8
 8007226:	487d      	ldr	r0, [pc, #500]	@ (800741c <mainLoop+0x238>)
 8007228:	f003 ff90 	bl	800b14c <HAL_GPIO_ReadPin>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d11a      	bne.n	8007268 <mainLoop+0x84>
 8007232:	2180      	movs	r1, #128	@ 0x80
 8007234:	487a      	ldr	r0, [pc, #488]	@ (8007420 <mainLoop+0x23c>)
 8007236:	f003 ff89 	bl	800b14c <HAL_GPIO_ReadPin>
 800723a:	4603      	mov	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d113      	bne.n	8007268 <mainLoop+0x84>
 8007240:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007244:	4876      	ldr	r0, [pc, #472]	@ (8007420 <mainLoop+0x23c>)
 8007246:	f003 ff81 	bl	800b14c <HAL_GPIO_ReadPin>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10b      	bne.n	8007268 <mainLoop+0x84>
 8007250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007254:	4872      	ldr	r0, [pc, #456]	@ (8007420 <mainLoop+0x23c>)
 8007256:	f003 ff79 	bl	800b14c <HAL_GPIO_ReadPin>
 800725a:	4603      	mov	r3, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	d103      	bne.n	8007268 <mainLoop+0x84>
			butonKontrol=0;
 8007260:	4b70      	ldr	r3, [pc, #448]	@ (8007424 <mainLoop+0x240>)
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e003      	b.n	8007270 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8007268:	4b6f      	ldr	r3, [pc, #444]	@ (8007428 <mainLoop+0x244>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6f      	ldr	r2, [pc, #444]	@ (800742c <mainLoop+0x248>)
 800726e:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8007270:	f7fc fcf4 	bl	8003c5c <buttonCheck>
 8007274:	4603      	mov	r3, r0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d103      	bne.n	8007282 <mainLoop+0x9e>
			backLightTimer = millis;
 800727a:	4b6b      	ldr	r3, [pc, #428]	@ (8007428 <mainLoop+0x244>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a6b      	ldr	r2, [pc, #428]	@ (800742c <mainLoop+0x248>)
 8007280:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007282:	4b6b      	ldr	r3, [pc, #428]	@ (8007430 <mainLoop+0x24c>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <mainLoop+0xb2>
			hafizaYaz = 0;
 800728a:	4b69      	ldr	r3, [pc, #420]	@ (8007430 <mainLoop+0x24c>)
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8007290:	2001      	movs	r0, #1
 8007292:	f7f9 fa07 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007296:	4b67      	ldr	r3, [pc, #412]	@ (8007434 <mainLoop+0x250>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f083 0301 	eor.w	r3, r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d043      	beq.n	800732c <mainLoop+0x148>
 80072a4:	4864      	ldr	r0, [pc, #400]	@ (8007438 <mainLoop+0x254>)
 80072a6:	f004 fd6d 	bl	800bd84 <HAL_I2C_GetState>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d13d      	bne.n	800732c <mainLoop+0x148>
		  if(ilkOkuma==0) {
 80072b0:	4b62      	ldr	r3, [pc, #392]	@ (800743c <mainLoop+0x258>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f083 0301 	eor.w	r3, r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d028      	beq.n	8007310 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 80072be:	4a60      	ldr	r2, [pc, #384]	@ (8007440 <mainLoop+0x25c>)
 80072c0:	2101      	movs	r1, #1
 80072c2:	2001      	movs	r0, #1
 80072c4:	f002 fc50 	bl	8009b68 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80072c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <mainLoop+0x260>)
 80072ca:	2101      	movs	r1, #1
 80072cc:	2002      	movs	r0, #2
 80072ce:	f002 fc4b 	bl	8009b68 <lcd_print>
			  HAL_Delay(1000);
 80072d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80072d6:	f003 f969 	bl	800a5ac <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80072da:	bf00      	nop
 80072dc:	4856      	ldr	r0, [pc, #344]	@ (8007438 <mainLoop+0x254>)
 80072de:	f004 fd5e 	bl	800bd9e <HAL_I2C_GetError>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d0f9      	beq.n	80072dc <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80072e8:	e003      	b.n	80072f2 <mainLoop+0x10e>
				  HAL_Delay(1000);
 80072ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80072ee:	f003 f95d 	bl	800a5ac <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80072f2:	4851      	ldr	r0, [pc, #324]	@ (8007438 <mainLoop+0x254>)
 80072f4:	f004 fd46 	bl	800bd84 <HAL_I2C_GetState>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d1f5      	bne.n	80072ea <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80072fe:	4a52      	ldr	r2, [pc, #328]	@ (8007448 <mainLoop+0x264>)
 8007300:	2101      	movs	r1, #1
 8007302:	2002      	movs	r0, #2
 8007304:	f002 fc30 	bl	8009b68 <lcd_print>

			  ilkOkuma=1;
 8007308:	4b4c      	ldr	r3, [pc, #304]	@ (800743c <mainLoop+0x258>)
 800730a:	2201      	movs	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e006      	b.n	800731e <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007310:	4a4e      	ldr	r2, [pc, #312]	@ (800744c <mainLoop+0x268>)
 8007312:	2101      	movs	r1, #1
 8007314:	2002      	movs	r0, #2
 8007316:	f002 fc27 	bl	8009b68 <lcd_print>
			  lcd_clear();
 800731a:	f002 fc51 	bl	8009bc0 <lcd_clear>
		  }

		  lcd_clear();
 800731e:	f002 fc4f 	bl	8009bc0 <lcd_clear>

		  eepromKontrol();
 8007322:	f7f8 ff87 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8007326:	4b43      	ldr	r3, [pc, #268]	@ (8007434 <mainLoop+0x250>)
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800732c:	4b48      	ldr	r3, [pc, #288]	@ (8007450 <mainLoop+0x26c>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11c      	bne.n	800736e <mainLoop+0x18a>
 8007334:	4b47      	ldr	r3, [pc, #284]	@ (8007454 <mainLoop+0x270>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f083 0301 	eor.w	r3, r3, #1
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d015      	beq.n	800736e <mainLoop+0x18a>
 8007342:	4b45      	ldr	r3, [pc, #276]	@ (8007458 <mainLoop+0x274>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d111      	bne.n	800736e <mainLoop+0x18a>
			lcd_clear();
 800734a:	f002 fc39 	bl	8009bc0 <lcd_clear>
			HAL_Delay(10);
 800734e:	200a      	movs	r0, #10
 8007350:	f003 f92c 	bl	800a5ac <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007354:	4a41      	ldr	r2, [pc, #260]	@ (800745c <mainLoop+0x278>)
 8007356:	2101      	movs	r1, #1
 8007358:	2001      	movs	r0, #1
 800735a:	f002 fc05 	bl	8009b68 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 800735e:	4a40      	ldr	r2, [pc, #256]	@ (8007460 <mainLoop+0x27c>)
 8007360:	2101      	movs	r1, #1
 8007362:	2002      	movs	r0, #2
 8007364:	f002 fc00 	bl	8009b68 <lcd_print>
			mesajYazildi=1;
 8007368:	4b3a      	ldr	r3, [pc, #232]	@ (8007454 <mainLoop+0x270>)
 800736a:	2201      	movs	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800736e:	4b38      	ldr	r3, [pc, #224]	@ (8007450 <mainLoop+0x26c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d112      	bne.n	800739c <mainLoop+0x1b8>
 8007376:	2102      	movs	r1, #2
 8007378:	4828      	ldr	r0, [pc, #160]	@ (800741c <mainLoop+0x238>)
 800737a:	f003 fee7 	bl	800b14c <HAL_GPIO_ReadPin>
 800737e:	4603      	mov	r3, r0
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10b      	bne.n	800739c <mainLoop+0x1b8>
 8007384:	2104      	movs	r1, #4
 8007386:	4825      	ldr	r0, [pc, #148]	@ (800741c <mainLoop+0x238>)
 8007388:	f003 fee0 	bl	800b14c <HAL_GPIO_ReadPin>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d104      	bne.n	800739c <mainLoop+0x1b8>
			menuGiris=1;
 8007392:	4b2f      	ldr	r3, [pc, #188]	@ (8007450 <mainLoop+0x26c>)
 8007394:	2201      	movs	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007398:	f002 fc12 	bl	8009bc0 <lcd_clear>
		}

		if(menuGiris==1) {
 800739c:	4b2c      	ldr	r3, [pc, #176]	@ (8007450 <mainLoop+0x26c>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <mainLoop+0x1c4>
			menu();
 80073a4:	f7f9 fe80 	bl	80010a8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80073a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073ac:	481c      	ldr	r0, [pc, #112]	@ (8007420 <mainLoop+0x23c>)
 80073ae:	f003 fefc 	bl	800b1aa <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80073b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073b6:	482b      	ldr	r0, [pc, #172]	@ (8007464 <mainLoop+0x280>)
 80073b8:	f003 fec8 	bl	800b14c <HAL_GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <mainLoop+0x1f4>
 80073c2:	4b29      	ldr	r3, [pc, #164]	@ (8007468 <mainLoop+0x284>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f083 0301 	eor.w	r3, r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <mainLoop+0x1f4>
			stopVar=1;
 80073d0:	4b26      	ldr	r3, [pc, #152]	@ (800746c <mainLoop+0x288>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e002      	b.n	80073de <mainLoop+0x1fa>
		} else {
			stopVar=0;
 80073d8:	4b24      	ldr	r3, [pc, #144]	@ (800746c <mainLoop+0x288>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80073de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073e2:	4820      	ldr	r0, [pc, #128]	@ (8007464 <mainLoop+0x280>)
 80073e4:	f003 feb2 	bl	800b14c <HAL_GPIO_ReadPin>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <mainLoop+0x21a>
 80073ee:	4b20      	ldr	r3, [pc, #128]	@ (8007470 <mainLoop+0x28c>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <mainLoop+0x21a>
			EmnStopVar=1;
 80073f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007474 <mainLoop+0x290>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
 80073fc:	e002      	b.n	8007404 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80073fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007474 <mainLoop+0x290>)
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007404:	f7fc fc5e 	bl	8003cc4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007408:	f7fc fc90 	bl	8003d2c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 800740c:	f7fc fcd4 	bl	8003db8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007410:	f7fc fd24 	bl	8003e5c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007414:	f7fe f8ec 	bl	80055f0 <checkDemoModCalisma>
		checkLCDBacklight();
 8007418:	e6e6      	b.n	80071e8 <mainLoop+0x4>
 800741a:	bf00      	nop
 800741c:	40010800 	.word	0x40010800
 8007420:	40011000 	.word	0x40011000
 8007424:	2000109b 	.word	0x2000109b
 8007428:	20001044 	.word	0x20001044
 800742c:	20001060 	.word	0x20001060
 8007430:	20001098 	.word	0x20001098
 8007434:	20001099 	.word	0x20001099
 8007438:	200017f0 	.word	0x200017f0
 800743c:	2000109a 	.word	0x2000109a
 8007440:	20000178 	.word	0x20000178
 8007444:	20001728 	.word	0x20001728
 8007448:	2000173c 	.word	0x2000173c
 800744c:	20001750 	.word	0x20001750
 8007450:	20001089 	.word	0x20001089
 8007454:	200010a0 	.word	0x200010a0
 8007458:	2000108a 	.word	0x2000108a
 800745c:	200000c4 	.word	0x200000c4
 8007460:	200000d8 	.word	0x200000d8
 8007464:	40010c00 	.word	0x40010c00
 8007468:	200010c0 	.word	0x200010c0
 800746c:	200010bd 	.word	0x200010bd
 8007470:	200010cf 	.word	0x200010cf
 8007474:	200010d0 	.word	0x200010d0

08007478 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007478:	b5b0      	push	{r4, r5, r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 853d 	bne.w	8007f04 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800748a:	4ac7      	ldr	r2, [pc, #796]	@ (80077a8 <loadMenuTexts+0x330>)
 800748c:	4bc7      	ldr	r3, [pc, #796]	@ (80077ac <loadMenuTexts+0x334>)
 800748e:	4614      	mov	r4, r2
 8007490:	461d      	mov	r5, r3
 8007492:	6828      	ldr	r0, [r5, #0]
 8007494:	6869      	ldr	r1, [r5, #4]
 8007496:	68aa      	ldr	r2, [r5, #8]
 8007498:	68eb      	ldr	r3, [r5, #12]
 800749a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749c:	7c2b      	ldrb	r3, [r5, #16]
 800749e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 80074a0:	4ac3      	ldr	r2, [pc, #780]	@ (80077b0 <loadMenuTexts+0x338>)
 80074a2:	4bc4      	ldr	r3, [pc, #784]	@ (80077b4 <loadMenuTexts+0x33c>)
 80074a4:	4614      	mov	r4, r2
 80074a6:	461d      	mov	r5, r3
 80074a8:	6828      	ldr	r0, [r5, #0]
 80074aa:	6869      	ldr	r1, [r5, #4]
 80074ac:	68aa      	ldr	r2, [r5, #8]
 80074ae:	68eb      	ldr	r3, [r5, #12]
 80074b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b2:	7c2b      	ldrb	r3, [r5, #16]
 80074b4:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 80074b6:	4ac0      	ldr	r2, [pc, #768]	@ (80077b8 <loadMenuTexts+0x340>)
 80074b8:	4bc0      	ldr	r3, [pc, #768]	@ (80077bc <loadMenuTexts+0x344>)
 80074ba:	4614      	mov	r4, r2
 80074bc:	461d      	mov	r5, r3
 80074be:	6828      	ldr	r0, [r5, #0]
 80074c0:	6869      	ldr	r1, [r5, #4]
 80074c2:	68aa      	ldr	r2, [r5, #8]
 80074c4:	68eb      	ldr	r3, [r5, #12]
 80074c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c8:	7c2b      	ldrb	r3, [r5, #16]
 80074ca:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80074cc:	4abc      	ldr	r2, [pc, #752]	@ (80077c0 <loadMenuTexts+0x348>)
 80074ce:	4bbd      	ldr	r3, [pc, #756]	@ (80077c4 <loadMenuTexts+0x34c>)
 80074d0:	4614      	mov	r4, r2
 80074d2:	461d      	mov	r5, r3
 80074d4:	6828      	ldr	r0, [r5, #0]
 80074d6:	6869      	ldr	r1, [r5, #4]
 80074d8:	68aa      	ldr	r2, [r5, #8]
 80074da:	68eb      	ldr	r3, [r5, #12]
 80074dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074de:	7c2b      	ldrb	r3, [r5, #16]
 80074e0:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80074e2:	4ab9      	ldr	r2, [pc, #740]	@ (80077c8 <loadMenuTexts+0x350>)
 80074e4:	4bb9      	ldr	r3, [pc, #740]	@ (80077cc <loadMenuTexts+0x354>)
 80074e6:	4614      	mov	r4, r2
 80074e8:	461d      	mov	r5, r3
 80074ea:	6828      	ldr	r0, [r5, #0]
 80074ec:	6869      	ldr	r1, [r5, #4]
 80074ee:	68aa      	ldr	r2, [r5, #8]
 80074f0:	68eb      	ldr	r3, [r5, #12]
 80074f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f4:	7c2b      	ldrb	r3, [r5, #16]
 80074f6:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80074f8:	4ab5      	ldr	r2, [pc, #724]	@ (80077d0 <loadMenuTexts+0x358>)
 80074fa:	4bb6      	ldr	r3, [pc, #728]	@ (80077d4 <loadMenuTexts+0x35c>)
 80074fc:	4614      	mov	r4, r2
 80074fe:	461d      	mov	r5, r3
 8007500:	6828      	ldr	r0, [r5, #0]
 8007502:	6869      	ldr	r1, [r5, #4]
 8007504:	68aa      	ldr	r2, [r5, #8]
 8007506:	68eb      	ldr	r3, [r5, #12]
 8007508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750a:	7c2b      	ldrb	r3, [r5, #16]
 800750c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800750e:	4ab2      	ldr	r2, [pc, #712]	@ (80077d8 <loadMenuTexts+0x360>)
 8007510:	4bb2      	ldr	r3, [pc, #712]	@ (80077dc <loadMenuTexts+0x364>)
 8007512:	4614      	mov	r4, r2
 8007514:	461d      	mov	r5, r3
 8007516:	6828      	ldr	r0, [r5, #0]
 8007518:	6869      	ldr	r1, [r5, #4]
 800751a:	68aa      	ldr	r2, [r5, #8]
 800751c:	68eb      	ldr	r3, [r5, #12]
 800751e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007520:	7c2b      	ldrb	r3, [r5, #16]
 8007522:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007524:	4aae      	ldr	r2, [pc, #696]	@ (80077e0 <loadMenuTexts+0x368>)
 8007526:	4baf      	ldr	r3, [pc, #700]	@ (80077e4 <loadMenuTexts+0x36c>)
 8007528:	4614      	mov	r4, r2
 800752a:	461d      	mov	r5, r3
 800752c:	6828      	ldr	r0, [r5, #0]
 800752e:	6869      	ldr	r1, [r5, #4]
 8007530:	68aa      	ldr	r2, [r5, #8]
 8007532:	68eb      	ldr	r3, [r5, #12]
 8007534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007536:	7c2b      	ldrb	r3, [r5, #16]
 8007538:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 800753a:	4aab      	ldr	r2, [pc, #684]	@ (80077e8 <loadMenuTexts+0x370>)
 800753c:	4bab      	ldr	r3, [pc, #684]	@ (80077ec <loadMenuTexts+0x374>)
 800753e:	4614      	mov	r4, r2
 8007540:	461d      	mov	r5, r3
 8007542:	6828      	ldr	r0, [r5, #0]
 8007544:	6869      	ldr	r1, [r5, #4]
 8007546:	68aa      	ldr	r2, [r5, #8]
 8007548:	68eb      	ldr	r3, [r5, #12]
 800754a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754c:	7c2b      	ldrb	r3, [r5, #16]
 800754e:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007550:	4aa7      	ldr	r2, [pc, #668]	@ (80077f0 <loadMenuTexts+0x378>)
 8007552:	4ba8      	ldr	r3, [pc, #672]	@ (80077f4 <loadMenuTexts+0x37c>)
 8007554:	4614      	mov	r4, r2
 8007556:	461d      	mov	r5, r3
 8007558:	6828      	ldr	r0, [r5, #0]
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	68aa      	ldr	r2, [r5, #8]
 800755e:	68eb      	ldr	r3, [r5, #12]
 8007560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007562:	7c2b      	ldrb	r3, [r5, #16]
 8007564:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007566:	4aa4      	ldr	r2, [pc, #656]	@ (80077f8 <loadMenuTexts+0x380>)
 8007568:	4ba4      	ldr	r3, [pc, #656]	@ (80077fc <loadMenuTexts+0x384>)
 800756a:	4614      	mov	r4, r2
 800756c:	461d      	mov	r5, r3
 800756e:	6828      	ldr	r0, [r5, #0]
 8007570:	6869      	ldr	r1, [r5, #4]
 8007572:	68aa      	ldr	r2, [r5, #8]
 8007574:	68eb      	ldr	r3, [r5, #12]
 8007576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007578:	7c2b      	ldrb	r3, [r5, #16]
 800757a:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 800757c:	4aa0      	ldr	r2, [pc, #640]	@ (8007800 <loadMenuTexts+0x388>)
 800757e:	4ba1      	ldr	r3, [pc, #644]	@ (8007804 <loadMenuTexts+0x38c>)
 8007580:	4614      	mov	r4, r2
 8007582:	461d      	mov	r5, r3
 8007584:	6828      	ldr	r0, [r5, #0]
 8007586:	6869      	ldr	r1, [r5, #4]
 8007588:	68aa      	ldr	r2, [r5, #8]
 800758a:	68eb      	ldr	r3, [r5, #12]
 800758c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758e:	7c2b      	ldrb	r3, [r5, #16]
 8007590:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8007592:	4a9d      	ldr	r2, [pc, #628]	@ (8007808 <loadMenuTexts+0x390>)
 8007594:	4b9d      	ldr	r3, [pc, #628]	@ (800780c <loadMenuTexts+0x394>)
 8007596:	4614      	mov	r4, r2
 8007598:	461d      	mov	r5, r3
 800759a:	6828      	ldr	r0, [r5, #0]
 800759c:	6869      	ldr	r1, [r5, #4]
 800759e:	68aa      	ldr	r2, [r5, #8]
 80075a0:	68eb      	ldr	r3, [r5, #12]
 80075a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a4:	7c2b      	ldrb	r3, [r5, #16]
 80075a6:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80075a8:	4a99      	ldr	r2, [pc, #612]	@ (8007810 <loadMenuTexts+0x398>)
 80075aa:	4b9a      	ldr	r3, [pc, #616]	@ (8007814 <loadMenuTexts+0x39c>)
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	6828      	ldr	r0, [r5, #0]
 80075b2:	6869      	ldr	r1, [r5, #4]
 80075b4:	68aa      	ldr	r2, [r5, #8]
 80075b6:	68eb      	ldr	r3, [r5, #12]
 80075b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ba:	7c2b      	ldrb	r3, [r5, #16]
 80075bc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80075be:	4a96      	ldr	r2, [pc, #600]	@ (8007818 <loadMenuTexts+0x3a0>)
 80075c0:	4b96      	ldr	r3, [pc, #600]	@ (800781c <loadMenuTexts+0x3a4>)
 80075c2:	4614      	mov	r4, r2
 80075c4:	461d      	mov	r5, r3
 80075c6:	6828      	ldr	r0, [r5, #0]
 80075c8:	6869      	ldr	r1, [r5, #4]
 80075ca:	68aa      	ldr	r2, [r5, #8]
 80075cc:	68eb      	ldr	r3, [r5, #12]
 80075ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d0:	7c2b      	ldrb	r3, [r5, #16]
 80075d2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80075d4:	4a92      	ldr	r2, [pc, #584]	@ (8007820 <loadMenuTexts+0x3a8>)
 80075d6:	4b93      	ldr	r3, [pc, #588]	@ (8007824 <loadMenuTexts+0x3ac>)
 80075d8:	4614      	mov	r4, r2
 80075da:	461d      	mov	r5, r3
 80075dc:	6828      	ldr	r0, [r5, #0]
 80075de:	6869      	ldr	r1, [r5, #4]
 80075e0:	68aa      	ldr	r2, [r5, #8]
 80075e2:	68eb      	ldr	r3, [r5, #12]
 80075e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e6:	7c2b      	ldrb	r3, [r5, #16]
 80075e8:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80075ea:	4a8f      	ldr	r2, [pc, #572]	@ (8007828 <loadMenuTexts+0x3b0>)
 80075ec:	4b8f      	ldr	r3, [pc, #572]	@ (800782c <loadMenuTexts+0x3b4>)
 80075ee:	4614      	mov	r4, r2
 80075f0:	461d      	mov	r5, r3
 80075f2:	6828      	ldr	r0, [r5, #0]
 80075f4:	6869      	ldr	r1, [r5, #4]
 80075f6:	68aa      	ldr	r2, [r5, #8]
 80075f8:	68eb      	ldr	r3, [r5, #12]
 80075fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075fc:	7c2b      	ldrb	r3, [r5, #16]
 80075fe:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8007600:	4a8b      	ldr	r2, [pc, #556]	@ (8007830 <loadMenuTexts+0x3b8>)
 8007602:	4b8c      	ldr	r3, [pc, #560]	@ (8007834 <loadMenuTexts+0x3bc>)
 8007604:	4614      	mov	r4, r2
 8007606:	461d      	mov	r5, r3
 8007608:	6828      	ldr	r0, [r5, #0]
 800760a:	6869      	ldr	r1, [r5, #4]
 800760c:	68aa      	ldr	r2, [r5, #8]
 800760e:	68eb      	ldr	r3, [r5, #12]
 8007610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007612:	7c2b      	ldrb	r3, [r5, #16]
 8007614:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8007616:	4a88      	ldr	r2, [pc, #544]	@ (8007838 <loadMenuTexts+0x3c0>)
 8007618:	4b88      	ldr	r3, [pc, #544]	@ (800783c <loadMenuTexts+0x3c4>)
 800761a:	4614      	mov	r4, r2
 800761c:	461d      	mov	r5, r3
 800761e:	6828      	ldr	r0, [r5, #0]
 8007620:	6869      	ldr	r1, [r5, #4]
 8007622:	68aa      	ldr	r2, [r5, #8]
 8007624:	68eb      	ldr	r3, [r5, #12]
 8007626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007628:	7c2b      	ldrb	r3, [r5, #16]
 800762a:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 800762c:	4a84      	ldr	r2, [pc, #528]	@ (8007840 <loadMenuTexts+0x3c8>)
 800762e:	4b85      	ldr	r3, [pc, #532]	@ (8007844 <loadMenuTexts+0x3cc>)
 8007630:	4614      	mov	r4, r2
 8007632:	461d      	mov	r5, r3
 8007634:	6828      	ldr	r0, [r5, #0]
 8007636:	6869      	ldr	r1, [r5, #4]
 8007638:	68aa      	ldr	r2, [r5, #8]
 800763a:	68eb      	ldr	r3, [r5, #12]
 800763c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800763e:	7c2b      	ldrb	r3, [r5, #16]
 8007640:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8007642:	4a81      	ldr	r2, [pc, #516]	@ (8007848 <loadMenuTexts+0x3d0>)
 8007644:	4b81      	ldr	r3, [pc, #516]	@ (800784c <loadMenuTexts+0x3d4>)
 8007646:	4614      	mov	r4, r2
 8007648:	461d      	mov	r5, r3
 800764a:	6828      	ldr	r0, [r5, #0]
 800764c:	6869      	ldr	r1, [r5, #4]
 800764e:	68aa      	ldr	r2, [r5, #8]
 8007650:	68eb      	ldr	r3, [r5, #12]
 8007652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007654:	7c2b      	ldrb	r3, [r5, #16]
 8007656:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8007658:	4a7d      	ldr	r2, [pc, #500]	@ (8007850 <loadMenuTexts+0x3d8>)
 800765a:	4b7e      	ldr	r3, [pc, #504]	@ (8007854 <loadMenuTexts+0x3dc>)
 800765c:	4614      	mov	r4, r2
 800765e:	461d      	mov	r5, r3
 8007660:	6828      	ldr	r0, [r5, #0]
 8007662:	6869      	ldr	r1, [r5, #4]
 8007664:	68aa      	ldr	r2, [r5, #8]
 8007666:	68eb      	ldr	r3, [r5, #12]
 8007668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800766a:	7c2b      	ldrb	r3, [r5, #16]
 800766c:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800766e:	4a7a      	ldr	r2, [pc, #488]	@ (8007858 <loadMenuTexts+0x3e0>)
 8007670:	4b7a      	ldr	r3, [pc, #488]	@ (800785c <loadMenuTexts+0x3e4>)
 8007672:	4614      	mov	r4, r2
 8007674:	461d      	mov	r5, r3
 8007676:	6828      	ldr	r0, [r5, #0]
 8007678:	6869      	ldr	r1, [r5, #4]
 800767a:	68aa      	ldr	r2, [r5, #8]
 800767c:	68eb      	ldr	r3, [r5, #12]
 800767e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007680:	7c2b      	ldrb	r3, [r5, #16]
 8007682:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8007684:	4a76      	ldr	r2, [pc, #472]	@ (8007860 <loadMenuTexts+0x3e8>)
 8007686:	4b77      	ldr	r3, [pc, #476]	@ (8007864 <loadMenuTexts+0x3ec>)
 8007688:	4614      	mov	r4, r2
 800768a:	461d      	mov	r5, r3
 800768c:	6828      	ldr	r0, [r5, #0]
 800768e:	6869      	ldr	r1, [r5, #4]
 8007690:	68aa      	ldr	r2, [r5, #8]
 8007692:	68eb      	ldr	r3, [r5, #12]
 8007694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007696:	7c2b      	ldrb	r3, [r5, #16]
 8007698:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800769a:	4a73      	ldr	r2, [pc, #460]	@ (8007868 <loadMenuTexts+0x3f0>)
 800769c:	4b73      	ldr	r3, [pc, #460]	@ (800786c <loadMenuTexts+0x3f4>)
 800769e:	4614      	mov	r4, r2
 80076a0:	461d      	mov	r5, r3
 80076a2:	6828      	ldr	r0, [r5, #0]
 80076a4:	6869      	ldr	r1, [r5, #4]
 80076a6:	68aa      	ldr	r2, [r5, #8]
 80076a8:	68eb      	ldr	r3, [r5, #12]
 80076aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ac:	7c2b      	ldrb	r3, [r5, #16]
 80076ae:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80076b0:	4a6f      	ldr	r2, [pc, #444]	@ (8007870 <loadMenuTexts+0x3f8>)
 80076b2:	4b70      	ldr	r3, [pc, #448]	@ (8007874 <loadMenuTexts+0x3fc>)
 80076b4:	4614      	mov	r4, r2
 80076b6:	461d      	mov	r5, r3
 80076b8:	6828      	ldr	r0, [r5, #0]
 80076ba:	6869      	ldr	r1, [r5, #4]
 80076bc:	68aa      	ldr	r2, [r5, #8]
 80076be:	68eb      	ldr	r3, [r5, #12]
 80076c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c2:	7c2b      	ldrb	r3, [r5, #16]
 80076c4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80076c6:	4a6c      	ldr	r2, [pc, #432]	@ (8007878 <loadMenuTexts+0x400>)
 80076c8:	4b6c      	ldr	r3, [pc, #432]	@ (800787c <loadMenuTexts+0x404>)
 80076ca:	4614      	mov	r4, r2
 80076cc:	461d      	mov	r5, r3
 80076ce:	6828      	ldr	r0, [r5, #0]
 80076d0:	6869      	ldr	r1, [r5, #4]
 80076d2:	68aa      	ldr	r2, [r5, #8]
 80076d4:	68eb      	ldr	r3, [r5, #12]
 80076d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076d8:	7c2b      	ldrb	r3, [r5, #16]
 80076da:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80076dc:	4a68      	ldr	r2, [pc, #416]	@ (8007880 <loadMenuTexts+0x408>)
 80076de:	4b69      	ldr	r3, [pc, #420]	@ (8007884 <loadMenuTexts+0x40c>)
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	6828      	ldr	r0, [r5, #0]
 80076e6:	6869      	ldr	r1, [r5, #4]
 80076e8:	68aa      	ldr	r2, [r5, #8]
 80076ea:	68eb      	ldr	r3, [r5, #12]
 80076ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ee:	7c2b      	ldrb	r3, [r5, #16]
 80076f0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80076f2:	4a65      	ldr	r2, [pc, #404]	@ (8007888 <loadMenuTexts+0x410>)
 80076f4:	4b65      	ldr	r3, [pc, #404]	@ (800788c <loadMenuTexts+0x414>)
 80076f6:	4614      	mov	r4, r2
 80076f8:	461d      	mov	r5, r3
 80076fa:	6828      	ldr	r0, [r5, #0]
 80076fc:	6869      	ldr	r1, [r5, #4]
 80076fe:	68aa      	ldr	r2, [r5, #8]
 8007700:	68eb      	ldr	r3, [r5, #12]
 8007702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007704:	7c2b      	ldrb	r3, [r5, #16]
 8007706:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8007708:	4a61      	ldr	r2, [pc, #388]	@ (8007890 <loadMenuTexts+0x418>)
 800770a:	4b62      	ldr	r3, [pc, #392]	@ (8007894 <loadMenuTexts+0x41c>)
 800770c:	4614      	mov	r4, r2
 800770e:	461d      	mov	r5, r3
 8007710:	6828      	ldr	r0, [r5, #0]
 8007712:	6869      	ldr	r1, [r5, #4]
 8007714:	68aa      	ldr	r2, [r5, #8]
 8007716:	68eb      	ldr	r3, [r5, #12]
 8007718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771a:	7c2b      	ldrb	r3, [r5, #16]
 800771c:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800771e:	4a5e      	ldr	r2, [pc, #376]	@ (8007898 <loadMenuTexts+0x420>)
 8007720:	4b5e      	ldr	r3, [pc, #376]	@ (800789c <loadMenuTexts+0x424>)
 8007722:	4614      	mov	r4, r2
 8007724:	461d      	mov	r5, r3
 8007726:	6828      	ldr	r0, [r5, #0]
 8007728:	6869      	ldr	r1, [r5, #4]
 800772a:	68aa      	ldr	r2, [r5, #8]
 800772c:	68eb      	ldr	r3, [r5, #12]
 800772e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007730:	7c2b      	ldrb	r3, [r5, #16]
 8007732:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007734:	4a5a      	ldr	r2, [pc, #360]	@ (80078a0 <loadMenuTexts+0x428>)
 8007736:	4b5b      	ldr	r3, [pc, #364]	@ (80078a4 <loadMenuTexts+0x42c>)
 8007738:	4614      	mov	r4, r2
 800773a:	461d      	mov	r5, r3
 800773c:	6828      	ldr	r0, [r5, #0]
 800773e:	6869      	ldr	r1, [r5, #4]
 8007740:	68aa      	ldr	r2, [r5, #8]
 8007742:	68eb      	ldr	r3, [r5, #12]
 8007744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007746:	7c2b      	ldrb	r3, [r5, #16]
 8007748:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800774a:	4a57      	ldr	r2, [pc, #348]	@ (80078a8 <loadMenuTexts+0x430>)
 800774c:	4b57      	ldr	r3, [pc, #348]	@ (80078ac <loadMenuTexts+0x434>)
 800774e:	4614      	mov	r4, r2
 8007750:	461d      	mov	r5, r3
 8007752:	6828      	ldr	r0, [r5, #0]
 8007754:	6869      	ldr	r1, [r5, #4]
 8007756:	68aa      	ldr	r2, [r5, #8]
 8007758:	68eb      	ldr	r3, [r5, #12]
 800775a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800775c:	7c2b      	ldrb	r3, [r5, #16]
 800775e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8007760:	4a53      	ldr	r2, [pc, #332]	@ (80078b0 <loadMenuTexts+0x438>)
 8007762:	4b54      	ldr	r3, [pc, #336]	@ (80078b4 <loadMenuTexts+0x43c>)
 8007764:	4614      	mov	r4, r2
 8007766:	461d      	mov	r5, r3
 8007768:	6828      	ldr	r0, [r5, #0]
 800776a:	6869      	ldr	r1, [r5, #4]
 800776c:	68aa      	ldr	r2, [r5, #8]
 800776e:	68eb      	ldr	r3, [r5, #12]
 8007770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007772:	7c2b      	ldrb	r3, [r5, #16]
 8007774:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8007776:	4a50      	ldr	r2, [pc, #320]	@ (80078b8 <loadMenuTexts+0x440>)
 8007778:	4b50      	ldr	r3, [pc, #320]	@ (80078bc <loadMenuTexts+0x444>)
 800777a:	4614      	mov	r4, r2
 800777c:	461d      	mov	r5, r3
 800777e:	6828      	ldr	r0, [r5, #0]
 8007780:	6869      	ldr	r1, [r5, #4]
 8007782:	68aa      	ldr	r2, [r5, #8]
 8007784:	68eb      	ldr	r3, [r5, #12]
 8007786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007788:	7c2b      	ldrb	r3, [r5, #16]
 800778a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800778c:	4a4c      	ldr	r2, [pc, #304]	@ (80078c0 <loadMenuTexts+0x448>)
 800778e:	4b4d      	ldr	r3, [pc, #308]	@ (80078c4 <loadMenuTexts+0x44c>)
 8007790:	4614      	mov	r4, r2
 8007792:	461d      	mov	r5, r3
 8007794:	6828      	ldr	r0, [r5, #0]
 8007796:	6869      	ldr	r1, [r5, #4]
 8007798:	68aa      	ldr	r2, [r5, #8]
 800779a:	68eb      	ldr	r3, [r5, #12]
 800779c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800779e:	7c2b      	ldrb	r3, [r5, #16]
 80077a0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80077a2:	4a49      	ldr	r2, [pc, #292]	@ (80078c8 <loadMenuTexts+0x450>)
 80077a4:	e092      	b.n	80078cc <loadMenuTexts+0x454>
 80077a6:	bf00      	nop
 80077a8:	200010d4 	.word	0x200010d4
 80077ac:	2000018c 	.word	0x2000018c
 80077b0:	200010e8 	.word	0x200010e8
 80077b4:	200001a0 	.word	0x200001a0
 80077b8:	200010fc 	.word	0x200010fc
 80077bc:	200001b4 	.word	0x200001b4
 80077c0:	20001110 	.word	0x20001110
 80077c4:	200001c8 	.word	0x200001c8
 80077c8:	20001124 	.word	0x20001124
 80077cc:	200001dc 	.word	0x200001dc
 80077d0:	20001138 	.word	0x20001138
 80077d4:	200001f0 	.word	0x200001f0
 80077d8:	2000114c 	.word	0x2000114c
 80077dc:	20000204 	.word	0x20000204
 80077e0:	20001160 	.word	0x20001160
 80077e4:	20000218 	.word	0x20000218
 80077e8:	20001174 	.word	0x20001174
 80077ec:	2000022c 	.word	0x2000022c
 80077f0:	20001188 	.word	0x20001188
 80077f4:	20000240 	.word	0x20000240
 80077f8:	2000119c 	.word	0x2000119c
 80077fc:	20000254 	.word	0x20000254
 8007800:	200011b0 	.word	0x200011b0
 8007804:	20000268 	.word	0x20000268
 8007808:	200011c4 	.word	0x200011c4
 800780c:	2000027c 	.word	0x2000027c
 8007810:	200011d8 	.word	0x200011d8
 8007814:	20000290 	.word	0x20000290
 8007818:	200011ec 	.word	0x200011ec
 800781c:	200002a4 	.word	0x200002a4
 8007820:	20001200 	.word	0x20001200
 8007824:	200002b8 	.word	0x200002b8
 8007828:	20001214 	.word	0x20001214
 800782c:	200002cc 	.word	0x200002cc
 8007830:	20001228 	.word	0x20001228
 8007834:	200002e0 	.word	0x200002e0
 8007838:	2000123c 	.word	0x2000123c
 800783c:	200002f4 	.word	0x200002f4
 8007840:	20001250 	.word	0x20001250
 8007844:	20000308 	.word	0x20000308
 8007848:	20001264 	.word	0x20001264
 800784c:	2000031c 	.word	0x2000031c
 8007850:	20001278 	.word	0x20001278
 8007854:	20000330 	.word	0x20000330
 8007858:	2000128c 	.word	0x2000128c
 800785c:	20000344 	.word	0x20000344
 8007860:	200012a0 	.word	0x200012a0
 8007864:	20000358 	.word	0x20000358
 8007868:	200012b4 	.word	0x200012b4
 800786c:	2000036c 	.word	0x2000036c
 8007870:	200012c8 	.word	0x200012c8
 8007874:	20000380 	.word	0x20000380
 8007878:	200012dc 	.word	0x200012dc
 800787c:	20000394 	.word	0x20000394
 8007880:	200012f0 	.word	0x200012f0
 8007884:	200003a8 	.word	0x200003a8
 8007888:	20001304 	.word	0x20001304
 800788c:	200003bc 	.word	0x200003bc
 8007890:	20001318 	.word	0x20001318
 8007894:	200003d0 	.word	0x200003d0
 8007898:	2000132c 	.word	0x2000132c
 800789c:	200003e4 	.word	0x200003e4
 80078a0:	20001340 	.word	0x20001340
 80078a4:	200003f8 	.word	0x200003f8
 80078a8:	20001354 	.word	0x20001354
 80078ac:	2000040c 	.word	0x2000040c
 80078b0:	20001368 	.word	0x20001368
 80078b4:	20000420 	.word	0x20000420
 80078b8:	2000137c 	.word	0x2000137c
 80078bc:	20000434 	.word	0x20000434
 80078c0:	20001390 	.word	0x20001390
 80078c4:	20000448 	.word	0x20000448
 80078c8:	200013a4 	.word	0x200013a4
 80078cc:	4bc7      	ldr	r3, [pc, #796]	@ (8007bec <loadMenuTexts+0x774>)
 80078ce:	4614      	mov	r4, r2
 80078d0:	461d      	mov	r5, r3
 80078d2:	6828      	ldr	r0, [r5, #0]
 80078d4:	6869      	ldr	r1, [r5, #4]
 80078d6:	68aa      	ldr	r2, [r5, #8]
 80078d8:	68eb      	ldr	r3, [r5, #12]
 80078da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078dc:	7c2b      	ldrb	r3, [r5, #16]
 80078de:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80078e0:	4ac3      	ldr	r2, [pc, #780]	@ (8007bf0 <loadMenuTexts+0x778>)
 80078e2:	4bc4      	ldr	r3, [pc, #784]	@ (8007bf4 <loadMenuTexts+0x77c>)
 80078e4:	4614      	mov	r4, r2
 80078e6:	461d      	mov	r5, r3
 80078e8:	6828      	ldr	r0, [r5, #0]
 80078ea:	6869      	ldr	r1, [r5, #4]
 80078ec:	68aa      	ldr	r2, [r5, #8]
 80078ee:	68eb      	ldr	r3, [r5, #12]
 80078f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f2:	7c2b      	ldrb	r3, [r5, #16]
 80078f4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80078f6:	4ac0      	ldr	r2, [pc, #768]	@ (8007bf8 <loadMenuTexts+0x780>)
 80078f8:	4bc0      	ldr	r3, [pc, #768]	@ (8007bfc <loadMenuTexts+0x784>)
 80078fa:	4614      	mov	r4, r2
 80078fc:	461d      	mov	r5, r3
 80078fe:	6828      	ldr	r0, [r5, #0]
 8007900:	6869      	ldr	r1, [r5, #4]
 8007902:	68aa      	ldr	r2, [r5, #8]
 8007904:	68eb      	ldr	r3, [r5, #12]
 8007906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007908:	7c2b      	ldrb	r3, [r5, #16]
 800790a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800790c:	4abc      	ldr	r2, [pc, #752]	@ (8007c00 <loadMenuTexts+0x788>)
 800790e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c04 <loadMenuTexts+0x78c>)
 8007910:	4614      	mov	r4, r2
 8007912:	461d      	mov	r5, r3
 8007914:	6828      	ldr	r0, [r5, #0]
 8007916:	6869      	ldr	r1, [r5, #4]
 8007918:	68aa      	ldr	r2, [r5, #8]
 800791a:	68eb      	ldr	r3, [r5, #12]
 800791c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800791e:	7c2b      	ldrb	r3, [r5, #16]
 8007920:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8007922:	4ab9      	ldr	r2, [pc, #740]	@ (8007c08 <loadMenuTexts+0x790>)
 8007924:	4bb9      	ldr	r3, [pc, #740]	@ (8007c0c <loadMenuTexts+0x794>)
 8007926:	4614      	mov	r4, r2
 8007928:	461d      	mov	r5, r3
 800792a:	6828      	ldr	r0, [r5, #0]
 800792c:	6869      	ldr	r1, [r5, #4]
 800792e:	68aa      	ldr	r2, [r5, #8]
 8007930:	68eb      	ldr	r3, [r5, #12]
 8007932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007934:	7c2b      	ldrb	r3, [r5, #16]
 8007936:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007938:	4ab5      	ldr	r2, [pc, #724]	@ (8007c10 <loadMenuTexts+0x798>)
 800793a:	4bb6      	ldr	r3, [pc, #728]	@ (8007c14 <loadMenuTexts+0x79c>)
 800793c:	4614      	mov	r4, r2
 800793e:	461d      	mov	r5, r3
 8007940:	6828      	ldr	r0, [r5, #0]
 8007942:	6869      	ldr	r1, [r5, #4]
 8007944:	68aa      	ldr	r2, [r5, #8]
 8007946:	68eb      	ldr	r3, [r5, #12]
 8007948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794a:	7c2b      	ldrb	r3, [r5, #16]
 800794c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800794e:	4ab2      	ldr	r2, [pc, #712]	@ (8007c18 <loadMenuTexts+0x7a0>)
 8007950:	4bb2      	ldr	r3, [pc, #712]	@ (8007c1c <loadMenuTexts+0x7a4>)
 8007952:	4614      	mov	r4, r2
 8007954:	461d      	mov	r5, r3
 8007956:	6828      	ldr	r0, [r5, #0]
 8007958:	6869      	ldr	r1, [r5, #4]
 800795a:	68aa      	ldr	r2, [r5, #8]
 800795c:	68eb      	ldr	r3, [r5, #12]
 800795e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007960:	7c2b      	ldrb	r3, [r5, #16]
 8007962:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007964:	4aae      	ldr	r2, [pc, #696]	@ (8007c20 <loadMenuTexts+0x7a8>)
 8007966:	4baf      	ldr	r3, [pc, #700]	@ (8007c24 <loadMenuTexts+0x7ac>)
 8007968:	4614      	mov	r4, r2
 800796a:	461d      	mov	r5, r3
 800796c:	6828      	ldr	r0, [r5, #0]
 800796e:	6869      	ldr	r1, [r5, #4]
 8007970:	68aa      	ldr	r2, [r5, #8]
 8007972:	68eb      	ldr	r3, [r5, #12]
 8007974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007976:	7c2b      	ldrb	r3, [r5, #16]
 8007978:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800797a:	4aab      	ldr	r2, [pc, #684]	@ (8007c28 <loadMenuTexts+0x7b0>)
 800797c:	4bab      	ldr	r3, [pc, #684]	@ (8007c2c <loadMenuTexts+0x7b4>)
 800797e:	4614      	mov	r4, r2
 8007980:	461d      	mov	r5, r3
 8007982:	6828      	ldr	r0, [r5, #0]
 8007984:	6869      	ldr	r1, [r5, #4]
 8007986:	68aa      	ldr	r2, [r5, #8]
 8007988:	68eb      	ldr	r3, [r5, #12]
 800798a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798c:	7c2b      	ldrb	r3, [r5, #16]
 800798e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8007990:	4aa7      	ldr	r2, [pc, #668]	@ (8007c30 <loadMenuTexts+0x7b8>)
 8007992:	4ba8      	ldr	r3, [pc, #672]	@ (8007c34 <loadMenuTexts+0x7bc>)
 8007994:	4614      	mov	r4, r2
 8007996:	461d      	mov	r5, r3
 8007998:	6828      	ldr	r0, [r5, #0]
 800799a:	6869      	ldr	r1, [r5, #4]
 800799c:	68aa      	ldr	r2, [r5, #8]
 800799e:	68eb      	ldr	r3, [r5, #12]
 80079a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a2:	7c2b      	ldrb	r3, [r5, #16]
 80079a4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80079a6:	4aa4      	ldr	r2, [pc, #656]	@ (8007c38 <loadMenuTexts+0x7c0>)
 80079a8:	4ba4      	ldr	r3, [pc, #656]	@ (8007c3c <loadMenuTexts+0x7c4>)
 80079aa:	4614      	mov	r4, r2
 80079ac:	461d      	mov	r5, r3
 80079ae:	6828      	ldr	r0, [r5, #0]
 80079b0:	6869      	ldr	r1, [r5, #4]
 80079b2:	68aa      	ldr	r2, [r5, #8]
 80079b4:	68eb      	ldr	r3, [r5, #12]
 80079b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b8:	7c2b      	ldrb	r3, [r5, #16]
 80079ba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80079bc:	4aa0      	ldr	r2, [pc, #640]	@ (8007c40 <loadMenuTexts+0x7c8>)
 80079be:	4ba1      	ldr	r3, [pc, #644]	@ (8007c44 <loadMenuTexts+0x7cc>)
 80079c0:	4614      	mov	r4, r2
 80079c2:	461d      	mov	r5, r3
 80079c4:	6828      	ldr	r0, [r5, #0]
 80079c6:	6869      	ldr	r1, [r5, #4]
 80079c8:	68aa      	ldr	r2, [r5, #8]
 80079ca:	68eb      	ldr	r3, [r5, #12]
 80079cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ce:	7c2b      	ldrb	r3, [r5, #16]
 80079d0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80079d2:	4a9d      	ldr	r2, [pc, #628]	@ (8007c48 <loadMenuTexts+0x7d0>)
 80079d4:	4b9d      	ldr	r3, [pc, #628]	@ (8007c4c <loadMenuTexts+0x7d4>)
 80079d6:	4614      	mov	r4, r2
 80079d8:	461d      	mov	r5, r3
 80079da:	6828      	ldr	r0, [r5, #0]
 80079dc:	6869      	ldr	r1, [r5, #4]
 80079de:	68aa      	ldr	r2, [r5, #8]
 80079e0:	68eb      	ldr	r3, [r5, #12]
 80079e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e4:	7c2b      	ldrb	r3, [r5, #16]
 80079e6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80079e8:	4a99      	ldr	r2, [pc, #612]	@ (8007c50 <loadMenuTexts+0x7d8>)
 80079ea:	4b9a      	ldr	r3, [pc, #616]	@ (8007c54 <loadMenuTexts+0x7dc>)
 80079ec:	4614      	mov	r4, r2
 80079ee:	461d      	mov	r5, r3
 80079f0:	6828      	ldr	r0, [r5, #0]
 80079f2:	6869      	ldr	r1, [r5, #4]
 80079f4:	68aa      	ldr	r2, [r5, #8]
 80079f6:	68eb      	ldr	r3, [r5, #12]
 80079f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fa:	7c2b      	ldrb	r3, [r5, #16]
 80079fc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80079fe:	4a96      	ldr	r2, [pc, #600]	@ (8007c58 <loadMenuTexts+0x7e0>)
 8007a00:	4b96      	ldr	r3, [pc, #600]	@ (8007c5c <loadMenuTexts+0x7e4>)
 8007a02:	4614      	mov	r4, r2
 8007a04:	461d      	mov	r5, r3
 8007a06:	6828      	ldr	r0, [r5, #0]
 8007a08:	6869      	ldr	r1, [r5, #4]
 8007a0a:	68aa      	ldr	r2, [r5, #8]
 8007a0c:	68eb      	ldr	r3, [r5, #12]
 8007a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a10:	7c2b      	ldrb	r3, [r5, #16]
 8007a12:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007a14:	4a92      	ldr	r2, [pc, #584]	@ (8007c60 <loadMenuTexts+0x7e8>)
 8007a16:	4b93      	ldr	r3, [pc, #588]	@ (8007c64 <loadMenuTexts+0x7ec>)
 8007a18:	4614      	mov	r4, r2
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	6828      	ldr	r0, [r5, #0]
 8007a1e:	6869      	ldr	r1, [r5, #4]
 8007a20:	68aa      	ldr	r2, [r5, #8]
 8007a22:	68eb      	ldr	r3, [r5, #12]
 8007a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a26:	7c2b      	ldrb	r3, [r5, #16]
 8007a28:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007a2a:	4a8f      	ldr	r2, [pc, #572]	@ (8007c68 <loadMenuTexts+0x7f0>)
 8007a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c6c <loadMenuTexts+0x7f4>)
 8007a2e:	4614      	mov	r4, r2
 8007a30:	461d      	mov	r5, r3
 8007a32:	6828      	ldr	r0, [r5, #0]
 8007a34:	6869      	ldr	r1, [r5, #4]
 8007a36:	68aa      	ldr	r2, [r5, #8]
 8007a38:	68eb      	ldr	r3, [r5, #12]
 8007a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a3c:	7c2b      	ldrb	r3, [r5, #16]
 8007a3e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007a40:	4a8b      	ldr	r2, [pc, #556]	@ (8007c70 <loadMenuTexts+0x7f8>)
 8007a42:	4b8c      	ldr	r3, [pc, #560]	@ (8007c74 <loadMenuTexts+0x7fc>)
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	6828      	ldr	r0, [r5, #0]
 8007a4a:	6869      	ldr	r1, [r5, #4]
 8007a4c:	68aa      	ldr	r2, [r5, #8]
 8007a4e:	68eb      	ldr	r3, [r5, #12]
 8007a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a52:	7c2b      	ldrb	r3, [r5, #16]
 8007a54:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007a56:	4a88      	ldr	r2, [pc, #544]	@ (8007c78 <loadMenuTexts+0x800>)
 8007a58:	4b88      	ldr	r3, [pc, #544]	@ (8007c7c <loadMenuTexts+0x804>)
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	461d      	mov	r5, r3
 8007a5e:	6828      	ldr	r0, [r5, #0]
 8007a60:	6869      	ldr	r1, [r5, #4]
 8007a62:	68aa      	ldr	r2, [r5, #8]
 8007a64:	68eb      	ldr	r3, [r5, #12]
 8007a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a68:	7c2b      	ldrb	r3, [r5, #16]
 8007a6a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007a6c:	4a84      	ldr	r2, [pc, #528]	@ (8007c80 <loadMenuTexts+0x808>)
 8007a6e:	4b85      	ldr	r3, [pc, #532]	@ (8007c84 <loadMenuTexts+0x80c>)
 8007a70:	4614      	mov	r4, r2
 8007a72:	461d      	mov	r5, r3
 8007a74:	6828      	ldr	r0, [r5, #0]
 8007a76:	6869      	ldr	r1, [r5, #4]
 8007a78:	68aa      	ldr	r2, [r5, #8]
 8007a7a:	68eb      	ldr	r3, [r5, #12]
 8007a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a7e:	7c2b      	ldrb	r3, [r5, #16]
 8007a80:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8007a82:	4a81      	ldr	r2, [pc, #516]	@ (8007c88 <loadMenuTexts+0x810>)
 8007a84:	4b81      	ldr	r3, [pc, #516]	@ (8007c8c <loadMenuTexts+0x814>)
 8007a86:	4614      	mov	r4, r2
 8007a88:	461d      	mov	r5, r3
 8007a8a:	6828      	ldr	r0, [r5, #0]
 8007a8c:	6869      	ldr	r1, [r5, #4]
 8007a8e:	68aa      	ldr	r2, [r5, #8]
 8007a90:	68eb      	ldr	r3, [r5, #12]
 8007a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a94:	7c2b      	ldrb	r3, [r5, #16]
 8007a96:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8007a98:	4a7d      	ldr	r2, [pc, #500]	@ (8007c90 <loadMenuTexts+0x818>)
 8007a9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007c94 <loadMenuTexts+0x81c>)
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	6828      	ldr	r0, [r5, #0]
 8007aa2:	6869      	ldr	r1, [r5, #4]
 8007aa4:	68aa      	ldr	r2, [r5, #8]
 8007aa6:	68eb      	ldr	r3, [r5, #12]
 8007aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aaa:	7c2b      	ldrb	r3, [r5, #16]
 8007aac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8007aae:	4a7a      	ldr	r2, [pc, #488]	@ (8007c98 <loadMenuTexts+0x820>)
 8007ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8007c9c <loadMenuTexts+0x824>)
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	6828      	ldr	r0, [r5, #0]
 8007ab8:	6869      	ldr	r1, [r5, #4]
 8007aba:	68aa      	ldr	r2, [r5, #8]
 8007abc:	68eb      	ldr	r3, [r5, #12]
 8007abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac0:	7c2b      	ldrb	r3, [r5, #16]
 8007ac2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8007ac4:	4a76      	ldr	r2, [pc, #472]	@ (8007ca0 <loadMenuTexts+0x828>)
 8007ac6:	4b77      	ldr	r3, [pc, #476]	@ (8007ca4 <loadMenuTexts+0x82c>)
 8007ac8:	4614      	mov	r4, r2
 8007aca:	461d      	mov	r5, r3
 8007acc:	6828      	ldr	r0, [r5, #0]
 8007ace:	6869      	ldr	r1, [r5, #4]
 8007ad0:	68aa      	ldr	r2, [r5, #8]
 8007ad2:	68eb      	ldr	r3, [r5, #12]
 8007ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad6:	7c2b      	ldrb	r3, [r5, #16]
 8007ad8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8007ada:	4a73      	ldr	r2, [pc, #460]	@ (8007ca8 <loadMenuTexts+0x830>)
 8007adc:	4b73      	ldr	r3, [pc, #460]	@ (8007cac <loadMenuTexts+0x834>)
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461d      	mov	r5, r3
 8007ae2:	6828      	ldr	r0, [r5, #0]
 8007ae4:	6869      	ldr	r1, [r5, #4]
 8007ae6:	68aa      	ldr	r2, [r5, #8]
 8007ae8:	68eb      	ldr	r3, [r5, #12]
 8007aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aec:	7c2b      	ldrb	r3, [r5, #16]
 8007aee:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8007af0:	4a6f      	ldr	r2, [pc, #444]	@ (8007cb0 <loadMenuTexts+0x838>)
 8007af2:	4b70      	ldr	r3, [pc, #448]	@ (8007cb4 <loadMenuTexts+0x83c>)
 8007af4:	4614      	mov	r4, r2
 8007af6:	461d      	mov	r5, r3
 8007af8:	6828      	ldr	r0, [r5, #0]
 8007afa:	6869      	ldr	r1, [r5, #4]
 8007afc:	68aa      	ldr	r2, [r5, #8]
 8007afe:	68eb      	ldr	r3, [r5, #12]
 8007b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b02:	7c2b      	ldrb	r3, [r5, #16]
 8007b04:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8007b06:	4a6c      	ldr	r2, [pc, #432]	@ (8007cb8 <loadMenuTexts+0x840>)
 8007b08:	4b6c      	ldr	r3, [pc, #432]	@ (8007cbc <loadMenuTexts+0x844>)
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	6828      	ldr	r0, [r5, #0]
 8007b10:	6869      	ldr	r1, [r5, #4]
 8007b12:	68aa      	ldr	r2, [r5, #8]
 8007b14:	68eb      	ldr	r3, [r5, #12]
 8007b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b18:	7c2b      	ldrb	r3, [r5, #16]
 8007b1a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007b1c:	4a68      	ldr	r2, [pc, #416]	@ (8007cc0 <loadMenuTexts+0x848>)
 8007b1e:	4b69      	ldr	r3, [pc, #420]	@ (8007cc4 <loadMenuTexts+0x84c>)
 8007b20:	4614      	mov	r4, r2
 8007b22:	461d      	mov	r5, r3
 8007b24:	6828      	ldr	r0, [r5, #0]
 8007b26:	6869      	ldr	r1, [r5, #4]
 8007b28:	68aa      	ldr	r2, [r5, #8]
 8007b2a:	68eb      	ldr	r3, [r5, #12]
 8007b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b2e:	7c2b      	ldrb	r3, [r5, #16]
 8007b30:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8007b32:	4a65      	ldr	r2, [pc, #404]	@ (8007cc8 <loadMenuTexts+0x850>)
 8007b34:	4b65      	ldr	r3, [pc, #404]	@ (8007ccc <loadMenuTexts+0x854>)
 8007b36:	4614      	mov	r4, r2
 8007b38:	461d      	mov	r5, r3
 8007b3a:	6828      	ldr	r0, [r5, #0]
 8007b3c:	6869      	ldr	r1, [r5, #4]
 8007b3e:	68aa      	ldr	r2, [r5, #8]
 8007b40:	68eb      	ldr	r3, [r5, #12]
 8007b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b44:	7c2b      	ldrb	r3, [r5, #16]
 8007b46:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007b48:	4a61      	ldr	r2, [pc, #388]	@ (8007cd0 <loadMenuTexts+0x858>)
 8007b4a:	4b62      	ldr	r3, [pc, #392]	@ (8007cd4 <loadMenuTexts+0x85c>)
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	461d      	mov	r5, r3
 8007b50:	6828      	ldr	r0, [r5, #0]
 8007b52:	6869      	ldr	r1, [r5, #4]
 8007b54:	68aa      	ldr	r2, [r5, #8]
 8007b56:	68eb      	ldr	r3, [r5, #12]
 8007b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b5a:	7c2b      	ldrb	r3, [r5, #16]
 8007b5c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8007cd8 <loadMenuTexts+0x860>)
 8007b60:	4b5e      	ldr	r3, [pc, #376]	@ (8007cdc <loadMenuTexts+0x864>)
 8007b62:	4614      	mov	r4, r2
 8007b64:	461d      	mov	r5, r3
 8007b66:	6828      	ldr	r0, [r5, #0]
 8007b68:	6869      	ldr	r1, [r5, #4]
 8007b6a:	68aa      	ldr	r2, [r5, #8]
 8007b6c:	68eb      	ldr	r3, [r5, #12]
 8007b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b70:	7c2b      	ldrb	r3, [r5, #16]
 8007b72:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007b74:	4a5a      	ldr	r2, [pc, #360]	@ (8007ce0 <loadMenuTexts+0x868>)
 8007b76:	4b5b      	ldr	r3, [pc, #364]	@ (8007ce4 <loadMenuTexts+0x86c>)
 8007b78:	4614      	mov	r4, r2
 8007b7a:	461d      	mov	r5, r3
 8007b7c:	6828      	ldr	r0, [r5, #0]
 8007b7e:	6869      	ldr	r1, [r5, #4]
 8007b80:	68aa      	ldr	r2, [r5, #8]
 8007b82:	68eb      	ldr	r3, [r5, #12]
 8007b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b86:	7c2b      	ldrb	r3, [r5, #16]
 8007b88:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007b8a:	4a57      	ldr	r2, [pc, #348]	@ (8007ce8 <loadMenuTexts+0x870>)
 8007b8c:	4b57      	ldr	r3, [pc, #348]	@ (8007cec <loadMenuTexts+0x874>)
 8007b8e:	4614      	mov	r4, r2
 8007b90:	461d      	mov	r5, r3
 8007b92:	6828      	ldr	r0, [r5, #0]
 8007b94:	6869      	ldr	r1, [r5, #4]
 8007b96:	68aa      	ldr	r2, [r5, #8]
 8007b98:	68eb      	ldr	r3, [r5, #12]
 8007b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9c:	7c2b      	ldrb	r3, [r5, #16]
 8007b9e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007ba0:	4a53      	ldr	r2, [pc, #332]	@ (8007cf0 <loadMenuTexts+0x878>)
 8007ba2:	4b54      	ldr	r3, [pc, #336]	@ (8007cf4 <loadMenuTexts+0x87c>)
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	6828      	ldr	r0, [r5, #0]
 8007baa:	6869      	ldr	r1, [r5, #4]
 8007bac:	68aa      	ldr	r2, [r5, #8]
 8007bae:	68eb      	ldr	r3, [r5, #12]
 8007bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb2:	7c2b      	ldrb	r3, [r5, #16]
 8007bb4:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8007bb6:	4a50      	ldr	r2, [pc, #320]	@ (8007cf8 <loadMenuTexts+0x880>)
 8007bb8:	4b50      	ldr	r3, [pc, #320]	@ (8007cfc <loadMenuTexts+0x884>)
 8007bba:	4614      	mov	r4, r2
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	6828      	ldr	r0, [r5, #0]
 8007bc0:	6869      	ldr	r1, [r5, #4]
 8007bc2:	68aa      	ldr	r2, [r5, #8]
 8007bc4:	68eb      	ldr	r3, [r5, #12]
 8007bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bc8:	7c2b      	ldrb	r3, [r5, #16]
 8007bca:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8007bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8007d00 <loadMenuTexts+0x888>)
 8007bce:	4b4d      	ldr	r3, [pc, #308]	@ (8007d04 <loadMenuTexts+0x88c>)
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	6828      	ldr	r0, [r5, #0]
 8007bd6:	6869      	ldr	r1, [r5, #4]
 8007bd8:	68aa      	ldr	r2, [r5, #8]
 8007bda:	68eb      	ldr	r3, [r5, #12]
 8007bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bde:	7c2b      	ldrb	r3, [r5, #16]
 8007be0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8007be2:	4a49      	ldr	r2, [pc, #292]	@ (8007d08 <loadMenuTexts+0x890>)
 8007be4:	4b49      	ldr	r3, [pc, #292]	@ (8007d0c <loadMenuTexts+0x894>)
 8007be6:	4614      	mov	r4, r2
 8007be8:	461d      	mov	r5, r3
 8007bea:	e091      	b.n	8007d10 <loadMenuTexts+0x898>
 8007bec:	2000045c 	.word	0x2000045c
 8007bf0:	200013b8 	.word	0x200013b8
 8007bf4:	20000470 	.word	0x20000470
 8007bf8:	200013cc 	.word	0x200013cc
 8007bfc:	20000484 	.word	0x20000484
 8007c00:	200013e0 	.word	0x200013e0
 8007c04:	20000498 	.word	0x20000498
 8007c08:	200013f4 	.word	0x200013f4
 8007c0c:	200004ac 	.word	0x200004ac
 8007c10:	20001408 	.word	0x20001408
 8007c14:	200004c0 	.word	0x200004c0
 8007c18:	2000141c 	.word	0x2000141c
 8007c1c:	200004d4 	.word	0x200004d4
 8007c20:	20001430 	.word	0x20001430
 8007c24:	200004e8 	.word	0x200004e8
 8007c28:	20001444 	.word	0x20001444
 8007c2c:	200004fc 	.word	0x200004fc
 8007c30:	20001458 	.word	0x20001458
 8007c34:	20000510 	.word	0x20000510
 8007c38:	2000146c 	.word	0x2000146c
 8007c3c:	20000524 	.word	0x20000524
 8007c40:	20001480 	.word	0x20001480
 8007c44:	20000538 	.word	0x20000538
 8007c48:	20001494 	.word	0x20001494
 8007c4c:	2000054c 	.word	0x2000054c
 8007c50:	200014a8 	.word	0x200014a8
 8007c54:	20000560 	.word	0x20000560
 8007c58:	200014bc 	.word	0x200014bc
 8007c5c:	20000574 	.word	0x20000574
 8007c60:	200014d0 	.word	0x200014d0
 8007c64:	20000588 	.word	0x20000588
 8007c68:	200014e4 	.word	0x200014e4
 8007c6c:	2000059c 	.word	0x2000059c
 8007c70:	200014f8 	.word	0x200014f8
 8007c74:	200005b0 	.word	0x200005b0
 8007c78:	2000150c 	.word	0x2000150c
 8007c7c:	200005c4 	.word	0x200005c4
 8007c80:	20001520 	.word	0x20001520
 8007c84:	200005d8 	.word	0x200005d8
 8007c88:	20001534 	.word	0x20001534
 8007c8c:	200005ec 	.word	0x200005ec
 8007c90:	20001548 	.word	0x20001548
 8007c94:	20000600 	.word	0x20000600
 8007c98:	2000155c 	.word	0x2000155c
 8007c9c:	20000614 	.word	0x20000614
 8007ca0:	20001570 	.word	0x20001570
 8007ca4:	20000628 	.word	0x20000628
 8007ca8:	20001584 	.word	0x20001584
 8007cac:	2000063c 	.word	0x2000063c
 8007cb0:	20001598 	.word	0x20001598
 8007cb4:	20000650 	.word	0x20000650
 8007cb8:	200015ac 	.word	0x200015ac
 8007cbc:	20000664 	.word	0x20000664
 8007cc0:	200015c0 	.word	0x200015c0
 8007cc4:	20000678 	.word	0x20000678
 8007cc8:	200015d4 	.word	0x200015d4
 8007ccc:	2000068c 	.word	0x2000068c
 8007cd0:	200015e8 	.word	0x200015e8
 8007cd4:	200006a0 	.word	0x200006a0
 8007cd8:	200015fc 	.word	0x200015fc
 8007cdc:	200006b4 	.word	0x200006b4
 8007ce0:	20001610 	.word	0x20001610
 8007ce4:	200006c8 	.word	0x200006c8
 8007ce8:	20001624 	.word	0x20001624
 8007cec:	200006dc 	.word	0x200006dc
 8007cf0:	20001638 	.word	0x20001638
 8007cf4:	200006f0 	.word	0x200006f0
 8007cf8:	2000164c 	.word	0x2000164c
 8007cfc:	20000c7c 	.word	0x20000c7c
 8007d00:	20001660 	.word	0x20001660
 8007d04:	20000c90 	.word	0x20000c90
 8007d08:	20001674 	.word	0x20001674
 8007d0c:	20000ca4 	.word	0x20000ca4
 8007d10:	6828      	ldr	r0, [r5, #0]
 8007d12:	6869      	ldr	r1, [r5, #4]
 8007d14:	68aa      	ldr	r2, [r5, #8]
 8007d16:	68eb      	ldr	r3, [r5, #12]
 8007d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d1a:	7c2b      	ldrb	r3, [r5, #16]
 8007d1c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8007d1e:	4a59      	ldr	r2, [pc, #356]	@ (8007e84 <loadMenuTexts+0xa0c>)
 8007d20:	4b59      	ldr	r3, [pc, #356]	@ (8007e88 <loadMenuTexts+0xa10>)
 8007d22:	4614      	mov	r4, r2
 8007d24:	461d      	mov	r5, r3
 8007d26:	6828      	ldr	r0, [r5, #0]
 8007d28:	6869      	ldr	r1, [r5, #4]
 8007d2a:	68aa      	ldr	r2, [r5, #8]
 8007d2c:	68eb      	ldr	r3, [r5, #12]
 8007d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d30:	7c2b      	ldrb	r3, [r5, #16]
 8007d32:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8007d34:	4a55      	ldr	r2, [pc, #340]	@ (8007e8c <loadMenuTexts+0xa14>)
 8007d36:	4b56      	ldr	r3, [pc, #344]	@ (8007e90 <loadMenuTexts+0xa18>)
 8007d38:	4614      	mov	r4, r2
 8007d3a:	461d      	mov	r5, r3
 8007d3c:	6828      	ldr	r0, [r5, #0]
 8007d3e:	6869      	ldr	r1, [r5, #4]
 8007d40:	68aa      	ldr	r2, [r5, #8]
 8007d42:	68eb      	ldr	r3, [r5, #12]
 8007d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d46:	7c2b      	ldrb	r3, [r5, #16]
 8007d48:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8007d4a:	4a52      	ldr	r2, [pc, #328]	@ (8007e94 <loadMenuTexts+0xa1c>)
 8007d4c:	4b52      	ldr	r3, [pc, #328]	@ (8007e98 <loadMenuTexts+0xa20>)
 8007d4e:	4614      	mov	r4, r2
 8007d50:	461d      	mov	r5, r3
 8007d52:	6828      	ldr	r0, [r5, #0]
 8007d54:	6869      	ldr	r1, [r5, #4]
 8007d56:	68aa      	ldr	r2, [r5, #8]
 8007d58:	68eb      	ldr	r3, [r5, #12]
 8007d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d5c:	7c2b      	ldrb	r3, [r5, #16]
 8007d5e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8007d60:	4a4e      	ldr	r2, [pc, #312]	@ (8007e9c <loadMenuTexts+0xa24>)
 8007d62:	4b4f      	ldr	r3, [pc, #316]	@ (8007ea0 <loadMenuTexts+0xa28>)
 8007d64:	4614      	mov	r4, r2
 8007d66:	461d      	mov	r5, r3
 8007d68:	6828      	ldr	r0, [r5, #0]
 8007d6a:	6869      	ldr	r1, [r5, #4]
 8007d6c:	68aa      	ldr	r2, [r5, #8]
 8007d6e:	68eb      	ldr	r3, [r5, #12]
 8007d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d72:	7c2b      	ldrb	r3, [r5, #16]
 8007d74:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8007d76:	4a4b      	ldr	r2, [pc, #300]	@ (8007ea4 <loadMenuTexts+0xa2c>)
 8007d78:	4b4b      	ldr	r3, [pc, #300]	@ (8007ea8 <loadMenuTexts+0xa30>)
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461d      	mov	r5, r3
 8007d7e:	6828      	ldr	r0, [r5, #0]
 8007d80:	6869      	ldr	r1, [r5, #4]
 8007d82:	68aa      	ldr	r2, [r5, #8]
 8007d84:	68eb      	ldr	r3, [r5, #12]
 8007d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d88:	7c2b      	ldrb	r3, [r5, #16]
 8007d8a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8007d8c:	4a47      	ldr	r2, [pc, #284]	@ (8007eac <loadMenuTexts+0xa34>)
 8007d8e:	4b48      	ldr	r3, [pc, #288]	@ (8007eb0 <loadMenuTexts+0xa38>)
 8007d90:	4614      	mov	r4, r2
 8007d92:	461d      	mov	r5, r3
 8007d94:	6828      	ldr	r0, [r5, #0]
 8007d96:	6869      	ldr	r1, [r5, #4]
 8007d98:	68aa      	ldr	r2, [r5, #8]
 8007d9a:	68eb      	ldr	r3, [r5, #12]
 8007d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d9e:	7c2b      	ldrb	r3, [r5, #16]
 8007da0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8007da2:	4a44      	ldr	r2, [pc, #272]	@ (8007eb4 <loadMenuTexts+0xa3c>)
 8007da4:	4b44      	ldr	r3, [pc, #272]	@ (8007eb8 <loadMenuTexts+0xa40>)
 8007da6:	4614      	mov	r4, r2
 8007da8:	461d      	mov	r5, r3
 8007daa:	6828      	ldr	r0, [r5, #0]
 8007dac:	6869      	ldr	r1, [r5, #4]
 8007dae:	68aa      	ldr	r2, [r5, #8]
 8007db0:	68eb      	ldr	r3, [r5, #12]
 8007db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007db4:	7c2b      	ldrb	r3, [r5, #16]
 8007db6:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8007db8:	4a40      	ldr	r2, [pc, #256]	@ (8007ebc <loadMenuTexts+0xa44>)
 8007dba:	4b41      	ldr	r3, [pc, #260]	@ (8007ec0 <loadMenuTexts+0xa48>)
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	6828      	ldr	r0, [r5, #0]
 8007dc2:	6869      	ldr	r1, [r5, #4]
 8007dc4:	68aa      	ldr	r2, [r5, #8]
 8007dc6:	68eb      	ldr	r3, [r5, #12]
 8007dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dca:	7c2b      	ldrb	r3, [r5, #16]
 8007dcc:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007dce:	4a3d      	ldr	r2, [pc, #244]	@ (8007ec4 <loadMenuTexts+0xa4c>)
 8007dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ec8 <loadMenuTexts+0xa50>)
 8007dd2:	4614      	mov	r4, r2
 8007dd4:	461d      	mov	r5, r3
 8007dd6:	6828      	ldr	r0, [r5, #0]
 8007dd8:	6869      	ldr	r1, [r5, #4]
 8007dda:	68aa      	ldr	r2, [r5, #8]
 8007ddc:	68eb      	ldr	r3, [r5, #12]
 8007dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007de0:	7c2b      	ldrb	r3, [r5, #16]
 8007de2:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8007de4:	4a39      	ldr	r2, [pc, #228]	@ (8007ecc <loadMenuTexts+0xa54>)
 8007de6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ed0 <loadMenuTexts+0xa58>)
 8007de8:	4614      	mov	r4, r2
 8007dea:	461d      	mov	r5, r3
 8007dec:	6828      	ldr	r0, [r5, #0]
 8007dee:	6869      	ldr	r1, [r5, #4]
 8007df0:	68aa      	ldr	r2, [r5, #8]
 8007df2:	68eb      	ldr	r3, [r5, #12]
 8007df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007df6:	7c2b      	ldrb	r3, [r5, #16]
 8007df8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8007dfa:	4a36      	ldr	r2, [pc, #216]	@ (8007ed4 <loadMenuTexts+0xa5c>)
 8007dfc:	4b36      	ldr	r3, [pc, #216]	@ (8007ed8 <loadMenuTexts+0xa60>)
 8007dfe:	4614      	mov	r4, r2
 8007e00:	461d      	mov	r5, r3
 8007e02:	6828      	ldr	r0, [r5, #0]
 8007e04:	6869      	ldr	r1, [r5, #4]
 8007e06:	68aa      	ldr	r2, [r5, #8]
 8007e08:	68eb      	ldr	r3, [r5, #12]
 8007e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0c:	7c2b      	ldrb	r3, [r5, #16]
 8007e0e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007e10:	4a32      	ldr	r2, [pc, #200]	@ (8007edc <loadMenuTexts+0xa64>)
 8007e12:	4b33      	ldr	r3, [pc, #204]	@ (8007ee0 <loadMenuTexts+0xa68>)
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	6828      	ldr	r0, [r5, #0]
 8007e1a:	6869      	ldr	r1, [r5, #4]
 8007e1c:	68aa      	ldr	r2, [r5, #8]
 8007e1e:	68eb      	ldr	r3, [r5, #12]
 8007e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e22:	7c2b      	ldrb	r3, [r5, #16]
 8007e24:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8007e26:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee4 <loadMenuTexts+0xa6c>)
 8007e28:	4b2f      	ldr	r3, [pc, #188]	@ (8007ee8 <loadMenuTexts+0xa70>)
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	461d      	mov	r5, r3
 8007e2e:	6828      	ldr	r0, [r5, #0]
 8007e30:	6869      	ldr	r1, [r5, #4]
 8007e32:	68aa      	ldr	r2, [r5, #8]
 8007e34:	68eb      	ldr	r3, [r5, #12]
 8007e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e38:	7c2b      	ldrb	r3, [r5, #16]
 8007e3a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8007e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8007eec <loadMenuTexts+0xa74>)
 8007e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ef0 <loadMenuTexts+0xa78>)
 8007e40:	4614      	mov	r4, r2
 8007e42:	461d      	mov	r5, r3
 8007e44:	6828      	ldr	r0, [r5, #0]
 8007e46:	6869      	ldr	r1, [r5, #4]
 8007e48:	68aa      	ldr	r2, [r5, #8]
 8007e4a:	68eb      	ldr	r3, [r5, #12]
 8007e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4e:	7c2b      	ldrb	r3, [r5, #16]
 8007e50:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8007e52:	4a28      	ldr	r2, [pc, #160]	@ (8007ef4 <loadMenuTexts+0xa7c>)
 8007e54:	4b28      	ldr	r3, [pc, #160]	@ (8007ef8 <loadMenuTexts+0xa80>)
 8007e56:	4614      	mov	r4, r2
 8007e58:	461d      	mov	r5, r3
 8007e5a:	6828      	ldr	r0, [r5, #0]
 8007e5c:	6869      	ldr	r1, [r5, #4]
 8007e5e:	68aa      	ldr	r2, [r5, #8]
 8007e60:	68eb      	ldr	r3, [r5, #12]
 8007e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e64:	7c2b      	ldrb	r3, [r5, #16]
 8007e66:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8007e68:	4a24      	ldr	r2, [pc, #144]	@ (8007efc <loadMenuTexts+0xa84>)
 8007e6a:	4b25      	ldr	r3, [pc, #148]	@ (8007f00 <loadMenuTexts+0xa88>)
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	461d      	mov	r5, r3
 8007e70:	6828      	ldr	r0, [r5, #0]
 8007e72:	6869      	ldr	r1, [r5, #4]
 8007e74:	68aa      	ldr	r2, [r5, #8]
 8007e76:	68eb      	ldr	r3, [r5, #12]
 8007e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7a:	7c2b      	ldrb	r3, [r5, #16]
 8007e7c:	7023      	strb	r3, [r4, #0]
 8007e7e:	f000 bd3a 	b.w	80088f6 <loadMenuTexts+0x147e>
 8007e82:	bf00      	nop
 8007e84:	20001688 	.word	0x20001688
 8007e88:	20000cb8 	.word	0x20000cb8
 8007e8c:	2000169c 	.word	0x2000169c
 8007e90:	20000d1c 	.word	0x20000d1c
 8007e94:	200016b0 	.word	0x200016b0
 8007e98:	20000d30 	.word	0x20000d30
 8007e9c:	200016c4 	.word	0x200016c4
 8007ea0:	20000d6c 	.word	0x20000d6c
 8007ea4:	200016d8 	.word	0x200016d8
 8007ea8:	20000d80 	.word	0x20000d80
 8007eac:	200016ec 	.word	0x200016ec
 8007eb0:	20000dbc 	.word	0x20000dbc
 8007eb4:	20001700 	.word	0x20001700
 8007eb8:	20000dd0 	.word	0x20000dd0
 8007ebc:	20001714 	.word	0x20001714
 8007ec0:	20000e0c 	.word	0x20000e0c
 8007ec4:	20001728 	.word	0x20001728
 8007ec8:	20000e34 	.word	0x20000e34
 8007ecc:	2000173c 	.word	0x2000173c
 8007ed0:	20000e5c 	.word	0x20000e5c
 8007ed4:	20001750 	.word	0x20001750
 8007ed8:	20000e84 	.word	0x20000e84
 8007edc:	20001764 	.word	0x20001764
 8007ee0:	20000eac 	.word	0x20000eac
 8007ee4:	20001778 	.word	0x20001778
 8007ee8:	20000ed4 	.word	0x20000ed4
 8007eec:	2000178c 	.word	0x2000178c
 8007ef0:	20000efc 	.word	0x20000efc
 8007ef4:	200017a0 	.word	0x200017a0
 8007ef8:	20000f24 	.word	0x20000f24
 8007efc:	200017b4 	.word	0x200017b4
 8007f00:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007f04:	4ac6      	ldr	r2, [pc, #792]	@ (8008220 <loadMenuTexts+0xda8>)
 8007f06:	4bc7      	ldr	r3, [pc, #796]	@ (8008224 <loadMenuTexts+0xdac>)
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	6828      	ldr	r0, [r5, #0]
 8007f0e:	6869      	ldr	r1, [r5, #4]
 8007f10:	68aa      	ldr	r2, [r5, #8]
 8007f12:	68eb      	ldr	r3, [r5, #12]
 8007f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f16:	7c2b      	ldrb	r3, [r5, #16]
 8007f18:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007f1a:	4ac3      	ldr	r2, [pc, #780]	@ (8008228 <loadMenuTexts+0xdb0>)
 8007f1c:	4bc3      	ldr	r3, [pc, #780]	@ (800822c <loadMenuTexts+0xdb4>)
 8007f1e:	4614      	mov	r4, r2
 8007f20:	461d      	mov	r5, r3
 8007f22:	6828      	ldr	r0, [r5, #0]
 8007f24:	6869      	ldr	r1, [r5, #4]
 8007f26:	68aa      	ldr	r2, [r5, #8]
 8007f28:	68eb      	ldr	r3, [r5, #12]
 8007f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2c:	7c2b      	ldrb	r3, [r5, #16]
 8007f2e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007f30:	4abf      	ldr	r2, [pc, #764]	@ (8008230 <loadMenuTexts+0xdb8>)
 8007f32:	4bc0      	ldr	r3, [pc, #768]	@ (8008234 <loadMenuTexts+0xdbc>)
 8007f34:	4614      	mov	r4, r2
 8007f36:	461d      	mov	r5, r3
 8007f38:	6828      	ldr	r0, [r5, #0]
 8007f3a:	6869      	ldr	r1, [r5, #4]
 8007f3c:	68aa      	ldr	r2, [r5, #8]
 8007f3e:	68eb      	ldr	r3, [r5, #12]
 8007f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f42:	7c2b      	ldrb	r3, [r5, #16]
 8007f44:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8007f46:	4abc      	ldr	r2, [pc, #752]	@ (8008238 <loadMenuTexts+0xdc0>)
 8007f48:	4bbc      	ldr	r3, [pc, #752]	@ (800823c <loadMenuTexts+0xdc4>)
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	461d      	mov	r5, r3
 8007f4e:	6828      	ldr	r0, [r5, #0]
 8007f50:	6869      	ldr	r1, [r5, #4]
 8007f52:	68aa      	ldr	r2, [r5, #8]
 8007f54:	68eb      	ldr	r3, [r5, #12]
 8007f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f58:	7c2b      	ldrb	r3, [r5, #16]
 8007f5a:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8007f5c:	4ab8      	ldr	r2, [pc, #736]	@ (8008240 <loadMenuTexts+0xdc8>)
 8007f5e:	4bb9      	ldr	r3, [pc, #740]	@ (8008244 <loadMenuTexts+0xdcc>)
 8007f60:	4614      	mov	r4, r2
 8007f62:	461d      	mov	r5, r3
 8007f64:	6828      	ldr	r0, [r5, #0]
 8007f66:	6869      	ldr	r1, [r5, #4]
 8007f68:	68aa      	ldr	r2, [r5, #8]
 8007f6a:	68eb      	ldr	r3, [r5, #12]
 8007f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f6e:	7c2b      	ldrb	r3, [r5, #16]
 8007f70:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8007f72:	4ab5      	ldr	r2, [pc, #724]	@ (8008248 <loadMenuTexts+0xdd0>)
 8007f74:	4bb5      	ldr	r3, [pc, #724]	@ (800824c <loadMenuTexts+0xdd4>)
 8007f76:	4614      	mov	r4, r2
 8007f78:	461d      	mov	r5, r3
 8007f7a:	6828      	ldr	r0, [r5, #0]
 8007f7c:	6869      	ldr	r1, [r5, #4]
 8007f7e:	68aa      	ldr	r2, [r5, #8]
 8007f80:	68eb      	ldr	r3, [r5, #12]
 8007f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f84:	7c2b      	ldrb	r3, [r5, #16]
 8007f86:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8007f88:	4ab1      	ldr	r2, [pc, #708]	@ (8008250 <loadMenuTexts+0xdd8>)
 8007f8a:	4bb2      	ldr	r3, [pc, #712]	@ (8008254 <loadMenuTexts+0xddc>)
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	461d      	mov	r5, r3
 8007f90:	6828      	ldr	r0, [r5, #0]
 8007f92:	6869      	ldr	r1, [r5, #4]
 8007f94:	68aa      	ldr	r2, [r5, #8]
 8007f96:	68eb      	ldr	r3, [r5, #12]
 8007f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9a:	7c2b      	ldrb	r3, [r5, #16]
 8007f9c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8007f9e:	4aae      	ldr	r2, [pc, #696]	@ (8008258 <loadMenuTexts+0xde0>)
 8007fa0:	4bae      	ldr	r3, [pc, #696]	@ (800825c <loadMenuTexts+0xde4>)
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	461d      	mov	r5, r3
 8007fa6:	6828      	ldr	r0, [r5, #0]
 8007fa8:	6869      	ldr	r1, [r5, #4]
 8007faa:	68aa      	ldr	r2, [r5, #8]
 8007fac:	68eb      	ldr	r3, [r5, #12]
 8007fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fb0:	7c2b      	ldrb	r3, [r5, #16]
 8007fb2:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8007fb4:	4aaa      	ldr	r2, [pc, #680]	@ (8008260 <loadMenuTexts+0xde8>)
 8007fb6:	4bab      	ldr	r3, [pc, #684]	@ (8008264 <loadMenuTexts+0xdec>)
 8007fb8:	4614      	mov	r4, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	6828      	ldr	r0, [r5, #0]
 8007fbe:	6869      	ldr	r1, [r5, #4]
 8007fc0:	68aa      	ldr	r2, [r5, #8]
 8007fc2:	68eb      	ldr	r3, [r5, #12]
 8007fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fc6:	7c2b      	ldrb	r3, [r5, #16]
 8007fc8:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007fca:	4aa7      	ldr	r2, [pc, #668]	@ (8008268 <loadMenuTexts+0xdf0>)
 8007fcc:	4ba7      	ldr	r3, [pc, #668]	@ (800826c <loadMenuTexts+0xdf4>)
 8007fce:	4614      	mov	r4, r2
 8007fd0:	461d      	mov	r5, r3
 8007fd2:	6828      	ldr	r0, [r5, #0]
 8007fd4:	6869      	ldr	r1, [r5, #4]
 8007fd6:	68aa      	ldr	r2, [r5, #8]
 8007fd8:	68eb      	ldr	r3, [r5, #12]
 8007fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fdc:	7c2b      	ldrb	r3, [r5, #16]
 8007fde:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007fe0:	4aa3      	ldr	r2, [pc, #652]	@ (8008270 <loadMenuTexts+0xdf8>)
 8007fe2:	4ba4      	ldr	r3, [pc, #656]	@ (8008274 <loadMenuTexts+0xdfc>)
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	461d      	mov	r5, r3
 8007fe8:	6828      	ldr	r0, [r5, #0]
 8007fea:	6869      	ldr	r1, [r5, #4]
 8007fec:	68aa      	ldr	r2, [r5, #8]
 8007fee:	68eb      	ldr	r3, [r5, #12]
 8007ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff2:	7c2b      	ldrb	r3, [r5, #16]
 8007ff4:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8007ff6:	4aa0      	ldr	r2, [pc, #640]	@ (8008278 <loadMenuTexts+0xe00>)
 8007ff8:	4ba0      	ldr	r3, [pc, #640]	@ (800827c <loadMenuTexts+0xe04>)
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	461d      	mov	r5, r3
 8007ffe:	6828      	ldr	r0, [r5, #0]
 8008000:	6869      	ldr	r1, [r5, #4]
 8008002:	68aa      	ldr	r2, [r5, #8]
 8008004:	68eb      	ldr	r3, [r5, #12]
 8008006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008008:	7c2b      	ldrb	r3, [r5, #16]
 800800a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 800800c:	4a9c      	ldr	r2, [pc, #624]	@ (8008280 <loadMenuTexts+0xe08>)
 800800e:	4b9d      	ldr	r3, [pc, #628]	@ (8008284 <loadMenuTexts+0xe0c>)
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	6828      	ldr	r0, [r5, #0]
 8008016:	6869      	ldr	r1, [r5, #4]
 8008018:	68aa      	ldr	r2, [r5, #8]
 800801a:	68eb      	ldr	r3, [r5, #12]
 800801c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800801e:	7c2b      	ldrb	r3, [r5, #16]
 8008020:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8008022:	4a99      	ldr	r2, [pc, #612]	@ (8008288 <loadMenuTexts+0xe10>)
 8008024:	4b99      	ldr	r3, [pc, #612]	@ (800828c <loadMenuTexts+0xe14>)
 8008026:	4614      	mov	r4, r2
 8008028:	461d      	mov	r5, r3
 800802a:	6828      	ldr	r0, [r5, #0]
 800802c:	6869      	ldr	r1, [r5, #4]
 800802e:	68aa      	ldr	r2, [r5, #8]
 8008030:	68eb      	ldr	r3, [r5, #12]
 8008032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008034:	7c2b      	ldrb	r3, [r5, #16]
 8008036:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8008038:	4a95      	ldr	r2, [pc, #596]	@ (8008290 <loadMenuTexts+0xe18>)
 800803a:	4b96      	ldr	r3, [pc, #600]	@ (8008294 <loadMenuTexts+0xe1c>)
 800803c:	4614      	mov	r4, r2
 800803e:	461d      	mov	r5, r3
 8008040:	6828      	ldr	r0, [r5, #0]
 8008042:	6869      	ldr	r1, [r5, #4]
 8008044:	68aa      	ldr	r2, [r5, #8]
 8008046:	68eb      	ldr	r3, [r5, #12]
 8008048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804a:	7c2b      	ldrb	r3, [r5, #16]
 800804c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 800804e:	4a92      	ldr	r2, [pc, #584]	@ (8008298 <loadMenuTexts+0xe20>)
 8008050:	4b92      	ldr	r3, [pc, #584]	@ (800829c <loadMenuTexts+0xe24>)
 8008052:	4614      	mov	r4, r2
 8008054:	461d      	mov	r5, r3
 8008056:	6828      	ldr	r0, [r5, #0]
 8008058:	6869      	ldr	r1, [r5, #4]
 800805a:	68aa      	ldr	r2, [r5, #8]
 800805c:	68eb      	ldr	r3, [r5, #12]
 800805e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008060:	7c2b      	ldrb	r3, [r5, #16]
 8008062:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8008064:	4a8e      	ldr	r2, [pc, #568]	@ (80082a0 <loadMenuTexts+0xe28>)
 8008066:	4b8f      	ldr	r3, [pc, #572]	@ (80082a4 <loadMenuTexts+0xe2c>)
 8008068:	4614      	mov	r4, r2
 800806a:	461d      	mov	r5, r3
 800806c:	6828      	ldr	r0, [r5, #0]
 800806e:	6869      	ldr	r1, [r5, #4]
 8008070:	68aa      	ldr	r2, [r5, #8]
 8008072:	68eb      	ldr	r3, [r5, #12]
 8008074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008076:	7c2b      	ldrb	r3, [r5, #16]
 8008078:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 800807a:	4a8b      	ldr	r2, [pc, #556]	@ (80082a8 <loadMenuTexts+0xe30>)
 800807c:	4b8b      	ldr	r3, [pc, #556]	@ (80082ac <loadMenuTexts+0xe34>)
 800807e:	4614      	mov	r4, r2
 8008080:	461d      	mov	r5, r3
 8008082:	6828      	ldr	r0, [r5, #0]
 8008084:	6869      	ldr	r1, [r5, #4]
 8008086:	68aa      	ldr	r2, [r5, #8]
 8008088:	68eb      	ldr	r3, [r5, #12]
 800808a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800808c:	7c2b      	ldrb	r3, [r5, #16]
 800808e:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8008090:	4a87      	ldr	r2, [pc, #540]	@ (80082b0 <loadMenuTexts+0xe38>)
 8008092:	4b88      	ldr	r3, [pc, #544]	@ (80082b4 <loadMenuTexts+0xe3c>)
 8008094:	4614      	mov	r4, r2
 8008096:	461d      	mov	r5, r3
 8008098:	6828      	ldr	r0, [r5, #0]
 800809a:	6869      	ldr	r1, [r5, #4]
 800809c:	68aa      	ldr	r2, [r5, #8]
 800809e:	68eb      	ldr	r3, [r5, #12]
 80080a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a2:	7c2b      	ldrb	r3, [r5, #16]
 80080a4:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80080a6:	4a84      	ldr	r2, [pc, #528]	@ (80082b8 <loadMenuTexts+0xe40>)
 80080a8:	4b84      	ldr	r3, [pc, #528]	@ (80082bc <loadMenuTexts+0xe44>)
 80080aa:	4614      	mov	r4, r2
 80080ac:	461d      	mov	r5, r3
 80080ae:	6828      	ldr	r0, [r5, #0]
 80080b0:	6869      	ldr	r1, [r5, #4]
 80080b2:	68aa      	ldr	r2, [r5, #8]
 80080b4:	68eb      	ldr	r3, [r5, #12]
 80080b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b8:	7c2b      	ldrb	r3, [r5, #16]
 80080ba:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 80080bc:	4a80      	ldr	r2, [pc, #512]	@ (80082c0 <loadMenuTexts+0xe48>)
 80080be:	4b81      	ldr	r3, [pc, #516]	@ (80082c4 <loadMenuTexts+0xe4c>)
 80080c0:	4614      	mov	r4, r2
 80080c2:	461d      	mov	r5, r3
 80080c4:	6828      	ldr	r0, [r5, #0]
 80080c6:	6869      	ldr	r1, [r5, #4]
 80080c8:	68aa      	ldr	r2, [r5, #8]
 80080ca:	68eb      	ldr	r3, [r5, #12]
 80080cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ce:	7c2b      	ldrb	r3, [r5, #16]
 80080d0:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 80080d2:	4a7d      	ldr	r2, [pc, #500]	@ (80082c8 <loadMenuTexts+0xe50>)
 80080d4:	4b7d      	ldr	r3, [pc, #500]	@ (80082cc <loadMenuTexts+0xe54>)
 80080d6:	4614      	mov	r4, r2
 80080d8:	461d      	mov	r5, r3
 80080da:	6828      	ldr	r0, [r5, #0]
 80080dc:	6869      	ldr	r1, [r5, #4]
 80080de:	68aa      	ldr	r2, [r5, #8]
 80080e0:	68eb      	ldr	r3, [r5, #12]
 80080e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e4:	7c2b      	ldrb	r3, [r5, #16]
 80080e6:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 80080e8:	4a79      	ldr	r2, [pc, #484]	@ (80082d0 <loadMenuTexts+0xe58>)
 80080ea:	4b7a      	ldr	r3, [pc, #488]	@ (80082d4 <loadMenuTexts+0xe5c>)
 80080ec:	4614      	mov	r4, r2
 80080ee:	461d      	mov	r5, r3
 80080f0:	6828      	ldr	r0, [r5, #0]
 80080f2:	6869      	ldr	r1, [r5, #4]
 80080f4:	68aa      	ldr	r2, [r5, #8]
 80080f6:	68eb      	ldr	r3, [r5, #12]
 80080f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080fa:	7c2b      	ldrb	r3, [r5, #16]
 80080fc:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 80080fe:	4a76      	ldr	r2, [pc, #472]	@ (80082d8 <loadMenuTexts+0xe60>)
 8008100:	4b76      	ldr	r3, [pc, #472]	@ (80082dc <loadMenuTexts+0xe64>)
 8008102:	4614      	mov	r4, r2
 8008104:	461d      	mov	r5, r3
 8008106:	6828      	ldr	r0, [r5, #0]
 8008108:	6869      	ldr	r1, [r5, #4]
 800810a:	68aa      	ldr	r2, [r5, #8]
 800810c:	68eb      	ldr	r3, [r5, #12]
 800810e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008110:	7c2b      	ldrb	r3, [r5, #16]
 8008112:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008114:	4a72      	ldr	r2, [pc, #456]	@ (80082e0 <loadMenuTexts+0xe68>)
 8008116:	4b73      	ldr	r3, [pc, #460]	@ (80082e4 <loadMenuTexts+0xe6c>)
 8008118:	4614      	mov	r4, r2
 800811a:	461d      	mov	r5, r3
 800811c:	6828      	ldr	r0, [r5, #0]
 800811e:	6869      	ldr	r1, [r5, #4]
 8008120:	68aa      	ldr	r2, [r5, #8]
 8008122:	68eb      	ldr	r3, [r5, #12]
 8008124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008126:	7c2b      	ldrb	r3, [r5, #16]
 8008128:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800812a:	4a6f      	ldr	r2, [pc, #444]	@ (80082e8 <loadMenuTexts+0xe70>)
 800812c:	4b6f      	ldr	r3, [pc, #444]	@ (80082ec <loadMenuTexts+0xe74>)
 800812e:	4614      	mov	r4, r2
 8008130:	461d      	mov	r5, r3
 8008132:	6828      	ldr	r0, [r5, #0]
 8008134:	6869      	ldr	r1, [r5, #4]
 8008136:	68aa      	ldr	r2, [r5, #8]
 8008138:	68eb      	ldr	r3, [r5, #12]
 800813a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800813c:	7c2b      	ldrb	r3, [r5, #16]
 800813e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8008140:	4a6b      	ldr	r2, [pc, #428]	@ (80082f0 <loadMenuTexts+0xe78>)
 8008142:	4b6c      	ldr	r3, [pc, #432]	@ (80082f4 <loadMenuTexts+0xe7c>)
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	6828      	ldr	r0, [r5, #0]
 800814a:	6869      	ldr	r1, [r5, #4]
 800814c:	68aa      	ldr	r2, [r5, #8]
 800814e:	68eb      	ldr	r3, [r5, #12]
 8008150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008152:	7c2b      	ldrb	r3, [r5, #16]
 8008154:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8008156:	4a68      	ldr	r2, [pc, #416]	@ (80082f8 <loadMenuTexts+0xe80>)
 8008158:	4b68      	ldr	r3, [pc, #416]	@ (80082fc <loadMenuTexts+0xe84>)
 800815a:	4614      	mov	r4, r2
 800815c:	461d      	mov	r5, r3
 800815e:	6828      	ldr	r0, [r5, #0]
 8008160:	6869      	ldr	r1, [r5, #4]
 8008162:	68aa      	ldr	r2, [r5, #8]
 8008164:	68eb      	ldr	r3, [r5, #12]
 8008166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008168:	7c2b      	ldrb	r3, [r5, #16]
 800816a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 800816c:	4a64      	ldr	r2, [pc, #400]	@ (8008300 <loadMenuTexts+0xe88>)
 800816e:	4b65      	ldr	r3, [pc, #404]	@ (8008304 <loadMenuTexts+0xe8c>)
 8008170:	4614      	mov	r4, r2
 8008172:	461d      	mov	r5, r3
 8008174:	6828      	ldr	r0, [r5, #0]
 8008176:	6869      	ldr	r1, [r5, #4]
 8008178:	68aa      	ldr	r2, [r5, #8]
 800817a:	68eb      	ldr	r3, [r5, #12]
 800817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800817e:	7c2b      	ldrb	r3, [r5, #16]
 8008180:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8008182:	4a61      	ldr	r2, [pc, #388]	@ (8008308 <loadMenuTexts+0xe90>)
 8008184:	4b61      	ldr	r3, [pc, #388]	@ (800830c <loadMenuTexts+0xe94>)
 8008186:	4614      	mov	r4, r2
 8008188:	461d      	mov	r5, r3
 800818a:	6828      	ldr	r0, [r5, #0]
 800818c:	6869      	ldr	r1, [r5, #4]
 800818e:	68aa      	ldr	r2, [r5, #8]
 8008190:	68eb      	ldr	r3, [r5, #12]
 8008192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008194:	7c2b      	ldrb	r3, [r5, #16]
 8008196:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8008198:	4a5d      	ldr	r2, [pc, #372]	@ (8008310 <loadMenuTexts+0xe98>)
 800819a:	4b5e      	ldr	r3, [pc, #376]	@ (8008314 <loadMenuTexts+0xe9c>)
 800819c:	4614      	mov	r4, r2
 800819e:	461d      	mov	r5, r3
 80081a0:	6828      	ldr	r0, [r5, #0]
 80081a2:	6869      	ldr	r1, [r5, #4]
 80081a4:	68aa      	ldr	r2, [r5, #8]
 80081a6:	68eb      	ldr	r3, [r5, #12]
 80081a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081aa:	7c2b      	ldrb	r3, [r5, #16]
 80081ac:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80081ae:	4a5a      	ldr	r2, [pc, #360]	@ (8008318 <loadMenuTexts+0xea0>)
 80081b0:	4b5a      	ldr	r3, [pc, #360]	@ (800831c <loadMenuTexts+0xea4>)
 80081b2:	4614      	mov	r4, r2
 80081b4:	461d      	mov	r5, r3
 80081b6:	6828      	ldr	r0, [r5, #0]
 80081b8:	6869      	ldr	r1, [r5, #4]
 80081ba:	68aa      	ldr	r2, [r5, #8]
 80081bc:	68eb      	ldr	r3, [r5, #12]
 80081be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081c0:	7c2b      	ldrb	r3, [r5, #16]
 80081c2:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80081c4:	4a56      	ldr	r2, [pc, #344]	@ (8008320 <loadMenuTexts+0xea8>)
 80081c6:	4b57      	ldr	r3, [pc, #348]	@ (8008324 <loadMenuTexts+0xeac>)
 80081c8:	4614      	mov	r4, r2
 80081ca:	461d      	mov	r5, r3
 80081cc:	6828      	ldr	r0, [r5, #0]
 80081ce:	6869      	ldr	r1, [r5, #4]
 80081d0:	68aa      	ldr	r2, [r5, #8]
 80081d2:	68eb      	ldr	r3, [r5, #12]
 80081d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081d6:	7c2b      	ldrb	r3, [r5, #16]
 80081d8:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80081da:	4a53      	ldr	r2, [pc, #332]	@ (8008328 <loadMenuTexts+0xeb0>)
 80081dc:	4b53      	ldr	r3, [pc, #332]	@ (800832c <loadMenuTexts+0xeb4>)
 80081de:	4614      	mov	r4, r2
 80081e0:	461d      	mov	r5, r3
 80081e2:	6828      	ldr	r0, [r5, #0]
 80081e4:	6869      	ldr	r1, [r5, #4]
 80081e6:	68aa      	ldr	r2, [r5, #8]
 80081e8:	68eb      	ldr	r3, [r5, #12]
 80081ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ec:	7c2b      	ldrb	r3, [r5, #16]
 80081ee:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 80081f0:	4a4f      	ldr	r2, [pc, #316]	@ (8008330 <loadMenuTexts+0xeb8>)
 80081f2:	4b50      	ldr	r3, [pc, #320]	@ (8008334 <loadMenuTexts+0xebc>)
 80081f4:	4614      	mov	r4, r2
 80081f6:	461d      	mov	r5, r3
 80081f8:	6828      	ldr	r0, [r5, #0]
 80081fa:	6869      	ldr	r1, [r5, #4]
 80081fc:	68aa      	ldr	r2, [r5, #8]
 80081fe:	68eb      	ldr	r3, [r5, #12]
 8008200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008202:	7c2b      	ldrb	r3, [r5, #16]
 8008204:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8008206:	4a4c      	ldr	r2, [pc, #304]	@ (8008338 <loadMenuTexts+0xec0>)
 8008208:	4b4c      	ldr	r3, [pc, #304]	@ (800833c <loadMenuTexts+0xec4>)
 800820a:	4614      	mov	r4, r2
 800820c:	461d      	mov	r5, r3
 800820e:	6828      	ldr	r0, [r5, #0]
 8008210:	6869      	ldr	r1, [r5, #4]
 8008212:	68aa      	ldr	r2, [r5, #8]
 8008214:	68eb      	ldr	r3, [r5, #12]
 8008216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008218:	7c2b      	ldrb	r3, [r5, #16]
 800821a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 800821c:	4a48      	ldr	r2, [pc, #288]	@ (8008340 <loadMenuTexts+0xec8>)
 800821e:	e091      	b.n	8008344 <loadMenuTexts+0xecc>
 8008220:	200010d4 	.word	0x200010d4
 8008224:	20000704 	.word	0x20000704
 8008228:	200010e8 	.word	0x200010e8
 800822c:	20000718 	.word	0x20000718
 8008230:	200010fc 	.word	0x200010fc
 8008234:	2000072c 	.word	0x2000072c
 8008238:	20001110 	.word	0x20001110
 800823c:	20000740 	.word	0x20000740
 8008240:	20001124 	.word	0x20001124
 8008244:	20000754 	.word	0x20000754
 8008248:	20001138 	.word	0x20001138
 800824c:	20000768 	.word	0x20000768
 8008250:	2000114c 	.word	0x2000114c
 8008254:	2000077c 	.word	0x2000077c
 8008258:	20001160 	.word	0x20001160
 800825c:	20000790 	.word	0x20000790
 8008260:	20001174 	.word	0x20001174
 8008264:	200007a4 	.word	0x200007a4
 8008268:	20001188 	.word	0x20001188
 800826c:	200007b8 	.word	0x200007b8
 8008270:	2000119c 	.word	0x2000119c
 8008274:	200007cc 	.word	0x200007cc
 8008278:	200011b0 	.word	0x200011b0
 800827c:	200007e0 	.word	0x200007e0
 8008280:	200011c4 	.word	0x200011c4
 8008284:	200007f4 	.word	0x200007f4
 8008288:	200011d8 	.word	0x200011d8
 800828c:	20000808 	.word	0x20000808
 8008290:	200011ec 	.word	0x200011ec
 8008294:	2000081c 	.word	0x2000081c
 8008298:	20001200 	.word	0x20001200
 800829c:	20000830 	.word	0x20000830
 80082a0:	20001214 	.word	0x20001214
 80082a4:	20000844 	.word	0x20000844
 80082a8:	20001228 	.word	0x20001228
 80082ac:	20000858 	.word	0x20000858
 80082b0:	2000123c 	.word	0x2000123c
 80082b4:	2000086c 	.word	0x2000086c
 80082b8:	20001250 	.word	0x20001250
 80082bc:	20000880 	.word	0x20000880
 80082c0:	20001264 	.word	0x20001264
 80082c4:	20000894 	.word	0x20000894
 80082c8:	20001278 	.word	0x20001278
 80082cc:	200008a8 	.word	0x200008a8
 80082d0:	2000128c 	.word	0x2000128c
 80082d4:	200008bc 	.word	0x200008bc
 80082d8:	200012a0 	.word	0x200012a0
 80082dc:	200008d0 	.word	0x200008d0
 80082e0:	200012b4 	.word	0x200012b4
 80082e4:	200008e4 	.word	0x200008e4
 80082e8:	200012c8 	.word	0x200012c8
 80082ec:	200008f8 	.word	0x200008f8
 80082f0:	200012dc 	.word	0x200012dc
 80082f4:	2000090c 	.word	0x2000090c
 80082f8:	200012f0 	.word	0x200012f0
 80082fc:	20000920 	.word	0x20000920
 8008300:	20001304 	.word	0x20001304
 8008304:	20000934 	.word	0x20000934
 8008308:	20001318 	.word	0x20001318
 800830c:	20000948 	.word	0x20000948
 8008310:	2000132c 	.word	0x2000132c
 8008314:	2000095c 	.word	0x2000095c
 8008318:	20001340 	.word	0x20001340
 800831c:	20000970 	.word	0x20000970
 8008320:	20001354 	.word	0x20001354
 8008324:	20000984 	.word	0x20000984
 8008328:	20001368 	.word	0x20001368
 800832c:	20000998 	.word	0x20000998
 8008330:	2000137c 	.word	0x2000137c
 8008334:	200009ac 	.word	0x200009ac
 8008338:	20001390 	.word	0x20001390
 800833c:	200009c0 	.word	0x200009c0
 8008340:	200013a4 	.word	0x200013a4
 8008344:	4bc7      	ldr	r3, [pc, #796]	@ (8008664 <loadMenuTexts+0x11ec>)
 8008346:	4614      	mov	r4, r2
 8008348:	461d      	mov	r5, r3
 800834a:	6828      	ldr	r0, [r5, #0]
 800834c:	6869      	ldr	r1, [r5, #4]
 800834e:	68aa      	ldr	r2, [r5, #8]
 8008350:	68eb      	ldr	r3, [r5, #12]
 8008352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008354:	7c2b      	ldrb	r3, [r5, #16]
 8008356:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008358:	4ac3      	ldr	r2, [pc, #780]	@ (8008668 <loadMenuTexts+0x11f0>)
 800835a:	4bc4      	ldr	r3, [pc, #784]	@ (800866c <loadMenuTexts+0x11f4>)
 800835c:	4614      	mov	r4, r2
 800835e:	461d      	mov	r5, r3
 8008360:	6828      	ldr	r0, [r5, #0]
 8008362:	6869      	ldr	r1, [r5, #4]
 8008364:	68aa      	ldr	r2, [r5, #8]
 8008366:	68eb      	ldr	r3, [r5, #12]
 8008368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800836a:	7c2b      	ldrb	r3, [r5, #16]
 800836c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800836e:	4ac0      	ldr	r2, [pc, #768]	@ (8008670 <loadMenuTexts+0x11f8>)
 8008370:	4bc0      	ldr	r3, [pc, #768]	@ (8008674 <loadMenuTexts+0x11fc>)
 8008372:	4614      	mov	r4, r2
 8008374:	461d      	mov	r5, r3
 8008376:	6828      	ldr	r0, [r5, #0]
 8008378:	6869      	ldr	r1, [r5, #4]
 800837a:	68aa      	ldr	r2, [r5, #8]
 800837c:	68eb      	ldr	r3, [r5, #12]
 800837e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008380:	7c2b      	ldrb	r3, [r5, #16]
 8008382:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8008384:	4abc      	ldr	r2, [pc, #752]	@ (8008678 <loadMenuTexts+0x1200>)
 8008386:	4bbd      	ldr	r3, [pc, #756]	@ (800867c <loadMenuTexts+0x1204>)
 8008388:	4614      	mov	r4, r2
 800838a:	461d      	mov	r5, r3
 800838c:	6828      	ldr	r0, [r5, #0]
 800838e:	6869      	ldr	r1, [r5, #4]
 8008390:	68aa      	ldr	r2, [r5, #8]
 8008392:	68eb      	ldr	r3, [r5, #12]
 8008394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008396:	7c2b      	ldrb	r3, [r5, #16]
 8008398:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800839a:	4ab9      	ldr	r2, [pc, #740]	@ (8008680 <loadMenuTexts+0x1208>)
 800839c:	4bb9      	ldr	r3, [pc, #740]	@ (8008684 <loadMenuTexts+0x120c>)
 800839e:	4614      	mov	r4, r2
 80083a0:	461d      	mov	r5, r3
 80083a2:	6828      	ldr	r0, [r5, #0]
 80083a4:	6869      	ldr	r1, [r5, #4]
 80083a6:	68aa      	ldr	r2, [r5, #8]
 80083a8:	68eb      	ldr	r3, [r5, #12]
 80083aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ac:	7c2b      	ldrb	r3, [r5, #16]
 80083ae:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80083b0:	4ab5      	ldr	r2, [pc, #724]	@ (8008688 <loadMenuTexts+0x1210>)
 80083b2:	4bb6      	ldr	r3, [pc, #728]	@ (800868c <loadMenuTexts+0x1214>)
 80083b4:	4614      	mov	r4, r2
 80083b6:	461d      	mov	r5, r3
 80083b8:	6828      	ldr	r0, [r5, #0]
 80083ba:	6869      	ldr	r1, [r5, #4]
 80083bc:	68aa      	ldr	r2, [r5, #8]
 80083be:	68eb      	ldr	r3, [r5, #12]
 80083c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c2:	7c2b      	ldrb	r3, [r5, #16]
 80083c4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80083c6:	4ab2      	ldr	r2, [pc, #712]	@ (8008690 <loadMenuTexts+0x1218>)
 80083c8:	4bb2      	ldr	r3, [pc, #712]	@ (8008694 <loadMenuTexts+0x121c>)
 80083ca:	4614      	mov	r4, r2
 80083cc:	461d      	mov	r5, r3
 80083ce:	6828      	ldr	r0, [r5, #0]
 80083d0:	6869      	ldr	r1, [r5, #4]
 80083d2:	68aa      	ldr	r2, [r5, #8]
 80083d4:	68eb      	ldr	r3, [r5, #12]
 80083d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d8:	7c2b      	ldrb	r3, [r5, #16]
 80083da:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80083dc:	4aae      	ldr	r2, [pc, #696]	@ (8008698 <loadMenuTexts+0x1220>)
 80083de:	4baf      	ldr	r3, [pc, #700]	@ (800869c <loadMenuTexts+0x1224>)
 80083e0:	4614      	mov	r4, r2
 80083e2:	461d      	mov	r5, r3
 80083e4:	6828      	ldr	r0, [r5, #0]
 80083e6:	6869      	ldr	r1, [r5, #4]
 80083e8:	68aa      	ldr	r2, [r5, #8]
 80083ea:	68eb      	ldr	r3, [r5, #12]
 80083ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ee:	7c2b      	ldrb	r3, [r5, #16]
 80083f0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80083f2:	4aab      	ldr	r2, [pc, #684]	@ (80086a0 <loadMenuTexts+0x1228>)
 80083f4:	4bab      	ldr	r3, [pc, #684]	@ (80086a4 <loadMenuTexts+0x122c>)
 80083f6:	4614      	mov	r4, r2
 80083f8:	461d      	mov	r5, r3
 80083fa:	6828      	ldr	r0, [r5, #0]
 80083fc:	6869      	ldr	r1, [r5, #4]
 80083fe:	68aa      	ldr	r2, [r5, #8]
 8008400:	68eb      	ldr	r3, [r5, #12]
 8008402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008404:	7c2b      	ldrb	r3, [r5, #16]
 8008406:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8008408:	4aa7      	ldr	r2, [pc, #668]	@ (80086a8 <loadMenuTexts+0x1230>)
 800840a:	4ba8      	ldr	r3, [pc, #672]	@ (80086ac <loadMenuTexts+0x1234>)
 800840c:	4614      	mov	r4, r2
 800840e:	461d      	mov	r5, r3
 8008410:	6828      	ldr	r0, [r5, #0]
 8008412:	6869      	ldr	r1, [r5, #4]
 8008414:	68aa      	ldr	r2, [r5, #8]
 8008416:	68eb      	ldr	r3, [r5, #12]
 8008418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841a:	7c2b      	ldrb	r3, [r5, #16]
 800841c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 800841e:	4aa4      	ldr	r2, [pc, #656]	@ (80086b0 <loadMenuTexts+0x1238>)
 8008420:	4ba4      	ldr	r3, [pc, #656]	@ (80086b4 <loadMenuTexts+0x123c>)
 8008422:	4614      	mov	r4, r2
 8008424:	461d      	mov	r5, r3
 8008426:	6828      	ldr	r0, [r5, #0]
 8008428:	6869      	ldr	r1, [r5, #4]
 800842a:	68aa      	ldr	r2, [r5, #8]
 800842c:	68eb      	ldr	r3, [r5, #12]
 800842e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008430:	7c2b      	ldrb	r3, [r5, #16]
 8008432:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008434:	4aa0      	ldr	r2, [pc, #640]	@ (80086b8 <loadMenuTexts+0x1240>)
 8008436:	4ba1      	ldr	r3, [pc, #644]	@ (80086bc <loadMenuTexts+0x1244>)
 8008438:	4614      	mov	r4, r2
 800843a:	461d      	mov	r5, r3
 800843c:	6828      	ldr	r0, [r5, #0]
 800843e:	6869      	ldr	r1, [r5, #4]
 8008440:	68aa      	ldr	r2, [r5, #8]
 8008442:	68eb      	ldr	r3, [r5, #12]
 8008444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008446:	7c2b      	ldrb	r3, [r5, #16]
 8008448:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 800844a:	4a9d      	ldr	r2, [pc, #628]	@ (80086c0 <loadMenuTexts+0x1248>)
 800844c:	4b9d      	ldr	r3, [pc, #628]	@ (80086c4 <loadMenuTexts+0x124c>)
 800844e:	4614      	mov	r4, r2
 8008450:	461d      	mov	r5, r3
 8008452:	6828      	ldr	r0, [r5, #0]
 8008454:	6869      	ldr	r1, [r5, #4]
 8008456:	68aa      	ldr	r2, [r5, #8]
 8008458:	68eb      	ldr	r3, [r5, #12]
 800845a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800845c:	7c2b      	ldrb	r3, [r5, #16]
 800845e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008460:	4a99      	ldr	r2, [pc, #612]	@ (80086c8 <loadMenuTexts+0x1250>)
 8008462:	4b9a      	ldr	r3, [pc, #616]	@ (80086cc <loadMenuTexts+0x1254>)
 8008464:	4614      	mov	r4, r2
 8008466:	461d      	mov	r5, r3
 8008468:	6828      	ldr	r0, [r5, #0]
 800846a:	6869      	ldr	r1, [r5, #4]
 800846c:	68aa      	ldr	r2, [r5, #8]
 800846e:	68eb      	ldr	r3, [r5, #12]
 8008470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008472:	7c2b      	ldrb	r3, [r5, #16]
 8008474:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8008476:	4a96      	ldr	r2, [pc, #600]	@ (80086d0 <loadMenuTexts+0x1258>)
 8008478:	4b96      	ldr	r3, [pc, #600]	@ (80086d4 <loadMenuTexts+0x125c>)
 800847a:	4614      	mov	r4, r2
 800847c:	461d      	mov	r5, r3
 800847e:	6828      	ldr	r0, [r5, #0]
 8008480:	6869      	ldr	r1, [r5, #4]
 8008482:	68aa      	ldr	r2, [r5, #8]
 8008484:	68eb      	ldr	r3, [r5, #12]
 8008486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008488:	7c2b      	ldrb	r3, [r5, #16]
 800848a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 800848c:	4a92      	ldr	r2, [pc, #584]	@ (80086d8 <loadMenuTexts+0x1260>)
 800848e:	4b93      	ldr	r3, [pc, #588]	@ (80086dc <loadMenuTexts+0x1264>)
 8008490:	4614      	mov	r4, r2
 8008492:	461d      	mov	r5, r3
 8008494:	6828      	ldr	r0, [r5, #0]
 8008496:	6869      	ldr	r1, [r5, #4]
 8008498:	68aa      	ldr	r2, [r5, #8]
 800849a:	68eb      	ldr	r3, [r5, #12]
 800849c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800849e:	7c2b      	ldrb	r3, [r5, #16]
 80084a0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 80084a2:	4a8f      	ldr	r2, [pc, #572]	@ (80086e0 <loadMenuTexts+0x1268>)
 80084a4:	4b8f      	ldr	r3, [pc, #572]	@ (80086e4 <loadMenuTexts+0x126c>)
 80084a6:	4614      	mov	r4, r2
 80084a8:	461d      	mov	r5, r3
 80084aa:	6828      	ldr	r0, [r5, #0]
 80084ac:	6869      	ldr	r1, [r5, #4]
 80084ae:	68aa      	ldr	r2, [r5, #8]
 80084b0:	68eb      	ldr	r3, [r5, #12]
 80084b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b4:	7c2b      	ldrb	r3, [r5, #16]
 80084b6:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 80084b8:	4a8b      	ldr	r2, [pc, #556]	@ (80086e8 <loadMenuTexts+0x1270>)
 80084ba:	4b8c      	ldr	r3, [pc, #560]	@ (80086ec <loadMenuTexts+0x1274>)
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	6828      	ldr	r0, [r5, #0]
 80084c2:	6869      	ldr	r1, [r5, #4]
 80084c4:	68aa      	ldr	r2, [r5, #8]
 80084c6:	68eb      	ldr	r3, [r5, #12]
 80084c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ca:	7c2b      	ldrb	r3, [r5, #16]
 80084cc:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80084ce:	4a88      	ldr	r2, [pc, #544]	@ (80086f0 <loadMenuTexts+0x1278>)
 80084d0:	4b88      	ldr	r3, [pc, #544]	@ (80086f4 <loadMenuTexts+0x127c>)
 80084d2:	4614      	mov	r4, r2
 80084d4:	461d      	mov	r5, r3
 80084d6:	6828      	ldr	r0, [r5, #0]
 80084d8:	6869      	ldr	r1, [r5, #4]
 80084da:	68aa      	ldr	r2, [r5, #8]
 80084dc:	68eb      	ldr	r3, [r5, #12]
 80084de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084e0:	7c2b      	ldrb	r3, [r5, #16]
 80084e2:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80084e4:	4a84      	ldr	r2, [pc, #528]	@ (80086f8 <loadMenuTexts+0x1280>)
 80084e6:	4b85      	ldr	r3, [pc, #532]	@ (80086fc <loadMenuTexts+0x1284>)
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	6828      	ldr	r0, [r5, #0]
 80084ee:	6869      	ldr	r1, [r5, #4]
 80084f0:	68aa      	ldr	r2, [r5, #8]
 80084f2:	68eb      	ldr	r3, [r5, #12]
 80084f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f6:	7c2b      	ldrb	r3, [r5, #16]
 80084f8:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80084fa:	4a81      	ldr	r2, [pc, #516]	@ (8008700 <loadMenuTexts+0x1288>)
 80084fc:	4b81      	ldr	r3, [pc, #516]	@ (8008704 <loadMenuTexts+0x128c>)
 80084fe:	4614      	mov	r4, r2
 8008500:	461d      	mov	r5, r3
 8008502:	6828      	ldr	r0, [r5, #0]
 8008504:	6869      	ldr	r1, [r5, #4]
 8008506:	68aa      	ldr	r2, [r5, #8]
 8008508:	68eb      	ldr	r3, [r5, #12]
 800850a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800850c:	7c2b      	ldrb	r3, [r5, #16]
 800850e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008510:	4a7d      	ldr	r2, [pc, #500]	@ (8008708 <loadMenuTexts+0x1290>)
 8008512:	4b7e      	ldr	r3, [pc, #504]	@ (800870c <loadMenuTexts+0x1294>)
 8008514:	4614      	mov	r4, r2
 8008516:	461d      	mov	r5, r3
 8008518:	6828      	ldr	r0, [r5, #0]
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	68aa      	ldr	r2, [r5, #8]
 800851e:	68eb      	ldr	r3, [r5, #12]
 8008520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008522:	7c2b      	ldrb	r3, [r5, #16]
 8008524:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008526:	4a7a      	ldr	r2, [pc, #488]	@ (8008710 <loadMenuTexts+0x1298>)
 8008528:	4b7a      	ldr	r3, [pc, #488]	@ (8008714 <loadMenuTexts+0x129c>)
 800852a:	4614      	mov	r4, r2
 800852c:	461d      	mov	r5, r3
 800852e:	6828      	ldr	r0, [r5, #0]
 8008530:	6869      	ldr	r1, [r5, #4]
 8008532:	68aa      	ldr	r2, [r5, #8]
 8008534:	68eb      	ldr	r3, [r5, #12]
 8008536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008538:	7c2b      	ldrb	r3, [r5, #16]
 800853a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 800853c:	4a76      	ldr	r2, [pc, #472]	@ (8008718 <loadMenuTexts+0x12a0>)
 800853e:	4b77      	ldr	r3, [pc, #476]	@ (800871c <loadMenuTexts+0x12a4>)
 8008540:	4614      	mov	r4, r2
 8008542:	461d      	mov	r5, r3
 8008544:	6828      	ldr	r0, [r5, #0]
 8008546:	6869      	ldr	r1, [r5, #4]
 8008548:	68aa      	ldr	r2, [r5, #8]
 800854a:	68eb      	ldr	r3, [r5, #12]
 800854c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800854e:	7c2b      	ldrb	r3, [r5, #16]
 8008550:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008552:	4a73      	ldr	r2, [pc, #460]	@ (8008720 <loadMenuTexts+0x12a8>)
 8008554:	4b73      	ldr	r3, [pc, #460]	@ (8008724 <loadMenuTexts+0x12ac>)
 8008556:	4614      	mov	r4, r2
 8008558:	461d      	mov	r5, r3
 800855a:	6828      	ldr	r0, [r5, #0]
 800855c:	6869      	ldr	r1, [r5, #4]
 800855e:	68aa      	ldr	r2, [r5, #8]
 8008560:	68eb      	ldr	r3, [r5, #12]
 8008562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008564:	7c2b      	ldrb	r3, [r5, #16]
 8008566:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008568:	4a6f      	ldr	r2, [pc, #444]	@ (8008728 <loadMenuTexts+0x12b0>)
 800856a:	4b70      	ldr	r3, [pc, #448]	@ (800872c <loadMenuTexts+0x12b4>)
 800856c:	4614      	mov	r4, r2
 800856e:	461d      	mov	r5, r3
 8008570:	6828      	ldr	r0, [r5, #0]
 8008572:	6869      	ldr	r1, [r5, #4]
 8008574:	68aa      	ldr	r2, [r5, #8]
 8008576:	68eb      	ldr	r3, [r5, #12]
 8008578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857a:	7c2b      	ldrb	r3, [r5, #16]
 800857c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800857e:	4a6c      	ldr	r2, [pc, #432]	@ (8008730 <loadMenuTexts+0x12b8>)
 8008580:	4b6c      	ldr	r3, [pc, #432]	@ (8008734 <loadMenuTexts+0x12bc>)
 8008582:	4614      	mov	r4, r2
 8008584:	461d      	mov	r5, r3
 8008586:	6828      	ldr	r0, [r5, #0]
 8008588:	6869      	ldr	r1, [r5, #4]
 800858a:	68aa      	ldr	r2, [r5, #8]
 800858c:	68eb      	ldr	r3, [r5, #12]
 800858e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008590:	7c2b      	ldrb	r3, [r5, #16]
 8008592:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8008594:	4a68      	ldr	r2, [pc, #416]	@ (8008738 <loadMenuTexts+0x12c0>)
 8008596:	4b69      	ldr	r3, [pc, #420]	@ (800873c <loadMenuTexts+0x12c4>)
 8008598:	4614      	mov	r4, r2
 800859a:	461d      	mov	r5, r3
 800859c:	6828      	ldr	r0, [r5, #0]
 800859e:	6869      	ldr	r1, [r5, #4]
 80085a0:	68aa      	ldr	r2, [r5, #8]
 80085a2:	68eb      	ldr	r3, [r5, #12]
 80085a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085a6:	7c2b      	ldrb	r3, [r5, #16]
 80085a8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80085aa:	4a65      	ldr	r2, [pc, #404]	@ (8008740 <loadMenuTexts+0x12c8>)
 80085ac:	4b65      	ldr	r3, [pc, #404]	@ (8008744 <loadMenuTexts+0x12cc>)
 80085ae:	4614      	mov	r4, r2
 80085b0:	461d      	mov	r5, r3
 80085b2:	6828      	ldr	r0, [r5, #0]
 80085b4:	6869      	ldr	r1, [r5, #4]
 80085b6:	68aa      	ldr	r2, [r5, #8]
 80085b8:	68eb      	ldr	r3, [r5, #12]
 80085ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085bc:	7c2b      	ldrb	r3, [r5, #16]
 80085be:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80085c0:	4a61      	ldr	r2, [pc, #388]	@ (8008748 <loadMenuTexts+0x12d0>)
 80085c2:	4b62      	ldr	r3, [pc, #392]	@ (800874c <loadMenuTexts+0x12d4>)
 80085c4:	4614      	mov	r4, r2
 80085c6:	461d      	mov	r5, r3
 80085c8:	6828      	ldr	r0, [r5, #0]
 80085ca:	6869      	ldr	r1, [r5, #4]
 80085cc:	68aa      	ldr	r2, [r5, #8]
 80085ce:	68eb      	ldr	r3, [r5, #12]
 80085d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085d2:	7c2b      	ldrb	r3, [r5, #16]
 80085d4:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80085d6:	4a5e      	ldr	r2, [pc, #376]	@ (8008750 <loadMenuTexts+0x12d8>)
 80085d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008754 <loadMenuTexts+0x12dc>)
 80085da:	4614      	mov	r4, r2
 80085dc:	461d      	mov	r5, r3
 80085de:	6828      	ldr	r0, [r5, #0]
 80085e0:	6869      	ldr	r1, [r5, #4]
 80085e2:	68aa      	ldr	r2, [r5, #8]
 80085e4:	68eb      	ldr	r3, [r5, #12]
 80085e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085e8:	7c2b      	ldrb	r3, [r5, #16]
 80085ea:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80085ec:	4a5a      	ldr	r2, [pc, #360]	@ (8008758 <loadMenuTexts+0x12e0>)
 80085ee:	4b5b      	ldr	r3, [pc, #364]	@ (800875c <loadMenuTexts+0x12e4>)
 80085f0:	4614      	mov	r4, r2
 80085f2:	461d      	mov	r5, r3
 80085f4:	6828      	ldr	r0, [r5, #0]
 80085f6:	6869      	ldr	r1, [r5, #4]
 80085f8:	68aa      	ldr	r2, [r5, #8]
 80085fa:	68eb      	ldr	r3, [r5, #12]
 80085fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085fe:	7c2b      	ldrb	r3, [r5, #16]
 8008600:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8008602:	4a57      	ldr	r2, [pc, #348]	@ (8008760 <loadMenuTexts+0x12e8>)
 8008604:	4b57      	ldr	r3, [pc, #348]	@ (8008764 <loadMenuTexts+0x12ec>)
 8008606:	4614      	mov	r4, r2
 8008608:	461d      	mov	r5, r3
 800860a:	6828      	ldr	r0, [r5, #0]
 800860c:	6869      	ldr	r1, [r5, #4]
 800860e:	68aa      	ldr	r2, [r5, #8]
 8008610:	68eb      	ldr	r3, [r5, #12]
 8008612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008614:	7c2b      	ldrb	r3, [r5, #16]
 8008616:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008618:	4a53      	ldr	r2, [pc, #332]	@ (8008768 <loadMenuTexts+0x12f0>)
 800861a:	4b54      	ldr	r3, [pc, #336]	@ (800876c <loadMenuTexts+0x12f4>)
 800861c:	4614      	mov	r4, r2
 800861e:	461d      	mov	r5, r3
 8008620:	6828      	ldr	r0, [r5, #0]
 8008622:	6869      	ldr	r1, [r5, #4]
 8008624:	68aa      	ldr	r2, [r5, #8]
 8008626:	68eb      	ldr	r3, [r5, #12]
 8008628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800862a:	7c2b      	ldrb	r3, [r5, #16]
 800862c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800862e:	4a50      	ldr	r2, [pc, #320]	@ (8008770 <loadMenuTexts+0x12f8>)
 8008630:	4b50      	ldr	r3, [pc, #320]	@ (8008774 <loadMenuTexts+0x12fc>)
 8008632:	4614      	mov	r4, r2
 8008634:	461d      	mov	r5, r3
 8008636:	6828      	ldr	r0, [r5, #0]
 8008638:	6869      	ldr	r1, [r5, #4]
 800863a:	68aa      	ldr	r2, [r5, #8]
 800863c:	68eb      	ldr	r3, [r5, #12]
 800863e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008640:	7c2b      	ldrb	r3, [r5, #16]
 8008642:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8008644:	4a4c      	ldr	r2, [pc, #304]	@ (8008778 <loadMenuTexts+0x1300>)
 8008646:	4b4d      	ldr	r3, [pc, #308]	@ (800877c <loadMenuTexts+0x1304>)
 8008648:	4614      	mov	r4, r2
 800864a:	461d      	mov	r5, r3
 800864c:	6828      	ldr	r0, [r5, #0]
 800864e:	6869      	ldr	r1, [r5, #4]
 8008650:	68aa      	ldr	r2, [r5, #8]
 8008652:	68eb      	ldr	r3, [r5, #12]
 8008654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008656:	7c2b      	ldrb	r3, [r5, #16]
 8008658:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800865a:	4a49      	ldr	r2, [pc, #292]	@ (8008780 <loadMenuTexts+0x1308>)
 800865c:	4b49      	ldr	r3, [pc, #292]	@ (8008784 <loadMenuTexts+0x130c>)
 800865e:	4614      	mov	r4, r2
 8008660:	461d      	mov	r5, r3
 8008662:	e091      	b.n	8008788 <loadMenuTexts+0x1310>
 8008664:	200009d4 	.word	0x200009d4
 8008668:	200013b8 	.word	0x200013b8
 800866c:	200009e8 	.word	0x200009e8
 8008670:	200013cc 	.word	0x200013cc
 8008674:	200009fc 	.word	0x200009fc
 8008678:	200013e0 	.word	0x200013e0
 800867c:	20000a10 	.word	0x20000a10
 8008680:	200013f4 	.word	0x200013f4
 8008684:	20000a24 	.word	0x20000a24
 8008688:	20001408 	.word	0x20001408
 800868c:	20000a38 	.word	0x20000a38
 8008690:	2000141c 	.word	0x2000141c
 8008694:	20000a4c 	.word	0x20000a4c
 8008698:	20001430 	.word	0x20001430
 800869c:	20000a60 	.word	0x20000a60
 80086a0:	20001444 	.word	0x20001444
 80086a4:	20000a74 	.word	0x20000a74
 80086a8:	20001458 	.word	0x20001458
 80086ac:	20000a88 	.word	0x20000a88
 80086b0:	2000146c 	.word	0x2000146c
 80086b4:	20000a9c 	.word	0x20000a9c
 80086b8:	20001480 	.word	0x20001480
 80086bc:	20000ab0 	.word	0x20000ab0
 80086c0:	20001494 	.word	0x20001494
 80086c4:	20000ac4 	.word	0x20000ac4
 80086c8:	200014a8 	.word	0x200014a8
 80086cc:	20000ad8 	.word	0x20000ad8
 80086d0:	200014bc 	.word	0x200014bc
 80086d4:	20000aec 	.word	0x20000aec
 80086d8:	200014d0 	.word	0x200014d0
 80086dc:	20000b00 	.word	0x20000b00
 80086e0:	200014e4 	.word	0x200014e4
 80086e4:	20000b14 	.word	0x20000b14
 80086e8:	200014f8 	.word	0x200014f8
 80086ec:	20000b28 	.word	0x20000b28
 80086f0:	2000150c 	.word	0x2000150c
 80086f4:	20000b3c 	.word	0x20000b3c
 80086f8:	20001520 	.word	0x20001520
 80086fc:	20000b50 	.word	0x20000b50
 8008700:	20001534 	.word	0x20001534
 8008704:	20000b64 	.word	0x20000b64
 8008708:	20001548 	.word	0x20001548
 800870c:	20000b78 	.word	0x20000b78
 8008710:	2000155c 	.word	0x2000155c
 8008714:	20000b8c 	.word	0x20000b8c
 8008718:	20001570 	.word	0x20001570
 800871c:	20000ba0 	.word	0x20000ba0
 8008720:	20001584 	.word	0x20001584
 8008724:	20000bb4 	.word	0x20000bb4
 8008728:	20001598 	.word	0x20001598
 800872c:	20000bc8 	.word	0x20000bc8
 8008730:	200015ac 	.word	0x200015ac
 8008734:	20000bdc 	.word	0x20000bdc
 8008738:	200015c0 	.word	0x200015c0
 800873c:	20000bf0 	.word	0x20000bf0
 8008740:	200015d4 	.word	0x200015d4
 8008744:	20000c04 	.word	0x20000c04
 8008748:	200015e8 	.word	0x200015e8
 800874c:	20000c18 	.word	0x20000c18
 8008750:	200015fc 	.word	0x200015fc
 8008754:	20000c2c 	.word	0x20000c2c
 8008758:	20001610 	.word	0x20001610
 800875c:	20000c40 	.word	0x20000c40
 8008760:	20001624 	.word	0x20001624
 8008764:	20000c54 	.word	0x20000c54
 8008768:	20001638 	.word	0x20001638
 800876c:	20000c68 	.word	0x20000c68
 8008770:	2000164c 	.word	0x2000164c
 8008774:	20000cf4 	.word	0x20000cf4
 8008778:	20001660 	.word	0x20001660
 800877c:	20000d08 	.word	0x20000d08
 8008780:	20001674 	.word	0x20001674
 8008784:	20000ccc 	.word	0x20000ccc
 8008788:	6828      	ldr	r0, [r5, #0]
 800878a:	6869      	ldr	r1, [r5, #4]
 800878c:	68aa      	ldr	r2, [r5, #8]
 800878e:	68eb      	ldr	r3, [r5, #12]
 8008790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008792:	7c2b      	ldrb	r3, [r5, #16]
 8008794:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8008796:	4a5b      	ldr	r2, [pc, #364]	@ (8008904 <loadMenuTexts+0x148c>)
 8008798:	4b5b      	ldr	r3, [pc, #364]	@ (8008908 <loadMenuTexts+0x1490>)
 800879a:	4614      	mov	r4, r2
 800879c:	461d      	mov	r5, r3
 800879e:	6828      	ldr	r0, [r5, #0]
 80087a0:	6869      	ldr	r1, [r5, #4]
 80087a2:	68aa      	ldr	r2, [r5, #8]
 80087a4:	68eb      	ldr	r3, [r5, #12]
 80087a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a8:	7c2b      	ldrb	r3, [r5, #16]
 80087aa:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80087ac:	4a57      	ldr	r2, [pc, #348]	@ (800890c <loadMenuTexts+0x1494>)
 80087ae:	4b58      	ldr	r3, [pc, #352]	@ (8008910 <loadMenuTexts+0x1498>)
 80087b0:	4614      	mov	r4, r2
 80087b2:	461d      	mov	r5, r3
 80087b4:	6828      	ldr	r0, [r5, #0]
 80087b6:	6869      	ldr	r1, [r5, #4]
 80087b8:	68aa      	ldr	r2, [r5, #8]
 80087ba:	68eb      	ldr	r3, [r5, #12]
 80087bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087be:	7c2b      	ldrb	r3, [r5, #16]
 80087c0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80087c2:	4a54      	ldr	r2, [pc, #336]	@ (8008914 <loadMenuTexts+0x149c>)
 80087c4:	4b54      	ldr	r3, [pc, #336]	@ (8008918 <loadMenuTexts+0x14a0>)
 80087c6:	4614      	mov	r4, r2
 80087c8:	461d      	mov	r5, r3
 80087ca:	6828      	ldr	r0, [r5, #0]
 80087cc:	6869      	ldr	r1, [r5, #4]
 80087ce:	68aa      	ldr	r2, [r5, #8]
 80087d0:	68eb      	ldr	r3, [r5, #12]
 80087d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d4:	7c2b      	ldrb	r3, [r5, #16]
 80087d6:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80087d8:	4a50      	ldr	r2, [pc, #320]	@ (800891c <loadMenuTexts+0x14a4>)
 80087da:	4b51      	ldr	r3, [pc, #324]	@ (8008920 <loadMenuTexts+0x14a8>)
 80087dc:	4614      	mov	r4, r2
 80087de:	461d      	mov	r5, r3
 80087e0:	6828      	ldr	r0, [r5, #0]
 80087e2:	6869      	ldr	r1, [r5, #4]
 80087e4:	68aa      	ldr	r2, [r5, #8]
 80087e6:	68eb      	ldr	r3, [r5, #12]
 80087e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ea:	7c2b      	ldrb	r3, [r5, #16]
 80087ec:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80087ee:	4a4d      	ldr	r2, [pc, #308]	@ (8008924 <loadMenuTexts+0x14ac>)
 80087f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008928 <loadMenuTexts+0x14b0>)
 80087f2:	4614      	mov	r4, r2
 80087f4:	461d      	mov	r5, r3
 80087f6:	6828      	ldr	r0, [r5, #0]
 80087f8:	6869      	ldr	r1, [r5, #4]
 80087fa:	68aa      	ldr	r2, [r5, #8]
 80087fc:	68eb      	ldr	r3, [r5, #12]
 80087fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008800:	7c2b      	ldrb	r3, [r5, #16]
 8008802:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8008804:	4a49      	ldr	r2, [pc, #292]	@ (800892c <loadMenuTexts+0x14b4>)
 8008806:	4b4a      	ldr	r3, [pc, #296]	@ (8008930 <loadMenuTexts+0x14b8>)
 8008808:	4614      	mov	r4, r2
 800880a:	461d      	mov	r5, r3
 800880c:	6828      	ldr	r0, [r5, #0]
 800880e:	6869      	ldr	r1, [r5, #4]
 8008810:	68aa      	ldr	r2, [r5, #8]
 8008812:	68eb      	ldr	r3, [r5, #12]
 8008814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008816:	7c2b      	ldrb	r3, [r5, #16]
 8008818:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800881a:	4a46      	ldr	r2, [pc, #280]	@ (8008934 <loadMenuTexts+0x14bc>)
 800881c:	4b46      	ldr	r3, [pc, #280]	@ (8008938 <loadMenuTexts+0x14c0>)
 800881e:	4614      	mov	r4, r2
 8008820:	461d      	mov	r5, r3
 8008822:	6828      	ldr	r0, [r5, #0]
 8008824:	6869      	ldr	r1, [r5, #4]
 8008826:	68aa      	ldr	r2, [r5, #8]
 8008828:	68eb      	ldr	r3, [r5, #12]
 800882a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800882c:	7c2b      	ldrb	r3, [r5, #16]
 800882e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008830:	4a42      	ldr	r2, [pc, #264]	@ (800893c <loadMenuTexts+0x14c4>)
 8008832:	4b43      	ldr	r3, [pc, #268]	@ (8008940 <loadMenuTexts+0x14c8>)
 8008834:	4614      	mov	r4, r2
 8008836:	461d      	mov	r5, r3
 8008838:	6828      	ldr	r0, [r5, #0]
 800883a:	6869      	ldr	r1, [r5, #4]
 800883c:	68aa      	ldr	r2, [r5, #8]
 800883e:	68eb      	ldr	r3, [r5, #12]
 8008840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008842:	7c2b      	ldrb	r3, [r5, #16]
 8008844:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008846:	4a3f      	ldr	r2, [pc, #252]	@ (8008944 <loadMenuTexts+0x14cc>)
 8008848:	4b3f      	ldr	r3, [pc, #252]	@ (8008948 <loadMenuTexts+0x14d0>)
 800884a:	4614      	mov	r4, r2
 800884c:	461d      	mov	r5, r3
 800884e:	6828      	ldr	r0, [r5, #0]
 8008850:	6869      	ldr	r1, [r5, #4]
 8008852:	68aa      	ldr	r2, [r5, #8]
 8008854:	68eb      	ldr	r3, [r5, #12]
 8008856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008858:	7c2b      	ldrb	r3, [r5, #16]
 800885a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 800885c:	4a3b      	ldr	r2, [pc, #236]	@ (800894c <loadMenuTexts+0x14d4>)
 800885e:	4b3c      	ldr	r3, [pc, #240]	@ (8008950 <loadMenuTexts+0x14d8>)
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	6828      	ldr	r0, [r5, #0]
 8008866:	6869      	ldr	r1, [r5, #4]
 8008868:	68aa      	ldr	r2, [r5, #8]
 800886a:	68eb      	ldr	r3, [r5, #12]
 800886c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800886e:	7c2b      	ldrb	r3, [r5, #16]
 8008870:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8008872:	4a38      	ldr	r2, [pc, #224]	@ (8008954 <loadMenuTexts+0x14dc>)
 8008874:	4b38      	ldr	r3, [pc, #224]	@ (8008958 <loadMenuTexts+0x14e0>)
 8008876:	4614      	mov	r4, r2
 8008878:	461d      	mov	r5, r3
 800887a:	6828      	ldr	r0, [r5, #0]
 800887c:	6869      	ldr	r1, [r5, #4]
 800887e:	68aa      	ldr	r2, [r5, #8]
 8008880:	68eb      	ldr	r3, [r5, #12]
 8008882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008884:	7c2b      	ldrb	r3, [r5, #16]
 8008886:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8008888:	4a34      	ldr	r2, [pc, #208]	@ (800895c <loadMenuTexts+0x14e4>)
 800888a:	4b35      	ldr	r3, [pc, #212]	@ (8008960 <loadMenuTexts+0x14e8>)
 800888c:	4614      	mov	r4, r2
 800888e:	461d      	mov	r5, r3
 8008890:	6828      	ldr	r0, [r5, #0]
 8008892:	6869      	ldr	r1, [r5, #4]
 8008894:	68aa      	ldr	r2, [r5, #8]
 8008896:	68eb      	ldr	r3, [r5, #12]
 8008898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889a:	7c2b      	ldrb	r3, [r5, #16]
 800889c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800889e:	4a31      	ldr	r2, [pc, #196]	@ (8008964 <loadMenuTexts+0x14ec>)
 80088a0:	4b31      	ldr	r3, [pc, #196]	@ (8008968 <loadMenuTexts+0x14f0>)
 80088a2:	4614      	mov	r4, r2
 80088a4:	461d      	mov	r5, r3
 80088a6:	6828      	ldr	r0, [r5, #0]
 80088a8:	6869      	ldr	r1, [r5, #4]
 80088aa:	68aa      	ldr	r2, [r5, #8]
 80088ac:	68eb      	ldr	r3, [r5, #12]
 80088ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b0:	7c2b      	ldrb	r3, [r5, #16]
 80088b2:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80088b4:	4a2d      	ldr	r2, [pc, #180]	@ (800896c <loadMenuTexts+0x14f4>)
 80088b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008970 <loadMenuTexts+0x14f8>)
 80088b8:	4614      	mov	r4, r2
 80088ba:	461d      	mov	r5, r3
 80088bc:	6828      	ldr	r0, [r5, #0]
 80088be:	6869      	ldr	r1, [r5, #4]
 80088c0:	68aa      	ldr	r2, [r5, #8]
 80088c2:	68eb      	ldr	r3, [r5, #12]
 80088c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088c6:	7c2b      	ldrb	r3, [r5, #16]
 80088c8:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80088ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008974 <loadMenuTexts+0x14fc>)
 80088cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008978 <loadMenuTexts+0x1500>)
 80088ce:	4614      	mov	r4, r2
 80088d0:	461d      	mov	r5, r3
 80088d2:	6828      	ldr	r0, [r5, #0]
 80088d4:	6869      	ldr	r1, [r5, #4]
 80088d6:	68aa      	ldr	r2, [r5, #8]
 80088d8:	68eb      	ldr	r3, [r5, #12]
 80088da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088dc:	7c2b      	ldrb	r3, [r5, #16]
 80088de:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80088e0:	4a26      	ldr	r2, [pc, #152]	@ (800897c <loadMenuTexts+0x1504>)
 80088e2:	4b27      	ldr	r3, [pc, #156]	@ (8008980 <loadMenuTexts+0x1508>)
 80088e4:	4614      	mov	r4, r2
 80088e6:	461d      	mov	r5, r3
 80088e8:	6828      	ldr	r0, [r5, #0]
 80088ea:	6869      	ldr	r1, [r5, #4]
 80088ec:	68aa      	ldr	r2, [r5, #8]
 80088ee:	68eb      	ldr	r3, [r5, #12]
 80088f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f2:	7c2b      	ldrb	r3, [r5, #16]
 80088f4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80088f6:	f000 f845 	bl	8008984 <menuVariableFinisher>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bdb0      	pop	{r4, r5, r7, pc}
 8008902:	bf00      	nop
 8008904:	20001688 	.word	0x20001688
 8008908:	20000ce0 	.word	0x20000ce0
 800890c:	2000169c 	.word	0x2000169c
 8008910:	20000d44 	.word	0x20000d44
 8008914:	200016b0 	.word	0x200016b0
 8008918:	20000d58 	.word	0x20000d58
 800891c:	200016c4 	.word	0x200016c4
 8008920:	20000d94 	.word	0x20000d94
 8008924:	200016d8 	.word	0x200016d8
 8008928:	20000da8 	.word	0x20000da8
 800892c:	200016ec 	.word	0x200016ec
 8008930:	20000de4 	.word	0x20000de4
 8008934:	20001700 	.word	0x20001700
 8008938:	20000df8 	.word	0x20000df8
 800893c:	20001714 	.word	0x20001714
 8008940:	20000e20 	.word	0x20000e20
 8008944:	20001728 	.word	0x20001728
 8008948:	20000e48 	.word	0x20000e48
 800894c:	2000173c 	.word	0x2000173c
 8008950:	20000e70 	.word	0x20000e70
 8008954:	20001750 	.word	0x20001750
 8008958:	20000e98 	.word	0x20000e98
 800895c:	20001764 	.word	0x20001764
 8008960:	20000ec0 	.word	0x20000ec0
 8008964:	20001778 	.word	0x20001778
 8008968:	20000ee8 	.word	0x20000ee8
 800896c:	2000178c 	.word	0x2000178c
 8008970:	20000f10 	.word	0x20000f10
 8008974:	200017a0 	.word	0x200017a0
 8008978:	20000f38 	.word	0x20000f38
 800897c:	200017b4 	.word	0x200017b4
 8008980:	20000f60 	.word	0x20000f60

08008984 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8008988:	4b99      	ldr	r3, [pc, #612]	@ (8008bf0 <menuVariableFinisher+0x26c>)
 800898a:	2200      	movs	r2, #0
 800898c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800898e:	4b99      	ldr	r3, [pc, #612]	@ (8008bf4 <menuVariableFinisher+0x270>)
 8008990:	2200      	movs	r2, #0
 8008992:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8008994:	4b98      	ldr	r3, [pc, #608]	@ (8008bf8 <menuVariableFinisher+0x274>)
 8008996:	2200      	movs	r2, #0
 8008998:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800899a:	4b98      	ldr	r3, [pc, #608]	@ (8008bfc <menuVariableFinisher+0x278>)
 800899c:	2200      	movs	r2, #0
 800899e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80089a0:	4b97      	ldr	r3, [pc, #604]	@ (8008c00 <menuVariableFinisher+0x27c>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80089a6:	4b97      	ldr	r3, [pc, #604]	@ (8008c04 <menuVariableFinisher+0x280>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80089ac:	4b96      	ldr	r3, [pc, #600]	@ (8008c08 <menuVariableFinisher+0x284>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80089b2:	4b96      	ldr	r3, [pc, #600]	@ (8008c0c <menuVariableFinisher+0x288>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80089b8:	4b95      	ldr	r3, [pc, #596]	@ (8008c10 <menuVariableFinisher+0x28c>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80089be:	4b95      	ldr	r3, [pc, #596]	@ (8008c14 <menuVariableFinisher+0x290>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80089c4:	4b94      	ldr	r3, [pc, #592]	@ (8008c18 <menuVariableFinisher+0x294>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80089ca:	4b94      	ldr	r3, [pc, #592]	@ (8008c1c <menuVariableFinisher+0x298>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80089d0:	4b93      	ldr	r3, [pc, #588]	@ (8008c20 <menuVariableFinisher+0x29c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80089d6:	4b93      	ldr	r3, [pc, #588]	@ (8008c24 <menuVariableFinisher+0x2a0>)
 80089d8:	2200      	movs	r2, #0
 80089da:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80089dc:	4b92      	ldr	r3, [pc, #584]	@ (8008c28 <menuVariableFinisher+0x2a4>)
 80089de:	2200      	movs	r2, #0
 80089e0:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80089e2:	4b92      	ldr	r3, [pc, #584]	@ (8008c2c <menuVariableFinisher+0x2a8>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80089e8:	4b91      	ldr	r3, [pc, #580]	@ (8008c30 <menuVariableFinisher+0x2ac>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80089ee:	4b91      	ldr	r3, [pc, #580]	@ (8008c34 <menuVariableFinisher+0x2b0>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80089f4:	4b90      	ldr	r3, [pc, #576]	@ (8008c38 <menuVariableFinisher+0x2b4>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80089fa:	4b90      	ldr	r3, [pc, #576]	@ (8008c3c <menuVariableFinisher+0x2b8>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8008a00:	4b8f      	ldr	r3, [pc, #572]	@ (8008c40 <menuVariableFinisher+0x2bc>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8008a06:	4b8f      	ldr	r3, [pc, #572]	@ (8008c44 <menuVariableFinisher+0x2c0>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8008c48 <menuVariableFinisher+0x2c4>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8008a12:	4b8e      	ldr	r3, [pc, #568]	@ (8008c4c <menuVariableFinisher+0x2c8>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8008a18:	4b8d      	ldr	r3, [pc, #564]	@ (8008c50 <menuVariableFinisher+0x2cc>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8008a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c54 <menuVariableFinisher+0x2d0>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008a24:	4b8c      	ldr	r3, [pc, #560]	@ (8008c58 <menuVariableFinisher+0x2d4>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8008a2a:	4b8c      	ldr	r3, [pc, #560]	@ (8008c5c <menuVariableFinisher+0x2d8>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8008a30:	4b8b      	ldr	r3, [pc, #556]	@ (8008c60 <menuVariableFinisher+0x2dc>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8008a36:	4b8b      	ldr	r3, [pc, #556]	@ (8008c64 <menuVariableFinisher+0x2e0>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8008c68 <menuVariableFinisher+0x2e4>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8008a42:	4b8a      	ldr	r3, [pc, #552]	@ (8008c6c <menuVariableFinisher+0x2e8>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8008a48:	4b89      	ldr	r3, [pc, #548]	@ (8008c70 <menuVariableFinisher+0x2ec>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8008a4e:	4b89      	ldr	r3, [pc, #548]	@ (8008c74 <menuVariableFinisher+0x2f0>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008a54:	4b88      	ldr	r3, [pc, #544]	@ (8008c78 <menuVariableFinisher+0x2f4>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8008a5a:	4b88      	ldr	r3, [pc, #544]	@ (8008c7c <menuVariableFinisher+0x2f8>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008a60:	4b87      	ldr	r3, [pc, #540]	@ (8008c80 <menuVariableFinisher+0x2fc>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8008a66:	4b87      	ldr	r3, [pc, #540]	@ (8008c84 <menuVariableFinisher+0x300>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008a6c:	4b86      	ldr	r3, [pc, #536]	@ (8008c88 <menuVariableFinisher+0x304>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8008a72:	4b86      	ldr	r3, [pc, #536]	@ (8008c8c <menuVariableFinisher+0x308>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8008a78:	4b85      	ldr	r3, [pc, #532]	@ (8008c90 <menuVariableFinisher+0x30c>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8008a7e:	4b85      	ldr	r3, [pc, #532]	@ (8008c94 <menuVariableFinisher+0x310>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8008a84:	4b84      	ldr	r3, [pc, #528]	@ (8008c98 <menuVariableFinisher+0x314>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8008a8a:	4b84      	ldr	r3, [pc, #528]	@ (8008c9c <menuVariableFinisher+0x318>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8008a90:	4b83      	ldr	r3, [pc, #524]	@ (8008ca0 <menuVariableFinisher+0x31c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8008a96:	4b83      	ldr	r3, [pc, #524]	@ (8008ca4 <menuVariableFinisher+0x320>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8008a9c:	4b82      	ldr	r3, [pc, #520]	@ (8008ca8 <menuVariableFinisher+0x324>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8008aa2:	4b82      	ldr	r3, [pc, #520]	@ (8008cac <menuVariableFinisher+0x328>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8008aa8:	4b81      	ldr	r3, [pc, #516]	@ (8008cb0 <menuVariableFinisher+0x32c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8008aae:	4b81      	ldr	r3, [pc, #516]	@ (8008cb4 <menuVariableFinisher+0x330>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8008ab4:	4b80      	ldr	r3, [pc, #512]	@ (8008cb8 <menuVariableFinisher+0x334>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8008aba:	4b80      	ldr	r3, [pc, #512]	@ (8008cbc <menuVariableFinisher+0x338>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8008ac0:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc0 <menuVariableFinisher+0x33c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8008ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc4 <menuVariableFinisher+0x340>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8008acc:	4b7e      	ldr	r3, [pc, #504]	@ (8008cc8 <menuVariableFinisher+0x344>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8008ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8008ccc <menuVariableFinisher+0x348>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8008ad8:	4b7d      	ldr	r3, [pc, #500]	@ (8008cd0 <menuVariableFinisher+0x34c>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8008ade:	4b7d      	ldr	r3, [pc, #500]	@ (8008cd4 <menuVariableFinisher+0x350>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8008ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd8 <menuVariableFinisher+0x354>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8008aea:	4b7c      	ldr	r3, [pc, #496]	@ (8008cdc <menuVariableFinisher+0x358>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8008af0:	4b7b      	ldr	r3, [pc, #492]	@ (8008ce0 <menuVariableFinisher+0x35c>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8008af6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ce4 <menuVariableFinisher+0x360>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8008afc:	4b7a      	ldr	r3, [pc, #488]	@ (8008ce8 <menuVariableFinisher+0x364>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8008b02:	4b7a      	ldr	r3, [pc, #488]	@ (8008cec <menuVariableFinisher+0x368>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8008b08:	4b79      	ldr	r3, [pc, #484]	@ (8008cf0 <menuVariableFinisher+0x36c>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8008b0e:	4b79      	ldr	r3, [pc, #484]	@ (8008cf4 <menuVariableFinisher+0x370>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8008b14:	4b78      	ldr	r3, [pc, #480]	@ (8008cf8 <menuVariableFinisher+0x374>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8008b1a:	4b78      	ldr	r3, [pc, #480]	@ (8008cfc <menuVariableFinisher+0x378>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008b20:	4b77      	ldr	r3, [pc, #476]	@ (8008d00 <menuVariableFinisher+0x37c>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8008b26:	4b77      	ldr	r3, [pc, #476]	@ (8008d04 <menuVariableFinisher+0x380>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008b2c:	4b76      	ldr	r3, [pc, #472]	@ (8008d08 <menuVariableFinisher+0x384>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008b32:	4b76      	ldr	r3, [pc, #472]	@ (8008d0c <menuVariableFinisher+0x388>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8008b38:	4b75      	ldr	r3, [pc, #468]	@ (8008d10 <menuVariableFinisher+0x38c>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008b3e:	4b75      	ldr	r3, [pc, #468]	@ (8008d14 <menuVariableFinisher+0x390>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008b44:	4b74      	ldr	r3, [pc, #464]	@ (8008d18 <menuVariableFinisher+0x394>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8008b4a:	4b74      	ldr	r3, [pc, #464]	@ (8008d1c <menuVariableFinisher+0x398>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008b50:	4b73      	ldr	r3, [pc, #460]	@ (8008d20 <menuVariableFinisher+0x39c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8008b56:	4b73      	ldr	r3, [pc, #460]	@ (8008d24 <menuVariableFinisher+0x3a0>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008b5c:	4b72      	ldr	r3, [pc, #456]	@ (8008d28 <menuVariableFinisher+0x3a4>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008b62:	4b72      	ldr	r3, [pc, #456]	@ (8008d2c <menuVariableFinisher+0x3a8>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8008b68:	4b71      	ldr	r3, [pc, #452]	@ (8008d30 <menuVariableFinisher+0x3ac>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008b6e:	4b71      	ldr	r3, [pc, #452]	@ (8008d34 <menuVariableFinisher+0x3b0>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8008b74:	4b70      	ldr	r3, [pc, #448]	@ (8008d38 <menuVariableFinisher+0x3b4>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8008b7a:	4b70      	ldr	r3, [pc, #448]	@ (8008d3c <menuVariableFinisher+0x3b8>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8008b80:	4b6f      	ldr	r3, [pc, #444]	@ (8008d40 <menuVariableFinisher+0x3bc>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8008b86:	4b6f      	ldr	r3, [pc, #444]	@ (8008d44 <menuVariableFinisher+0x3c0>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8008b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8008d48 <menuVariableFinisher+0x3c4>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8008b92:	4b6e      	ldr	r3, [pc, #440]	@ (8008d4c <menuVariableFinisher+0x3c8>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8008b98:	4b6d      	ldr	r3, [pc, #436]	@ (8008d50 <menuVariableFinisher+0x3cc>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8008b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d54 <menuVariableFinisher+0x3d0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8008ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8008d58 <menuVariableFinisher+0x3d4>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8008baa:	4b6c      	ldr	r3, [pc, #432]	@ (8008d5c <menuVariableFinisher+0x3d8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8008d60 <menuVariableFinisher+0x3dc>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8008bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8008d64 <menuVariableFinisher+0x3e0>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8008d68 <menuVariableFinisher+0x3e4>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8008d6c <menuVariableFinisher+0x3e8>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008bc8:	4b69      	ldr	r3, [pc, #420]	@ (8008d70 <menuVariableFinisher+0x3ec>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8008bce:	4b69      	ldr	r3, [pc, #420]	@ (8008d74 <menuVariableFinisher+0x3f0>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8008bd4:	4b68      	ldr	r3, [pc, #416]	@ (8008d78 <menuVariableFinisher+0x3f4>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8008bda:	4b68      	ldr	r3, [pc, #416]	@ (8008d7c <menuVariableFinisher+0x3f8>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8008be0:	4b67      	ldr	r3, [pc, #412]	@ (8008d80 <menuVariableFinisher+0x3fc>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	741a      	strb	r2, [r3, #16]
}
 8008be6:	bf00      	nop
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	2000009c 	.word	0x2000009c
 8008bf4:	200000b0 	.word	0x200000b0
 8008bf8:	200000c4 	.word	0x200000c4
 8008bfc:	200000d8 	.word	0x200000d8
 8008c00:	200000ec 	.word	0x200000ec
 8008c04:	20000100 	.word	0x20000100
 8008c08:	20000114 	.word	0x20000114
 8008c0c:	20000128 	.word	0x20000128
 8008c10:	2000013c 	.word	0x2000013c
 8008c14:	20000150 	.word	0x20000150
 8008c18:	20000164 	.word	0x20000164
 8008c1c:	20000178 	.word	0x20000178
 8008c20:	200010d4 	.word	0x200010d4
 8008c24:	200010e8 	.word	0x200010e8
 8008c28:	200010fc 	.word	0x200010fc
 8008c2c:	20001110 	.word	0x20001110
 8008c30:	20001124 	.word	0x20001124
 8008c34:	20001138 	.word	0x20001138
 8008c38:	2000114c 	.word	0x2000114c
 8008c3c:	20001160 	.word	0x20001160
 8008c40:	20001174 	.word	0x20001174
 8008c44:	20001188 	.word	0x20001188
 8008c48:	2000119c 	.word	0x2000119c
 8008c4c:	200011b0 	.word	0x200011b0
 8008c50:	200011c4 	.word	0x200011c4
 8008c54:	200011d8 	.word	0x200011d8
 8008c58:	200011ec 	.word	0x200011ec
 8008c5c:	20001200 	.word	0x20001200
 8008c60:	20001214 	.word	0x20001214
 8008c64:	20001228 	.word	0x20001228
 8008c68:	2000123c 	.word	0x2000123c
 8008c6c:	20001250 	.word	0x20001250
 8008c70:	20001264 	.word	0x20001264
 8008c74:	20001278 	.word	0x20001278
 8008c78:	2000128c 	.word	0x2000128c
 8008c7c:	200012a0 	.word	0x200012a0
 8008c80:	200012b4 	.word	0x200012b4
 8008c84:	200012c8 	.word	0x200012c8
 8008c88:	200012dc 	.word	0x200012dc
 8008c8c:	200012f0 	.word	0x200012f0
 8008c90:	20001304 	.word	0x20001304
 8008c94:	20001318 	.word	0x20001318
 8008c98:	2000132c 	.word	0x2000132c
 8008c9c:	20001340 	.word	0x20001340
 8008ca0:	20001354 	.word	0x20001354
 8008ca4:	20001368 	.word	0x20001368
 8008ca8:	2000137c 	.word	0x2000137c
 8008cac:	20001390 	.word	0x20001390
 8008cb0:	200013a4 	.word	0x200013a4
 8008cb4:	200013b8 	.word	0x200013b8
 8008cb8:	200013cc 	.word	0x200013cc
 8008cbc:	200013e0 	.word	0x200013e0
 8008cc0:	200013f4 	.word	0x200013f4
 8008cc4:	20001408 	.word	0x20001408
 8008cc8:	2000141c 	.word	0x2000141c
 8008ccc:	20001430 	.word	0x20001430
 8008cd0:	20001444 	.word	0x20001444
 8008cd4:	20001458 	.word	0x20001458
 8008cd8:	2000146c 	.word	0x2000146c
 8008cdc:	20001480 	.word	0x20001480
 8008ce0:	20001494 	.word	0x20001494
 8008ce4:	200014a8 	.word	0x200014a8
 8008ce8:	200014bc 	.word	0x200014bc
 8008cec:	200014d0 	.word	0x200014d0
 8008cf0:	200014e4 	.word	0x200014e4
 8008cf4:	200014f8 	.word	0x200014f8
 8008cf8:	2000150c 	.word	0x2000150c
 8008cfc:	20001520 	.word	0x20001520
 8008d00:	20001534 	.word	0x20001534
 8008d04:	20001548 	.word	0x20001548
 8008d08:	2000155c 	.word	0x2000155c
 8008d0c:	20001570 	.word	0x20001570
 8008d10:	20001584 	.word	0x20001584
 8008d14:	20001598 	.word	0x20001598
 8008d18:	200015ac 	.word	0x200015ac
 8008d1c:	200015c0 	.word	0x200015c0
 8008d20:	200015d4 	.word	0x200015d4
 8008d24:	200015e8 	.word	0x200015e8
 8008d28:	200015fc 	.word	0x200015fc
 8008d2c:	20001610 	.word	0x20001610
 8008d30:	20001624 	.word	0x20001624
 8008d34:	20001638 	.word	0x20001638
 8008d38:	2000164c 	.word	0x2000164c
 8008d3c:	20001660 	.word	0x20001660
 8008d40:	20001674 	.word	0x20001674
 8008d44:	20001688 	.word	0x20001688
 8008d48:	2000169c 	.word	0x2000169c
 8008d4c:	200016b0 	.word	0x200016b0
 8008d50:	200016c4 	.word	0x200016c4
 8008d54:	200016d8 	.word	0x200016d8
 8008d58:	200016ec 	.word	0x200016ec
 8008d5c:	20001700 	.word	0x20001700
 8008d60:	20001714 	.word	0x20001714
 8008d64:	20001728 	.word	0x20001728
 8008d68:	2000173c 	.word	0x2000173c
 8008d6c:	20001750 	.word	0x20001750
 8008d70:	20001764 	.word	0x20001764
 8008d74:	20001778 	.word	0x20001778
 8008d78:	2000178c 	.word	0x2000178c
 8008d7c:	200017a0 	.word	0x200017a0
 8008d80:	200017b4 	.word	0x200017b4

08008d84 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008d8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008d8e:	f001 fc0d 	bl	800a5ac <HAL_Delay>
	int confirmationVal = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008d96:	e012      	b.n	8008dbe <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008d98:	4a12      	ldr	r2, [pc, #72]	@ (8008de4 <takeMachineIDWithConfirmation+0x60>)
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	f000 fee3 	bl	8009b68 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008da2:	4a11      	ldr	r2, [pc, #68]	@ (8008de8 <takeMachineIDWithConfirmation+0x64>)
 8008da4:	2101      	movs	r1, #1
 8008da6:	2002      	movs	r0, #2
 8008da8:	f000 fede 	bl	8009b68 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008dac:	2102      	movs	r1, #2
 8008dae:	480f      	ldr	r0, [pc, #60]	@ (8008dec <takeMachineIDWithConfirmation+0x68>)
 8008db0:	f002 f9cc 	bl	800b14c <HAL_GPIO_ReadPin>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0e9      	beq.n	8008d98 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008dc4:	f000 f814 	bl	8008df0 <takeMachineID>

	convertArrays(1);
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7f7 fd6d 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 8008dce:	2032      	movs	r0, #50	@ 0x32
 8008dd0:	f001 fbec 	bl	800a5ac <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7f8 f90b 	bl	8000ff0 <printCredentials>
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	2000178c 	.word	0x2000178c
 8008de8:	200017a0 	.word	0x200017a0
 8008dec:	40010800 	.word	0x40010800

08008df0 <takeMachineID>:

void takeMachineID() {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8008df6:	2001      	movs	r0, #1
 8008df8:	f000 ff14 	bl	8009c24 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008dfc:	220c      	movs	r2, #12
 8008dfe:	2100      	movs	r1, #0
 8008e00:	48a2      	ldr	r0, [pc, #648]	@ (800908c <takeMachineID+0x29c>)
 8008e02:	f005 f9dd 	bl	800e1c0 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8008e06:	2305      	movs	r3, #5
 8008e08:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008e12:	4b9f      	ldr	r3, [pc, #636]	@ (8009090 <takeMachineID+0x2a0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f7f7 ff78 	bl	8000d10 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008e20:	2108      	movs	r1, #8
 8008e22:	489c      	ldr	r0, [pc, #624]	@ (8009094 <takeMachineID+0x2a4>)
 8008e24:	f002 f992 	bl	800b14c <HAL_GPIO_ReadPin>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d128      	bne.n	8008e80 <takeMachineID+0x90>
        	lcd_cursor(0);
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f000 fef8 	bl	8009c24 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008e34:	f000 fcda 	bl	80097ec <checkEEPROM4ID>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d00e      	beq.n	8008e5c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008e3e:	4a96      	ldr	r2, [pc, #600]	@ (8009098 <takeMachineID+0x2a8>)
 8008e40:	2101      	movs	r1, #1
 8008e42:	2001      	movs	r0, #1
 8008e44:	f000 fe90 	bl	8009b68 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008e48:	4a94      	ldr	r2, [pc, #592]	@ (800909c <takeMachineID+0x2ac>)
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	2002      	movs	r0, #2
 8008e4e:	f000 fe8b 	bl	8009b68 <lcd_print>
        		HAL_Delay(1250);
 8008e52:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008e56:	f001 fba9 	bl	800a5ac <HAL_Delay>

        		goto mainSection;
 8008e5a:	e7cc      	b.n	8008df6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008e5c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	236e      	movs	r3, #110	@ 0x6e
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	4b8e      	ldr	r3, [pc, #568]	@ (80090a0 <takeMachineID+0x2b0>)
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	236e      	movs	r3, #110	@ 0x6e
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	21a0      	movs	r1, #160	@ 0xa0
 8008e70:	488c      	ldr	r0, [pc, #560]	@ (80090a4 <takeMachineID+0x2b4>)
 8008e72:	f002 fc25 	bl	800b6c0 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8008e76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008e7a:	f001 fb97 	bl	800a5ac <HAL_Delay>

            	break;
 8008e7e:	e132      	b.n	80090e6 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008e80:	2101      	movs	r1, #1
 8008e82:	4884      	ldr	r0, [pc, #528]	@ (8009094 <takeMachineID+0x2a4>)
 8008e84:	f002 f962 	bl	800b14c <HAL_GPIO_ReadPin>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d111      	bne.n	8008eb2 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b07      	cmp	r3, #7
 8008e92:	d102      	bne.n	8008e9a <takeMachineID+0xaa>
        		cursorPosition = 10;
 8008e94:	230a      	movs	r3, #10
 8008e96:	60bb      	str	r3, [r7, #8]
 8008e98:	e008      	b.n	8008eac <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b0e      	cmp	r3, #14
 8008e9e:	d102      	bne.n	8008ea6 <takeMachineID+0xb6>
                cursorPosition = 3;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	60bb      	str	r3, [r7, #8]
 8008ea4:	e002      	b.n	8008eac <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008eac:	2096      	movs	r0, #150	@ 0x96
 8008eae:	f001 fb7d 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008eb2:	2108      	movs	r1, #8
 8008eb4:	487c      	ldr	r0, [pc, #496]	@ (80090a8 <takeMachineID+0x2b8>)
 8008eb6:	f002 f949 	bl	800b14c <HAL_GPIO_ReadPin>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d111      	bne.n	8008ee4 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d102      	bne.n	8008ecc <takeMachineID+0xdc>
                cursorPosition = 14;
 8008ec6:	230e      	movs	r3, #14
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	e008      	b.n	8008ede <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	d102      	bne.n	8008ed8 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8008ed2:	2307      	movs	r3, #7
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	e002      	b.n	8008ede <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8008ede:	20fa      	movs	r0, #250	@ 0xfa
 8008ee0:	f001 fb64 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008ee4:	2102      	movs	r1, #2
 8008ee6:	486b      	ldr	r0, [pc, #428]	@ (8009094 <takeMachineID+0x2a4>)
 8008ee8:	f002 f930 	bl	800b14c <HAL_GPIO_ReadPin>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	f040 80a1 	bne.w	8009036 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d10a      	bne.n	8008f10 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8008efa:	4a64      	ldr	r2, [pc, #400]	@ (800908c <takeMachineID+0x29c>)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4413      	add	r3, r2
 8008f00:	2230      	movs	r2, #48	@ 0x30
 8008f02:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008f04:	4a66      	ldr	r2, [pc, #408]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	4413      	add	r3, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e07c      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d10a      	bne.n	8008f2c <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8008f16:	4a5d      	ldr	r2, [pc, #372]	@ (800908c <takeMachineID+0x29c>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	2231      	movs	r2, #49	@ 0x31
 8008f1e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008f20:	4a5f      	ldr	r2, [pc, #380]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	4413      	add	r3, r2
 8008f26:	2201      	movs	r2, #1
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e06e      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d10a      	bne.n	8008f48 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8008f32:	4a56      	ldr	r2, [pc, #344]	@ (800908c <takeMachineID+0x29c>)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	2232      	movs	r2, #50	@ 0x32
 8008f3a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008f3c:	4a58      	ldr	r2, [pc, #352]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	e060      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b06      	cmp	r3, #6
 8008f4c:	d10a      	bne.n	8008f64 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8008f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800908c <takeMachineID+0x29c>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	2233      	movs	r2, #51	@ 0x33
 8008f56:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008f58:	4a51      	ldr	r2, [pc, #324]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	2203      	movs	r2, #3
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e052      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	d10a      	bne.n	8008f80 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8008f6a:	4a48      	ldr	r2, [pc, #288]	@ (800908c <takeMachineID+0x29c>)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	2234      	movs	r2, #52	@ 0x34
 8008f72:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008f74:	4a4a      	ldr	r2, [pc, #296]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	4413      	add	r3, r2
 8008f7a:	2204      	movs	r2, #4
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	e044      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b0a      	cmp	r3, #10
 8008f84:	d10a      	bne.n	8008f9c <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8008f86:	4a41      	ldr	r2, [pc, #260]	@ (800908c <takeMachineID+0x29c>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	2235      	movs	r2, #53	@ 0x35
 8008f8e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008f90:	4a43      	ldr	r2, [pc, #268]	@ (80090a0 <takeMachineID+0x2b0>)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	2205      	movs	r2, #5
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	e036      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b0b      	cmp	r3, #11
 8008fa0:	d10a      	bne.n	8008fb8 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8008fa2:	4a3a      	ldr	r2, [pc, #232]	@ (800908c <takeMachineID+0x29c>)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	2236      	movs	r2, #54	@ 0x36
 8008faa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008fac:	4a3c      	ldr	r2, [pc, #240]	@ (80090a0 <takeMachineID+0x2b0>)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	e028      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b0c      	cmp	r3, #12
 8008fbc:	d10a      	bne.n	8008fd4 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8008fbe:	4a33      	ldr	r2, [pc, #204]	@ (800908c <takeMachineID+0x29c>)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	2237      	movs	r2, #55	@ 0x37
 8008fc6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008fc8:	4a35      	ldr	r2, [pc, #212]	@ (80090a0 <takeMachineID+0x2b0>)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	4413      	add	r3, r2
 8008fce:	2207      	movs	r2, #7
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	e01a      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b0d      	cmp	r3, #13
 8008fd8:	d10a      	bne.n	8008ff0 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8008fda:	4a2c      	ldr	r2, [pc, #176]	@ (800908c <takeMachineID+0x29c>)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4413      	add	r3, r2
 8008fe0:	2238      	movs	r2, #56	@ 0x38
 8008fe2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80090a0 <takeMachineID+0x2b0>)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	4413      	add	r3, r2
 8008fea:	2208      	movs	r2, #8
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e00c      	b.n	800900a <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b0e      	cmp	r3, #14
 8008ff4:	d109      	bne.n	800900a <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8008ff6:	4a25      	ldr	r2, [pc, #148]	@ (800908c <takeMachineID+0x29c>)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	2239      	movs	r2, #57	@ 0x39
 8008ffe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8009000:	4a27      	ldr	r2, [pc, #156]	@ (80090a0 <takeMachineID+0x2b0>)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	4413      	add	r3, r2
 8009006:	2209      	movs	r2, #9
 8009008:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	b2d9      	uxtb	r1, r3
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <takeMachineID+0x29c>)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	2001      	movs	r0, #1
 800901a:	f000 fdba 	bl	8009b92 <lcd_print_char>

        	writeLoc++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3301      	adds	r3, #1
 8009028:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8009030:	2096      	movs	r0, #150	@ 0x96
 8009032:	f001 fabb 	bl	800a5ac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009036:	2104      	movs	r1, #4
 8009038:	4816      	ldr	r0, [pc, #88]	@ (8009094 <takeMachineID+0x2a4>)
 800903a:	f002 f887 	bl	800b14c <HAL_GPIO_ReadPin>
 800903e:	4603      	mov	r3, r0
 8009040:	2b01      	cmp	r3, #1
 8009042:	d149      	bne.n	80090d8 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8009044:	4b11      	ldr	r3, [pc, #68]	@ (800908c <takeMachineID+0x29c>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d042      	beq.n	80090d2 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 800904c:	4a0f      	ldr	r2, [pc, #60]	@ (800908c <takeMachineID+0x29c>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8009056:	4a12      	ldr	r2, [pc, #72]	@ (80090a0 <takeMachineID+0x2b0>)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	4413      	add	r3, r2
 800905c:	2200      	movs	r2, #0
 800905e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b05      	cmp	r3, #5
 8009064:	dd03      	ble.n	800906e <takeMachineID+0x27e>
                	writeLoc--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b01      	subs	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e004      	b.n	8009078 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b04      	cmp	r3, #4
 8009072:	dc01      	bgt.n	8009078 <takeMachineID+0x288>
                	writeLoc = 5;
 8009074:	2305      	movs	r3, #5
 8009076:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd16      	ble.n	80090ac <takeMachineID+0x2bc>
                	arrayPos--;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3b01      	subs	r3, #1
 8009082:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	e017      	b.n	80090bc <takeMachineID+0x2cc>
 800908c:	20001014 	.word	0x20001014
 8009090:	20000000 	.word	0x20000000
 8009094:	40010800 	.word	0x40010800
 8009098:	2000169c 	.word	0x2000169c
 800909c:	200016b0 	.word	0x200016b0
 80090a0:	20000f9c 	.word	0x20000f9c
 80090a4:	200017f0 	.word	0x200017f0
 80090a8:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da04      	bge.n	80090bc <takeMachineID+0x2cc>
                	arrayPos = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80090b6:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <takeMachineID+0x300>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	3305      	adds	r3, #5
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	4619      	mov	r1, r3
 80090c6:	2001      	movs	r0, #1
 80090c8:	f000 fd84 	bl	8009bd4 <lcd_delete_char>
                HAL_Delay(50);
 80090cc:	2032      	movs	r0, #50	@ 0x32
 80090ce:	f001 fa6d 	bl	800a5ac <HAL_Delay>
            }

            HAL_Delay(150);
 80090d2:	2096      	movs	r0, #150	@ 0x96
 80090d4:	f001 fa6a 	bl	800a5ac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	2002      	movs	r0, #2
 80090e0:	f000 fd23 	bl	8009b2a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80090e4:	e69c      	b.n	8008e20 <takeMachineID+0x30>
    }
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000000 	.word	0x20000000

080090f4 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af04      	add	r7, sp, #16
	int loopVal = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80090fe:	4a25      	ldr	r2, [pc, #148]	@ (8009194 <ssidConfirmation+0xa0>)
 8009100:	2101      	movs	r1, #1
 8009102:	2001      	movs	r0, #1
 8009104:	f000 fd30 	bl	8009b68 <lcd_print>

	while(loopVal == 1) {
 8009108:	e012      	b.n	8009130 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800910a:	4a23      	ldr	r2, [pc, #140]	@ (8009198 <ssidConfirmation+0xa4>)
 800910c:	2101      	movs	r1, #1
 800910e:	2002      	movs	r0, #2
 8009110:	f000 fd2a 	bl	8009b68 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009114:	2102      	movs	r1, #2
 8009116:	4821      	ldr	r0, [pc, #132]	@ (800919c <ssidConfirmation+0xa8>)
 8009118:	f002 f818 	bl	800b14c <HAL_GPIO_ReadPin>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <ssidConfirmation+0x32>
			loopVal = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8009126:	4a1e      	ldr	r2, [pc, #120]	@ (80091a0 <ssidConfirmation+0xac>)
 8009128:	2101      	movs	r1, #1
 800912a:	2001      	movs	r0, #1
 800912c:	f000 fd1c 	bl	8009b68 <lcd_print>
	while(loopVal == 1) {
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d0e9      	beq.n	800910a <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8009136:	2000      	movs	r0, #0
 8009138:	f000 fd74 	bl	8009c24 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 800913c:	4818      	ldr	r0, [pc, #96]	@ (80091a0 <ssidConfirmation+0xac>)
 800913e:	f7f7 f871 	bl	8000224 <strlen>
 8009142:	4603      	mov	r3, r0
 8009144:	2b14      	cmp	r3, #20
 8009146:	d90f      	bls.n	8009168 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8009148:	4a16      	ldr	r2, [pc, #88]	@ (80091a4 <ssidConfirmation+0xb0>)
 800914a:	2101      	movs	r1, #1
 800914c:	2001      	movs	r0, #1
 800914e:	f000 fd0b 	bl	8009b68 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8009152:	4a15      	ldr	r2, [pc, #84]	@ (80091a8 <ssidConfirmation+0xb4>)
 8009154:	2101      	movs	r1, #1
 8009156:	2002      	movs	r0, #2
 8009158:	f000 fd06 	bl	8009b68 <lcd_print>
        HAL_Delay(1250);
 800915c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8009160:	f001 fa24 	bl	800a5ac <HAL_Delay>

        return 0;
 8009164:	2300      	movs	r3, #0
 8009166:	e011      	b.n	800918c <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009168:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	236e      	movs	r3, #110	@ 0x6e
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	4b0e      	ldr	r3, [pc, #56]	@ (80091ac <ssidConfirmation+0xb8>)
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	236e      	movs	r3, #110	@ 0x6e
 8009178:	2200      	movs	r2, #0
 800917a:	21a0      	movs	r1, #160	@ 0xa0
 800917c:	480c      	ldr	r0, [pc, #48]	@ (80091b0 <ssidConfirmation+0xbc>)
 800917e:	f002 fa9f 	bl	800b6c0 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8009182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009186:	f001 fa11 	bl	800a5ac <HAL_Delay>

    	return 1;
 800918a:	2301      	movs	r3, #1
    }
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	0800e3b4 	.word	0x0800e3b4
 8009198:	200017b4 	.word	0x200017b4
 800919c:	40010800 	.word	0x40010800
 80091a0:	20001020 	.word	0x20001020
 80091a4:	200016c4 	.word	0x200016c4
 80091a8:	200016d8 	.word	0x200016d8
 80091ac:	20000f9c 	.word	0x20000f9c
 80091b0:	200017f0 	.word	0x200017f0

080091b4 <takeWifiSSID>:

void takeWifiSSID() {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80091ba:	2001      	movs	r0, #1
 80091bc:	f000 fd32 	bl	8009c24 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80091c0:	2210      	movs	r2, #16
 80091c2:	2100      	movs	r1, #0
 80091c4:	48a4      	ldr	r0, [pc, #656]	@ (8009458 <takeWifiSSID+0x2a4>)
 80091c6:	f004 fffb 	bl	800e1c0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80091ca:	2301      	movs	r3, #1
 80091cc:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80091ce:	2307      	movs	r3, #7
 80091d0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80091d2:	2301      	movs	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80091da:	4ba0      	ldr	r3, [pc, #640]	@ (800945c <takeWifiSSID+0x2a8>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80091e0:	2101      	movs	r1, #1
 80091e2:	2002      	movs	r0, #2
 80091e4:	f7f7 fd94 	bl	8000d10 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80091e8:	2108      	movs	r1, #8
 80091ea:	489d      	ldr	r0, [pc, #628]	@ (8009460 <takeWifiSSID+0x2ac>)
 80091ec:	f001 ffae 	bl	800b14c <HAL_GPIO_ReadPin>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d106      	bne.n	8009204 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80091f6:	f7ff ff7d 	bl	80090f4 <ssidConfirmation>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 8126 	bne.w	800944e <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8009202:	e7da      	b.n	80091ba <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009204:	2101      	movs	r1, #1
 8009206:	4896      	ldr	r0, [pc, #600]	@ (8009460 <takeWifiSSID+0x2ac>)
 8009208:	f001 ffa0 	bl	800b14c <HAL_GPIO_ReadPin>
 800920c:	4603      	mov	r3, r0
 800920e:	2b01      	cmp	r3, #1
 8009210:	d14d      	bne.n	80092ae <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b50      	cmp	r3, #80	@ 0x50
 8009216:	dd01      	ble.n	800921c <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8009218:	2301      	movs	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b10      	cmp	r3, #16
 8009220:	d13f      	bne.n	80092a2 <takeWifiSSID+0xee>
            	if(page == 1) {
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d109      	bne.n	800923c <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8009228:	2301      	movs	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
            		page++;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	3301      	adds	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8009232:	2102      	movs	r1, #2
 8009234:	2002      	movs	r0, #2
 8009236:	f7f7 fd6b 	bl	8000d10 <printTemplate>
 800923a:	e035      	b.n	80092a8 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d109      	bne.n	8009256 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8009242:	2301      	movs	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
            		page++;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	3301      	adds	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800924c:	2103      	movs	r1, #3
 800924e:	2002      	movs	r0, #2
 8009250:	f7f7 fd5e 	bl	8000d10 <printTemplate>
 8009254:	e028      	b.n	80092a8 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d109      	bne.n	8009270 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 800925c:	2301      	movs	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]
            		page++;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3301      	adds	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009266:	2104      	movs	r1, #4
 8009268:	2002      	movs	r0, #2
 800926a:	f7f7 fd51 	bl	8000d10 <printTemplate>
 800926e:	e01b      	b.n	80092a8 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2b04      	cmp	r3, #4
 8009274:	d109      	bne.n	800928a <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
            		page++;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	3301      	adds	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8009280:	2105      	movs	r1, #5
 8009282:	2002      	movs	r0, #2
 8009284:	f7f7 fd44 	bl	8000d10 <printTemplate>
 8009288:	e00e      	b.n	80092a8 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b05      	cmp	r3, #5
 800928e:	d10b      	bne.n	80092a8 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8009290:	2301      	movs	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8009298:	2101      	movs	r1, #1
 800929a:	2002      	movs	r0, #2
 800929c:	f7f7 fd38 	bl	8000d10 <printTemplate>
 80092a0:	e002      	b.n	80092a8 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3301      	adds	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80092a8:	2096      	movs	r0, #150	@ 0x96
 80092aa:	f001 f97f 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80092ae:	2108      	movs	r1, #8
 80092b0:	486c      	ldr	r0, [pc, #432]	@ (8009464 <takeWifiSSID+0x2b0>)
 80092b2:	f001 ff4b 	bl	800b14c <HAL_GPIO_ReadPin>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d149      	bne.n	8009350 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dc01      	bgt.n	80092c6 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80092c2:	2350      	movs	r3, #80	@ 0x50
 80092c4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d13b      	bne.n	8009344 <takeWifiSSID+0x190>
            	if(page == 1) {
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d108      	bne.n	80092e4 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80092d2:	2310      	movs	r3, #16
 80092d4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80092d6:	2305      	movs	r3, #5
 80092d8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80092da:	2105      	movs	r1, #5
 80092dc:	2002      	movs	r0, #2
 80092de:	f7f7 fd17 	bl	8000d10 <printTemplate>
 80092e2:	e032      	b.n	800934a <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d108      	bne.n	80092fc <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80092ea:	2310      	movs	r3, #16
 80092ec:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80092f2:	2101      	movs	r1, #1
 80092f4:	2002      	movs	r0, #2
 80092f6:	f7f7 fd0b 	bl	8000d10 <printTemplate>
 80092fa:	e026      	b.n	800934a <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d108      	bne.n	8009314 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8009302:	2310      	movs	r3, #16
 8009304:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009306:	2302      	movs	r3, #2
 8009308:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800930a:	2102      	movs	r1, #2
 800930c:	2002      	movs	r0, #2
 800930e:	f7f7 fcff 	bl	8000d10 <printTemplate>
 8009312:	e01a      	b.n	800934a <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d108      	bne.n	800932c <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800931a:	2310      	movs	r3, #16
 800931c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800931e:	2303      	movs	r3, #3
 8009320:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009322:	2103      	movs	r1, #3
 8009324:	2002      	movs	r0, #2
 8009326:	f7f7 fcf3 	bl	8000d10 <printTemplate>
 800932a:	e00e      	b.n	800934a <takeWifiSSID+0x196>
            	} else if(page == 5) {
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b05      	cmp	r3, #5
 8009330:	d10b      	bne.n	800934a <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8009332:	2310      	movs	r3, #16
 8009334:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8009336:	2304      	movs	r3, #4
 8009338:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800933a:	2104      	movs	r1, #4
 800933c:	2002      	movs	r0, #2
 800933e:	f7f7 fce7 	bl	8000d10 <printTemplate>
 8009342:	e002      	b.n	800934a <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3b01      	subs	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800934a:	2096      	movs	r0, #150	@ 0x96
 800934c:	f001 f92e 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009350:	2102      	movs	r1, #2
 8009352:	4843      	ldr	r0, [pc, #268]	@ (8009460 <takeWifiSSID+0x2ac>)
 8009354:	f001 fefa 	bl	800b14c <HAL_GPIO_ReadPin>
 8009358:	4603      	mov	r3, r0
 800935a:	2b01      	cmp	r3, #1
 800935c:	d12f      	bne.n	80093be <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	b2d9      	uxtb	r1, r3
 8009362:	4a41      	ldr	r2, [pc, #260]	@ (8009468 <takeWifiSSID+0x2b4>)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4413      	add	r3, r2
 8009368:	460a      	mov	r2, r1
 800936a:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 800936c:	4a3f      	ldr	r2, [pc, #252]	@ (800946c <takeWifiSSID+0x2b8>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	7819      	ldrb	r1, [r3, #0]
 8009374:	4a38      	ldr	r2, [pc, #224]	@ (8009458 <takeWifiSSID+0x2a4>)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4413      	add	r3, r2
 800937a:	460a      	mov	r2, r1
 800937c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	b2d9      	uxtb	r1, r3
 8009382:	4a3a      	ldr	r2, [pc, #232]	@ (800946c <takeWifiSSID+0x2b8>)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	2001      	movs	r0, #1
 800938e:	f000 fc00 	bl	8009b92 <lcd_print_char>

            writeLoc++;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	3301      	adds	r3, #1
 8009396:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	3301      	adds	r3, #1
 800939c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3301      	adds	r3, #1
 80093a2:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80093a4:	4a30      	ldr	r2, [pc, #192]	@ (8009468 <takeWifiSSID+0x2b4>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4413      	add	r3, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80093ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009458 <takeWifiSSID+0x2a4>)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4413      	add	r3, r2
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80093b8:	2096      	movs	r0, #150	@ 0x96
 80093ba:	f001 f8f7 	bl	800a5ac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80093be:	2104      	movs	r1, #4
 80093c0:	4827      	ldr	r0, [pc, #156]	@ (8009460 <takeWifiSSID+0x2ac>)
 80093c2:	f001 fec3 	bl	800b14c <HAL_GPIO_ReadPin>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d139      	bne.n	8009440 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80093cc:	4b22      	ldr	r3, [pc, #136]	@ (8009458 <takeWifiSSID+0x2a4>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d032      	beq.n	800943a <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80093d4:	4a24      	ldr	r2, [pc, #144]	@ (8009468 <takeWifiSSID+0x2b4>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80093de:	4a1e      	ldr	r2, [pc, #120]	@ (8009458 <takeWifiSSID+0x2a4>)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4413      	add	r3, r2
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b07      	cmp	r3, #7
 80093ec:	dd03      	ble.n	80093f6 <takeWifiSSID+0x242>
        			writeLoc--;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	e004      	b.n	8009400 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b06      	cmp	r3, #6
 80093fa:	dc01      	bgt.n	8009400 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80093fc:	2307      	movs	r3, #7
 80093fe:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	dd06      	ble.n	8009414 <takeWifiSSID+0x260>
        			arrayPosition--;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3b01      	subs	r3, #1
 800940a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3b01      	subs	r3, #1
 8009410:	607b      	str	r3, [r7, #4]
 8009412:	e007      	b.n	8009424 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da04      	bge.n	8009424 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800941e:	4b0f      	ldr	r3, [pc, #60]	@ (800945c <takeWifiSSID+0x2a8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	3307      	adds	r3, #7
 800942a:	b2db      	uxtb	r3, r3
 800942c:	4619      	mov	r1, r3
 800942e:	2001      	movs	r0, #1
 8009430:	f000 fbd0 	bl	8009bd4 <lcd_delete_char>
        		HAL_Delay(50);
 8009434:	2032      	movs	r0, #50	@ 0x32
 8009436:	f001 f8b9 	bl	800a5ac <HAL_Delay>
        	}

        	HAL_Delay(150);
 800943a:	2096      	movs	r0, #150	@ 0x96
 800943c:	f001 f8b6 	bl	800a5ac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	4619      	mov	r1, r3
 8009446:	2002      	movs	r0, #2
 8009448:	f000 fb6f 	bl	8009b2a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800944c:	e6cc      	b.n	80091e8 <takeWifiSSID+0x34>
        		break;
 800944e:	bf00      	nop
    }
}
 8009450:	bf00      	nop
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20001020 	.word	0x20001020
 800945c:	20000004 	.word	0x20000004
 8009460:	40010800 	.word	0x40010800
 8009464:	40011000 	.word	0x40011000
 8009468:	20000f9c 	.word	0x20000f9c
 800946c:	20000018 	.word	0x20000018

08009470 <passConfirmation>:

uint8_t passConfirmation() {
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800947a:	4a25      	ldr	r2, [pc, #148]	@ (8009510 <passConfirmation+0xa0>)
 800947c:	2101      	movs	r1, #1
 800947e:	2001      	movs	r0, #1
 8009480:	f000 fb72 	bl	8009b68 <lcd_print>

	while(loopVal == 1) {
 8009484:	e012      	b.n	80094ac <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8009486:	4a23      	ldr	r2, [pc, #140]	@ (8009514 <passConfirmation+0xa4>)
 8009488:	2101      	movs	r1, #1
 800948a:	2002      	movs	r0, #2
 800948c:	f000 fb6c 	bl	8009b68 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009490:	2102      	movs	r1, #2
 8009492:	4821      	ldr	r0, [pc, #132]	@ (8009518 <passConfirmation+0xa8>)
 8009494:	f001 fe5a 	bl	800b14c <HAL_GPIO_ReadPin>
 8009498:	4603      	mov	r3, r0
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <passConfirmation+0x32>
			loopVal = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80094a2:	4a1e      	ldr	r2, [pc, #120]	@ (800951c <passConfirmation+0xac>)
 80094a4:	2101      	movs	r1, #1
 80094a6:	2001      	movs	r0, #1
 80094a8:	f000 fb5e 	bl	8009b68 <lcd_print>
	while(loopVal == 1) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d0e9      	beq.n	8009486 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80094b2:	2000      	movs	r0, #0
 80094b4:	f000 fbb6 	bl	8009c24 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80094b8:	4818      	ldr	r0, [pc, #96]	@ (800951c <passConfirmation+0xac>)
 80094ba:	f7f6 feb3 	bl	8000224 <strlen>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b14      	cmp	r3, #20
 80094c2:	d90f      	bls.n	80094e4 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80094c4:	4a16      	ldr	r2, [pc, #88]	@ (8009520 <passConfirmation+0xb0>)
 80094c6:	2101      	movs	r1, #1
 80094c8:	2001      	movs	r0, #1
 80094ca:	f000 fb4d 	bl	8009b68 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <passConfirmation+0xb4>)
 80094d0:	2101      	movs	r1, #1
 80094d2:	2002      	movs	r0, #2
 80094d4:	f000 fb48 	bl	8009b68 <lcd_print>
        HAL_Delay(1250);
 80094d8:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80094dc:	f001 f866 	bl	800a5ac <HAL_Delay>

        return 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e011      	b.n	8009508 <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80094e4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	236e      	movs	r3, #110	@ 0x6e
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <passConfirmation+0xb8>)
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	236e      	movs	r3, #110	@ 0x6e
 80094f4:	2200      	movs	r2, #0
 80094f6:	21a0      	movs	r1, #160	@ 0xa0
 80094f8:	480c      	ldr	r0, [pc, #48]	@ (800952c <passConfirmation+0xbc>)
 80094fa:	f002 f8e1 	bl	800b6c0 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80094fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009502:	f001 f853 	bl	800a5ac <HAL_Delay>

    	return 1;
 8009506:	2301      	movs	r3, #1
    }
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	0800e3b4 	.word	0x0800e3b4
 8009514:	200017b4 	.word	0x200017b4
 8009518:	40010800 	.word	0x40010800
 800951c:	20001030 	.word	0x20001030
 8009520:	200016ec 	.word	0x200016ec
 8009524:	20001700 	.word	0x20001700
 8009528:	20000f9c 	.word	0x20000f9c
 800952c:	200017f0 	.word	0x200017f0

08009530 <takeWifiPass>:

void takeWifiPass() {
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8009536:	2001      	movs	r0, #1
 8009538:	f000 fb74 	bl	8009c24 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800953c:	2210      	movs	r2, #16
 800953e:	2100      	movs	r1, #0
 8009540:	48a4      	ldr	r0, [pc, #656]	@ (80097d4 <takeWifiPass+0x2a4>)
 8009542:	f004 fe3d 	bl	800e1c0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8009546:	2301      	movs	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800954a:	2307      	movs	r3, #7
 800954c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800954e:	2301      	movs	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009552:	2300      	movs	r3, #0
 8009554:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8009556:	4ba0      	ldr	r3, [pc, #640]	@ (80097d8 <takeWifiPass+0x2a8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800955c:	2101      	movs	r1, #1
 800955e:	2003      	movs	r0, #3
 8009560:	f7f7 fbd6 	bl	8000d10 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009564:	2108      	movs	r1, #8
 8009566:	489d      	ldr	r0, [pc, #628]	@ (80097dc <takeWifiPass+0x2ac>)
 8009568:	f001 fdf0 	bl	800b14c <HAL_GPIO_ReadPin>
 800956c:	4603      	mov	r3, r0
 800956e:	2b01      	cmp	r3, #1
 8009570:	d106      	bne.n	8009580 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8009572:	f7ff ff7d 	bl	8009470 <passConfirmation>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8126 	bne.w	80097ca <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800957e:	e7da      	b.n	8009536 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009580:	2101      	movs	r1, #1
 8009582:	4896      	ldr	r0, [pc, #600]	@ (80097dc <takeWifiPass+0x2ac>)
 8009584:	f001 fde2 	bl	800b14c <HAL_GPIO_ReadPin>
 8009588:	4603      	mov	r3, r0
 800958a:	2b01      	cmp	r3, #1
 800958c:	d14d      	bne.n	800962a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b50      	cmp	r3, #80	@ 0x50
 8009592:	dd01      	ble.n	8009598 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b10      	cmp	r3, #16
 800959c:	d13f      	bne.n	800961e <takeWifiPass+0xee>
            	if(page == 1) {
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d109      	bne.n	80095b8 <takeWifiPass+0x88>
            		cursorPosition = 1;
 80095a4:	2301      	movs	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
            		page++;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	3301      	adds	r3, #1
 80095ac:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80095ae:	2102      	movs	r1, #2
 80095b0:	2003      	movs	r0, #3
 80095b2:	f7f7 fbad 	bl	8000d10 <printTemplate>
 80095b6:	e035      	b.n	8009624 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d109      	bne.n	80095d2 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80095be:	2301      	movs	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
            		page++;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	3301      	adds	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80095c8:	2103      	movs	r1, #3
 80095ca:	2003      	movs	r0, #3
 80095cc:	f7f7 fba0 	bl	8000d10 <printTemplate>
 80095d0:	e028      	b.n	8009624 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d109      	bne.n	80095ec <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80095d8:	2301      	movs	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
            		page++;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	3301      	adds	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80095e2:	2104      	movs	r1, #4
 80095e4:	2003      	movs	r0, #3
 80095e6:	f7f7 fb93 	bl	8000d10 <printTemplate>
 80095ea:	e01b      	b.n	8009624 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d109      	bne.n	8009606 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80095f2:	2301      	movs	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
            		page++;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	3301      	adds	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80095fc:	2105      	movs	r1, #5
 80095fe:	2003      	movs	r0, #3
 8009600:	f7f7 fb86 	bl	8000d10 <printTemplate>
 8009604:	e00e      	b.n	8009624 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b05      	cmp	r3, #5
 800960a:	d10b      	bne.n	8009624 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800960c:	2301      	movs	r3, #1
 800960e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009610:	2301      	movs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009614:	2101      	movs	r1, #1
 8009616:	2003      	movs	r0, #3
 8009618:	f7f7 fb7a 	bl	8000d10 <printTemplate>
 800961c:	e002      	b.n	8009624 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009624:	2096      	movs	r0, #150	@ 0x96
 8009626:	f000 ffc1 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800962a:	2108      	movs	r1, #8
 800962c:	486c      	ldr	r0, [pc, #432]	@ (80097e0 <takeWifiPass+0x2b0>)
 800962e:	f001 fd8d 	bl	800b14c <HAL_GPIO_ReadPin>
 8009632:	4603      	mov	r3, r0
 8009634:	2b01      	cmp	r3, #1
 8009636:	d149      	bne.n	80096cc <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dc01      	bgt.n	8009642 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800963e:	2350      	movs	r3, #80	@ 0x50
 8009640:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d13b      	bne.n	80096c0 <takeWifiPass+0x190>
            	if(page == 1) {
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d108      	bne.n	8009660 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800964e:	2310      	movs	r3, #16
 8009650:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009652:	2305      	movs	r3, #5
 8009654:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009656:	2105      	movs	r1, #5
 8009658:	2003      	movs	r0, #3
 800965a:	f7f7 fb59 	bl	8000d10 <printTemplate>
 800965e:	e032      	b.n	80096c6 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d108      	bne.n	8009678 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8009666:	2310      	movs	r3, #16
 8009668:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800966a:	2301      	movs	r3, #1
 800966c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800966e:	2101      	movs	r1, #1
 8009670:	2003      	movs	r0, #3
 8009672:	f7f7 fb4d 	bl	8000d10 <printTemplate>
 8009676:	e026      	b.n	80096c6 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d108      	bne.n	8009690 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800967e:	2310      	movs	r3, #16
 8009680:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009682:	2302      	movs	r3, #2
 8009684:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8009686:	2102      	movs	r1, #2
 8009688:	2003      	movs	r0, #3
 800968a:	f7f7 fb41 	bl	8000d10 <printTemplate>
 800968e:	e01a      	b.n	80096c6 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b04      	cmp	r3, #4
 8009694:	d108      	bne.n	80096a8 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8009696:	2310      	movs	r3, #16
 8009698:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800969a:	2303      	movs	r3, #3
 800969c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800969e:	2103      	movs	r1, #3
 80096a0:	2003      	movs	r0, #3
 80096a2:	f7f7 fb35 	bl	8000d10 <printTemplate>
 80096a6:	e00e      	b.n	80096c6 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	d10b      	bne.n	80096c6 <takeWifiPass+0x196>
            		cursorPosition = 16;
 80096ae:	2310      	movs	r3, #16
 80096b0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80096b2:	2304      	movs	r3, #4
 80096b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80096b6:	2104      	movs	r1, #4
 80096b8:	2003      	movs	r0, #3
 80096ba:	f7f7 fb29 	bl	8000d10 <printTemplate>
 80096be:	e002      	b.n	80096c6 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80096c6:	2096      	movs	r0, #150	@ 0x96
 80096c8:	f000 ff70 	bl	800a5ac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80096cc:	2102      	movs	r1, #2
 80096ce:	4843      	ldr	r0, [pc, #268]	@ (80097dc <takeWifiPass+0x2ac>)
 80096d0:	f001 fd3c 	bl	800b14c <HAL_GPIO_ReadPin>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d12f      	bne.n	800973a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	b2d9      	uxtb	r1, r3
 80096de:	4a41      	ldr	r2, [pc, #260]	@ (80097e4 <takeWifiPass+0x2b4>)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4413      	add	r3, r2
 80096e4:	460a      	mov	r2, r1
 80096e6:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80096e8:	4a3f      	ldr	r2, [pc, #252]	@ (80097e8 <takeWifiPass+0x2b8>)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	7819      	ldrb	r1, [r3, #0]
 80096f0:	4a38      	ldr	r2, [pc, #224]	@ (80097d4 <takeWifiPass+0x2a4>)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4413      	add	r3, r2
 80096f6:	460a      	mov	r2, r1
 80096f8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	b2d9      	uxtb	r1, r3
 80096fe:	4a3a      	ldr	r2, [pc, #232]	@ (80097e8 <takeWifiPass+0x2b8>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	2001      	movs	r0, #1
 800970a:	f000 fa42 	bl	8009b92 <lcd_print_char>

            writeLoc++;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3301      	adds	r3, #1
 8009712:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	3301      	adds	r3, #1
 8009718:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3301      	adds	r3, #1
 800971e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8009720:	4a30      	ldr	r2, [pc, #192]	@ (80097e4 <takeWifiPass+0x2b4>)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4413      	add	r3, r2
 8009726:	2200      	movs	r2, #0
 8009728:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800972a:	4a2a      	ldr	r2, [pc, #168]	@ (80097d4 <takeWifiPass+0x2a4>)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4413      	add	r3, r2
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009734:	2096      	movs	r0, #150	@ 0x96
 8009736:	f000 ff39 	bl	800a5ac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800973a:	2104      	movs	r1, #4
 800973c:	4827      	ldr	r0, [pc, #156]	@ (80097dc <takeWifiPass+0x2ac>)
 800973e:	f001 fd05 	bl	800b14c <HAL_GPIO_ReadPin>
 8009742:	4603      	mov	r3, r0
 8009744:	2b01      	cmp	r3, #1
 8009746:	d139      	bne.n	80097bc <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8009748:	4b22      	ldr	r3, [pc, #136]	@ (80097d4 <takeWifiPass+0x2a4>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d032      	beq.n	80097b6 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8009750:	4a24      	ldr	r2, [pc, #144]	@ (80097e4 <takeWifiPass+0x2b4>)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800975a:	4a1e      	ldr	r2, [pc, #120]	@ (80097d4 <takeWifiPass+0x2a4>)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4413      	add	r3, r2
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b07      	cmp	r3, #7
 8009768:	dd03      	ble.n	8009772 <takeWifiPass+0x242>
        			writeLoc--;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3b01      	subs	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	e004      	b.n	800977c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b06      	cmp	r3, #6
 8009776:	dc01      	bgt.n	800977c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8009778:	2307      	movs	r3, #7
 800977a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	dd06      	ble.n	8009790 <takeWifiPass+0x260>
        			arrayPosition--;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3b01      	subs	r3, #1
 8009786:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3b01      	subs	r3, #1
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	e007      	b.n	80097a0 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	da04      	bge.n	80097a0 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800979a:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <takeWifiPass+0x2a8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	3307      	adds	r3, #7
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	4619      	mov	r1, r3
 80097aa:	2001      	movs	r0, #1
 80097ac:	f000 fa12 	bl	8009bd4 <lcd_delete_char>
        		HAL_Delay(50);
 80097b0:	2032      	movs	r0, #50	@ 0x32
 80097b2:	f000 fefb 	bl	800a5ac <HAL_Delay>
        	}

        	HAL_Delay(150);
 80097b6:	2096      	movs	r0, #150	@ 0x96
 80097b8:	f000 fef8 	bl	800a5ac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	4619      	mov	r1, r3
 80097c2:	2002      	movs	r0, #2
 80097c4:	f000 f9b1 	bl	8009b2a <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80097c8:	e6cc      	b.n	8009564 <takeWifiPass+0x34>
    	        break;
 80097ca:	bf00      	nop
    }
}
 80097cc:	bf00      	nop
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20001030 	.word	0x20001030
 80097d8:	20000008 	.word	0x20000008
 80097dc:	40010800 	.word	0x40010800
 80097e0:	40011000 	.word	0x40011000
 80097e4:	20000f9c 	.word	0x20000f9c
 80097e8:	20000018 	.word	0x20000018

080097ec <checkEEPROM4ID>:
			convertAndSendData();
		}
	}
}

int checkEEPROM4ID() {
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80097f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <checkEEPROM4ID+0x44>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80097f8:	2301      	movs	r3, #1
 80097fa:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80097fc:	2300      	movs	r3, #0
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	e00d      	b.n	800981e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8009802:	4a0c      	ldr	r2, [pc, #48]	@ (8009834 <checkEEPROM4ID+0x48>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <checkEEPROM4ID+0x26>
			returnVal = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3301      	adds	r3, #1
 800981c:	607b      	str	r3, [r7, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b0b      	cmp	r3, #11
 8009822:	ddee      	ble.n	8009802 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8009824:	68bb      	ldr	r3, [r7, #8]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	20000000 	.word	0x20000000
 8009834:	20000f9c 	.word	0x20000f9c

08009838 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af02      	add	r7, sp, #8
 800983e:	4603      	mov	r3, r0
 8009840:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	f023 030f 	bic.w	r3, r3, #15
 8009848:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8009850:	7b7b      	ldrb	r3, [r7, #13]
 8009852:	f043 030c 	orr.w	r3, r3, #12
 8009856:	b2db      	uxtb	r3, r3
 8009858:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800985a:	7b7b      	ldrb	r3, [r7, #13]
 800985c:	f043 0308 	orr.w	r3, r3, #8
 8009860:	b2db      	uxtb	r3, r3
 8009862:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009864:	7b3b      	ldrb	r3, [r7, #12]
 8009866:	f043 030c 	orr.w	r3, r3, #12
 800986a:	b2db      	uxtb	r3, r3
 800986c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800986e:	7b3b      	ldrb	r3, [r7, #12]
 8009870:	f043 0308 	orr.w	r3, r3, #8
 8009874:	b2db      	uxtb	r3, r3
 8009876:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009878:	bf00      	nop
 800987a:	4825      	ldr	r0, [pc, #148]	@ (8009910 <lcd_send_cmd+0xd8>)
 800987c:	f002 fa8f 	bl	800bd9e <HAL_I2C_GetError>
 8009880:	4603      	mov	r3, r0
 8009882:	2b04      	cmp	r3, #4
 8009884:	d0f9      	beq.n	800987a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009886:	bf00      	nop
 8009888:	4821      	ldr	r0, [pc, #132]	@ (8009910 <lcd_send_cmd+0xd8>)
 800988a:	f002 fa7b 	bl	800bd84 <HAL_I2C_GetState>
 800988e:	4603      	mov	r3, r0
 8009890:	2b20      	cmp	r3, #32
 8009892:	d1f9      	bne.n	8009888 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009894:	4b1f      	ldr	r3, [pc, #124]	@ (8009914 <lcd_send_cmd+0xdc>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d116      	bne.n	80098ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
 80098a0:	e00f      	b.n	80098c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	3310      	adds	r3, #16
 80098a6:	443b      	add	r3, r7
 80098a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	f022 0208 	bic.w	r2, r2, #8
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	3310      	adds	r3, #16
 80098b6:	443b      	add	r3, r7
 80098b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	3301      	adds	r3, #1
 80098c0:	73fb      	strb	r3, [r7, #15]
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d9ec      	bls.n	80098a2 <lcd_send_cmd+0x6a>
 80098c8:	e015      	b.n	80098f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80098ca:	2300      	movs	r3, #0
 80098cc:	73bb      	strb	r3, [r7, #14]
 80098ce:	e00f      	b.n	80098f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	3310      	adds	r3, #16
 80098d4:	443b      	add	r3, r7
 80098d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	f042 0208 	orr.w	r2, r2, #8
 80098e0:	b2d2      	uxtb	r2, r2
 80098e2:	3310      	adds	r3, #16
 80098e4:	443b      	add	r3, r7
 80098e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	3301      	adds	r3, #1
 80098ee:	73bb      	strb	r3, [r7, #14]
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d9ec      	bls.n	80098d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80098f6:	f107 0208 	add.w	r2, r7, #8
 80098fa:	2364      	movs	r3, #100	@ 0x64
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2304      	movs	r3, #4
 8009900:	214e      	movs	r1, #78	@ 0x4e
 8009902:	4803      	ldr	r0, [pc, #12]	@ (8009910 <lcd_send_cmd+0xd8>)
 8009904:	f001 fdde 	bl	800b4c4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	200017f0 	.word	0x200017f0
 8009914:	200017c5 	.word	0x200017c5

08009918 <lcd_send_data>:

void lcd_send_data (char data) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af02      	add	r7, sp, #8
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	f023 030f 	bic.w	r3, r3, #15
 8009928:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009930:	7b7b      	ldrb	r3, [r7, #13]
 8009932:	f043 030d 	orr.w	r3, r3, #13
 8009936:	b2db      	uxtb	r3, r3
 8009938:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800993a:	7b7b      	ldrb	r3, [r7, #13]
 800993c:	f043 0309 	orr.w	r3, r3, #9
 8009940:	b2db      	uxtb	r3, r3
 8009942:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009944:	7b3b      	ldrb	r3, [r7, #12]
 8009946:	f043 030d 	orr.w	r3, r3, #13
 800994a:	b2db      	uxtb	r3, r3
 800994c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800994e:	7b3b      	ldrb	r3, [r7, #12]
 8009950:	f043 0309 	orr.w	r3, r3, #9
 8009954:	b2db      	uxtb	r3, r3
 8009956:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009958:	bf00      	nop
 800995a:	4825      	ldr	r0, [pc, #148]	@ (80099f0 <lcd_send_data+0xd8>)
 800995c:	f002 fa1f 	bl	800bd9e <HAL_I2C_GetError>
 8009960:	4603      	mov	r3, r0
 8009962:	2b04      	cmp	r3, #4
 8009964:	d0f9      	beq.n	800995a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009966:	bf00      	nop
 8009968:	4821      	ldr	r0, [pc, #132]	@ (80099f0 <lcd_send_data+0xd8>)
 800996a:	f002 fa0b 	bl	800bd84 <HAL_I2C_GetState>
 800996e:	4603      	mov	r3, r0
 8009970:	2b20      	cmp	r3, #32
 8009972:	d1f9      	bne.n	8009968 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009974:	4b1f      	ldr	r3, [pc, #124]	@ (80099f4 <lcd_send_data+0xdc>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d116      	bne.n	80099aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
 8009980:	e00f      	b.n	80099a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	3310      	adds	r3, #16
 8009986:	443b      	add	r3, r7
 8009988:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	f022 0208 	bic.w	r2, r2, #8
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	3310      	adds	r3, #16
 8009996:	443b      	add	r3, r7
 8009998:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	3301      	adds	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d9ec      	bls.n	8009982 <lcd_send_data+0x6a>
 80099a8:	e015      	b.n	80099d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80099aa:	2300      	movs	r3, #0
 80099ac:	73bb      	strb	r3, [r7, #14]
 80099ae:	e00f      	b.n	80099d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	3310      	adds	r3, #16
 80099b4:	443b      	add	r3, r7
 80099b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	f042 0208 	orr.w	r2, r2, #8
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	3310      	adds	r3, #16
 80099c4:	443b      	add	r3, r7
 80099c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73bb      	strb	r3, [r7, #14]
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d9ec      	bls.n	80099b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80099d6:	f107 0208 	add.w	r2, r7, #8
 80099da:	2364      	movs	r3, #100	@ 0x64
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	2304      	movs	r3, #4
 80099e0:	214e      	movs	r1, #78	@ 0x4e
 80099e2:	4803      	ldr	r0, [pc, #12]	@ (80099f0 <lcd_send_data+0xd8>)
 80099e4:	f001 fd6e 	bl	800b4c4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	200017f0 	.word	0x200017f0
 80099f4:	200017c5 	.word	0x200017c5

080099f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8009a00:	e006      	b.n	8009a10 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff ff84 	bl	8009918 <lcd_send_data>
	while (*str) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1f4      	bne.n	8009a02 <lcd_send_string+0xa>
	}
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <lcd_send_char>:

void lcd_send_char(char ch) {
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	f023 030f 	bic.w	r3, r3, #15
 8009a34:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	011b      	lsls	r3, r3, #4
 8009a3a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009a3c:	7b7b      	ldrb	r3, [r7, #13]
 8009a3e:	f043 030d 	orr.w	r3, r3, #13
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8009a46:	7b7b      	ldrb	r3, [r7, #13]
 8009a48:	f043 0309 	orr.w	r3, r3, #9
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009a50:	7b3b      	ldrb	r3, [r7, #12]
 8009a52:	f043 030d 	orr.w	r3, r3, #13
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009a5a:	7b3b      	ldrb	r3, [r7, #12]
 8009a5c:	f043 0309 	orr.w	r3, r3, #9
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009a64:	bf00      	nop
 8009a66:	4825      	ldr	r0, [pc, #148]	@ (8009afc <lcd_send_char+0xd8>)
 8009a68:	f002 f999 	bl	800bd9e <HAL_I2C_GetError>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d0f9      	beq.n	8009a66 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009a72:	bf00      	nop
 8009a74:	4821      	ldr	r0, [pc, #132]	@ (8009afc <lcd_send_char+0xd8>)
 8009a76:	f002 f985 	bl	800bd84 <HAL_I2C_GetState>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d1f9      	bne.n	8009a74 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009a80:	4b1f      	ldr	r3, [pc, #124]	@ (8009b00 <lcd_send_char+0xdc>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d116      	bne.n	8009ab6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
 8009a8c:	e00f      	b.n	8009aae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	3310      	adds	r3, #16
 8009a92:	443b      	add	r3, r7
 8009a94:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	f022 0208 	bic.w	r2, r2, #8
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	3310      	adds	r3, #16
 8009aa2:	443b      	add	r3, r7
 8009aa4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d9ec      	bls.n	8009a8e <lcd_send_char+0x6a>
 8009ab4:	e015      	b.n	8009ae2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73bb      	strb	r3, [r7, #14]
 8009aba:	e00f      	b.n	8009adc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	3310      	adds	r3, #16
 8009ac0:	443b      	add	r3, r7
 8009ac2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	f042 0208 	orr.w	r2, r2, #8
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	3310      	adds	r3, #16
 8009ad0:	443b      	add	r3, r7
 8009ad2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	73bb      	strb	r3, [r7, #14]
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d9ec      	bls.n	8009abc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8009ae2:	f107 0208 	add.w	r2, r7, #8
 8009ae6:	2364      	movs	r3, #100	@ 0x64
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	2304      	movs	r3, #4
 8009aec:	214e      	movs	r1, #78	@ 0x4e
 8009aee:	4803      	ldr	r0, [pc, #12]	@ (8009afc <lcd_send_char+0xd8>)
 8009af0:	f001 fce8 	bl	800b4c4 <HAL_I2C_Master_Transmit>
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200017f0 	.word	0x200017f0
 8009b00:	200017c5 	.word	0x200017c5

08009b04 <lcd_init>:

void lcd_init (void) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009b08:	2002      	movs	r0, #2
 8009b0a:	f7ff fe95 	bl	8009838 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009b0e:	2028      	movs	r0, #40	@ 0x28
 8009b10:	f7ff fe92 	bl	8009838 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009b14:	200c      	movs	r0, #12
 8009b16:	f7ff fe8f 	bl	8009838 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009b1a:	2080      	movs	r0, #128	@ 0x80
 8009b1c:	f7ff fe8c 	bl	8009838 <lcd_send_cmd>
	lcd_backlight(1);
 8009b20:	2001      	movs	r0, #1
 8009b22:	f000 f86d 	bl	8009c00 <lcd_backlight>
}
 8009b26:	bf00      	nop
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	4603      	mov	r3, r0
 8009b32:	460a      	mov	r2, r1
 8009b34:	71fb      	strb	r3, [r7, #7]
 8009b36:	4613      	mov	r3, r2
 8009b38:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d106      	bne.n	8009b4e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009b40:	79bb      	ldrb	r3, [r7, #6]
 8009b42:	337f      	adds	r3, #127	@ 0x7f
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fe76 	bl	8009838 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009b4c:	e008      	b.n	8009b60 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d105      	bne.n	8009b60 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009b54:	79bb      	ldrb	r3, [r7, #6]
 8009b56:	3b41      	subs	r3, #65	@ 0x41
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fe6c 	bl	8009838 <lcd_send_cmd>
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	603a      	str	r2, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
 8009b74:	460b      	mov	r3, r1
 8009b76:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009b78:	79ba      	ldrb	r2, [r7, #6]
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff ffd3 	bl	8009b2a <lcd_gotoxy>
	lcd_send_string(str);
 8009b84:	6838      	ldr	r0, [r7, #0]
 8009b86:	f7ff ff37 	bl	80099f8 <lcd_send_string>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	4603      	mov	r3, r0
 8009b9a:	71fb      	strb	r3, [r7, #7]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	71bb      	strb	r3, [r7, #6]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009ba4:	79ba      	ldrb	r2, [r7, #6]
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff ffbd 	bl	8009b2a <lcd_gotoxy>
    lcd_send_char(ch);
 8009bb0:	797b      	ldrb	r3, [r7, #5]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff ff36 	bl	8009a24 <lcd_send_char>
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <lcd_clear>:

void lcd_clear(void) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f7ff fe37 	bl	8009838 <lcd_send_cmd>
    HAL_Delay(2);
 8009bca:	2002      	movs	r0, #2
 8009bcc:	f000 fcee 	bl	800a5ac <HAL_Delay>
}
 8009bd0:	bf00      	nop
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	460a      	mov	r2, r1
 8009bde:	71fb      	strb	r3, [r7, #7]
 8009be0:	4613      	mov	r3, r2
 8009be2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009be4:	79ba      	ldrb	r2, [r7, #6]
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ff9d 	bl	8009b2a <lcd_gotoxy>

    lcd_send_char(' ');
 8009bf0:	2020      	movs	r0, #32
 8009bf2:	f7ff ff17 	bl	8009a24 <lcd_send_char>
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009c0a:	4a05      	ldr	r2, [pc, #20]	@ (8009c20 <lcd_backlight+0x20>)
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009c10:	2000      	movs	r0, #0
 8009c12:	f7ff fe11 	bl	8009838 <lcd_send_cmd>
}
 8009c16:	bf00      	nop
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200017c5 	.word	0x200017c5

08009c24 <lcd_cursor>:

void lcd_cursor(int state) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d106      	bne.n	8009c40 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009c32:	200e      	movs	r0, #14
 8009c34:	f7ff fe00 	bl	8009838 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009c38:	200f      	movs	r0, #15
 8009c3a:	f7ff fdfd 	bl	8009838 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009c3e:	e002      	b.n	8009c46 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009c40:	200c      	movs	r0, #12
 8009c42:	f7ff fdf9 	bl	8009838 <lcd_send_cmd>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009c58:	4b04      	ldr	r3, [pc, #16]	@ (8009c6c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4a03      	ldr	r2, [pc, #12]	@ (8009c6c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009c60:	6013      	str	r3, [r2, #0]
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	20001044 	.word	0x20001044

08009c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c74:	f000 fc38 	bl	800a4e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009c78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c7c:	f000 fc96 	bl	800a5ac <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c80:	f000 f89a 	bl	8009db8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c84:	f000 f9bc 	bl	800a000 <MX_GPIO_Init>
  MX_CAN_Init();
 8009c88:	f000 f8dc 	bl	8009e44 <MX_CAN_Init>
  MX_I2C1_Init();
 8009c8c:	f000 f90e 	bl	8009eac <MX_I2C1_Init>
  MX_TIM1_Init();
 8009c90:	f000 f93a 	bl	8009f08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009c94:	f000 f98a 	bl	8009fac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009c98:	2201      	movs	r2, #1
 8009c9a:	2140      	movs	r1, #64	@ 0x40
 8009c9c:	483d      	ldr	r0, [pc, #244]	@ (8009d94 <main+0x124>)
 8009c9e:	f001 fa6c 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	2180      	movs	r1, #128	@ 0x80
 8009ca6:	483b      	ldr	r0, [pc, #236]	@ (8009d94 <main+0x124>)
 8009ca8:	f001 fa67 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009cac:	200a      	movs	r0, #10
 8009cae:	f000 fc7d 	bl	800a5ac <HAL_Delay>
  lcd_init();
 8009cb2:	f7ff ff27 	bl	8009b04 <lcd_init>
  HAL_Delay(10);
 8009cb6:	200a      	movs	r0, #10
 8009cb8:	f000 fc78 	bl	800a5ac <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009cbc:	4836      	ldr	r0, [pc, #216]	@ (8009d98 <main+0x128>)
 8009cbe:	f003 f90f 	bl	800cee0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009cc2:	bf00      	nop
 8009cc4:	4835      	ldr	r0, [pc, #212]	@ (8009d9c <main+0x12c>)
 8009cc6:	f002 f86a 	bl	800bd9e <HAL_I2C_GetError>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d0f9      	beq.n	8009cc4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009cd0:	bf00      	nop
 8009cd2:	4832      	ldr	r0, [pc, #200]	@ (8009d9c <main+0x12c>)
 8009cd4:	f002 f856 	bl	800bd84 <HAL_I2C_GetState>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d1f9      	bne.n	8009cd2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009ce4:	482b      	ldr	r0, [pc, #172]	@ (8009d94 <main+0x124>)
 8009ce6:	f001 fa48 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8009cea:	2200      	movs	r2, #0
 8009cec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cf0:	4828      	ldr	r0, [pc, #160]	@ (8009d94 <main+0x124>)
 8009cf2:	f001 fa42 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2104      	movs	r1, #4
 8009cfa:	4826      	ldr	r0, [pc, #152]	@ (8009d94 <main+0x124>)
 8009cfc:	f001 fa3d 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009d00:	2200      	movs	r2, #0
 8009d02:	2102      	movs	r1, #2
 8009d04:	4823      	ldr	r0, [pc, #140]	@ (8009d94 <main+0x124>)
 8009d06:	f001 fa38 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	4821      	ldr	r0, [pc, #132]	@ (8009d94 <main+0x124>)
 8009d10:	f001 fa33 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009d14:	2200      	movs	r2, #0
 8009d16:	2120      	movs	r1, #32
 8009d18:	4821      	ldr	r0, [pc, #132]	@ (8009da0 <main+0x130>)
 8009d1a:	f001 fa2e 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2110      	movs	r1, #16
 8009d22:	481f      	ldr	r0, [pc, #124]	@ (8009da0 <main+0x130>)
 8009d24:	f001 fa29 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2180      	movs	r1, #128	@ 0x80
 8009d2c:	481d      	ldr	r0, [pc, #116]	@ (8009da4 <main+0x134>)
 8009d2e:	f001 fa24 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009d32:	2200      	movs	r2, #0
 8009d34:	2140      	movs	r1, #64	@ 0x40
 8009d36:	481b      	ldr	r0, [pc, #108]	@ (8009da4 <main+0x134>)
 8009d38:	f001 fa1f 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2120      	movs	r1, #32
 8009d40:	4818      	ldr	r0, [pc, #96]	@ (8009da4 <main+0x134>)
 8009d42:	f001 fa1a 	bl	800b17a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2110      	movs	r1, #16
 8009d4a:	4816      	ldr	r0, [pc, #88]	@ (8009da4 <main+0x134>)
 8009d4c:	f001 fa15 	bl	800b17a <HAL_GPIO_WritePin>

  i2cTest();
 8009d50:	f7f6 ff30 	bl	8000bb4 <i2cTest>
  HAL_Delay(100);
 8009d54:	2064      	movs	r0, #100	@ 0x64
 8009d56:	f000 fc29 	bl	800a5ac <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009d5a:	4a13      	ldr	r2, [pc, #76]	@ (8009da8 <main+0x138>)
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	2001      	movs	r0, #1
 8009d60:	f7ff ff02 	bl	8009b68 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009d64:	4a11      	ldr	r2, [pc, #68]	@ (8009dac <main+0x13c>)
 8009d66:	2101      	movs	r1, #1
 8009d68:	2002      	movs	r0, #2
 8009d6a:	f7ff fefd 	bl	8009b68 <lcd_print>
  HAL_Delay(1000);
 8009d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009d72:	f000 fc1b 	bl	800a5ac <HAL_Delay>
  lcd_clear();
 8009d76:	f7ff ff23 	bl	8009bc0 <lcd_clear>

  eepromKontrol();
 8009d7a:	f7f6 fa5b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009d7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009d82:	f000 fc13 	bl	800a5ac <HAL_Delay>

  backLightTimer = millis;
 8009d86:	4b0a      	ldr	r3, [pc, #40]	@ (8009db0 <main+0x140>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009db4 <main+0x144>)
 8009d8c:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009d8e:	f7fd fa29 	bl	80071e4 <mainLoop>
 8009d92:	e7fc      	b.n	8009d8e <main+0x11e>
 8009d94:	40010c00 	.word	0x40010c00
 8009d98:	20001844 	.word	0x20001844
 8009d9c:	200017f0 	.word	0x200017f0
 8009da0:	40011000 	.word	0x40011000
 8009da4:	40010800 	.word	0x40010800
 8009da8:	2000009c 	.word	0x2000009c
 8009dac:	200000b0 	.word	0x200000b0
 8009db0:	20001044 	.word	0x20001044
 8009db4:	20001060 	.word	0x20001060

08009db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b090      	sub	sp, #64	@ 0x40
 8009dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	2228      	movs	r2, #40	@ 0x28
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f004 f9fa 	bl	800e1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009dcc:	1d3b      	adds	r3, r7, #4
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
 8009dd4:	609a      	str	r2, [r3, #8]
 8009dd6:	60da      	str	r2, [r3, #12]
 8009dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009de4:	2300      	movs	r3, #0
 8009de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009de8:	2301      	movs	r3, #1
 8009dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009dec:	2302      	movs	r3, #2
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009df6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009dfc:	f107 0318 	add.w	r3, r7, #24
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fc0d 	bl	800c620 <HAL_RCC_OscConfig>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009e0c:	f000 f9a2 	bl	800a154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e10:	230f      	movs	r3, #15
 8009e12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e14:	2302      	movs	r3, #2
 8009e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009e26:	1d3b      	adds	r3, r7, #4
 8009e28:	2102      	movs	r1, #2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 fe7a 	bl	800cb24 <HAL_RCC_ClockConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8009e36:	f000 f98d 	bl	800a154 <Error_Handler>
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3740      	adds	r7, #64	@ 0x40
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009e48:	4b16      	ldr	r3, [pc, #88]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ea8 <MX_CAN_Init+0x64>)
 8009e4c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009e4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e50:	2210      	movs	r2, #16
 8009e52:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009e54:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009e5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009e60:	4b10      	ldr	r3, [pc, #64]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009e66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009e72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009e78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009e7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009e84:	4b07      	ldr	r3, [pc, #28]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009e8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009e90:	4804      	ldr	r0, [pc, #16]	@ (8009ea4 <MX_CAN_Init+0x60>)
 8009e92:	f000 fbaf 	bl	800a5f4 <HAL_CAN_Init>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009e9c:	f000 f95a 	bl	800a154 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200017c8 	.word	0x200017c8
 8009ea8:	40006400 	.word	0x40006400

08009eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009eb0:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009eb2:	4a13      	ldr	r2, [pc, #76]	@ (8009f00 <MX_I2C1_Init+0x54>)
 8009eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009eb6:	4b11      	ldr	r3, [pc, #68]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009eb8:	4a12      	ldr	r2, [pc, #72]	@ (8009f04 <MX_I2C1_Init+0x58>)
 8009eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009ed6:	4b09      	ldr	r3, [pc, #36]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009edc:	4b07      	ldr	r3, [pc, #28]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009ee2:	4b06      	ldr	r3, [pc, #24]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009ee8:	4804      	ldr	r0, [pc, #16]	@ (8009efc <MX_I2C1_Init+0x50>)
 8009eea:	f001 f977 	bl	800b1dc <HAL_I2C_Init>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009ef4:	f000 f92e 	bl	800a154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009ef8:	bf00      	nop
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	200017f0 	.word	0x200017f0
 8009f00:	40005400 	.word	0x40005400
 8009f04:	00061a80 	.word	0x00061a80

08009f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	605a      	str	r2, [r3, #4]
 8009f18:	609a      	str	r2, [r3, #8]
 8009f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f1c:	463b      	mov	r3, r7
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009f24:	4b1f      	ldr	r3, [pc, #124]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f26:	4a20      	ldr	r2, [pc, #128]	@ (8009fa8 <MX_TIM1_Init+0xa0>)
 8009f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f2c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009f30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f32:	4b1c      	ldr	r3, [pc, #112]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009f38:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f3a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009f3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f40:	4b18      	ldr	r3, [pc, #96]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f46:	4b17      	ldr	r3, [pc, #92]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f4c:	4b15      	ldr	r3, [pc, #84]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009f52:	4814      	ldr	r0, [pc, #80]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f54:	f002 ff74 	bl	800ce40 <HAL_TIM_Base_Init>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009f5e:	f000 f8f9 	bl	800a154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009f68:	f107 0308 	add.w	r3, r7, #8
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	480d      	ldr	r0, [pc, #52]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f70:	f003 f91e 	bl	800d1b0 <HAL_TIM_ConfigClockSource>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009f7a:	f000 f8eb 	bl	800a154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009f86:	463b      	mov	r3, r7
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4806      	ldr	r0, [pc, #24]	@ (8009fa4 <MX_TIM1_Init+0x9c>)
 8009f8c:	f003 fb0c 	bl	800d5a8 <HAL_TIMEx_MasterConfigSynchronization>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009f96:	f000 f8dd 	bl	800a154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20001844 	.word	0x20001844
 8009fa8:	40012c00 	.word	0x40012c00

08009fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009fb0:	4b11      	ldr	r3, [pc, #68]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fb2:	4a12      	ldr	r2, [pc, #72]	@ (8009ffc <MX_USART1_UART_Init+0x50>)
 8009fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009fb6:	4b10      	ldr	r3, [pc, #64]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009fca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009fd0:	4b09      	ldr	r3, [pc, #36]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fd2:	220c      	movs	r2, #12
 8009fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fd6:	4b08      	ldr	r3, [pc, #32]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fdc:	4b06      	ldr	r3, [pc, #24]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009fe2:	4805      	ldr	r0, [pc, #20]	@ (8009ff8 <MX_USART1_UART_Init+0x4c>)
 8009fe4:	f003 fb5e 	bl	800d6a4 <HAL_UART_Init>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009fee:	f000 f8b1 	bl	800a154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009ff2:	bf00      	nop
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000188c 	.word	0x2000188c
 8009ffc:	40013800 	.word	0x40013800

0800a000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a006:	f107 0310 	add.w	r3, r7, #16
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	605a      	str	r2, [r3, #4]
 800a010:	609a      	str	r2, [r3, #8]
 800a012:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a014:	4b4b      	ldr	r3, [pc, #300]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	4a4a      	ldr	r2, [pc, #296]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a01a:	f043 0310 	orr.w	r3, r3, #16
 800a01e:	6193      	str	r3, [r2, #24]
 800a020:	4b48      	ldr	r3, [pc, #288]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f003 0310 	and.w	r3, r3, #16
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a02c:	4b45      	ldr	r3, [pc, #276]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	4a44      	ldr	r2, [pc, #272]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a032:	f043 0320 	orr.w	r3, r3, #32
 800a036:	6193      	str	r3, [r2, #24]
 800a038:	4b42      	ldr	r3, [pc, #264]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	60bb      	str	r3, [r7, #8]
 800a042:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a044:	4b3f      	ldr	r3, [pc, #252]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	4a3e      	ldr	r2, [pc, #248]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a04a:	f043 0304 	orr.w	r3, r3, #4
 800a04e:	6193      	str	r3, [r2, #24]
 800a050:	4b3c      	ldr	r3, [pc, #240]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	607b      	str	r3, [r7, #4]
 800a05a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a05c:	4b39      	ldr	r3, [pc, #228]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	4a38      	ldr	r2, [pc, #224]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a062:	f043 0308 	orr.w	r3, r3, #8
 800a066:	6193      	str	r3, [r2, #24]
 800a068:	4b36      	ldr	r3, [pc, #216]	@ (800a144 <MX_GPIO_Init+0x144>)
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	603b      	str	r3, [r7, #0]
 800a072:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800a074:	2200      	movs	r2, #0
 800a076:	21f0      	movs	r1, #240	@ 0xf0
 800a078:	4833      	ldr	r0, [pc, #204]	@ (800a148 <MX_GPIO_Init+0x148>)
 800a07a:	f001 f87e 	bl	800b17a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800a07e:	2200      	movs	r2, #0
 800a080:	f241 0130 	movw	r1, #4144	@ 0x1030
 800a084:	4831      	ldr	r0, [pc, #196]	@ (800a14c <MX_GPIO_Init+0x14c>)
 800a086:	f001 f878 	bl	800b17a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a08a:	2200      	movs	r2, #0
 800a08c:	f640 4107 	movw	r1, #3079	@ 0xc07
 800a090:	482f      	ldr	r0, [pc, #188]	@ (800a150 <MX_GPIO_Init+0x150>)
 800a092:	f001 f872 	bl	800b17a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800a096:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800a09a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0a4:	f107 0310 	add.w	r3, r7, #16
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4828      	ldr	r0, [pc, #160]	@ (800a14c <MX_GPIO_Init+0x14c>)
 800a0ac:	f000 fdee 	bl	800ac8c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800a0b0:	f248 130f 	movw	r3, #33039	@ 0x810f
 800a0b4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0be:	f107 0310 	add.w	r3, r7, #16
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4820      	ldr	r0, [pc, #128]	@ (800a148 <MX_GPIO_Init+0x148>)
 800a0c6:	f000 fde1 	bl	800ac8c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800a0ca:	23f0      	movs	r3, #240	@ 0xf0
 800a0cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4819      	ldr	r0, [pc, #100]	@ (800a148 <MX_GPIO_Init+0x148>)
 800a0e2:	f000 fdd3 	bl	800ac8c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800a0e6:	f241 0330 	movw	r3, #4144	@ 0x1030
 800a0ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0f8:	f107 0310 	add.w	r3, r7, #16
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4813      	ldr	r0, [pc, #76]	@ (800a14c <MX_GPIO_Init+0x14c>)
 800a100:	f000 fdc4 	bl	800ac8c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a104:	f640 4307 	movw	r3, #3079	@ 0xc07
 800a108:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a10a:	2301      	movs	r3, #1
 800a10c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a112:	2302      	movs	r3, #2
 800a114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a116:	f107 0310 	add.w	r3, r7, #16
 800a11a:	4619      	mov	r1, r3
 800a11c:	480c      	ldr	r0, [pc, #48]	@ (800a150 <MX_GPIO_Init+0x150>)
 800a11e:	f000 fdb5 	bl	800ac8c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800a122:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a130:	f107 0310 	add.w	r3, r7, #16
 800a134:	4619      	mov	r1, r3
 800a136:	4806      	ldr	r0, [pc, #24]	@ (800a150 <MX_GPIO_Init+0x150>)
 800a138:	f000 fda8 	bl	800ac8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a13c:	bf00      	nop
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40021000 	.word	0x40021000
 800a148:	40010800 	.word	0x40010800
 800a14c:	40011000 	.word	0x40011000
 800a150:	40010c00 	.word	0x40010c00

0800a154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800a158:	bf00      	nop
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bc80      	pop	{r7}
 800a15e:	4770      	bx	lr

0800a160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a166:	4b15      	ldr	r3, [pc, #84]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	4a14      	ldr	r2, [pc, #80]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	6193      	str	r3, [r2, #24]
 800a172:	4b12      	ldr	r3, [pc, #72]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	60bb      	str	r3, [r7, #8]
 800a17c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a17e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	4a0e      	ldr	r2, [pc, #56]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a188:	61d3      	str	r3, [r2, #28]
 800a18a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <HAL_MspInit+0x5c>)
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a192:	607b      	str	r3, [r7, #4]
 800a194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a196:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c0 <HAL_MspInit+0x60>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	4a04      	ldr	r2, [pc, #16]	@ (800a1c0 <HAL_MspInit+0x60>)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bc80      	pop	{r7}
 800a1ba:	4770      	bx	lr
 800a1bc:	40021000 	.word	0x40021000
 800a1c0:	40010000 	.word	0x40010000

0800a1c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	605a      	str	r2, [r3, #4]
 800a1d6:	609a      	str	r2, [r3, #8]
 800a1d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a1c      	ldr	r2, [pc, #112]	@ (800a250 <HAL_CAN_MspInit+0x8c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d131      	bne.n	800a248 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a1e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a1ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a1ee:	61d3      	str	r3, [r2, #28]
 800a1f0:	4b18      	ldr	r3, [pc, #96]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1fc:	4b15      	ldr	r3, [pc, #84]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	4a14      	ldr	r2, [pc, #80]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a202:	f043 0304 	orr.w	r3, r3, #4
 800a206:	6193      	str	r3, [r2, #24]
 800a208:	4b12      	ldr	r3, [pc, #72]	@ (800a254 <HAL_CAN_MspInit+0x90>)
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	60bb      	str	r3, [r7, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	4619      	mov	r1, r3
 800a228:	480b      	ldr	r0, [pc, #44]	@ (800a258 <HAL_CAN_MspInit+0x94>)
 800a22a:	f000 fd2f 	bl	800ac8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a22e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a234:	2302      	movs	r3, #2
 800a236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a238:	2303      	movs	r3, #3
 800a23a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a23c:	f107 0310 	add.w	r3, r7, #16
 800a240:	4619      	mov	r1, r3
 800a242:	4805      	ldr	r0, [pc, #20]	@ (800a258 <HAL_CAN_MspInit+0x94>)
 800a244:	f000 fd22 	bl	800ac8c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a248:	bf00      	nop
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40006400 	.word	0x40006400
 800a254:	40021000 	.word	0x40021000
 800a258:	40010800 	.word	0x40010800

0800a25c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a264:	f107 0310 	add.w	r3, r7, #16
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a15      	ldr	r2, [pc, #84]	@ (800a2cc <HAL_I2C_MspInit+0x70>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d123      	bne.n	800a2c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a27c:	4b14      	ldr	r3, [pc, #80]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	4a13      	ldr	r2, [pc, #76]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a282:	f043 0308 	orr.w	r3, r3, #8
 800a286:	6193      	str	r3, [r2, #24]
 800a288:	4b11      	ldr	r3, [pc, #68]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a294:	23c0      	movs	r3, #192	@ 0xc0
 800a296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a298:	2312      	movs	r3, #18
 800a29a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a29c:	2303      	movs	r3, #3
 800a29e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	480b      	ldr	r0, [pc, #44]	@ (800a2d4 <HAL_I2C_MspInit+0x78>)
 800a2a8:	f000 fcf0 	bl	800ac8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a2ac:	4b08      	ldr	r3, [pc, #32]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	4a07      	ldr	r2, [pc, #28]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a2b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2b6:	61d3      	str	r3, [r2, #28]
 800a2b8:	4b05      	ldr	r3, [pc, #20]	@ (800a2d0 <HAL_I2C_MspInit+0x74>)
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a2c4:	bf00      	nop
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	40005400 	.word	0x40005400
 800a2d0:	40021000 	.word	0x40021000
 800a2d4:	40010c00 	.word	0x40010c00

0800a2d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a310 <HAL_I2C_MspDeInit+0x38>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10d      	bne.n	800a306 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a2ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <HAL_I2C_MspDeInit+0x3c>)
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	4a09      	ldr	r2, [pc, #36]	@ (800a314 <HAL_I2C_MspDeInit+0x3c>)
 800a2f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2f4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a2f6:	2140      	movs	r1, #64	@ 0x40
 800a2f8:	4807      	ldr	r0, [pc, #28]	@ (800a318 <HAL_I2C_MspDeInit+0x40>)
 800a2fa:	f000 fe5b 	bl	800afb4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a2fe:	2180      	movs	r1, #128	@ 0x80
 800a300:	4805      	ldr	r0, [pc, #20]	@ (800a318 <HAL_I2C_MspDeInit+0x40>)
 800a302:	f000 fe57 	bl	800afb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	40005400 	.word	0x40005400
 800a314:	40021000 	.word	0x40021000
 800a318:	40010c00 	.word	0x40010c00

0800a31c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a0d      	ldr	r2, [pc, #52]	@ (800a360 <HAL_TIM_Base_MspInit+0x44>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d113      	bne.n	800a356 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <HAL_TIM_Base_MspInit+0x48>)
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	4a0c      	ldr	r2, [pc, #48]	@ (800a364 <HAL_TIM_Base_MspInit+0x48>)
 800a334:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a338:	6193      	str	r3, [r2, #24]
 800a33a:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <HAL_TIM_Base_MspInit+0x48>)
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	2019      	movs	r0, #25
 800a34c:	f000 fb25 	bl	800a99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a350:	2019      	movs	r0, #25
 800a352:	f000 fb3e 	bl	800a9d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	40012c00 	.word	0x40012c00
 800a364:	40021000 	.word	0x40021000

0800a368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a370:	f107 0310 	add.w	r3, r7, #16
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	605a      	str	r2, [r3, #4]
 800a37a:	609a      	str	r2, [r3, #8]
 800a37c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a20      	ldr	r2, [pc, #128]	@ (800a404 <HAL_UART_MspInit+0x9c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d139      	bne.n	800a3fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a388:	4b1f      	ldr	r3, [pc, #124]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	4a1e      	ldr	r2, [pc, #120]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a38e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a392:	6193      	str	r3, [r2, #24]
 800a394:	4b1c      	ldr	r3, [pc, #112]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3a0:	4b19      	ldr	r3, [pc, #100]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	4a18      	ldr	r2, [pc, #96]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a3a6:	f043 0304 	orr.w	r3, r3, #4
 800a3aa:	6193      	str	r3, [r2, #24]
 800a3ac:	4b16      	ldr	r3, [pc, #88]	@ (800a408 <HAL_UART_MspInit+0xa0>)
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	60bb      	str	r3, [r7, #8]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a3b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3c6:	f107 0310 	add.w	r3, r7, #16
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	480f      	ldr	r0, [pc, #60]	@ (800a40c <HAL_UART_MspInit+0xa4>)
 800a3ce:	f000 fc5d 	bl	800ac8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a3d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3e0:	f107 0310 	add.w	r3, r7, #16
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4809      	ldr	r0, [pc, #36]	@ (800a40c <HAL_UART_MspInit+0xa4>)
 800a3e8:	f000 fc50 	bl	800ac8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	2025      	movs	r0, #37	@ 0x25
 800a3f2:	f000 fad2 	bl	800a99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a3f6:	2025      	movs	r0, #37	@ 0x25
 800a3f8:	f000 faeb 	bl	800a9d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a3fc:	bf00      	nop
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40013800 	.word	0x40013800
 800a408:	40021000 	.word	0x40021000
 800a40c:	40010800 	.word	0x40010800

0800a410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <NMI_Handler+0x4>

0800a418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a41c:	bf00      	nop
 800a41e:	e7fd      	b.n	800a41c <HardFault_Handler+0x4>

0800a420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a424:	bf00      	nop
 800a426:	e7fd      	b.n	800a424 <MemManage_Handler+0x4>

0800a428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a42c:	bf00      	nop
 800a42e:	e7fd      	b.n	800a42c <BusFault_Handler+0x4>

0800a430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <UsageFault_Handler+0x4>

0800a438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a438:	b480      	push	{r7}
 800a43a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a43c:	bf00      	nop
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a444:	b480      	push	{r7}
 800a446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a448:	bf00      	nop
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bc80      	pop	{r7}
 800a44e:	4770      	bx	lr

0800a450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a460:	f000 f888 	bl	800a574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a464:	bf00      	nop
 800a466:	bd80      	pop	{r7, pc}

0800a468 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a46c:	4802      	ldr	r0, [pc, #8]	@ (800a478 <TIM1_UP_IRQHandler+0x10>)
 800a46e:	f002 fd97 	bl	800cfa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a472:	bf00      	nop
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20001844 	.word	0x20001844

0800a47c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a480:	4802      	ldr	r0, [pc, #8]	@ (800a48c <USART1_IRQHandler+0x10>)
 800a482:	f003 f95f 	bl	800d744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a486:	bf00      	nop
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	2000188c 	.word	0x2000188c

0800a490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	bc80      	pop	{r7}
 800a49a:	4770      	bx	lr

0800a49c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a49c:	480c      	ldr	r0, [pc, #48]	@ (800a4d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a49e:	490d      	ldr	r1, [pc, #52]	@ (800a4d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a4a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a4a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a4a4:	e002      	b.n	800a4ac <LoopCopyDataInit>

0800a4a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a4a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a4a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a4aa:	3304      	adds	r3, #4

0800a4ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a4ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a4ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a4b0:	d3f9      	bcc.n	800a4a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a4b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a4dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a4b4:	4c0a      	ldr	r4, [pc, #40]	@ (800a4e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a4b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a4b8:	e001      	b.n	800a4be <LoopFillZerobss>

0800a4ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a4ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a4bc:	3204      	adds	r2, #4

0800a4be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a4be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a4c0:	d3fb      	bcc.n	800a4ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a4c2:	f7ff ffe5 	bl	800a490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a4c6:	f003 fe83 	bl	800e1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a4ca:	f7ff fbd1 	bl	8009c70 <main>
  bx lr
 800a4ce:	4770      	bx	lr
  ldr r0, =_sdata
 800a4d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a4d4:	20000f80 	.word	0x20000f80
  ldr r2, =_sidata
 800a4d8:	0800e44c 	.word	0x0800e44c
  ldr r2, =_sbss
 800a4dc:	20000f80 	.word	0x20000f80
  ldr r4, =_ebss
 800a4e0:	200018d8 	.word	0x200018d8

0800a4e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a4e4:	e7fe      	b.n	800a4e4 <ADC1_2_IRQHandler>
	...

0800a4e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a4ec:	4b08      	ldr	r3, [pc, #32]	@ (800a510 <HAL_Init+0x28>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a07      	ldr	r2, [pc, #28]	@ (800a510 <HAL_Init+0x28>)
 800a4f2:	f043 0310 	orr.w	r3, r3, #16
 800a4f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4f8:	2003      	movs	r0, #3
 800a4fa:	f000 fa43 	bl	800a984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4fe:	200f      	movs	r0, #15
 800a500:	f000 f808 	bl	800a514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a504:	f7ff fe2c 	bl	800a160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40022000 	.word	0x40022000

0800a514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a51c:	4b12      	ldr	r3, [pc, #72]	@ (800a568 <HAL_InitTick+0x54>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b12      	ldr	r3, [pc, #72]	@ (800a56c <HAL_InitTick+0x58>)
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	4619      	mov	r1, r3
 800a526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a52a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a532:	4618      	mov	r0, r3
 800a534:	f000 fa5b 	bl	800a9ee <HAL_SYSTICK_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e00e      	b.n	800a560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b0f      	cmp	r3, #15
 800a546:	d80a      	bhi.n	800a55e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a548:	2200      	movs	r2, #0
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	f000 fa23 	bl	800a99a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a554:	4a06      	ldr	r2, [pc, #24]	@ (800a570 <HAL_InitTick+0x5c>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e000      	b.n	800a560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000f74 	.word	0x20000f74
 800a56c:	20000f7c 	.word	0x20000f7c
 800a570:	20000f78 	.word	0x20000f78

0800a574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a578:	4b05      	ldr	r3, [pc, #20]	@ (800a590 <HAL_IncTick+0x1c>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	4b05      	ldr	r3, [pc, #20]	@ (800a594 <HAL_IncTick+0x20>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4413      	add	r3, r2
 800a584:	4a03      	ldr	r2, [pc, #12]	@ (800a594 <HAL_IncTick+0x20>)
 800a586:	6013      	str	r3, [r2, #0]
}
 800a588:	bf00      	nop
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bc80      	pop	{r7}
 800a58e:	4770      	bx	lr
 800a590:	20000f7c 	.word	0x20000f7c
 800a594:	200018d4 	.word	0x200018d4

0800a598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  return uwTick;
 800a59c:	4b02      	ldr	r3, [pc, #8]	@ (800a5a8 <HAL_GetTick+0x10>)
 800a59e:	681b      	ldr	r3, [r3, #0]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bc80      	pop	{r7}
 800a5a6:	4770      	bx	lr
 800a5a8:	200018d4 	.word	0x200018d4

0800a5ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a5b4:	f7ff fff0 	bl	800a598 <HAL_GetTick>
 800a5b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d005      	beq.n	800a5d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <HAL_Delay+0x44>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a5d2:	bf00      	nop
 800a5d4:	f7ff ffe0 	bl	800a598 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d8f7      	bhi.n	800a5d4 <HAL_Delay+0x28>
  {
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000f7c 	.word	0x20000f7c

0800a5f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e0ed      	b.n	800a7e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d102      	bne.n	800a618 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fdd6 	bl	800a1c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0201 	orr.w	r2, r2, #1
 800a626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a628:	f7ff ffb6 	bl	800a598 <HAL_GetTick>
 800a62c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a62e:	e012      	b.n	800a656 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a630:	f7ff ffb2 	bl	800a598 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b0a      	cmp	r3, #10
 800a63c:	d90b      	bls.n	800a656 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a642:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2205      	movs	r2, #5
 800a64e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e0c5      	b.n	800a7e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0e5      	beq.n	800a630 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0202 	bic.w	r2, r2, #2
 800a672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a674:	f7ff ff90 	bl	800a598 <HAL_GetTick>
 800a678:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a67a:	e012      	b.n	800a6a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a67c:	f7ff ff8c 	bl	800a598 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b0a      	cmp	r3, #10
 800a688:	d90b      	bls.n	800a6a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2205      	movs	r2, #5
 800a69a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e09f      	b.n	800a7e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e5      	bne.n	800a67c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	7e1b      	ldrb	r3, [r3, #24]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d108      	bne.n	800a6ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	e007      	b.n	800a6da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7e5b      	ldrb	r3, [r3, #25]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d108      	bne.n	800a6f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	e007      	b.n	800a704 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a702:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7e9b      	ldrb	r3, [r3, #26]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d108      	bne.n	800a71e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0220 	orr.w	r2, r2, #32
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	e007      	b.n	800a72e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0220 	bic.w	r2, r2, #32
 800a72c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	7edb      	ldrb	r3, [r3, #27]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d108      	bne.n	800a748 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0210 	bic.w	r2, r2, #16
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	e007      	b.n	800a758 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f042 0210 	orr.w	r2, r2, #16
 800a756:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	7f1b      	ldrb	r3, [r3, #28]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d108      	bne.n	800a772 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f042 0208 	orr.w	r2, r2, #8
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	e007      	b.n	800a782 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0208 	bic.w	r2, r2, #8
 800a780:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	7f5b      	ldrb	r3, [r3, #29]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d108      	bne.n	800a79c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0204 	orr.w	r2, r2, #4
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e007      	b.n	800a7ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0204 	bic.w	r2, r2, #4
 800a7aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	ea42 0103 	orr.w	r1, r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	1e5a      	subs	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <__NVIC_SetPriorityGrouping>:
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a830 <__NVIC_SetPriorityGrouping+0x44>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a808:	4013      	ands	r3, r2
 800a80a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a81c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a81e:	4a04      	ldr	r2, [pc, #16]	@ (800a830 <__NVIC_SetPriorityGrouping+0x44>)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	60d3      	str	r3, [r2, #12]
}
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	bc80      	pop	{r7}
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	e000ed00 	.word	0xe000ed00

0800a834 <__NVIC_GetPriorityGrouping>:
{
 800a834:	b480      	push	{r7}
 800a836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a838:	4b04      	ldr	r3, [pc, #16]	@ (800a84c <__NVIC_GetPriorityGrouping+0x18>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	0a1b      	lsrs	r3, r3, #8
 800a83e:	f003 0307 	and.w	r3, r3, #7
}
 800a842:	4618      	mov	r0, r3
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	e000ed00 	.word	0xe000ed00

0800a850 <__NVIC_EnableIRQ>:
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a85a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	db0b      	blt.n	800a87a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	f003 021f 	and.w	r2, r3, #31
 800a868:	4906      	ldr	r1, [pc, #24]	@ (800a884 <__NVIC_EnableIRQ+0x34>)
 800a86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2001      	movs	r0, #1
 800a872:	fa00 f202 	lsl.w	r2, r0, r2
 800a876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr
 800a884:	e000e100 	.word	0xe000e100

0800a888 <__NVIC_SetPriority>:
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db0a      	blt.n	800a8b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	490c      	ldr	r1, [pc, #48]	@ (800a8d4 <__NVIC_SetPriority+0x4c>)
 800a8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8a6:	0112      	lsls	r2, r2, #4
 800a8a8:	b2d2      	uxtb	r2, r2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a8b0:	e00a      	b.n	800a8c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	4908      	ldr	r1, [pc, #32]	@ (800a8d8 <__NVIC_SetPriority+0x50>)
 800a8b8:	79fb      	ldrb	r3, [r7, #7]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	3b04      	subs	r3, #4
 800a8c0:	0112      	lsls	r2, r2, #4
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	761a      	strb	r2, [r3, #24]
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	e000e100 	.word	0xe000e100
 800a8d8:	e000ed00 	.word	0xe000ed00

0800a8dc <NVIC_EncodePriority>:
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b089      	sub	sp, #36	@ 0x24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f003 0307 	and.w	r3, r3, #7
 800a8ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f1c3 0307 	rsb	r3, r3, #7
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	bf28      	it	cs
 800a8fa:	2304      	movcs	r3, #4
 800a8fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	3304      	adds	r3, #4
 800a902:	2b06      	cmp	r3, #6
 800a904:	d902      	bls.n	800a90c <NVIC_EncodePriority+0x30>
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	3b03      	subs	r3, #3
 800a90a:	e000      	b.n	800a90e <NVIC_EncodePriority+0x32>
 800a90c:	2300      	movs	r3, #0
 800a90e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a910:	f04f 32ff 	mov.w	r2, #4294967295
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	fa02 f303 	lsl.w	r3, r2, r3
 800a91a:	43da      	mvns	r2, r3
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	401a      	ands	r2, r3
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a924:	f04f 31ff 	mov.w	r1, #4294967295
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	fa01 f303 	lsl.w	r3, r1, r3
 800a92e:	43d9      	mvns	r1, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a934:	4313      	orrs	r3, r2
}
 800a936:	4618      	mov	r0, r3
 800a938:	3724      	adds	r7, #36	@ 0x24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr

0800a940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a950:	d301      	bcc.n	800a956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a952:	2301      	movs	r3, #1
 800a954:	e00f      	b.n	800a976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a956:	4a0a      	ldr	r2, [pc, #40]	@ (800a980 <SysTick_Config+0x40>)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a95e:	210f      	movs	r1, #15
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	f7ff ff90 	bl	800a888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a968:	4b05      	ldr	r3, [pc, #20]	@ (800a980 <SysTick_Config+0x40>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a96e:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <SysTick_Config+0x40>)
 800a970:	2207      	movs	r2, #7
 800a972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	e000e010 	.word	0xe000e010

0800a984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ff2d 	bl	800a7ec <__NVIC_SetPriorityGrouping>
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	607a      	str	r2, [r7, #4]
 800a9a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a9ac:	f7ff ff42 	bl	800a834 <__NVIC_GetPriorityGrouping>
 800a9b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	6978      	ldr	r0, [r7, #20]
 800a9b8:	f7ff ff90 	bl	800a8dc <NVIC_EncodePriority>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff ff5f 	bl	800a888 <__NVIC_SetPriority>
}
 800a9ca:	bf00      	nop
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	4603      	mov	r3, r0
 800a9da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a9dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7ff ff35 	bl	800a850 <__NVIC_EnableIRQ>
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ffa2 	bl	800a940 <SysTick_Config>
 800a9fc:	4603      	mov	r3, r0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d008      	beq.n	800aa30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2204      	movs	r2, #4
 800aa22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e020      	b.n	800aa72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 020e 	bic.w	r2, r2, #14
 800aa3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 0201 	bic.w	r2, r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f202 	lsl.w	r2, r1, r2
 800aa5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d005      	beq.n	800aaa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2204      	movs	r2, #4
 800aa98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	73fb      	strb	r3, [r7, #15]
 800aa9e:	e0d6      	b.n	800ac4e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 020e 	bic.w	r2, r2, #14
 800aaae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0201 	bic.w	r2, r2, #1
 800aabe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
 800aac6:	4b64      	ldr	r3, [pc, #400]	@ (800ac58 <HAL_DMA_Abort_IT+0x1dc>)
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d958      	bls.n	800ab7e <HAL_DMA_Abort_IT+0x102>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a62      	ldr	r2, [pc, #392]	@ (800ac5c <HAL_DMA_Abort_IT+0x1e0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d04f      	beq.n	800ab76 <HAL_DMA_Abort_IT+0xfa>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a61      	ldr	r2, [pc, #388]	@ (800ac60 <HAL_DMA_Abort_IT+0x1e4>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d048      	beq.n	800ab72 <HAL_DMA_Abort_IT+0xf6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a5f      	ldr	r2, [pc, #380]	@ (800ac64 <HAL_DMA_Abort_IT+0x1e8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d040      	beq.n	800ab6c <HAL_DMA_Abort_IT+0xf0>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a5e      	ldr	r2, [pc, #376]	@ (800ac68 <HAL_DMA_Abort_IT+0x1ec>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d038      	beq.n	800ab66 <HAL_DMA_Abort_IT+0xea>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a5c      	ldr	r2, [pc, #368]	@ (800ac6c <HAL_DMA_Abort_IT+0x1f0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d030      	beq.n	800ab60 <HAL_DMA_Abort_IT+0xe4>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a5b      	ldr	r2, [pc, #364]	@ (800ac70 <HAL_DMA_Abort_IT+0x1f4>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d028      	beq.n	800ab5a <HAL_DMA_Abort_IT+0xde>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a52      	ldr	r2, [pc, #328]	@ (800ac58 <HAL_DMA_Abort_IT+0x1dc>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d020      	beq.n	800ab54 <HAL_DMA_Abort_IT+0xd8>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a57      	ldr	r2, [pc, #348]	@ (800ac74 <HAL_DMA_Abort_IT+0x1f8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d019      	beq.n	800ab50 <HAL_DMA_Abort_IT+0xd4>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a55      	ldr	r2, [pc, #340]	@ (800ac78 <HAL_DMA_Abort_IT+0x1fc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d012      	beq.n	800ab4c <HAL_DMA_Abort_IT+0xd0>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a54      	ldr	r2, [pc, #336]	@ (800ac7c <HAL_DMA_Abort_IT+0x200>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00a      	beq.n	800ab46 <HAL_DMA_Abort_IT+0xca>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a52      	ldr	r2, [pc, #328]	@ (800ac80 <HAL_DMA_Abort_IT+0x204>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d102      	bne.n	800ab40 <HAL_DMA_Abort_IT+0xc4>
 800ab3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab3e:	e01b      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab44:	e018      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab4a:	e015      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	e013      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e011      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab58:	e00e      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab5e:	e00b      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab64:	e008      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab6a:	e005      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab70:	e002      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab72:	2310      	movs	r3, #16
 800ab74:	e000      	b.n	800ab78 <HAL_DMA_Abort_IT+0xfc>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4a42      	ldr	r2, [pc, #264]	@ (800ac84 <HAL_DMA_Abort_IT+0x208>)
 800ab7a:	6053      	str	r3, [r2, #4]
 800ab7c:	e057      	b.n	800ac2e <HAL_DMA_Abort_IT+0x1b2>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a36      	ldr	r2, [pc, #216]	@ (800ac5c <HAL_DMA_Abort_IT+0x1e0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d04f      	beq.n	800ac28 <HAL_DMA_Abort_IT+0x1ac>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a34      	ldr	r2, [pc, #208]	@ (800ac60 <HAL_DMA_Abort_IT+0x1e4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d048      	beq.n	800ac24 <HAL_DMA_Abort_IT+0x1a8>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a33      	ldr	r2, [pc, #204]	@ (800ac64 <HAL_DMA_Abort_IT+0x1e8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d040      	beq.n	800ac1e <HAL_DMA_Abort_IT+0x1a2>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a31      	ldr	r2, [pc, #196]	@ (800ac68 <HAL_DMA_Abort_IT+0x1ec>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d038      	beq.n	800ac18 <HAL_DMA_Abort_IT+0x19c>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a30      	ldr	r2, [pc, #192]	@ (800ac6c <HAL_DMA_Abort_IT+0x1f0>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d030      	beq.n	800ac12 <HAL_DMA_Abort_IT+0x196>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a2e      	ldr	r2, [pc, #184]	@ (800ac70 <HAL_DMA_Abort_IT+0x1f4>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d028      	beq.n	800ac0c <HAL_DMA_Abort_IT+0x190>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a26      	ldr	r2, [pc, #152]	@ (800ac58 <HAL_DMA_Abort_IT+0x1dc>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d020      	beq.n	800ac06 <HAL_DMA_Abort_IT+0x18a>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac74 <HAL_DMA_Abort_IT+0x1f8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d019      	beq.n	800ac02 <HAL_DMA_Abort_IT+0x186>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a29      	ldr	r2, [pc, #164]	@ (800ac78 <HAL_DMA_Abort_IT+0x1fc>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d012      	beq.n	800abfe <HAL_DMA_Abort_IT+0x182>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a27      	ldr	r2, [pc, #156]	@ (800ac7c <HAL_DMA_Abort_IT+0x200>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00a      	beq.n	800abf8 <HAL_DMA_Abort_IT+0x17c>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a26      	ldr	r2, [pc, #152]	@ (800ac80 <HAL_DMA_Abort_IT+0x204>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d102      	bne.n	800abf2 <HAL_DMA_Abort_IT+0x176>
 800abec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abf0:	e01b      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800abf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800abf6:	e018      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800abf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abfc:	e015      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800abfe:	2310      	movs	r3, #16
 800ac00:	e013      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e011      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac0a:	e00e      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ac10:	e00b      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ac16:	e008      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac1c:	e005      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac22:	e002      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac24:	2310      	movs	r3, #16
 800ac26:	e000      	b.n	800ac2a <HAL_DMA_Abort_IT+0x1ae>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4a17      	ldr	r2, [pc, #92]	@ (800ac88 <HAL_DMA_Abort_IT+0x20c>)
 800ac2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
    } 
  }
  return status;
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	40020080 	.word	0x40020080
 800ac5c:	40020008 	.word	0x40020008
 800ac60:	4002001c 	.word	0x4002001c
 800ac64:	40020030 	.word	0x40020030
 800ac68:	40020044 	.word	0x40020044
 800ac6c:	40020058 	.word	0x40020058
 800ac70:	4002006c 	.word	0x4002006c
 800ac74:	40020408 	.word	0x40020408
 800ac78:	4002041c 	.word	0x4002041c
 800ac7c:	40020430 	.word	0x40020430
 800ac80:	40020444 	.word	0x40020444
 800ac84:	40020400 	.word	0x40020400
 800ac88:	40020000 	.word	0x40020000

0800ac8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b08b      	sub	sp, #44	@ 0x2c
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ac96:	2300      	movs	r3, #0
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac9e:	e179      	b.n	800af94 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800aca0:	2201      	movs	r2, #1
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	fa02 f303 	lsl.w	r3, r2, r3
 800aca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	4013      	ands	r3, r2
 800acb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	429a      	cmp	r2, r3
 800acba:	f040 8168 	bne.w	800af8e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4a96      	ldr	r2, [pc, #600]	@ (800af1c <HAL_GPIO_Init+0x290>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d05e      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
 800acc8:	4a94      	ldr	r2, [pc, #592]	@ (800af1c <HAL_GPIO_Init+0x290>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d875      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800acce:	4a94      	ldr	r2, [pc, #592]	@ (800af20 <HAL_GPIO_Init+0x294>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d058      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
 800acd4:	4a92      	ldr	r2, [pc, #584]	@ (800af20 <HAL_GPIO_Init+0x294>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d86f      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800acda:	4a92      	ldr	r2, [pc, #584]	@ (800af24 <HAL_GPIO_Init+0x298>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d052      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
 800ace0:	4a90      	ldr	r2, [pc, #576]	@ (800af24 <HAL_GPIO_Init+0x298>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d869      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800ace6:	4a90      	ldr	r2, [pc, #576]	@ (800af28 <HAL_GPIO_Init+0x29c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d04c      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
 800acec:	4a8e      	ldr	r2, [pc, #568]	@ (800af28 <HAL_GPIO_Init+0x29c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d863      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800acf2:	4a8e      	ldr	r2, [pc, #568]	@ (800af2c <HAL_GPIO_Init+0x2a0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d046      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
 800acf8:	4a8c      	ldr	r2, [pc, #560]	@ (800af2c <HAL_GPIO_Init+0x2a0>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d85d      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800acfe:	2b12      	cmp	r3, #18
 800ad00:	d82a      	bhi.n	800ad58 <HAL_GPIO_Init+0xcc>
 800ad02:	2b12      	cmp	r3, #18
 800ad04:	d859      	bhi.n	800adba <HAL_GPIO_Init+0x12e>
 800ad06:	a201      	add	r2, pc, #4	@ (adr r2, 800ad0c <HAL_GPIO_Init+0x80>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad87 	.word	0x0800ad87
 800ad10:	0800ad61 	.word	0x0800ad61
 800ad14:	0800ad73 	.word	0x0800ad73
 800ad18:	0800adb5 	.word	0x0800adb5
 800ad1c:	0800adbb 	.word	0x0800adbb
 800ad20:	0800adbb 	.word	0x0800adbb
 800ad24:	0800adbb 	.word	0x0800adbb
 800ad28:	0800adbb 	.word	0x0800adbb
 800ad2c:	0800adbb 	.word	0x0800adbb
 800ad30:	0800adbb 	.word	0x0800adbb
 800ad34:	0800adbb 	.word	0x0800adbb
 800ad38:	0800adbb 	.word	0x0800adbb
 800ad3c:	0800adbb 	.word	0x0800adbb
 800ad40:	0800adbb 	.word	0x0800adbb
 800ad44:	0800adbb 	.word	0x0800adbb
 800ad48:	0800adbb 	.word	0x0800adbb
 800ad4c:	0800adbb 	.word	0x0800adbb
 800ad50:	0800ad69 	.word	0x0800ad69
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	4a75      	ldr	r2, [pc, #468]	@ (800af30 <HAL_GPIO_Init+0x2a4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ad5e:	e02c      	b.n	800adba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	623b      	str	r3, [r7, #32]
          break;
 800ad66:	e029      	b.n	800adbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	623b      	str	r3, [r7, #32]
          break;
 800ad70:	e024      	b.n	800adbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	3308      	adds	r3, #8
 800ad78:	623b      	str	r3, [r7, #32]
          break;
 800ad7a:	e01f      	b.n	800adbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	330c      	adds	r3, #12
 800ad82:	623b      	str	r3, [r7, #32]
          break;
 800ad84:	e01a      	b.n	800adbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800ad8e:	2304      	movs	r3, #4
 800ad90:	623b      	str	r3, [r7, #32]
          break;
 800ad92:	e013      	b.n	800adbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d105      	bne.n	800ada8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	611a      	str	r2, [r3, #16]
          break;
 800ada6:	e009      	b.n	800adbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ada8:	2308      	movs	r3, #8
 800adaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	615a      	str	r2, [r3, #20]
          break;
 800adb2:	e003      	b.n	800adbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800adb4:	2300      	movs	r3, #0
 800adb6:	623b      	str	r3, [r7, #32]
          break;
 800adb8:	e000      	b.n	800adbc <HAL_GPIO_Init+0x130>
          break;
 800adba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	2bff      	cmp	r3, #255	@ 0xff
 800adc0:	d801      	bhi.n	800adc6 <HAL_GPIO_Init+0x13a>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	e001      	b.n	800adca <HAL_GPIO_Init+0x13e>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	2bff      	cmp	r3, #255	@ 0xff
 800add0:	d802      	bhi.n	800add8 <HAL_GPIO_Init+0x14c>
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	e002      	b.n	800adde <HAL_GPIO_Init+0x152>
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	3b08      	subs	r3, #8
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	210f      	movs	r1, #15
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	fa01 f303 	lsl.w	r3, r1, r3
 800adec:	43db      	mvns	r3, r3
 800adee:	401a      	ands	r2, r3
 800adf0:	6a39      	ldr	r1, [r7, #32]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	fa01 f303 	lsl.w	r3, r1, r3
 800adf8:	431a      	orrs	r2, r3
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80c1 	beq.w	800af8e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ae0c:	4b49      	ldr	r3, [pc, #292]	@ (800af34 <HAL_GPIO_Init+0x2a8>)
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	4a48      	ldr	r2, [pc, #288]	@ (800af34 <HAL_GPIO_Init+0x2a8>)
 800ae12:	f043 0301 	orr.w	r3, r3, #1
 800ae16:	6193      	str	r3, [r2, #24]
 800ae18:	4b46      	ldr	r3, [pc, #280]	@ (800af34 <HAL_GPIO_Init+0x2a8>)
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	60bb      	str	r3, [r7, #8]
 800ae22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ae24:	4a44      	ldr	r2, [pc, #272]	@ (800af38 <HAL_GPIO_Init+0x2ac>)
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	089b      	lsrs	r3, r3, #2
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	220f      	movs	r2, #15
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	43db      	mvns	r3, r3
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4013      	ands	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a3c      	ldr	r2, [pc, #240]	@ (800af3c <HAL_GPIO_Init+0x2b0>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d01f      	beq.n	800ae90 <HAL_GPIO_Init+0x204>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a3b      	ldr	r2, [pc, #236]	@ (800af40 <HAL_GPIO_Init+0x2b4>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d019      	beq.n	800ae8c <HAL_GPIO_Init+0x200>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a3a      	ldr	r2, [pc, #232]	@ (800af44 <HAL_GPIO_Init+0x2b8>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d013      	beq.n	800ae88 <HAL_GPIO_Init+0x1fc>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a39      	ldr	r2, [pc, #228]	@ (800af48 <HAL_GPIO_Init+0x2bc>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d00d      	beq.n	800ae84 <HAL_GPIO_Init+0x1f8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a38      	ldr	r2, [pc, #224]	@ (800af4c <HAL_GPIO_Init+0x2c0>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d007      	beq.n	800ae80 <HAL_GPIO_Init+0x1f4>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a37      	ldr	r2, [pc, #220]	@ (800af50 <HAL_GPIO_Init+0x2c4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d101      	bne.n	800ae7c <HAL_GPIO_Init+0x1f0>
 800ae78:	2305      	movs	r3, #5
 800ae7a:	e00a      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae7c:	2306      	movs	r3, #6
 800ae7e:	e008      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae80:	2304      	movs	r3, #4
 800ae82:	e006      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae84:	2303      	movs	r3, #3
 800ae86:	e004      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e002      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e000      	b.n	800ae92 <HAL_GPIO_Init+0x206>
 800ae90:	2300      	movs	r3, #0
 800ae92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae94:	f002 0203 	and.w	r2, r2, #3
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	4093      	lsls	r3, r2
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800aea2:	4925      	ldr	r1, [pc, #148]	@ (800af38 <HAL_GPIO_Init+0x2ac>)
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	089b      	lsrs	r3, r3, #2
 800aea8:	3302      	adds	r3, #2
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800aebc:	4b25      	ldr	r3, [pc, #148]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	4924      	ldr	r1, [pc, #144]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	608b      	str	r3, [r1, #8]
 800aec8:	e006      	b.n	800aed8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800aeca:	4b22      	ldr	r3, [pc, #136]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aecc:	689a      	ldr	r2, [r3, #8]
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	43db      	mvns	r3, r3
 800aed2:	4920      	ldr	r1, [pc, #128]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d006      	beq.n	800aef2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800aee4:	4b1b      	ldr	r3, [pc, #108]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	491a      	ldr	r1, [pc, #104]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60cb      	str	r3, [r1, #12]
 800aef0:	e006      	b.n	800af00 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800aef2:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	43db      	mvns	r3, r3
 800aefa:	4916      	ldr	r1, [pc, #88]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d025      	beq.n	800af58 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800af0c:	4b11      	ldr	r3, [pc, #68]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4910      	ldr	r1, [pc, #64]	@ (800af54 <HAL_GPIO_Init+0x2c8>)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	4313      	orrs	r3, r2
 800af16:	604b      	str	r3, [r1, #4]
 800af18:	e025      	b.n	800af66 <HAL_GPIO_Init+0x2da>
 800af1a:	bf00      	nop
 800af1c:	10320000 	.word	0x10320000
 800af20:	10310000 	.word	0x10310000
 800af24:	10220000 	.word	0x10220000
 800af28:	10210000 	.word	0x10210000
 800af2c:	10120000 	.word	0x10120000
 800af30:	10110000 	.word	0x10110000
 800af34:	40021000 	.word	0x40021000
 800af38:	40010000 	.word	0x40010000
 800af3c:	40010800 	.word	0x40010800
 800af40:	40010c00 	.word	0x40010c00
 800af44:	40011000 	.word	0x40011000
 800af48:	40011400 	.word	0x40011400
 800af4c:	40011800 	.word	0x40011800
 800af50:	40011c00 	.word	0x40011c00
 800af54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800af58:	4b15      	ldr	r3, [pc, #84]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	43db      	mvns	r3, r3
 800af60:	4913      	ldr	r1, [pc, #76]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af62:	4013      	ands	r3, r2
 800af64:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d006      	beq.n	800af80 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800af72:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	490e      	ldr	r1, [pc, #56]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	600b      	str	r3, [r1, #0]
 800af7e:	e006      	b.n	800af8e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800af80:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	43db      	mvns	r3, r3
 800af88:	4909      	ldr	r1, [pc, #36]	@ (800afb0 <HAL_GPIO_Init+0x324>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800af8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af90:	3301      	adds	r3, #1
 800af92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	fa22 f303 	lsr.w	r3, r2, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f47f ae7e 	bne.w	800aca0 <HAL_GPIO_Init+0x14>
  }
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	372c      	adds	r7, #44	@ 0x2c
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr
 800afb0:	40010400 	.word	0x40010400

0800afb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b089      	sub	sp, #36	@ 0x24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800afc2:	e0a6      	b.n	800b112 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800afc4:	2201      	movs	r2, #1
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	4013      	ands	r3, r2
 800afd0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 8099 	beq.w	800b10c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800afda:	4a54      	ldr	r2, [pc, #336]	@ (800b12c <HAL_GPIO_DeInit+0x178>)
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	089b      	lsrs	r3, r3, #2
 800afe0:	3302      	adds	r3, #2
 800afe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afe6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	220f      	movs	r2, #15
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	4013      	ands	r3, r2
 800affa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a4c      	ldr	r2, [pc, #304]	@ (800b130 <HAL_GPIO_DeInit+0x17c>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d01f      	beq.n	800b044 <HAL_GPIO_DeInit+0x90>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a4b      	ldr	r2, [pc, #300]	@ (800b134 <HAL_GPIO_DeInit+0x180>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d019      	beq.n	800b040 <HAL_GPIO_DeInit+0x8c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a4a      	ldr	r2, [pc, #296]	@ (800b138 <HAL_GPIO_DeInit+0x184>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d013      	beq.n	800b03c <HAL_GPIO_DeInit+0x88>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a49      	ldr	r2, [pc, #292]	@ (800b13c <HAL_GPIO_DeInit+0x188>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00d      	beq.n	800b038 <HAL_GPIO_DeInit+0x84>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a48      	ldr	r2, [pc, #288]	@ (800b140 <HAL_GPIO_DeInit+0x18c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d007      	beq.n	800b034 <HAL_GPIO_DeInit+0x80>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a47      	ldr	r2, [pc, #284]	@ (800b144 <HAL_GPIO_DeInit+0x190>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d101      	bne.n	800b030 <HAL_GPIO_DeInit+0x7c>
 800b02c:	2305      	movs	r3, #5
 800b02e:	e00a      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b030:	2306      	movs	r3, #6
 800b032:	e008      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b034:	2304      	movs	r3, #4
 800b036:	e006      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b038:	2303      	movs	r3, #3
 800b03a:	e004      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e002      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b040:	2301      	movs	r3, #1
 800b042:	e000      	b.n	800b046 <HAL_GPIO_DeInit+0x92>
 800b044:	2300      	movs	r3, #0
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	f002 0203 	and.w	r2, r2, #3
 800b04c:	0092      	lsls	r2, r2, #2
 800b04e:	4093      	lsls	r3, r2
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	429a      	cmp	r2, r3
 800b054:	d132      	bne.n	800b0bc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b056:	4b3c      	ldr	r3, [pc, #240]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	43db      	mvns	r3, r3
 800b05e:	493a      	ldr	r1, [pc, #232]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b060:	4013      	ands	r3, r2
 800b062:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b064:	4b38      	ldr	r3, [pc, #224]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	43db      	mvns	r3, r3
 800b06c:	4936      	ldr	r1, [pc, #216]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b06e:	4013      	ands	r3, r2
 800b070:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b072:	4b35      	ldr	r3, [pc, #212]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	43db      	mvns	r3, r3
 800b07a:	4933      	ldr	r1, [pc, #204]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b080:	4b31      	ldr	r3, [pc, #196]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	43db      	mvns	r3, r3
 800b088:	492f      	ldr	r1, [pc, #188]	@ (800b148 <HAL_GPIO_DeInit+0x194>)
 800b08a:	4013      	ands	r3, r2
 800b08c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	f003 0303 	and.w	r3, r3, #3
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	220f      	movs	r2, #15
 800b098:	fa02 f303 	lsl.w	r3, r2, r3
 800b09c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800b09e:	4a23      	ldr	r2, [pc, #140]	@ (800b12c <HAL_GPIO_DeInit+0x178>)
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	089b      	lsrs	r3, r3, #2
 800b0a4:	3302      	adds	r3, #2
 800b0a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	43da      	mvns	r2, r3
 800b0ae:	481f      	ldr	r0, [pc, #124]	@ (800b12c <HAL_GPIO_DeInit+0x178>)
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	089b      	lsrs	r3, r3, #2
 800b0b4:	400a      	ands	r2, r1
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2bff      	cmp	r3, #255	@ 0xff
 800b0c0:	d801      	bhi.n	800b0c6 <HAL_GPIO_DeInit+0x112>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	e001      	b.n	800b0ca <HAL_GPIO_DeInit+0x116>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2bff      	cmp	r3, #255	@ 0xff
 800b0d0:	d802      	bhi.n	800b0d8 <HAL_GPIO_DeInit+0x124>
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	e002      	b.n	800b0de <HAL_GPIO_DeInit+0x12a>
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	3b08      	subs	r3, #8
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	210f      	movs	r1, #15
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ec:	43db      	mvns	r3, r3
 800b0ee:	401a      	ands	r2, r3
 800b0f0:	2104      	movs	r1, #4
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68da      	ldr	r2, [r3, #12]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	43db      	mvns	r3, r3
 800b106:	401a      	ands	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	3301      	adds	r3, #1
 800b110:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	fa22 f303 	lsr.w	r3, r2, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f47f af52 	bne.w	800afc4 <HAL_GPIO_DeInit+0x10>
  }
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	3724      	adds	r7, #36	@ 0x24
 800b126:	46bd      	mov	sp, r7
 800b128:	bc80      	pop	{r7}
 800b12a:	4770      	bx	lr
 800b12c:	40010000 	.word	0x40010000
 800b130:	40010800 	.word	0x40010800
 800b134:	40010c00 	.word	0x40010c00
 800b138:	40011000 	.word	0x40011000
 800b13c:	40011400 	.word	0x40011400
 800b140:	40011800 	.word	0x40011800
 800b144:	40011c00 	.word	0x40011c00
 800b148:	40010400 	.word	0x40010400

0800b14c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	689a      	ldr	r2, [r3, #8]
 800b15c:	887b      	ldrh	r3, [r7, #2]
 800b15e:	4013      	ands	r3, r2
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b164:	2301      	movs	r3, #1
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	e001      	b.n	800b16e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	bc80      	pop	{r7}
 800b178:	4770      	bx	lr

0800b17a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	460b      	mov	r3, r1
 800b184:	807b      	strh	r3, [r7, #2]
 800b186:	4613      	mov	r3, r2
 800b188:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b18a:	787b      	ldrb	r3, [r7, #1]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b190:	887a      	ldrh	r2, [r7, #2]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b196:	e003      	b.n	800b1a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b198:	887b      	ldrh	r3, [r7, #2]
 800b19a:	041a      	lsls	r2, r3, #16
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	611a      	str	r2, [r3, #16]
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bc80      	pop	{r7}
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b1bc:	887a      	ldrh	r2, [r7, #2]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	041a      	lsls	r2, r3, #16
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	43d9      	mvns	r1, r3
 800b1c8:	887b      	ldrh	r3, [r7, #2]
 800b1ca:	400b      	ands	r3, r1
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	611a      	str	r2, [r3, #16]
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bc80      	pop	{r7}
 800b1da:	4770      	bx	lr

0800b1dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e12b      	b.n	800b446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff f82a 	bl	800a25c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2224      	movs	r2, #36	@ 0x24
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 0201 	bic.w	r2, r2, #1
 800b21e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b22e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b23e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b240:	f001 fdb8 	bl	800cdb4 <HAL_RCC_GetPCLK1Freq>
 800b244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	4a81      	ldr	r2, [pc, #516]	@ (800b450 <HAL_I2C_Init+0x274>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d807      	bhi.n	800b260 <HAL_I2C_Init+0x84>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4a80      	ldr	r2, [pc, #512]	@ (800b454 <HAL_I2C_Init+0x278>)
 800b254:	4293      	cmp	r3, r2
 800b256:	bf94      	ite	ls
 800b258:	2301      	movls	r3, #1
 800b25a:	2300      	movhi	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	e006      	b.n	800b26e <HAL_I2C_Init+0x92>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4a7d      	ldr	r2, [pc, #500]	@ (800b458 <HAL_I2C_Init+0x27c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	bf94      	ite	ls
 800b268:	2301      	movls	r3, #1
 800b26a:	2300      	movhi	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e0e7      	b.n	800b446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4a78      	ldr	r2, [pc, #480]	@ (800b45c <HAL_I2C_Init+0x280>)
 800b27a:	fba2 2303 	umull	r2, r3, r2, r3
 800b27e:	0c9b      	lsrs	r3, r3, #18
 800b280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	430a      	orrs	r2, r1
 800b294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4a6a      	ldr	r2, [pc, #424]	@ (800b450 <HAL_I2C_Init+0x274>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d802      	bhi.n	800b2b0 <HAL_I2C_Init+0xd4>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	e009      	b.n	800b2c4 <HAL_I2C_Init+0xe8>
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b2b6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ba:	4a69      	ldr	r2, [pc, #420]	@ (800b460 <HAL_I2C_Init+0x284>)
 800b2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c0:	099b      	lsrs	r3, r3, #6
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	6812      	ldr	r2, [r2, #0]
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b2d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	495c      	ldr	r1, [pc, #368]	@ (800b450 <HAL_I2C_Init+0x274>)
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	d819      	bhi.n	800b318 <HAL_I2C_Init+0x13c>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	1e59      	subs	r1, r3, #1
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2f2:	1c59      	adds	r1, r3, #1
 800b2f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b2f8:	400b      	ands	r3, r1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <HAL_I2C_Init+0x138>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1e59      	subs	r1, r3, #1
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	fbb1 f3f3 	udiv	r3, r1, r3
 800b30c:	3301      	adds	r3, #1
 800b30e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b312:	e051      	b.n	800b3b8 <HAL_I2C_Init+0x1dc>
 800b314:	2304      	movs	r3, #4
 800b316:	e04f      	b.n	800b3b8 <HAL_I2C_Init+0x1dc>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d111      	bne.n	800b344 <HAL_I2C_Init+0x168>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	1e58      	subs	r0, r3, #1
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6859      	ldr	r1, [r3, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	440b      	add	r3, r1
 800b32e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b332:	3301      	adds	r3, #1
 800b334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bf0c      	ite	eq
 800b33c:	2301      	moveq	r3, #1
 800b33e:	2300      	movne	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	e012      	b.n	800b36a <HAL_I2C_Init+0x18e>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	1e58      	subs	r0, r3, #1
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6859      	ldr	r1, [r3, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	0099      	lsls	r1, r3, #2
 800b354:	440b      	add	r3, r1
 800b356:	fbb0 f3f3 	udiv	r3, r0, r3
 800b35a:	3301      	adds	r3, #1
 800b35c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b360:	2b00      	cmp	r3, #0
 800b362:	bf0c      	ite	eq
 800b364:	2301      	moveq	r3, #1
 800b366:	2300      	movne	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <HAL_I2C_Init+0x196>
 800b36e:	2301      	movs	r3, #1
 800b370:	e022      	b.n	800b3b8 <HAL_I2C_Init+0x1dc>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10e      	bne.n	800b398 <HAL_I2C_Init+0x1bc>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1e58      	subs	r0, r3, #1
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6859      	ldr	r1, [r3, #4]
 800b382:	460b      	mov	r3, r1
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	440b      	add	r3, r1
 800b388:	fbb0 f3f3 	udiv	r3, r0, r3
 800b38c:	3301      	adds	r3, #1
 800b38e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b396:	e00f      	b.n	800b3b8 <HAL_I2C_Init+0x1dc>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	1e58      	subs	r0, r3, #1
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6859      	ldr	r1, [r3, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	0099      	lsls	r1, r3, #2
 800b3a8:	440b      	add	r3, r1
 800b3aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	6809      	ldr	r1, [r1, #0]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69da      	ldr	r2, [r3, #28]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b3e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6911      	ldr	r1, [r2, #16]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	68d2      	ldr	r2, [r2, #12]
 800b3f2:	4311      	orrs	r1, r2
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6812      	ldr	r2, [r2, #0]
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	695a      	ldr	r2, [r3, #20]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	431a      	orrs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0201 	orr.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	000186a0 	.word	0x000186a0
 800b454:	001e847f 	.word	0x001e847f
 800b458:	003d08ff 	.word	0x003d08ff
 800b45c:	431bde83 	.word	0x431bde83
 800b460:	10624dd3 	.word	0x10624dd3

0800b464 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e021      	b.n	800b4ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2224      	movs	r2, #36	@ 0x24
 800b47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f022 0201 	bic.w	r2, r2, #1
 800b48c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7fe ff22 	bl	800a2d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
	...

0800b4c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	817b      	strh	r3, [r7, #10]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4d8:	f7ff f85e 	bl	800a598 <HAL_GetTick>
 800b4dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	f040 80e0 	bne.w	800b6ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2319      	movs	r3, #25
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	4970      	ldr	r1, [pc, #448]	@ (800b6b8 <HAL_I2C_Master_Transmit+0x1f4>)
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fe5c 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b502:	2302      	movs	r3, #2
 800b504:	e0d3      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_I2C_Master_Transmit+0x50>
 800b510:	2302      	movs	r3, #2
 800b512:	e0cc      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b01      	cmp	r3, #1
 800b528:	d007      	beq.n	800b53a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0201 	orr.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b548:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2221      	movs	r2, #33	@ 0x21
 800b54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2210      	movs	r2, #16
 800b556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	893a      	ldrh	r2, [r7, #8]
 800b56a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4a50      	ldr	r2, [pc, #320]	@ (800b6bc <HAL_I2C_Master_Transmit+0x1f8>)
 800b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b57c:	8979      	ldrh	r1, [r7, #10]
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	6a3a      	ldr	r2, [r7, #32]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fc16 	bl	800bdb4 <I2C_MasterRequestWrite>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e08d      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b592:	2300      	movs	r3, #0
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b5a8:	e066      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	6a39      	ldr	r1, [r7, #32]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 ff1a 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00d      	beq.n	800b5d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d107      	bne.n	800b5d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e06b      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b04      	cmp	r3, #4
 800b612:	d11b      	bne.n	800b64c <HAL_I2C_Master_Transmit+0x188>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d017      	beq.n	800b64c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b636:	b29b      	uxth	r3, r3
 800b638:	3b01      	subs	r3, #1
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	6a39      	ldr	r1, [r7, #32]
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 ff11 	bl	800c478 <I2C_WaitOnBTFFlagUntilTimeout>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00d      	beq.n	800b678 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b660:	2b04      	cmp	r3, #4
 800b662:	d107      	bne.n	800b674 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b672:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e01a      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d194      	bne.n	800b5aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b68e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b6ac:	2302      	movs	r3, #2
  }
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	00100002 	.word	0x00100002
 800b6bc:	ffff0000 	.word	0xffff0000

0800b6c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	817b      	strh	r3, [r7, #10]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	813b      	strh	r3, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6da:	f7fe ff5d 	bl	800a598 <HAL_GetTick>
 800b6de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b20      	cmp	r3, #32
 800b6ea:	f040 80d9 	bne.w	800b8a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	2319      	movs	r3, #25
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	496d      	ldr	r1, [pc, #436]	@ (800b8ac <HAL_I2C_Mem_Write+0x1ec>)
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 fd5b 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b704:	2302      	movs	r3, #2
 800b706:	e0cc      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d101      	bne.n	800b716 <HAL_I2C_Mem_Write+0x56>
 800b712:	2302      	movs	r3, #2
 800b714:	e0c5      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d007      	beq.n	800b73c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f042 0201 	orr.w	r2, r2, #1
 800b73a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b74a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2221      	movs	r2, #33	@ 0x21
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2240      	movs	r2, #64	@ 0x40
 800b758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6a3a      	ldr	r2, [r7, #32]
 800b766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b76c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b772:	b29a      	uxth	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4a4d      	ldr	r2, [pc, #308]	@ (800b8b0 <HAL_I2C_Mem_Write+0x1f0>)
 800b77c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b77e:	88f8      	ldrh	r0, [r7, #6]
 800b780:	893a      	ldrh	r2, [r7, #8]
 800b782:	8979      	ldrh	r1, [r7, #10]
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4603      	mov	r3, r0
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fb92 	bl	800beb8 <I2C_RequestMemoryWrite>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d052      	beq.n	800b840 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e081      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 fe20 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00d      	beq.n	800b7ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	d107      	bne.n	800b7c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e06b      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b04      	cmp	r3, #4
 800b806:	d11b      	bne.n	800b840 <HAL_I2C_Mem_Write+0x180>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d017      	beq.n	800b840 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b820:	1c5a      	adds	r2, r3, #1
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b82a:	3b01      	subs	r3, #1
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b836:	b29b      	uxth	r3, r3
 800b838:	3b01      	subs	r3, #1
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1aa      	bne.n	800b79e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 fe13 	bl	800c478 <I2C_WaitOnBTFFlagUntilTimeout>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00d      	beq.n	800b874 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d107      	bne.n	800b870 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b86e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e016      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2220      	movs	r2, #32
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	e000      	b.n	800b8a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b8a0:	2302      	movs	r3, #2
  }
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	00100002 	.word	0x00100002
 800b8b0:	ffff0000 	.word	0xffff0000

0800b8b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08c      	sub	sp, #48	@ 0x30
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	817b      	strh	r3, [r7, #10]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	813b      	strh	r3, [r7, #8]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8d2:	f7fe fe61 	bl	800a598 <HAL_GetTick>
 800b8d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	f040 8244 	bne.w	800bd6e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	2319      	movs	r3, #25
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	4982      	ldr	r1, [pc, #520]	@ (800baf8 <HAL_I2C_Mem_Read+0x244>)
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f000 fc5f 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e237      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b906:	2b01      	cmp	r3, #1
 800b908:	d101      	bne.n	800b90e <HAL_I2C_Mem_Read+0x5a>
 800b90a:	2302      	movs	r3, #2
 800b90c:	e230      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b01      	cmp	r3, #1
 800b922:	d007      	beq.n	800b934 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2222      	movs	r2, #34	@ 0x22
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2240      	movs	r2, #64	@ 0x40
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4a62      	ldr	r2, [pc, #392]	@ (800bafc <HAL_I2C_Mem_Read+0x248>)
 800b974:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b976:	88f8      	ldrh	r0, [r7, #6]
 800b978:	893a      	ldrh	r2, [r7, #8]
 800b97a:	8979      	ldrh	r1, [r7, #10]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	4603      	mov	r3, r0
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fb2c 	bl	800bfe4 <I2C_RequestMemoryRead>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e1ec      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d113      	bne.n	800b9c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b99e:	2300      	movs	r3, #0
 800b9a0:	61fb      	str	r3, [r7, #28]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	e1c0      	b.n	800bd48 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d11e      	bne.n	800ba0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9de:	b672      	cpsid	i
}
 800b9e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	61bb      	str	r3, [r7, #24]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	61bb      	str	r3, [r7, #24]
 800b9f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ba08:	b662      	cpsie	i
}
 800ba0a:	e035      	b.n	800ba78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d11e      	bne.n	800ba52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba24:	b672      	cpsid	i
}
 800ba26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba28:	2300      	movs	r3, #0
 800ba2a:	617b      	str	r3, [r7, #20]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ba4e:	b662      	cpsie	i
}
 800ba50:	e012      	b.n	800ba78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba62:	2300      	movs	r3, #0
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800ba78:	e166      	b.n	800bd48 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	f200 811f 	bhi.w	800bcc2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d123      	bne.n	800bad4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fd39 	bl	800c508 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e167      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800babc:	3b01      	subs	r3, #1
 800babe:	b29a      	uxth	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bad2:	e139      	b.n	800bd48 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d152      	bne.n	800bb82 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae2:	2200      	movs	r2, #0
 800bae4:	4906      	ldr	r1, [pc, #24]	@ (800bb00 <HAL_I2C_Mem_Read+0x24c>)
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 fb64 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d008      	beq.n	800bb04 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e13c      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
 800baf6:	bf00      	nop
 800baf8:	00100002 	.word	0x00100002
 800bafc:	ffff0000 	.word	0xffff0000
 800bb00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800bb04:	b672      	cpsid	i
}
 800bb06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691a      	ldr	r2, [r3, #16]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bb4a:	b662      	cpsie	i
}
 800bb4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691a      	ldr	r2, [r3, #16]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb58:	b2d2      	uxtb	r2, r2
 800bb5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bb80:	e0e2      	b.n	800bd48 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb88:	2200      	movs	r2, #0
 800bb8a:	497b      	ldr	r1, [pc, #492]	@ (800bd78 <HAL_I2C_Mem_Read+0x4c4>)
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 fb11 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e0e9      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbac:	b672      	cpsid	i
}
 800bbae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	691a      	ldr	r2, [r3, #16]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bbe2:	4b66      	ldr	r3, [pc, #408]	@ (800bd7c <HAL_I2C_Mem_Read+0x4c8>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	08db      	lsrs	r3, r3, #3
 800bbe8:	4a65      	ldr	r2, [pc, #404]	@ (800bd80 <HAL_I2C_Mem_Read+0x4cc>)
 800bbea:	fba2 2303 	umull	r2, r3, r2, r3
 800bbee:	0a1a      	lsrs	r2, r3, #8
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	00da      	lsls	r2, r3, #3
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d118      	bne.n	800bc3a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2220      	movs	r2, #32
 800bc12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc22:	f043 0220 	orr.w	r2, r3, #32
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800bc2a:	b662      	cpsie	i
}
 800bc2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e09a      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d1d9      	bne.n	800bbfc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	691a      	ldr	r2, [r3, #16]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc62:	b2d2      	uxtb	r2, r2
 800bc64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bc8a:	b662      	cpsie	i
}
 800bc8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	691a      	ldr	r2, [r3, #16]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bcc0:	e042      	b.n	800bd48 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 fc1e 	bl	800c508 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e04c      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	3b01      	subs	r3, #1
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f003 0304 	and.w	r3, r3, #4
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d118      	bne.n	800bd48 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	3b01      	subs	r3, #1
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f47f ae94 	bne.w	800ba7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2220      	movs	r2, #32
 800bd56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e000      	b.n	800bd70 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800bd6e:	2302      	movs	r3, #2
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3728      	adds	r7, #40	@ 0x28
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	00010004 	.word	0x00010004
 800bd7c:	20000f74 	.word	0x20000f74
 800bd80:	14f8b589 	.word	0x14f8b589

0800bd84 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd92:	b2db      	uxtb	r3, r3
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bc80      	pop	{r7}
 800bdb2:	4770      	bx	lr

0800bdb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d006      	beq.n	800bdde <I2C_MasterRequestWrite+0x2a>
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d003      	beq.n	800bdde <I2C_MasterRequestWrite+0x2a>
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bddc:	d108      	bne.n	800bdf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	e00b      	b.n	800be08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf4:	2b12      	cmp	r3, #18
 800bdf6:	d107      	bne.n	800be08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f9cd 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00d      	beq.n	800be3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be2e:	d103      	bne.n	800be38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800be38:	2303      	movs	r3, #3
 800be3a:	e035      	b.n	800bea8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be44:	d108      	bne.n	800be58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be46:	897b      	ldrh	r3, [r7, #10]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	461a      	mov	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be54:	611a      	str	r2, [r3, #16]
 800be56:	e01b      	b.n	800be90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800be58:	897b      	ldrh	r3, [r7, #10]
 800be5a:	11db      	asrs	r3, r3, #7
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	f003 0306 	and.w	r3, r3, #6
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f063 030f 	orn	r3, r3, #15
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	490e      	ldr	r1, [pc, #56]	@ (800beb0 <I2C_MasterRequestWrite+0xfc>)
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f000 fa16 	bl	800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e010      	b.n	800bea8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be86:	897b      	ldrh	r3, [r7, #10]
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4907      	ldr	r1, [pc, #28]	@ (800beb4 <I2C_MasterRequestWrite+0x100>)
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f000 fa06 	bl	800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e000      	b.n	800bea8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	00010008 	.word	0x00010008
 800beb4:	00010002 	.word	0x00010002

0800beb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	4608      	mov	r0, r1
 800bec2:	4611      	mov	r1, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	4603      	mov	r3, r0
 800bec8:	817b      	strh	r3, [r7, #10]
 800beca:	460b      	mov	r3, r1
 800becc:	813b      	strh	r3, [r7, #8]
 800bece:	4613      	mov	r3, r2
 800bed0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	2200      	movs	r2, #0
 800beea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f960 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00d      	beq.n	800bf16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf08:	d103      	bne.n	800bf12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e05f      	b.n	800bfd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf16:	897b      	ldrh	r3, [r7, #10]
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bf24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf28:	6a3a      	ldr	r2, [r7, #32]
 800bf2a:	492d      	ldr	r1, [pc, #180]	@ (800bfe0 <I2C_RequestMemoryWrite+0x128>)
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 f9bb 	bl	800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e04c      	b.n	800bfd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf54:	6a39      	ldr	r1, [r7, #32]
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 fa46 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00d      	beq.n	800bf7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d107      	bne.n	800bf7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e02b      	b.n	800bfd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d105      	bne.n	800bf90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf84:	893b      	ldrh	r3, [r7, #8]
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	611a      	str	r2, [r3, #16]
 800bf8e:	e021      	b.n	800bfd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bf90:	893b      	ldrh	r3, [r7, #8]
 800bf92:	0a1b      	lsrs	r3, r3, #8
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa0:	6a39      	ldr	r1, [r7, #32]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 fa20 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00d      	beq.n	800bfca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	d107      	bne.n	800bfc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e005      	b.n	800bfd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfca:	893b      	ldrh	r3, [r7, #8]
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	00010002 	.word	0x00010002

0800bfe4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	817b      	strh	r3, [r7, #10]
 800bff6:	460b      	mov	r3, r1
 800bff8:	813b      	strh	r3, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c00c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c01c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	2200      	movs	r2, #0
 800c026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f8c2 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00d      	beq.n	800c052 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c044:	d103      	bne.n	800c04e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c04c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e0aa      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c052:	897b      	ldrh	r3, [r7, #10]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	461a      	mov	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c064:	6a3a      	ldr	r2, [r7, #32]
 800c066:	4952      	ldr	r1, [pc, #328]	@ (800c1b0 <I2C_RequestMemoryRead+0x1cc>)
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f91d 	bl	800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e097      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	617b      	str	r3, [r7, #20]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c090:	6a39      	ldr	r1, [r7, #32]
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 f9a8 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00d      	beq.n	800c0ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a2:	2b04      	cmp	r3, #4
 800c0a4:	d107      	bne.n	800c0b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e076      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c0ba:	88fb      	ldrh	r3, [r7, #6]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d105      	bne.n	800c0cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c0c0:	893b      	ldrh	r3, [r7, #8]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	611a      	str	r2, [r3, #16]
 800c0ca:	e021      	b.n	800c110 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c0cc:	893b      	ldrh	r3, [r7, #8]
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0dc:	6a39      	ldr	r1, [r7, #32]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 f982 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00d      	beq.n	800c106 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d107      	bne.n	800c102 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e050      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c106:	893b      	ldrh	r3, [r7, #8]
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c112:	6a39      	ldr	r1, [r7, #32]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f000 f967 	bl	800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00d      	beq.n	800c13c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c124:	2b04      	cmp	r3, #4
 800c126:	d107      	bne.n	800c138 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c136:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e035      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c14a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	2200      	movs	r2, #0
 800c154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 f82b 	bl	800c1b4 <I2C_WaitOnFlagUntilTimeout>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00d      	beq.n	800c180 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c172:	d103      	bne.n	800c17c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c17a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e013      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c180:	897b      	ldrh	r3, [r7, #10]
 800c182:	b2db      	uxtb	r3, r3
 800c184:	f043 0301 	orr.w	r3, r3, #1
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	6a3a      	ldr	r2, [r7, #32]
 800c194:	4906      	ldr	r1, [pc, #24]	@ (800c1b0 <I2C_RequestMemoryRead+0x1cc>)
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f000 f886 	bl	800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	00010002 	.word	0x00010002

0800c1b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1c4:	e048      	b.n	800c258 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d044      	beq.n	800c258 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ce:	f7fe f9e3 	bl	800a598 <HAL_GetTick>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d302      	bcc.n	800c1e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d139      	bne.n	800c258 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	0c1b      	lsrs	r3, r3, #16
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d10d      	bne.n	800c20a <I2C_WaitOnFlagUntilTimeout+0x56>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	43da      	mvns	r2, r3
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bf0c      	ite	eq
 800c200:	2301      	moveq	r3, #1
 800c202:	2300      	movne	r3, #0
 800c204:	b2db      	uxtb	r3, r3
 800c206:	461a      	mov	r2, r3
 800c208:	e00c      	b.n	800c224 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	43da      	mvns	r2, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	4013      	ands	r3, r2
 800c216:	b29b      	uxth	r3, r3
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bf0c      	ite	eq
 800c21c:	2301      	moveq	r3, #1
 800c21e:	2300      	movne	r3, #0
 800c220:	b2db      	uxtb	r3, r3
 800c222:	461a      	mov	r2, r3
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	429a      	cmp	r2, r3
 800c228:	d116      	bne.n	800c258 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c244:	f043 0220 	orr.w	r2, r3, #32
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e023      	b.n	800c2a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	0c1b      	lsrs	r3, r3, #16
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d10d      	bne.n	800c27e <I2C_WaitOnFlagUntilTimeout+0xca>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	43da      	mvns	r2, r3
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	4013      	ands	r3, r2
 800c26e:	b29b      	uxth	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	bf0c      	ite	eq
 800c274:	2301      	moveq	r3, #1
 800c276:	2300      	movne	r3, #0
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	461a      	mov	r2, r3
 800c27c:	e00c      	b.n	800c298 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	43da      	mvns	r2, r3
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	4013      	ands	r3, r2
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bf0c      	ite	eq
 800c290:	2301      	moveq	r3, #1
 800c292:	2300      	movne	r3, #0
 800c294:	b2db      	uxtb	r3, r3
 800c296:	461a      	mov	r2, r3
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d093      	beq.n	800c1c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
 800c2b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c2b6:	e071      	b.n	800c39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2c6:	d123      	bne.n	800c310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c2e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2fc:	f043 0204 	orr.w	r2, r3, #4
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e067      	b.n	800c3e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c316:	d041      	beq.n	800c39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c318:	f7fe f93e 	bl	800a598 <HAL_GetTick>
 800c31c:	4602      	mov	r2, r0
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	d302      	bcc.n	800c32e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d136      	bne.n	800c39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	0c1b      	lsrs	r3, r3, #16
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b01      	cmp	r3, #1
 800c336:	d10c      	bne.n	800c352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	43da      	mvns	r2, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	4013      	ands	r3, r2
 800c344:	b29b      	uxth	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	bf14      	ite	ne
 800c34a:	2301      	movne	r3, #1
 800c34c:	2300      	moveq	r3, #0
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	e00b      	b.n	800c36a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	43da      	mvns	r2, r3
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	4013      	ands	r3, r2
 800c35e:	b29b      	uxth	r3, r3
 800c360:	2b00      	cmp	r3, #0
 800c362:	bf14      	ite	ne
 800c364:	2301      	movne	r3, #1
 800c366:	2300      	moveq	r3, #0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d016      	beq.n	800c39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c388:	f043 0220 	orr.w	r2, r3, #32
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e021      	b.n	800c3e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	0c1b      	lsrs	r3, r3, #16
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d10c      	bne.n	800c3c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	43da      	mvns	r2, r3
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bf14      	ite	ne
 800c3b8:	2301      	movne	r3, #1
 800c3ba:	2300      	moveq	r3, #0
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	e00b      	b.n	800c3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	43da      	mvns	r2, r3
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bf14      	ite	ne
 800c3d2:	2301      	movne	r3, #1
 800c3d4:	2300      	moveq	r3, #0
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f47f af6d 	bne.w	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c3f4:	e034      	b.n	800c460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 f8e3 	bl	800c5c2 <I2C_IsAcknowledgeFailed>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e034      	b.n	800c470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d028      	beq.n	800c460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c40e:	f7fe f8c3 	bl	800a598 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d302      	bcc.n	800c424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d11d      	bne.n	800c460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42e:	2b80      	cmp	r3, #128	@ 0x80
 800c430:	d016      	beq.n	800c460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c44c:	f043 0220 	orr.w	r2, r3, #32
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e007      	b.n	800c470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c46a:	2b80      	cmp	r3, #128	@ 0x80
 800c46c:	d1c3      	bne.n	800c3f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c484:	e034      	b.n	800c4f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 f89b 	bl	800c5c2 <I2C_IsAcknowledgeFailed>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e034      	b.n	800c500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d028      	beq.n	800c4f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c49e:	f7fe f87b 	bl	800a598 <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d302      	bcc.n	800c4b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d11d      	bne.n	800c4f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	f003 0304 	and.w	r3, r3, #4
 800c4be:	2b04      	cmp	r3, #4
 800c4c0:	d016      	beq.n	800c4f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4dc:	f043 0220 	orr.w	r2, r3, #32
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e007      	b.n	800c500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	f003 0304 	and.w	r3, r3, #4
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d1c3      	bne.n	800c486 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c514:	e049      	b.n	800c5aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	f003 0310 	and.w	r3, r3, #16
 800c520:	2b10      	cmp	r3, #16
 800c522:	d119      	bne.n	800c558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f06f 0210 	mvn.w	r2, #16
 800c52c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2220      	movs	r2, #32
 800c538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e030      	b.n	800c5ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c558:	f7fe f81e 	bl	800a598 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	429a      	cmp	r2, r3
 800c566:	d302      	bcc.n	800c56e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d11d      	bne.n	800c5aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c578:	2b40      	cmp	r3, #64	@ 0x40
 800c57a:	d016      	beq.n	800c5aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2220      	movs	r2, #32
 800c586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c596:	f043 0220 	orr.w	r2, r3, #32
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e007      	b.n	800c5ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b4:	2b40      	cmp	r3, #64	@ 0x40
 800c5b6:	d1ae      	bne.n	800c516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	695b      	ldr	r3, [r3, #20]
 800c5d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5d8:	d11b      	bne.n	800c612 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c5e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fe:	f043 0204 	orr.w	r2, r3, #4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	bc80      	pop	{r7}
 800c61c:	4770      	bx	lr
	...

0800c620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e272      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 8087 	beq.w	800c74e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c640:	4b92      	ldr	r3, [pc, #584]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f003 030c 	and.w	r3, r3, #12
 800c648:	2b04      	cmp	r3, #4
 800c64a:	d00c      	beq.n	800c666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c64c:	4b8f      	ldr	r3, [pc, #572]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	f003 030c 	and.w	r3, r3, #12
 800c654:	2b08      	cmp	r3, #8
 800c656:	d112      	bne.n	800c67e <HAL_RCC_OscConfig+0x5e>
 800c658:	4b8c      	ldr	r3, [pc, #560]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c664:	d10b      	bne.n	800c67e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c666:	4b89      	ldr	r3, [pc, #548]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d06c      	beq.n	800c74c <HAL_RCC_OscConfig+0x12c>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d168      	bne.n	800c74c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e24c      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c686:	d106      	bne.n	800c696 <HAL_RCC_OscConfig+0x76>
 800c688:	4b80      	ldr	r3, [pc, #512]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a7f      	ldr	r2, [pc, #508]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c68e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c692:	6013      	str	r3, [r2, #0]
 800c694:	e02e      	b.n	800c6f4 <HAL_RCC_OscConfig+0xd4>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10c      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x98>
 800c69e:	4b7b      	ldr	r3, [pc, #492]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a7a      	ldr	r2, [pc, #488]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	4b78      	ldr	r3, [pc, #480]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a77      	ldr	r2, [pc, #476]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	e01d      	b.n	800c6f4 <HAL_RCC_OscConfig+0xd4>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6c0:	d10c      	bne.n	800c6dc <HAL_RCC_OscConfig+0xbc>
 800c6c2:	4b72      	ldr	r3, [pc, #456]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a71      	ldr	r2, [pc, #452]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6cc:	6013      	str	r3, [r2, #0]
 800c6ce:	4b6f      	ldr	r3, [pc, #444]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a6e      	ldr	r2, [pc, #440]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	e00b      	b.n	800c6f4 <HAL_RCC_OscConfig+0xd4>
 800c6dc:	4b6b      	ldr	r3, [pc, #428]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a6a      	ldr	r2, [pc, #424]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	4b68      	ldr	r3, [pc, #416]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a67      	ldr	r2, [pc, #412]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c6ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d013      	beq.n	800c724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6fc:	f7fd ff4c 	bl	800a598 <HAL_GetTick>
 800c700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c704:	f7fd ff48 	bl	800a598 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b64      	cmp	r3, #100	@ 0x64
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e200      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c716:	4b5d      	ldr	r3, [pc, #372]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0xe4>
 800c722:	e014      	b.n	800c74e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c724:	f7fd ff38 	bl	800a598 <HAL_GetTick>
 800c728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c72a:	e008      	b.n	800c73e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c72c:	f7fd ff34 	bl	800a598 <HAL_GetTick>
 800c730:	4602      	mov	r2, r0
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	2b64      	cmp	r3, #100	@ 0x64
 800c738:	d901      	bls.n	800c73e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e1ec      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c73e:	4b53      	ldr	r3, [pc, #332]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1f0      	bne.n	800c72c <HAL_RCC_OscConfig+0x10c>
 800c74a:	e000      	b.n	800c74e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c74c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0302 	and.w	r3, r3, #2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d063      	beq.n	800c822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c75a:	4b4c      	ldr	r3, [pc, #304]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	f003 030c 	and.w	r3, r3, #12
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c766:	4b49      	ldr	r3, [pc, #292]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f003 030c 	and.w	r3, r3, #12
 800c76e:	2b08      	cmp	r3, #8
 800c770:	d11c      	bne.n	800c7ac <HAL_RCC_OscConfig+0x18c>
 800c772:	4b46      	ldr	r3, [pc, #280]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d116      	bne.n	800c7ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c77e:	4b43      	ldr	r3, [pc, #268]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d005      	beq.n	800c796 <HAL_RCC_OscConfig+0x176>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d001      	beq.n	800c796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e1c0      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c796:	4b3d      	ldr	r3, [pc, #244]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	00db      	lsls	r3, r3, #3
 800c7a4:	4939      	ldr	r1, [pc, #228]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7aa:	e03a      	b.n	800c822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d020      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7b4:	4b36      	ldr	r3, [pc, #216]	@ (800c890 <HAL_RCC_OscConfig+0x270>)
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7ba:	f7fd feed 	bl	800a598 <HAL_GetTick>
 800c7be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7c0:	e008      	b.n	800c7d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7c2:	f7fd fee9 	bl	800a598 <HAL_GetTick>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d901      	bls.n	800c7d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e1a1      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7d4:	4b2d      	ldr	r3, [pc, #180]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0f0      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7e0:	4b2a      	ldr	r3, [pc, #168]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	4927      	ldr	r1, [pc, #156]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	600b      	str	r3, [r1, #0]
 800c7f4:	e015      	b.n	800c822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7f6:	4b26      	ldr	r3, [pc, #152]	@ (800c890 <HAL_RCC_OscConfig+0x270>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7fc:	f7fd fecc 	bl	800a598 <HAL_GetTick>
 800c800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c802:	e008      	b.n	800c816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c804:	f7fd fec8 	bl	800a598 <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d901      	bls.n	800c816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e180      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c816:	4b1d      	ldr	r3, [pc, #116]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0302 	and.w	r3, r3, #2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f0      	bne.n	800c804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0308 	and.w	r3, r3, #8
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d03a      	beq.n	800c8a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d019      	beq.n	800c86a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c836:	4b17      	ldr	r3, [pc, #92]	@ (800c894 <HAL_RCC_OscConfig+0x274>)
 800c838:	2201      	movs	r2, #1
 800c83a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c83c:	f7fd feac 	bl	800a598 <HAL_GetTick>
 800c840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c842:	e008      	b.n	800c856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c844:	f7fd fea8 	bl	800a598 <HAL_GetTick>
 800c848:	4602      	mov	r2, r0
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d901      	bls.n	800c856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e160      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c856:	4b0d      	ldr	r3, [pc, #52]	@ (800c88c <HAL_RCC_OscConfig+0x26c>)
 800c858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f0      	beq.n	800c844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c862:	2001      	movs	r0, #1
 800c864:	f000 face 	bl	800ce04 <RCC_Delay>
 800c868:	e01c      	b.n	800c8a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c86a:	4b0a      	ldr	r3, [pc, #40]	@ (800c894 <HAL_RCC_OscConfig+0x274>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c870:	f7fd fe92 	bl	800a598 <HAL_GetTick>
 800c874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c876:	e00f      	b.n	800c898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c878:	f7fd fe8e 	bl	800a598 <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b02      	cmp	r3, #2
 800c884:	d908      	bls.n	800c898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e146      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
 800c88a:	bf00      	nop
 800c88c:	40021000 	.word	0x40021000
 800c890:	42420000 	.word	0x42420000
 800c894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c898:	4b92      	ldr	r3, [pc, #584]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e9      	bne.n	800c878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 80a6 	beq.w	800c9fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8b6:	4b8b      	ldr	r3, [pc, #556]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c8b8:	69db      	ldr	r3, [r3, #28]
 800c8ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10d      	bne.n	800c8de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8c2:	4b88      	ldr	r3, [pc, #544]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c8c4:	69db      	ldr	r3, [r3, #28]
 800c8c6:	4a87      	ldr	r2, [pc, #540]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c8c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8cc:	61d3      	str	r3, [r2, #28]
 800c8ce:	4b85      	ldr	r3, [pc, #532]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8d6:	60bb      	str	r3, [r7, #8]
 800c8d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8de:	4b82      	ldr	r3, [pc, #520]	@ (800cae8 <HAL_RCC_OscConfig+0x4c8>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d118      	bne.n	800c91c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8ea:	4b7f      	ldr	r3, [pc, #508]	@ (800cae8 <HAL_RCC_OscConfig+0x4c8>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a7e      	ldr	r2, [pc, #504]	@ (800cae8 <HAL_RCC_OscConfig+0x4c8>)
 800c8f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8f6:	f7fd fe4f 	bl	800a598 <HAL_GetTick>
 800c8fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8fc:	e008      	b.n	800c910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8fe:	f7fd fe4b 	bl	800a598 <HAL_GetTick>
 800c902:	4602      	mov	r2, r0
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	2b64      	cmp	r3, #100	@ 0x64
 800c90a:	d901      	bls.n	800c910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c90c:	2303      	movs	r3, #3
 800c90e:	e103      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c910:	4b75      	ldr	r3, [pc, #468]	@ (800cae8 <HAL_RCC_OscConfig+0x4c8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d0f0      	beq.n	800c8fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d106      	bne.n	800c932 <HAL_RCC_OscConfig+0x312>
 800c924:	4b6f      	ldr	r3, [pc, #444]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c926:	6a1b      	ldr	r3, [r3, #32]
 800c928:	4a6e      	ldr	r2, [pc, #440]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c92a:	f043 0301 	orr.w	r3, r3, #1
 800c92e:	6213      	str	r3, [r2, #32]
 800c930:	e02d      	b.n	800c98e <HAL_RCC_OscConfig+0x36e>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10c      	bne.n	800c954 <HAL_RCC_OscConfig+0x334>
 800c93a:	4b6a      	ldr	r3, [pc, #424]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	4a69      	ldr	r2, [pc, #420]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c940:	f023 0301 	bic.w	r3, r3, #1
 800c944:	6213      	str	r3, [r2, #32]
 800c946:	4b67      	ldr	r3, [pc, #412]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	4a66      	ldr	r2, [pc, #408]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c94c:	f023 0304 	bic.w	r3, r3, #4
 800c950:	6213      	str	r3, [r2, #32]
 800c952:	e01c      	b.n	800c98e <HAL_RCC_OscConfig+0x36e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	2b05      	cmp	r3, #5
 800c95a:	d10c      	bne.n	800c976 <HAL_RCC_OscConfig+0x356>
 800c95c:	4b61      	ldr	r3, [pc, #388]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	4a60      	ldr	r2, [pc, #384]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c962:	f043 0304 	orr.w	r3, r3, #4
 800c966:	6213      	str	r3, [r2, #32]
 800c968:	4b5e      	ldr	r3, [pc, #376]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	4a5d      	ldr	r2, [pc, #372]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	6213      	str	r3, [r2, #32]
 800c974:	e00b      	b.n	800c98e <HAL_RCC_OscConfig+0x36e>
 800c976:	4b5b      	ldr	r3, [pc, #364]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	4a5a      	ldr	r2, [pc, #360]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c97c:	f023 0301 	bic.w	r3, r3, #1
 800c980:	6213      	str	r3, [r2, #32]
 800c982:	4b58      	ldr	r3, [pc, #352]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	4a57      	ldr	r2, [pc, #348]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c988:	f023 0304 	bic.w	r3, r3, #4
 800c98c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d015      	beq.n	800c9c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c996:	f7fd fdff 	bl	800a598 <HAL_GetTick>
 800c99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c99c:	e00a      	b.n	800c9b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c99e:	f7fd fdfb 	bl	800a598 <HAL_GetTick>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d901      	bls.n	800c9b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e0b1      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9b4:	4b4b      	ldr	r3, [pc, #300]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0ee      	beq.n	800c99e <HAL_RCC_OscConfig+0x37e>
 800c9c0:	e014      	b.n	800c9ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9c2:	f7fd fde9 	bl	800a598 <HAL_GetTick>
 800c9c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9c8:	e00a      	b.n	800c9e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9ca:	f7fd fde5 	bl	800a598 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d901      	bls.n	800c9e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e09b      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9e0:	4b40      	ldr	r3, [pc, #256]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c9e2:	6a1b      	ldr	r3, [r3, #32]
 800c9e4:	f003 0302 	and.w	r3, r3, #2
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1ee      	bne.n	800c9ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d105      	bne.n	800c9fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9f2:	4b3c      	ldr	r3, [pc, #240]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	4a3b      	ldr	r2, [pc, #236]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800c9f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 8087 	beq.w	800cb16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca08:	4b36      	ldr	r3, [pc, #216]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f003 030c 	and.w	r3, r3, #12
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d061      	beq.n	800cad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d146      	bne.n	800caaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca1c:	4b33      	ldr	r3, [pc, #204]	@ (800caec <HAL_RCC_OscConfig+0x4cc>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca22:	f7fd fdb9 	bl	800a598 <HAL_GetTick>
 800ca26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ca28:	e008      	b.n	800ca3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca2a:	f7fd fdb5 	bl	800a598 <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d901      	bls.n	800ca3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e06d      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ca3c:	4b29      	ldr	r3, [pc, #164]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1f0      	bne.n	800ca2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca50:	d108      	bne.n	800ca64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ca52:	4b24      	ldr	r3, [pc, #144]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	4921      	ldr	r1, [pc, #132]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca60:	4313      	orrs	r3, r2
 800ca62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca64:	4b1f      	ldr	r3, [pc, #124]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a19      	ldr	r1, [r3, #32]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca74:	430b      	orrs	r3, r1
 800ca76:	491b      	ldr	r1, [pc, #108]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca7c:	4b1b      	ldr	r3, [pc, #108]	@ (800caec <HAL_RCC_OscConfig+0x4cc>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca82:	f7fd fd89 	bl	800a598 <HAL_GetTick>
 800ca86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ca88:	e008      	b.n	800ca9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca8a:	f7fd fd85 	bl	800a598 <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d901      	bls.n	800ca9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e03d      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ca9c:	4b11      	ldr	r3, [pc, #68]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0f0      	beq.n	800ca8a <HAL_RCC_OscConfig+0x46a>
 800caa8:	e035      	b.n	800cb16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caaa:	4b10      	ldr	r3, [pc, #64]	@ (800caec <HAL_RCC_OscConfig+0x4cc>)
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cab0:	f7fd fd72 	bl	800a598 <HAL_GetTick>
 800cab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cab6:	e008      	b.n	800caca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cab8:	f7fd fd6e 	bl	800a598 <HAL_GetTick>
 800cabc:	4602      	mov	r2, r0
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d901      	bls.n	800caca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cac6:	2303      	movs	r3, #3
 800cac8:	e026      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800caca:	4b06      	ldr	r3, [pc, #24]	@ (800cae4 <HAL_RCC_OscConfig+0x4c4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1f0      	bne.n	800cab8 <HAL_RCC_OscConfig+0x498>
 800cad6:	e01e      	b.n	800cb16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	69db      	ldr	r3, [r3, #28]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d107      	bne.n	800caf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e019      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
 800cae4:	40021000 	.word	0x40021000
 800cae8:	40007000 	.word	0x40007000
 800caec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800caf0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb20 <HAL_RCC_OscConfig+0x500>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d106      	bne.n	800cb12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d001      	beq.n	800cb16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	40021000 	.word	0x40021000

0800cb24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	e0d0      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cb38:	4b6a      	ldr	r3, [pc, #424]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d910      	bls.n	800cb68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb46:	4b67      	ldr	r3, [pc, #412]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f023 0207 	bic.w	r2, r3, #7
 800cb4e:	4965      	ldr	r1, [pc, #404]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb56:	4b63      	ldr	r3, [pc, #396]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 0307 	and.w	r3, r3, #7
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d001      	beq.n	800cb68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0b8      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d020      	beq.n	800cbb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d005      	beq.n	800cb8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb80:	4b59      	ldr	r3, [pc, #356]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	4a58      	ldr	r2, [pc, #352]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cb8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0308 	and.w	r3, r3, #8
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d005      	beq.n	800cba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb98:	4b53      	ldr	r3, [pc, #332]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	4a52      	ldr	r2, [pc, #328]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800cba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cba4:	4b50      	ldr	r3, [pc, #320]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	494d      	ldr	r1, [pc, #308]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d040      	beq.n	800cc44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d107      	bne.n	800cbda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbca:	4b47      	ldr	r3, [pc, #284]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d115      	bne.n	800cc02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e07f      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d107      	bne.n	800cbf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbe2:	4b41      	ldr	r3, [pc, #260]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d109      	bne.n	800cc02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e073      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbf2:	4b3d      	ldr	r3, [pc, #244]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e06b      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc02:	4b39      	ldr	r3, [pc, #228]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	f023 0203 	bic.w	r2, r3, #3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4936      	ldr	r1, [pc, #216]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc10:	4313      	orrs	r3, r2
 800cc12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc14:	f7fd fcc0 	bl	800a598 <HAL_GetTick>
 800cc18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc1a:	e00a      	b.n	800cc32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc1c:	f7fd fcbc 	bl	800a598 <HAL_GetTick>
 800cc20:	4602      	mov	r2, r0
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d901      	bls.n	800cc32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc2e:	2303      	movs	r3, #3
 800cc30:	e053      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc32:	4b2d      	ldr	r3, [pc, #180]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f003 020c 	and.w	r2, r3, #12
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d1eb      	bne.n	800cc1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc44:	4b27      	ldr	r3, [pc, #156]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d210      	bcs.n	800cc74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc52:	4b24      	ldr	r3, [pc, #144]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f023 0207 	bic.w	r2, r3, #7
 800cc5a:	4922      	ldr	r1, [pc, #136]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc62:	4b20      	ldr	r3, [pc, #128]	@ (800cce4 <HAL_RCC_ClockConfig+0x1c0>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d001      	beq.n	800cc74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e032      	b.n	800ccda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0304 	and.w	r3, r3, #4
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d008      	beq.n	800cc92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc80:	4b19      	ldr	r3, [pc, #100]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4916      	ldr	r1, [pc, #88]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 0308 	and.w	r3, r3, #8
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d009      	beq.n	800ccb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cc9e:	4b12      	ldr	r3, [pc, #72]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	490e      	ldr	r1, [pc, #56]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ccb2:	f000 f821 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	4b0b      	ldr	r3, [pc, #44]	@ (800cce8 <HAL_RCC_ClockConfig+0x1c4>)
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	091b      	lsrs	r3, r3, #4
 800ccbe:	f003 030f 	and.w	r3, r3, #15
 800ccc2:	490a      	ldr	r1, [pc, #40]	@ (800ccec <HAL_RCC_ClockConfig+0x1c8>)
 800ccc4:	5ccb      	ldrb	r3, [r1, r3]
 800ccc6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccca:	4a09      	ldr	r2, [pc, #36]	@ (800ccf0 <HAL_RCC_ClockConfig+0x1cc>)
 800cccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ccce:	4b09      	ldr	r3, [pc, #36]	@ (800ccf4 <HAL_RCC_ClockConfig+0x1d0>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd fc1e 	bl	800a514 <HAL_InitTick>

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	40022000 	.word	0x40022000
 800cce8:	40021000 	.word	0x40021000
 800ccec:	0800e3ec 	.word	0x0800e3ec
 800ccf0:	20000f74 	.word	0x20000f74
 800ccf4:	20000f78 	.word	0x20000f78

0800ccf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	2300      	movs	r3, #0
 800cd04:	60bb      	str	r3, [r7, #8]
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800cd12:	4b1e      	ldr	r3, [pc, #120]	@ (800cd8c <HAL_RCC_GetSysClockFreq+0x94>)
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f003 030c 	and.w	r3, r3, #12
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	d002      	beq.n	800cd28 <HAL_RCC_GetSysClockFreq+0x30>
 800cd22:	2b08      	cmp	r3, #8
 800cd24:	d003      	beq.n	800cd2e <HAL_RCC_GetSysClockFreq+0x36>
 800cd26:	e027      	b.n	800cd78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800cd28:	4b19      	ldr	r3, [pc, #100]	@ (800cd90 <HAL_RCC_GetSysClockFreq+0x98>)
 800cd2a:	613b      	str	r3, [r7, #16]
      break;
 800cd2c:	e027      	b.n	800cd7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	0c9b      	lsrs	r3, r3, #18
 800cd32:	f003 030f 	and.w	r3, r3, #15
 800cd36:	4a17      	ldr	r2, [pc, #92]	@ (800cd94 <HAL_RCC_GetSysClockFreq+0x9c>)
 800cd38:	5cd3      	ldrb	r3, [r2, r3]
 800cd3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d010      	beq.n	800cd68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cd46:	4b11      	ldr	r3, [pc, #68]	@ (800cd8c <HAL_RCC_GetSysClockFreq+0x94>)
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	0c5b      	lsrs	r3, r3, #17
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	4a11      	ldr	r2, [pc, #68]	@ (800cd98 <HAL_RCC_GetSysClockFreq+0xa0>)
 800cd52:	5cd3      	ldrb	r3, [r2, r3]
 800cd54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a0d      	ldr	r2, [pc, #52]	@ (800cd90 <HAL_RCC_GetSysClockFreq+0x98>)
 800cd5a:	fb03 f202 	mul.w	r2, r3, r2
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd64:	617b      	str	r3, [r7, #20]
 800cd66:	e004      	b.n	800cd72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd9c <HAL_RCC_GetSysClockFreq+0xa4>)
 800cd6c:	fb02 f303 	mul.w	r3, r2, r3
 800cd70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	613b      	str	r3, [r7, #16]
      break;
 800cd76:	e002      	b.n	800cd7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800cd78:	4b05      	ldr	r3, [pc, #20]	@ (800cd90 <HAL_RCC_GetSysClockFreq+0x98>)
 800cd7a:	613b      	str	r3, [r7, #16]
      break;
 800cd7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd7e:	693b      	ldr	r3, [r7, #16]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	371c      	adds	r7, #28
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bc80      	pop	{r7}
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	40021000 	.word	0x40021000
 800cd90:	007a1200 	.word	0x007a1200
 800cd94:	0800e404 	.word	0x0800e404
 800cd98:	0800e414 	.word	0x0800e414
 800cd9c:	003d0900 	.word	0x003d0900

0800cda0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cda4:	4b02      	ldr	r3, [pc, #8]	@ (800cdb0 <HAL_RCC_GetHCLKFreq+0x10>)
 800cda6:	681b      	ldr	r3, [r3, #0]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bc80      	pop	{r7}
 800cdae:	4770      	bx	lr
 800cdb0:	20000f74 	.word	0x20000f74

0800cdb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cdb8:	f7ff fff2 	bl	800cda0 <HAL_RCC_GetHCLKFreq>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	4b05      	ldr	r3, [pc, #20]	@ (800cdd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	0a1b      	lsrs	r3, r3, #8
 800cdc4:	f003 0307 	and.w	r3, r3, #7
 800cdc8:	4903      	ldr	r1, [pc, #12]	@ (800cdd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdca:	5ccb      	ldrb	r3, [r1, r3]
 800cdcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	40021000 	.word	0x40021000
 800cdd8:	0800e3fc 	.word	0x0800e3fc

0800cddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cde0:	f7ff ffde 	bl	800cda0 <HAL_RCC_GetHCLKFreq>
 800cde4:	4602      	mov	r2, r0
 800cde6:	4b05      	ldr	r3, [pc, #20]	@ (800cdfc <HAL_RCC_GetPCLK2Freq+0x20>)
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	0adb      	lsrs	r3, r3, #11
 800cdec:	f003 0307 	and.w	r3, r3, #7
 800cdf0:	4903      	ldr	r1, [pc, #12]	@ (800ce00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdf2:	5ccb      	ldrb	r3, [r1, r3]
 800cdf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	40021000 	.word	0x40021000
 800ce00:	0800e3fc 	.word	0x0800e3fc

0800ce04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ce0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce38 <RCC_Delay+0x34>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a0a      	ldr	r2, [pc, #40]	@ (800ce3c <RCC_Delay+0x38>)
 800ce12:	fba2 2303 	umull	r2, r3, r2, r3
 800ce16:	0a5b      	lsrs	r3, r3, #9
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	fb02 f303 	mul.w	r3, r2, r3
 800ce1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ce20:	bf00      	nop
  }
  while (Delay --);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1e5a      	subs	r2, r3, #1
 800ce26:	60fa      	str	r2, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1f9      	bne.n	800ce20 <RCC_Delay+0x1c>
}
 800ce2c:	bf00      	nop
 800ce2e:	bf00      	nop
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bc80      	pop	{r7}
 800ce36:	4770      	bx	lr
 800ce38:	20000f74 	.word	0x20000f74
 800ce3c:	10624dd3 	.word	0x10624dd3

0800ce40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e041      	b.n	800ced6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7fd fa58 	bl	800a31c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	f000 fa82 	bl	800d388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
	...

0800cee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d001      	beq.n	800cef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e044      	b.n	800cf82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68da      	ldr	r2, [r3, #12]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f042 0201 	orr.w	r2, r2, #1
 800cf0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1d      	ldr	r2, [pc, #116]	@ (800cf8c <HAL_TIM_Base_Start_IT+0xac>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d018      	beq.n	800cf4c <HAL_TIM_Base_Start_IT+0x6c>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a1c      	ldr	r2, [pc, #112]	@ (800cf90 <HAL_TIM_Base_Start_IT+0xb0>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d013      	beq.n	800cf4c <HAL_TIM_Base_Start_IT+0x6c>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf2c:	d00e      	beq.n	800cf4c <HAL_TIM_Base_Start_IT+0x6c>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a18      	ldr	r2, [pc, #96]	@ (800cf94 <HAL_TIM_Base_Start_IT+0xb4>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d009      	beq.n	800cf4c <HAL_TIM_Base_Start_IT+0x6c>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a16      	ldr	r2, [pc, #88]	@ (800cf98 <HAL_TIM_Base_Start_IT+0xb8>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d004      	beq.n	800cf4c <HAL_TIM_Base_Start_IT+0x6c>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a15      	ldr	r2, [pc, #84]	@ (800cf9c <HAL_TIM_Base_Start_IT+0xbc>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d111      	bne.n	800cf70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0307 	and.w	r3, r3, #7
 800cf56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b06      	cmp	r3, #6
 800cf5c:	d010      	beq.n	800cf80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f042 0201 	orr.w	r2, r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf6e:	e007      	b.n	800cf80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f042 0201 	orr.w	r2, r2, #1
 800cf7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bc80      	pop	{r7}
 800cf8a:	4770      	bx	lr
 800cf8c:	40012c00 	.word	0x40012c00
 800cf90:	40013400 	.word	0x40013400
 800cf94:	40000400 	.word	0x40000400
 800cf98:	40000800 	.word	0x40000800
 800cf9c:	40000c00 	.word	0x40000c00

0800cfa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d122      	bne.n	800cffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d11b      	bne.n	800cffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f06f 0202 	mvn.w	r2, #2
 800cfcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	f003 0303 	and.w	r3, r3, #3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f9b4 	bl	800d350 <HAL_TIM_IC_CaptureCallback>
 800cfe8:	e005      	b.n	800cff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f9a7 	bl	800d33e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f9b6 	bl	800d362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	f003 0304 	and.w	r3, r3, #4
 800d006:	2b04      	cmp	r3, #4
 800d008:	d122      	bne.n	800d050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b04      	cmp	r3, #4
 800d016:	d11b      	bne.n	800d050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f06f 0204 	mvn.w	r2, #4
 800d020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f98a 	bl	800d350 <HAL_TIM_IC_CaptureCallback>
 800d03c:	e005      	b.n	800d04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f97d 	bl	800d33e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f98c 	bl	800d362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	f003 0308 	and.w	r3, r3, #8
 800d05a:	2b08      	cmp	r3, #8
 800d05c:	d122      	bne.n	800d0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b08      	cmp	r3, #8
 800d06a:	d11b      	bne.n	800d0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f06f 0208 	mvn.w	r2, #8
 800d074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2204      	movs	r2, #4
 800d07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	f003 0303 	and.w	r3, r3, #3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d003      	beq.n	800d092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f960 	bl	800d350 <HAL_TIM_IC_CaptureCallback>
 800d090:	e005      	b.n	800d09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f953 	bl	800d33e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f962 	bl	800d362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	f003 0310 	and.w	r3, r3, #16
 800d0ae:	2b10      	cmp	r3, #16
 800d0b0:	d122      	bne.n	800d0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f003 0310 	and.w	r3, r3, #16
 800d0bc:	2b10      	cmp	r3, #16
 800d0be:	d11b      	bne.n	800d0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f06f 0210 	mvn.w	r2, #16
 800d0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2208      	movs	r2, #8
 800d0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f936 	bl	800d350 <HAL_TIM_IC_CaptureCallback>
 800d0e4:	e005      	b.n	800d0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f929 	bl	800d33e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f938 	bl	800d362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b01      	cmp	r3, #1
 800d104:	d10e      	bne.n	800d124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b01      	cmp	r3, #1
 800d112:	d107      	bne.n	800d124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f06f 0201 	mvn.w	r2, #1
 800d11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7fc fd96 	bl	8009c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d12e:	2b80      	cmp	r3, #128	@ 0x80
 800d130:	d10e      	bne.n	800d150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d13c:	2b80      	cmp	r3, #128	@ 0x80
 800d13e:	d107      	bne.n	800d150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 faa1 	bl	800d692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15a:	2b40      	cmp	r3, #64	@ 0x40
 800d15c:	d10e      	bne.n	800d17c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d168:	2b40      	cmp	r3, #64	@ 0x40
 800d16a:	d107      	bne.n	800d17c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f8fc 	bl	800d374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b20      	cmp	r3, #32
 800d188:	d10e      	bne.n	800d1a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b20      	cmp	r3, #32
 800d196:	d107      	bne.n	800d1a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f06f 0220 	mvn.w	r2, #32
 800d1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 fa6c 	bl	800d680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_TIM_ConfigClockSource+0x1c>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	e0b4      	b.n	800d336 <HAL_TIM_ConfigClockSource+0x186>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d1f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d204:	d03e      	beq.n	800d284 <HAL_TIM_ConfigClockSource+0xd4>
 800d206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d20a:	f200 8087 	bhi.w	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d20e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d212:	f000 8086 	beq.w	800d322 <HAL_TIM_ConfigClockSource+0x172>
 800d216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d21a:	d87f      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d21c:	2b70      	cmp	r3, #112	@ 0x70
 800d21e:	d01a      	beq.n	800d256 <HAL_TIM_ConfigClockSource+0xa6>
 800d220:	2b70      	cmp	r3, #112	@ 0x70
 800d222:	d87b      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d224:	2b60      	cmp	r3, #96	@ 0x60
 800d226:	d050      	beq.n	800d2ca <HAL_TIM_ConfigClockSource+0x11a>
 800d228:	2b60      	cmp	r3, #96	@ 0x60
 800d22a:	d877      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d22c:	2b50      	cmp	r3, #80	@ 0x50
 800d22e:	d03c      	beq.n	800d2aa <HAL_TIM_ConfigClockSource+0xfa>
 800d230:	2b50      	cmp	r3, #80	@ 0x50
 800d232:	d873      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d234:	2b40      	cmp	r3, #64	@ 0x40
 800d236:	d058      	beq.n	800d2ea <HAL_TIM_ConfigClockSource+0x13a>
 800d238:	2b40      	cmp	r3, #64	@ 0x40
 800d23a:	d86f      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d23c:	2b30      	cmp	r3, #48	@ 0x30
 800d23e:	d064      	beq.n	800d30a <HAL_TIM_ConfigClockSource+0x15a>
 800d240:	2b30      	cmp	r3, #48	@ 0x30
 800d242:	d86b      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d244:	2b20      	cmp	r3, #32
 800d246:	d060      	beq.n	800d30a <HAL_TIM_ConfigClockSource+0x15a>
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d867      	bhi.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d05c      	beq.n	800d30a <HAL_TIM_ConfigClockSource+0x15a>
 800d250:	2b10      	cmp	r3, #16
 800d252:	d05a      	beq.n	800d30a <HAL_TIM_ConfigClockSource+0x15a>
 800d254:	e062      	b.n	800d31c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d266:	f000 f980 	bl	800d56a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	609a      	str	r2, [r3, #8]
      break;
 800d282:	e04f      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d294:	f000 f969 	bl	800d56a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d2a6:	609a      	str	r2, [r3, #8]
      break;
 800d2a8:	e03c      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	f000 f8e0 	bl	800d47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2150      	movs	r1, #80	@ 0x50
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 f937 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d2c8:	e02c      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f000 f8fe 	bl	800d4d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2160      	movs	r1, #96	@ 0x60
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f927 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d2e8:	e01c      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f000 f8c0 	bl	800d47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2140      	movs	r1, #64	@ 0x40
 800d302:	4618      	mov	r0, r3
 800d304:	f000 f917 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d308:	e00c      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4619      	mov	r1, r3
 800d314:	4610      	mov	r0, r2
 800d316:	f000 f90e 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d31a:	e003      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	73fb      	strb	r3, [r7, #15]
      break;
 800d320:	e000      	b.n	800d324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d334:	7bfb      	ldrb	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d33e:	b480      	push	{r7}
 800d340:	b083      	sub	sp, #12
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bc80      	pop	{r7}
 800d34e:	4770      	bx	lr

0800d350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bc80      	pop	{r7}
 800d360:	4770      	bx	lr

0800d362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d362:	b480      	push	{r7}
 800d364:	b083      	sub	sp, #12
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	bc80      	pop	{r7}
 800d372:	4770      	bx	lr

0800d374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	bc80      	pop	{r7}
 800d384:	4770      	bx	lr
	...

0800d388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a33      	ldr	r2, [pc, #204]	@ (800d468 <TIM_Base_SetConfig+0xe0>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d013      	beq.n	800d3c8 <TIM_Base_SetConfig+0x40>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a32      	ldr	r2, [pc, #200]	@ (800d46c <TIM_Base_SetConfig+0xe4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d00f      	beq.n	800d3c8 <TIM_Base_SetConfig+0x40>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3ae:	d00b      	beq.n	800d3c8 <TIM_Base_SetConfig+0x40>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a2f      	ldr	r2, [pc, #188]	@ (800d470 <TIM_Base_SetConfig+0xe8>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d007      	beq.n	800d3c8 <TIM_Base_SetConfig+0x40>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a2e      	ldr	r2, [pc, #184]	@ (800d474 <TIM_Base_SetConfig+0xec>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d003      	beq.n	800d3c8 <TIM_Base_SetConfig+0x40>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a2d      	ldr	r2, [pc, #180]	@ (800d478 <TIM_Base_SetConfig+0xf0>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d108      	bne.n	800d3da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a22      	ldr	r2, [pc, #136]	@ (800d468 <TIM_Base_SetConfig+0xe0>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d013      	beq.n	800d40a <TIM_Base_SetConfig+0x82>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a21      	ldr	r2, [pc, #132]	@ (800d46c <TIM_Base_SetConfig+0xe4>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d00f      	beq.n	800d40a <TIM_Base_SetConfig+0x82>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3f0:	d00b      	beq.n	800d40a <TIM_Base_SetConfig+0x82>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a1e      	ldr	r2, [pc, #120]	@ (800d470 <TIM_Base_SetConfig+0xe8>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d007      	beq.n	800d40a <TIM_Base_SetConfig+0x82>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d474 <TIM_Base_SetConfig+0xec>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d003      	beq.n	800d40a <TIM_Base_SetConfig+0x82>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a1c      	ldr	r2, [pc, #112]	@ (800d478 <TIM_Base_SetConfig+0xf0>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d108      	bne.n	800d41c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	4313      	orrs	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	695b      	ldr	r3, [r3, #20]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a09      	ldr	r2, [pc, #36]	@ (800d468 <TIM_Base_SetConfig+0xe0>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d003      	beq.n	800d450 <TIM_Base_SetConfig+0xc8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a08      	ldr	r2, [pc, #32]	@ (800d46c <TIM_Base_SetConfig+0xe4>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d103      	bne.n	800d458 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	615a      	str	r2, [r3, #20]
}
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	bc80      	pop	{r7}
 800d466:	4770      	bx	lr
 800d468:	40012c00 	.word	0x40012c00
 800d46c:	40013400 	.word	0x40013400
 800d470:	40000400 	.word	0x40000400
 800d474:	40000800 	.word	0x40000800
 800d478:	40000c00 	.word	0x40000c00

0800d47c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6a1b      	ldr	r3, [r3, #32]
 800d48c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	f023 0201 	bic.w	r2, r3, #1
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	699b      	ldr	r3, [r3, #24]
 800d49e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d4a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f023 030a 	bic.w	r3, r3, #10
 800d4b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	621a      	str	r2, [r3, #32]
}
 800d4ce:	bf00      	nop
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bc80      	pop	{r7}
 800d4d6:	4770      	bx	lr

0800d4d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6a1b      	ldr	r3, [r3, #32]
 800d4e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	f023 0210 	bic.w	r2, r3, #16
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	031b      	lsls	r3, r3, #12
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d514:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	011b      	lsls	r3, r3, #4
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	621a      	str	r2, [r3, #32]
}
 800d52c:	bf00      	nop
 800d52e:	371c      	adds	r7, #28
 800d530:	46bd      	mov	sp, r7
 800d532:	bc80      	pop	{r7}
 800d534:	4770      	bx	lr

0800d536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d536:	b480      	push	{r7}
 800d538:	b085      	sub	sp, #20
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d54c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4313      	orrs	r3, r2
 800d554:	f043 0307 	orr.w	r3, r3, #7
 800d558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	609a      	str	r2, [r3, #8]
}
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	bc80      	pop	{r7}
 800d568:	4770      	bx	lr

0800d56a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b087      	sub	sp, #28
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	607a      	str	r2, [r7, #4]
 800d576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	021a      	lsls	r2, r3, #8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	431a      	orrs	r2, r3
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	4313      	orrs	r3, r2
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	4313      	orrs	r3, r2
 800d596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	609a      	str	r2, [r3, #8]
}
 800d59e:	bf00      	nop
 800d5a0:	371c      	adds	r7, #28
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bc80      	pop	{r7}
 800d5a6:	4770      	bx	lr

0800d5a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d101      	bne.n	800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5bc:	2302      	movs	r3, #2
 800d5be:	e050      	b.n	800d662 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a1b      	ldr	r2, [pc, #108]	@ (800d66c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d018      	beq.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a19      	ldr	r2, [pc, #100]	@ (800d670 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d013      	beq.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d616:	d00e      	beq.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a15      	ldr	r2, [pc, #84]	@ (800d674 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d009      	beq.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a14      	ldr	r2, [pc, #80]	@ (800d678 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d004      	beq.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a12      	ldr	r2, [pc, #72]	@ (800d67c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d10c      	bne.n	800d650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d63c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	4313      	orrs	r3, r2
 800d646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	bc80      	pop	{r7}
 800d66a:	4770      	bx	lr
 800d66c:	40012c00 	.word	0x40012c00
 800d670:	40013400 	.word	0x40013400
 800d674:	40000400 	.word	0x40000400
 800d678:	40000800 	.word	0x40000800
 800d67c:	40000c00 	.word	0x40000c00

0800d680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bc80      	pop	{r7}
 800d690:	4770      	bx	lr

0800d692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d692:	b480      	push	{r7}
 800d694:	b083      	sub	sp, #12
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d69a:	bf00      	nop
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bc80      	pop	{r7}
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e042      	b.n	800d73c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7fc fe4c 	bl	800a368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2224      	movs	r2, #36	@ 0x24
 800d6d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	68da      	ldr	r2, [r3, #12]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d6e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fc7f 	bl	800dfec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	691a      	ldr	r2, [r3, #16]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d6fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	695a      	ldr	r2, [r3, #20]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d70c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68da      	ldr	r2, [r3, #12]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d71c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2220      	movs	r2, #32
 800d728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2220      	movs	r2, #32
 800d730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b0ba      	sub	sp, #232	@ 0xe8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d770:	2300      	movs	r3, #0
 800d772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d77a:	f003 030f 	and.w	r3, r3, #15
 800d77e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10f      	bne.n	800d7aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d78e:	f003 0320 	and.w	r3, r3, #32
 800d792:	2b00      	cmp	r3, #0
 800d794:	d009      	beq.n	800d7aa <HAL_UART_IRQHandler+0x66>
 800d796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d003      	beq.n	800d7aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fb63 	bl	800de6e <UART_Receive_IT>
      return;
 800d7a8:	e25b      	b.n	800dc62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d7aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 80de 	beq.w	800d970 <HAL_UART_IRQHandler+0x22c>
 800d7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d106      	bne.n	800d7ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 80d1 	beq.w	800d970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <HAL_UART_IRQHandler+0xae>
 800d7da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d005      	beq.n	800d7f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ea:	f043 0201 	orr.w	r2, r3, #1
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00b      	beq.n	800d816 <HAL_UART_IRQHandler+0xd2>
 800d7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	2b00      	cmp	r3, #0
 800d808:	d005      	beq.n	800d816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d80e:	f043 0202 	orr.w	r2, r3, #2
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d81a:	f003 0302 	and.w	r3, r3, #2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00b      	beq.n	800d83a <HAL_UART_IRQHandler+0xf6>
 800d822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d832:	f043 0204 	orr.w	r2, r3, #4
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d83e:	f003 0308 	and.w	r3, r3, #8
 800d842:	2b00      	cmp	r3, #0
 800d844:	d011      	beq.n	800d86a <HAL_UART_IRQHandler+0x126>
 800d846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d84a:	f003 0320 	and.w	r3, r3, #32
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d105      	bne.n	800d85e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d856:	f003 0301 	and.w	r3, r3, #1
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d005      	beq.n	800d86a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d862:	f043 0208 	orr.w	r2, r3, #8
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 81f2 	beq.w	800dc58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d008      	beq.n	800d892 <HAL_UART_IRQHandler+0x14e>
 800d880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 faee 	bl	800de6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	bf14      	ite	ne
 800d8a0:	2301      	movne	r3, #1
 800d8a2:	2300      	moveq	r3, #0
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8ae:	f003 0308 	and.w	r3, r3, #8
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d103      	bne.n	800d8be <HAL_UART_IRQHandler+0x17a>
 800d8b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d04f      	beq.n	800d95e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f9f8 	bl	800dcb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d041      	beq.n	800d956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3314      	adds	r3, #20
 800d8d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8e0:	e853 3f00 	ldrex	r3, [r3]
 800d8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3314      	adds	r3, #20
 800d8fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d8fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d90a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1d9      	bne.n	800d8d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d922:	2b00      	cmp	r3, #0
 800d924:	d013      	beq.n	800d94e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d92a:	4a7e      	ldr	r2, [pc, #504]	@ (800db24 <HAL_UART_IRQHandler+0x3e0>)
 800d92c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d932:	4618      	mov	r0, r3
 800d934:	f7fd f8a2 	bl	800aa7c <HAL_DMA_Abort_IT>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d016      	beq.n	800d96c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d948:	4610      	mov	r0, r2
 800d94a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d94c:	e00e      	b.n	800d96c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f99c 	bl	800dc8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d954:	e00a      	b.n	800d96c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f998 	bl	800dc8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d95c:	e006      	b.n	800d96c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f994 	bl	800dc8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d96a:	e175      	b.n	800dc58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d96c:	bf00      	nop
    return;
 800d96e:	e173      	b.n	800dc58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d974:	2b01      	cmp	r3, #1
 800d976:	f040 814f 	bne.w	800dc18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d97e:	f003 0310 	and.w	r3, r3, #16
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 8148 	beq.w	800dc18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d98c:	f003 0310 	and.w	r3, r3, #16
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 8141 	beq.w	800dc18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60bb      	str	r3, [r7, #8]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	60bb      	str	r3, [r7, #8]
 800d9aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 80b6 	beq.w	800db28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 8145 	beq.w	800dc5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d9d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	f080 813e 	bcs.w	800dc5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	f000 8088 	beq.w	800db04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	330c      	adds	r3, #12
 800d9fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800da02:	e853 3f00 	ldrex	r3, [r3]
 800da06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800da0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	330c      	adds	r3, #12
 800da1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800da20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800da2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da30:	e841 2300 	strex	r3, r2, [r1]
 800da34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800da38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1d9      	bne.n	800d9f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3314      	adds	r3, #20
 800da46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da4a:	e853 3f00 	ldrex	r3, [r3]
 800da4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da52:	f023 0301 	bic.w	r3, r3, #1
 800da56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3314      	adds	r3, #20
 800da60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800da68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800da6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da70:	e841 2300 	strex	r3, r2, [r1]
 800da74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800da76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e1      	bne.n	800da40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3314      	adds	r3, #20
 800da82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da86:	e853 3f00 	ldrex	r3, [r3]
 800da8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800da8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3314      	adds	r3, #20
 800da9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800daa0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800daa2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800daa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800daa8:	e841 2300 	strex	r3, r2, [r1]
 800daac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800daae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1e3      	bne.n	800da7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2220      	movs	r2, #32
 800dab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	330c      	adds	r3, #12
 800dac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dad4:	f023 0310 	bic.w	r3, r3, #16
 800dad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	330c      	adds	r3, #12
 800dae2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dae6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dae8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800daec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800daf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e3      	bne.n	800dac2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fc ff81 	bl	800aa06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2202      	movs	r2, #2
 800db08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db12:	b29b      	uxth	r3, r3
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	b29b      	uxth	r3, r3
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f8bf 	bl	800dc9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db20:	e09c      	b.n	800dc5c <HAL_UART_IRQHandler+0x518>
 800db22:	bf00      	nop
 800db24:	0800dd79 	.word	0x0800dd79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db30:	b29b      	uxth	r3, r3
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 808e 	beq.w	800dc60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800db44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 8089 	beq.w	800dc60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	330c      	adds	r3, #12
 800db54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db58:	e853 3f00 	ldrex	r3, [r3]
 800db5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	330c      	adds	r3, #12
 800db6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800db72:	647a      	str	r2, [r7, #68]	@ 0x44
 800db74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db7a:	e841 2300 	strex	r3, r2, [r1]
 800db7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1e3      	bne.n	800db4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3314      	adds	r3, #20
 800db8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db90:	e853 3f00 	ldrex	r3, [r3]
 800db94:	623b      	str	r3, [r7, #32]
   return(result);
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	f023 0301 	bic.w	r3, r3, #1
 800db9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	3314      	adds	r3, #20
 800dba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dbaa:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbb2:	e841 2300 	strex	r3, r2, [r1]
 800dbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1e3      	bne.n	800db86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2220      	movs	r2, #32
 800dbc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	330c      	adds	r3, #12
 800dbd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	e853 3f00 	ldrex	r3, [r3]
 800dbda:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f023 0310 	bic.w	r3, r3, #16
 800dbe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	330c      	adds	r3, #12
 800dbec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dbf0:	61fa      	str	r2, [r7, #28]
 800dbf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf4:	69b9      	ldr	r1, [r7, #24]
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	e841 2300 	strex	r3, r2, [r1]
 800dbfc:	617b      	str	r3, [r7, #20]
   return(result);
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1e3      	bne.n	800dbcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2202      	movs	r2, #2
 800dc08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f844 	bl	800dc9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dc16:	e023      	b.n	800dc60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <HAL_UART_IRQHandler+0x4f4>
 800dc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f8b5 	bl	800dda0 <UART_Transmit_IT>
    return;
 800dc36:	e014      	b.n	800dc62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00e      	beq.n	800dc62 <HAL_UART_IRQHandler+0x51e>
 800dc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f8f4 	bl	800de3e <UART_EndTransmit_IT>
    return;
 800dc56:	e004      	b.n	800dc62 <HAL_UART_IRQHandler+0x51e>
    return;
 800dc58:	bf00      	nop
 800dc5a:	e002      	b.n	800dc62 <HAL_UART_IRQHandler+0x51e>
      return;
 800dc5c:	bf00      	nop
 800dc5e:	e000      	b.n	800dc62 <HAL_UART_IRQHandler+0x51e>
      return;
 800dc60:	bf00      	nop
  }
}
 800dc62:	37e8      	adds	r7, #232	@ 0xe8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr

0800dc7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bc80      	pop	{r7}
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bc80      	pop	{r7}
 800dc9c:	4770      	bx	lr

0800dc9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b083      	sub	sp, #12
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bc80      	pop	{r7}
 800dcb2:	4770      	bx	lr

0800dcb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b095      	sub	sp, #84	@ 0x54
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	330c      	adds	r3, #12
 800dcc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc6:	e853 3f00 	ldrex	r3, [r3]
 800dcca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	330c      	adds	r3, #12
 800dcda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dcdc:	643a      	str	r2, [r7, #64]	@ 0x40
 800dcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e5      	bne.n	800dcbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3314      	adds	r3, #20
 800dcf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	e853 3f00 	ldrex	r3, [r3]
 800dcfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	f023 0301 	bic.w	r3, r3, #1
 800dd06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3314      	adds	r3, #20
 800dd0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd18:	e841 2300 	strex	r3, r2, [r1]
 800dd1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e5      	bne.n	800dcf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d119      	bne.n	800dd60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	330c      	adds	r3, #12
 800dd32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	e853 3f00 	ldrex	r3, [r3]
 800dd3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	f023 0310 	bic.w	r3, r3, #16
 800dd42:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	330c      	adds	r3, #12
 800dd4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd4c:	61ba      	str	r2, [r7, #24]
 800dd4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd50:	6979      	ldr	r1, [r7, #20]
 800dd52:	69ba      	ldr	r2, [r7, #24]
 800dd54:	e841 2300 	strex	r3, r2, [r1]
 800dd58:	613b      	str	r3, [r7, #16]
   return(result);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1e5      	bne.n	800dd2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2220      	movs	r2, #32
 800dd64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dd6e:	bf00      	nop
 800dd70:	3754      	adds	r7, #84	@ 0x54
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bc80      	pop	{r7}
 800dd76:	4770      	bx	lr

0800dd78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff ff7a 	bl	800dc8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	2b21      	cmp	r3, #33	@ 0x21
 800ddb2:	d13e      	bne.n	800de32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddbc:	d114      	bne.n	800dde8 <UART_Transmit_IT+0x48>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d110      	bne.n	800dde8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a1b      	ldr	r3, [r3, #32]
 800ddca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a1b      	ldr	r3, [r3, #32]
 800dde0:	1c9a      	adds	r2, r3, #2
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	621a      	str	r2, [r3, #32]
 800dde6:	e008      	b.n	800ddfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	1c59      	adds	r1, r3, #1
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	6211      	str	r1, [r2, #32]
 800ddf2:	781a      	ldrb	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	3b01      	subs	r3, #1
 800de02:	b29b      	uxth	r3, r3
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	4619      	mov	r1, r3
 800de08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10f      	bne.n	800de2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68da      	ldr	r2, [r3, #12]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	e000      	b.n	800de34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800de32:	2302      	movs	r3, #2
  }
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	bc80      	pop	{r7}
 800de3c:	4770      	bx	lr

0800de3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68da      	ldr	r2, [r3, #12]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2220      	movs	r2, #32
 800de5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff ff02 	bl	800dc68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b08c      	sub	sp, #48	@ 0x30
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b22      	cmp	r3, #34	@ 0x22
 800de80:	f040 80ae 	bne.w	800dfe0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de8c:	d117      	bne.n	800debe <UART_Receive_IT+0x50>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d113      	bne.n	800debe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deac:	b29a      	uxth	r2, r3
 800deae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deb6:	1c9a      	adds	r2, r3, #2
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	629a      	str	r2, [r3, #40]	@ 0x28
 800debc:	e026      	b.n	800df0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dec4:	2300      	movs	r3, #0
 800dec6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ded0:	d007      	beq.n	800dee2 <UART_Receive_IT+0x74>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10a      	bne.n	800def0 <UART_Receive_IT+0x82>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	e008      	b.n	800df02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	b2db      	uxtb	r3, r3
 800def8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800defc:	b2da      	uxtb	r2, r3
 800defe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df10:	b29b      	uxth	r3, r3
 800df12:	3b01      	subs	r3, #1
 800df14:	b29b      	uxth	r3, r3
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	4619      	mov	r1, r3
 800df1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d15d      	bne.n	800dfdc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f022 0220 	bic.w	r2, r2, #32
 800df2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68da      	ldr	r2, [r3, #12]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800df3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	695a      	ldr	r2, [r3, #20]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f022 0201 	bic.w	r2, r2, #1
 800df4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2220      	movs	r2, #32
 800df54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df62:	2b01      	cmp	r3, #1
 800df64:	d135      	bne.n	800dfd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	330c      	adds	r3, #12
 800df72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	e853 3f00 	ldrex	r3, [r3]
 800df7a:	613b      	str	r3, [r7, #16]
   return(result);
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f023 0310 	bic.w	r3, r3, #16
 800df82:	627b      	str	r3, [r7, #36]	@ 0x24
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	330c      	adds	r3, #12
 800df8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df8c:	623a      	str	r2, [r7, #32]
 800df8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df90:	69f9      	ldr	r1, [r7, #28]
 800df92:	6a3a      	ldr	r2, [r7, #32]
 800df94:	e841 2300 	strex	r3, r2, [r1]
 800df98:	61bb      	str	r3, [r7, #24]
   return(result);
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e5      	bne.n	800df6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f003 0310 	and.w	r3, r3, #16
 800dfaa:	2b10      	cmp	r3, #16
 800dfac:	d10a      	bne.n	800dfc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff fe67 	bl	800dc9e <HAL_UARTEx_RxEventCallback>
 800dfd0:	e002      	b.n	800dfd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff fe51 	bl	800dc7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e002      	b.n	800dfe2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e000      	b.n	800dfe2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800dfe0:	2302      	movs	r3, #2
  }
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3730      	adds	r7, #48	@ 0x30
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	691b      	ldr	r3, [r3, #16]
 800dffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	68da      	ldr	r2, [r3, #12]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	430a      	orrs	r2, r1
 800e008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	689a      	ldr	r2, [r3, #8]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800e026:	f023 030c 	bic.w	r3, r3, #12
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	430b      	orrs	r3, r1
 800e032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	699a      	ldr	r2, [r3, #24]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	430a      	orrs	r2, r1
 800e048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a2c      	ldr	r2, [pc, #176]	@ (800e100 <UART_SetConfig+0x114>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d103      	bne.n	800e05c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e054:	f7fe fec2 	bl	800cddc <HAL_RCC_GetPCLK2Freq>
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	e002      	b.n	800e062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e05c:	f7fe feaa 	bl	800cdb4 <HAL_RCC_GetPCLK1Freq>
 800e060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	009a      	lsls	r2, r3, #2
 800e06c:	441a      	add	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	fbb2 f3f3 	udiv	r3, r2, r3
 800e078:	4a22      	ldr	r2, [pc, #136]	@ (800e104 <UART_SetConfig+0x118>)
 800e07a:	fba2 2303 	umull	r2, r3, r2, r3
 800e07e:	095b      	lsrs	r3, r3, #5
 800e080:	0119      	lsls	r1, r3, #4
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009a      	lsls	r2, r3, #2
 800e08c:	441a      	add	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	fbb2 f2f3 	udiv	r2, r2, r3
 800e098:	4b1a      	ldr	r3, [pc, #104]	@ (800e104 <UART_SetConfig+0x118>)
 800e09a:	fba3 0302 	umull	r0, r3, r3, r2
 800e09e:	095b      	lsrs	r3, r3, #5
 800e0a0:	2064      	movs	r0, #100	@ 0x64
 800e0a2:	fb00 f303 	mul.w	r3, r0, r3
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	011b      	lsls	r3, r3, #4
 800e0aa:	3332      	adds	r3, #50	@ 0x32
 800e0ac:	4a15      	ldr	r2, [pc, #84]	@ (800e104 <UART_SetConfig+0x118>)
 800e0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b2:	095b      	lsrs	r3, r3, #5
 800e0b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e0b8:	4419      	add	r1, r3
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009a      	lsls	r2, r3, #2
 800e0c4:	441a      	add	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800e0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e104 <UART_SetConfig+0x118>)
 800e0d2:	fba3 0302 	umull	r0, r3, r3, r2
 800e0d6:	095b      	lsrs	r3, r3, #5
 800e0d8:	2064      	movs	r0, #100	@ 0x64
 800e0da:	fb00 f303 	mul.w	r3, r0, r3
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	011b      	lsls	r3, r3, #4
 800e0e2:	3332      	adds	r3, #50	@ 0x32
 800e0e4:	4a07      	ldr	r2, [pc, #28]	@ (800e104 <UART_SetConfig+0x118>)
 800e0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ea:	095b      	lsrs	r3, r3, #5
 800e0ec:	f003 020f 	and.w	r2, r3, #15
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	440a      	add	r2, r1
 800e0f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e0f8:	bf00      	nop
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	40013800 	.word	0x40013800
 800e104:	51eb851f 	.word	0x51eb851f

0800e108 <__itoa>:
 800e108:	1e93      	subs	r3, r2, #2
 800e10a:	2b22      	cmp	r3, #34	@ 0x22
 800e10c:	b510      	push	{r4, lr}
 800e10e:	460c      	mov	r4, r1
 800e110:	d904      	bls.n	800e11c <__itoa+0x14>
 800e112:	2300      	movs	r3, #0
 800e114:	461c      	mov	r4, r3
 800e116:	700b      	strb	r3, [r1, #0]
 800e118:	4620      	mov	r0, r4
 800e11a:	bd10      	pop	{r4, pc}
 800e11c:	2a0a      	cmp	r2, #10
 800e11e:	d109      	bne.n	800e134 <__itoa+0x2c>
 800e120:	2800      	cmp	r0, #0
 800e122:	da07      	bge.n	800e134 <__itoa+0x2c>
 800e124:	232d      	movs	r3, #45	@ 0x2d
 800e126:	700b      	strb	r3, [r1, #0]
 800e128:	2101      	movs	r1, #1
 800e12a:	4240      	negs	r0, r0
 800e12c:	4421      	add	r1, r4
 800e12e:	f000 f805 	bl	800e13c <__utoa>
 800e132:	e7f1      	b.n	800e118 <__itoa+0x10>
 800e134:	2100      	movs	r1, #0
 800e136:	e7f9      	b.n	800e12c <__itoa+0x24>

0800e138 <itoa>:
 800e138:	f7ff bfe6 	b.w	800e108 <__itoa>

0800e13c <__utoa>:
 800e13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e13e:	b08b      	sub	sp, #44	@ 0x2c
 800e140:	4605      	mov	r5, r0
 800e142:	460b      	mov	r3, r1
 800e144:	466e      	mov	r6, sp
 800e146:	4c1d      	ldr	r4, [pc, #116]	@ (800e1bc <__utoa+0x80>)
 800e148:	f104 0c20 	add.w	ip, r4, #32
 800e14c:	4637      	mov	r7, r6
 800e14e:	6820      	ldr	r0, [r4, #0]
 800e150:	6861      	ldr	r1, [r4, #4]
 800e152:	3408      	adds	r4, #8
 800e154:	c703      	stmia	r7!, {r0, r1}
 800e156:	4564      	cmp	r4, ip
 800e158:	463e      	mov	r6, r7
 800e15a:	d1f7      	bne.n	800e14c <__utoa+0x10>
 800e15c:	7921      	ldrb	r1, [r4, #4]
 800e15e:	6820      	ldr	r0, [r4, #0]
 800e160:	7139      	strb	r1, [r7, #4]
 800e162:	1e91      	subs	r1, r2, #2
 800e164:	2922      	cmp	r1, #34	@ 0x22
 800e166:	6038      	str	r0, [r7, #0]
 800e168:	f04f 0100 	mov.w	r1, #0
 800e16c:	d904      	bls.n	800e178 <__utoa+0x3c>
 800e16e:	7019      	strb	r1, [r3, #0]
 800e170:	460b      	mov	r3, r1
 800e172:	4618      	mov	r0, r3
 800e174:	b00b      	add	sp, #44	@ 0x2c
 800e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e178:	1e58      	subs	r0, r3, #1
 800e17a:	4684      	mov	ip, r0
 800e17c:	fbb5 f7f2 	udiv	r7, r5, r2
 800e180:	fb02 5617 	mls	r6, r2, r7, r5
 800e184:	3628      	adds	r6, #40	@ 0x28
 800e186:	446e      	add	r6, sp
 800e188:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e18c:	460c      	mov	r4, r1
 800e18e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e192:	462e      	mov	r6, r5
 800e194:	42b2      	cmp	r2, r6
 800e196:	463d      	mov	r5, r7
 800e198:	f101 0101 	add.w	r1, r1, #1
 800e19c:	d9ee      	bls.n	800e17c <__utoa+0x40>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	545a      	strb	r2, [r3, r1]
 800e1a2:	1919      	adds	r1, r3, r4
 800e1a4:	1aa5      	subs	r5, r4, r2
 800e1a6:	42aa      	cmp	r2, r5
 800e1a8:	dae3      	bge.n	800e172 <__utoa+0x36>
 800e1aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e1ae:	780e      	ldrb	r6, [r1, #0]
 800e1b0:	3201      	adds	r2, #1
 800e1b2:	7006      	strb	r6, [r0, #0]
 800e1b4:	f801 5901 	strb.w	r5, [r1], #-1
 800e1b8:	e7f4      	b.n	800e1a4 <__utoa+0x68>
 800e1ba:	bf00      	nop
 800e1bc:	0800e416 	.word	0x0800e416

0800e1c0 <memset>:
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	4402      	add	r2, r0
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d100      	bne.n	800e1ca <memset+0xa>
 800e1c8:	4770      	bx	lr
 800e1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ce:	e7f9      	b.n	800e1c4 <memset+0x4>

0800e1d0 <__libc_init_array>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	2600      	movs	r6, #0
 800e1d4:	4d0c      	ldr	r5, [pc, #48]	@ (800e208 <__libc_init_array+0x38>)
 800e1d6:	4c0d      	ldr	r4, [pc, #52]	@ (800e20c <__libc_init_array+0x3c>)
 800e1d8:	1b64      	subs	r4, r4, r5
 800e1da:	10a4      	asrs	r4, r4, #2
 800e1dc:	42a6      	cmp	r6, r4
 800e1de:	d109      	bne.n	800e1f4 <__libc_init_array+0x24>
 800e1e0:	f000 f81a 	bl	800e218 <_init>
 800e1e4:	2600      	movs	r6, #0
 800e1e6:	4d0a      	ldr	r5, [pc, #40]	@ (800e210 <__libc_init_array+0x40>)
 800e1e8:	4c0a      	ldr	r4, [pc, #40]	@ (800e214 <__libc_init_array+0x44>)
 800e1ea:	1b64      	subs	r4, r4, r5
 800e1ec:	10a4      	asrs	r4, r4, #2
 800e1ee:	42a6      	cmp	r6, r4
 800e1f0:	d105      	bne.n	800e1fe <__libc_init_array+0x2e>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1f8:	4798      	blx	r3
 800e1fa:	3601      	adds	r6, #1
 800e1fc:	e7ee      	b.n	800e1dc <__libc_init_array+0xc>
 800e1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e202:	4798      	blx	r3
 800e204:	3601      	adds	r6, #1
 800e206:	e7f2      	b.n	800e1ee <__libc_init_array+0x1e>
 800e208:	0800e444 	.word	0x0800e444
 800e20c:	0800e444 	.word	0x0800e444
 800e210:	0800e444 	.word	0x0800e444
 800e214:	0800e448 	.word	0x0800e448

0800e218 <_init>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	bf00      	nop
 800e21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21e:	bc08      	pop	{r3}
 800e220:	469e      	mov	lr, r3
 800e222:	4770      	bx	lr

0800e224 <_fini>:
 800e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e226:	bf00      	nop
 800e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e22a:	bc08      	pop	{r3}
 800e22c:	469e      	mov	lr, r3
 800e22e:	4770      	bx	lr
